package org.jetbrains.plugins.scala.console;

import com.intellij.execution.ui.ConfigurationModuleSelector;
import com.intellij.openapi.fileChooser.FileChooserDescriptor;
import com.intellij.openapi.module.Module;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.ui.TextFieldWithBrowseButton;
import com.intellij.openapi.vfs.VirtualFile;
import com.intellij.ui.RawCommandLineEditor;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import javax.swing.*;
import java.awt.*;

/**
 * User: Alexander Podkhalyuzin
 * Date: 10.02.2009
 */
public class ScalaConsoleRunConfigurationForm {

    private RawCommandLineEditor javaOptionsEditor;
    private JPanel myPanel;
    private RawCommandLineEditor consoleArgsEditor;
    private TextFieldWithBrowseButton workingDirectoryField;
    private JComboBox moduleComboBox;
    private Project myProject;
    private ScalaConsoleRunConfiguration myConfiguration;

    private ConfigurationModuleSelector myModuleSelector;

    public ScalaConsoleRunConfigurationForm(final Project project,
                                            final ScalaConsoleRunConfiguration configuration) {
        myModuleSelector = new ConfigurationModuleSelector(project, moduleComboBox);
        myModuleSelector.reset(configuration);
        moduleComboBox.setEnabled(true);
        myProject = project;
        myConfiguration = configuration;
        javaOptionsEditor.setName("VM options");
        javaOptionsEditor.setDialogCaption("VM options editor");
        javaOptionsEditor.setText("-Djline.terminal=NONE");
        consoleArgsEditor.setName("Console arguments");
        consoleArgsEditor.setDialogCaption("Console arguments editor");
        consoleArgsEditor.setText("-usejavacp");
        addFileChooser("Choose Working Directory", workingDirectoryField, project);
        VirtualFile baseDir = project.getBaseDir();
        String path = baseDir != null ? baseDir.getPath() : "";
        workingDirectoryField.setText(path);
    }

    public JPanel getPanel() {
        return myPanel;
    }

    public String getJavaOptions() {
        return javaOptionsEditor.getText();
    }

    public void setJavaOptions(String s) {
        javaOptionsEditor.setText(s);
    }

    public void apply(ScalaConsoleRunConfiguration configuration) {
        setJavaOptions(configuration.javaOptions());
        setConsoleArgs(configuration.consoleArgs());
        setWorkingDirectory(configuration.workingDirectory());

        myModuleSelector.applyTo(configuration);
    }

    public String getConsoleArgs() {
        return consoleArgsEditor.getText();
    }

    public void setConsoleArgs(String consoleArgs) {
        this.consoleArgsEditor.setText(consoleArgs);
    }

    public String getWorkingDirectory() {
        return workingDirectoryField.getText();
    }

    public void setWorkingDirectory(String s) {
        workingDirectoryField.setText(s);
    }

    public Module getModule() {
        return myModuleSelector.getModule();
    }

    private FileChooserDescriptor addFileChooser(final String title,
                                                 final TextFieldWithBrowseButton textField,
                                                 final Project project) {
        final FileChooserDescriptor fileChooserDescriptor = new FileChooserDescriptor(false, true, false, false, false, false) {
            @Override
            public boolean isFileVisible(VirtualFile file, boolean showHiddenFiles) {
                return super.isFileVisible(file, showHiddenFiles) && file.isDirectory();
            }
        };
        fileChooserDescriptor.setTitle(title);
        textField.addBrowseFolderListener(title, null, project, fileChooserDescriptor);
        return fileChooserDescriptor;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        myPanel = new JPanel();
        myPanel.setLayout(new GridLayoutManager(9, 1, new Insets(0, 0, 0, 0), -1, -1));
        final Spacer spacer1 = new Spacer();
        myPanel.add(spacer1, new GridConstraints(8, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setText("VM options:");
        myPanel.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        javaOptionsEditor = new RawCommandLineEditor();
        javaOptionsEditor.setText("-Djline.terminal=NONE");
        myPanel.add(javaOptionsEditor, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("Console arguments:");
        myPanel.add(label2, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        consoleArgsEditor = new RawCommandLineEditor();
        consoleArgsEditor.setText("-usejavacp");
        myPanel.add(consoleArgsEditor, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JLabel label3 = new JLabel();
        label3.setText("Working directory:");
        myPanel.add(label3, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        workingDirectoryField = new TextFieldWithBrowseButton();
        myPanel.add(workingDirectoryField, new GridConstraints(5, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JLabel label4 = new JLabel();
        label4.setText("Use classpath and SDK of module:");
        myPanel.add(label4, new GridConstraints(6, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        moduleComboBox = new JComboBox();
        myPanel.add(moduleComboBox, new GridConstraints(7, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return myPanel;
    }
}
