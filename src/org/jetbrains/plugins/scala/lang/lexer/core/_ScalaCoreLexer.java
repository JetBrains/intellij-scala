/* The following code was generated by JFlex 1.4.3 on 11/28/14 6:00 PM */

package org.jetbrains.plugins.scala.lang.lexer.core;

import com.intellij.lexer.FlexLexer;
import com.intellij.openapi.util.text.StringUtil;
import com.intellij.psi.tree.IElementType;
import org.jetbrains.plugins.scala.lang.lexer.ScalaTokenTypesEx;
import org.jetbrains.plugins.scala.lang.scaladoc.parser.ScalaDocElementTypes;

import java.util.Stack;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 11/28/14 6:00 PM from the specification file
 * <tt>scala.flex</tt>
 */
public class _ScalaCoreLexer implements FlexLexer, ScalaTokenTypesEx {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int INJ_COMMON_STATE = 10;
  public static final int INSIDE_MULTI_LINE_INTERPOLATED_STRING = 8;
  public static final int WAIT_FOR_INTERPOLATED_STRING = 4;
  public static final int INSIDE_INTERPOLATED_STRING = 6;
  public static final int COMMON_STATE = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5, 5
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\35\1\47\1\37\1\0\1\47\1\37\16\35\4\0\1\47\1\23"+
    "\1\43\1\24\1\44\1\114\1\25\1\42\1\60\1\61\1\26\1\14"+
    "\1\116\1\15\1\11\1\32\1\3\1\110\1\107\5\7\1\6\1\112"+
    "\1\27\1\115\1\50\1\106\1\33\1\51\1\30\1\41\1\10\1\53"+
    "\1\20\1\12\1\16\5\34\1\1\6\34\1\76\1\54\3\34\1\5"+
    "\2\34\1\52\1\31\1\56\1\25\1\36\1\22\1\62\1\63\1\67"+
    "\1\21\1\13\1\17\1\105\1\72\1\74\1\71\1\104\1\2\1\77"+
    "\1\73\1\70\1\100\1\34\1\66\1\64\1\65\1\40\1\103\1\102"+
    "\1\4\1\75\1\101\1\55\1\25\1\57\1\25\6\35\1\45\32\35"+
    "\2\0\4\34\2\25\1\0\1\25\1\34\1\0\1\25\1\35\1\25"+
    "\1\0\1\25\1\25\3\0\1\34\1\25\3\0\1\34\5\0\27\34"+
    "\1\25\37\34\1\25\u01ca\34\4\0\14\34\16\0\5\34\7\0\1\34"+
    "\1\0\1\34\21\0\160\35\5\34\1\0\2\34\2\0\4\34\10\0"+
    "\1\34\1\0\3\34\1\0\1\34\1\0\24\34\1\0\123\34\1\25"+
    "\213\34\1\25\5\35\2\0\236\34\11\0\46\34\2\0\1\34\7\0"+
    "\47\34\11\0\55\35\1\0\1\35\1\0\2\35\1\0\2\35\1\0"+
    "\1\35\10\0\33\34\5\0\3\34\15\0\4\35\2\0\3\25\2\0"+
    "\1\34\2\0\2\25\13\35\5\0\53\34\37\35\4\0\2\34\1\35"+
    "\143\34\1\0\1\34\10\35\1\25\6\35\2\34\2\35\1\25\4\35"+
    "\2\34\12\35\3\34\2\25\1\34\17\0\1\35\1\34\1\35\36\34"+
    "\33\35\2\0\131\34\13\35\1\34\16\0\12\35\41\34\11\35\2\34"+
    "\1\25\3\0\1\34\5\0\26\34\4\35\1\34\11\35\1\34\3\35"+
    "\1\34\5\35\22\0\31\34\3\35\244\0\4\35\66\34\3\35\1\34"+
    "\22\35\1\34\7\35\12\34\2\35\2\0\12\35\1\0\7\34\1\0"+
    "\7\34\1\0\3\35\1\0\10\34\2\0\2\34\2\0\26\34\1\0"+
    "\7\34\1\0\1\34\3\0\4\34\2\0\1\35\1\34\7\35\2\0"+
    "\2\35\2\0\3\35\1\34\10\0\1\35\4\0\2\34\1\0\3\34"+
    "\2\35\2\0\12\35\4\34\6\0\1\25\1\34\5\0\3\35\1\0"+
    "\6\34\4\0\2\34\2\0\26\34\1\0\7\34\1\0\2\34\1\0"+
    "\2\34\1\0\2\34\2\0\1\35\1\0\5\35\4\0\2\35\2\0"+
    "\3\35\3\0\1\35\7\0\4\34\1\0\1\34\7\0\14\35\3\34"+
    "\1\35\13\0\3\35\1\0\11\34\1\0\3\34\1\0\26\34\1\0"+
    "\7\34\1\0\2\34\1\0\5\34\2\0\1\35\1\34\10\35\1\0"+
    "\3\35\1\0\3\35\2\0\1\34\17\0\2\34\2\35\2\0\12\35"+
    "\1\0\1\34\17\0\3\35\1\0\10\34\2\0\2\34\2\0\26\34"+
    "\1\0\7\34\1\0\2\34\1\0\5\34\2\0\1\35\1\34\7\35"+
    "\2\0\2\35\2\0\3\35\10\0\2\35\4\0\2\34\1\0\3\34"+
    "\2\35\2\0\12\35\1\25\1\34\20\0\1\35\1\34\1\0\6\34"+
    "\3\0\3\34\1\0\4\34\3\0\2\34\1\0\1\34\1\0\2\34"+
    "\3\0\2\34\3\0\3\34\3\0\14\34\4\0\5\35\3\0\3\35"+
    "\1\0\4\35\2\0\1\34\6\0\1\35\16\0\12\35\3\0\6\25"+
    "\1\34\1\25\6\0\3\35\1\0\10\34\1\0\3\34\1\0\27\34"+
    "\1\0\12\34\1\0\5\34\3\0\1\34\7\35\1\0\3\35\1\0"+
    "\4\35\7\0\2\35\1\0\2\34\6\0\2\34\2\35\2\0\12\35"+
    "\17\0\1\25\2\0\2\35\1\0\10\34\1\0\3\34\1\0\27\34"+
    "\1\0\12\34\1\0\5\34\2\0\1\35\1\34\7\35\1\0\3\35"+
    "\1\0\4\35\7\0\2\35\7\0\1\34\1\0\2\34\2\35\2\0"+
    "\12\35\1\0\2\34\17\0\2\35\1\0\10\34\1\0\3\34\1\0"+
    "\51\34\2\0\1\34\7\35\1\0\3\35\1\0\4\35\1\34\10\0"+
    "\1\35\10\0\2\34\2\35\2\0\12\35\11\0\1\25\6\34\2\0"+
    "\2\35\1\0\22\34\3\0\30\34\1\0\11\34\1\0\1\34\2\0"+
    "\7\34\3\0\1\35\4\0\6\35\1\0\1\35\1\0\10\35\22\0"+
    "\2\35\15\0\60\34\1\35\2\34\7\35\4\0\10\34\10\35\1\0"+
    "\12\35\47\0\2\34\1\0\1\34\2\0\2\34\1\0\1\34\2\0"+
    "\1\34\6\0\4\34\1\0\7\34\1\0\3\34\1\0\1\34\1\0"+
    "\1\34\2\0\2\34\1\0\4\34\1\35\2\34\6\35\1\0\2\35"+
    "\1\34\2\0\5\34\1\0\1\34\1\0\6\35\2\0\12\35\2\0"+
    "\2\34\42\0\1\34\3\25\17\0\5\25\2\35\6\25\12\35\12\0"+
    "\1\25\1\35\1\25\1\35\1\25\1\35\4\0\2\35\10\34\1\0"+
    "\44\34\4\0\24\35\1\0\2\35\5\34\13\35\1\0\44\35\1\0"+
    "\10\25\1\35\6\25\1\0\2\25\5\0\4\25\47\0\53\34\24\35"+
    "\1\34\12\35\6\0\6\34\4\35\4\34\3\35\1\34\3\35\2\34"+
    "\7\35\3\34\4\35\15\34\14\35\1\34\17\35\2\25\46\34\12\0"+
    "\53\34\1\0\1\34\3\0\u0149\34\1\0\4\34\2\0\7\34\1\0"+
    "\1\34\1\0\4\34\2\0\51\34\1\0\4\34\2\0\41\34\1\0"+
    "\4\34\2\0\7\34\1\0\1\34\1\0\4\34\2\0\17\34\1\0"+
    "\71\34\1\0\4\34\2\0\103\34\2\0\3\35\1\25\37\0\20\34"+
    "\12\25\6\0\125\34\14\0\u026c\34\2\0\21\34\1\0\32\34\5\0"+
    "\113\34\3\0\3\34\17\0\15\34\1\0\4\34\3\35\13\0\22\34"+
    "\3\35\13\0\22\34\2\35\14\0\15\34\1\0\3\34\1\0\2\35"+
    "\14\0\64\34\40\35\3\0\1\34\3\0\2\34\1\35\2\0\12\35"+
    "\41\0\3\35\2\0\12\35\6\0\130\34\10\0\51\34\1\35\1\34"+
    "\5\0\106\34\12\0\35\34\3\0\14\35\4\0\14\35\4\0\1\25"+
    "\5\0\12\35\36\34\2\0\5\34\13\0\54\34\4\0\21\35\7\34"+
    "\2\35\6\0\12\35\4\0\42\25\27\34\5\35\4\0\65\34\12\35"+
    "\1\0\35\35\2\0\13\35\6\0\12\35\15\0\1\34\130\0\5\35"+
    "\57\34\21\35\7\34\4\0\12\35\7\0\12\25\11\35\11\25\3\0"+
    "\3\35\36\34\12\35\3\0\2\34\12\35\6\0\46\34\16\35\14\0"+
    "\44\34\24\35\10\0\12\35\3\0\3\34\12\35\44\34\122\0\3\35"+
    "\1\0\25\35\4\34\1\35\4\34\1\35\15\0\300\34\47\35\25\0"+
    "\4\35\u0116\34\2\0\6\34\2\0\46\34\2\0\6\34\2\0\10\34"+
    "\1\0\1\34\1\0\1\34\1\0\1\34\1\0\37\34\2\0\65\34"+
    "\1\0\7\34\1\0\1\34\3\0\3\34\1\0\7\34\3\0\4\34"+
    "\2\0\6\34\4\0\15\34\5\0\3\34\1\0\7\34\16\0\5\35"+
    "\30\0\1\46\1\46\5\35\20\0\2\34\3\0\1\25\15\0\1\25"+
    "\1\0\1\34\13\0\5\35\5\0\6\35\1\0\1\34\10\0\3\25"+
    "\2\0\1\34\12\0\3\25\3\0\15\34\3\0\32\34\26\0\15\35"+
    "\4\0\1\35\3\0\14\35\17\0\2\25\1\34\4\25\1\34\2\25"+
    "\12\34\1\25\1\34\2\25\1\25\5\34\6\25\1\34\1\25\1\34"+
    "\1\25\1\34\1\25\4\34\1\25\13\34\2\25\4\34\5\25\5\34"+
    "\1\25\1\25\2\25\1\34\1\25\20\0\51\34\7\0\1\113\4\25"+
    "\5\25\2\25\4\25\1\25\2\25\1\25\2\25\1\25\7\25\1\25"+
    "\37\25\2\25\2\25\1\111\1\25\1\25\37\25\u010c\25\10\25\4\25"+
    "\24\25\2\25\7\25\2\0\121\25\1\25\36\25\31\25\50\25\6\25"+
    "\22\25\14\0\47\25\31\0\13\25\121\0\116\25\26\0\267\25\1\25"+
    "\11\25\1\25\66\25\10\25\157\25\1\25\44\25\1\25\153\25\1\0"+
    "\147\25\54\0\54\25\5\25\2\0\4\25\1\0\1\25\1\0\30\25"+
    "\12\0\20\25\u0100\25\203\25\26\0\77\25\4\0\40\25\2\0\u0102\25"+
    "\60\25\25\25\2\25\6\25\3\0\12\25\246\0\57\34\1\0\57\34"+
    "\1\0\205\34\6\25\4\34\3\35\16\0\46\34\12\0\66\34\11\0"+
    "\1\34\17\0\1\35\27\34\11\0\7\34\1\0\7\34\1\0\7\34"+
    "\1\0\7\34\1\0\7\34\1\0\7\34\1\0\7\34\1\0\7\34"+
    "\1\0\40\35\57\0\1\34\120\0\32\25\1\0\131\25\14\0\326\25"+
    "\32\0\14\25\10\0\1\25\3\34\12\0\2\25\14\0\1\25\11\34"+
    "\6\35\1\0\5\34\2\25\5\34\1\0\2\25\1\0\126\34\2\0"+
    "\2\35\2\0\3\34\1\0\132\34\1\0\4\34\5\0\51\34\3\0"+
    "\136\34\1\0\2\25\4\0\12\25\33\34\5\0\44\25\14\0\20\34"+
    "\37\25\13\0\47\25\17\0\40\25\12\0\47\25\17\0\77\25\1\0"+
    "\u0100\25\u19b6\34\12\0\100\25\u51cc\34\64\0\u048d\34\3\0\67\25\11\0"+
    "\56\34\2\0\u010d\34\3\0\20\34\12\35\2\34\24\0\57\34\1\35"+
    "\14\0\2\35\1\0\31\34\10\0\120\34\2\35\45\0\11\34\2\0"+
    "\147\34\2\0\4\34\1\0\2\34\16\0\12\34\120\0\10\34\1\35"+
    "\3\34\1\35\4\34\1\35\27\34\5\35\4\25\12\0\2\25\1\34"+
    "\1\25\6\0\64\34\14\0\2\35\62\34\21\35\13\0\12\35\6\0"+
    "\22\35\6\34\3\0\1\34\4\0\12\35\34\34\10\35\2\0\27\34"+
    "\15\35\14\0\35\34\3\0\4\35\57\34\16\35\16\0\1\34\12\35"+
    "\46\0\51\34\16\35\11\0\3\34\1\35\10\34\2\35\2\0\12\35"+
    "\6\0\27\34\3\25\1\34\1\35\4\0\60\34\1\35\1\34\3\35"+
    "\2\34\2\35\5\34\2\35\1\34\1\35\1\34\30\0\3\34\43\0"+
    "\6\34\2\0\6\34\2\0\6\34\11\0\7\34\1\0\7\34\221\0"+
    "\43\34\10\35\1\0\2\35\2\0\12\35\6\0\u2ba4\34\14\0\27\34"+
    "\4\0\61\34\u2104\0\u012e\34\2\0\76\34\2\0\152\34\46\0\7\34"+
    "\14\0\5\34\5\0\1\34\1\35\12\34\1\25\15\34\1\0\5\34"+
    "\1\0\1\34\1\0\2\34\1\0\2\34\1\0\154\34\41\0\u016b\34"+
    "\22\0\100\34\2\0\66\34\50\0\15\34\1\25\2\0\20\35\20\0"+
    "\7\35\14\0\2\34\30\0\3\34\22\0\1\25\1\0\3\25\2\0"+
    "\1\34\6\0\5\34\1\0\207\34\2\0\1\35\4\0\1\34\6\0"+
    "\1\25\4\0\12\35\2\0\3\25\2\0\32\34\4\0\1\34\1\0"+
    "\32\34\1\0\1\25\1\0\1\25\7\0\131\34\3\0\6\34\2\0"+
    "\6\34\2\0\6\34\2\0\3\34\3\0\2\34\1\25\1\0\1\25"+
    "\2\34\1\0\1\25\4\25\2\25\12\0\3\35\2\25\2\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\12\0\1\1\2\2\2\3\1\4\4\2\1\1\1\5"+
    "\1\6\1\7\3\2\1\10\1\11\1\1\1\12\1\11"+
    "\1\2\1\13\1\14\1\15\1\16\1\17\1\20\15\2"+
    "\1\21\1\22\1\23\1\24\1\25\1\2\1\26\1\27"+
    "\1\12\1\30\1\31\1\12\1\32\3\12\2\33\1\12"+
    "\14\0\1\2\1\34\1\2\2\3\2\0\1\35\1\0"+
    "\2\35\6\2\1\36\1\0\1\2\1\0\2\2\1\0"+
    "\1\2\1\37\1\40\1\0\3\41\1\0\1\12\1\0"+
    "\1\42\1\43\1\2\1\44\1\2\1\45\2\0\15\2"+
    "\1\46\10\2\1\26\3\0\2\47\1\0\1\50\1\51"+
    "\2\0\1\52\2\53\1\0\1\50\1\54\1\33\1\0"+
    "\1\33\15\0\1\2\1\34\2\0\1\2\1\0\1\3"+
    "\3\55\1\0\1\35\1\0\3\2\1\56\1\2\1\57"+
    "\1\2\1\0\2\2\2\0\2\2\1\60\3\41\2\0"+
    "\1\42\1\0\1\2\1\0\1\61\2\0\1\62\2\0"+
    "\5\2\1\63\11\2\1\64\12\2\1\65\1\66\1\67"+
    "\2\47\2\0\1\70\1\71\2\53\1\0\1\33\5\0"+
    "\1\34\1\72\2\55\1\0\1\73\4\2\1\0\1\74"+
    "\1\2\2\0\1\2\1\0\2\2\1\75\4\0\1\43"+
    "\5\0\3\2\1\76\2\2\1\77\1\100\2\2\1\101"+
    "\3\2\1\102\11\2\1\103\1\0\1\47\1\104\1\53"+
    "\2\0\1\55\1\2\1\105\1\2\1\106\1\74\1\0"+
    "\1\2\2\0\1\75\1\0\1\107\6\0\2\2\1\110"+
    "\1\111\1\112\1\2\1\113\1\0\1\2\1\114\4\2"+
    "\1\115\1\116\1\117\3\2\1\120\3\0\3\2\1\0"+
    "\1\2\1\22\1\23\1\107\2\0\1\121\3\0\1\2"+
    "\1\122\1\123\2\0\2\2\1\124\2\2\1\125\3\2"+
    "\1\126\1\127\1\130\1\0\1\2\3\0\1\2\2\0"+
    "\4\2\1\131\1\2\1\132\1\0\1\74\3\0\1\133"+
    "\2\0\2\2\1\134\1\135\1\2\1\74\4\0\2\2"+
    "\1\136\1\137\1\0\1\137\1\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[442];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\117\0\236\0\355\0\u013c\0\u018b\0\u01da\0\u0229"+
    "\0\u0278\0\u02c7\0\u0316\0\u0365\0\u03b4\0\u0403\0\u0452\0\u04a1"+
    "\0\u04f0\0\u053f\0\u058e\0\u05dd\0\u062c\0\u067b\0\u06ca\0\u053f"+
    "\0\u0719\0\u0768\0\u07b7\0\u0365\0\u0806\0\u0855\0\u08a4\0\u0316"+
    "\0\u08f3\0\u0316\0\u0942\0\u0316\0\u0316\0\u0991\0\u0316\0\u09e0"+
    "\0\u0a2f\0\u0a7e\0\u0acd\0\u0b1c\0\u0b6b\0\u0bba\0\u0c09\0\u0c58"+
    "\0\u0ca7\0\u0cf6\0\u0d45\0\u0d94\0\u0de3\0\u053f\0\u053f\0\u0316"+
    "\0\u0316\0\u0e32\0\u0e81\0\u0ed0\0\u0f1f\0\u0316\0\u0316\0\u0f6e"+
    "\0\u0fbd\0\u100c\0\u105b\0\u0316\0\u10aa\0\u10f9\0\u1148\0\u1197"+
    "\0\u11e6\0\u1235\0\u1284\0\u12d3\0\u1322\0\u1371\0\u13c0\0\u140f"+
    "\0\u145e\0\u14ad\0\u14fc\0\u154b\0\u159a\0\u15e9\0\u1638\0\u1687"+
    "\0\u16d6\0\u1725\0\u1774\0\u17c3\0\u0316\0\u1812\0\u1861\0\u18b0"+
    "\0\u18ff\0\u194e\0\u199d\0\u19ec\0\u0365\0\u062c\0\u0316\0\u1a3b"+
    "\0\u1a8a\0\u1ad9\0\u1b28\0\u1b77\0\u1bc6\0\u053f\0\u1c15\0\u1c64"+
    "\0\u1cb3\0\u1d02\0\u1d51\0\u1da0\0\u1def\0\u1e3e\0\u0316\0\u1e8d"+
    "\0\u053f\0\u1edc\0\u053f\0\u1f2b\0\u1f7a\0\u1fc9\0\u2018\0\u2067"+
    "\0\u20b6\0\u2105\0\u2154\0\u21a3\0\u21f2\0\u2241\0\u2290\0\u22df"+
    "\0\u232e\0\u237d\0\u0365\0\u23cc\0\u241b\0\u246a\0\u24b9\0\u2508"+
    "\0\u2557\0\u25a6\0\u25f5\0\u2644\0\u2693\0\u26e2\0\u0f1f\0\u2731"+
    "\0\u2780\0\u27cf\0\u2731\0\u0316\0\u281e\0\u286d\0\u0316\0\u28bc"+
    "\0\u290b\0\u295a\0\u28bc\0\u0316\0\u29a9\0\u1148\0\u0316\0\u29f8"+
    "\0\u2a47\0\u2a96\0\u2ae5\0\u2b34\0\u2b83\0\u2bd2\0\u0316\0\u2c21"+
    "\0\u2c70\0\u0316\0\u2cbf\0\u2d0e\0\u2d5d\0\u2dac\0\u2dfb\0\u2e4a"+
    "\0\u2e99\0\u2ee8\0\u2f37\0\u2f86\0\u2fd5\0\u3024\0\u3073\0\u30c2"+
    "\0\u3111\0\u3160\0\u31af\0\u31fe\0\u324d\0\u329c\0\u0365\0\u062c"+
    "\0\u32eb\0\u333a\0\u3389\0\u33d8\0\u3427\0\u3476\0\u34c5\0\u0316"+
    "\0\u3514\0\u3563\0\u35b2\0\u3601\0\u3650\0\u0316\0\u369f\0\u36ee"+
    "\0\u373d\0\u0316\0\u378c\0\u37db\0\u0316\0\u382a\0\u3879\0\u38c8"+
    "\0\u3917\0\u3966\0\u39b5\0\u3a04\0\u0365\0\u3a53\0\u3aa2\0\u3af1"+
    "\0\u3b40\0\u3b8f\0\u3bde\0\u3c2d\0\u3c7c\0\u3ccb\0\u0365\0\u3d1a"+
    "\0\u3d69\0\u3db8\0\u3e07\0\u3e56\0\u3ea5\0\u3ef4\0\u3f43\0\u3f92"+
    "\0\u3fe1\0\u0365\0\u0365\0\u4030\0\u407f\0\u0316\0\u40ce\0\u411d"+
    "\0\u416c\0\u0316\0\u41bb\0\u0316\0\u420a\0\u1148\0\u4259\0\u42a8"+
    "\0\u42f7\0\u1322\0\u4346\0\u4395\0\u0365\0\u43e4\0\u0316\0\u4433"+
    "\0\u0365\0\u4482\0\u44d1\0\u4520\0\u456f\0\u45be\0\u1a8a\0\u460d"+
    "\0\u465c\0\u46ab\0\u46fa\0\u4749\0\u4798\0\u47e7\0\u053f\0\u4836"+
    "\0\u4885\0\u48d4\0\u4923\0\u053f\0\u4972\0\u49c1\0\u4a10\0\u4a5f"+
    "\0\u4aae\0\u4afd\0\u4b4c\0\u4b9b\0\u0365\0\u4bea\0\u4c39\0\u0365"+
    "\0\u0365\0\u4c88\0\u4cd7\0\u4d26\0\u4d75\0\u4dc4\0\u4e13\0\u0365"+
    "\0\u4e62\0\u4eb1\0\u4f00\0\u4f4f\0\u4f9e\0\u4fed\0\u503c\0\u508b"+
    "\0\u50da\0\u0365\0\u5129\0\u27cf\0\u416c\0\u295a\0\u5178\0\u51c7"+
    "\0\u3073\0\u5216\0\u0365\0\u5265\0\u52b4\0\u32eb\0\u5303\0\u5352"+
    "\0\u53a1\0\u53f0\0\u0316\0\u543f\0\u053f\0\u548e\0\u54dd\0\u552c"+
    "\0\u557b\0\u55ca\0\u5619\0\u5668\0\u56b7\0\u0365\0\u0365\0\u0365"+
    "\0\u5706\0\u0365\0\u5755\0\u57a4\0\u0365\0\u57f3\0\u5842\0\u5891"+
    "\0\u58e0\0\u0365\0\u0365\0\u0365\0\u592f\0\u597e\0\u59cd\0\u0365"+
    "\0\u5a1c\0\u2bd2\0\u5a6b\0\u5aba\0\u5b09\0\u5b58\0\u5ba7\0\u5bf6"+
    "\0\u0316\0\u0316\0\u0316\0\u5c45\0\u5c94\0\u5ce3\0\u5d32\0\u5d81"+
    "\0\u5dd0\0\u5e1f\0\u0365\0\u0365\0\u5e6e\0\u5ebd\0\u5f0c\0\u5f5b"+
    "\0\u0365\0\u5faa\0\u5ff9\0\u0365\0\u6048\0\u6097\0\u60e6\0\u0365"+
    "\0\u0365\0\u0365\0\u6135\0\u6184\0\u61d3\0\u6222\0\u6271\0\u62c0"+
    "\0\u630f\0\u635e\0\u63ad\0\u63fc\0\u644b\0\u649a\0\u0365\0\u64e9"+
    "\0\u0365\0\u6538\0\u460d\0\u6587\0\u65d6\0\u6625\0\u0365\0\u6674"+
    "\0\u66c3\0\u6712\0\u6761\0\u0365\0\u0365\0\u67b0\0\u5303\0\u67ff"+
    "\0\u684e\0\u689d\0\u68ec\0\u693b\0\u698a\0\u0365\0\u0316\0\u69d9"+
    "\0\u0365\0\u6a28";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[442];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\13\1\14\1\15\1\16\2\14\2\17\1\14\1\20"+
    "\1\14\1\21\2\22\1\14\1\23\1\14\1\24\1\25"+
    "\1\22\1\26\2\22\1\27\1\30\1\31\1\32\1\33"+
    "\1\14\1\13\1\34\1\35\2\14\1\36\1\37\1\14"+
    "\2\35\1\40\1\41\1\22\1\42\2\14\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\14\1\51\1\52\1\53"+
    "\1\54\1\55\2\14\1\56\1\57\1\60\1\14\1\61"+
    "\1\62\1\14\1\63\1\64\2\14\1\65\2\17\1\66"+
    "\1\17\1\67\1\22\1\70\1\71\1\13\1\14\1\15"+
    "\1\16\2\14\2\17\1\14\1\20\1\14\1\21\2\22"+
    "\1\14\1\23\1\14\1\24\1\25\1\22\1\26\2\22"+
    "\1\27\1\30\1\31\1\32\1\33\1\14\1\13\1\34"+
    "\1\35\2\14\1\36\1\37\1\14\2\35\1\40\1\72"+
    "\1\22\1\42\2\14\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\14\1\51\1\52\1\53\1\54\1\55\2\14"+
    "\1\56\1\57\1\60\1\14\1\61\1\62\1\14\1\63"+
    "\1\64\2\14\1\65\2\17\1\66\1\17\1\67\1\22"+
    "\1\70\1\71\43\0\1\73\53\0\31\74\1\75\5\74"+
    "\1\76\3\74\1\77\1\100\52\74\43\101\1\102\1\103"+
    "\52\101\1\104\2\105\1\104\2\105\2\104\1\105\1\104"+
    "\2\105\2\106\4\105\1\107\11\106\1\105\1\104\1\105"+
    "\1\104\2\105\2\104\1\105\3\104\2\106\1\104\2\105"+
    "\5\104\24\105\1\106\2\104\1\106\1\104\2\106\2\104"+
    "\1\0\2\110\1\0\2\110\2\0\1\110\1\0\2\110"+
    "\2\0\4\110\12\0\1\110\1\0\1\110\1\0\2\110"+
    "\2\0\1\110\6\0\2\110\5\0\24\110\11\0\31\111"+
    "\1\112\5\111\1\113\3\111\1\114\1\115\52\111\3\0"+
    "\1\116\2\0\2\117\77\0\2\117\1\0\1\117\5\0"+
    "\2\120\1\121\2\120\2\121\1\120\1\0\2\120\2\122"+
    "\4\120\1\123\11\122\1\120\1\121\1\120\1\0\2\120"+
    "\2\0\1\120\1\121\2\0\2\122\1\0\2\120\5\0"+
    "\24\120\1\122\2\121\1\122\1\121\2\122\122\0\10\14"+
    "\1\0\2\14\2\0\4\14\12\0\2\14\1\124\1\0"+
    "\2\14\1\0\1\125\2\14\5\0\2\14\5\0\24\14"+
    "\1\0\2\14\1\0\1\14\5\0\10\14\1\0\2\14"+
    "\2\0\4\14\12\0\2\14\1\124\1\0\2\14\1\0"+
    "\1\125\2\14\5\0\2\14\5\0\1\126\23\14\1\0"+
    "\2\14\1\0\1\14\5\0\2\127\1\130\2\131\1\132"+
    "\1\130\1\0\1\133\2\134\2\0\4\135\65\0\2\130"+
    "\1\0\1\132\5\0\2\127\1\17\2\0\2\17\1\0"+
    "\1\133\2\134\2\0\4\135\65\0\2\17\1\0\1\17"+
    "\7\0\1\136\2\0\2\136\77\0\2\136\1\0\1\136"+
    "\5\0\1\14\1\137\1\14\1\140\4\14\1\0\2\14"+
    "\2\0\4\14\12\0\2\14\1\124\1\0\2\14\1\0"+
    "\1\125\2\14\5\0\2\14\5\0\24\14\1\0\2\14"+
    "\1\0\1\14\20\0\2\22\5\0\11\22\14\0\2\22"+
    "\34\0\1\22\2\0\1\22\1\0\2\22\3\0\10\14"+
    "\1\0\2\14\2\0\4\14\12\0\2\14\1\124\1\0"+
    "\2\14\1\0\1\125\2\14\5\0\2\14\5\0\1\141"+
    "\5\14\1\142\3\14\1\143\11\14\1\0\2\14\1\0"+
    "\1\14\5\0\10\14\1\0\1\14\1\144\2\0\4\14"+
    "\12\0\2\14\1\124\1\0\2\14\1\0\1\125\2\14"+
    "\5\0\2\14\5\0\6\14\1\145\15\14\1\0\2\14"+
    "\1\0\1\14\4\0\22\146\1\147\6\146\1\150\5\146"+
    "\1\0\5\146\2\0\50\146\14\0\2\22\5\0\1\151"+
    "\10\22\14\0\2\22\34\0\1\22\2\0\1\22\1\0"+
    "\2\22\16\0\2\22\5\0\4\22\1\152\4\22\14\0"+
    "\2\22\34\0\1\22\2\0\1\22\1\0\2\22\16\0"+
    "\2\22\5\0\11\22\4\0\1\153\7\0\2\22\34\0"+
    "\1\22\2\0\1\22\1\0\2\22\16\0\2\22\5\0"+
    "\3\22\1\154\3\22\1\155\1\22\14\0\2\22\34\0"+
    "\1\22\2\0\1\22\1\0\2\22\16\0\2\22\5\0"+
    "\4\22\1\156\4\22\14\0\2\22\34\0\1\22\2\0"+
    "\1\22\1\0\2\22\41\0\1\35\5\0\3\35\47\0"+
    "\1\157\2\160\1\157\2\160\2\157\1\160\1\157\2\160"+
    "\2\161\4\160\1\157\6\161\1\162\2\161\1\160\1\157"+
    "\1\160\1\0\2\160\1\163\1\157\1\160\3\157\2\161"+
    "\1\157\2\160\5\157\24\160\1\161\2\157\1\161\1\157"+
    "\2\161\2\157\31\164\1\165\5\164\1\0\3\164\1\166"+
    "\53\164\1\0\2\167\1\0\2\167\2\0\1\167\1\0"+
    "\2\167\1\22\1\67\4\167\1\0\1\170\3\22\1\171"+
    "\4\22\1\167\1\0\1\167\1\0\2\167\2\0\1\167"+
    "\3\0\1\22\1\172\1\0\2\167\5\0\24\167\1\22"+
    "\2\0\1\22\1\0\1\22\1\173\52\0\1\174\116\0"+
    "\1\175\47\0\10\14\1\0\2\14\2\0\4\14\12\0"+
    "\2\14\1\124\1\0\2\14\1\0\1\125\2\14\5\0"+
    "\2\14\5\0\1\14\1\176\22\14\1\0\2\14\1\0"+
    "\1\14\5\0\10\14\1\0\1\14\1\177\2\0\4\14"+
    "\12\0\2\14\1\124\1\0\1\200\1\14\1\0\1\125"+
    "\2\14\5\0\2\14\5\0\24\14\1\0\2\14\1\0"+
    "\1\14\5\0\10\14\1\0\2\14\2\0\4\14\12\0"+
    "\2\14\1\124\1\0\2\14\1\0\1\125\2\14\5\0"+
    "\2\14\5\0\4\14\1\201\3\14\1\202\2\14\1\203"+
    "\10\14\1\0\2\14\1\0\1\14\5\0\10\14\1\0"+
    "\1\14\1\204\2\0\4\14\12\0\2\14\1\124\1\0"+
    "\2\14\1\0\1\125\2\14\5\0\2\14\5\0\24\14"+
    "\1\0\2\14\1\0\1\14\5\0\1\14\1\205\6\14"+
    "\1\0\2\14\2\0\4\14\12\0\2\14\1\124\1\0"+
    "\2\14\1\0\1\125\2\14\5\0\2\14\5\0\1\206"+
    "\23\14\1\0\2\14\1\0\1\14\5\0\10\14\1\0"+
    "\2\14\2\0\4\14\12\0\2\14\1\124\1\0\2\14"+
    "\1\0\1\125\2\14\5\0\2\14\5\0\1\14\1\207"+
    "\17\14\1\210\2\14\1\0\2\14\1\0\1\14\5\0"+
    "\10\14\1\0\1\14\1\211\2\0\4\14\12\0\2\14"+
    "\1\124\1\0\1\212\1\14\1\0\1\125\2\14\5\0"+
    "\2\14\5\0\24\14\1\0\2\14\1\0\1\14\5\0"+
    "\10\14\1\0\2\14\2\0\1\14\1\213\2\14\12\0"+
    "\2\14\1\124\1\0\2\14\1\0\1\125\2\14\5\0"+
    "\2\14\5\0\15\14\1\214\6\14\1\0\2\14\1\0"+
    "\1\14\5\0\10\14\1\0\2\14\2\0\4\14\12\0"+
    "\2\14\1\124\1\0\2\14\1\0\1\125\2\14\5\0"+
    "\2\14\5\0\12\14\1\215\11\14\1\0\2\14\1\0"+
    "\1\14\5\0\10\14\1\0\2\14\2\0\4\14\12\0"+
    "\2\14\1\124\1\0\2\14\1\0\1\125\2\14\5\0"+
    "\2\14\5\0\1\216\23\14\1\0\2\14\1\0\1\14"+
    "\5\0\10\14\1\0\2\14\2\0\4\14\12\0\2\14"+
    "\1\124\1\0\2\14\1\0\1\125\2\14\5\0\2\14"+
    "\5\0\1\217\3\14\1\220\17\14\1\0\2\14\1\0"+
    "\1\14\5\0\10\14\1\0\2\14\2\0\4\14\12\0"+
    "\2\14\1\124\1\0\2\14\1\0\1\125\2\14\5\0"+
    "\2\14\5\0\10\14\1\221\1\14\1\222\11\14\1\0"+
    "\2\14\1\0\1\14\5\0\10\14\1\0\2\14\2\0"+
    "\4\14\12\0\2\14\1\124\1\0\2\14\1\0\1\125"+
    "\2\14\5\0\2\14\5\0\1\223\23\14\1\0\2\14"+
    "\1\0\1\14\20\0\2\22\5\0\10\22\1\66\14\0"+
    "\2\22\34\0\1\22\2\0\1\22\1\0\2\22\16\0"+
    "\1\22\1\67\5\0\4\22\1\171\4\22\14\0\2\22"+
    "\34\0\1\22\2\0\1\22\1\0\1\22\1\173\2\0"+
    "\31\224\1\225\5\224\1\0\3\224\1\226\1\0\52\224"+
    "\31\74\1\227\5\74\1\0\3\74\2\0\111\74\1\0"+
    "\57\74\1\0\2\230\1\0\2\230\2\0\1\230\1\0"+
    "\2\230\2\231\4\230\1\232\11\231\1\230\1\0\1\230"+
    "\1\0\2\230\2\0\1\233\3\0\2\231\1\0\2\230"+
    "\1\234\4\0\24\230\1\231\2\0\1\231\1\0\2\231"+
    "\2\0\43\101\1\235\1\0\115\101\1\236\1\237\52\101"+
    "\1\0\2\240\1\0\2\240\2\0\1\240\1\0\2\240"+
    "\2\241\4\240\1\242\11\241\1\240\1\0\1\240\1\0"+
    "\2\240\2\0\1\243\3\0\2\241\1\0\2\240\1\244"+
    "\4\0\24\240\1\241\2\0\1\241\1\0\2\241\3\0"+
    "\10\105\1\0\2\105\2\0\4\105\12\0\2\105\1\245"+
    "\1\0\2\105\2\0\2\105\5\0\2\105\5\0\24\105"+
    "\1\0\2\105\1\0\1\105\20\0\2\106\5\0\11\106"+
    "\14\0\2\106\34\0\1\106\2\0\1\106\1\0\2\106"+
    "\2\0\22\246\1\247\6\246\1\250\5\246\1\0\5\246"+
    "\2\0\50\246\1\0\10\110\1\0\2\110\2\0\4\110"+
    "\12\0\2\110\1\251\1\0\2\110\2\0\2\110\5\0"+
    "\2\110\5\0\24\110\1\0\2\110\1\0\1\110\4\0"+
    "\37\111\1\113\3\111\1\252\1\115\52\111\31\113\1\253"+
    "\11\113\1\254\1\0\115\113\1\254\1\0\52\113\31\0"+
    "\1\255\11\0\1\256\104\0\1\255\66\0\2\257\1\260"+
    "\2\261\1\0\1\260\77\0\2\260\7\0\2\257\1\117"+
    "\2\0\2\117\77\0\2\117\1\0\1\117\5\0\2\120"+
    "\1\121\2\120\2\121\1\120\1\262\2\120\2\0\4\120"+
    "\12\0\1\120\1\121\1\120\1\0\2\120\2\0\1\120"+
    "\1\121\5\0\2\120\5\0\24\120\1\0\2\121\1\0"+
    "\1\121\5\0\2\120\1\121\2\120\2\121\1\120\1\0"+
    "\2\120\2\0\4\120\12\0\1\120\1\121\1\120\1\0"+
    "\2\120\2\0\1\120\1\121\5\0\2\120\5\0\24\120"+
    "\1\0\2\121\1\0\1\121\15\0\1\262\2\0\2\122"+
    "\5\0\11\122\2\0\1\121\11\0\2\122\34\0\1\122"+
    "\2\0\1\122\1\0\2\122\2\0\22\123\1\263\14\123"+
    "\1\0\5\123\2\264\50\123\1\0\10\14\1\0\2\14"+
    "\2\265\4\14\1\0\11\265\2\14\1\124\1\0\2\14"+
    "\1\0\1\125\2\14\2\0\2\265\1\0\2\14\5\0"+
    "\24\14\1\265\2\14\1\265\1\14\2\265\2\0\31\266"+
    "\1\267\5\266\1\0\3\266\1\270\1\0\52\266\1\0"+
    "\10\14\1\0\2\14\2\0\4\14\12\0\2\14\1\124"+
    "\1\0\2\14\1\0\1\125\2\14\5\0\2\14\5\0"+
    "\17\14\1\271\4\14\1\0\2\14\1\0\1\14\15\0"+
    "\1\272\106\0\2\127\1\130\2\0\1\132\1\130\1\0"+
    "\1\133\2\134\2\0\4\135\65\0\2\130\1\0\1\132"+
    "\7\0\1\273\2\0\3\273\1\0\2\273\2\0\4\273"+
    "\17\0\1\273\11\0\1\273\6\0\2\273\3\0\1\273"+
    "\17\0\2\273\1\0\1\273\7\0\1\132\2\0\2\132"+
    "\1\0\1\136\2\134\2\0\4\135\65\0\2\132\1\0"+
    "\1\132\5\0\2\274\1\136\2\274\2\136\1\274\1\0"+
    "\2\275\2\276\4\274\1\277\11\276\1\274\1\0\1\274"+
    "\1\0\2\274\2\0\1\274\3\0\2\276\1\0\2\274"+
    "\5\0\24\274\1\276\2\136\1\276\1\136\2\276\5\0"+
    "\1\300\2\0\2\300\4\0\2\301\71\0\2\300\1\0"+
    "\1\300\7\0\1\136\2\0\2\136\2\0\2\134\2\0"+
    "\4\135\65\0\2\136\1\0\1\136\5\0\10\14\1\0"+
    "\2\14\2\0\4\14\12\0\2\14\1\124\1\0\2\14"+
    "\1\0\1\125\2\14\5\0\2\14\5\0\2\14\1\302"+
    "\21\14\1\0\2\14\1\0\1\14\5\0\10\14\1\0"+
    "\2\14\2\0\4\14\12\0\2\14\1\124\1\0\2\14"+
    "\1\0\1\125\2\14\5\0\2\14\5\0\3\14\1\303"+
    "\20\14\1\0\2\14\1\0\1\14\5\0\1\14\1\304"+
    "\6\14\1\0\2\14\2\0\4\14\12\0\2\14\1\124"+
    "\1\0\2\14\1\0\1\125\2\14\5\0\2\14\5\0"+
    "\24\14\1\0\2\14\1\0\1\14\5\0\10\14\1\0"+
    "\2\14\2\0\4\14\12\0\2\14\1\124\1\0\2\14"+
    "\1\0\1\125\2\14\5\0\2\14\5\0\4\14\1\305"+
    "\17\14\1\0\2\14\1\0\1\14\5\0\10\14\1\0"+
    "\2\14\2\0\4\14\12\0\2\14\1\124\1\0\2\14"+
    "\1\0\1\125\2\14\5\0\2\14\5\0\11\14\1\306"+
    "\12\14\1\0\2\14\1\0\1\14\5\0\10\14\1\0"+
    "\2\14\2\0\1\14\1\307\2\14\12\0\2\14\1\124"+
    "\1\0\2\14\1\0\1\125\2\14\5\0\2\14\5\0"+
    "\24\14\1\0\2\14\1\0\1\14\4\0\22\146\1\310"+
    "\6\146\1\150\5\146\1\0\57\146\14\311\2\151\5\311"+
    "\1\312\10\151\14\311\2\151\34\311\1\151\2\311\1\151"+
    "\1\311\2\151\2\311\14\0\2\22\5\0\1\22\1\313"+
    "\7\22\14\0\2\22\34\0\1\22\2\0\1\22\1\0"+
    "\2\22\111\0\1\314\7\0\14\315\2\316\5\315\3\316"+
    "\1\317\3\316\1\22\1\316\14\315\2\316\34\315\1\316"+
    "\2\315\1\316\1\315\2\316\2\315\37\155\1\0\57\155"+
    "\31\0\1\320\10\0\1\320\55\0\10\321\1\0\2\321"+
    "\2\0\4\321\7\0\1\320\2\0\2\321\1\322\1\0"+
    "\2\321\1\320\1\0\2\321\5\0\2\321\5\0\24\321"+
    "\1\0\2\321\1\0\1\321\20\0\2\323\5\0\11\323"+
    "\6\0\1\320\5\0\2\323\34\0\1\323\2\0\1\323"+
    "\1\0\2\323\2\0\3\157\1\324\3\157\1\324\4\157"+
    "\2\161\5\157\11\161\3\157\1\0\1\325\7\157\2\161"+
    "\34\157\1\161\2\324\1\161\1\157\2\161\2\157\42\0"+
    "\1\320\54\0\31\164\1\165\5\164\1\0\3\164\1\326"+
    "\112\164\1\0\57\164\43\0\1\327\67\0\1\22\1\330"+
    "\5\0\11\22\14\0\2\22\1\331\33\0\1\22\2\0"+
    "\1\22\1\0\2\22\3\0\2\167\1\0\2\167\2\0"+
    "\1\167\1\0\2\167\2\22\4\167\1\0\11\22\1\167"+
    "\1\0\1\167\1\0\2\167\2\0\1\167\3\0\2\22"+
    "\1\0\2\167\5\0\24\167\1\22\2\0\1\22\1\0"+
    "\2\22\3\0\2\332\1\0\2\332\2\0\1\332\1\0"+
    "\2\332\2\0\4\332\1\0\1\333\10\0\1\332\1\0"+
    "\1\332\1\0\2\332\2\0\1\332\4\0\1\334\1\0"+
    "\2\332\5\0\24\332\12\0\2\335\1\0\2\335\2\0"+
    "\1\335\1\0\2\335\2\0\4\335\1\0\1\336\10\0"+
    "\1\335\1\0\1\335\1\0\2\335\2\0\1\335\4\0"+
    "\1\337\1\0\2\335\5\0\24\335\12\0\10\14\1\0"+
    "\2\14\2\0\4\14\12\0\2\14\1\124\1\0\2\14"+
    "\1\0\1\125\2\14\5\0\2\14\5\0\2\14\1\340"+
    "\21\14\1\0\2\14\1\0\1\14\5\0\10\14\1\0"+
    "\2\14\2\0\4\14\12\0\2\14\1\124\1\0\2\14"+
    "\1\0\1\125\2\14\5\0\2\14\5\0\1\341\23\14"+
    "\1\0\2\14\1\0\1\14\5\0\10\14\1\0\2\14"+
    "\2\0\4\14\12\0\2\14\1\124\1\0\2\14\1\0"+
    "\1\125\2\14\5\0\2\14\5\0\16\14\1\342\5\14"+
    "\1\0\2\14\1\0\1\14\5\0\10\14\1\0\2\14"+
    "\2\0\4\14\12\0\2\14\1\124\1\0\1\343\1\14"+
    "\1\0\1\125\2\14\5\0\2\14\5\0\1\344\12\14"+
    "\1\345\10\14\1\0\2\14\1\0\1\14\5\0\10\14"+
    "\1\0\2\14\2\0\4\14\12\0\2\14\1\124\1\0"+
    "\2\14\1\0\1\125\2\14\5\0\2\14\5\0\4\14"+
    "\1\346\5\14\1\347\11\14\1\0\2\14\1\0\1\14"+
    "\5\0\10\14\1\0\2\14\2\0\4\14\12\0\2\14"+
    "\1\124\1\0\2\14\1\0\1\125\2\14\5\0\2\14"+
    "\5\0\16\14\1\350\5\14\1\0\2\14\1\0\1\14"+
    "\5\0\10\14\1\0\2\14\2\0\4\14\12\0\2\14"+
    "\1\124\1\0\2\14\1\0\1\125\2\14\5\0\2\14"+
    "\5\0\3\14\1\351\20\14\1\0\2\14\1\0\1\14"+
    "\5\0\10\14\1\0\2\14\2\0\4\14\12\0\2\14"+
    "\1\124\1\0\2\14\1\0\1\125\2\14\5\0\2\14"+
    "\5\0\1\352\23\14\1\0\2\14\1\0\1\14\5\0"+
    "\10\14\1\0\2\14\2\0\4\14\12\0\2\14\1\124"+
    "\1\0\2\14\1\0\1\125\2\14\5\0\2\14\5\0"+
    "\2\14\1\353\1\354\20\14\1\0\2\14\1\0\1\14"+
    "\5\0\10\14\1\0\2\14\2\0\4\14\12\0\2\14"+
    "\1\124\1\0\2\14\1\0\1\125\2\14\5\0\2\14"+
    "\5\0\7\14\1\355\14\14\1\0\2\14\1\0\1\14"+
    "\5\0\10\14\1\0\1\14\1\356\2\0\4\14\12\0"+
    "\2\14\1\124\1\0\2\14\1\0\1\125\2\14\5\0"+
    "\2\14\5\0\24\14\1\0\2\14\1\0\1\14\5\0"+
    "\10\14\1\0\2\14\2\0\4\14\12\0\2\14\1\124"+
    "\1\0\2\14\1\0\1\125\2\14\5\0\2\14\5\0"+
    "\20\14\1\357\3\14\1\0\2\14\1\0\1\14\5\0"+
    "\1\14\1\360\6\14\1\0\2\14\2\0\4\14\12\0"+
    "\2\14\1\124\1\0\2\14\1\0\1\125\2\14\5\0"+
    "\2\14\5\0\24\14\1\0\2\14\1\0\1\14\5\0"+
    "\10\14\1\0\2\14\2\0\4\14\12\0\2\14\1\124"+
    "\1\0\2\14\1\0\1\125\2\14\5\0\2\14\5\0"+
    "\16\14\1\361\5\14\1\0\2\14\1\0\1\14\5\0"+
    "\10\14\1\0\1\14\1\362\2\0\4\14\12\0\2\14"+
    "\1\124\1\0\2\14\1\0\1\125\2\14\5\0\2\14"+
    "\5\0\24\14\1\0\2\14\1\0\1\14\5\0\10\14"+
    "\1\0\2\14\2\0\4\14\12\0\2\14\1\124\1\0"+
    "\2\14\1\0\1\125\2\14\5\0\2\14\5\0\3\14"+
    "\1\363\1\14\1\364\16\14\1\0\2\14\1\0\1\14"+
    "\5\0\10\14\1\0\2\14\2\0\4\14\12\0\2\14"+
    "\1\124\1\0\2\14\1\0\1\125\2\14\5\0\2\14"+
    "\5\0\5\14\1\365\16\14\1\0\2\14\1\0\1\14"+
    "\5\0\10\14\1\0\2\14\2\0\4\14\12\0\2\14"+
    "\1\124\1\0\2\14\1\0\1\125\2\14\5\0\2\14"+
    "\5\0\6\14\1\366\3\14\1\367\11\14\1\0\2\14"+
    "\1\0\1\14\5\0\10\14\1\0\2\14\2\0\4\14"+
    "\12\0\2\14\1\124\1\0\2\14\1\0\1\125\2\14"+
    "\5\0\2\14\5\0\12\14\1\370\11\14\1\0\2\14"+
    "\1\0\1\14\5\0\10\14\1\0\2\14\2\0\4\14"+
    "\12\0\2\14\1\124\1\0\2\14\1\0\1\125\2\14"+
    "\5\0\2\14\5\0\3\14\1\371\20\14\1\0\2\14"+
    "\1\0\1\14\5\0\1\14\1\372\6\14\1\0\2\14"+
    "\2\0\4\14\12\0\2\14\1\124\1\0\2\14\1\0"+
    "\1\125\2\14\5\0\2\14\5\0\4\14\1\373\17\14"+
    "\1\0\2\14\1\0\1\14\4\0\31\224\1\225\5\224"+
    "\1\0\3\224\2\0\111\224\1\0\57\224\43\0\1\374"+
    "\54\0\10\230\1\0\2\230\2\0\4\230\12\0\2\230"+
    "\1\375\1\0\2\230\2\0\2\230\5\0\2\230\5\0"+
    "\24\230\1\0\2\230\1\0\1\230\20\0\2\231\5\0"+
    "\11\231\14\0\2\231\34\0\1\231\2\0\1\231\1\0"+
    "\2\231\2\0\22\232\1\376\6\232\1\377\5\232\1\0"+
    "\5\232\2\0\50\232\43\101\1\u0100\1\0\115\101\1\u0101"+
    "\1\u0102\52\101\1\0\10\240\1\0\2\240\2\0\4\240"+
    "\12\0\2\240\1\u0103\1\0\2\240\2\0\2\240\5\0"+
    "\2\240\5\0\24\240\1\0\2\240\1\0\1\240\20\0"+
    "\2\241\5\0\11\241\14\0\2\241\34\0\1\241\2\0"+
    "\1\241\1\0\2\241\2\0\22\242\1\u0104\6\242\1\u0105"+
    "\5\242\1\0\5\242\2\0\50\242\1\0\10\105\1\0"+
    "\2\105\2\106\4\105\1\0\11\106\2\105\1\245\1\0"+
    "\2\105\2\0\2\105\2\0\2\106\1\0\2\105\5\0"+
    "\24\105\1\106\2\105\1\106\1\105\2\106\2\0\22\246"+
    "\1\u0106\6\246\1\250\5\246\1\0\57\246\1\0\10\110"+
    "\1\0\2\110\2\u0107\4\110\1\0\11\u0107\2\110\1\251"+
    "\1\0\2\110\2\0\2\110\2\0\2\u0107\1\0\2\110"+
    "\5\0\24\110\1\u0107\2\110\1\u0107\1\110\2\u0107\2\0"+
    "\31\113\1\253\11\113\1\u0108\1\0\52\113\31\111\1\112"+
    "\5\111\1\113\3\111\1\252\1\115\52\111\43\113\1\u0108"+
    "\1\0\52\113\31\u0109\1\115\5\u0109\1\0\3\u0109\1\u010a"+
    "\1\115\52\u0109\43\0\1\262\54\0\2\257\1\260\3\0"+
    "\1\260\77\0\2\260\11\0\1\u010b\2\0\3\u010b\1\0"+
    "\2\u010b\2\0\4\u010b\17\0\1\u010b\11\0\1\u010b\6\0"+
    "\2\u010b\3\0\1\u010b\17\0\2\u010b\1\0\1\u010b\15\0"+
    "\1\262\17\0\1\123\116\0\1\123\101\0\2\265\5\0"+
    "\11\265\7\0\1\125\4\0\2\265\34\0\1\265\2\0"+
    "\1\265\1\0\2\265\2\0\31\266\1\267\5\266\1\0"+
    "\3\266\2\0\111\266\1\0\57\266\43\0\1\u010c\54\0"+
    "\10\14\1\0\2\14\2\0\4\14\12\0\2\14\1\124"+
    "\1\0\2\14\1\0\1\125\2\14\5\0\2\14\5\0"+
    "\13\14\1\u010d\10\14\1\0\2\14\1\0\1\14\5\0"+
    "\2\274\1\0\2\274\2\0\1\274\1\0\2\274\2\276"+
    "\4\274\1\277\11\276\1\274\1\0\1\274\1\0\2\274"+
    "\2\0\1\274\3\0\2\276\1\0\2\274\5\0\24\274"+
    "\1\276\2\0\1\276\1\0\2\276\3\0\2\127\1\273"+
    "\2\0\3\273\1\272\2\273\2\0\4\273\17\0\1\273"+
    "\11\0\1\273\6\0\2\273\3\0\1\273\17\0\2\273"+
    "\1\0\1\273\5\0\10\274\1\0\2\274\2\0\4\274"+
    "\12\0\2\274\1\u010e\1\0\2\274\2\0\2\274\5\0"+
    "\2\274\5\0\24\274\1\0\2\274\1\0\1\274\5\0"+
    "\10\274\1\0\2\274\2\301\4\274\12\0\2\274\1\u010e"+
    "\1\0\2\274\2\0\2\274\5\0\2\274\5\0\24\274"+
    "\1\0\2\274\1\0\1\274\20\0\2\276\5\0\11\276"+
    "\14\0\2\276\34\0\1\276\2\0\1\276\1\0\2\276"+
    "\2\0\22\277\1\u010f\6\277\1\u0110\5\277\1\0\5\277"+
    "\2\0\50\277\3\0\1\300\2\0\2\300\6\0\4\135"+
    "\65\0\2\300\1\0\1\300\7\0\1\300\2\0\2\300"+
    "\77\0\2\300\1\0\1\300\5\0\10\14\1\0\1\14"+
    "\1\u0111\2\0\4\14\12\0\2\14\1\124\1\0\2\14"+
    "\1\0\1\125\2\14\5\0\2\14\5\0\24\14\1\0"+
    "\2\14\1\0\1\14\5\0\10\14\1\0\1\14\1\u0112"+
    "\2\0\4\14\12\0\2\14\1\124\1\0\2\14\1\0"+
    "\1\125\2\14\5\0\2\14\5\0\24\14\1\0\2\14"+
    "\1\0\1\14\5\0\10\14\1\0\2\14\2\0\4\14"+
    "\12\0\2\14\1\124\1\0\2\14\1\0\1\125\2\14"+
    "\5\0\2\14\5\0\2\14\1\u0113\21\14\1\0\2\14"+
    "\1\0\1\14\5\0\10\14\1\0\2\14\2\0\4\14"+
    "\12\0\2\14\1\124\1\0\2\14\1\0\1\125\2\14"+
    "\5\0\2\14\5\0\14\14\1\u0114\7\14\1\0\2\14"+
    "\1\0\1\14\5\0\10\14\1\0\2\14\2\0\4\14"+
    "\12\0\2\14\1\124\1\0\2\14\1\0\1\125\2\14"+
    "\5\0\2\14\5\0\1\u0115\23\14\1\0\2\14\1\0"+
    "\1\14\4\0\23\311\1\u0116\107\311\2\151\5\311\1\312"+
    "\1\u0117\7\151\14\311\2\151\34\311\1\151\2\311\1\151"+
    "\1\311\2\151\2\311\14\0\2\22\5\0\1\u0118\10\22"+
    "\14\0\2\22\34\0\1\22\2\0\1\22\1\0\2\22"+
    "\112\0\1\u0119\6\0\26\315\1\u011a\3\315\1\0\100\315"+
    "\2\316\5\315\3\316\1\u011b\3\316\1\22\1\316\14\315"+
    "\2\316\34\315\1\316\2\315\1\316\1\315\2\316\2\315"+
    "\14\u011c\2\u011d\5\u011c\3\u011d\1\u011e\3\u011d\1\u011f\1\u011d"+
    "\14\u011c\2\u011d\34\u011c\1\u011d\2\u011c\1\u011d\1\u011c\2\u011d"+
    "\2\u011c\1\0\10\321\1\0\2\321\2\0\4\321\12\0"+
    "\2\321\1\322\1\0\2\321\2\0\2\321\5\0\2\321"+
    "\5\0\24\321\1\0\2\321\1\0\1\321\5\0\10\321"+
    "\1\0\2\321\2\323\4\321\1\0\11\323\2\321\1\322"+
    "\1\0\2\321\2\0\2\321\2\0\2\323\1\0\2\321"+
    "\5\0\24\321\1\323\2\321\1\323\1\321\2\323\16\0"+
    "\2\323\5\0\11\323\14\0\2\323\34\0\1\323\2\0"+
    "\1\323\1\0\2\323\5\0\1\u0120\3\0\1\u0120\21\0"+
    "\1\320\10\0\1\320\44\0\2\u0120\11\0\1\u0121\2\0"+
    "\3\u0122\1\0\2\u0122\2\0\4\u0122\7\0\1\320\7\0"+
    "\1\u0122\1\320\10\0\1\u0122\6\0\2\u0122\3\0\1\u0122"+
    "\17\0\2\u0122\1\0\1\u0122\4\0\43\327\1\u0123\53\327"+
    "\14\0\1\22\1\u0124\5\0\11\22\14\0\2\22\34\0"+
    "\1\22\2\0\1\22\1\0\2\22\55\0\1\u0125\60\0"+
    "\1\u0126\34\0\1\u0127\45\0\2\332\1\0\2\332\2\0"+
    "\1\332\1\0\2\332\2\0\4\332\12\0\1\332\1\0"+
    "\1\332\1\0\2\332\2\0\1\332\6\0\2\332\5\0"+
    "\24\332\26\0\1\u0128\34\0\1\u0129\45\0\2\335\1\0"+
    "\2\335\2\0\1\335\1\0\2\335\2\0\4\335\12\0"+
    "\1\335\1\0\1\335\1\0\2\335\2\0\1\335\6\0"+
    "\2\335\5\0\24\335\12\0\10\14\1\0\2\14\2\0"+
    "\4\14\12\0\2\14\1\124\1\0\2\14\1\0\1\125"+
    "\2\14\5\0\2\14\5\0\3\14\1\u012a\20\14\1\0"+
    "\2\14\1\0\1\14\5\0\1\14\1\u012b\6\14\1\0"+
    "\2\14\2\0\4\14\12\0\2\14\1\124\1\0\2\14"+
    "\1\0\1\125\2\14\5\0\2\14\5\0\24\14\1\0"+
    "\2\14\1\0\1\14\5\0\10\14\1\0\1\14\1\u012c"+
    "\2\0\4\14\12\0\2\14\1\124\1\0\2\14\1\0"+
    "\1\125\2\14\5\0\2\14\5\0\24\14\1\0\2\14"+
    "\1\0\1\14\5\0\10\14\1\0\1\14\1\u012d\2\0"+
    "\4\14\12\0\2\14\1\124\1\0\2\14\1\0\1\125"+
    "\2\14\5\0\2\14\5\0\24\14\1\0\2\14\1\0"+
    "\1\14\5\0\10\14\1\0\2\14\2\0\4\14\12\0"+
    "\2\14\1\124\1\0\2\14\1\0\1\125\2\14\5\0"+
    "\2\14\5\0\12\14\1\u012e\11\14\1\0\2\14\1\0"+
    "\1\14\5\0\10\14\1\0\2\14\2\0\4\14\12\0"+
    "\2\14\1\124\1\0\2\14\1\0\1\125\2\14\5\0"+
    "\2\14\5\0\6\14\1\u012f\15\14\1\0\2\14\1\0"+
    "\1\14\5\0\10\14\1\0\2\14\2\0\4\14\12\0"+
    "\2\14\1\124\1\0\2\14\1\0\1\125\2\14\5\0"+
    "\2\14\5\0\2\14\1\u0130\21\14\1\0\2\14\1\0"+
    "\1\14\5\0\10\14\1\0\1\14\1\u0131\2\0\4\14"+
    "\12\0\2\14\1\124\1\0\2\14\1\0\1\125\2\14"+
    "\5\0\2\14\5\0\24\14\1\0\2\14\1\0\1\14"+
    "\5\0\10\14\1\0\2\14\2\0\4\14\12\0\2\14"+
    "\1\124\1\0\1\u0132\1\14\1\0\1\125\2\14\5\0"+
    "\2\14\5\0\24\14\1\0\2\14\1\0\1\14\5\0"+
    "\10\14\1\0\2\14\2\0\4\14\12\0\2\14\1\124"+
    "\1\0\2\14\1\0\1\125\2\14\5\0\2\14\5\0"+
    "\2\14\1\u0133\21\14\1\0\2\14\1\0\1\14\5\0"+
    "\10\14\1\0\1\14\1\u0134\2\0\4\14\12\0\2\14"+
    "\1\124\1\0\2\14\1\0\1\125\2\14\5\0\2\14"+
    "\5\0\24\14\1\0\2\14\1\0\1\14\5\0\10\14"+
    "\1\0\2\14\2\0\4\14\12\0\2\14\1\124\1\0"+
    "\2\14\1\0\1\125\2\14\5\0\2\14\5\0\5\14"+
    "\1\u0135\16\14\1\0\2\14\1\0\1\14\5\0\10\14"+
    "\1\0\1\14\1\u0136\2\0\4\14\12\0\2\14\1\124"+
    "\1\0\2\14\1\0\1\125\2\14\5\0\2\14\5\0"+
    "\24\14\1\0\2\14\1\0\1\14\5\0\10\14\1\0"+
    "\2\14\2\0\4\14\12\0\2\14\1\124\1\0\2\14"+
    "\1\0\1\125\2\14\5\0\2\14\5\0\4\14\1\u0137"+
    "\17\14\1\0\2\14\1\0\1\14\5\0\1\14\1\u0138"+
    "\6\14\1\0\2\14\2\0\4\14\12\0\2\14\1\124"+
    "\1\0\2\14\1\0\1\125\2\14\5\0\2\14\5\0"+
    "\24\14\1\0\2\14\1\0\1\14\5\0\1\14\1\u0139"+
    "\6\14\1\0\2\14\2\0\4\14\12\0\2\14\1\124"+
    "\1\0\2\14\1\0\1\125\2\14\5\0\2\14\5\0"+
    "\6\14\1\u013a\15\14\1\0\2\14\1\0\1\14\5\0"+
    "\1\14\1\u013b\6\14\1\0\2\14\2\0\4\14\12\0"+
    "\2\14\1\124\1\0\2\14\1\0\1\125\2\14\5\0"+
    "\2\14\5\0\24\14\1\0\2\14\1\0\1\14\5\0"+
    "\10\14\1\0\2\14\2\0\4\14\12\0\2\14\1\124"+
    "\1\0\2\14\1\0\1\125\2\14\5\0\2\14\5\0"+
    "\5\14\1\u013c\16\14\1\0\2\14\1\0\1\14\5\0"+
    "\10\14\1\0\2\14\2\0\4\14\12\0\2\14\1\124"+
    "\1\0\2\14\1\0\1\125\2\14\5\0\2\14\5\0"+
    "\4\14\1\u013d\17\14\1\0\2\14\1\0\1\14\5\0"+
    "\10\14\1\0\2\14\2\0\4\14\12\0\2\14\1\124"+
    "\1\0\2\14\1\0\1\125\2\14\5\0\2\14\5\0"+
    "\22\14\1\u013e\1\14\1\0\2\14\1\0\1\14\5\0"+
    "\10\14\1\0\2\14\2\0\4\14\12\0\2\14\1\124"+
    "\1\0\2\14\1\0\1\125\2\14\5\0\2\14\5\0"+
    "\3\14\1\u013f\20\14\1\0\2\14\1\0\1\14\5\0"+
    "\10\14\1\0\2\14\2\0\4\14\12\0\2\14\1\124"+
    "\1\0\2\14\1\0\1\125\2\14\5\0\2\14\5\0"+
    "\21\14\1\u0140\2\14\1\0\2\14\1\0\1\14\5\0"+
    "\1\14\1\u0141\6\14\1\0\2\14\2\0\4\14\12\0"+
    "\2\14\1\124\1\0\2\14\1\0\1\125\2\14\5\0"+
    "\2\14\5\0\24\14\1\0\2\14\1\0\1\14\5\0"+
    "\10\14\1\0\2\14\2\0\4\14\12\0\2\14\1\124"+
    "\1\0\2\14\1\0\1\125\2\14\5\0\2\14\5\0"+
    "\10\14\1\u0142\13\14\1\0\2\14\1\0\1\14\4\0"+
    "\43\374\1\u0143\1\0\52\374\1\0\10\230\1\0\2\230"+
    "\2\231\4\230\1\0\11\231\2\230\1\375\1\0\2\230"+
    "\2\0\2\230\2\0\2\231\1\0\2\230\5\0\24\230"+
    "\1\231\2\230\1\231\1\230\2\231\2\0\22\232\1\u0144"+
    "\6\232\1\377\5\232\1\0\57\232\43\101\2\0\52\101"+
    "\43\0\1\u0145\54\0\10\240\1\0\2\240\2\241\4\240"+
    "\1\0\11\241\2\240\1\u0103\1\0\2\240\2\0\2\240"+
    "\2\0\2\241\1\0\2\240\5\0\24\240\1\241\2\240"+
    "\1\241\1\240\2\241\2\0\22\242\1\u0146\6\242\1\u0105"+
    "\5\242\1\0\57\242\14\0\2\u0107\5\0\11\u0107\14\0"+
    "\2\u0107\34\0\1\u0107\2\0\1\u0107\1\0\2\u0107\2\0"+
    "\43\113\1\u0147\1\0\52\113\37\u0109\1\0\3\u0109\1\u010a"+
    "\1\115\52\u0109\1\0\2\257\1\u010b\2\0\3\u010b\1\0"+
    "\2\u010b\2\0\4\u010b\17\0\1\u010b\11\0\1\u010b\6\0"+
    "\2\u010b\3\0\1\u010b\17\0\2\u010b\1\0\1\u010b\4\0"+
    "\43\u010c\1\u0148\1\0\52\u010c\1\0\10\274\1\0\2\274"+
    "\2\276\4\274\1\0\11\276\2\274\1\u010e\1\0\2\274"+
    "\2\0\2\274\2\0\2\276\1\0\2\274\5\0\24\274"+
    "\1\276\2\274\1\276\1\274\2\276\2\0\22\277\1\u0149"+
    "\6\277\1\u0110\5\277\1\0\57\277\1\0\10\14\1\0"+
    "\2\14\2\0\4\14\12\0\2\14\1\124\1\0\2\14"+
    "\1\0\1\125\2\14\5\0\2\14\5\0\11\14\1\u014a"+
    "\12\14\1\0\2\14\1\0\1\14\5\0\10\14\1\0"+
    "\1\14\1\u014b\2\0\4\14\12\0\2\14\1\124\1\0"+
    "\2\14\1\0\1\125\2\14\5\0\2\14\5\0\24\14"+
    "\1\0\2\14\1\0\1\14\5\0\10\14\1\0\2\14"+
    "\2\0\4\14\12\0\2\14\1\124\1\0\2\14\1\0"+
    "\1\125\2\14\5\0\2\14\5\0\6\14\1\u014c\15\14"+
    "\1\0\2\14\1\0\1\14\5\0\1\14\1\u014d\6\14"+
    "\1\0\2\14\2\0\4\14\12\0\2\14\1\124\1\0"+
    "\2\14\1\0\1\125\2\14\5\0\2\14\5\0\24\14"+
    "\1\0\2\14\1\0\1\14\4\0\23\311\1\u0116\1\u014e"+
    "\72\311\14\u014f\2\u0118\5\u014f\4\u0118\1\u0150\4\u0118\14\u014f"+
    "\2\u0118\34\u014f\1\u0118\2\u014f\1\u0118\1\u014f\2\u0118\2\u014f"+
    "\20\0\1\u0151\71\0\1\u0152\4\0\26\315\1\u011a\3\315"+
    "\1\u0153\100\315\2\316\5\315\3\316\1\u011b\3\316\1\u011f"+
    "\1\316\14\315\2\316\34\315\1\316\2\315\1\316\1\315"+
    "\2\316\2\315\26\u011c\1\u0154\3\u011c\1\0\100\u011c\2\u011d"+
    "\5\u011c\3\u011d\1\u011e\3\u011d\1\22\1\u011d\14\u011c\2\u011d"+
    "\34\u011c\1\u011d\2\u011c\1\u011d\1\u011c\2\u011d\16\u011c\2\u011d"+
    "\5\u011c\3\u011d\1\u011e\3\u011d\1\u0155\1\u011d\14\u011c\2\u011d"+
    "\34\u011c\1\u011d\2\u011c\1\u011d\1\u011c\2\u011d\2\u011c\3\0"+
    "\1\157\3\0\1\157\21\0\1\320\10\0\1\320\44\0"+
    "\2\157\11\0\1\u0156\2\0\3\u0157\1\0\2\u0157\2\0"+
    "\4\u0157\17\0\1\u0157\11\0\1\u0157\6\0\2\u0157\3\0"+
    "\1\u0157\17\0\2\u0157\1\0\1\u0157\7\0\1\u0157\2\0"+
    "\3\u0157\1\0\2\u0157\2\0\4\u0157\17\0\1\u0157\11\0"+
    "\1\u0157\6\0\2\u0157\3\0\1\u0157\17\0\2\u0157\1\0"+
    "\1\u0157\4\0\43\327\1\u0158\53\327\20\0\1\u0159\113\0"+
    "\1\332\154\0\1\u015a\60\0\1\335\154\0\1\u015b\44\0"+
    "\10\14\1\0\2\14\2\0\4\14\12\0\2\14\1\124"+
    "\1\0\2\14\1\0\1\125\2\14\5\0\2\14\5\0"+
    "\4\14\1\u015c\17\14\1\0\2\14\1\0\1\14\5\0"+
    "\10\14\1\0\1\14\1\u015d\2\0\4\14\12\0\2\14"+
    "\1\124\1\0\2\14\1\0\1\125\2\14\5\0\2\14"+
    "\5\0\24\14\1\0\2\14\1\0\1\14\5\0\10\14"+
    "\1\0\2\14\2\0\4\14\12\0\2\14\1\124\1\0"+
    "\2\14\1\0\1\125\2\14\5\0\2\14\5\0\4\14"+
    "\1\u015e\17\14\1\0\2\14\1\0\1\14\5\0\10\14"+
    "\1\0\2\14\2\0\4\14\12\0\2\14\1\124\1\0"+
    "\2\14\1\0\1\125\2\14\5\0\2\14\5\0\3\14"+
    "\1\u015f\20\14\1\0\2\14\1\0\1\14\5\0\10\14"+
    "\1\0\2\14\2\0\4\14\12\0\2\14\1\124\1\0"+
    "\2\14\1\0\1\125\2\14\5\0\2\14\5\0\20\14"+
    "\1\u0160\3\14\1\0\2\14\1\0\1\14\5\0\10\14"+
    "\1\0\2\14\2\0\4\14\12\0\2\14\1\124\1\0"+
    "\2\14\1\0\1\125\2\14\5\0\2\14\5\0\4\14"+
    "\1\u0161\17\14\1\0\2\14\1\0\1\14\5\0\10\14"+
    "\1\0\2\14\2\0\4\14\12\0\2\14\1\124\1\0"+
    "\2\14\1\0\1\125\2\14\5\0\2\14\5\0\2\14"+
    "\1\u0162\21\14\1\0\2\14\1\0\1\14\5\0\10\14"+
    "\1\0\2\14\2\0\4\14\12\0\2\14\1\124\1\u0163"+
    "\2\14\1\0\1\125\1\14\1\u0164\2\u0163\3\0\2\14"+
    "\5\0\24\14\1\0\2\14\1\0\1\14\5\0\10\14"+
    "\1\0\2\14\2\0\4\14\12\0\2\14\1\124\1\0"+
    "\2\14\1\0\1\125\2\14\5\0\2\14\5\0\10\14"+
    "\1\u0165\13\14\1\0\2\14\1\0\1\14\5\0\10\14"+
    "\1\0\2\14\2\0\4\14\12\0\2\14\1\124\1\0"+
    "\2\14\1\0\1\125\2\14\5\0\2\14\5\0\5\14"+
    "\1\u0166\16\14\1\0\2\14\1\0\1\14\5\0\10\14"+
    "\1\0\2\14\2\0\4\14\12\0\2\14\1\124\1\0"+
    "\2\14\1\0\1\125\2\14\5\0\2\14\5\0\4\14"+
    "\1\u0167\17\14\1\0\2\14\1\0\1\14\5\0\10\14"+
    "\1\0\2\14\2\0\4\14\12\0\2\14\1\124\1\0"+
    "\2\14\1\0\1\125\2\14\5\0\2\14\5\0\12\14"+
    "\1\u0168\11\14\1\0\2\14\1\0\1\14\5\0\10\14"+
    "\1\0\2\14\2\0\4\14\12\0\2\14\1\124\1\0"+
    "\2\14\1\0\1\125\2\14\5\0\2\14\5\0\4\14"+
    "\1\u0169\17\14\1\0\2\14\1\0\1\14\5\0\10\14"+
    "\1\0\2\14\2\0\3\14\1\u016a\12\0\2\14\1\124"+
    "\1\0\2\14\1\0\1\125\2\14\5\0\2\14\5\0"+
    "\24\14\1\0\2\14\1\0\1\14\5\0\10\14\1\0"+
    "\2\14\2\0\4\14\12\0\2\14\1\124\1\0\2\14"+
    "\1\0\1\125\2\14\5\0\2\14\5\0\10\14\1\u016b"+
    "\13\14\1\0\2\14\1\0\1\14\5\0\10\14\1\0"+
    "\2\14\2\0\4\14\12\0\2\14\1\124\1\0\2\14"+
    "\1\0\1\125\2\14\5\0\2\14\5\0\6\14\1\u016c"+
    "\15\14\1\0\2\14\1\0\1\14\5\0\10\14\1\0"+
    "\2\14\2\0\4\14\12\0\2\14\1\124\1\0\2\14"+
    "\1\0\1\125\2\14\5\0\2\14\5\0\1\u016d\23\14"+
    "\1\0\2\14\1\0\1\14\5\0\10\14\1\0\1\14"+
    "\1\u016e\2\0\4\14\12\0\2\14\1\124\1\0\2\14"+
    "\1\0\1\125\2\14\5\0\2\14\5\0\24\14\1\0"+
    "\2\14\1\0\1\14\5\0\10\14\1\0\2\14\2\0"+
    "\4\14\12\0\2\14\1\124\1\0\2\14\1\0\1\125"+
    "\2\14\5\0\2\14\5\0\1\u016f\23\14\1\0\2\14"+
    "\1\0\1\14\5\0\10\14\1\0\1\14\1\u0170\2\0"+
    "\4\14\12\0\2\14\1\124\1\0\2\14\1\0\1\125"+
    "\2\14\5\0\2\14\5\0\24\14\1\0\2\14\1\0"+
    "\1\14\4\0\43\374\1\u0171\1\0\52\374\43\0\1\u0172"+
    "\53\0\43\u010c\1\u0173\1\0\52\u010c\1\0\10\14\1\0"+
    "\2\14\2\0\3\14\1\u0174\12\0\2\14\1\124\1\0"+
    "\2\14\1\0\1\125\2\14\5\0\2\14\5\0\24\14"+
    "\1\0\2\14\1\0\1\14\5\0\10\14\1\0\2\14"+
    "\2\0\4\14\12\0\2\14\1\124\1\0\2\14\1\0"+
    "\1\125\2\14\5\0\2\14\5\0\15\14\1\u0175\6\14"+
    "\1\0\2\14\1\0\1\14\5\0\1\14\1\u0176\6\14"+
    "\1\0\2\14\2\0\4\14\12\0\2\14\1\124\1\0"+
    "\2\14\1\0\1\125\2\14\5\0\2\14\5\0\24\14"+
    "\1\0\2\14\1\0\1\14\4\0\27\u014f\1\u0177\103\u014f"+
    "\2\u0118\5\u014f\4\u0118\1\u0178\4\u0118\14\u014f\2\u0118\34\u014f"+
    "\1\u0118\2\u014f\1\u0118\1\u014f\2\u0118\2\u014f\107\0\1\u0179"+
    "\12\0\1\u017a\113\0\26\u011c\1\u0154\3\u011c\1\u017b\64\u011c"+
    "\3\0\1\u017c\2\0\3\u017d\1\0\2\u017d\2\0\4\u017d"+
    "\17\0\1\u017d\11\0\1\u017d\6\0\2\u017d\3\0\1\u017d"+
    "\17\0\2\u017d\1\0\1\u017d\7\0\1\u017d\2\0\3\u017d"+
    "\1\0\2\u017d\2\0\4\u017d\17\0\1\u017d\11\0\1\u017d"+
    "\6\0\2\u017d\3\0\1\u017d\17\0\2\u017d\1\0\1\u017d"+
    "\4\0\43\327\1\u017e\53\327\41\0\1\u017f\75\0\1\u0180"+
    "\116\0\1\u0181\77\0\10\14\1\0\2\14\2\0\4\14"+
    "\12\0\2\14\1\124\1\0\2\14\1\0\1\125\2\14"+
    "\5\0\2\14\5\0\1\u0182\23\14\1\0\2\14\1\0"+
    "\1\14\5\0\10\14\1\0\2\14\2\0\3\14\1\u0183"+
    "\12\0\2\14\1\124\1\0\2\14\1\0\1\125\2\14"+
    "\5\0\2\14\5\0\24\14\1\0\2\14\1\0\1\14"+
    "\5\0\10\14\1\0\2\14\2\0\4\14\12\0\2\14"+
    "\1\124\1\0\2\14\1\0\1\125\2\14\5\0\2\14"+
    "\5\0\11\14\1\u0184\12\14\1\0\2\14\1\0\1\14"+
    "\43\0\1\u0163\5\0\3\u0163\17\0\1\u0185\1\u0186\27\0"+
    "\10\14\1\0\2\14\2\0\4\14\12\0\2\14\1\124"+
    "\1\u0163\2\14\1\0\1\125\1\14\1\u0164\2\u0163\3\0"+
    "\2\14\5\0\5\14\1\u0187\1\u0188\15\14\1\0\2\14"+
    "\1\0\1\14\5\0\10\14\1\0\2\14\2\0\4\14"+
    "\12\0\2\14\1\124\1\0\2\14\1\0\1\125\2\14"+
    "\5\0\2\14\5\0\3\14\1\u0189\20\14\1\0\2\14"+
    "\1\0\1\14\5\0\10\14\1\0\2\14\2\0\4\14"+
    "\12\0\2\14\1\124\1\0\2\14\1\0\1\125\2\14"+
    "\5\0\2\14\5\0\12\14\1\u018a\11\14\1\0\2\14"+
    "\1\0\1\14\5\0\10\14\1\0\2\14\2\0\4\14"+
    "\12\0\2\14\1\124\1\0\2\14\1\0\1\125\2\14"+
    "\5\0\2\14\5\0\5\14\1\u018b\16\14\1\0\2\14"+
    "\1\0\1\14\5\0\10\14\1\0\2\14\2\0\4\14"+
    "\12\0\2\14\1\124\1\0\2\14\1\0\1\125\2\14"+
    "\5\0\2\14\5\0\3\14\1\u018c\20\14\1\0\2\14"+
    "\1\0\1\14\5\0\10\14\1\0\2\14\2\0\4\14"+
    "\12\0\2\14\1\124\1\0\2\14\1\0\1\125\2\14"+
    "\5\0\2\14\5\0\23\14\1\u018d\1\0\2\14\1\0"+
    "\1\14\5\0\10\14\1\0\2\14\2\0\4\14\12\0"+
    "\2\14\1\124\1\0\2\14\1\0\1\125\2\14\5\0"+
    "\2\14\5\0\5\14\1\u018e\16\14\1\0\2\14\1\0"+
    "\1\14\5\0\10\14\1\0\2\14\2\0\4\14\12\0"+
    "\2\14\1\124\1\0\2\14\1\0\1\125\2\14\5\0"+
    "\2\14\5\0\3\14\1\u018f\20\14\1\0\2\14\1\0"+
    "\1\14\4\0\43\374\2\0\52\374\43\u010c\2\0\52\u010c"+
    "\1\0\10\14\1\0\2\14\2\0\4\14\12\0\2\14"+
    "\1\124\1\0\2\14\1\0\1\125\2\14\5\0\2\14"+
    "\5\0\2\14\1\u0190\21\14\1\0\2\14\1\0\1\14"+
    "\5\0\10\14\1\0\1\14\1\u0191\2\0\4\14\12\0"+
    "\2\14\1\124\1\0\2\14\1\0\1\125\2\14\5\0"+
    "\2\14\5\0\24\14\1\0\2\14\1\0\1\14\5\0"+
    "\10\14\1\0\2\14\2\0\4\14\12\0\2\14\1\124"+
    "\1\0\2\14\1\0\1\125\2\14\5\0\2\14\5\0"+
    "\13\14\1\u0192\10\14\1\0\2\14\1\0\1\14\4\0"+
    "\27\u014f\1\u0193\103\u014f\2\u0118\5\u014f\1\u0194\3\u0118\1\u0178"+
    "\4\u0118\14\u014f\2\u0118\34\u014f\1\u0118\2\u014f\1\u0118\1\u014f"+
    "\2\u0118\2\u014f\3\0\1\157\2\0\3\157\1\0\2\157"+
    "\2\0\4\157\17\0\1\163\11\0\1\157\6\0\2\157"+
    "\3\0\1\157\17\0\2\157\1\0\1\157\7\0\1\157"+
    "\2\0\3\157\1\0\2\157\2\0\4\157\17\0\1\157"+
    "\11\0\1\157\6\0\2\157\3\0\1\157\17\0\2\157"+
    "\1\0\1\157\47\0\1\u017e\127\0\1\u0195\103\0\1\u0196"+
    "\116\0\1\u0197\56\0\10\14\1\0\2\14\2\0\4\14"+
    "\12\0\2\14\1\124\1\0\2\14\1\0\1\125\2\14"+
    "\5\0\2\14\5\0\5\14\1\u0198\16\14\1\0\2\14"+
    "\1\0\1\14\6\0\1\u0199\177\0\1\u019a\34\0\1\14"+
    "\1\u019b\6\14\1\0\2\14\2\0\4\14\12\0\2\14"+
    "\1\124\1\0\2\14\1\0\1\125\2\14\5\0\2\14"+
    "\5\0\24\14\1\0\2\14\1\0\1\14\5\0\10\14"+
    "\1\0\2\14\2\0\4\14\12\0\2\14\1\124\1\0"+
    "\2\14\1\0\1\125\2\14\5\0\2\14\5\0\1\14"+
    "\1\u019c\22\14\1\0\2\14\1\0\1\14\5\0\10\14"+
    "\1\0\2\14\2\0\3\14\1\u019d\12\0\2\14\1\124"+
    "\1\0\2\14\1\0\1\125\2\14\5\0\2\14\5\0"+
    "\24\14\1\0\2\14\1\0\1\14\5\0\10\14\1\0"+
    "\2\14\2\0\4\14\12\0\2\14\1\124\1\0\2\14"+
    "\1\0\1\125\2\14\5\0\2\14\5\0\12\14\1\u019e"+
    "\11\14\1\0\2\14\1\0\1\14\5\0\10\14\1\0"+
    "\1\14\1\u019f\2\0\4\14\12\0\2\14\1\124\1\0"+
    "\2\14\1\0\1\125\2\14\5\0\2\14\5\0\24\14"+
    "\1\0\2\14\1\0\1\14\5\0\10\14\1\0\2\14"+
    "\2\0\4\14\12\0\2\14\1\124\1\0\2\14\1\0"+
    "\1\125\2\14\5\0\2\14\5\0\3\14\1\u01a0\20\14"+
    "\1\0\2\14\1\0\1\14\5\0\10\14\1\0\1\14"+
    "\1\u01a1\2\0\4\14\12\0\2\14\1\124\1\0\2\14"+
    "\1\0\1\125\2\14\5\0\2\14\5\0\24\14\1\0"+
    "\2\14\1\0\1\14\4\0\23\u014f\1\u01a2\3\u014f\1\u0193"+
    "\103\u014f\2\u0118\5\u014f\1\u0118\1\u01a3\2\u0118\1\u0150\4\u0118"+
    "\14\u014f\2\u0118\34\u014f\1\u0118\2\u014f\1\u0118\1\u014f\2\u0118"+
    "\2\u014f\41\0\1\u01a4\131\0\1\u01a5\116\0\1\u01a6\43\0"+
    "\10\14\1\0\2\14\2\0\4\14\12\0\2\14\1\124"+
    "\1\0\2\14\1\0\1\125\2\14\5\0\2\14\5\0"+
    "\3\14\1\u01a7\20\14\1\0\2\14\1\0\1\14\66\0"+
    "\1\u01a8\125\0\1\u01a9\26\0\10\14\1\0\2\14\2\0"+
    "\4\14\12\0\2\14\1\124\1\0\2\14\1\0\1\125"+
    "\2\14\5\0\2\14\5\0\1\u01aa\23\14\1\0\2\14"+
    "\1\0\1\14\5\0\10\14\1\0\2\14\2\0\4\14"+
    "\12\0\2\14\1\124\1\0\2\14\1\0\1\125\2\14"+
    "\5\0\2\14\5\0\7\14\1\u01ab\14\14\1\0\2\14"+
    "\1\0\1\14\5\0\10\14\1\0\1\14\1\u01ac\2\0"+
    "\4\14\12\0\2\14\1\124\1\0\2\14\1\0\1\125"+
    "\2\14\5\0\2\14\5\0\24\14\1\0\2\14\1\0"+
    "\1\14\5\0\10\14\1\0\2\14\2\0\4\14\12\0"+
    "\2\14\1\124\1\0\2\14\1\0\1\125\2\14\5\0"+
    "\2\14\5\0\3\14\1\u01ad\20\14\1\0\2\14\1\0"+
    "\1\14\5\0\10\14\1\0\1\14\1\u01ae\2\0\4\14"+
    "\12\0\2\14\1\124\1\0\2\14\1\0\1\125\2\14"+
    "\5\0\2\14\5\0\24\14\1\0\2\14\1\0\1\14"+
    "\4\0\24\u014f\1\u01af\2\u014f\1\u0177\67\u014f\52\0\1\167"+
    "\105\0\1\u01b0\116\0\1\u01b1\141\0\1\u01b2\45\0\1\u01b3"+
    "\104\0\10\14\1\0\2\14\2\0\4\14\12\0\2\14"+
    "\1\124\1\0\2\14\1\0\1\125\2\14\5\0\2\14"+
    "\5\0\2\14\1\u01b4\21\14\1\0\2\14\1\0\1\14"+
    "\5\0\10\14\1\0\1\14\1\u01b5\2\0\4\14\12\0"+
    "\2\14\1\124\1\0\2\14\1\0\1\125\2\14\5\0"+
    "\2\14\5\0\24\14\1\0\2\14\1\0\1\14\5\0"+
    "\10\14\1\0\2\14\2\0\3\14\1\u01b6\12\0\2\14"+
    "\1\124\1\0\2\14\1\0\1\125\2\14\5\0\2\14"+
    "\5\0\24\14\1\0\2\14\1\0\1\14\56\0\1\332"+
    "\116\0\1\335\130\0\1\u01b7\121\0\1\u01b8\30\0\10\14"+
    "\1\0\2\14\2\0\4\14\12\0\2\14\1\124\1\0"+
    "\2\14\1\0\1\125\2\14\5\0\2\14\5\0\2\14"+
    "\1\u01b9\21\14\1\0\2\14\1\0\1\14\5\0\10\14"+
    "\1\0\2\14\2\0\4\14\12\0\2\14\1\124\1\0"+
    "\2\14\1\0\1\125\2\14\5\0\2\14\5\0\5\14"+
    "\1\u01ba\16\14\1\0\2\14\1\0\1\14\71\0\1\u01b7"+
    "\32\0\10\14\1\0\2\14\2\0\4\14\12\0\2\14"+
    "\1\124\1\0\2\14\1\0\1\125\2\14\5\0\2\14"+
    "\5\0\3\14\1\u01b9\20\14\1\0\2\14\1\0\1\14"+
    "\4\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[27255];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\12\0\1\11\24\1\1\11\1\1\1\11\1\1\2\11"+
    "\1\1\1\11\20\1\2\11\4\1\2\11\4\1\1\11"+
    "\4\1\3\0\1\1\1\0\2\1\4\0\5\1\2\0"+
    "\1\1\1\0\1\11\10\1\1\0\1\11\1\0\2\1"+
    "\1\0\3\1\1\0\3\1\1\0\1\1\1\0\1\1"+
    "\1\11\4\1\2\0\27\1\3\0\2\1\1\0\1\1"+
    "\1\11\2\0\1\11\2\1\1\0\1\1\1\11\1\1"+
    "\1\0\1\11\1\0\2\1\4\0\1\11\1\1\1\0"+
    "\1\11\2\0\2\1\2\0\1\1\1\0\4\1\1\0"+
    "\1\1\1\0\7\1\1\0\2\1\2\0\2\1\1\11"+
    "\3\1\2\0\1\11\1\0\1\1\1\0\1\11\2\0"+
    "\1\11\2\0\36\1\1\11\2\0\1\1\1\11\1\1"+
    "\1\11\1\0\2\1\2\0\5\1\1\11\1\0\5\1"+
    "\1\0\2\1\2\0\1\1\1\0\3\1\4\0\1\1"+
    "\5\0\31\1\1\0\4\1\1\0\6\1\1\0\1\1"+
    "\2\0\1\11\1\0\1\1\6\0\7\1\1\0\15\1"+
    "\1\0\1\1\1\0\3\1\1\0\1\1\3\11\2\0"+
    "\1\1\3\0\3\1\2\0\14\1\1\0\1\1\3\0"+
    "\1\1\2\0\7\1\1\0\1\1\3\0\1\1\2\0"+
    "\6\1\4\0\3\1\1\11\1\0\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[442];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** For the backwards DFA of general lookahead statements */
  private boolean [] zzFin = new boolean [ZZ_BUFFERSIZE+1];

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private static abstract class InterpolatedStringLevel {
      private int value = 0;
      
      public int get() {
        return value;
      }
      
      public boolean isZero() {
        return value == 0;
      }
      
      public void increase() {
        ++value;
      }
      
      public void decrease() {
        --value;
      }
      
      public abstract int getState();
    }
    
    private static class RegularLevel extends InterpolatedStringLevel { 
      public int getState() {
        return INSIDE_INTERPOLATED_STRING;
      }
    }
    
    private static class MultilineLevel extends InterpolatedStringLevel { 
      public int getState() {
        return INSIDE_MULTI_LINE_INTERPOLATED_STRING;
      }
    }

    //do we need to close interpolated String ${}
    private boolean insideInterpolatedStringBracers = false;
    private boolean insideInterpolatedMultilineStringBracers = false;
    //to get id after $ in interpolated String
    private boolean haveIdInString = false;
    private boolean haveIdInMultilineString = false;
    //bracers count inside injection
    private int structuralBracers = 0;
    // Currently opened interpolated Strings. Each int represents the number of the opened left structural braces in the String 
    private Stack<InterpolatedStringLevel> nestedString = new Stack<InterpolatedStringLevel>();
    
    public boolean isInterpolatedStringState() {
        return shouldProcessBracesForInterpolated()    || haveIdInString || haveIdInMultilineString || 
               yystate() == INSIDE_INTERPOLATED_STRING || yystate() == INSIDE_MULTI_LINE_INTERPOLATED_STRING;
    }
    
    private boolean shouldProcessBracesForInterpolated() {
      return !nestedString.empty();      
    }
    
    private void changeStringLevel() {
      if (!nestedString.isEmpty()) nestedString.pop();
      yybegin(COMMON_STATE);
    }

    private IElementType process(IElementType type){
      if ((type == tIDENTIFIER || type == kTHIS) && (haveIdInString || haveIdInMultilineString)) {

        if (haveIdInString) {
          haveIdInString = false;
          yybegin(INSIDE_INTERPOLATED_STRING);
        } else {
          haveIdInMultilineString = false;
          yybegin(INSIDE_MULTI_LINE_INTERPOLATED_STRING);
        }
      }
      
      if (yystate() == YYINITIAL && type != tWHITE_SPACE_IN_LINE && type != tLBRACE && type != tLPARENTHESIS) {
        yybegin(COMMON_STATE);
      }

      return type;
    }
    
    
    private void splitInjection() {
      CharSequence seq = yytext();
      for (int i = 1; i < seq.length(); ++i) {
        if (seq.charAt(i) == '$') {
          yypushback(seq.length() - i);
          return;
        }
      }
    }


  public _ScalaCoreLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _ScalaCoreLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2618) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  // For Demetra compatibility
  public void reset(CharSequence buffer, int initialState){
    zzBuffer = buffer;
    zzBufferArray = null;
    zzCurrentPos = zzMarkedPos = zzStartRead = 0;
    zzPushbackPos = 0;
    zzAtEOF = false;
    zzAtBOL = true;
    zzEndRead = buffer.length();
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
      return;

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 76: 
          { return process(kCATCH);
          }
        case 96: break;
        case 73: 
          { return process(kTRAIT);
          }
        case 97: break;
        case 94: 
          { return process(kPROTECTED);
          }
        case 98: break;
        case 44: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { yybegin(COMMON_STATE);
      return process(tINTERPOLATED_STRING_INJECTION);
          }
        case 99: break;
        case 32: 
          { return process(tLOWER_BOUND);
          }
        case 100: break;
        case 31: 
          { return process(tLINE_COMMENT);
          }
        case 101: break;
        case 60: 
          { return process(tSH_COMMENT);
          }
        case 102: break;
        case 6: 
          { return process(tCOLON);
          }
        case 103: break;
        case 86: 
          { return process(kEXTENDS);
          }
        case 104: break;
        case 61: 
          { //for comments in interpolated strings
    return process(tBLOCK_COMMENT);
          }
        case 105: break;
        case 56: 
          { changeStringLevel();
      return process(tINTERPOLATED_STRING_END);
          }
        case 106: break;
        case 54: 
          { return process(kVAR);
          }
        case 107: break;
        case 55: 
          { yybegin(INSIDE_MULTI_LINE_INTERPOLATED_STRING);
    nestedString.push(new MultilineLevel());
    return process(tINTERPOLATED_MULTILINE_STRING);
          }
        case 108: break;
        case 83: 
          { return process(kRETURN);
          }
        case 109: break;
        case 20: 
          { return process(tSEMICOLON);
          }
        case 110: break;
        case 62: 
          { return process(kTRUE);
          }
        case 111: break;
        case 84: 
          { return process(kOBJECT);
          }
        case 112: break;
        case 10: 
          { return process(tWRONG_STRING);
          }
        case 113: break;
        case 43: 
          { if (yycharat(1) != '$') {
      haveIdInMultilineString = true;
      yybegin(INJ_COMMON_STATE);
      yypushback(yytext().length() - 1);
      return process(tINTERPOLATED_STRING_INJECTION);
    } else {
      yypushback(yytext().length() - 2);
      return process(tINTERPOLATED_STRING_ESCAPE);
    }
          }
        case 114: break;
        case 1: 
          { return process(tSTUB);
          }
        case 115: break;
        case 67: 
          { return process(kWITH);
          }
        case 116: break;
        case 36: 
          { return process(tUPPER_BOUND);
          }
        case 117: break;
        case 4: 
          { return process(tDOT);
          }
        case 118: break;
        case 78: 
          { return process(kMATCH);
          }
        case 119: break;
        case 21: 
          { return process(tCOMMA);
          }
        case 120: break;
        case 34: 
          { return process(tSTRING);
          }
        case 121: break;
        case 63: 
          { return process(kTHIS);
          }
        case 122: break;
        case 74: 
          { return process(kTHROW);
          }
        case 123: break;
        case 53: 
          { return process(kVAL);
          }
        case 124: break;
        case 90: 
          { return process(kPRIVATE);
          }
        case 125: break;
        case 66: 
          { return process(kNULL);
          }
        case 126: break;
        case 40: 
          { return process(tINTERPOLATED_STRING_ESCAPE);
          }
        case 127: break;
        case 88: 
          { return process(kFINALLY);
          }
        case 128: break;
        case 87: 
          { return process(kFOR_SOME);
          }
        case 129: break;
        case 82: 
          { return process(kSEALED);
          }
        case 130: break;
        case 75: 
          { return process(kCLASS);
          }
        case 131: break;
        case 14: 
          { if (shouldProcessBracesForInterpolated()) {
                                              InterpolatedStringLevel level = nestedString.peek();
                                              level.decrease();
                                              
                                              if (level.isZero()) {
                                                yybegin(level.getState());
                                              }
                                            }
                                            return process(tRBRACE);
          }
        case 132: break;
        case 3: 
          { return process(tINTEGER);
          }
        case 133: break;
        case 45: 
          // general lookahead, find correct zzMarkedPos
          { int zzFState = 8;
            int zzFPos = zzStartRead;
            if (zzFin.length <= (zzBufferArrayL != null ? zzBufferArrayL.length : zzBufferL.length())) { zzFin = new boolean[(zzBufferArrayL != null ? zzBufferArrayL.length : zzBufferL.length())+1]; }
            boolean zzFinL[] = zzFin;
            while (zzFState != -1 && zzFPos < zzMarkedPos) {
              if ((zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzFPos++] : zzBufferL.charAt(zzFPos++));
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            }
            if (zzFState != -1 && (zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 

            zzFState = 9;
            zzFPos = zzMarkedPos;
            while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[--zzFPos] : zzBufferL.charAt(--zzFPos));
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            };
            zzMarkedPos = zzFPos;
          }
          { return process(tINTEGER);
          }
        case 134: break;
        case 92: 
          { return process(kOVERRIDE);
          }
        case 135: break;
        case 89: 
          { return process(kPACKAGE);
          }
        case 136: break;
        case 25: 
          { changeStringLevel();
    return process(tINTERPOLATED_STRING_END);
          }
        case 137: break;
        case 11: 
          { return process(tLSQBRACKET);
          }
        case 138: break;
        case 30: 
          { return process(kDO);
          }
        case 139: break;
        case 46: 
          { return process(kFOR);
          }
        case 140: break;
        case 69: 
          { return process(kFALSE);
          }
        case 141: break;
        case 28: 
          // general lookahead, find correct zzMarkedPos
          { int zzFState = 6;
            int zzFPos = zzStartRead;
            if (zzFin.length <= (zzBufferArrayL != null ? zzBufferArrayL.length : zzBufferL.length())) { zzFin = new boolean[(zzBufferArrayL != null ? zzBufferArrayL.length : zzBufferL.length())+1]; }
            boolean zzFinL[] = zzFin;
            while (zzFState != -1 && zzFPos < zzMarkedPos) {
              if ((zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzFPos++] : zzBufferL.charAt(zzFPos++));
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            }
            if (zzFState != -1 && (zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 

            zzFState = 7;
            zzFPos = zzMarkedPos;
            while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[--zzFPos] : zzBufferL.charAt(--zzFPos));
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            };
            zzMarkedPos = zzFPos;
          }
          { yybegin(WAIT_FOR_INTERPOLATED_STRING);
  if (StringUtil.endsWith(yytext(), "\"\"")) yypushback(2);
  return haveIdInString || haveIdInMultilineString ? process(tIDENTIFIER) : process(tINTERPOLATED_STRING_ID) ;
          }
        case 142: break;
        case 19: 
          { return process(tCHOOSE);
          }
        case 143: break;
        case 77: 
          { return process(kYIELD);
          }
        case 144: break;
        case 39: 
          { if (yycharat(1) != '$') {
      haveIdInString = true;
      yybegin(INJ_COMMON_STATE);
      yypushback(yytext().length() - 1);
      return process(tINTERPOLATED_STRING_INJECTION);
    } else {
      yypushback(yytext().length() - 2);
      return process(tINTERPOLATED_STRING_ESCAPE);
    }
          }
        case 145: break;
        case 7: 
          { return process(tAT);
          }
        case 146: break;
        case 22: 
          { yybegin(INSIDE_INTERPOLATED_STRING);
    nestedString.push(new RegularLevel());
    return process(tINTERPOLATED_STRING);
          }
        case 147: break;
        case 2: 
          { return process(tIDENTIFIER);
          }
        case 148: break;
        case 52: 
          { return process(kNEW);
          }
        case 149: break;
        case 50: 
          { yypushback(yytext().length() - 1);
                                            yybegin(YYINITIAL);
                                            return process(tLPARENTHESIS);
          }
        case 150: break;
        case 16: 
          { return process(tRPARENTHESIS);
          }
        case 151: break;
        case 79: 
          { return process(kMACRO);
          }
        case 152: break;
        case 9: 
          { yybegin(YYINITIAL);
                                            return process(tWHITE_SPACE_IN_LINE);
          }
        case 153: break;
        case 37: 
          { return process(tVIEW);
          }
        case 154: break;
        case 93: 
          { return process(kIMPLICIT);
          }
        case 155: break;
        case 35: 
          { yybegin(COMMON_STATE);
                                            yypushback(yytext().length());
                                            return SCALA_XML_CONTENT_START;
          }
        case 156: break;
        case 15: 
          { return process(tLPARENTHESIS);
          }
        case 157: break;
        case 12: 
          { if (shouldProcessBracesForInterpolated()) {
                                              nestedString.peek().increase();
                                            }

                                            return process(tLBRACE);
          }
        case 158: break;
        case 81: 
          { return process(tMULTILINE_STRING);
          }
        case 159: break;
        case 70: 
          { return process(kFINAL);
          }
        case 160: break;
        case 51: 
          { return process(kTRY);
          }
        case 161: break;
        case 64: 
          { return process(kTYPE);
          }
        case 162: break;
        case 5: 
          { return process(tINNER_CLASS);
          }
        case 163: break;
        case 58: 
          { return process(kLAZY);
          }
        case 164: break;
        case 72: 
          { return process(kSUPER);
          }
        case 165: break;
        case 71: 
          { //for comments in interpolated strings
    return process(ScalaDocElementTypes.SCALA_DOC_COMMENT);
          }
        case 166: break;
        case 23: 
          { return process(tINTERPOLATED_STRING);
          }
        case 167: break;
        case 95: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 4;
          { return process(kCASE);
          }
        case 168: break;
        case 65: 
          { return process(kCASE);
          }
        case 169: break;
        case 8: 
          { return process(tUNDER);
          }
        case 170: break;
        case 33: 
          { return process(tSYMBOL);
          }
        case 171: break;
        case 41: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { yybegin(COMMON_STATE);
    return process(tINTERPOLATED_STRING_INJECTION);
          }
        case 172: break;
        case 17: 
          { return process(tASSIGN);
          }
        case 173: break;
        case 26: 
          { return process(tINTERPOLATED_MULTILINE_STRING);
          }
        case 174: break;
        case 42: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { return process(tINTERPOLATED_MULTILINE_STRING);
          }
        case 175: break;
        case 57: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 2;
          { return process(tINTERPOLATED_MULTILINE_STRING);
          }
        case 176: break;
        case 85: 
          { return process(kIMPORT);
          }
        case 177: break;
        case 68: 
          { yypushback(yytext().length() - 1);
    return process(tINTERPOLATED_MULTILINE_STRING);
          }
        case 178: break;
        case 49: 
          { if (shouldProcessBracesForInterpolated()) {
                                              nestedString.peek().increase();
                                            }
                                            
                                            yypushback(yytext().length() - 1);
                                            yybegin(YYINITIAL);
                                            return process(tLBRACE);
          }
        case 179: break;
        case 91: 
          { return process(kABSTRACT);
          }
        case 180: break;
        case 29: 
          { return process(tFLOAT);
          }
        case 181: break;
        case 27: 
          { splitInjection();
  if ("this".contentEquals(yytext())) return process(kTHIS); 
  return process(tIDENTIFIER);
          }
        case 182: break;
        case 38: 
          { return process(kIF);
          }
        case 183: break;
        case 48: 
          { return process(tCHAR);
          }
        case 184: break;
        case 24: 
          { yybegin(COMMON_STATE);
    return process(tWRONG_STRING);
          }
        case 185: break;
        case 18: 
          { return process(tFUNTYPE);
          }
        case 186: break;
        case 13: 
          { return process(tRSQBRACKET);
          }
        case 187: break;
        case 80: 
          { return process(kWHILE);
          }
        case 188: break;
        case 47: 
          { return process(kDEF);
          }
        case 189: break;
        case 59: 
          { return process(kELSE);
          }
        case 190: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
