<!--
  ~ Copyright 2000-2009 JetBrains s.r.o.
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~ http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<project name="Generate various scala packages for parser needs" default="rebuild.all">

  <property name="base.dir" value="."/>

  <property file="${base.dir}/scala.properties"/>

  <property name="scala.lib" value="${base.dir}/SDK/scala"/>

  <property name="runners.dir" value="${base.dir}/Runners"/>

  <property name="compiled.dest" value="${base.dir}/classes/"/>
  <property name="production.dest" location="${compiled.dest}/production/"/>
  <property name="test.dest" value="${compiled.dest}/test/"/>
  <property name="main.dest" location="${production.dest}/Scala"/>
  <property name="runners.dest" location="${production.dest}/Runners"/>

  <property name="idea.lib" value="${idea.home}/lib"/>
  <property name="jdk.lib" value="${java.home}/lib"/>
  <property name="tools.jar" value="${java.home}/lib/tools.jar"/>
  <property name="scala.aux.lib" value="${base.dir}/SDK/lib"/>

  <property name="test.dist" value="${basedir}/test_dist"/>

  <property name="0" value="unknown"/>
  <property name="build.vcs.number.scala_svn" value="unknown"/>
  <property name="plugin.revision" value="${build.vcs.number}"/>
  <property name="plugin.build.number" value="${build.number}"/>
  <property name="plugin.version" value="${plugin.build.number}"/>

  <property name="scalap.dir" value="${base.dir}/SDK/scalap"/>
  <property name="scalap.jar" value="${scalap.dir}/scalap.jar"/>
  <property name="scala.jar" value="scala-plugin.jar"/>
  <property name="runners.jar" value="scala-plugin-runners.jar"/>
  <property name="temp.jar.dir" value="${base.dir}/tempjar"/>
  <property name="dist.dir" value="${base.dir}/dist"/>


  <target name="unzip.last.successful.IDEA.build">
    <unzip dest="${idea.home}">
      <fileset dir="${idea.home}">
        <include name="idea*.zip"/>
      </fileset>
    </unzip>

    <!-- Read SINCE and UNTIL properties -->
    <loadfile property="since.idea.build" srcFile="${idea.home}/build.txt" failonerror="true"/>
    <loadfile property="until.idea.build" srcFile="${idea.home}/build.txt" failonerror="true"/>
  </target>

  <path id="idea.lib.path">
    <fileset dir="${idea.lib}">
      <include name="**/*.jar"/>
      <exclude name="boot.jar"/>
    </fileset>
  </path>

  <path id="base.path">
    <fileset dir="${scala.lib}">
      <include name="**/*.jar"/>
      <exclude name="**/scalap.jar"/>
    </fileset>
    <fileset dir="${scala.aux.lib}">
      <include name="**/*.jar"/>
    </fileset>
    <fileset dir="${jdk.lib}">
      <include name="**/*.jar"/>
    </fileset>
    <fileset dir="${idea.lib}">
      <include name="**/*.jar"/>
    </fileset>
    <fileset dir="${idea.home}/plugins/">
      <include name="**/*.jar"/>
    </fileset>
    <pathelement location="${scalap.jar}"/>
  </path>

  <target name="clear.all" description="Clears results">
    <mkdir dir="${compiled.dest}"/>
    <delete includeemptydirs="true">
      <fileset dir="${compiled.dest}"/>
    </delete>
  </target>

  <target name="create.lexer" description="Makes lexer file">
    <ant dir="${base.dir}/src/org/jetbrains/plugins/scala/lang/lexer/core"
         antfile="build.xml" target="generate.lexer"/>
  </target>

  <target name="make.project" depends="unzip.last.successful.IDEA.build" description="Builds all classes">
    <taskdef name="javac2" classname="com.intellij.ant.Javac2" classpathref="idea.lib.path"/>

    <mkdir dir="${main.dest}"/>
    <mkdir dir="${main.dest}/META-INF"/>
    <mkdir dir="${main.dest}"/>
    <mkdir dir="${runners.dest}"/>

    <copy todir="${main.dest}/META-INF">
      <fileset dir="${base.dir}/META-INF"/>
    </copy>

    <copy todir="${main.dest}">
      <fileset dir="${base.dir}/resources/"/>
    </copy>

    <!-- Compile runners -->

    <!--logging="debug"-->
    <!--scalacdebugging="yes"-->

    <javac srcdir="${base.dir}"
            destdir="${runners.dest}"
            target="1.5"
            debug="true">
      <classpath refid="base.path"/>
      <include name="Runners/src/**/*.java"/>
    </javac>

    <!--Scalac 2.8 taskdef-->
    <taskdef resource="scala/tools/ant/antlib.xml">
      <classpath>
        <pathelement location="${scala.lib}/scala-compiler.jar"/>
        <pathelement location="${scala.lib}/scala-library.jar"/>
      </classpath>
    </taskdef>

    <scalac srcdir="${base.dir}"
            destdir="${main.dest}"
            force="changed"
            fork="true"
            jvmargs="-Xmx1024M -Xms768M -Xss1024k -server">
      <classpath>
        <path  refid="base.path"/>
        <path location="${main.dest}"/>
        <path location="${runners.dest}"/>
      </classpath>
      <include name="src/**/*.scala"/>
      <include name="src/**/*.java"/>
    </scalac>

    <javac2 srcdir="${base.dir}"
            destdir="${main.dest}"
            debug="true">
      <classpath>
        <path  refid="base.path"/>
        <path location="${main.dest}"/>
        <path location="${runners.dest}"/>
      </classpath>
      <include name="src/**/*.java"/>
      <include name="src/**/*.form"/>
    </javac2>

    <copy file="${base.dir}/src/org/jetbrains/plugins/scala/ScalaBundle.properties"
          tofile="${main.dest}/org/jetbrains/plugins/scala/ScalaBundle.properties"/>

    <!-- Write plugin version, Since and Until attributes -->
    <replace file="${main.dest}/META-INF/plugin.xml" token="VERSION" value="${plugin.version}"/>
    <!--<replace file="${main.dest}/META-INF/plugin.xml" token="SINCE_IDEA" value="${since.idea.build}"/>
    <replace file="${main.dest}/META-INF/plugin.xml" token="UNTIL_IDEA" value="${until.idea.build}"/>-->

  </target>

  <target name="jar.plugin" depends="make.project" description="Makes jar">

    <mkdir dir="${temp.jar.dir}/Scala/lib"/>
    <mkdir dir="${dist.dir}"/>

    <jar destfile="${temp.jar.dir}/Scala/lib/${scala.jar}">
      <fileset dir="${main.dest}"/>
      <manifest>
        <attribute name="Revision" value="${plugin.revision}"/>
        <attribute name="Build" value="${plugin.version}"/>
      </manifest>
    </jar>

    <jar destfile="${temp.jar.dir}/Scala/lib/${runners.jar}">
      <fileset dir="${runners.dest}"/>
      <manifest>
        <attribute name="Revision" value="${plugin.revision}"/>
        <attribute name="Build" value="${plugin.version}"/>
      </manifest>
    </jar>

    <copy todir="${temp.jar.dir}/Scala/lib">
      <fileset dir="${scala.lib}">
        <include name="**/scala-library.jar"/>
      </fileset>
    </copy>
    <copy todir="${temp.jar.dir}/Scala/lib">
      <fileset dir="${scalap.dir}">
        <include name="**/scalap.jar"/>
      </fileset>
    </copy>

    <zip destfile="${dist.dir}/scala-intellij-bin-${plugin.version}.zip" basedir="${temp.jar.dir}"/>
    <delete dir="${temp.jar.dir}"/>
  </target>

  <target name="rebuild.all" depends="clear.all, make.project, jar.plugin, zip.sources"
          description="Builds all classes"/>

  <target name="zip.sources" description="Zips sources">
    <mkdir dir="${dist.dir}"/>

        <zip destfile="${dist.dir}/scala-intellij-src-${plugin.version}.zip"
         basedir="${base.dir}"
         includes="
         **/*.java,
         **/*.scala,
         **/*.properties,
         **/*.flex,
         **/*.jar,
         **/*.skeleton,
         **/*.xml,
         **/*.png,
         META-INF/**/*.xml"
         excludes="idea_pack/**/*"
        />
  </target>

  <target name="build.tests" depends="make.project">

    <mkdir dir="${test.dest}"/>

    <scalac srcdir="${base.dir}/test"
            destdir="${test.dest}"
            force="changed"
            fork="false">
      <classpath refid="base.path"/>
      <classpath>
        <path location="${main.dest}"/>
        <path location="${runners.dest}"/>
      </classpath>
      <include name="**/*.java"/>
      <include name="**/*.scala"/>
    </scalac>


    <javac srcdir="${base.dir}/test"
           destdir="${test.dest}"
           debug="true">
      <classpath>
        <path  refid="base.path"/>
        <path location="${main.dest}"/>
        <path location="${runners.dest}"/>
      </classpath>
      <include name="**/*.java"/>
    </javac>

  </target>

  <target name="run.tests" depends="build.tests">

    <copy toDir="${main.dest}/testdata">
      <fileset dir="${base.dir}/testdata"/>
    </copy>

    <mkdir dir="${base.dir}/logs"/>
    <mkdir dir="${test.dist}/config"/>
    <mkdir dir="${test.dist}/system"/>

    <echo message="${tools.jar}"/>

    <junit fork="yes"
           dir="${base.dir}"
           showoutput="yes"
           printsummary="yes"
           haltonfailure="no"
           haltonerror="no">

      <classpath>
        <path refid="base.path"/>
        <path location="${main.dest}"/>
        <path location="${runners.dest}"/>
        <path location="${test.dest}"/>
      </classpath>

      <jvmarg value="-Xbootclasspath/p:./SDK/boot/boot.jar"/>
      <jvmarg value="-Djava.awt.headless=true"/>
      <jvmarg value="-Xmx256M"/>
      <jvmarg value="-ea"/>
      <jvmarg value="-Djava.compiler=NONE"/>
      <jvmarg value="-Xdebug"/>
      <jvmarg value="-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=5113"/>

      <jvmarg value="-Didea.config.path=${test.dist}/config"/>
      <jvmarg value="-Didea.system.path=${test.dist}/system"/>
      <jvmarg value="-Didea.plugins.path=${production.dest}"/>

      <jvmarg value="-Didea.load.plugins.id=org.intellij.scala"/>

      <formatter type="plain"/>

      <batchtest todir="${base.dir}/logs">
        <fileset dir="${test.dest}">
          <include name="**/*Test.class"/>
          <exclude name="**/*ActualTest.class"/>
          <exclude name="**/*Problematic*Test.class"/>
        </fileset>
      </batchtest>

    </junit>
    <delete dir="${test.dist}/config"/>
    <delete dir="${test.dist}/system"/>

  </target>

  <target name="run.problematic.tests" depends="build.tests">

    <copy toDir="${main.dest}/testdata">
      <fileset dir="${base.dir}/testdata"/>
    </copy>

    <mkdir dir="${base.dir}/logs"/>
    <mkdir dir="${test.dist}/config"/>
    <mkdir dir="${test.dist}/system"/>

    <echo message="${tools.jar}"/>

    <junit fork="yes"
           dir="${base.dir}"
           showoutput="yes"
           printsummary="yes"
           haltonfailure="no"
           haltonerror="no">

      <classpath>
        <path refid="base.path"/>
        <path location="${main.dest}"/>
        <path location="${runners.dest}"/>
        <path location="${test.dest}"/>
      </classpath>

      <jvmarg value="-Xbootclasspath/p:./SDK/boot/boot.jar"/>
      <jvmarg value="-Djava.awt.headless=true"/>
      <jvmarg value="-Xmx256M"/>
      <jvmarg value="-ea"/>
      <jvmarg value="-Djava.compiler=NONE"/>
      <jvmarg value="-Xdebug"/>
      <jvmarg value="-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=5113"/>

      <jvmarg value="-Didea.config.path=${test.dist}/config"/>
      <jvmarg value="-Didea.system.path=${test.dist}/system"/>
      <jvmarg value="-Didea.plugins.path=${production.dest}"/>

      <jvmarg value="-Didea.load.plugins.id=org.intellij.scala"/>

      <formatter type="plain"/>

      <batchtest todir="${base.dir}/logs">
        <fileset dir="${test.dest}">
          <include name="**/*Problematic*Test.class"/>
          <exclude name="**/*ActualTest.class"/>
        </fileset>
      </batchtest>

    </junit>
    <delete dir="${test.dist}/config"/>
    <delete dir="${test.dist}/system"/>

  </target>

</project>
