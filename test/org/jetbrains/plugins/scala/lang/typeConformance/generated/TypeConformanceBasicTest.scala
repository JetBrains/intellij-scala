package org.jetbrains.plugins.scala.lang.typeConformance
package generated

class TypeConformanceBasicTest extends TypeConformanceTestBase {
  //This class was generated by build script, please don't change this
  override def rootPath: String = super.rootPath + "basic/"

  //todo:
  /*def testAbstractType() {doTest()}*/

  def testAliasBounds() {doTest()}

  def testAliasBounds2() {doTest()}

  def testAnyRef() {doTest()}

  def testAnyVal1() {doTest()}

  def testAnyVal2() {doTest()}

  def testAnyVal3() {doTest()}

  def testAnyVal4() {doTest()}

  def testAnyVal5() {doTest()}

  def testBasicConformance() {doTest()}

  def testBasicNonConformance() {doTest()}

  def testDependentEnumBaseTypes() {doTest()}

  def testFloat() {doTest()}

  def testFunctionFalseConformance() {doTest()}

  def testFunctionPlaceholderMatch() {doTest()}

  def testFunctionRightConformance() {doTest()}

  def testHashSetIsSet() {doTest()}

  def testImplicitInixParamClause() {doTest()}

  def testIsDefinedAt() {doTest()}

  def testNullConformance() {doTest()}

  def testStringLiteralToObject() {doTest()}

  def testTupleConformance() {doTest()}

  def testTupleRightConformance() {doTest()}

  def testTupleToConformance() {doTest()}

  def testTupleToProductNoConformance() {doTest()}
}