package org.jetbrains.plugins.scala.lang.typeInference
package generated

class TypeInferenceLocalTypeInferenceTest extends TypeInferenceTestBase {
  //This class was generated by build script, please don't change this
  override def folderPath: String = super.folderPath + "localTypeInference/"

  def testAbstractExpectedType() {doTest()}

  def testAnyValUpperLowerBound() {doTest()}

  def testArrayCreation() {doTest()}

  def testAsInstanceOfOmittedGenerics() {doTest()}

  def testCompoundType() {doTest()}

  def testEmptyArray() {doTest()}

  def testExistentialInference() {doTest()}

  def testForIndexedSeq() {doTest()}

  def testFromImplicitParam() {doTest()}

  def testFromImplicitParameter() {doTest()}

  def testInfixMap() {doTest()}

  def testIntArrayCreation() {doTest()}

  def testListUnion() {doTest()}

  def testMap() {doTest()}

  def testMapAsFunction() {doTest()}

  def testMostSpecificRuleImplicitParameters() {doTest()}

  def testNoSOE() {doTest()}

  def testOmittedGenericsWithOurClass() {doTest()}

  def testSCL1547() {doTest()}

  def testSCL1644() {doTest()}

  def testSCL1671() {doTest()}

  def testSCL1687() {doTest()}

  def testSCL1771() {doTest()}

  def testSCL1771First() {doTest()}

  def testSCL1772() {doTest()}

  def testSCL1824() {doTest()}

  def testSCL3422() {doTest()}

  def testPatternExistential() {doTest()}

  def testRawTypes() {doTest()}

  def testSameNameGeneric() {doTest()}

  def testSecondClause() {doTest()}

  def testSelfTypeExpected() {doTest()}

  def testSimpleTypeAlias() {doTest()}

  def testSmartArrayMap() {doTest()}

  def testSmartArrayMap2() {doTest()}

  def testSome() {doTest()}

  def testSynchronizedWithGenerics() {doTest()}

  def testToArray() {doTest()}

  def testTypedPatternInference() {doTest()}

  def testZipArrays() {doTest()}

  def testZipWithIndex() {doTest()}

  def testsyncronized() {doTest()}
}