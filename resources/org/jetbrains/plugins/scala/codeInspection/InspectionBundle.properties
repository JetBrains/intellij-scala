single.import=Remove braces from import statement containing only one import
name.boolean=Name boolean parameters
name.boolean.ignore.setters=Ignore Java-like setters
remove.apply.implicit.parameter=It is not allowed to remove ''apply'' because method ''{0}'' has implicit parameter
remove.apply.constructor.implicit.parameter=It is not allowed to remove ''apply'' because constructor of ''{0}'' has implicit parameter
remove.apply.overloaded=It is not allowed to remove ''apply'' because method ''{0}'' is overloaded
introduce.implicit.incorrect.order=It is not allowed to introduce implicit parameters because of incorrect order of parameters
introduce.implicit.incorrect.count=It is not allowed to introduce implicit parameter because of incorrect usage count of parameter
introduce.implicit.not.allowed.here=It is not allowed to introduce implicit parameter in this expression
catch.all=Specify type of exception

operation.on.collection.id=OperationsOnCollection
operation.on.collection.name=Simplifiable operation on collection
operation.on.collection.like.option.input.message=Inspection would treat these classes like scala.Option
operation.on.collection.like.option.input.title=Add like-option classes
operation.on.collection.like.option.panel.title=Like-option classes
operation.on.collection.like.collection.input.message=Inspection would treat these classes like collections
operation.on.collection.like.collection.input.title=Add like-collection classes
operation.on.collection.like.collection.panel.title=Like-collection classes

map.getOrElse.false.hint=Replace map and getOrElse(false) with exists
find.isDefined.hint=Replace find and non-emptiness check with exists
find.isEmpty.hint=Replace find and emptiness check with !(...).exists
filter.headOption.hint=Replace filter and headOption with find
fold.sum.hint=Replace fold with sum
fold.product.hint=Replace fold with product
fold.sum.short=fold to sum
fold.product.short=fold to product
reduce.sum.hint=Replace reduce with sum
reduce.product.hint=Replace reduce with product
reduce.min.hint=Replace reduce with min
reduce.max.hint=Replace reduce with max
reduce.sum.short=reduce to sum
reduce.product.short=reduce to product
reduce.min.short=reduce to min
reduce.max.short=reduce to max
fold.true.and.hint=Replace fold with forall
filter.size.hint=Replace filter and size with count
filter.nonempty.check.hint=Replace filter and non-emptiness check with exists
filter.empty.check.hint=Replace filter and emptiness check with !(...).exists
filterNot.empty.check.hint=Replace filterNot and emptiness check with forall
filterNot.nonempty.check.hint=Replace filterNot and non-emptiness check with !(...).forall
sort.filter.hint=Change order of sort and filter
map.getOrElse.hint=Replace map and getOrElse with fold
exists.equals.hint=Replace exists with contains
forall.notEquals.hint=Replace forall with not contains
getOrElse.null.hint=Replace getOrElse(null) with orNull
drop.one.hint=Replace drop(1) with tail
get.getOrElse.hint=Replace with getOrElse(key, defaultValue)
redundant.collection.conversion=Remove redundant collection conversion
replace.with.head=Replace with .head
replace.with.last=Replace with .last
replace.with.zipWithIndex=Replace with zipWithIndex
replace.reverse.iterator=Replace .reverse.iterator with .reverseIterator
replace.reverse.map=Replace .reverse.map with .reverseMap
side.effects.in.monadic=Side effects in a monadic transformation
size.to.length=Replace .size with .length on arrays and strings
expression.unit.return.in.map=Expression with unit return type in the argument of map
use.foreach.instead.of.map=Use foreach instead of map
replace.with.isEmpty=Replace with .isEmpty
replace.with.isDefined=Replace with .isDefined
replace.with.nonEmpty=Replace with .nonEmpty
replace.map.contains.true.with.exists=Replace .map(...).contains(true) with .exists(...)
replace.map.contains.false.with.not.forall=Replace .map(...).contains(false) with ! .forall(...)
replace.toSet.and.back.with.distinct=Replace conversion to Set and back with .distinct
replace.drop.take.with.slice=Replace .drop and .take with .slice
replace.take.drop.with.slice=Replace .take and .drop with .slice
replace.reverse.take.reverse.with.takeRight=Replace .reverse.take(...).reverse with .takeRight(...)
replace.map.flatten.with.flatMap=Replace .map and .flatten with .flatMap
replace.equals.with.sameElements=Replace equals with sameElements
replace.equals.with.arrays.equals=Use java.util.Arrays.equals instead of array equality
replace.sameElements.with.equals=Replace sameElements with equals
replace.corresponds.with.equals=Replace corresponds with equals
sameElements.unsorted=`sameElements` on (or with) unsorted collection, result is unpredictable
corresponds.unsorted=`corresponds` with unsorted collection, result is unpredictable

replace.filter.with.intersect=Replace filter and contains with intersect
replace.filter.with.diff=Replace filter and not contains with diff
replace.with.keys=Replace with .keys
replace.with.keySet=Replace with .keySet
replace.with.keysIterator=Replace with .keysIterator
replace.with.values=Replace with .values
replace.with.valuesIterator=Replace with .valuesIterator
replace.with.headOption=Replace with .headOption
replace.with.lastOption=Replace with .lastOption
replace.with.contains=Replace with .contains
replace.with.not.contains=Replace with !.contains

ifstmt.to.headOption=If-else to headOption
ifstmt.to.lastOption=If-else to lastOption
lift.to.headOption=.lift to headOption
lift.to.lastOption=.lift to lastOption
remove.redundant.headOption=Remove redundant .headOption
remove.redundant.lastOption=Remove redundant .lastOption

convertible.to.method.value.name=Anonymous function convertible to a method value
convertible.to.method.value.anonymous.hint=Convert to a method value
convertible.to.method.value.eta.hint=Remove redundant placeholder

unit.method.like.procedure.name=Method with Unit result type defined like procedure
unit.method.like.procedure.id=ScalaUnitMethodDefinedAsProcedure
insert.return.type.and.equals=Insert return type and equals sign
add.unit.type.to.declaration=Add Unit type to declaration explicitly
declaration.has.no.explicit.type.name=Method declaration has no explicit return type
declaration.has.no.explicit.type.id=DeclarationHasNoExplicitType

ignore.clarifying.parentheses=Ignore clarifying parentheses

comparing.unrelated.types.name=Comparing unrelated types

suppress.inspection.function=Suppress for function
suppress.inspection.typeAlias=Suppress for type alias
suppress.inspection.variable=Suppress for variable definiton
suppress.inspection.argument=Suppress for argument
