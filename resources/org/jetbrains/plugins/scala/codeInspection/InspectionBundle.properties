single.import=Remove braces from import statement containing only one import
name.boolean=Name boolean parameters
name.boolean.ignore.setters=Ignore Java-like setters
remove.apply.implicit.parameter=It is not allowed to remove ''apply'' because method ''{0}'' has implicit parameter
remove.apply.constructor.implicit.parameter=It is not allowed to remove ''apply'' because constructor of ''{0}'' has implicit parameter
remove.apply.overloaded=It is not allowed to remove ''apply'' because method ''{0}'' is overloaded
introduce.implicit.incorrect.order=It is not allowed to introduce implicit parameters because of incorrect order of parameters
introduce.implicit.incorrect.count=It is not allowed to introduce implicit parameter because of incorrect usage count of parameter
introduce.implicit.not.allowed.here=It is not allowed to introduce implicit parameter in this expression
catch.all=Specify type of exception

operation.on.collection.id=OperationsOnCollection
operation.on.collection.name=Simplifiable operation on collection
operation.on.collection.like.option.input.message=Inspection would treat these classes like scala.Option
operation.on.collection.like.option.input.title=Add like-option classes
operation.on.collection.like.option.panel.title=Like-option classes
operation.on.collection.like.collection.input.message=Inspection would treat these classes like collections
operation.on.collection.like.collection.input.title=Add like-collection classes
operation.on.collection.like.collection.panel.title=Like-collection classes

map.getOrElse.false.hint=Replace map and getOrElse(false) with exists
find.isDefined.hint=Replace find and isDefined with exists
find.notEquals.none.hint=Replace find(...) != None with exists
filter.headOption.hint=Replace filter and headOption with find
fold.sum.hint=Replace fold with sum
fold.product.hint=Replace fold with product
fold.sum.short=fold to sum
fold.product.short=fold to product
reduce.sum.hint=Replace reduce with sum
reduce.product.hint=Replace reduce with product
reduce.min.hint=Replace reduce with min
reduce.max.hint=Replace reduce with max
reduce.sum.short=reduce to sum
reduce.product.short=reduce to product
reduce.min.short=reduce to min
reduce.max.short=reduce to max
fold.true.and.hint=Replace fold with forall
filter.size.hint=Replace filter and size with count
filter.size.check.hint=Replace filter and size check with exists
sort.filter.hint=Change order of sort and filter
map.getOrElse.hint=Replace map and getOrElse with fold
exists.equals.hint=Replace exists with contains
getOrElse.null.hint=Replace getOrElse(null) with orNull
not.isEmpty.hint=Replace !.isEmpty with .nonEmpty or .isDefined
drop.one.hint=Replace drop(1) with tail
get.getOrElse.hint=Replace with getOrElse(key, defaultValue)

convertible.to.method.value.name=Anonymous function convertible to a method value
convertible.to.method.value.anonymous.hint=Convert to a method value
convertible.to.method.value.eta.hint=Remove redundant placeholder

unit.method.like.procedure.name=Method with Unit result type defined like procedure
unit.method.like.procedure.id=ScalaUnitMethodDefinedAsProcedure
insert.return.type.and.equals=Insert return type and equals sign
add.unit.type.to.declaration=Add Unit type to declaration explicitly
declaration.has.no.explicit.type.name=Method declaration has no explicit return type
declaration.has.no.explicit.type.id=DeclarationHasNoExplicitType

ignore.clarifying.parentheses=Ignore clarifying parentheses

comparing.unrelated.types.name=Comparing unrelated types
