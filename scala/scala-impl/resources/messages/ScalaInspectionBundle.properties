### META-INF/scala-plugin-common.xml
fileName.does.not.match=Class doesn't correspond to file name
method.signature.accessor.empty.parenthesis=Accessor-like named method is empty-paren
method.signature.accessor.unit.return.type=Accessor-like named method has Unit result type
method.signature.unit.explicit.type=Redundant Unit result type annotation
method.signature.unit.functional.definition=Method with Unit result type has functional definition
method.signature.unit.parameterless=Method with Unit result type is parameterless
method.signature.unit.explicit.assignment=Redundant assignment
method.signature.procedure.declaration=Procedure syntax in method declaration
method.signature.procedure.definition=Procedure syntax in method definition
method.signature.result.type.refinement=Apparent result type refinement; is an assignment missing?
method.signature.parameterless.override.empty.paren=Empty-paren Scala method overridden as parameterless
method.signature.parameterless.override.java.mutator=Java mutator method overridden as parameterless
method.signature.parameterless.override.mutator.like=Mutator-like named method with is parameterless
method.signature.override.abstract.member=Mark methods overriding abstract members with override keyword
method.signature.empty.paren.override.java.accessor=Java accessor method overridden as empty-paren
method.signature.empty.paren.override.parameterless=Parameterless Scala member overridden as empty-paren
method.signature.parameterless.access.java.mutator=Java mutator method accessed as parameterless
method.signature.parameterless.access.empty.paren=Empty-paren method accessed as parameterless
method.signature.java.accessor.empty.paren=Java accessor method called as empty-paren
typed.parameter.without.parenthesis.in.function.literal=Typed parameter without parenthesis in functional literal
unused.expression.name=Unused expression
unreachable.code.name=Unreachable code
internal.getText.contains.shouldBe.textContains=.getText.contains should be .textContains
internal.getText.equals.shouldBe.textMatches=.getText.equals should be .textMatches
internal.api.status.of.symbols=Api status of symbols
internal.instanceOf.shouldBe.is=instanceOf should be is
displayname.scala=Scala
displayname.scala.compile.server=Scala Compile Server
displayname.scala.compiler=Scala Compiler
displayname.loop.variable.not.updated.inside.loop=Loop variable not updated inside loop
displayname.package.name.inspection=Wrong package statement
displayname.scala.deprecation=Scala deprecation
displayname.deprecated.identifier=Deprecated identifier
displayname.deprecated.kind.projector.syntax=Deprecated kind-projector syntax
displayname.case.class.parameter=Case class parameter
displayname.var.could.be.a.val='var' could be a 'val'
displayname.unused.symbol=Unused symbol
displayname.default.file.template.inspection=Default file template inspection
displayname.in.kind.projector.use.correct.lambda.keyword=Kind Projector: Use correct lambda keyword
displayname.in.kind.projector.simplify.type=Kind Projector: simplify type
displayname.use.of.postfix.method.call=Use of postfix method call
displayname.advanced.language.features=Advanced language features
displayname.reference.must.be.prefixed=Reference must be prefixed
displayname.floating.point.literal.ending.with.dot=Floating point literal ending with '.'
displayname.chained.package.clause.inspection=Base package declaration
displayname.relative.import=Relative import
displayname.suspicious.shadowing.by.a.variable.pattern=Suspicious shadowing by a Variable Pattern
displayname.suspicious.shadowing.by.a.type.parameter=Suspicious shadowing by a Type Parameter
displayname.abstract.value.in.trait=Abstract value in trait
displayname.unmatched.tag=Unmatched tag
displayname.unnecessary.braces.in.import.inspection=Unnecessary braces in import inspection
displayname.name.boolean.parameters=Name boolean parameters
displayname.redundant.cast.inspection=Redundant cast inspection
displayname.redundant.conversion.inspection=Redundant conversion inspection
displayname.missing.type.annotation=Missing type annotation
displayname.malformed.format.string=Malformed format string
displayname.legacy.string.formatting=Legacy string formatting
displayname.not.implemented.code=Not implemented code
displayname.redundant.block=Redundant block
displayname.suspicious.forward.reference=Suspicious forward reference
displayname.type.annotation.required=Type annotation required
displayname.double.negation=Double negation
displayname.simplify.boolean.expression=Simplify boolean expression
displayname.trivial.match.can.be.simplified=Trivial match can be simplified
displayname.unnecessary.parentheses=Unnecessary parentheses
displayname.type.check.can.be.pattern.matching=Type check can be pattern matching
displayname.comparing.unrelated.types=Comparing unrelated types
displayname.pattern.may.never.match=Pattern may never match
displayname.match.statement.convertible.to.pattern.matching.anonymous.function=Match statement convertible to pattern matching anonymous function
displayname.view.bounds.are.deprecated=View bounds are deprecated
displayname.convert.expression.to.single.abstract.method=Convert expression to Single Abstract Method (SAM)
displayname.nested.stateful.monads=Nested stateful monads
displayname.field.from.delayedinit=Field from DelayedInit
displayname.non.value.field.is.accessed.in.hashcode=Non-value field is accessed in 'hashCode()'
displayname.unnecessary.partial.function=Unnecessary partial function
displayname.annotator.based.error.inspection=Annotator based error inspection
displayname.wrong.platform.method.usage=Wrong platform method usage
displayname.syntactic.sugar=Syntactic sugar
displayname.scala.unnecessary.semicolon.inspection=Scala unnecessary semicolon inspection
displayname.redundant.return=Redundant return
displayname.postfix.unary.operation=Postfix unary operation
displayname.anonymous.function.convertible.to.a.method.value=Anonymous function convertible to a method value
displayname.applied.type.lambda.can.be.simplified=Applied Type Lambda can be simplified
displayname.redundant.new.on.case.class=Redundant new on case class
displayname.argument.duplicates.corresponding.parameter.default.value=Argument duplicates corresponding parameter default value
displayname.auto.tupling=Auto-tupling
displayname.concealed.quot.apply.quot.call=Concealed "apply" call
displayname.null.initializer.can.be.replaced.by.underscore=Null initializer can be replaced by _
displayname.scala.style.inspection=Scala style inspection
displayname.simplifiable.empty.check=Simplifiable empty check
displayname.size.to.length.on.arrays.and.strings=Size to length on arrays and strings
displayname.equals.on.arrays.and.iterators=Equals on arrays and iterators
displayname.sameelements.oncollections.of.a.same.kind=SameElements onCollections of a same kind
displayname.corresponds.sameelements.on.unsorted.collection=Corresponds/sameElements on unsorted collection
displayname.equals.oncollections.of.different.kinds=Equals onCollections of different kinds
displayname.comparing.length.to.lengthcompare=Comparing length to lengthCompare
displayname.manually.zipping.with.indices=Manually zipping with indices
displayname.access.to.first.element.by.index=Access to first element by index
displayname.access.to.last.element.by.index=Access to last element by index
displayname.constructing.range.for.seq.indices=Constructing range for seq indices
displayname.filter.and.headoption.to.find=Filter and headOption to find
displayname.find.and.emptiness.check.to.exists=Find and emptiness check to exists
displayname.filter.and.emptiness.check.to.exists.forall=Filter and emptiness check to exists/forall
displayname.filter.and.size.to.count=Filter and size to count
displayname.find.and.map.to.get=Find and map to get
displayname.exists.simplifiable.to.contains=Exists simplifiable to contains
displayname.map.and.contains.true.false.to.exists.or.forall=Map and contains(true/false) to exists or !forall
displayname.filter.and.contains.to.intersect.or.diff=Filter and contains to intersect or diff
displayname.redundant.contains.in.filter=Redundant contains in filter
displayname.double.negation.in.forall.and.exists=Double negation in forall and exists
displayname.simplifiable.fold.or.reduce.method=Simplifiable fold or reduce method
displayname.fold.simplifiable.to.forall=Fold simplifiable to forall
displayname.reverse.and.map.to.reversemap=Reverse and map to reverseMap
displayname.reverse.and.iterator.to.reverseiterator=Reverse and iterator to reverseIterator
displayname.conversion.to.set.and.back.to.distinct=Conversion to Set and back to distinct
displayname.drop.and.take.to.slice=Drop and take to slice
displayname.reverse.take.and.reverse.to.takeright=Reverse, take and reverse to takeRight
displayname.map.and.flatten.to.flatmap=Map and flatten to flatMap
displayname.emulated.headoption.or.lastoption=Emulated headOption or lastOption
displayname.replace.to.with.until=Replace to with until
displayname.replace.with.flatten=Replace with flatten
displayname.sorted.and.head.last.to.max.min=Sorted and head/last to max/min
displayname.collect.and.headoption.to.collectfirst=Collect and headOption to collectFirst
displayname.index.bounds.check=Index bounds check
displayname.make.array.to.string=Make Array to String
displayname.get.and.getorelse.to.getorelse=Get and getOrElse to getOrElse
displayname.extracting.keys.manually=Extracting keys manually
displayname.extracting.values.manually=Extracting values manually
displayname.redundant.get.when.getting.a.value.from.map=Redundant get when getting a value from Map
displayname.lift.to.get=Lift to Get
displayname.emptiness.check.on.get.to.contains=Emptiness check on Get to Contains
displayname.redundant.headoption.or.lastoption=Redundant headOption or lastOption
displayname.equals.some.x.to.contains.x=Equals Some(x) to contains(x)
displayname.map.and.getorelse.to.fold=Map and getOrElse to fold
displayname.map.and.getorelse.false.to.exists=Map and getOrElse(false) to exists
displayname.getorelse.null.to.ornull=GetOrElse(null) to orNull
displayname.emulated.option.x=Emulated Option(x)
displayname.change.to.filter=Change to filter
displayname.some.to.option=Some to Option
displayname.filter.after.sort=Filter after sort
displayname.redundant.collection.conversion=Redundant collection conversion
displayname.side.effects.in.a.monadic.transformation=Side effects in a monadic transformation
displayname.unit.return.type.in.the.argument.of.map=Unit return type in the argument of map
displayname.multiple.arg.lists.in.annotation.constructor=Multiple arg lists in annotation constructor
displayname.unzip.for.extracting.a.single.element=Unzip for extracting a single element
displayname.tag.unclosed=Tag unclosed
displayname.inlined.tag=Inlined tag
displayname.header.tags.unbalanced=Header tags unbalanced
displayname.unknown.tag=Unknown tag
displayname.unknown.parameter=Unknown parameter
displayname.missing.tag.parameter.description=Missing tag parameter description
displayname.wrong.scaladoc.element=Wrong scaladoc element
displayname.specs2.matchers=Specs2 matchers
final.modifier.is.redundant.for.toplevel.objects='final' modifier is redundant for toplevel objects
mark.inner.case.objects.as.final=Mark inner case objects as final to make compiled class final too
group.general=General
group.internal=Internal
group.syntactic.simplification=Syntactic simplification
group.syntactic.clarification=Syntactic clarification
group.method.signature=Method signature
group.code.style=Code style
group.size=Size
group.comparing=Comparing
group.indices=Indices
group.simplifications.filter.and.exists=Simplifications: filter and exists
group.simplifications.find.and.map.to.apply=Simplifications: find and map to apply
group.simplifications.forall.and.exists=Simplifications: forall and exists
group.simplifications.other=Simplifications: other
group.maps=Maps
group.options=Options
group.other=Other
group.collections=Collections
group.scaladoc=Scaladoc
group.resource.leaks=Resource leaks
group.specs2=Specs2
displayname.deprecated.package.object=Deprecated package object

### org/jetbrains/plugins/scala/codeInsight/intention/expression/ConvertParameterToUnderscoreIntention.scala
introduce.implicit.incorrect.order=It is not allowed to introduce implicit parameters because of incorrect order of parameters
introduce.implicit.incorrect.count=It is not allowed to introduce implicit parameter because of incorrect usage count of parameter
introduce.implicit.not.allowed.here=It is not allowed to introduce implicit parameter in this expression

### org/jetbrains/plugins/scala/codeInsight/intention/expression/OptionWithLiteralToSomeIntention.scala
replace.with.some=Replace with Some
replace.option.with.some=Replace Option with Some

### org/jetbrains/plugins/scala/codeInsight/intention/expression/RemoveApplyIntention.scala
remove.apply.implicit.parameter=It is not allowed to remove ''apply'' because method ''{0}'' has implicit parameter
remove.apply.constructor.implicit.parameter=It is not allowed to remove ''apply'' because constructor of ''{0}'' has implicit parameter
remove.apply.overloaded=It is not allowed to remove ''apply'' because method ''{0}'' is overloaded

### org/jetbrains/plugins/scala/codeInspection/SAM/ConvertExpressionToSAMInspection.scala
convert.expression.to.sam=Convert expression to Single Abstract Method

### org/jetbrains/plugins/scala/codeInspection/ScalaFileNameInspection.scala
fileName.rename.text={0} {1} to {2}
fileName.rename.class=Rename Type Definition
fileName.rename.file=Rename File

### org/jetbrains/plugins/scala/codeInspection/annotations/MultipleArgLists.scala
implementation.limitation.multiple.argument.lists=Implementation limitation: multiple argument lists on annotations are currently not supported

### org/jetbrains/plugins/scala/codeInspection/booleans/DoubleNegationInspection.scala
display.name.double.negation=Double negation
remove.double.negation=Remove double negation

### org/jetbrains/plugins/scala/codeInspection/booleans/SimplifyBooleanInspection.scala
simplify.boolean.expression=Simplify boolean expression
simplify.with.text=Simplify {0}

### org/jetbrains/plugins/scala/codeInspection/booleans/SimplifyBooleanMatchInspection.scala
display.name.trivial.match.can.be.simplified=Trivial match can be simplified
simplify.match.to.if.statement=Simplify match to if statement

### org/jetbrains/plugins/scala/codeInspection/caseClassParamInspection/CaseClassParamInspection.scala
display.name.case.class.parameter=Case Class Parameter

### org/jetbrains/plugins/scala/codeInspection/caseClassParamInspection/RemoveValQuickFix.scala
remove.unnecessary.val=Remove unnecessary 'val'
remove.val.from.definition=Remove 'val' from definition

### org/jetbrains/plugins/scala/codeInspection/cast/ScalaRedundantCastInspection.scala
display.name.redundant.cast=Redundant cast
remove.redundant.cast=Remove Redundant Cast
casting.left.to.right.is.redundant=Casting ''{0}'' to ''{1}'' is redundant

### org/jetbrains/plugins/scala/codeInspection/cast/ScalaRedundantConversionInspection.scala
display.name.redundant.conversion=Redundant conversion
remove.redundant.conversion=Remove Redundant Conversion
casting.a.to.b.is.redundant=Casting ''{0}'' to ''{1}'' is redundant

### org/jetbrains/plugins/scala/codeInspection/catchAll/DangerousCatchAllInspection.scala
catch.all=Specify type of exception

### org/jetbrains/plugins/scala/codeInspection/collections/CollectHeadOptionInspection.scala
replace.collect.headOption.with.collectFirst=Replace .collect and .headOption with .collectFirst

### org/jetbrains/plugins/scala/codeInspection/collections/ComparingDiffCollectionKindsInspection.scala
hint.comparing.different.collection.kinds=Comparing different collection kinds
hint.convert.left.hand.side.to.collection=Convert left-hand side to {0}
hint.convert.right.hand.side.to.collection=Convert right-hand side to {0}

### org/jetbrains/plugins/scala/codeInspection/collections/ComparingLengthInspection.scala
replace.with.lengthCompare=Replace with .lengthCompare
replace.with.sizeIs=Replace with .sizeIs

### org/jetbrains/plugins/scala/codeInspection/collections/CorrespondsUnsortedInspection.scala
sameElements.unsorted=`sameElements` on (or with) unsorted collection, result is unpredictable
corresponds.unsorted=`corresponds` with unsorted collection, result is unpredictable

### org/jetbrains/plugins/scala/codeInspection/collections/DropTakeToSliceInspection.scala
replace.drop.take.with.slice=Replace .drop and .take with .slice
replace.take.drop.with.slice=Replace .take and .drop with .slice

### org/jetbrains/plugins/scala/codeInspection/collections/EmptyCheckInspection.scala
replace.with.isEmpty=Replace with .isEmpty
replace.with.isDefined=Replace with .isDefined
replace.with.nonEmpty=Replace with .nonEmpty

### org/jetbrains/plugins/scala/codeInspection/collections/EmulateFlattenInspection.scala
replace.with.flatten=Replace with .flatten

### org/jetbrains/plugins/scala/codeInspection/collections/EqualityToSameElementsInspection.scala
replace.equals.with.sameElements=Replace equals with sameElements
config.description.for.arrays=For arrays
config.description.for.iterators=For iterators

### org/jetbrains/plugins/scala/codeInspection/collections/ExistsEqualsInspection.scala
exists.equals.hint=Replace exists with contains
forall.notEquals.hint=Replace forall with not contains

### org/jetbrains/plugins/scala/codeInspection/collections/ExistsForallReplaceInspection.scala
replace.with.forall=Replace with .forall
replace.with.exists=Replace with .exists

### org/jetbrains/plugins/scala/codeInspection/collections/FilterEmptyCheckInspection.scala
filter.nonempty.check.hint=Replace filter and non-emptiness check with exists
filter.empty.check.hint=Replace filter and emptiness check with !(...).exists
filterNot.empty.check.hint=Replace filterNot and emptiness check with forall
filterNot.nonempty.check.hint=Replace filterNot and non-emptiness check with !(...).forall

### org/jetbrains/plugins/scala/codeInspection/collections/FilterHeadOptionInspection.scala
filter.headOption.hint=Replace filter and headOption with find

### org/jetbrains/plugins/scala/codeInspection/collections/FilterOtherContainsInspection.scala
replace.filter.with.intersect=Replace filter and contains with intersect
replace.filter.with.diff=Replace filter and not contains with diff

### org/jetbrains/plugins/scala/codeInspection/collections/FilterSetContainsInspection.scala
remove.redundant.contains=Remove redundant .contains

### org/jetbrains/plugins/scala/codeInspection/collections/FilterSizeInspection.scala
filter.size.hint=Replace filter and size with count

### org/jetbrains/plugins/scala/codeInspection/collections/FindAndMapToGetInspection.scala
replace.find.and.map.with.apply=Replace find and map with apply

### org/jetbrains/plugins/scala/codeInspection/collections/FindEmptyCheckInspection.scala
find.isDefined.hint=Replace find and non-emptiness check with exists
find.isEmpty.hint=Replace find and emptiness check with !(...).exists

### org/jetbrains/plugins/scala/codeInspection/collections/FoldTrueAndInspection.scala
fold.true.and.hint=Replace fold with forall

### org/jetbrains/plugins/scala/codeInspection/collections/GetGetOrElseInspection.scala
get.getOrElse.hint=Replace with getOrElse(key, defaultValue)

### org/jetbrains/plugins/scala/codeInspection/collections/GetOrElseNullInspection.scala
getOrElse.null.hint=Replace getOrElse(null) with orNull

### org/jetbrains/plugins/scala/codeInspection/collections/HeadOrLastOptionInspection.scala
replace.with.headOption=Replace with .headOption
replace.with.lastOption=Replace with .lastOption
ifstmt.to.headOption=If-else to headOption
ifstmt.to.lastOption=If-else to lastOption
lift.to.headOption=.lift to headOption
lift.to.lastOption=.lift to lastOption

### org/jetbrains/plugins/scala/codeInspection/collections/IfElseToFilteredOptionInspection.scala
ifstmt.to.filteredOption=Replace if with filtered option

### org/jetbrains/plugins/scala/codeInspection/collections/IfElseToOptionInspection.scala
hint.replace.with.option.expr=Replace with Option(x)
hint.replace.with.option.expr.with.preview=Replace with Option({0})

### org/jetbrains/plugins/scala/codeInspection/collections/IndexBoundsCheckInspection.scala
ifstmt.to.lift=If-else to lift

### org/jetbrains/plugins/scala/codeInspection/collections/LastIndexToLastInspection.scala
replace.with.last=Replace with .last

### org/jetbrains/plugins/scala/codeInspection/collections/MakeArrayToStringInspection.scala
format.with.mkstring=Format with .mkString("Array(", ", ", ")")

### org/jetbrains/plugins/scala/codeInspection/collections/MapFlattenInspection.scala
replace.map.flatten.with.flatMap=Replace .map and .flatten with .flatMap

### org/jetbrains/plugins/scala/codeInspection/collections/MapGetEmptinessCheckInspection.scala
replace.get.nonEmpty.with.contains=Replace with .contains(key)
replace.get.isEmpty.with.not.contains=Replace with !.contains(key)

### org/jetbrains/plugins/scala/codeInspection/collections/MapGetGetInspection.scala
get.get.hint=Replace with .(key)

### org/jetbrains/plugins/scala/codeInspection/collections/MapGetOrElseBooleanInspection.scala
map.getOrElse.false.hint=Replace map and getOrElse(false) with exists
map.getOrElse.true.hint=Replace map and getOrElse(true) with forall

### org/jetbrains/plugins/scala/codeInspection/collections/MapGetOrElseInspection.scala
map.getOrElse.hint=Replace map and getOrElse with fold

### org/jetbrains/plugins/scala/codeInspection/collections/MapKeysInspection.scala
replace.with.keys=Replace with .keys
replace.with.keySet=Replace with .keySet
replace.with.keysIterator=Replace with .keysIterator

### org/jetbrains/plugins/scala/codeInspection/collections/MapLiftInspection.scala
replace.with.get=Replace with .get

### org/jetbrains/plugins/scala/codeInspection/collections/MapToBooleanContainsInspection.scala
replace.map.contains.true.with.exists=Replace .map(...).contains(true) with .exists(...)
replace.map.contains.false.with.not.forall=Replace .map(...).contains(false) with ! .forall(...)

### org/jetbrains/plugins/scala/codeInspection/collections/MapValuesInspection.scala
replace.with.values=Replace with .values
replace.with.valuesIterator=Replace with .valuesIterator

### org/jetbrains/plugins/scala/codeInspection/collections/OperationOnCollectionInspectionBase.scala
operation.on.collection.id=OperationsOnCollection
operation.on.collection.name=Simplifiable operation on collection
operation.on.collection.like.option.input.message=Inspection would treat these classes like scala.Option
operation.on.collection.like.option.input.title=Add like-option classes
operation.on.collection.like.option.panel.title=Like-option classes
operation.on.collection.like.collection.input.message=Inspection would treat these classes like collections
operation.on.collection.like.collection.input.title=Add like-collection classes
operation.on.collection.like.collection.panel.title=Like-collection classes

### org/jetbrains/plugins/scala/codeInspection/collections/OptionEqualsSomeToContainsInspection.scala
replace.with.contains=Replace with .contains
replace.with.not.contains=Replace with !.contains

### org/jetbrains/plugins/scala/codeInspection/collections/RangeToIndicesInspection.scala
hint.replace.with.indices=Replace with .indices
hint.replace.with.indices.with.preview=Replace with {0}.indices

### org/jetbrains/plugins/scala/codeInspection/collections/RedundantCollectionConversionInspection.scala
redundant.collection.conversion=Remove redundant collection conversion

### org/jetbrains/plugins/scala/codeInspection/collections/RedundantHeadOrLastOptionInspection.scala
remove.redundant.headOption=Remove redundant .headOption
remove.redundant.lastOption=Remove redundant .lastOption

### org/jetbrains/plugins/scala/codeInspection/collections/ReplaceToWithUntilInspection.scala
replace.to.with.until=replace `to` with `until`

### org/jetbrains/plugins/scala/codeInspection/collections/ReverseIteratorInspection.scala
replace.reverse.iterator=Replace .reverse.iterator with .reverseIterator

### org/jetbrains/plugins/scala/codeInspection/collections/ReverseMapInspection.scala
replace.reverse.map=Replace .reverse.map with .reverseMap

### org/jetbrains/plugins/scala/codeInspection/collections/ReverseTakeReverseInspection.scala
replace.reverse.take.reverse.with.takeRight=Replace .reverse.take(...).reverse with .takeRight(...)

### org/jetbrains/plugins/scala/codeInspection/collections/SameElementsToEqualsInspection.scala
replace.sameElements.with.equals=Replace sameElements with equals
replace.corresponds.with.equals=Replace corresponds with equals

### org/jetbrains/plugins/scala/codeInspection/collections/SideEffectsInMonadicTransformationInspection.scala
side.effects.in.monadic=Side effects in a monadic transformation

### org/jetbrains/plugins/scala/codeInspection/collections/SimplifiableFoldOrReduceInspection.scala
fold.sum.hint=Replace fold with sum
fold.product.hint=Replace fold with product
fold.sum.short=fold to sum
fold.product.short=fold to product
reduce.sum.hint=Replace reduce with sum
reduce.product.hint=Replace reduce with product
reduce.min.hint=Replace reduce with min
reduce.max.hint=Replace reduce with max
reduce.sum.short=reduce to sum
reduce.product.short=reduce to product
reduce.min.short=reduce to min
reduce.max.short=reduce to max

### org/jetbrains/plugins/scala/codeInspection/collections/SizeToLengthInspection.scala
size.to.length=Replace .size with .length on arrays and strings

### org/jetbrains/plugins/scala/codeInspection/collections/SomeToOptionInspection.scala
replace.with.option=Replace with Option

### org/jetbrains/plugins/scala/codeInspection/collections/SortFilterInspection.scala
sort.filter.hint=Change order of sort and filter

### org/jetbrains/plugins/scala/codeInspection/collections/SortedMaxMinInspection.scala
replace.sorted.head.with.min=Replace with .min
replace.sorted.last.with.max=Replace with .max
replace.sortBy.head.with.minBy=Replace with .minBy
replace.sortBy.last.with.maxBy=Replace with .maxBy

### org/jetbrains/plugins/scala/codeInspection/collections/ToSetAndBackInspection.scala
replace.toSet.and.back.with.distinct=Replace conversion to Set and back with .distinct

### org/jetbrains/plugins/scala/codeInspection/collections/UnitInMapInspection.scala
expression.unit.return.in.map=Expression with unit return type in the argument of map
use.foreach.instead.of.map=Use foreach instead of map

### org/jetbrains/plugins/scala/codeInspection/collections/UnzipSingleElementInspection.scala
replace.with.map=Replace with .map

### org/jetbrains/plugins/scala/codeInspection/collections/ZeroIndexToHeadInspection.scala
replace.with.head=Replace with .head

### org/jetbrains/plugins/scala/codeInspection/collections/ZipWithIndex.scala
replace.with.zipWithIndex=Replace with zipWithIndex

### org/jetbrains/plugins/scala/codeInspection/controlFlow/ScalaUnreachableCodeInspection.scala
remove.unreachable.code=Remove unreachable code
unwrap.do.statement=Unwrap do-statement

### org/jetbrains/plugins/scala/codeInspection/controlFlow/ScalaUnusedExpressionInspection.scala
unused.expression.throws=Unused expression, the only possible side effect is an exception
unused.expression.no.side.effects=Unused expression without side effects
add.return.keyword=Add return keyword
remove.expression=Remove expression

### org/jetbrains/plugins/scala/codeInspection/delayedInit/FieldFromDelayedInitInspection.scala
display.name.field.from.delayedinit=Field from DelayedInit
field.defined.in.delayedinit.is.likely.to.be.null=Field defined in DelayedInit is likely to be null

### org/jetbrains/plugins/scala/codeInspection/deprecation/Scala3DeprecatedPackageObjectInspection.scala
package.objects.are.deprecated=Package objects are deprecated in Scala 3, consider using top level definitons instead
unwrap.package.object.fix=Move members to top level

### org/jetbrains/plugins/scala/codeInspection/deprecation/ScalaDeprecatedIdentifierInspection.scala
usage.of.deprecatedname.as.identifier.is.deprecated=Usage of {0} as identifier is deprecated. It may be used as a keyword in future versions of scala.

### org/jetbrains/plugins/scala/codeInspection/deprecation/ScalaDeprecationInspection.scala
parameter.name.is.deprecated=Parameter name: {0} is deprecated.
symbol.name.is.deprecated.with.message=Symbol {0} is deprecated. {1}
super.method.name.is.deprecated.with.message=Super method {0} is deprecated. {1}
overriding.is.deprecated=Overriding {0} is deprecated. {1}
inheriting.form.name.is.deprecated.message=Inheriting form {0} is deprecated. {1}

### org/jetbrains/plugins/scala/codeInspection/feature/LanguageFeatureInspection.scala
advanced.language.feature=Advanced language feature: {0}
display.name.advanced.language.features=Advanced language features
import.feature.flag.for.language.feature=Import feature flag for %ss
enable.language.feature.plural=Enable {0}s
language.feature.postfix.operator.notation=postfix operator notation
language.feature.reflective.call=reflective call
language.feature.dynamic.member.selection=dynamic member selection
language.feature.implicit.conversion=implicit conversion
language.feature.higher.kinded.type=higher-kinded type
language.feature.existential.type=existential type
language.feature.macro.definition=macro definition

### org/jetbrains/plugins/scala/codeInspection/format/LegacyStringFormattingInspection.scala
legacy.string.formatting.use.interpolated.string=Legacy string formatting, an interpolated string can be used instead
convert.to.interpolated.string=Convert to interpolated string

### org/jetbrains/plugins/scala/codeInspection/format/ScalaMalformedFormatStringInspection.scala
format.specifier.cannot.be.used.for.an.argument=Format specifier {0} cannot be used for an argument {1} ({2})
argument.cannot.be.used.for.a.format.specifier=Argument {0} ({1}) cannot be used for a format specifier {2}
malformed.format.specifier=Malformed format specifier
no.argument.for.a.format.specifier=No argument for a format specifier {0}
no.argument.at.position=No argument at position {0}
no.format.specifer.for.an.argument=No format specifier for an argument {0}

### org/jetbrains/plugins/scala/codeInspection/functionExpressions/MatchToPartialFunctionInspection.scala
convert.match.statement.to.pattern.matching.function=Convert match statement to pattern matching anonymous function

### org/jetbrains/plugins/scala/codeInspection/functionExpressions/UnnecessaryPartialFunctionInspection.scala
unnecessary.partial.function=Unnecessary partial function

### org/jetbrains/plugins/scala/codeInspection/functionExpressions/UnnecessaryPartialFunctionQuickFix.scala
convert.to.anonymous.function=Convert to anonymous function

### org/jetbrains/plugins/scala/codeInspection/hashCodeUsesVar/HashCodeUsesVarInspection.scala
non.value.field.is.accessed.in.hashcode=Non-value field is accessed in 'hashCode()'

### org/jetbrains/plugins/scala/codeInspection/implicits/DeprecatedViewBoundInspection.scala
view.bounds.are.deprecated=View bounds are deprecated
replace.with.implicit.parameters=Replace with implicit parameters

### org/jetbrains/plugins/scala/codeInspection/imports/SingleImportInspection.scala
single.import=Remove braces from import statement containing only one import

### org/jetbrains/plugins/scala/codeInspection/infiniteCycle/LoopVariableNotUpdatedInspection.scala
display.name.loop.variable.not.updated.inside.loop=Loop variable not updated inside loop

### org/jetbrains/plugins/scala/codeInspection/internal/AnnotatorBasedErrorInspection.scala
warning.with.message=Warning: {0}
error.detected=Error detected
error.detected.with.message=Error detected: {0}

### org/jetbrains/plugins/scala/codeInspection/internal/ApiStatusInspection.scala
super.method.name.is.marked.as.status=Super method {0} is marked as {1}
symbol.name.is.marked.as.status=Symbol {0} is marked as {1}

### org/jetbrains/plugins/scala/codeInspection/internal/InstanceOfInspection.scala
replace.with.is=Replace with .is

### org/jetbrains/plugins/scala/codeInspection/internal/ScalaShouldBeTextContainsInspection.scala
internal.replace.with.textContains=Replace with .textContains

### org/jetbrains/plugins/scala/codeInspection/internal/ScalaShouldBeTextMatchesInspection.scala
internal.replace.with.textMatches=Replace with .textMatches

### org/jetbrains/plugins/scala/codeInspection/literal/FloatLiteralEndingWithDecimalPointInspection.scala
display.name.floating.point.literal.ending.with.dot=Floating point literal ending with '.'
convert.to.floating.point=Convert to {0}

### org/jetbrains/plugins/scala/codeInspection/methodSignature/ApparentResultTypeRefinementInspection.scala
insert.missing.assignment=Insert missing assignment

### org/jetbrains/plugins/scala/codeInspection/methodSignature/JavaAccessorEmptyParenCallInspection.scala
remove.call.parentheses=Remove call parentheses

### org/jetbrains/plugins/scala/codeInspection/methodSignature/OverrideAbstractMemberInspection.scala
add.override.modifier.quickfix=Add override modifier

### org/jetbrains/plugins/scala/codeInspection/methodSignature/ParameterlessAccessInspection.scala
add.call.parentheses=Add call parentheses

### org/jetbrains/plugins/scala/codeInspection/methodSignature/UnitMethodInspection.scala
convert.to.function.syntax=Convert to function syntax
remove.redundant.type.annotation=Remove redundant type annotation
remove.redundant.type.annotation.and.equals.sign=Remove redundant type annotation and equals sign
remove.redundant.equals.sign=Remove redundant equals sign

### org/jetbrains/plugins/scala/codeInspection/methodSignature/quickfix/AddEmptyParentheses.scala
empty.parentheses=Add empty parentheses

### org/jetbrains/plugins/scala/codeInspection/methodSignature/quickfix/RemoveParentheses.scala
redundant.parentheses=Remove redundant parentheses

### org/jetbrains/plugins/scala/codeInspection/modifiers/SetModifierQuickfix.scala
add.modifier=Add ''{0}'' modifier
remove.modifier=Remove ''{0}'' modifier

### org/jetbrains/plugins/scala/codeInspection/monads/NestedStatefulMonadsInspection.scala
nested.stateful.monads=Nested stateful monads

### org/jetbrains/plugins/scala/codeInspection/notImplementedCode/NotImplementedCodeInspection.scala
not.implemented=Not implemented
implement.quickfix.name=Implement

### org/jetbrains/plugins/scala/codeInspection/packageNameInspection/ChainedPackageInspection.scala
package.declaration.could.use.chained.package.clauses=Base package ''{0}'' must be a separate package clause
use.chained.package.clauses.like=Extract package clause
use.chained.package.clauses=Use separate base package clause

### org/jetbrains/plugins/scala/codeInspection/packageNameInspection/ScalaMoveToPackageQuickFix.scala
fimaly.name.move.file.to.package=Move to package
move.file.to.default.package=Move to default package
move.file.to.package.with.packagename=Move to package {0}
move.file.to.package.package.prefix.error=Cannot create package ''{0}'' in source folder ''{1}'' with package prefix ''{2}''

### org/jetbrains/plugins/scala/codeInspection/packageNameInspection/ScalaPackageNameInspection.scala
package.names.does.not.correspond.to.directory.structure=Package name ''{0}'' does not correspond to the file path ''{1}''
package.names.does.not.correspond.to.directory.structure.package.prefix=Note that source folder ''{0}'' has package prefix ''{1}''

### org/jetbrains/plugins/scala/codeInspection/packageNameInspection/ScalaRenamePackageQuickFix.scala
rename.package.quickfix.command.name=Rename package
family.name.rename.package=Rename package
remove.package.statement=Remove package statement
rename.package.to=Set package name to ''{0}''

### org/jetbrains/plugins/scala/codeInspection/parameters/NameBooleanParametersInspection.java
name.boolean.ignore.single.parameter.methods=Ignore methods with a single parameter

### org/jetbrains/plugins/scala/codeInspection/parameters/NameBooleanParametersInspectionBase.scala
name.boolean.params=Name boolean parameters

### org/jetbrains/plugins/scala/codeInspection/parameters/RedundantDefaultArgumentInspection.scala
argument.duplicates.corresponding.parameter.default.value=Argument duplicates corresponding parameter default value
delete.redundant.default.argument=Delete redundant default argument

### org/jetbrains/plugins/scala/codeInspection/parameters/TypedParameterWithoutParenthesisInspection.scala
surround.with.parenthesis=Surround with parenthesis

### org/jetbrains/plugins/scala/codeInspection/parentheses/ScalaUnnecessaryParenthesesInspection.java
clarifying.parentheses=Clarifying parentheses
around.function.type=Around function type
around.function.type.parameter=Around parameter of a function type
around.function.expr.parameter=Around parameter of a function expression
unnecessary.parentheses.ignore=Ignore

### org/jetbrains/plugins/scala/codeInspection/parentheses/ScalaUnnecessaryParenthesesInspectionBase.scala
remove.unnecessary.parentheses.with.text=Remove unnecessary parentheses {0}
unnecessary.parentheses=Unnecessary parentheses
remove.unnecessary.parentheses=Remove unnecessary parentheses

### org/jetbrains/plugins/scala/codeInspection/postfix/PostfixMethodCallInspection.scala
use.of.postfix.method.call=Use of postfix method call
add.dot.to.method.call=Add dot to method call

### org/jetbrains/plugins/scala/codeInspection/prefixMutableCollections/ReferenceMustBePrefixedInspection.scala
reference.must.be.prefixed=Reference must be prefixed
add.prefix.to.reference=Add prefix to reference

### org/jetbrains/plugins/scala/codeInspection/redundantBlock/RedundantBlockInspection.scala
remove.redundant.braces=Remove redundant braces
unwrap.the.expression=Unwrap the expression
the.enclosing.block.is.redundant=The enclosing block is redundant
redundant.braces.in.case.clause=Redundant braces in case clause

### org/jetbrains/plugins/scala/codeInspection/relativeImports/AbsoluteImportInspection.scala
absolute.import.detected=Import can be relative to the base package
display.name.absolute.import=Absolute import

### org/jetbrains/plugins/scala/codeInspection/relativeImports/RelativeImportInspection.scala
relative.import.detected=Relative import detected
display.name.relative.import=Relative Import
family.name.enable.full.qualified.imports=Enable full qualified imports

### org/jetbrains/plugins/scala/codeInspection/resourceLeaks/SourceNotClosedInspection.scala
source.not.closed=Source is not closed

### org/jetbrains/plugins/scala/codeInspection/scaladoc/ScalaDocInlinedTagInspection.scala
display.name.inlined.tag=Inlined Tag

### org/jetbrains/plugins/scala/codeInspection/scaladoc/ScalaDocMissingParameterDescriptionInspection.scala
display.name.missing.parameter.description=Missing Parameter Description

### org/jetbrains/plugins/scala/codeInspection/scaladoc/ScalaDocUnbalancedHeaderInspection.scala
all.text.from.header.closing.tag.to.end.of.line.will.be.lost=All text from header closing tag to end of line will be lost

### org/jetbrains/plugins/scala/codeInspection/scaladoc/ScalaDocUnclosedTagWithoutParserInspection.scala
display.name.unclosed.tag=Unclosed Tag

### org/jetbrains/plugins/scala/codeInspection/scaladoc/ScalaDocUnknownParameterInspection.scala
unknown.tag.parameter=Unknown Tag Parameter
unknown.tag.type.parameter=Unknown Tag Type Parameter
one.param.or.tparam.tag.for.one.param.or.type.param.allowed=One param/tparam Tag for one param/type param allowed
scaladoc.cant.process.tparams.for.type.alias.now=Scaladoc can't process tparams for type alias now
param.and.tparams.tags.arnt.allowed.there=@param and @tparams tags aren't allowed there

### org/jetbrains/plugins/scala/codeInspection/scaladoc/ScalaDocUnknownTagInspection.scala
missing.tag.parameter=Missing Tag Parameter
unknown.scaladoc.tag=Unknown scaladoc tag

### org/jetbrains/plugins/scala/codeInspection/scaladoc/package.scala
family.name.scala.scaladoc=Scala: Scaladoc

### org/jetbrains/plugins/scala/codeInspection/shadow/TypeParameterShadowInspection.scala
display.name.suspicious.shadowing.by.a.type.parameter=Suspicious shadowing by a Type Parameter

### org/jetbrains/plugins/scala/codeInspection/shadow/VariablePatternShadowInspection.scala
suspicious.shadowing.by.a.variable.pattern=Suspicious shadowing by a Variable Pattern
rename.variable.pattern=Rename Variable Pattern
convert.to.stable.identifier.pattern=Convert to Stable Identifier Pattern `{0}`

### org/jetbrains/plugins/scala/codeInspection/specs2/BuiltinMatcherExistsInspection.scala
specs2.builtin.matcher.alternative.exists=Available matcher exists
specs2.use.builtin.matcher=Replace with builtin matcher

### org/jetbrains/plugins/scala/codeInspection/suppression/ScalaSuppressForStatementFix.scala
suppress.inspection.function=Suppress for function
suppress.inspection.typeAlias=Suppress for type alias
suppress.inspection.variable=Suppress for variable definiton

### org/jetbrains/plugins/scala/codeInspection/syntacticClarification/AutoTuplingInspection.scala
scala.compiler.will.replace.this.argument.list.with.tuple=Scala compiler will replace this argument list with tuple
display.name.auto.tupling=Auto-tupling
make.tuple.explicit=Make tuple explicit

### org/jetbrains/plugins/scala/codeInspection/syntacticClarification/ConcealedApplyCall.scala
concealed.apply.call=Concealed "apply" call
make.apply.call.explicit=Make "apply" call explicit

### org/jetbrains/plugins/scala/codeInspection/syntacticClarification/VariableNullInitializerInspection.scala
use.option.type=Use Option type
use.underscore.initializer=Use _ initializer
variable.with.null.initializer=Variable with null initializer

### org/jetbrains/plugins/scala/codeInspection/syntacticSimplification/ConvertibleToMethodValueInspection.scala
convertible.to.method.value.name=Anonymous function convertible to a method value
convertible.to.method.value.anonymous.hint=Convert to a method value
convertible.to.method.value.eta.hint=Remove redundant placeholder

### org/jetbrains/plugins/scala/codeInspection/syntacticSimplification/FunctionTupleSyntacticSugarInspection.scala
syntactic.sugar.could.be.used=syntactic sugar could be used

### org/jetbrains/plugins/scala/codeInspection/syntacticSimplification/PostfixUnaryOperationInspection.scala
unary.operation.can.use.prefix.notation=Use prefix notation for unary operators

### org/jetbrains/plugins/scala/codeInspection/syntacticSimplification/RedundantNewCaseClassInspection.scala
display.name.redundant.new.on.case.class=Redundant New on Case Class

### org/jetbrains/plugins/scala/codeInspection/syntacticSimplification/RemoveRedundantReturnInspection.scala
return.keyword.is.redundant=Return keyword is redundant
display.name.redundant.return=Redundant Return

### org/jetbrains/plugins/scala/codeInspection/syntacticSimplification/ScalaUnnecessarySemicolonInspection.scala
remove.unnecessary.semicolon=Remove unnecessary semicolon
unnecessary.semicolon=Unnecessary semicolon

### org/jetbrains/plugins/scala/codeInspection/typeAnnotation/AddTypeAnnotationQuickFix.scala
add.type.annotation=Add type annotation

### org/jetbrains/plugins/scala/codeInspection/typeAnnotation/TypeAnnotationInspection.scala
learn.why=Learn Why...
quickfix.modify.code.style=Modify Code Style...
quickfix.make.private=Make private
type.annotation.required.for=Type annotation required for {0}

### org/jetbrains/plugins/scala/codeInspection/typeChecking/ComparingUnrelatedTypesInspection.scala
comparing.unrelated.types.name=Comparing unrelated types
comparing.unrelated.types.hint=Comparing unrelated types: {0} and {1}

### org/jetbrains/plugins/scala/codeInspection/typeChecking/PatternMayNeverMatchInspection.scala
pattern.may.never.match=Pattern may never match

### org/jetbrains/plugins/scala/codeInspection/typeChecking/TypeCheckCanBeMatchInspection.scala
type.check.can.be.replaced.by.pattern.matching=Type check can be replaced by pattern matching

### org/jetbrains/plugins/scala/codeInspection/unusedInspections/DeleteUnusedElementFix.scala
remove.unused.element=Remove unused element
remove.whole.definition=Remove whole definition
remove.only.name.binding=Remove only {0} binding

### org/jetbrains/plugins/scala/codeInspection/unusedInspections/ScalaOptimizeImportsFix.scala
mark.import.as.always.used.in.this.project=Mark import as always used in this project

### org/jetbrains/plugins/scala/codeInspection/unusedInspections/ScalaUnusedImportPassBase.scala
unused.import.statement=Unused import statement

### org/jetbrains/plugins/scala/codeInspection/unusedInspections/ScalaUnusedSymbolInspection.scala
display.name.unused.symbol=Unused Symbol
declaration.is.never.used=Declaration is never used

### org/jetbrains/plugins/scala/codeInspection/valInTraitInspection/AbstractValueInTraitInspection.scala
display.name.abstract.value.in.trait=Abstract Value in Trait
abstract.value.used.in.trait=Abstract value used in trait
abstract.variable.used.in.trait=Abstract variable used in trait

### org/jetbrains/plugins/scala/codeInspection/varCouldBeValInspection/ValToVarQuickFix.scala
convert.val.to.var=Convert 'val' to 'var'

### org/jetbrains/plugins/scala/codeInspection/varCouldBeValInspection/VarCouldBeValInspection.scala
var.could.be.a.val=var could be a val
convert.var.to.val=Convert 'var' to 'val'

### org/jetbrains/plugins/scala/codeInspection/xml/package.scala
family.name.scala.general=Scala: General

### org/jetbrains/plugins/scala/externalLibraries/kindProjector/inspections/AppliedTypeLambdaCanBeSimplifiedInspection.scala
applied.type.lambda.can.be.simplified=Applied type lambda can be simplified
simplify.type=Simplify type

### org/jetbrains/plugins/scala/externalLibraries/kindProjector/inspections/DeprecatedKindProjectorSyntaxInspection.scala
replace.with.star.syntax=Replace with `*`-syntax
kind.projector.deprecated.tip=Usage of `?` placeholder is going to be deprecated. Consider using `*` instead.
kind.projector.deprecated.tip.with.update=Usage of `?` placeholder is going to be deprecated. Consider updating kind-projector plugin and using `*` instead.

### org/jetbrains/plugins/scala/externalLibraries/kindProjector/inspections/KindProjectorSimplifyTypeProjectionInspection.scala
kind.projector.simplify.type=Kind Projector: Simplify type

### org/jetbrains/plugins/scala/externalLibraries/kindProjector/inspections/KindProjectorUseCorrectLambdaKeywordInspection.scala
kind.projector.replace.lambda.with.lamda.char=Kind Projector: Replace Lambda with λ
kind.projector.replace.lambda.char.with.lambda=Kind Projector: Replace λ with Lambda
kind.projector.use.correct.lambda.keyword=Kind Projector: Use correct lambda keyword
kind.projector.code.style.setting.use.lamda.char=Kind Projector: Change code style setting: use λ instead of Lambda
kind.projector.code.style.setting.use.lamda.word=Kind Projector: Change code style setting: use Lambda instead of λ

### <unused>
drop.one.hint=Replace drop(1) with tail
replace.equals.with.arrays.equals=Use java.util.Arrays.equals instead of array equality
suppress.inspection.argument=Suppress for argument
internal.string.should.be.in.bundle=String should be extracted to bundle
internal.only.pass.hardcoded.strings.as.property.keys=Only pass hardcoded strings as property keys
internal.expression.without.nls.passed.to.nls=Expression without @Nls passed to @Nls
