trait MathSig {
  def sqrt(x: Double): Double
}

trait MathSpec extends MathSig {
  val epsilon = 0.00001
  abstract override def sqrt(x: Double) = {
    require(x >= 0)
    super.sqrt(x)
  } ensuring { result =>
    (x * x - result).abs < epsilon
  }
}

trait MathImpl extends MathSig {
  def sqrt(x: Double): Double =
    ???
}

object Math extends MathImpl
               with MathSpec
-----
ScalaFile
  ScTrait: MathSig
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('MathSig')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDeclaration: sqrt
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('sqrt')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: x
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Double
                    CodeReferenceElement: Double
                      PsiElement(identifier)('Double')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Double
            CodeReferenceElement: Double
              PsiElement(identifier)('Double')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScTrait: MathSpec
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('MathSpec')
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          SimpleType: MathSig
            CodeReferenceElement: MathSig
              PsiElement(identifier)('MathSig')
      PsiWhiteSpace(' ')
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: epsilon
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: epsilon
              PsiElement(identifier)('epsilon')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          DoubleLiteral
            PsiElement(double)('0.00001')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: sqrt
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(abstract)('abstract')
            PsiWhiteSpace(' ')
            PsiElement(override)('override')
          PsiWhiteSpace(' ')
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('sqrt')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: x
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Double
                    CodeReferenceElement: Double
                      PsiElement(identifier)('Double')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          InfixExpression
            BlockExpression
              PsiElement({)('{')
              PsiWhiteSpace('\n    ')
              MethodCall
                ReferenceExpression: require
                  PsiElement(identifier)('require')
                ArgumentList
                  PsiElement(()('(')
                  InfixExpression
                    ReferenceExpression: x
                      PsiElement(identifier)('x')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: >=
                      PsiElement(identifier)('>=')
                    PsiWhiteSpace(' ')
                    IntegerLiteral
                      PsiElement(integer)('0')
                  PsiElement())(')')
              PsiWhiteSpace('\n    ')
              MethodCall
                ReferenceExpression: super.sqrt
                  SuperReference
                    PsiElement(super)('super')
                  PsiElement(.)('.')
                  PsiElement(identifier)('sqrt')
                ArgumentList
                  PsiElement(()('(')
                  ReferenceExpression: x
                    PsiElement(identifier)('x')
                  PsiElement())(')')
              PsiWhiteSpace('\n  ')
              PsiElement(})('}')
            PsiWhiteSpace(' ')
            ReferenceExpression: ensuring
              PsiElement(identifier)('ensuring')
            PsiWhiteSpace(' ')
            BlockExpression
              PsiElement({)('{')
              PsiWhiteSpace(' ')
              FunctionExpression
                Parameters
                  ParametersClause
                    Parameter: result
                      PsiElement(identifier)('result')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace('\n    ')
                BlockOfExpressions
                  InfixExpression
                    ReferenceExpression: (x * x - result).abs
                      ExpressionInParenthesis
                        PsiElement(()('(')
                        InfixExpression
                          InfixExpression
                            ReferenceExpression: x
                              PsiElement(identifier)('x')
                            PsiWhiteSpace(' ')
                            ReferenceExpression: *
                              PsiElement(identifier)('*')
                            PsiWhiteSpace(' ')
                            ReferenceExpression: x
                              PsiElement(identifier)('x')
                          PsiWhiteSpace(' ')
                          ReferenceExpression: -
                            PsiElement(identifier)('-')
                          PsiWhiteSpace(' ')
                          ReferenceExpression: result
                            PsiElement(identifier)('result')
                        PsiElement())(')')
                      PsiElement(.)('.')
                      PsiElement(identifier)('abs')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: <
                      PsiElement(identifier)('<')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: epsilon
                      PsiElement(identifier)('epsilon')
              PsiWhiteSpace('\n  ')
              PsiElement(})('}')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScTrait: MathImpl
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('MathImpl')
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          SimpleType: MathSig
            CodeReferenceElement: MathSig
              PsiElement(identifier)('MathSig')
      PsiWhiteSpace(' ')
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: sqrt
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('sqrt')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: x
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Double
                    CodeReferenceElement: Double
                      PsiElement(identifier)('Double')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Double
            CodeReferenceElement: Double
              PsiElement(identifier)('Double')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace('\n    ')
          ReferenceExpression: ???
            PsiElement(identifier)('???')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScObject: Math
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Math')
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          SimpleType: MathImpl
            CodeReferenceElement: MathImpl
              PsiElement(identifier)('MathImpl')
        PsiWhiteSpace('\n               ')
        PsiElement(with)('with')
        PsiWhiteSpace(' ')
        ConstructorInvocation
          SimpleType: MathSpec
            CodeReferenceElement: MathSpec
              PsiElement(identifier)('MathSpec')
