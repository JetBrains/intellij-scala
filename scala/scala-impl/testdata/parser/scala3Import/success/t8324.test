package p1

private abstract class ProjectDef(val autoPlugins: Any) extends ProjectDefinition
sealed trait ResolvedProject extends ProjectDefinition {
  def autoPlugins: Any
}

sealed trait ProjectDefinition {
  private[p1] def autoPlugins: Any
}


object Test {
  // was "error: value autoPlugins in class ProjectDef of type Any cannot override final member"
  new ProjectDef(null) with ResolvedProject
}
-----
ScalaFile
  ScPackaging
    PsiElement(package)('package')
    PsiWhiteSpace(' ')
    CodeReferenceElement: p1
      PsiElement(identifier)('p1')
    PsiWhiteSpace('\n\n')
    ScClass: ProjectDef
      AnnotationsList
        <empty list>
      Modifiers
        AccessModifier
          PsiElement(private)('private')
        PsiWhiteSpace(' ')
        PsiElement(abstract)('abstract')
      PsiWhiteSpace(' ')
      PsiElement(class)('class')
      PsiWhiteSpace(' ')
      PsiElement(identifier)('ProjectDef')
      PrimaryConstructor
        AnnotationsList
          <empty list>
        Modifiers
          <empty list>
        Parameters
          ParametersClause
            PsiElement(()('(')
            ClassParameter: autoPlugins
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              PsiElement(identifier)('autoPlugins')
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              ParameterType
                SimpleType: Any
                  CodeReferenceElement: Any
                    PsiElement(identifier)('Any')
            PsiElement())(')')
      PsiWhiteSpace(' ')
      ExtendsBlock
        PsiElement(extends)('extends')
        PsiWhiteSpace(' ')
        TemplateParents
          ConstructorInvocation
            SimpleType: ProjectDefinition
              CodeReferenceElement: ProjectDefinition
                PsiElement(identifier)('ProjectDefinition')
    PsiWhiteSpace('\n')
    ScTrait: ResolvedProject
      AnnotationsList
        <empty list>
      Modifiers
        PsiElement(sealed)('sealed')
      PsiWhiteSpace(' ')
      PsiElement(trait)('trait')
      PsiWhiteSpace(' ')
      PsiElement(identifier)('ResolvedProject')
      PsiWhiteSpace(' ')
      ExtendsBlock
        PsiElement(extends)('extends')
        PsiWhiteSpace(' ')
        TemplateParents
          ConstructorInvocation
            SimpleType: ProjectDefinition
              CodeReferenceElement: ProjectDefinition
                PsiElement(identifier)('ProjectDefinition')
        PsiWhiteSpace(' ')
        ScTemplateBody
          PsiElement({)('{')
          PsiWhiteSpace('\n  ')
          ScFunctionDeclaration: autoPlugins
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(def)('def')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('autoPlugins')
            Parameters
              <empty list>
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            SimpleType: Any
              CodeReferenceElement: Any
                PsiElement(identifier)('Any')
          PsiWhiteSpace('\n')
          PsiElement(})('}')
    PsiWhiteSpace('\n\n')
    ScTrait: ProjectDefinition
      AnnotationsList
        <empty list>
      Modifiers
        PsiElement(sealed)('sealed')
      PsiWhiteSpace(' ')
      PsiElement(trait)('trait')
      PsiWhiteSpace(' ')
      PsiElement(identifier)('ProjectDefinition')
      PsiWhiteSpace(' ')
      ExtendsBlock
        ScTemplateBody
          PsiElement({)('{')
          PsiWhiteSpace('\n  ')
          ScFunctionDeclaration: autoPlugins
            AnnotationsList
              <empty list>
            Modifiers
              AccessModifier
                PsiElement(private)('private')
                PsiElement([)('[')
                PsiElement(identifier)('p1')
                PsiElement(])(']')
            PsiWhiteSpace(' ')
            PsiElement(def)('def')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('autoPlugins')
            Parameters
              <empty list>
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            SimpleType: Any
              CodeReferenceElement: Any
                PsiElement(identifier)('Any')
          PsiWhiteSpace('\n')
          PsiElement(})('}')
    PsiWhiteSpace('\n\n\n')
    ScObject: Test
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      PsiElement(object)('object')
      PsiWhiteSpace(' ')
      PsiElement(identifier)('Test')
      PsiWhiteSpace(' ')
      ExtendsBlock
        ScTemplateBody
          PsiElement({)('{')
          PsiWhiteSpace('\n  ')
          PsiComment(comment)('// was "error: value autoPlugins in class ProjectDef of type Any cannot override final member"')
          PsiWhiteSpace('\n  ')
          ScNewTemplateDefinition: <anonymous>
            PsiElement(new)('new')
            PsiWhiteSpace(' ')
            ExtendsBlock
              TemplateParents
                ConstructorInvocation
                  SimpleType: ProjectDef
                    CodeReferenceElement: ProjectDef
                      PsiElement(identifier)('ProjectDef')
                  ArgumentList
                    PsiElement(()('(')
                    NullLiteral
                      PsiElement(null)('null')
                    PsiElement())(')')
                PsiWhiteSpace(' ')
                PsiElement(with)('with')
                PsiWhiteSpace(' ')
                ConstructorInvocation
                  SimpleType: ResolvedProject
                    CodeReferenceElement: ResolvedProject
                      PsiElement(identifier)('ResolvedProject')
          PsiWhiteSpace('\n')
          PsiElement(})('}')
