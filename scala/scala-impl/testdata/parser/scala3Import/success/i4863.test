sealed trait Nat
case class S(n: Nat) extends Nat
case object Z extends Nat

inline def pred(n: Nat) = inline n match {
  case S(m) => m
  case Z =>
    compiletime.error("n cannot be Z")
}

class Test {
  pred(S(Z))
}
-----
ScalaFile
  ScTrait: Nat
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(sealed)('sealed')
    PsiWhiteSpace(' ')
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Nat')
    ExtendsBlock
      <empty list>
  PsiWhiteSpace('\n')
  ScClass: S
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(case)('case')
    PsiWhiteSpace(' ')
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('S')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        ParametersClause
          PsiElement(()('(')
          ClassParameter: n
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(identifier)('n')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            ParameterType
              SimpleType: Nat
                CodeReferenceElement: Nat
                  PsiElement(identifier)('Nat')
          PsiElement())(')')
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          SimpleType: Nat
            CodeReferenceElement: Nat
              PsiElement(identifier)('Nat')
  PsiWhiteSpace('\n')
  ScObject: Z
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(case)('case')
    PsiWhiteSpace(' ')
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Z')
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          SimpleType: Nat
            CodeReferenceElement: Nat
              PsiElement(identifier)('Nat')
  PsiWhiteSpace('\n\n')
  ScFunctionDefinition: pred
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(inline)('inline')
    PsiWhiteSpace(' ')
    PsiElement(def)('def')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('pred')
    Parameters
      ParametersClause
        PsiElement(()('(')
        Parameter: n
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(identifier)('n')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParameterType
            SimpleType: Nat
              CodeReferenceElement: Nat
                PsiElement(identifier)('Nat')
        PsiElement())(')')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    MatchStatement
      PsiElement(inline)('inline')
      PsiWhiteSpace(' ')
      ReferenceExpression: n
        PsiElement(identifier)('n')
      PsiWhiteSpace(' ')
      PsiElement(match)('match')
      PsiWhiteSpace(' ')
      PsiElement({)('{')
      PsiWhiteSpace('\n  ')
      CaseClauses
        CaseClause
          PsiElement(case)('case')
          PsiWhiteSpace(' ')
          ConstructorPattern
            CodeReferenceElement: S
              PsiElement(identifier)('S')
            Pattern Argument List
              PsiElement(()('(')
              ReferencePattern: m
                PsiElement(identifier)('m')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(=>)('=>')
          PsiWhiteSpace(' ')
          BlockOfExpressions
            ReferenceExpression: m
              PsiElement(identifier)('m')
        PsiWhiteSpace('\n  ')
        CaseClause
          PsiElement(case)('case')
          PsiWhiteSpace(' ')
          StableElementPattern
            ReferenceExpression: Z
              PsiElement(identifier)('Z')
          PsiWhiteSpace(' ')
          PsiElement(=>)('=>')
          PsiWhiteSpace('\n    ')
          BlockOfExpressions
            MethodCall
              ReferenceExpression: compiletime.error
                ReferenceExpression: compiletime
                  PsiElement(identifier)('compiletime')
                PsiElement(.)('.')
                PsiElement(identifier)('error')
              ArgumentList
                PsiElement(()('(')
                StringLiteral
                  PsiElement(string content)('"n cannot be Z"')
                PsiElement())(')')
      PsiWhiteSpace('\n')
      PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScClass: Test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        MethodCall
          ReferenceExpression: pred
            PsiElement(identifier)('pred')
          ArgumentList
            PsiElement(()('(')
            MethodCall
              ReferenceExpression: S
                PsiElement(identifier)('S')
              ArgumentList
                PsiElement(()('(')
                ReferenceExpression: Z
                  PsiElement(identifier)('Z')
                PsiElement())(')')
            PsiElement())(')')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
