import scala.deriving.Mirror

class Scope extends IListDefn {

  type Of = Mirror { type MirroredType[X] = IList[X]; type MirroredMonoType = IList[Any] ; type MirroredElemTypes[_] <: Tuple }

  val M = summon[Of]

}


trait IListDefn {
  sealed trait IList[A] // crucially, no companion is defined
  case class INil[A]() extends IList[A]
  case class ICons[A](h: A, t: IList[A]) extends IList[A]
}
-----
ScalaFile
  ScImportStatement
    PsiElement(import)('import')
    PsiWhiteSpace(' ')
    ImportExpression
      CodeReferenceElement: scala.deriving.Mirror
        CodeReferenceElement: scala.deriving
          CodeReferenceElement: scala
            PsiElement(identifier)('scala')
          PsiElement(.)('.')
          PsiElement(identifier)('deriving')
        PsiElement(.)('.')
        PsiElement(identifier)('Mirror')
  PsiWhiteSpace('\n\n')
  ScClass: Scope
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Scope')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          SimpleType: IListDefn
            CodeReferenceElement: IListDefn
              PsiElement(identifier)('IListDefn')
      PsiWhiteSpace(' ')
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n\n  ')
        ScTypeAliasDefinition: Of
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Of')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          CompoundType: Mirror { type MirroredType[X] = IList[X]; type MirroredMonoType = IList[Any] ; type MirroredElemTypes[_] <: Tuple }
            SimpleType: Mirror
              CodeReferenceElement: Mirror
                PsiElement(identifier)('Mirror')
            PsiWhiteSpace(' ')
            Refinement
              PsiElement({)('{')
              PsiWhiteSpace(' ')
              ScTypeAliasDefinition: MirroredType
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(type)('type')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('MirroredType')
                TypeParameterClause
                  PsiElement([)('[')
                  TypeParameter: X
                    PsiElement(identifier)('X')
                  PsiElement(])(']')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                ParametrizedType: IList[X]
                  SimpleType: IList
                    CodeReferenceElement: IList
                      PsiElement(identifier)('IList')
                  TypeArgumentsList
                    PsiElement([)('[')
                    SimpleType: X
                      CodeReferenceElement: X
                        PsiElement(identifier)('X')
                    PsiElement(])(']')
              PsiElement(;)(';')
              PsiWhiteSpace(' ')
              ScTypeAliasDefinition: MirroredMonoType
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(type)('type')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('MirroredMonoType')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                ParametrizedType: IList[Any]
                  SimpleType: IList
                    CodeReferenceElement: IList
                      PsiElement(identifier)('IList')
                  TypeArgumentsList
                    PsiElement([)('[')
                    SimpleType: Any
                      CodeReferenceElement: Any
                        PsiElement(identifier)('Any')
                    PsiElement(])(']')
              PsiWhiteSpace(' ')
              PsiElement(;)(';')
              PsiWhiteSpace(' ')
              ScTypeAliasDeclaration: MirroredElemTypes
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(type)('type')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('MirroredElemTypes')
                TypeParameterClause
                  PsiElement([)('[')
                  TypeParameter: _
                    PsiElement(_)('_')
                  PsiElement(])(']')
                PsiWhiteSpace(' ')
                PsiElement(<:)('<:')
                PsiWhiteSpace(' ')
                SimpleType: Tuple
                  CodeReferenceElement: Tuple
                    PsiElement(identifier)('Tuple')
              PsiWhiteSpace(' ')
              PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        ScPatternDefinition: M
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: M
              PsiElement(identifier)('M')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          GenericCall
            ReferenceExpression: summon
              PsiElement(identifier)('summon')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: Of
                CodeReferenceElement: Of
                  PsiElement(identifier)('Of')
              PsiElement(])(']')
        PsiWhiteSpace('\n\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n\n')
  ScTrait: IListDefn
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('IListDefn')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScTrait: IList
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(sealed)('sealed')
          PsiWhiteSpace(' ')
          PsiElement(trait)('trait')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('IList')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: A
              PsiElement(identifier)('A')
            PsiElement(])(']')
          ExtendsBlock
            <empty list>
        PsiWhiteSpace(' ')
        PsiComment(comment)('// crucially, no companion is defined')
        PsiWhiteSpace('\n  ')
        ScClass: INil
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(case)('case')
          PsiWhiteSpace(' ')
          PsiElement(class)('class')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('INil')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: A
              PsiElement(identifier)('A')
            PsiElement(])(']')
          PrimaryConstructor
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            Parameters
              ParametersClause
                PsiElement(()('(')
                PsiElement())(')')
          PsiWhiteSpace(' ')
          ExtendsBlock
            PsiElement(extends)('extends')
            PsiWhiteSpace(' ')
            TemplateParents
              ConstructorInvocation
                ParametrizedType: IList[A]
                  SimpleType: IList
                    CodeReferenceElement: IList
                      PsiElement(identifier)('IList')
                  TypeArgumentsList
                    PsiElement([)('[')
                    SimpleType: A
                      CodeReferenceElement: A
                        PsiElement(identifier)('A')
                    PsiElement(])(']')
        PsiWhiteSpace('\n  ')
        ScClass: ICons
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(case)('case')
          PsiWhiteSpace(' ')
          PsiElement(class)('class')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('ICons')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: A
              PsiElement(identifier)('A')
            PsiElement(])(']')
          PrimaryConstructor
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            Parameters
              ParametersClause
                PsiElement(()('(')
                ClassParameter: h
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(identifier)('h')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    SimpleType: A
                      CodeReferenceElement: A
                        PsiElement(identifier)('A')
                PsiElement(,)(',')
                PsiWhiteSpace(' ')
                ClassParameter: t
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(identifier)('t')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    ParametrizedType: IList[A]
                      SimpleType: IList
                        CodeReferenceElement: IList
                          PsiElement(identifier)('IList')
                      TypeArgumentsList
                        PsiElement([)('[')
                        SimpleType: A
                          CodeReferenceElement: A
                            PsiElement(identifier)('A')
                        PsiElement(])(']')
                PsiElement())(')')
          PsiWhiteSpace(' ')
          ExtendsBlock
            PsiElement(extends)('extends')
            PsiWhiteSpace(' ')
            TemplateParents
              ConstructorInvocation
                ParametrizedType: IList[A]
                  SimpleType: IList
                    CodeReferenceElement: IList
                      PsiElement(identifier)('IList')
                  TypeArgumentsList
                    PsiElement([)('[')
                    SimpleType: A
                      CodeReferenceElement: A
                        PsiElement(identifier)('A')
                    PsiElement(])(']')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
