class Cont[A0](x0: A0) { type A = A0; val x: A = x0 }

object Test {
  def test: Unit = {
    val c: Cont[_] & { type A = Int } = new Cont(1)
    c.x
  }
}
-----
ScalaFile
  ScClass: Cont
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Cont')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: A0
        PsiElement(identifier)('A0')
      PsiElement(])(']')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        ParametersClause
          PsiElement(()('(')
          ClassParameter: x0
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(identifier)('x0')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            ParameterType
              SimpleType: A0
                CodeReferenceElement: A0
                  PsiElement(identifier)('A0')
          PsiElement())(')')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace(' ')
        ScTypeAliasDefinition: A
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('A')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          SimpleType: A0
            CodeReferenceElement: A0
              PsiElement(identifier)('A0')
        PsiElement(;)(';')
        PsiWhiteSpace(' ')
        ScPatternDefinition: x
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: x
              PsiElement(identifier)('x')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: A
            CodeReferenceElement: A
              PsiElement(identifier)('A')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: x0
            PsiElement(identifier)('x0')
        PsiWhiteSpace(' ')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScObject: Test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: test
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('test')
          Parameters
            <empty list>
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Unit
            CodeReferenceElement: Unit
              PsiElement(identifier)('Unit')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          BlockExpression
            PsiElement({)('{')
            PsiWhiteSpace('\n    ')
            ScPatternDefinition: c
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              ListOfPatterns
                ReferencePattern: c
                  PsiElement(identifier)('c')
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              InfixType: Cont[_] & { type A = Int }
                ParametrizedType: Cont[_]
                  SimpleType: Cont
                    CodeReferenceElement: Cont
                      PsiElement(identifier)('Cont')
                  TypeArgumentsList
                    PsiElement([)('[')
                    WildcardType: _
                      PsiElement(_)('_')
                    PsiElement(])(']')
                PsiWhiteSpace(' ')
                CodeReferenceElement: &
                  PsiElement(identifier)('&')
                PsiWhiteSpace(' ')
                CompoundType: { type A = Int }
                  Refinement
                    PsiElement({)('{')
                    PsiWhiteSpace(' ')
                    ScTypeAliasDefinition: A
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(type)('type')
                      PsiWhiteSpace(' ')
                      PsiElement(identifier)('A')
                      PsiWhiteSpace(' ')
                      PsiElement(=)('=')
                      PsiWhiteSpace(' ')
                      SimpleType: Int
                        CodeReferenceElement: Int
                          PsiElement(identifier)('Int')
                    PsiWhiteSpace(' ')
                    PsiElement(})('}')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              ScNewTemplateDefinition: <anonymous>
                PsiElement(new)('new')
                PsiWhiteSpace(' ')
                ExtendsBlock
                  TemplateParents
                    ConstructorInvocation
                      SimpleType: Cont
                        CodeReferenceElement: Cont
                          PsiElement(identifier)('Cont')
                      ArgumentList
                        PsiElement(()('(')
                        IntegerLiteral
                          PsiElement(integer)('1')
                        PsiElement())(')')
            PsiWhiteSpace('\n    ')
            ReferenceExpression: c.x
              ReferenceExpression: c
                PsiElement(identifier)('c')
              PsiElement(.)('.')
              PsiElement(identifier)('x')
            PsiWhiteSpace('\n  ')
            PsiElement(})('}')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
