import java.nio.file.*

class Test {
  def test(xs: Array[String]) = {
    val p1 = Paths.get("Hello")
    val p2 = Paths.get("Hello", "World")
    val p3 = Paths.get("Hello", "World", "!")
    val p4 = Paths.get("Hello", xs*)
  }
}
-----
ScalaFile
  ScImportStatement
    PsiElement(import)('import')
    PsiWhiteSpace(' ')
    ImportExpression
      CodeReferenceElement: java.nio.file
        CodeReferenceElement: java.nio
          CodeReferenceElement: java
            PsiElement(identifier)('java')
          PsiElement(.)('.')
          PsiElement(identifier)('nio')
        PsiElement(.)('.')
        PsiElement(identifier)('file')
      PsiElement(.)('.')
      PsiElement(*)('*')
  PsiWhiteSpace('\n\n')
  ScClass: Test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: test
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('test')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: xs
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('xs')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  ParametrizedType: Array[String]
                    SimpleType: Array
                      CodeReferenceElement: Array
                        PsiElement(identifier)('Array')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: String
                        CodeReferenceElement: String
                          PsiElement(identifier)('String')
                      PsiElement(])(']')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          BlockExpression
            PsiElement({)('{')
            PsiWhiteSpace('\n    ')
            ScPatternDefinition: p1
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              ListOfPatterns
                ReferencePattern: p1
                  PsiElement(identifier)('p1')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              MethodCall
                ReferenceExpression: Paths.get
                  ReferenceExpression: Paths
                    PsiElement(identifier)('Paths')
                  PsiElement(.)('.')
                  PsiElement(identifier)('get')
                ArgumentList
                  PsiElement(()('(')
                  StringLiteral
                    PsiElement(string content)('"Hello"')
                  PsiElement())(')')
            PsiWhiteSpace('\n    ')
            ScPatternDefinition: p2
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              ListOfPatterns
                ReferencePattern: p2
                  PsiElement(identifier)('p2')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              MethodCall
                ReferenceExpression: Paths.get
                  ReferenceExpression: Paths
                    PsiElement(identifier)('Paths')
                  PsiElement(.)('.')
                  PsiElement(identifier)('get')
                ArgumentList
                  PsiElement(()('(')
                  StringLiteral
                    PsiElement(string content)('"Hello"')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  StringLiteral
                    PsiElement(string content)('"World"')
                  PsiElement())(')')
            PsiWhiteSpace('\n    ')
            ScPatternDefinition: p3
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              ListOfPatterns
                ReferencePattern: p3
                  PsiElement(identifier)('p3')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              MethodCall
                ReferenceExpression: Paths.get
                  ReferenceExpression: Paths
                    PsiElement(identifier)('Paths')
                  PsiElement(.)('.')
                  PsiElement(identifier)('get')
                ArgumentList
                  PsiElement(()('(')
                  StringLiteral
                    PsiElement(string content)('"Hello"')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  StringLiteral
                    PsiElement(string content)('"World"')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  StringLiteral
                    PsiElement(string content)('"!"')
                  PsiElement())(')')
            PsiWhiteSpace('\n    ')
            ScPatternDefinition: p4
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              ListOfPatterns
                ReferencePattern: p4
                  PsiElement(identifier)('p4')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              MethodCall
                ReferenceExpression: Paths.get
                  ReferenceExpression: Paths
                    PsiElement(identifier)('Paths')
                  PsiElement(.)('.')
                  PsiElement(identifier)('get')
                ArgumentList
                  PsiElement(()('(')
                  StringLiteral
                    PsiElement(string content)('"Hello"')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  TypedExpression
                    ReferenceExpression: xs
                      PsiElement(identifier)('xs')
                    SequenceArgumentType
                      PsiElement(identifier)('*')
                  PsiElement())(')')
            PsiWhiteSpace('\n  ')
            PsiElement(})('}')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
