// This should be a neg test once level checking is re-enabled.

trait E[F[_]] {
  type T
  val value: F[T]
}

object E {
  def apply[F[_], T1](value1: F[T1]) = new E[F] {
    type T = T1
    val value = value1
  }
}

val a: Option[E[Ordering]] = Option(E(Ordering[Int]))
val _ = a.map(it => E(it.value)) // there should be an error here

-----
ScalaFile
  PsiComment(comment)('// This should be a neg test once level checking is re-enabled.')
  PsiWhiteSpace('\n\n')
  ScTrait: E
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('E')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: F
        PsiElement(identifier)('F')
        TypeParameterClause
          PsiElement([)('[')
          TypeParameter: _
            PsiElement(_)('_')
          PsiElement(])(']')
      PsiElement(])(']')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScTypeAliasDeclaration: T
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('T')
        PsiWhiteSpace('\n  ')
        ScValueDeclaration: value
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfIdentifiers
            Field identifier: value
              PsiElement(identifier)('value')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: F[T]
            SimpleType: F
              CodeReferenceElement: F
                PsiElement(identifier)('F')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: T
                CodeReferenceElement: T
                  PsiElement(identifier)('T')
              PsiElement(])(']')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScObject: E
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('E')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: apply
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('apply')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: F
              PsiElement(identifier)('F')
              TypeParameterClause
                PsiElement([)('[')
                TypeParameter: _
                  PsiElement(_)('_')
                PsiElement(])(']')
            PsiElement(,)(',')
            PsiWhiteSpace(' ')
            TypeParameter: T1
              PsiElement(identifier)('T1')
            PsiElement(])(']')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: value1
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('value1')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  ParametrizedType: F[T1]
                    SimpleType: F
                      CodeReferenceElement: F
                        PsiElement(identifier)('F')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: T1
                        CodeReferenceElement: T1
                          PsiElement(identifier)('T1')
                      PsiElement(])(']')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ScNewTemplateDefinition: <anonymous>
            PsiElement(new)('new')
            PsiWhiteSpace(' ')
            ExtendsBlock
              TemplateParents
                ConstructorInvocation
                  ParametrizedType: E[F]
                    SimpleType: E
                      CodeReferenceElement: E
                        PsiElement(identifier)('E')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: F
                        CodeReferenceElement: F
                          PsiElement(identifier)('F')
                      PsiElement(])(']')
              PsiWhiteSpace(' ')
              ScTemplateBody
                PsiElement({)('{')
                PsiWhiteSpace('\n    ')
                ScTypeAliasDefinition: T
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(type)('type')
                  PsiWhiteSpace(' ')
                  PsiElement(identifier)('T')
                  PsiWhiteSpace(' ')
                  PsiElement(=)('=')
                  PsiWhiteSpace(' ')
                  SimpleType: T1
                    CodeReferenceElement: T1
                      PsiElement(identifier)('T1')
                PsiWhiteSpace('\n    ')
                ScPatternDefinition: value
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(val)('val')
                  PsiWhiteSpace(' ')
                  ListOfPatterns
                    ReferencePattern: value
                      PsiElement(identifier)('value')
                  PsiWhiteSpace(' ')
                  PsiElement(=)('=')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: value1
                    PsiElement(identifier)('value1')
                PsiWhiteSpace('\n  ')
                PsiElement(})('}')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScPatternDefinition: a
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(val)('val')
    PsiWhiteSpace(' ')
    ListOfPatterns
      ReferencePattern: a
        PsiElement(identifier)('a')
    PsiElement(:)(':')
    PsiWhiteSpace(' ')
    ParametrizedType: Option[E[Ordering]]
      SimpleType: Option
        CodeReferenceElement: Option
          PsiElement(identifier)('Option')
      TypeArgumentsList
        PsiElement([)('[')
        ParametrizedType: E[Ordering]
          SimpleType: E
            CodeReferenceElement: E
              PsiElement(identifier)('E')
          TypeArgumentsList
            PsiElement([)('[')
            SimpleType: Ordering
              CodeReferenceElement: Ordering
                PsiElement(identifier)('Ordering')
            PsiElement(])(']')
        PsiElement(])(']')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    MethodCall
      ReferenceExpression: Option
        PsiElement(identifier)('Option')
      ArgumentList
        PsiElement(()('(')
        MethodCall
          ReferenceExpression: E
            PsiElement(identifier)('E')
          ArgumentList
            PsiElement(()('(')
            GenericCall
              ReferenceExpression: Ordering
                PsiElement(identifier)('Ordering')
              TypeArgumentsList
                PsiElement([)('[')
                SimpleType: Int
                  CodeReferenceElement: Int
                    PsiElement(identifier)('Int')
                PsiElement(])(']')
            PsiElement())(')')
        PsiElement())(')')
  PsiWhiteSpace('\n')
  ScPatternDefinition
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(val)('val')
    PsiWhiteSpace(' ')
    ListOfPatterns
      WildcardPattern
        PsiElement(_)('_')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    MethodCall
      ReferenceExpression: a.map
        ReferenceExpression: a
          PsiElement(identifier)('a')
        PsiElement(.)('.')
        PsiElement(identifier)('map')
      ArgumentList
        PsiElement(()('(')
        FunctionExpression
          Parameters
            ParametersClause
              Parameter: it
                PsiElement(identifier)('it')
          PsiWhiteSpace(' ')
          PsiElement(=>)('=>')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: E
              PsiElement(identifier)('E')
            ArgumentList
              PsiElement(()('(')
              ReferenceExpression: it.value
                ReferenceExpression: it
                  PsiElement(identifier)('it')
                PsiElement(.)('.')
                PsiElement(identifier)('value')
              PsiElement())(')')
        PsiElement())(')')
  PsiWhiteSpace(' ')
  PsiComment(comment)('// there should be an error here')
