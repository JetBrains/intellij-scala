class Foo
class Bar extends Foo

inline def thingy(a: Int = 0, b: Int = 0, inline c: Foo = new Bar) = {
  inline c match {
    case _: Bar =>
  }
}

def x = 1

def test = thingy(b = x)
-----
ScalaFile
  ScClass: Foo
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Foo')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    ExtendsBlock
      <empty list>
  PsiWhiteSpace('\n')
  ScClass: Bar
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Bar')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          SimpleType: Foo
            CodeReferenceElement: Foo
              PsiElement(identifier)('Foo')
  PsiWhiteSpace('\n\n')
  ScFunctionDefinition: thingy
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(inline)('inline')
    PsiWhiteSpace(' ')
    PsiElement(def)('def')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('thingy')
    Parameters
      ParametersClause
        PsiElement(()('(')
        Parameter: a
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(identifier)('a')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParameterType
            SimpleType: Int
              CodeReferenceElement: Int
                PsiElement(identifier)('Int')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          IntegerLiteral
            PsiElement(integer)('0')
        PsiElement(,)(',')
        PsiWhiteSpace(' ')
        Parameter: b
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(identifier)('b')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParameterType
            SimpleType: Int
              CodeReferenceElement: Int
                PsiElement(identifier)('Int')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          IntegerLiteral
            PsiElement(integer)('0')
        PsiElement(,)(',')
        PsiWhiteSpace(' ')
        Parameter: c
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(inline)('inline')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('c')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParameterType
            SimpleType: Foo
              CodeReferenceElement: Foo
                PsiElement(identifier)('Foo')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ScNewTemplateDefinition: <anonymous>
            PsiElement(new)('new')
            PsiWhiteSpace(' ')
            ExtendsBlock
              TemplateParents
                ConstructorInvocation
                  SimpleType: Bar
                    CodeReferenceElement: Bar
                      PsiElement(identifier)('Bar')
        PsiElement())(')')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    BlockExpression
      PsiElement({)('{')
      PsiWhiteSpace('\n  ')
      MatchStatement
        PsiElement(inline)('inline')
        PsiWhiteSpace(' ')
        ReferenceExpression: c
          PsiElement(identifier)('c')
        PsiWhiteSpace(' ')
        PsiElement(match)('match')
        PsiWhiteSpace(' ')
        PsiElement({)('{')
        PsiWhiteSpace('\n    ')
        CaseClauses
          CaseClause
            PsiElement(case)('case')
            PsiWhiteSpace(' ')
            Scala3 TypedPattern
              WildcardPattern
                PsiElement(_)('_')
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              TypePattern
                SimpleType: Bar
                  CodeReferenceElement: Bar
                    PsiElement(identifier)('Bar')
            PsiWhiteSpace(' ')
            PsiElement(=>)('=>')
            BlockOfExpressions
              <empty list>
        PsiWhiteSpace('\n  ')
        PsiElement(})('}')
      PsiWhiteSpace('\n')
      PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScFunctionDefinition: x
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(def)('def')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('x')
    Parameters
      <empty list>
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    IntegerLiteral
      PsiElement(integer)('1')
  PsiWhiteSpace('\n\n')
  ScFunctionDefinition: test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(def)('def')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('test')
    Parameters
      <empty list>
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    MethodCall
      ReferenceExpression: thingy
        PsiElement(identifier)('thingy')
      ArgumentList
        PsiElement(()('(')
        AssignStatement
          ReferenceExpression: b
            PsiElement(identifier)('b')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: x
            PsiElement(identifier)('x')
        PsiElement())(')')
