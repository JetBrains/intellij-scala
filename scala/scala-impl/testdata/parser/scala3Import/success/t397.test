abstract class Root {

  abstract class Edge {
    type V;
    def source: V;
  }

  abstract class Graph {
    type W;
    type E <: Edge{type V = W};
    def edge: E;
  }

  val g: Graph{type W = Int};
  val x: Int = g.edge.source;
}
-----
ScalaFile
  ScClass: Root
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(abstract)('abstract')
    PsiWhiteSpace(' ')
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Root')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n\n  ')
        ScClass: Edge
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(abstract)('abstract')
          PsiWhiteSpace(' ')
          PsiElement(class)('class')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Edge')
          PrimaryConstructor
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            Parameters
              <empty list>
          PsiWhiteSpace(' ')
          ExtendsBlock
            ScTemplateBody
              PsiElement({)('{')
              PsiWhiteSpace('\n    ')
              ScTypeAliasDeclaration: V
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(type)('type')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('V')
              PsiElement(;)(';')
              PsiWhiteSpace('\n    ')
              ScFunctionDeclaration: source
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(def)('def')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('source')
                Parameters
                  <empty list>
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                SimpleType: V
                  CodeReferenceElement: V
                    PsiElement(identifier)('V')
              PsiElement(;)(';')
              PsiWhiteSpace('\n  ')
              PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        ScClass: Graph
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(abstract)('abstract')
          PsiWhiteSpace(' ')
          PsiElement(class)('class')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Graph')
          PrimaryConstructor
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            Parameters
              <empty list>
          PsiWhiteSpace(' ')
          ExtendsBlock
            ScTemplateBody
              PsiElement({)('{')
              PsiWhiteSpace('\n    ')
              ScTypeAliasDeclaration: W
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(type)('type')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('W')
              PsiElement(;)(';')
              PsiWhiteSpace('\n    ')
              ScTypeAliasDeclaration: E
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(type)('type')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('E')
                PsiWhiteSpace(' ')
                PsiElement(<:)('<:')
                PsiWhiteSpace(' ')
                CompoundType: Edge{type V = W}
                  SimpleType: Edge
                    CodeReferenceElement: Edge
                      PsiElement(identifier)('Edge')
                  Refinement
                    PsiElement({)('{')
                    ScTypeAliasDefinition: V
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(type)('type')
                      PsiWhiteSpace(' ')
                      PsiElement(identifier)('V')
                      PsiWhiteSpace(' ')
                      PsiElement(=)('=')
                      PsiWhiteSpace(' ')
                      SimpleType: W
                        CodeReferenceElement: W
                          PsiElement(identifier)('W')
                    PsiElement(})('}')
              PsiElement(;)(';')
              PsiWhiteSpace('\n    ')
              ScFunctionDeclaration: edge
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(def)('def')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('edge')
                Parameters
                  <empty list>
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                SimpleType: E
                  CodeReferenceElement: E
                    PsiElement(identifier)('E')
              PsiElement(;)(';')
              PsiWhiteSpace('\n  ')
              PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        ScValueDeclaration: g
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfIdentifiers
            Field identifier: g
              PsiElement(identifier)('g')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          CompoundType: Graph{type W = Int}
            SimpleType: Graph
              CodeReferenceElement: Graph
                PsiElement(identifier)('Graph')
            Refinement
              PsiElement({)('{')
              ScTypeAliasDefinition: W
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(type)('type')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('W')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                SimpleType: Int
                  CodeReferenceElement: Int
                    PsiElement(identifier)('Int')
              PsiElement(})('}')
        PsiElement(;)(';')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: x
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: x
              PsiElement(identifier)('x')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Int
            CodeReferenceElement: Int
              PsiElement(identifier)('Int')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: g.edge.source
            ReferenceExpression: g.edge
              ReferenceExpression: g
                PsiElement(identifier)('g')
              PsiElement(.)('.')
              PsiElement(identifier)('edge')
            PsiElement(.)('.')
            PsiElement(identifier)('source')
        PsiElement(;)(';')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
