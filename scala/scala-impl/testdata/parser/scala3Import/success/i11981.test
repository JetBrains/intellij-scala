object Main:
    class Null
    type Optional[A] = A | Null

    val maybeInt: Optional[Int] = 1

    // simplest typeclass
    trait TC[F[_]]

    // given instances for our Optional and standard Option[_]
    given g1: TC[Optional] = ???
    given g2: TC[Option] = ???

    def summonTC[F[_], A](f: F[A])(using TC[F]): Unit = ???

    summonTC(Option(42))  // OK

    summonTC[Optional, Int](maybeInt) // OK

    summonTC(maybeInt)

-----
ScalaFile
  ScObject: Main
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Main')
    ExtendsBlock
      ScTemplateBody
        PsiElement(:)(':')
        PsiWhiteSpace('\n    ')
        ScClass: Null
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(class)('class')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Null')
          PrimaryConstructor
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            Parameters
              <empty list>
          ExtendsBlock
            <empty list>
        PsiWhiteSpace('\n    ')
        ScTypeAliasDefinition: Optional
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Optional')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: A
              PsiElement(identifier)('A')
            PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          InfixType: A | Null
            SimpleType: A
              CodeReferenceElement: A
                PsiElement(identifier)('A')
            PsiWhiteSpace(' ')
            CodeReferenceElement: |
              PsiElement(identifier)('|')
            PsiWhiteSpace(' ')
            SimpleType: Null
              CodeReferenceElement: Null
                PsiElement(identifier)('Null')
        PsiWhiteSpace('\n\n    ')
        ScPatternDefinition: maybeInt
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: maybeInt
              PsiElement(identifier)('maybeInt')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: Optional[Int]
            SimpleType: Optional
              CodeReferenceElement: Optional
                PsiElement(identifier)('Optional')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: Int
                CodeReferenceElement: Int
                  PsiElement(identifier)('Int')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          IntegerLiteral
            PsiElement(integer)('1')
        PsiWhiteSpace('\n\n    ')
        ScTrait: TC
          PsiComment(comment)('// simplest typeclass')
          PsiWhiteSpace('\n    ')
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(trait)('trait')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('TC')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: F
              PsiElement(identifier)('F')
              TypeParameterClause
                PsiElement([)('[')
                TypeParameter: _
                  PsiElement(_)('_')
                PsiElement(])(']')
            PsiElement(])(']')
          ExtendsBlock
            <empty list>
        PsiWhiteSpace('\n\n    ')
        ScGivenAliasDefinition: g1
          PsiComment(comment)('// given instances for our Optional and standard Option[_]')
          PsiWhiteSpace('\n    ')
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(given)('given')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('g1')
          Parameters
            <empty list>
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: TC[Optional]
            SimpleType: TC
              CodeReferenceElement: TC
                PsiElement(identifier)('TC')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: Optional
                CodeReferenceElement: Optional
                  PsiElement(identifier)('Optional')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: ???
            PsiElement(identifier)('???')
        PsiWhiteSpace('\n    ')
        ScGivenAliasDefinition: g2
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(given)('given')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('g2')
          Parameters
            <empty list>
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: TC[Option]
            SimpleType: TC
              CodeReferenceElement: TC
                PsiElement(identifier)('TC')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: Option
                CodeReferenceElement: Option
                  PsiElement(identifier)('Option')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: ???
            PsiElement(identifier)('???')
        PsiWhiteSpace('\n\n    ')
        ScFunctionDefinition: summonTC
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('summonTC')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: F
              PsiElement(identifier)('F')
              TypeParameterClause
                PsiElement([)('[')
                TypeParameter: _
                  PsiElement(_)('_')
                PsiElement(])(']')
            PsiElement(,)(',')
            PsiWhiteSpace(' ')
            TypeParameter: A
              PsiElement(identifier)('A')
            PsiElement(])(']')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: f
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('f')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  ParametrizedType: F[A]
                    SimpleType: F
                      CodeReferenceElement: F
                        PsiElement(identifier)('F')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: A
                        CodeReferenceElement: A
                          PsiElement(identifier)('A')
                      PsiElement(])(']')
              PsiElement())(')')
            ParametersClause
              PsiElement(()('(')
              PsiElement(using)('using')
              PsiWhiteSpace(' ')
              Parameter: <anonymous>
                ParameterType
                  ParametrizedType: TC[F]
                    SimpleType: TC
                      CodeReferenceElement: TC
                        PsiElement(identifier)('TC')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: F
                        CodeReferenceElement: F
                          PsiElement(identifier)('F')
                      PsiElement(])(']')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Unit
            CodeReferenceElement: Unit
              PsiElement(identifier)('Unit')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: ???
            PsiElement(identifier)('???')
        PsiWhiteSpace('\n\n    ')
        MethodCall
          ReferenceExpression: summonTC
            PsiElement(identifier)('summonTC')
          ArgumentList
            PsiElement(()('(')
            MethodCall
              ReferenceExpression: Option
                PsiElement(identifier)('Option')
              ArgumentList
                PsiElement(()('(')
                IntegerLiteral
                  PsiElement(integer)('42')
                PsiElement())(')')
            PsiElement())(')')
        PsiWhiteSpace('  ')
        PsiComment(comment)('// OK')
        PsiWhiteSpace('\n\n    ')
        MethodCall
          GenericCall
            ReferenceExpression: summonTC
              PsiElement(identifier)('summonTC')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: Optional
                CodeReferenceElement: Optional
                  PsiElement(identifier)('Optional')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              SimpleType: Int
                CodeReferenceElement: Int
                  PsiElement(identifier)('Int')
              PsiElement(])(']')
          ArgumentList
            PsiElement(()('(')
            ReferenceExpression: maybeInt
              PsiElement(identifier)('maybeInt')
            PsiElement())(')')
        PsiWhiteSpace(' ')
        PsiComment(comment)('// OK')
        PsiWhiteSpace('\n\n    ')
        MethodCall
          ReferenceExpression: summonTC
            PsiElement(identifier)('summonTC')
          ArgumentList
            PsiElement(()('(')
            ReferenceExpression: maybeInt
              PsiElement(identifier)('maybeInt')
            PsiElement())(')')
