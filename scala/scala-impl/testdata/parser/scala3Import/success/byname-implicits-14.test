// deriving/src/main/scala/by-name-implicit-test.scala.scala
sealed trait AABB
case class AA(a: String) extends AABB
case class BB(a: String) extends AABB
case class DAABB(d: Double, aabb: AABB)
case class IDAABBS(i: Int, daabb: DAABB, s: String)

case class Dog(age: Long)
case class Cat(name: String, friend: Either[Cat, Dog])

// Definitions from Shapeless +

sealed trait HList extends Product with Serializable
final case class ::[+H, +T <: HList](head: H, tail: T) extends HList
sealed trait HNil extends HList
case object HNil extends HNil

sealed trait Coproduct extends Product with Serializable
sealed trait :+:[+H, +T <: Coproduct] extends Coproduct
final case class Inl[+H, +T <: Coproduct](head: H) extends :+:[H, T]
final case class Inr[+H, +T <: Coproduct](tail: T) extends :+:[H, T]
sealed trait CNil extends Coproduct

trait Generic[T] {
  type Repr
  def to(t: T): Repr
  def from(r: Repr): T
}

// Manual Generic macro expansions +

object GenericInstances {
  implicit val genAABB: Generic[AABB] { type Repr = AA :+: BB :+: CNil } =
    new Generic[AABB] {
      type Repr = AA :+: BB :+: CNil
      def to(t: AABB): Repr = t match {
        case x: AA => Inl(x)
        case x: BB => Inr(Inl(x))
      }
      def from(r: Repr): AABB = r match {
        case Inl(x) => x
        case Inr(Inl(x)) => x
        case _ => ???
      }
    }

  implicit val genAA: Generic[AA] { type Repr = String :: HNil } =
    new Generic[AA] {
      type Repr = String :: HNil
      def to(t: AA): Repr = t match { case AA(x) => ::(x, HNil) }
      def from(r: Repr): AA = r match { case ::(x, HNil) => AA(x) }
    }

  implicit val genBB: Generic[BB] { type Repr = String :: HNil } =
    new Generic[BB] {
      type Repr = String :: HNil
      def to(t: BB): Repr = t match { case BB(x) => ::(x, HNil) }
      def from(r: Repr): BB = r match { case ::(x, HNil) => BB(x) }
    }

  implicit val genDAABB: Generic[DAABB] { type Repr = Double :: AABB :: HNil } =
    new Generic[DAABB] {
      type Repr = Double :: AABB :: HNil
      def to(t: DAABB): Repr = t match { case DAABB(x, y) => ::(x, ::(y, HNil)) }
      def from(r: Repr): DAABB = r match { case ::(x, ::(y, HNil)) => DAABB(x, y) }
    }

  implicit val genIDAABBS: Generic[IDAABBS] { type Repr = Int :: DAABB :: String :: HNil } =
    new Generic[IDAABBS] {
      type Repr = Int :: DAABB :: String :: HNil
      def to(t: IDAABBS): Repr = t match { case IDAABBS(x, y, z) => ::(x, ::(y, ::(z, HNil))) }
      def from(r: Repr): IDAABBS = r match { case ::(x, ::(y, ::(z, HNil))) => IDAABBS(x, y, z) }
    }

  implicit val genDog: Generic[Dog] { type Repr = Long :: HNil } =
    new Generic[Dog] {
      type Repr = Long :: HNil
      def to(t: Dog): Repr = t match { case Dog(x) => ::(x, HNil) }
      def from(r: Repr): Dog = r match { case ::(x, HNil) => Dog(x) }
    }

  implicit val genCat: Generic[Cat] { type Repr = String :: Either[Cat, Dog] :: HNil } =
    new Generic[Cat] {
      type Repr = String :: Either[Cat, Dog] :: HNil
      def to(t: Cat): Repr = t match { case Cat(x, y) => ::(x, ::(y, HNil)) }
      def from(r: Repr): Cat = r match { case ::(x, ::(y, HNil)) => Cat(x, y) }
    }

  implicit def genEither[A, B]: Generic[Either[A, B]] { type Repr = Left[A, B] :+: Right[A, B] :+: CNil } =
    new Generic[Either[A, B]] {
      type Repr = Left[A, B] :+: Right[A, B] :+: CNil
      def to(t: Either[A, B]): Repr = t match {
        case (x: Left[A, B]  @unchecked) => Inl(x)
        case (x: Right[A, B] @unchecked) => Inr(Inl(x))
      }
      def from(r: Repr): Either[A, B] = r match {
        case Inl(x) => x
        case Inr(Inl(x)) => x
        case _ => ???
      }
    }

  implicit def genLeft[A, B]: Generic[Left[A, B]] { type Repr = A :: HNil } =
    new Generic[Left[A, B]] {
      type Repr = A :: HNil
      def to(t: Left[A, B]): Repr = t match { case Left(x) => ::(x, HNil) }
      def from(r: Repr): Left[A, B] = r match { case ::(x, HNil) => Left(x) }
    }

  implicit def genRight[A, B]: Generic[Right[A, B]] { type Repr = B :: HNil } =
    new Generic[Right[A, B]] {
      type Repr = B :: HNil
      def to(t: Right[A, B]): Repr = t match { case Right(x) => ::(x, HNil) }
      def from(r: Repr): Right[A, B] = r match { case ::(x, HNil) => Right(x) }
    }
}

// First example from https://github.com/milessabin/shapeless-type-class-derivation-2015-demo
object equal {
  trait Eq[T] {
    def eqv(x: T, y: T): Boolean
  }

  object Eq {
    implicit val eqInt: Eq[Int] =
      new Eq[Int] {
        def eqv(x: Int, y: Int): Boolean = x == y
      }

    implicit val eqString: Eq[String] =
      new Eq[String] {
        def eqv(x: String, y: String): Boolean = x == y
      }

    implicit def eqGeneric[T, R]
      (implicit
        gen: Generic[T] { type Repr = R },
        eqRepr: => Eq[R]
      ): Eq[T] =
        new Eq[T] {
          def eqv(x: T, y: T): Boolean =
            eqRepr.eqv(gen.to(x), gen.to(y))
        }

    implicit val eqHNil: Eq[HNil] = new Eq[HNil] {
      def eqv(x: HNil, y: HNil): Boolean = true
    }

    implicit def eqHCons[H, T <: HList]
      (implicit
        eqH: => Eq[H],
        eqT: => Eq[T]
      ): Eq[H :: T] =
        new Eq[H :: T] {
          def eqv(x: H :: T, y: H :: T): Boolean =
            eqH.eqv(x.head, y.head) && eqT.eqv(x.tail, y.tail)
        }

    implicit val eqCNil: Eq[CNil] = new Eq[CNil] {
      def eqv(x: CNil, y: CNil): Boolean = true
    }

    implicit def eqCNCons[H, T <: Coproduct]
      (implicit
        eqH: => Eq[H],
        eqT: => Eq[T]
      ): Eq[H :+: T] =
        new Eq[H :+: T] {
          def eqv(x: H :+: T, y: H :+: T): Boolean =
            (x, y) match {
              case (Inl(xh), Inl(yh)) => eqH.eqv(xh, yh)
              case (Inr(xt), Inr(yt)) => eqT.eqv(xt, yt)
              case _ => false
            }
        }
  }

  implicit class EqOps[T](x: T)(implicit eqT: Eq[T]) {
    def ===(y: T): Boolean = eqT.eqv(x, y)
  }

  import GenericInstances.*

  implicit val EqLongInstance:   Eq[Long]   = new Eq[Long]   { def eqv(x: Long, y: Long):     Boolean = x == y }
  implicit val EqDoubleInstance: Eq[Double] = new Eq[Double] { def eqv(x: Double, y: Double): Boolean = x == y }
  implicit val EqIntInstance:    Eq[Int]    = new Eq[Int]    { def eqv(x: Int, y: Int):       Boolean = x == y }
  implicit val EqStringInstance: Eq[String] = new Eq[String] { def eqv(x: String, y: String): Boolean = x == y }

  implicitly[Eq[Dog]]
  implicitly[Eq[Cat]]
  implicitly[Eq[IDAABBS]]
}
-----
ScalaFile
  ScTrait: AABB
    PsiComment(comment)('// deriving/src/main/scala/by-name-implicit-test.scala.scala')
    PsiWhiteSpace('\n')
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(sealed)('sealed')
    PsiWhiteSpace(' ')
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('AABB')
    ExtendsBlock
      <empty list>
  PsiWhiteSpace('\n')
  ScClass: AA
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(case)('case')
    PsiWhiteSpace(' ')
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('AA')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        ParametersClause
          PsiElement(()('(')
          ClassParameter: a
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(identifier)('a')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            ParameterType
              SimpleType: String
                CodeReferenceElement: String
                  PsiElement(identifier)('String')
          PsiElement())(')')
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          SimpleType: AABB
            CodeReferenceElement: AABB
              PsiElement(identifier)('AABB')
  PsiWhiteSpace('\n')
  ScClass: BB
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(case)('case')
    PsiWhiteSpace(' ')
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('BB')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        ParametersClause
          PsiElement(()('(')
          ClassParameter: a
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(identifier)('a')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            ParameterType
              SimpleType: String
                CodeReferenceElement: String
                  PsiElement(identifier)('String')
          PsiElement())(')')
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          SimpleType: AABB
            CodeReferenceElement: AABB
              PsiElement(identifier)('AABB')
  PsiWhiteSpace('\n')
  ScClass: DAABB
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(case)('case')
    PsiWhiteSpace(' ')
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('DAABB')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        ParametersClause
          PsiElement(()('(')
          ClassParameter: d
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(identifier)('d')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            ParameterType
              SimpleType: Double
                CodeReferenceElement: Double
                  PsiElement(identifier)('Double')
          PsiElement(,)(',')
          PsiWhiteSpace(' ')
          ClassParameter: aabb
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(identifier)('aabb')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            ParameterType
              SimpleType: AABB
                CodeReferenceElement: AABB
                  PsiElement(identifier)('AABB')
          PsiElement())(')')
    ExtendsBlock
      <empty list>
  PsiWhiteSpace('\n')
  ScClass: IDAABBS
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(case)('case')
    PsiWhiteSpace(' ')
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('IDAABBS')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        ParametersClause
          PsiElement(()('(')
          ClassParameter: i
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(identifier)('i')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            ParameterType
              SimpleType: Int
                CodeReferenceElement: Int
                  PsiElement(identifier)('Int')
          PsiElement(,)(',')
          PsiWhiteSpace(' ')
          ClassParameter: daabb
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(identifier)('daabb')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            ParameterType
              SimpleType: DAABB
                CodeReferenceElement: DAABB
                  PsiElement(identifier)('DAABB')
          PsiElement(,)(',')
          PsiWhiteSpace(' ')
          ClassParameter: s
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(identifier)('s')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            ParameterType
              SimpleType: String
                CodeReferenceElement: String
                  PsiElement(identifier)('String')
          PsiElement())(')')
    ExtendsBlock
      <empty list>
  PsiWhiteSpace('\n\n')
  ScClass: Dog
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(case)('case')
    PsiWhiteSpace(' ')
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Dog')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        ParametersClause
          PsiElement(()('(')
          ClassParameter: age
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(identifier)('age')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            ParameterType
              SimpleType: Long
                CodeReferenceElement: Long
                  PsiElement(identifier)('Long')
          PsiElement())(')')
    ExtendsBlock
      <empty list>
  PsiWhiteSpace('\n')
  ScClass: Cat
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(case)('case')
    PsiWhiteSpace(' ')
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Cat')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        ParametersClause
          PsiElement(()('(')
          ClassParameter: name
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(identifier)('name')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            ParameterType
              SimpleType: String
                CodeReferenceElement: String
                  PsiElement(identifier)('String')
          PsiElement(,)(',')
          PsiWhiteSpace(' ')
          ClassParameter: friend
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(identifier)('friend')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            ParameterType
              ParametrizedType: Either[Cat, Dog]
                SimpleType: Either
                  CodeReferenceElement: Either
                    PsiElement(identifier)('Either')
                TypeArgumentsList
                  PsiElement([)('[')
                  SimpleType: Cat
                    CodeReferenceElement: Cat
                      PsiElement(identifier)('Cat')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  SimpleType: Dog
                    CodeReferenceElement: Dog
                      PsiElement(identifier)('Dog')
                  PsiElement(])(']')
          PsiElement())(')')
    ExtendsBlock
      <empty list>
  PsiWhiteSpace('\n\n')
  PsiComment(comment)('// Definitions from Shapeless +')
  PsiWhiteSpace('\n\n')
  ScTrait: HList
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(sealed)('sealed')
    PsiWhiteSpace(' ')
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('HList')
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          SimpleType: Product
            CodeReferenceElement: Product
              PsiElement(identifier)('Product')
        PsiWhiteSpace(' ')
        PsiElement(with)('with')
        PsiWhiteSpace(' ')
        ConstructorInvocation
          SimpleType: Serializable
            CodeReferenceElement: Serializable
              PsiElement(identifier)('Serializable')
  PsiWhiteSpace('\n')
  ScClass: ::
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(final)('final')
      PsiWhiteSpace(' ')
      PsiElement(case)('case')
    PsiWhiteSpace(' ')
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('::')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: H
        PsiElement(identifier)('+')
        PsiElement(identifier)('H')
      PsiElement(,)(',')
      PsiWhiteSpace(' ')
      TypeParameter: T
        PsiElement(identifier)('+')
        PsiElement(identifier)('T')
        PsiWhiteSpace(' ')
        PsiElement(<:)('<:')
        PsiWhiteSpace(' ')
        SimpleType: HList
          CodeReferenceElement: HList
            PsiElement(identifier)('HList')
      PsiElement(])(']')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        ParametersClause
          PsiElement(()('(')
          ClassParameter: head
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(identifier)('head')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            ParameterType
              SimpleType: H
                CodeReferenceElement: H
                  PsiElement(identifier)('H')
          PsiElement(,)(',')
          PsiWhiteSpace(' ')
          ClassParameter: tail
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(identifier)('tail')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            ParameterType
              SimpleType: T
                CodeReferenceElement: T
                  PsiElement(identifier)('T')
          PsiElement())(')')
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          SimpleType: HList
            CodeReferenceElement: HList
              PsiElement(identifier)('HList')
  PsiWhiteSpace('\n')
  ScTrait: HNil
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(sealed)('sealed')
    PsiWhiteSpace(' ')
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('HNil')
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          SimpleType: HList
            CodeReferenceElement: HList
              PsiElement(identifier)('HList')
  PsiWhiteSpace('\n')
  ScObject: HNil
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(case)('case')
    PsiWhiteSpace(' ')
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('HNil')
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          SimpleType: HNil
            CodeReferenceElement: HNil
              PsiElement(identifier)('HNil')
  PsiWhiteSpace('\n\n')
  ScTrait: Coproduct
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(sealed)('sealed')
    PsiWhiteSpace(' ')
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Coproduct')
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          SimpleType: Product
            CodeReferenceElement: Product
              PsiElement(identifier)('Product')
        PsiWhiteSpace(' ')
        PsiElement(with)('with')
        PsiWhiteSpace(' ')
        ConstructorInvocation
          SimpleType: Serializable
            CodeReferenceElement: Serializable
              PsiElement(identifier)('Serializable')
  PsiWhiteSpace('\n')
  ScTrait: :+:
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(sealed)('sealed')
    PsiWhiteSpace(' ')
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)(':+:')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: H
        PsiElement(identifier)('+')
        PsiElement(identifier)('H')
      PsiElement(,)(',')
      PsiWhiteSpace(' ')
      TypeParameter: T
        PsiElement(identifier)('+')
        PsiElement(identifier)('T')
        PsiWhiteSpace(' ')
        PsiElement(<:)('<:')
        PsiWhiteSpace(' ')
        SimpleType: Coproduct
          CodeReferenceElement: Coproduct
            PsiElement(identifier)('Coproduct')
      PsiElement(])(']')
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          SimpleType: Coproduct
            CodeReferenceElement: Coproduct
              PsiElement(identifier)('Coproduct')
  PsiWhiteSpace('\n')
  ScClass: Inl
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(final)('final')
      PsiWhiteSpace(' ')
      PsiElement(case)('case')
    PsiWhiteSpace(' ')
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Inl')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: H
        PsiElement(identifier)('+')
        PsiElement(identifier)('H')
      PsiElement(,)(',')
      PsiWhiteSpace(' ')
      TypeParameter: T
        PsiElement(identifier)('+')
        PsiElement(identifier)('T')
        PsiWhiteSpace(' ')
        PsiElement(<:)('<:')
        PsiWhiteSpace(' ')
        SimpleType: Coproduct
          CodeReferenceElement: Coproduct
            PsiElement(identifier)('Coproduct')
      PsiElement(])(']')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        ParametersClause
          PsiElement(()('(')
          ClassParameter: head
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(identifier)('head')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            ParameterType
              SimpleType: H
                CodeReferenceElement: H
                  PsiElement(identifier)('H')
          PsiElement())(')')
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          ParametrizedType: :+:[H, T]
            SimpleType: :+:
              CodeReferenceElement: :+:
                PsiElement(identifier)(':+:')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: H
                CodeReferenceElement: H
                  PsiElement(identifier)('H')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              SimpleType: T
                CodeReferenceElement: T
                  PsiElement(identifier)('T')
              PsiElement(])(']')
  PsiWhiteSpace('\n')
  ScClass: Inr
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(final)('final')
      PsiWhiteSpace(' ')
      PsiElement(case)('case')
    PsiWhiteSpace(' ')
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Inr')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: H
        PsiElement(identifier)('+')
        PsiElement(identifier)('H')
      PsiElement(,)(',')
      PsiWhiteSpace(' ')
      TypeParameter: T
        PsiElement(identifier)('+')
        PsiElement(identifier)('T')
        PsiWhiteSpace(' ')
        PsiElement(<:)('<:')
        PsiWhiteSpace(' ')
        SimpleType: Coproduct
          CodeReferenceElement: Coproduct
            PsiElement(identifier)('Coproduct')
      PsiElement(])(']')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        ParametersClause
          PsiElement(()('(')
          ClassParameter: tail
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(identifier)('tail')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            ParameterType
              SimpleType: T
                CodeReferenceElement: T
                  PsiElement(identifier)('T')
          PsiElement())(')')
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          ParametrizedType: :+:[H, T]
            SimpleType: :+:
              CodeReferenceElement: :+:
                PsiElement(identifier)(':+:')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: H
                CodeReferenceElement: H
                  PsiElement(identifier)('H')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              SimpleType: T
                CodeReferenceElement: T
                  PsiElement(identifier)('T')
              PsiElement(])(']')
  PsiWhiteSpace('\n')
  ScTrait: CNil
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(sealed)('sealed')
    PsiWhiteSpace(' ')
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('CNil')
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          SimpleType: Coproduct
            CodeReferenceElement: Coproduct
              PsiElement(identifier)('Coproduct')
  PsiWhiteSpace('\n\n')
  ScTrait: Generic
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Generic')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: T
        PsiElement(identifier)('T')
      PsiElement(])(']')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScTypeAliasDeclaration: Repr
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Repr')
        PsiWhiteSpace('\n  ')
        ScFunctionDeclaration: to
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('to')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: t
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('t')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: T
                    CodeReferenceElement: T
                      PsiElement(identifier)('T')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Repr
            CodeReferenceElement: Repr
              PsiElement(identifier)('Repr')
        PsiWhiteSpace('\n  ')
        ScFunctionDeclaration: from
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('from')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: r
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('r')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Repr
                    CodeReferenceElement: Repr
                      PsiElement(identifier)('Repr')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: T
            CodeReferenceElement: T
              PsiElement(identifier)('T')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  PsiComment(comment)('// Manual Generic macro expansions +')
  PsiWhiteSpace('\n\n')
  ScObject: GenericInstances
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('GenericInstances')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: genAABB
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(implicit)('implicit')
          PsiWhiteSpace(' ')
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: genAABB
              PsiElement(identifier)('genAABB')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          CompoundType: Generic[AABB] { type Repr = AA :+: BB :+: CNil }
            ParametrizedType: Generic[AABB]
              SimpleType: Generic
                CodeReferenceElement: Generic
                  PsiElement(identifier)('Generic')
              TypeArgumentsList
                PsiElement([)('[')
                SimpleType: AABB
                  CodeReferenceElement: AABB
                    PsiElement(identifier)('AABB')
                PsiElement(])(']')
            PsiWhiteSpace(' ')
            Refinement
              PsiElement({)('{')
              PsiWhiteSpace(' ')
              ScTypeAliasDefinition: Repr
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(type)('type')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('Repr')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                InfixType: AA :+: BB :+: CNil
                  SimpleType: AA
                    CodeReferenceElement: AA
                      PsiElement(identifier)('AA')
                  PsiWhiteSpace(' ')
                  CodeReferenceElement: :+:
                    PsiElement(identifier)(':+:')
                  PsiWhiteSpace(' ')
                  InfixType: BB :+: CNil
                    SimpleType: BB
                      CodeReferenceElement: BB
                        PsiElement(identifier)('BB')
                    PsiWhiteSpace(' ')
                    CodeReferenceElement: :+:
                      PsiElement(identifier)(':+:')
                    PsiWhiteSpace(' ')
                    SimpleType: CNil
                      CodeReferenceElement: CNil
                        PsiElement(identifier)('CNil')
              PsiWhiteSpace(' ')
              PsiElement(})('}')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace('\n    ')
          ScNewTemplateDefinition: <anonymous>
            PsiElement(new)('new')
            PsiWhiteSpace(' ')
            ExtendsBlock
              TemplateParents
                ConstructorInvocation
                  ParametrizedType: Generic[AABB]
                    SimpleType: Generic
                      CodeReferenceElement: Generic
                        PsiElement(identifier)('Generic')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: AABB
                        CodeReferenceElement: AABB
                          PsiElement(identifier)('AABB')
                      PsiElement(])(']')
              PsiWhiteSpace(' ')
              ScTemplateBody
                PsiElement({)('{')
                PsiWhiteSpace('\n      ')
                ScTypeAliasDefinition: Repr
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(type)('type')
                  PsiWhiteSpace(' ')
                  PsiElement(identifier)('Repr')
                  PsiWhiteSpace(' ')
                  PsiElement(=)('=')
                  PsiWhiteSpace(' ')
                  InfixType: AA :+: BB :+: CNil
                    SimpleType: AA
                      CodeReferenceElement: AA
                        PsiElement(identifier)('AA')
                    PsiWhiteSpace(' ')
                    CodeReferenceElement: :+:
                      PsiElement(identifier)(':+:')
                    PsiWhiteSpace(' ')
                    InfixType: BB :+: CNil
                      SimpleType: BB
                        CodeReferenceElement: BB
                          PsiElement(identifier)('BB')
                      PsiWhiteSpace(' ')
                      CodeReferenceElement: :+:
                        PsiElement(identifier)(':+:')
                      PsiWhiteSpace(' ')
                      SimpleType: CNil
                        CodeReferenceElement: CNil
                          PsiElement(identifier)('CNil')
                PsiWhiteSpace('\n      ')
                ScFunctionDefinition: to
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(def)('def')
                  PsiWhiteSpace(' ')
                  PsiElement(identifier)('to')
                  Parameters
                    ParametersClause
                      PsiElement(()('(')
                      Parameter: t
                        AnnotationsList
                          <empty list>
                        Modifiers
                          <empty list>
                        PsiElement(identifier)('t')
                        PsiElement(:)(':')
                        PsiWhiteSpace(' ')
                        ParameterType
                          SimpleType: AABB
                            CodeReferenceElement: AABB
                              PsiElement(identifier)('AABB')
                      PsiElement())(')')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  SimpleType: Repr
                    CodeReferenceElement: Repr
                      PsiElement(identifier)('Repr')
                  PsiWhiteSpace(' ')
                  PsiElement(=)('=')
                  PsiWhiteSpace(' ')
                  MatchStatement
                    ReferenceExpression: t
                      PsiElement(identifier)('t')
                    PsiWhiteSpace(' ')
                    PsiElement(match)('match')
                    PsiWhiteSpace(' ')
                    PsiElement({)('{')
                    PsiWhiteSpace('\n        ')
                    CaseClauses
                      CaseClause
                        PsiElement(case)('case')
                        PsiWhiteSpace(' ')
                        Scala3 TypedPattern
                          ReferencePattern: x
                            PsiElement(identifier)('x')
                          PsiElement(:)(':')
                          PsiWhiteSpace(' ')
                          TypePattern
                            SimpleType: AA
                              CodeReferenceElement: AA
                                PsiElement(identifier)('AA')
                        PsiWhiteSpace(' ')
                        PsiElement(=>)('=>')
                        PsiWhiteSpace(' ')
                        BlockOfExpressions
                          MethodCall
                            ReferenceExpression: Inl
                              PsiElement(identifier)('Inl')
                            ArgumentList
                              PsiElement(()('(')
                              ReferenceExpression: x
                                PsiElement(identifier)('x')
                              PsiElement())(')')
                      PsiWhiteSpace('\n        ')
                      CaseClause
                        PsiElement(case)('case')
                        PsiWhiteSpace(' ')
                        Scala3 TypedPattern
                          ReferencePattern: x
                            PsiElement(identifier)('x')
                          PsiElement(:)(':')
                          PsiWhiteSpace(' ')
                          TypePattern
                            SimpleType: BB
                              CodeReferenceElement: BB
                                PsiElement(identifier)('BB')
                        PsiWhiteSpace(' ')
                        PsiElement(=>)('=>')
                        PsiWhiteSpace(' ')
                        BlockOfExpressions
                          MethodCall
                            ReferenceExpression: Inr
                              PsiElement(identifier)('Inr')
                            ArgumentList
                              PsiElement(()('(')
                              MethodCall
                                ReferenceExpression: Inl
                                  PsiElement(identifier)('Inl')
                                ArgumentList
                                  PsiElement(()('(')
                                  ReferenceExpression: x
                                    PsiElement(identifier)('x')
                                  PsiElement())(')')
                              PsiElement())(')')
                    PsiWhiteSpace('\n      ')
                    PsiElement(})('}')
                PsiWhiteSpace('\n      ')
                ScFunctionDefinition: from
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(def)('def')
                  PsiWhiteSpace(' ')
                  PsiElement(identifier)('from')
                  Parameters
                    ParametersClause
                      PsiElement(()('(')
                      Parameter: r
                        AnnotationsList
                          <empty list>
                        Modifiers
                          <empty list>
                        PsiElement(identifier)('r')
                        PsiElement(:)(':')
                        PsiWhiteSpace(' ')
                        ParameterType
                          SimpleType: Repr
                            CodeReferenceElement: Repr
                              PsiElement(identifier)('Repr')
                      PsiElement())(')')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  SimpleType: AABB
                    CodeReferenceElement: AABB
                      PsiElement(identifier)('AABB')
                  PsiWhiteSpace(' ')
                  PsiElement(=)('=')
                  PsiWhiteSpace(' ')
                  MatchStatement
                    ReferenceExpression: r
                      PsiElement(identifier)('r')
                    PsiWhiteSpace(' ')
                    PsiElement(match)('match')
                    PsiWhiteSpace(' ')
                    PsiElement({)('{')
                    PsiWhiteSpace('\n        ')
                    CaseClauses
                      CaseClause
                        PsiElement(case)('case')
                        PsiWhiteSpace(' ')
                        ConstructorPattern
                          CodeReferenceElement: Inl
                            PsiElement(identifier)('Inl')
                          Pattern Argument List
                            PsiElement(()('(')
                            ReferencePattern: x
                              PsiElement(identifier)('x')
                            PsiElement())(')')
                        PsiWhiteSpace(' ')
                        PsiElement(=>)('=>')
                        PsiWhiteSpace(' ')
                        BlockOfExpressions
                          ReferenceExpression: x
                            PsiElement(identifier)('x')
                      PsiWhiteSpace('\n        ')
                      CaseClause
                        PsiElement(case)('case')
                        PsiWhiteSpace(' ')
                        ConstructorPattern
                          CodeReferenceElement: Inr
                            PsiElement(identifier)('Inr')
                          Pattern Argument List
                            PsiElement(()('(')
                            ConstructorPattern
                              CodeReferenceElement: Inl
                                PsiElement(identifier)('Inl')
                              Pattern Argument List
                                PsiElement(()('(')
                                ReferencePattern: x
                                  PsiElement(identifier)('x')
                                PsiElement())(')')
                            PsiElement())(')')
                        PsiWhiteSpace(' ')
                        PsiElement(=>)('=>')
                        PsiWhiteSpace(' ')
                        BlockOfExpressions
                          ReferenceExpression: x
                            PsiElement(identifier)('x')
                      PsiWhiteSpace('\n        ')
                      CaseClause
                        PsiElement(case)('case')
                        PsiWhiteSpace(' ')
                        WildcardPattern
                          PsiElement(_)('_')
                        PsiWhiteSpace(' ')
                        PsiElement(=>)('=>')
                        PsiWhiteSpace(' ')
                        BlockOfExpressions
                          ReferenceExpression: ???
                            PsiElement(identifier)('???')
                    PsiWhiteSpace('\n      ')
                    PsiElement(})('}')
                PsiWhiteSpace('\n    ')
                PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        ScPatternDefinition: genAA
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(implicit)('implicit')
          PsiWhiteSpace(' ')
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: genAA
              PsiElement(identifier)('genAA')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          CompoundType: Generic[AA] { type Repr = String :: HNil }
            ParametrizedType: Generic[AA]
              SimpleType: Generic
                CodeReferenceElement: Generic
                  PsiElement(identifier)('Generic')
              TypeArgumentsList
                PsiElement([)('[')
                SimpleType: AA
                  CodeReferenceElement: AA
                    PsiElement(identifier)('AA')
                PsiElement(])(']')
            PsiWhiteSpace(' ')
            Refinement
              PsiElement({)('{')
              PsiWhiteSpace(' ')
              ScTypeAliasDefinition: Repr
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(type)('type')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('Repr')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                InfixType: String :: HNil
                  SimpleType: String
                    CodeReferenceElement: String
                      PsiElement(identifier)('String')
                  PsiWhiteSpace(' ')
                  CodeReferenceElement: ::
                    PsiElement(identifier)('::')
                  PsiWhiteSpace(' ')
                  SimpleType: HNil
                    CodeReferenceElement: HNil
                      PsiElement(identifier)('HNil')
              PsiWhiteSpace(' ')
              PsiElement(})('}')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace('\n    ')
          ScNewTemplateDefinition: <anonymous>
            PsiElement(new)('new')
            PsiWhiteSpace(' ')
            ExtendsBlock
              TemplateParents
                ConstructorInvocation
                  ParametrizedType: Generic[AA]
                    SimpleType: Generic
                      CodeReferenceElement: Generic
                        PsiElement(identifier)('Generic')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: AA
                        CodeReferenceElement: AA
                          PsiElement(identifier)('AA')
                      PsiElement(])(']')
              PsiWhiteSpace(' ')
              ScTemplateBody
                PsiElement({)('{')
                PsiWhiteSpace('\n      ')
                ScTypeAliasDefinition: Repr
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(type)('type')
                  PsiWhiteSpace(' ')
                  PsiElement(identifier)('Repr')
                  PsiWhiteSpace(' ')
                  PsiElement(=)('=')
                  PsiWhiteSpace(' ')
                  InfixType: String :: HNil
                    SimpleType: String
                      CodeReferenceElement: String
                        PsiElement(identifier)('String')
                    PsiWhiteSpace(' ')
                    CodeReferenceElement: ::
                      PsiElement(identifier)('::')
                    PsiWhiteSpace(' ')
                    SimpleType: HNil
                      CodeReferenceElement: HNil
                        PsiElement(identifier)('HNil')
                PsiWhiteSpace('\n      ')
                ScFunctionDefinition: to
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(def)('def')
                  PsiWhiteSpace(' ')
                  PsiElement(identifier)('to')
                  Parameters
                    ParametersClause
                      PsiElement(()('(')
                      Parameter: t
                        AnnotationsList
                          <empty list>
                        Modifiers
                          <empty list>
                        PsiElement(identifier)('t')
                        PsiElement(:)(':')
                        PsiWhiteSpace(' ')
                        ParameterType
                          SimpleType: AA
                            CodeReferenceElement: AA
                              PsiElement(identifier)('AA')
                      PsiElement())(')')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  SimpleType: Repr
                    CodeReferenceElement: Repr
                      PsiElement(identifier)('Repr')
                  PsiWhiteSpace(' ')
                  PsiElement(=)('=')
                  PsiWhiteSpace(' ')
                  MatchStatement
                    ReferenceExpression: t
                      PsiElement(identifier)('t')
                    PsiWhiteSpace(' ')
                    PsiElement(match)('match')
                    PsiWhiteSpace(' ')
                    PsiElement({)('{')
                    PsiWhiteSpace(' ')
                    CaseClauses
                      CaseClause
                        PsiElement(case)('case')
                        PsiWhiteSpace(' ')
                        ConstructorPattern
                          CodeReferenceElement: AA
                            PsiElement(identifier)('AA')
                          Pattern Argument List
                            PsiElement(()('(')
                            ReferencePattern: x
                              PsiElement(identifier)('x')
                            PsiElement())(')')
                        PsiWhiteSpace(' ')
                        PsiElement(=>)('=>')
                        PsiWhiteSpace(' ')
                        BlockOfExpressions
                          MethodCall
                            ReferenceExpression: ::
                              PsiElement(identifier)('::')
                            ArgumentList
                              PsiElement(()('(')
                              ReferenceExpression: x
                                PsiElement(identifier)('x')
                              PsiElement(,)(',')
                              PsiWhiteSpace(' ')
                              ReferenceExpression: HNil
                                PsiElement(identifier)('HNil')
                              PsiElement())(')')
                    PsiWhiteSpace(' ')
                    PsiElement(})('}')
                PsiWhiteSpace('\n      ')
                ScFunctionDefinition: from
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(def)('def')
                  PsiWhiteSpace(' ')
                  PsiElement(identifier)('from')
                  Parameters
                    ParametersClause
                      PsiElement(()('(')
                      Parameter: r
                        AnnotationsList
                          <empty list>
                        Modifiers
                          <empty list>
                        PsiElement(identifier)('r')
                        PsiElement(:)(':')
                        PsiWhiteSpace(' ')
                        ParameterType
                          SimpleType: Repr
                            CodeReferenceElement: Repr
                              PsiElement(identifier)('Repr')
                      PsiElement())(')')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  SimpleType: AA
                    CodeReferenceElement: AA
                      PsiElement(identifier)('AA')
                  PsiWhiteSpace(' ')
                  PsiElement(=)('=')
                  PsiWhiteSpace(' ')
                  MatchStatement
                    ReferenceExpression: r
                      PsiElement(identifier)('r')
                    PsiWhiteSpace(' ')
                    PsiElement(match)('match')
                    PsiWhiteSpace(' ')
                    PsiElement({)('{')
                    PsiWhiteSpace(' ')
                    CaseClauses
                      CaseClause
                        PsiElement(case)('case')
                        PsiWhiteSpace(' ')
                        ConstructorPattern
                          CodeReferenceElement: ::
                            PsiElement(identifier)('::')
                          Pattern Argument List
                            PsiElement(()('(')
                            ReferencePattern: x
                              PsiElement(identifier)('x')
                            PsiElement(,)(',')
                            PsiWhiteSpace(' ')
                            StableElementPattern
                              ReferenceExpression: HNil
                                PsiElement(identifier)('HNil')
                            PsiElement())(')')
                        PsiWhiteSpace(' ')
                        PsiElement(=>)('=>')
                        PsiWhiteSpace(' ')
                        BlockOfExpressions
                          MethodCall
                            ReferenceExpression: AA
                              PsiElement(identifier)('AA')
                            ArgumentList
                              PsiElement(()('(')
                              ReferenceExpression: x
                                PsiElement(identifier)('x')
                              PsiElement())(')')
                    PsiWhiteSpace(' ')
                    PsiElement(})('}')
                PsiWhiteSpace('\n    ')
                PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        ScPatternDefinition: genBB
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(implicit)('implicit')
          PsiWhiteSpace(' ')
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: genBB
              PsiElement(identifier)('genBB')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          CompoundType: Generic[BB] { type Repr = String :: HNil }
            ParametrizedType: Generic[BB]
              SimpleType: Generic
                CodeReferenceElement: Generic
                  PsiElement(identifier)('Generic')
              TypeArgumentsList
                PsiElement([)('[')
                SimpleType: BB
                  CodeReferenceElement: BB
                    PsiElement(identifier)('BB')
                PsiElement(])(']')
            PsiWhiteSpace(' ')
            Refinement
              PsiElement({)('{')
              PsiWhiteSpace(' ')
              ScTypeAliasDefinition: Repr
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(type)('type')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('Repr')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                InfixType: String :: HNil
                  SimpleType: String
                    CodeReferenceElement: String
                      PsiElement(identifier)('String')
                  PsiWhiteSpace(' ')
                  CodeReferenceElement: ::
                    PsiElement(identifier)('::')
                  PsiWhiteSpace(' ')
                  SimpleType: HNil
                    CodeReferenceElement: HNil
                      PsiElement(identifier)('HNil')
              PsiWhiteSpace(' ')
              PsiElement(})('}')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace('\n    ')
          ScNewTemplateDefinition: <anonymous>
            PsiElement(new)('new')
            PsiWhiteSpace(' ')
            ExtendsBlock
              TemplateParents
                ConstructorInvocation
                  ParametrizedType: Generic[BB]
                    SimpleType: Generic
                      CodeReferenceElement: Generic
                        PsiElement(identifier)('Generic')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: BB
                        CodeReferenceElement: BB
                          PsiElement(identifier)('BB')
                      PsiElement(])(']')
              PsiWhiteSpace(' ')
              ScTemplateBody
                PsiElement({)('{')
                PsiWhiteSpace('\n      ')
                ScTypeAliasDefinition: Repr
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(type)('type')
                  PsiWhiteSpace(' ')
                  PsiElement(identifier)('Repr')
                  PsiWhiteSpace(' ')
                  PsiElement(=)('=')
                  PsiWhiteSpace(' ')
                  InfixType: String :: HNil
                    SimpleType: String
                      CodeReferenceElement: String
                        PsiElement(identifier)('String')
                    PsiWhiteSpace(' ')
                    CodeReferenceElement: ::
                      PsiElement(identifier)('::')
                    PsiWhiteSpace(' ')
                    SimpleType: HNil
                      CodeReferenceElement: HNil
                        PsiElement(identifier)('HNil')
                PsiWhiteSpace('\n      ')
                ScFunctionDefinition: to
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(def)('def')
                  PsiWhiteSpace(' ')
                  PsiElement(identifier)('to')
                  Parameters
                    ParametersClause
                      PsiElement(()('(')
                      Parameter: t
                        AnnotationsList
                          <empty list>
                        Modifiers
                          <empty list>
                        PsiElement(identifier)('t')
                        PsiElement(:)(':')
                        PsiWhiteSpace(' ')
                        ParameterType
                          SimpleType: BB
                            CodeReferenceElement: BB
                              PsiElement(identifier)('BB')
                      PsiElement())(')')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  SimpleType: Repr
                    CodeReferenceElement: Repr
                      PsiElement(identifier)('Repr')
                  PsiWhiteSpace(' ')
                  PsiElement(=)('=')
                  PsiWhiteSpace(' ')
                  MatchStatement
                    ReferenceExpression: t
                      PsiElement(identifier)('t')
                    PsiWhiteSpace(' ')
                    PsiElement(match)('match')
                    PsiWhiteSpace(' ')
                    PsiElement({)('{')
                    PsiWhiteSpace(' ')
                    CaseClauses
                      CaseClause
                        PsiElement(case)('case')
                        PsiWhiteSpace(' ')
                        ConstructorPattern
                          CodeReferenceElement: BB
                            PsiElement(identifier)('BB')
                          Pattern Argument List
                            PsiElement(()('(')
                            ReferencePattern: x
                              PsiElement(identifier)('x')
                            PsiElement())(')')
                        PsiWhiteSpace(' ')
                        PsiElement(=>)('=>')
                        PsiWhiteSpace(' ')
                        BlockOfExpressions
                          MethodCall
                            ReferenceExpression: ::
                              PsiElement(identifier)('::')
                            ArgumentList
                              PsiElement(()('(')
                              ReferenceExpression: x
                                PsiElement(identifier)('x')
                              PsiElement(,)(',')
                              PsiWhiteSpace(' ')
                              ReferenceExpression: HNil
                                PsiElement(identifier)('HNil')
                              PsiElement())(')')
                    PsiWhiteSpace(' ')
                    PsiElement(})('}')
                PsiWhiteSpace('\n      ')
                ScFunctionDefinition: from
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(def)('def')
                  PsiWhiteSpace(' ')
                  PsiElement(identifier)('from')
                  Parameters
                    ParametersClause
                      PsiElement(()('(')
                      Parameter: r
                        AnnotationsList
                          <empty list>
                        Modifiers
                          <empty list>
                        PsiElement(identifier)('r')
                        PsiElement(:)(':')
                        PsiWhiteSpace(' ')
                        ParameterType
                          SimpleType: Repr
                            CodeReferenceElement: Repr
                              PsiElement(identifier)('Repr')
                      PsiElement())(')')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  SimpleType: BB
                    CodeReferenceElement: BB
                      PsiElement(identifier)('BB')
                  PsiWhiteSpace(' ')
                  PsiElement(=)('=')
                  PsiWhiteSpace(' ')
                  MatchStatement
                    ReferenceExpression: r
                      PsiElement(identifier)('r')
                    PsiWhiteSpace(' ')
                    PsiElement(match)('match')
                    PsiWhiteSpace(' ')
                    PsiElement({)('{')
                    PsiWhiteSpace(' ')
                    CaseClauses
                      CaseClause
                        PsiElement(case)('case')
                        PsiWhiteSpace(' ')
                        ConstructorPattern
                          CodeReferenceElement: ::
                            PsiElement(identifier)('::')
                          Pattern Argument List
                            PsiElement(()('(')
                            ReferencePattern: x
                              PsiElement(identifier)('x')
                            PsiElement(,)(',')
                            PsiWhiteSpace(' ')
                            StableElementPattern
                              ReferenceExpression: HNil
                                PsiElement(identifier)('HNil')
                            PsiElement())(')')
                        PsiWhiteSpace(' ')
                        PsiElement(=>)('=>')
                        PsiWhiteSpace(' ')
                        BlockOfExpressions
                          MethodCall
                            ReferenceExpression: BB
                              PsiElement(identifier)('BB')
                            ArgumentList
                              PsiElement(()('(')
                              ReferenceExpression: x
                                PsiElement(identifier)('x')
                              PsiElement())(')')
                    PsiWhiteSpace(' ')
                    PsiElement(})('}')
                PsiWhiteSpace('\n    ')
                PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        ScPatternDefinition: genDAABB
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(implicit)('implicit')
          PsiWhiteSpace(' ')
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: genDAABB
              PsiElement(identifier)('genDAABB')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          CompoundType: Generic[DAABB] { type Repr = Double :: AABB :: HNil }
            ParametrizedType: Generic[DAABB]
              SimpleType: Generic
                CodeReferenceElement: Generic
                  PsiElement(identifier)('Generic')
              TypeArgumentsList
                PsiElement([)('[')
                SimpleType: DAABB
                  CodeReferenceElement: DAABB
                    PsiElement(identifier)('DAABB')
                PsiElement(])(']')
            PsiWhiteSpace(' ')
            Refinement
              PsiElement({)('{')
              PsiWhiteSpace(' ')
              ScTypeAliasDefinition: Repr
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(type)('type')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('Repr')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                InfixType: Double :: AABB :: HNil
                  SimpleType: Double
                    CodeReferenceElement: Double
                      PsiElement(identifier)('Double')
                  PsiWhiteSpace(' ')
                  CodeReferenceElement: ::
                    PsiElement(identifier)('::')
                  PsiWhiteSpace(' ')
                  InfixType: AABB :: HNil
                    SimpleType: AABB
                      CodeReferenceElement: AABB
                        PsiElement(identifier)('AABB')
                    PsiWhiteSpace(' ')
                    CodeReferenceElement: ::
                      PsiElement(identifier)('::')
                    PsiWhiteSpace(' ')
                    SimpleType: HNil
                      CodeReferenceElement: HNil
                        PsiElement(identifier)('HNil')
              PsiWhiteSpace(' ')
              PsiElement(})('}')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace('\n    ')
          ScNewTemplateDefinition: <anonymous>
            PsiElement(new)('new')
            PsiWhiteSpace(' ')
            ExtendsBlock
              TemplateParents
                ConstructorInvocation
                  ParametrizedType: Generic[DAABB]
                    SimpleType: Generic
                      CodeReferenceElement: Generic
                        PsiElement(identifier)('Generic')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: DAABB
                        CodeReferenceElement: DAABB
                          PsiElement(identifier)('DAABB')
                      PsiElement(])(']')
              PsiWhiteSpace(' ')
              ScTemplateBody
                PsiElement({)('{')
                PsiWhiteSpace('\n      ')
                ScTypeAliasDefinition: Repr
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(type)('type')
                  PsiWhiteSpace(' ')
                  PsiElement(identifier)('Repr')
                  PsiWhiteSpace(' ')
                  PsiElement(=)('=')
                  PsiWhiteSpace(' ')
                  InfixType: Double :: AABB :: HNil
                    SimpleType: Double
                      CodeReferenceElement: Double
                        PsiElement(identifier)('Double')
                    PsiWhiteSpace(' ')
                    CodeReferenceElement: ::
                      PsiElement(identifier)('::')
                    PsiWhiteSpace(' ')
                    InfixType: AABB :: HNil
                      SimpleType: AABB
                        CodeReferenceElement: AABB
                          PsiElement(identifier)('AABB')
                      PsiWhiteSpace(' ')
                      CodeReferenceElement: ::
                        PsiElement(identifier)('::')
                      PsiWhiteSpace(' ')
                      SimpleType: HNil
                        CodeReferenceElement: HNil
                          PsiElement(identifier)('HNil')
                PsiWhiteSpace('\n      ')
                ScFunctionDefinition: to
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(def)('def')
                  PsiWhiteSpace(' ')
                  PsiElement(identifier)('to')
                  Parameters
                    ParametersClause
                      PsiElement(()('(')
                      Parameter: t
                        AnnotationsList
                          <empty list>
                        Modifiers
                          <empty list>
                        PsiElement(identifier)('t')
                        PsiElement(:)(':')
                        PsiWhiteSpace(' ')
                        ParameterType
                          SimpleType: DAABB
                            CodeReferenceElement: DAABB
                              PsiElement(identifier)('DAABB')
                      PsiElement())(')')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  SimpleType: Repr
                    CodeReferenceElement: Repr
                      PsiElement(identifier)('Repr')
                  PsiWhiteSpace(' ')
                  PsiElement(=)('=')
                  PsiWhiteSpace(' ')
                  MatchStatement
                    ReferenceExpression: t
                      PsiElement(identifier)('t')
                    PsiWhiteSpace(' ')
                    PsiElement(match)('match')
                    PsiWhiteSpace(' ')
                    PsiElement({)('{')
                    PsiWhiteSpace(' ')
                    CaseClauses
                      CaseClause
                        PsiElement(case)('case')
                        PsiWhiteSpace(' ')
                        ConstructorPattern
                          CodeReferenceElement: DAABB
                            PsiElement(identifier)('DAABB')
                          Pattern Argument List
                            PsiElement(()('(')
                            ReferencePattern: x
                              PsiElement(identifier)('x')
                            PsiElement(,)(',')
                            PsiWhiteSpace(' ')
                            ReferencePattern: y
                              PsiElement(identifier)('y')
                            PsiElement())(')')
                        PsiWhiteSpace(' ')
                        PsiElement(=>)('=>')
                        PsiWhiteSpace(' ')
                        BlockOfExpressions
                          MethodCall
                            ReferenceExpression: ::
                              PsiElement(identifier)('::')
                            ArgumentList
                              PsiElement(()('(')
                              ReferenceExpression: x
                                PsiElement(identifier)('x')
                              PsiElement(,)(',')
                              PsiWhiteSpace(' ')
                              MethodCall
                                ReferenceExpression: ::
                                  PsiElement(identifier)('::')
                                ArgumentList
                                  PsiElement(()('(')
                                  ReferenceExpression: y
                                    PsiElement(identifier)('y')
                                  PsiElement(,)(',')
                                  PsiWhiteSpace(' ')
                                  ReferenceExpression: HNil
                                    PsiElement(identifier)('HNil')
                                  PsiElement())(')')
                              PsiElement())(')')
                    PsiWhiteSpace(' ')
                    PsiElement(})('}')
                PsiWhiteSpace('\n      ')
                ScFunctionDefinition: from
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(def)('def')
                  PsiWhiteSpace(' ')
                  PsiElement(identifier)('from')
                  Parameters
                    ParametersClause
                      PsiElement(()('(')
                      Parameter: r
                        AnnotationsList
                          <empty list>
                        Modifiers
                          <empty list>
                        PsiElement(identifier)('r')
                        PsiElement(:)(':')
                        PsiWhiteSpace(' ')
                        ParameterType
                          SimpleType: Repr
                            CodeReferenceElement: Repr
                              PsiElement(identifier)('Repr')
                      PsiElement())(')')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  SimpleType: DAABB
                    CodeReferenceElement: DAABB
                      PsiElement(identifier)('DAABB')
                  PsiWhiteSpace(' ')
                  PsiElement(=)('=')
                  PsiWhiteSpace(' ')
                  MatchStatement
                    ReferenceExpression: r
                      PsiElement(identifier)('r')
                    PsiWhiteSpace(' ')
                    PsiElement(match)('match')
                    PsiWhiteSpace(' ')
                    PsiElement({)('{')
                    PsiWhiteSpace(' ')
                    CaseClauses
                      CaseClause
                        PsiElement(case)('case')
                        PsiWhiteSpace(' ')
                        ConstructorPattern
                          CodeReferenceElement: ::
                            PsiElement(identifier)('::')
                          Pattern Argument List
                            PsiElement(()('(')
                            ReferencePattern: x
                              PsiElement(identifier)('x')
                            PsiElement(,)(',')
                            PsiWhiteSpace(' ')
                            ConstructorPattern
                              CodeReferenceElement: ::
                                PsiElement(identifier)('::')
                              Pattern Argument List
                                PsiElement(()('(')
                                ReferencePattern: y
                                  PsiElement(identifier)('y')
                                PsiElement(,)(',')
                                PsiWhiteSpace(' ')
                                StableElementPattern
                                  ReferenceExpression: HNil
                                    PsiElement(identifier)('HNil')
                                PsiElement())(')')
                            PsiElement())(')')
                        PsiWhiteSpace(' ')
                        PsiElement(=>)('=>')
                        PsiWhiteSpace(' ')
                        BlockOfExpressions
                          MethodCall
                            ReferenceExpression: DAABB
                              PsiElement(identifier)('DAABB')
                            ArgumentList
                              PsiElement(()('(')
                              ReferenceExpression: x
                                PsiElement(identifier)('x')
                              PsiElement(,)(',')
                              PsiWhiteSpace(' ')
                              ReferenceExpression: y
                                PsiElement(identifier)('y')
                              PsiElement())(')')
                    PsiWhiteSpace(' ')
                    PsiElement(})('}')
                PsiWhiteSpace('\n    ')
                PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        ScPatternDefinition: genIDAABBS
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(implicit)('implicit')
          PsiWhiteSpace(' ')
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: genIDAABBS
              PsiElement(identifier)('genIDAABBS')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          CompoundType: Generic[IDAABBS] { type Repr = Int :: DAABB :: String :: HNil }
            ParametrizedType: Generic[IDAABBS]
              SimpleType: Generic
                CodeReferenceElement: Generic
                  PsiElement(identifier)('Generic')
              TypeArgumentsList
                PsiElement([)('[')
                SimpleType: IDAABBS
                  CodeReferenceElement: IDAABBS
                    PsiElement(identifier)('IDAABBS')
                PsiElement(])(']')
            PsiWhiteSpace(' ')
            Refinement
              PsiElement({)('{')
              PsiWhiteSpace(' ')
              ScTypeAliasDefinition: Repr
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(type)('type')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('Repr')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                InfixType: Int :: DAABB :: String :: HNil
                  SimpleType: Int
                    CodeReferenceElement: Int
                      PsiElement(identifier)('Int')
                  PsiWhiteSpace(' ')
                  CodeReferenceElement: ::
                    PsiElement(identifier)('::')
                  PsiWhiteSpace(' ')
                  InfixType: DAABB :: String :: HNil
                    SimpleType: DAABB
                      CodeReferenceElement: DAABB
                        PsiElement(identifier)('DAABB')
                    PsiWhiteSpace(' ')
                    CodeReferenceElement: ::
                      PsiElement(identifier)('::')
                    PsiWhiteSpace(' ')
                    InfixType: String :: HNil
                      SimpleType: String
                        CodeReferenceElement: String
                          PsiElement(identifier)('String')
                      PsiWhiteSpace(' ')
                      CodeReferenceElement: ::
                        PsiElement(identifier)('::')
                      PsiWhiteSpace(' ')
                      SimpleType: HNil
                        CodeReferenceElement: HNil
                          PsiElement(identifier)('HNil')
              PsiWhiteSpace(' ')
              PsiElement(})('}')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace('\n    ')
          ScNewTemplateDefinition: <anonymous>
            PsiElement(new)('new')
            PsiWhiteSpace(' ')
            ExtendsBlock
              TemplateParents
                ConstructorInvocation
                  ParametrizedType: Generic[IDAABBS]
                    SimpleType: Generic
                      CodeReferenceElement: Generic
                        PsiElement(identifier)('Generic')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: IDAABBS
                        CodeReferenceElement: IDAABBS
                          PsiElement(identifier)('IDAABBS')
                      PsiElement(])(']')
              PsiWhiteSpace(' ')
              ScTemplateBody
                PsiElement({)('{')
                PsiWhiteSpace('\n      ')
                ScTypeAliasDefinition: Repr
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(type)('type')
                  PsiWhiteSpace(' ')
                  PsiElement(identifier)('Repr')
                  PsiWhiteSpace(' ')
                  PsiElement(=)('=')
                  PsiWhiteSpace(' ')
                  InfixType: Int :: DAABB :: String :: HNil
                    SimpleType: Int
                      CodeReferenceElement: Int
                        PsiElement(identifier)('Int')
                    PsiWhiteSpace(' ')
                    CodeReferenceElement: ::
                      PsiElement(identifier)('::')
                    PsiWhiteSpace(' ')
                    InfixType: DAABB :: String :: HNil
                      SimpleType: DAABB
                        CodeReferenceElement: DAABB
                          PsiElement(identifier)('DAABB')
                      PsiWhiteSpace(' ')
                      CodeReferenceElement: ::
                        PsiElement(identifier)('::')
                      PsiWhiteSpace(' ')
                      InfixType: String :: HNil
                        SimpleType: String
                          CodeReferenceElement: String
                            PsiElement(identifier)('String')
                        PsiWhiteSpace(' ')
                        CodeReferenceElement: ::
                          PsiElement(identifier)('::')
                        PsiWhiteSpace(' ')
                        SimpleType: HNil
                          CodeReferenceElement: HNil
                            PsiElement(identifier)('HNil')
                PsiWhiteSpace('\n      ')
                ScFunctionDefinition: to
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(def)('def')
                  PsiWhiteSpace(' ')
                  PsiElement(identifier)('to')
                  Parameters
                    ParametersClause
                      PsiElement(()('(')
                      Parameter: t
                        AnnotationsList
                          <empty list>
                        Modifiers
                          <empty list>
                        PsiElement(identifier)('t')
                        PsiElement(:)(':')
                        PsiWhiteSpace(' ')
                        ParameterType
                          SimpleType: IDAABBS
                            CodeReferenceElement: IDAABBS
                              PsiElement(identifier)('IDAABBS')
                      PsiElement())(')')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  SimpleType: Repr
                    CodeReferenceElement: Repr
                      PsiElement(identifier)('Repr')
                  PsiWhiteSpace(' ')
                  PsiElement(=)('=')
                  PsiWhiteSpace(' ')
                  MatchStatement
                    ReferenceExpression: t
                      PsiElement(identifier)('t')
                    PsiWhiteSpace(' ')
                    PsiElement(match)('match')
                    PsiWhiteSpace(' ')
                    PsiElement({)('{')
                    PsiWhiteSpace(' ')
                    CaseClauses
                      CaseClause
                        PsiElement(case)('case')
                        PsiWhiteSpace(' ')
                        ConstructorPattern
                          CodeReferenceElement: IDAABBS
                            PsiElement(identifier)('IDAABBS')
                          Pattern Argument List
                            PsiElement(()('(')
                            ReferencePattern: x
                              PsiElement(identifier)('x')
                            PsiElement(,)(',')
                            PsiWhiteSpace(' ')
                            ReferencePattern: y
                              PsiElement(identifier)('y')
                            PsiElement(,)(',')
                            PsiWhiteSpace(' ')
                            ReferencePattern: z
                              PsiElement(identifier)('z')
                            PsiElement())(')')
                        PsiWhiteSpace(' ')
                        PsiElement(=>)('=>')
                        PsiWhiteSpace(' ')
                        BlockOfExpressions
                          MethodCall
                            ReferenceExpression: ::
                              PsiElement(identifier)('::')
                            ArgumentList
                              PsiElement(()('(')
                              ReferenceExpression: x
                                PsiElement(identifier)('x')
                              PsiElement(,)(',')
                              PsiWhiteSpace(' ')
                              MethodCall
                                ReferenceExpression: ::
                                  PsiElement(identifier)('::')
                                ArgumentList
                                  PsiElement(()('(')
                                  ReferenceExpression: y
                                    PsiElement(identifier)('y')
                                  PsiElement(,)(',')
                                  PsiWhiteSpace(' ')
                                  MethodCall
                                    ReferenceExpression: ::
                                      PsiElement(identifier)('::')
                                    ArgumentList
                                      PsiElement(()('(')
                                      ReferenceExpression: z
                                        PsiElement(identifier)('z')
                                      PsiElement(,)(',')
                                      PsiWhiteSpace(' ')
                                      ReferenceExpression: HNil
                                        PsiElement(identifier)('HNil')
                                      PsiElement())(')')
                                  PsiElement())(')')
                              PsiElement())(')')
                    PsiWhiteSpace(' ')
                    PsiElement(})('}')
                PsiWhiteSpace('\n      ')
                ScFunctionDefinition: from
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(def)('def')
                  PsiWhiteSpace(' ')
                  PsiElement(identifier)('from')
                  Parameters
                    ParametersClause
                      PsiElement(()('(')
                      Parameter: r
                        AnnotationsList
                          <empty list>
                        Modifiers
                          <empty list>
                        PsiElement(identifier)('r')
                        PsiElement(:)(':')
                        PsiWhiteSpace(' ')
                        ParameterType
                          SimpleType: Repr
                            CodeReferenceElement: Repr
                              PsiElement(identifier)('Repr')
                      PsiElement())(')')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  SimpleType: IDAABBS
                    CodeReferenceElement: IDAABBS
                      PsiElement(identifier)('IDAABBS')
                  PsiWhiteSpace(' ')
                  PsiElement(=)('=')
                  PsiWhiteSpace(' ')
                  MatchStatement
                    ReferenceExpression: r
                      PsiElement(identifier)('r')
                    PsiWhiteSpace(' ')
                    PsiElement(match)('match')
                    PsiWhiteSpace(' ')
                    PsiElement({)('{')
                    PsiWhiteSpace(' ')
                    CaseClauses
                      CaseClause
                        PsiElement(case)('case')
                        PsiWhiteSpace(' ')
                        ConstructorPattern
                          CodeReferenceElement: ::
                            PsiElement(identifier)('::')
                          Pattern Argument List
                            PsiElement(()('(')
                            ReferencePattern: x
                              PsiElement(identifier)('x')
                            PsiElement(,)(',')
                            PsiWhiteSpace(' ')
                            ConstructorPattern
                              CodeReferenceElement: ::
                                PsiElement(identifier)('::')
                              Pattern Argument List
                                PsiElement(()('(')
                                ReferencePattern: y
                                  PsiElement(identifier)('y')
                                PsiElement(,)(',')
                                PsiWhiteSpace(' ')
                                ConstructorPattern
                                  CodeReferenceElement: ::
                                    PsiElement(identifier)('::')
                                  Pattern Argument List
                                    PsiElement(()('(')
                                    ReferencePattern: z
                                      PsiElement(identifier)('z')
                                    PsiElement(,)(',')
                                    PsiWhiteSpace(' ')
                                    StableElementPattern
                                      ReferenceExpression: HNil
                                        PsiElement(identifier)('HNil')
                                    PsiElement())(')')
                                PsiElement())(')')
                            PsiElement())(')')
                        PsiWhiteSpace(' ')
                        PsiElement(=>)('=>')
                        PsiWhiteSpace(' ')
                        BlockOfExpressions
                          MethodCall
                            ReferenceExpression: IDAABBS
                              PsiElement(identifier)('IDAABBS')
                            ArgumentList
                              PsiElement(()('(')
                              ReferenceExpression: x
                                PsiElement(identifier)('x')
                              PsiElement(,)(',')
                              PsiWhiteSpace(' ')
                              ReferenceExpression: y
                                PsiElement(identifier)('y')
                              PsiElement(,)(',')
                              PsiWhiteSpace(' ')
                              ReferenceExpression: z
                                PsiElement(identifier)('z')
                              PsiElement())(')')
                    PsiWhiteSpace(' ')
                    PsiElement(})('}')
                PsiWhiteSpace('\n    ')
                PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        ScPatternDefinition: genDog
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(implicit)('implicit')
          PsiWhiteSpace(' ')
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: genDog
              PsiElement(identifier)('genDog')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          CompoundType: Generic[Dog] { type Repr = Long :: HNil }
            ParametrizedType: Generic[Dog]
              SimpleType: Generic
                CodeReferenceElement: Generic
                  PsiElement(identifier)('Generic')
              TypeArgumentsList
                PsiElement([)('[')
                SimpleType: Dog
                  CodeReferenceElement: Dog
                    PsiElement(identifier)('Dog')
                PsiElement(])(']')
            PsiWhiteSpace(' ')
            Refinement
              PsiElement({)('{')
              PsiWhiteSpace(' ')
              ScTypeAliasDefinition: Repr
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(type)('type')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('Repr')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                InfixType: Long :: HNil
                  SimpleType: Long
                    CodeReferenceElement: Long
                      PsiElement(identifier)('Long')
                  PsiWhiteSpace(' ')
                  CodeReferenceElement: ::
                    PsiElement(identifier)('::')
                  PsiWhiteSpace(' ')
                  SimpleType: HNil
                    CodeReferenceElement: HNil
                      PsiElement(identifier)('HNil')
              PsiWhiteSpace(' ')
              PsiElement(})('}')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace('\n    ')
          ScNewTemplateDefinition: <anonymous>
            PsiElement(new)('new')
            PsiWhiteSpace(' ')
            ExtendsBlock
              TemplateParents
                ConstructorInvocation
                  ParametrizedType: Generic[Dog]
                    SimpleType: Generic
                      CodeReferenceElement: Generic
                        PsiElement(identifier)('Generic')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: Dog
                        CodeReferenceElement: Dog
                          PsiElement(identifier)('Dog')
                      PsiElement(])(']')
              PsiWhiteSpace(' ')
              ScTemplateBody
                PsiElement({)('{')
                PsiWhiteSpace('\n      ')
                ScTypeAliasDefinition: Repr
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(type)('type')
                  PsiWhiteSpace(' ')
                  PsiElement(identifier)('Repr')
                  PsiWhiteSpace(' ')
                  PsiElement(=)('=')
                  PsiWhiteSpace(' ')
                  InfixType: Long :: HNil
                    SimpleType: Long
                      CodeReferenceElement: Long
                        PsiElement(identifier)('Long')
                    PsiWhiteSpace(' ')
                    CodeReferenceElement: ::
                      PsiElement(identifier)('::')
                    PsiWhiteSpace(' ')
                    SimpleType: HNil
                      CodeReferenceElement: HNil
                        PsiElement(identifier)('HNil')
                PsiWhiteSpace('\n      ')
                ScFunctionDefinition: to
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(def)('def')
                  PsiWhiteSpace(' ')
                  PsiElement(identifier)('to')
                  Parameters
                    ParametersClause
                      PsiElement(()('(')
                      Parameter: t
                        AnnotationsList
                          <empty list>
                        Modifiers
                          <empty list>
                        PsiElement(identifier)('t')
                        PsiElement(:)(':')
                        PsiWhiteSpace(' ')
                        ParameterType
                          SimpleType: Dog
                            CodeReferenceElement: Dog
                              PsiElement(identifier)('Dog')
                      PsiElement())(')')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  SimpleType: Repr
                    CodeReferenceElement: Repr
                      PsiElement(identifier)('Repr')
                  PsiWhiteSpace(' ')
                  PsiElement(=)('=')
                  PsiWhiteSpace(' ')
                  MatchStatement
                    ReferenceExpression: t
                      PsiElement(identifier)('t')
                    PsiWhiteSpace(' ')
                    PsiElement(match)('match')
                    PsiWhiteSpace(' ')
                    PsiElement({)('{')
                    PsiWhiteSpace(' ')
                    CaseClauses
                      CaseClause
                        PsiElement(case)('case')
                        PsiWhiteSpace(' ')
                        ConstructorPattern
                          CodeReferenceElement: Dog
                            PsiElement(identifier)('Dog')
                          Pattern Argument List
                            PsiElement(()('(')
                            ReferencePattern: x
                              PsiElement(identifier)('x')
                            PsiElement())(')')
                        PsiWhiteSpace(' ')
                        PsiElement(=>)('=>')
                        PsiWhiteSpace(' ')
                        BlockOfExpressions
                          MethodCall
                            ReferenceExpression: ::
                              PsiElement(identifier)('::')
                            ArgumentList
                              PsiElement(()('(')
                              ReferenceExpression: x
                                PsiElement(identifier)('x')
                              PsiElement(,)(',')
                              PsiWhiteSpace(' ')
                              ReferenceExpression: HNil
                                PsiElement(identifier)('HNil')
                              PsiElement())(')')
                    PsiWhiteSpace(' ')
                    PsiElement(})('}')
                PsiWhiteSpace('\n      ')
                ScFunctionDefinition: from
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(def)('def')
                  PsiWhiteSpace(' ')
                  PsiElement(identifier)('from')
                  Parameters
                    ParametersClause
                      PsiElement(()('(')
                      Parameter: r
                        AnnotationsList
                          <empty list>
                        Modifiers
                          <empty list>
                        PsiElement(identifier)('r')
                        PsiElement(:)(':')
                        PsiWhiteSpace(' ')
                        ParameterType
                          SimpleType: Repr
                            CodeReferenceElement: Repr
                              PsiElement(identifier)('Repr')
                      PsiElement())(')')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  SimpleType: Dog
                    CodeReferenceElement: Dog
                      PsiElement(identifier)('Dog')
                  PsiWhiteSpace(' ')
                  PsiElement(=)('=')
                  PsiWhiteSpace(' ')
                  MatchStatement
                    ReferenceExpression: r
                      PsiElement(identifier)('r')
                    PsiWhiteSpace(' ')
                    PsiElement(match)('match')
                    PsiWhiteSpace(' ')
                    PsiElement({)('{')
                    PsiWhiteSpace(' ')
                    CaseClauses
                      CaseClause
                        PsiElement(case)('case')
                        PsiWhiteSpace(' ')
                        ConstructorPattern
                          CodeReferenceElement: ::
                            PsiElement(identifier)('::')
                          Pattern Argument List
                            PsiElement(()('(')
                            ReferencePattern: x
                              PsiElement(identifier)('x')
                            PsiElement(,)(',')
                            PsiWhiteSpace(' ')
                            StableElementPattern
                              ReferenceExpression: HNil
                                PsiElement(identifier)('HNil')
                            PsiElement())(')')
                        PsiWhiteSpace(' ')
                        PsiElement(=>)('=>')
                        PsiWhiteSpace(' ')
                        BlockOfExpressions
                          MethodCall
                            ReferenceExpression: Dog
                              PsiElement(identifier)('Dog')
                            ArgumentList
                              PsiElement(()('(')
                              ReferenceExpression: x
                                PsiElement(identifier)('x')
                              PsiElement())(')')
                    PsiWhiteSpace(' ')
                    PsiElement(})('}')
                PsiWhiteSpace('\n    ')
                PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        ScPatternDefinition: genCat
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(implicit)('implicit')
          PsiWhiteSpace(' ')
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: genCat
              PsiElement(identifier)('genCat')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          CompoundType: Generic[Cat] { type Repr = String :: Either[Cat, Dog] :: HNil }
            ParametrizedType: Generic[Cat]
              SimpleType: Generic
                CodeReferenceElement: Generic
                  PsiElement(identifier)('Generic')
              TypeArgumentsList
                PsiElement([)('[')
                SimpleType: Cat
                  CodeReferenceElement: Cat
                    PsiElement(identifier)('Cat')
                PsiElement(])(']')
            PsiWhiteSpace(' ')
            Refinement
              PsiElement({)('{')
              PsiWhiteSpace(' ')
              ScTypeAliasDefinition: Repr
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(type)('type')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('Repr')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                InfixType: String :: Either[Cat, Dog] :: HNil
                  SimpleType: String
                    CodeReferenceElement: String
                      PsiElement(identifier)('String')
                  PsiWhiteSpace(' ')
                  CodeReferenceElement: ::
                    PsiElement(identifier)('::')
                  PsiWhiteSpace(' ')
                  InfixType: Either[Cat, Dog] :: HNil
                    ParametrizedType: Either[Cat, Dog]
                      SimpleType: Either
                        CodeReferenceElement: Either
                          PsiElement(identifier)('Either')
                      TypeArgumentsList
                        PsiElement([)('[')
                        SimpleType: Cat
                          CodeReferenceElement: Cat
                            PsiElement(identifier)('Cat')
                        PsiElement(,)(',')
                        PsiWhiteSpace(' ')
                        SimpleType: Dog
                          CodeReferenceElement: Dog
                            PsiElement(identifier)('Dog')
                        PsiElement(])(']')
                    PsiWhiteSpace(' ')
                    CodeReferenceElement: ::
                      PsiElement(identifier)('::')
                    PsiWhiteSpace(' ')
                    SimpleType: HNil
                      CodeReferenceElement: HNil
                        PsiElement(identifier)('HNil')
              PsiWhiteSpace(' ')
              PsiElement(})('}')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace('\n    ')
          ScNewTemplateDefinition: <anonymous>
            PsiElement(new)('new')
            PsiWhiteSpace(' ')
            ExtendsBlock
              TemplateParents
                ConstructorInvocation
                  ParametrizedType: Generic[Cat]
                    SimpleType: Generic
                      CodeReferenceElement: Generic
                        PsiElement(identifier)('Generic')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: Cat
                        CodeReferenceElement: Cat
                          PsiElement(identifier)('Cat')
                      PsiElement(])(']')
              PsiWhiteSpace(' ')
              ScTemplateBody
                PsiElement({)('{')
                PsiWhiteSpace('\n      ')
                ScTypeAliasDefinition: Repr
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(type)('type')
                  PsiWhiteSpace(' ')
                  PsiElement(identifier)('Repr')
                  PsiWhiteSpace(' ')
                  PsiElement(=)('=')
                  PsiWhiteSpace(' ')
                  InfixType: String :: Either[Cat, Dog] :: HNil
                    SimpleType: String
                      CodeReferenceElement: String
                        PsiElement(identifier)('String')
                    PsiWhiteSpace(' ')
                    CodeReferenceElement: ::
                      PsiElement(identifier)('::')
                    PsiWhiteSpace(' ')
                    InfixType: Either[Cat, Dog] :: HNil
                      ParametrizedType: Either[Cat, Dog]
                        SimpleType: Either
                          CodeReferenceElement: Either
                            PsiElement(identifier)('Either')
                        TypeArgumentsList
                          PsiElement([)('[')
                          SimpleType: Cat
                            CodeReferenceElement: Cat
                              PsiElement(identifier)('Cat')
                          PsiElement(,)(',')
                          PsiWhiteSpace(' ')
                          SimpleType: Dog
                            CodeReferenceElement: Dog
                              PsiElement(identifier)('Dog')
                          PsiElement(])(']')
                      PsiWhiteSpace(' ')
                      CodeReferenceElement: ::
                        PsiElement(identifier)('::')
                      PsiWhiteSpace(' ')
                      SimpleType: HNil
                        CodeReferenceElement: HNil
                          PsiElement(identifier)('HNil')
                PsiWhiteSpace('\n      ')
                ScFunctionDefinition: to
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(def)('def')
                  PsiWhiteSpace(' ')
                  PsiElement(identifier)('to')
                  Parameters
                    ParametersClause
                      PsiElement(()('(')
                      Parameter: t
                        AnnotationsList
                          <empty list>
                        Modifiers
                          <empty list>
                        PsiElement(identifier)('t')
                        PsiElement(:)(':')
                        PsiWhiteSpace(' ')
                        ParameterType
                          SimpleType: Cat
                            CodeReferenceElement: Cat
                              PsiElement(identifier)('Cat')
                      PsiElement())(')')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  SimpleType: Repr
                    CodeReferenceElement: Repr
                      PsiElement(identifier)('Repr')
                  PsiWhiteSpace(' ')
                  PsiElement(=)('=')
                  PsiWhiteSpace(' ')
                  MatchStatement
                    ReferenceExpression: t
                      PsiElement(identifier)('t')
                    PsiWhiteSpace(' ')
                    PsiElement(match)('match')
                    PsiWhiteSpace(' ')
                    PsiElement({)('{')
                    PsiWhiteSpace(' ')
                    CaseClauses
                      CaseClause
                        PsiElement(case)('case')
                        PsiWhiteSpace(' ')
                        ConstructorPattern
                          CodeReferenceElement: Cat
                            PsiElement(identifier)('Cat')
                          Pattern Argument List
                            PsiElement(()('(')
                            ReferencePattern: x
                              PsiElement(identifier)('x')
                            PsiElement(,)(',')
                            PsiWhiteSpace(' ')
                            ReferencePattern: y
                              PsiElement(identifier)('y')
                            PsiElement())(')')
                        PsiWhiteSpace(' ')
                        PsiElement(=>)('=>')
                        PsiWhiteSpace(' ')
                        BlockOfExpressions
                          MethodCall
                            ReferenceExpression: ::
                              PsiElement(identifier)('::')
                            ArgumentList
                              PsiElement(()('(')
                              ReferenceExpression: x
                                PsiElement(identifier)('x')
                              PsiElement(,)(',')
                              PsiWhiteSpace(' ')
                              MethodCall
                                ReferenceExpression: ::
                                  PsiElement(identifier)('::')
                                ArgumentList
                                  PsiElement(()('(')
                                  ReferenceExpression: y
                                    PsiElement(identifier)('y')
                                  PsiElement(,)(',')
                                  PsiWhiteSpace(' ')
                                  ReferenceExpression: HNil
                                    PsiElement(identifier)('HNil')
                                  PsiElement())(')')
                              PsiElement())(')')
                    PsiWhiteSpace(' ')
                    PsiElement(})('}')
                PsiWhiteSpace('\n      ')
                ScFunctionDefinition: from
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(def)('def')
                  PsiWhiteSpace(' ')
                  PsiElement(identifier)('from')
                  Parameters
                    ParametersClause
                      PsiElement(()('(')
                      Parameter: r
                        AnnotationsList
                          <empty list>
                        Modifiers
                          <empty list>
                        PsiElement(identifier)('r')
                        PsiElement(:)(':')
                        PsiWhiteSpace(' ')
                        ParameterType
                          SimpleType: Repr
                            CodeReferenceElement: Repr
                              PsiElement(identifier)('Repr')
                      PsiElement())(')')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  SimpleType: Cat
                    CodeReferenceElement: Cat
                      PsiElement(identifier)('Cat')
                  PsiWhiteSpace(' ')
                  PsiElement(=)('=')
                  PsiWhiteSpace(' ')
                  MatchStatement
                    ReferenceExpression: r
                      PsiElement(identifier)('r')
                    PsiWhiteSpace(' ')
                    PsiElement(match)('match')
                    PsiWhiteSpace(' ')
                    PsiElement({)('{')
                    PsiWhiteSpace(' ')
                    CaseClauses
                      CaseClause
                        PsiElement(case)('case')
                        PsiWhiteSpace(' ')
                        ConstructorPattern
                          CodeReferenceElement: ::
                            PsiElement(identifier)('::')
                          Pattern Argument List
                            PsiElement(()('(')
                            ReferencePattern: x
                              PsiElement(identifier)('x')
                            PsiElement(,)(',')
                            PsiWhiteSpace(' ')
                            ConstructorPattern
                              CodeReferenceElement: ::
                                PsiElement(identifier)('::')
                              Pattern Argument List
                                PsiElement(()('(')
                                ReferencePattern: y
                                  PsiElement(identifier)('y')
                                PsiElement(,)(',')
                                PsiWhiteSpace(' ')
                                StableElementPattern
                                  ReferenceExpression: HNil
                                    PsiElement(identifier)('HNil')
                                PsiElement())(')')
                            PsiElement())(')')
                        PsiWhiteSpace(' ')
                        PsiElement(=>)('=>')
                        PsiWhiteSpace(' ')
                        BlockOfExpressions
                          MethodCall
                            ReferenceExpression: Cat
                              PsiElement(identifier)('Cat')
                            ArgumentList
                              PsiElement(()('(')
                              ReferenceExpression: x
                                PsiElement(identifier)('x')
                              PsiElement(,)(',')
                              PsiWhiteSpace(' ')
                              ReferenceExpression: y
                                PsiElement(identifier)('y')
                              PsiElement())(')')
                    PsiWhiteSpace(' ')
                    PsiElement(})('}')
                PsiWhiteSpace('\n    ')
                PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: genEither
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(implicit)('implicit')
          PsiWhiteSpace(' ')
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('genEither')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: A
              PsiElement(identifier)('A')
            PsiElement(,)(',')
            PsiWhiteSpace(' ')
            TypeParameter: B
              PsiElement(identifier)('B')
            PsiElement(])(']')
          Parameters
            <empty list>
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          CompoundType: Generic[Either[A, B]] { type Repr = Left[A, B] :+: Right[A, B] :+: CNil }
            ParametrizedType: Generic[Either[A, B]]
              SimpleType: Generic
                CodeReferenceElement: Generic
                  PsiElement(identifier)('Generic')
              TypeArgumentsList
                PsiElement([)('[')
                ParametrizedType: Either[A, B]
                  SimpleType: Either
                    CodeReferenceElement: Either
                      PsiElement(identifier)('Either')
                  TypeArgumentsList
                    PsiElement([)('[')
                    SimpleType: A
                      CodeReferenceElement: A
                        PsiElement(identifier)('A')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    SimpleType: B
                      CodeReferenceElement: B
                        PsiElement(identifier)('B')
                    PsiElement(])(']')
                PsiElement(])(']')
            PsiWhiteSpace(' ')
            Refinement
              PsiElement({)('{')
              PsiWhiteSpace(' ')
              ScTypeAliasDefinition: Repr
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(type)('type')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('Repr')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                InfixType: Left[A, B] :+: Right[A, B] :+: CNil
                  ParametrizedType: Left[A, B]
                    SimpleType: Left
                      CodeReferenceElement: Left
                        PsiElement(identifier)('Left')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: A
                        CodeReferenceElement: A
                          PsiElement(identifier)('A')
                      PsiElement(,)(',')
                      PsiWhiteSpace(' ')
                      SimpleType: B
                        CodeReferenceElement: B
                          PsiElement(identifier)('B')
                      PsiElement(])(']')
                  PsiWhiteSpace(' ')
                  CodeReferenceElement: :+:
                    PsiElement(identifier)(':+:')
                  PsiWhiteSpace(' ')
                  InfixType: Right[A, B] :+: CNil
                    ParametrizedType: Right[A, B]
                      SimpleType: Right
                        CodeReferenceElement: Right
                          PsiElement(identifier)('Right')
                      TypeArgumentsList
                        PsiElement([)('[')
                        SimpleType: A
                          CodeReferenceElement: A
                            PsiElement(identifier)('A')
                        PsiElement(,)(',')
                        PsiWhiteSpace(' ')
                        SimpleType: B
                          CodeReferenceElement: B
                            PsiElement(identifier)('B')
                        PsiElement(])(']')
                    PsiWhiteSpace(' ')
                    CodeReferenceElement: :+:
                      PsiElement(identifier)(':+:')
                    PsiWhiteSpace(' ')
                    SimpleType: CNil
                      CodeReferenceElement: CNil
                        PsiElement(identifier)('CNil')
              PsiWhiteSpace(' ')
              PsiElement(})('}')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace('\n    ')
          ScNewTemplateDefinition: <anonymous>
            PsiElement(new)('new')
            PsiWhiteSpace(' ')
            ExtendsBlock
              TemplateParents
                ConstructorInvocation
                  ParametrizedType: Generic[Either[A, B]]
                    SimpleType: Generic
                      CodeReferenceElement: Generic
                        PsiElement(identifier)('Generic')
                    TypeArgumentsList
                      PsiElement([)('[')
                      ParametrizedType: Either[A, B]
                        SimpleType: Either
                          CodeReferenceElement: Either
                            PsiElement(identifier)('Either')
                        TypeArgumentsList
                          PsiElement([)('[')
                          SimpleType: A
                            CodeReferenceElement: A
                              PsiElement(identifier)('A')
                          PsiElement(,)(',')
                          PsiWhiteSpace(' ')
                          SimpleType: B
                            CodeReferenceElement: B
                              PsiElement(identifier)('B')
                          PsiElement(])(']')
                      PsiElement(])(']')
              PsiWhiteSpace(' ')
              ScTemplateBody
                PsiElement({)('{')
                PsiWhiteSpace('\n      ')
                ScTypeAliasDefinition: Repr
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(type)('type')
                  PsiWhiteSpace(' ')
                  PsiElement(identifier)('Repr')
                  PsiWhiteSpace(' ')
                  PsiElement(=)('=')
                  PsiWhiteSpace(' ')
                  InfixType: Left[A, B] :+: Right[A, B] :+: CNil
                    ParametrizedType: Left[A, B]
                      SimpleType: Left
                        CodeReferenceElement: Left
                          PsiElement(identifier)('Left')
                      TypeArgumentsList
                        PsiElement([)('[')
                        SimpleType: A
                          CodeReferenceElement: A
                            PsiElement(identifier)('A')
                        PsiElement(,)(',')
                        PsiWhiteSpace(' ')
                        SimpleType: B
                          CodeReferenceElement: B
                            PsiElement(identifier)('B')
                        PsiElement(])(']')
                    PsiWhiteSpace(' ')
                    CodeReferenceElement: :+:
                      PsiElement(identifier)(':+:')
                    PsiWhiteSpace(' ')
                    InfixType: Right[A, B] :+: CNil
                      ParametrizedType: Right[A, B]
                        SimpleType: Right
                          CodeReferenceElement: Right
                            PsiElement(identifier)('Right')
                        TypeArgumentsList
                          PsiElement([)('[')
                          SimpleType: A
                            CodeReferenceElement: A
                              PsiElement(identifier)('A')
                          PsiElement(,)(',')
                          PsiWhiteSpace(' ')
                          SimpleType: B
                            CodeReferenceElement: B
                              PsiElement(identifier)('B')
                          PsiElement(])(']')
                      PsiWhiteSpace(' ')
                      CodeReferenceElement: :+:
                        PsiElement(identifier)(':+:')
                      PsiWhiteSpace(' ')
                      SimpleType: CNil
                        CodeReferenceElement: CNil
                          PsiElement(identifier)('CNil')
                PsiWhiteSpace('\n      ')
                ScFunctionDefinition: to
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(def)('def')
                  PsiWhiteSpace(' ')
                  PsiElement(identifier)('to')
                  Parameters
                    ParametersClause
                      PsiElement(()('(')
                      Parameter: t
                        AnnotationsList
                          <empty list>
                        Modifiers
                          <empty list>
                        PsiElement(identifier)('t')
                        PsiElement(:)(':')
                        PsiWhiteSpace(' ')
                        ParameterType
                          ParametrizedType: Either[A, B]
                            SimpleType: Either
                              CodeReferenceElement: Either
                                PsiElement(identifier)('Either')
                            TypeArgumentsList
                              PsiElement([)('[')
                              SimpleType: A
                                CodeReferenceElement: A
                                  PsiElement(identifier)('A')
                              PsiElement(,)(',')
                              PsiWhiteSpace(' ')
                              SimpleType: B
                                CodeReferenceElement: B
                                  PsiElement(identifier)('B')
                              PsiElement(])(']')
                      PsiElement())(')')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  SimpleType: Repr
                    CodeReferenceElement: Repr
                      PsiElement(identifier)('Repr')
                  PsiWhiteSpace(' ')
                  PsiElement(=)('=')
                  PsiWhiteSpace(' ')
                  MatchStatement
                    ReferenceExpression: t
                      PsiElement(identifier)('t')
                    PsiWhiteSpace(' ')
                    PsiElement(match)('match')
                    PsiWhiteSpace(' ')
                    PsiElement({)('{')
                    PsiWhiteSpace('\n        ')
                    CaseClauses
                      CaseClause
                        PsiElement(case)('case')
                        PsiWhiteSpace(' ')
                        PatternInParenthesis
                          PsiElement(()('(')
                          Scala3 TypedPattern
                            ReferencePattern: x
                              PsiElement(identifier)('x')
                            PsiElement(:)(':')
                            PsiWhiteSpace(' ')
                            TypePattern
                              TypeWithAnnotation: Left[A, B]  @unchecked
                                ParametrizedType: Left[A, B]
                                  SimpleType: Left
                                    CodeReferenceElement: Left
                                      PsiElement(identifier)('Left')
                                  TypeArgumentsList
                                    PsiElement([)('[')
                                    SimpleType: A
                                      CodeReferenceElement: A
                                        PsiElement(identifier)('A')
                                    PsiElement(,)(',')
                                    PsiWhiteSpace(' ')
                                    SimpleType: B
                                      CodeReferenceElement: B
                                        PsiElement(identifier)('B')
                                    PsiElement(])(']')
                                PsiWhiteSpace('  ')
                                AnnotationsList
                                  Annotation
                                    PsiElement(@)('@')
                                    AnnotationExpression
                                      ConstructorInvocation
                                        SimpleType: unchecked
                                          CodeReferenceElement: unchecked
                                            PsiElement(identifier)('unchecked')
                          PsiElement())(')')
                        PsiWhiteSpace(' ')
                        PsiElement(=>)('=>')
                        PsiWhiteSpace(' ')
                        BlockOfExpressions
                          MethodCall
                            ReferenceExpression: Inl
                              PsiElement(identifier)('Inl')
                            ArgumentList
                              PsiElement(()('(')
                              ReferenceExpression: x
                                PsiElement(identifier)('x')
                              PsiElement())(')')
                      PsiWhiteSpace('\n        ')
                      CaseClause
                        PsiElement(case)('case')
                        PsiWhiteSpace(' ')
                        PatternInParenthesis
                          PsiElement(()('(')
                          Scala3 TypedPattern
                            ReferencePattern: x
                              PsiElement(identifier)('x')
                            PsiElement(:)(':')
                            PsiWhiteSpace(' ')
                            TypePattern
                              TypeWithAnnotation: Right[A, B] @unchecked
                                ParametrizedType: Right[A, B]
                                  SimpleType: Right
                                    CodeReferenceElement: Right
                                      PsiElement(identifier)('Right')
                                  TypeArgumentsList
                                    PsiElement([)('[')
                                    SimpleType: A
                                      CodeReferenceElement: A
                                        PsiElement(identifier)('A')
                                    PsiElement(,)(',')
                                    PsiWhiteSpace(' ')
                                    SimpleType: B
                                      CodeReferenceElement: B
                                        PsiElement(identifier)('B')
                                    PsiElement(])(']')
                                PsiWhiteSpace(' ')
                                AnnotationsList
                                  Annotation
                                    PsiElement(@)('@')
                                    AnnotationExpression
                                      ConstructorInvocation
                                        SimpleType: unchecked
                                          CodeReferenceElement: unchecked
                                            PsiElement(identifier)('unchecked')
                          PsiElement())(')')
                        PsiWhiteSpace(' ')
                        PsiElement(=>)('=>')
                        PsiWhiteSpace(' ')
                        BlockOfExpressions
                          MethodCall
                            ReferenceExpression: Inr
                              PsiElement(identifier)('Inr')
                            ArgumentList
                              PsiElement(()('(')
                              MethodCall
                                ReferenceExpression: Inl
                                  PsiElement(identifier)('Inl')
                                ArgumentList
                                  PsiElement(()('(')
                                  ReferenceExpression: x
                                    PsiElement(identifier)('x')
                                  PsiElement())(')')
                              PsiElement())(')')
                    PsiWhiteSpace('\n      ')
                    PsiElement(})('}')
                PsiWhiteSpace('\n      ')
                ScFunctionDefinition: from
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(def)('def')
                  PsiWhiteSpace(' ')
                  PsiElement(identifier)('from')
                  Parameters
                    ParametersClause
                      PsiElement(()('(')
                      Parameter: r
                        AnnotationsList
                          <empty list>
                        Modifiers
                          <empty list>
                        PsiElement(identifier)('r')
                        PsiElement(:)(':')
                        PsiWhiteSpace(' ')
                        ParameterType
                          SimpleType: Repr
                            CodeReferenceElement: Repr
                              PsiElement(identifier)('Repr')
                      PsiElement())(')')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParametrizedType: Either[A, B]
                    SimpleType: Either
                      CodeReferenceElement: Either
                        PsiElement(identifier)('Either')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: A
                        CodeReferenceElement: A
                          PsiElement(identifier)('A')
                      PsiElement(,)(',')
                      PsiWhiteSpace(' ')
                      SimpleType: B
                        CodeReferenceElement: B
                          PsiElement(identifier)('B')
                      PsiElement(])(']')
                  PsiWhiteSpace(' ')
                  PsiElement(=)('=')
                  PsiWhiteSpace(' ')
                  MatchStatement
                    ReferenceExpression: r
                      PsiElement(identifier)('r')
                    PsiWhiteSpace(' ')
                    PsiElement(match)('match')
                    PsiWhiteSpace(' ')
                    PsiElement({)('{')
                    PsiWhiteSpace('\n        ')
                    CaseClauses
                      CaseClause
                        PsiElement(case)('case')
                        PsiWhiteSpace(' ')
                        ConstructorPattern
                          CodeReferenceElement: Inl
                            PsiElement(identifier)('Inl')
                          Pattern Argument List
                            PsiElement(()('(')
                            ReferencePattern: x
                              PsiElement(identifier)('x')
                            PsiElement())(')')
                        PsiWhiteSpace(' ')
                        PsiElement(=>)('=>')
                        PsiWhiteSpace(' ')
                        BlockOfExpressions
                          ReferenceExpression: x
                            PsiElement(identifier)('x')
                      PsiWhiteSpace('\n        ')
                      CaseClause
                        PsiElement(case)('case')
                        PsiWhiteSpace(' ')
                        ConstructorPattern
                          CodeReferenceElement: Inr
                            PsiElement(identifier)('Inr')
                          Pattern Argument List
                            PsiElement(()('(')
                            ConstructorPattern
                              CodeReferenceElement: Inl
                                PsiElement(identifier)('Inl')
                              Pattern Argument List
                                PsiElement(()('(')
                                ReferencePattern: x
                                  PsiElement(identifier)('x')
                                PsiElement())(')')
                            PsiElement())(')')
                        PsiWhiteSpace(' ')
                        PsiElement(=>)('=>')
                        PsiWhiteSpace(' ')
                        BlockOfExpressions
                          ReferenceExpression: x
                            PsiElement(identifier)('x')
                      PsiWhiteSpace('\n        ')
                      CaseClause
                        PsiElement(case)('case')
                        PsiWhiteSpace(' ')
                        WildcardPattern
                          PsiElement(_)('_')
                        PsiWhiteSpace(' ')
                        PsiElement(=>)('=>')
                        PsiWhiteSpace(' ')
                        BlockOfExpressions
                          ReferenceExpression: ???
                            PsiElement(identifier)('???')
                    PsiWhiteSpace('\n      ')
                    PsiElement(})('}')
                PsiWhiteSpace('\n    ')
                PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: genLeft
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(implicit)('implicit')
          PsiWhiteSpace(' ')
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('genLeft')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: A
              PsiElement(identifier)('A')
            PsiElement(,)(',')
            PsiWhiteSpace(' ')
            TypeParameter: B
              PsiElement(identifier)('B')
            PsiElement(])(']')
          Parameters
            <empty list>
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          CompoundType: Generic[Left[A, B]] { type Repr = A :: HNil }
            ParametrizedType: Generic[Left[A, B]]
              SimpleType: Generic
                CodeReferenceElement: Generic
                  PsiElement(identifier)('Generic')
              TypeArgumentsList
                PsiElement([)('[')
                ParametrizedType: Left[A, B]
                  SimpleType: Left
                    CodeReferenceElement: Left
                      PsiElement(identifier)('Left')
                  TypeArgumentsList
                    PsiElement([)('[')
                    SimpleType: A
                      CodeReferenceElement: A
                        PsiElement(identifier)('A')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    SimpleType: B
                      CodeReferenceElement: B
                        PsiElement(identifier)('B')
                    PsiElement(])(']')
                PsiElement(])(']')
            PsiWhiteSpace(' ')
            Refinement
              PsiElement({)('{')
              PsiWhiteSpace(' ')
              ScTypeAliasDefinition: Repr
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(type)('type')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('Repr')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                InfixType: A :: HNil
                  SimpleType: A
                    CodeReferenceElement: A
                      PsiElement(identifier)('A')
                  PsiWhiteSpace(' ')
                  CodeReferenceElement: ::
                    PsiElement(identifier)('::')
                  PsiWhiteSpace(' ')
                  SimpleType: HNil
                    CodeReferenceElement: HNil
                      PsiElement(identifier)('HNil')
              PsiWhiteSpace(' ')
              PsiElement(})('}')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace('\n    ')
          ScNewTemplateDefinition: <anonymous>
            PsiElement(new)('new')
            PsiWhiteSpace(' ')
            ExtendsBlock
              TemplateParents
                ConstructorInvocation
                  ParametrizedType: Generic[Left[A, B]]
                    SimpleType: Generic
                      CodeReferenceElement: Generic
                        PsiElement(identifier)('Generic')
                    TypeArgumentsList
                      PsiElement([)('[')
                      ParametrizedType: Left[A, B]
                        SimpleType: Left
                          CodeReferenceElement: Left
                            PsiElement(identifier)('Left')
                        TypeArgumentsList
                          PsiElement([)('[')
                          SimpleType: A
                            CodeReferenceElement: A
                              PsiElement(identifier)('A')
                          PsiElement(,)(',')
                          PsiWhiteSpace(' ')
                          SimpleType: B
                            CodeReferenceElement: B
                              PsiElement(identifier)('B')
                          PsiElement(])(']')
                      PsiElement(])(']')
              PsiWhiteSpace(' ')
              ScTemplateBody
                PsiElement({)('{')
                PsiWhiteSpace('\n      ')
                ScTypeAliasDefinition: Repr
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(type)('type')
                  PsiWhiteSpace(' ')
                  PsiElement(identifier)('Repr')
                  PsiWhiteSpace(' ')
                  PsiElement(=)('=')
                  PsiWhiteSpace(' ')
                  InfixType: A :: HNil
                    SimpleType: A
                      CodeReferenceElement: A
                        PsiElement(identifier)('A')
                    PsiWhiteSpace(' ')
                    CodeReferenceElement: ::
                      PsiElement(identifier)('::')
                    PsiWhiteSpace(' ')
                    SimpleType: HNil
                      CodeReferenceElement: HNil
                        PsiElement(identifier)('HNil')
                PsiWhiteSpace('\n      ')
                ScFunctionDefinition: to
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(def)('def')
                  PsiWhiteSpace(' ')
                  PsiElement(identifier)('to')
                  Parameters
                    ParametersClause
                      PsiElement(()('(')
                      Parameter: t
                        AnnotationsList
                          <empty list>
                        Modifiers
                          <empty list>
                        PsiElement(identifier)('t')
                        PsiElement(:)(':')
                        PsiWhiteSpace(' ')
                        ParameterType
                          ParametrizedType: Left[A, B]
                            SimpleType: Left
                              CodeReferenceElement: Left
                                PsiElement(identifier)('Left')
                            TypeArgumentsList
                              PsiElement([)('[')
                              SimpleType: A
                                CodeReferenceElement: A
                                  PsiElement(identifier)('A')
                              PsiElement(,)(',')
                              PsiWhiteSpace(' ')
                              SimpleType: B
                                CodeReferenceElement: B
                                  PsiElement(identifier)('B')
                              PsiElement(])(']')
                      PsiElement())(')')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  SimpleType: Repr
                    CodeReferenceElement: Repr
                      PsiElement(identifier)('Repr')
                  PsiWhiteSpace(' ')
                  PsiElement(=)('=')
                  PsiWhiteSpace(' ')
                  MatchStatement
                    ReferenceExpression: t
                      PsiElement(identifier)('t')
                    PsiWhiteSpace(' ')
                    PsiElement(match)('match')
                    PsiWhiteSpace(' ')
                    PsiElement({)('{')
                    PsiWhiteSpace(' ')
                    CaseClauses
                      CaseClause
                        PsiElement(case)('case')
                        PsiWhiteSpace(' ')
                        ConstructorPattern
                          CodeReferenceElement: Left
                            PsiElement(identifier)('Left')
                          Pattern Argument List
                            PsiElement(()('(')
                            ReferencePattern: x
                              PsiElement(identifier)('x')
                            PsiElement())(')')
                        PsiWhiteSpace(' ')
                        PsiElement(=>)('=>')
                        PsiWhiteSpace(' ')
                        BlockOfExpressions
                          MethodCall
                            ReferenceExpression: ::
                              PsiElement(identifier)('::')
                            ArgumentList
                              PsiElement(()('(')
                              ReferenceExpression: x
                                PsiElement(identifier)('x')
                              PsiElement(,)(',')
                              PsiWhiteSpace(' ')
                              ReferenceExpression: HNil
                                PsiElement(identifier)('HNil')
                              PsiElement())(')')
                    PsiWhiteSpace(' ')
                    PsiElement(})('}')
                PsiWhiteSpace('\n      ')
                ScFunctionDefinition: from
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(def)('def')
                  PsiWhiteSpace(' ')
                  PsiElement(identifier)('from')
                  Parameters
                    ParametersClause
                      PsiElement(()('(')
                      Parameter: r
                        AnnotationsList
                          <empty list>
                        Modifiers
                          <empty list>
                        PsiElement(identifier)('r')
                        PsiElement(:)(':')
                        PsiWhiteSpace(' ')
                        ParameterType
                          SimpleType: Repr
                            CodeReferenceElement: Repr
                              PsiElement(identifier)('Repr')
                      PsiElement())(')')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParametrizedType: Left[A, B]
                    SimpleType: Left
                      CodeReferenceElement: Left
                        PsiElement(identifier)('Left')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: A
                        CodeReferenceElement: A
                          PsiElement(identifier)('A')
                      PsiElement(,)(',')
                      PsiWhiteSpace(' ')
                      SimpleType: B
                        CodeReferenceElement: B
                          PsiElement(identifier)('B')
                      PsiElement(])(']')
                  PsiWhiteSpace(' ')
                  PsiElement(=)('=')
                  PsiWhiteSpace(' ')
                  MatchStatement
                    ReferenceExpression: r
                      PsiElement(identifier)('r')
                    PsiWhiteSpace(' ')
                    PsiElement(match)('match')
                    PsiWhiteSpace(' ')
                    PsiElement({)('{')
                    PsiWhiteSpace(' ')
                    CaseClauses
                      CaseClause
                        PsiElement(case)('case')
                        PsiWhiteSpace(' ')
                        ConstructorPattern
                          CodeReferenceElement: ::
                            PsiElement(identifier)('::')
                          Pattern Argument List
                            PsiElement(()('(')
                            ReferencePattern: x
                              PsiElement(identifier)('x')
                            PsiElement(,)(',')
                            PsiWhiteSpace(' ')
                            StableElementPattern
                              ReferenceExpression: HNil
                                PsiElement(identifier)('HNil')
                            PsiElement())(')')
                        PsiWhiteSpace(' ')
                        PsiElement(=>)('=>')
                        PsiWhiteSpace(' ')
                        BlockOfExpressions
                          MethodCall
                            ReferenceExpression: Left
                              PsiElement(identifier)('Left')
                            ArgumentList
                              PsiElement(()('(')
                              ReferenceExpression: x
                                PsiElement(identifier)('x')
                              PsiElement())(')')
                    PsiWhiteSpace(' ')
                    PsiElement(})('}')
                PsiWhiteSpace('\n    ')
                PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: genRight
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(implicit)('implicit')
          PsiWhiteSpace(' ')
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('genRight')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: A
              PsiElement(identifier)('A')
            PsiElement(,)(',')
            PsiWhiteSpace(' ')
            TypeParameter: B
              PsiElement(identifier)('B')
            PsiElement(])(']')
          Parameters
            <empty list>
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          CompoundType: Generic[Right[A, B]] { type Repr = B :: HNil }
            ParametrizedType: Generic[Right[A, B]]
              SimpleType: Generic
                CodeReferenceElement: Generic
                  PsiElement(identifier)('Generic')
              TypeArgumentsList
                PsiElement([)('[')
                ParametrizedType: Right[A, B]
                  SimpleType: Right
                    CodeReferenceElement: Right
                      PsiElement(identifier)('Right')
                  TypeArgumentsList
                    PsiElement([)('[')
                    SimpleType: A
                      CodeReferenceElement: A
                        PsiElement(identifier)('A')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    SimpleType: B
                      CodeReferenceElement: B
                        PsiElement(identifier)('B')
                    PsiElement(])(']')
                PsiElement(])(']')
            PsiWhiteSpace(' ')
            Refinement
              PsiElement({)('{')
              PsiWhiteSpace(' ')
              ScTypeAliasDefinition: Repr
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(type)('type')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('Repr')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                InfixType: B :: HNil
                  SimpleType: B
                    CodeReferenceElement: B
                      PsiElement(identifier)('B')
                  PsiWhiteSpace(' ')
                  CodeReferenceElement: ::
                    PsiElement(identifier)('::')
                  PsiWhiteSpace(' ')
                  SimpleType: HNil
                    CodeReferenceElement: HNil
                      PsiElement(identifier)('HNil')
              PsiWhiteSpace(' ')
              PsiElement(})('}')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace('\n    ')
          ScNewTemplateDefinition: <anonymous>
            PsiElement(new)('new')
            PsiWhiteSpace(' ')
            ExtendsBlock
              TemplateParents
                ConstructorInvocation
                  ParametrizedType: Generic[Right[A, B]]
                    SimpleType: Generic
                      CodeReferenceElement: Generic
                        PsiElement(identifier)('Generic')
                    TypeArgumentsList
                      PsiElement([)('[')
                      ParametrizedType: Right[A, B]
                        SimpleType: Right
                          CodeReferenceElement: Right
                            PsiElement(identifier)('Right')
                        TypeArgumentsList
                          PsiElement([)('[')
                          SimpleType: A
                            CodeReferenceElement: A
                              PsiElement(identifier)('A')
                          PsiElement(,)(',')
                          PsiWhiteSpace(' ')
                          SimpleType: B
                            CodeReferenceElement: B
                              PsiElement(identifier)('B')
                          PsiElement(])(']')
                      PsiElement(])(']')
              PsiWhiteSpace(' ')
              ScTemplateBody
                PsiElement({)('{')
                PsiWhiteSpace('\n      ')
                ScTypeAliasDefinition: Repr
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(type)('type')
                  PsiWhiteSpace(' ')
                  PsiElement(identifier)('Repr')
                  PsiWhiteSpace(' ')
                  PsiElement(=)('=')
                  PsiWhiteSpace(' ')
                  InfixType: B :: HNil
                    SimpleType: B
                      CodeReferenceElement: B
                        PsiElement(identifier)('B')
                    PsiWhiteSpace(' ')
                    CodeReferenceElement: ::
                      PsiElement(identifier)('::')
                    PsiWhiteSpace(' ')
                    SimpleType: HNil
                      CodeReferenceElement: HNil
                        PsiElement(identifier)('HNil')
                PsiWhiteSpace('\n      ')
                ScFunctionDefinition: to
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(def)('def')
                  PsiWhiteSpace(' ')
                  PsiElement(identifier)('to')
                  Parameters
                    ParametersClause
                      PsiElement(()('(')
                      Parameter: t
                        AnnotationsList
                          <empty list>
                        Modifiers
                          <empty list>
                        PsiElement(identifier)('t')
                        PsiElement(:)(':')
                        PsiWhiteSpace(' ')
                        ParameterType
                          ParametrizedType: Right[A, B]
                            SimpleType: Right
                              CodeReferenceElement: Right
                                PsiElement(identifier)('Right')
                            TypeArgumentsList
                              PsiElement([)('[')
                              SimpleType: A
                                CodeReferenceElement: A
                                  PsiElement(identifier)('A')
                              PsiElement(,)(',')
                              PsiWhiteSpace(' ')
                              SimpleType: B
                                CodeReferenceElement: B
                                  PsiElement(identifier)('B')
                              PsiElement(])(']')
                      PsiElement())(')')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  SimpleType: Repr
                    CodeReferenceElement: Repr
                      PsiElement(identifier)('Repr')
                  PsiWhiteSpace(' ')
                  PsiElement(=)('=')
                  PsiWhiteSpace(' ')
                  MatchStatement
                    ReferenceExpression: t
                      PsiElement(identifier)('t')
                    PsiWhiteSpace(' ')
                    PsiElement(match)('match')
                    PsiWhiteSpace(' ')
                    PsiElement({)('{')
                    PsiWhiteSpace(' ')
                    CaseClauses
                      CaseClause
                        PsiElement(case)('case')
                        PsiWhiteSpace(' ')
                        ConstructorPattern
                          CodeReferenceElement: Right
                            PsiElement(identifier)('Right')
                          Pattern Argument List
                            PsiElement(()('(')
                            ReferencePattern: x
                              PsiElement(identifier)('x')
                            PsiElement())(')')
                        PsiWhiteSpace(' ')
                        PsiElement(=>)('=>')
                        PsiWhiteSpace(' ')
                        BlockOfExpressions
                          MethodCall
                            ReferenceExpression: ::
                              PsiElement(identifier)('::')
                            ArgumentList
                              PsiElement(()('(')
                              ReferenceExpression: x
                                PsiElement(identifier)('x')
                              PsiElement(,)(',')
                              PsiWhiteSpace(' ')
                              ReferenceExpression: HNil
                                PsiElement(identifier)('HNil')
                              PsiElement())(')')
                    PsiWhiteSpace(' ')
                    PsiElement(})('}')
                PsiWhiteSpace('\n      ')
                ScFunctionDefinition: from
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(def)('def')
                  PsiWhiteSpace(' ')
                  PsiElement(identifier)('from')
                  Parameters
                    ParametersClause
                      PsiElement(()('(')
                      Parameter: r
                        AnnotationsList
                          <empty list>
                        Modifiers
                          <empty list>
                        PsiElement(identifier)('r')
                        PsiElement(:)(':')
                        PsiWhiteSpace(' ')
                        ParameterType
                          SimpleType: Repr
                            CodeReferenceElement: Repr
                              PsiElement(identifier)('Repr')
                      PsiElement())(')')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParametrizedType: Right[A, B]
                    SimpleType: Right
                      CodeReferenceElement: Right
                        PsiElement(identifier)('Right')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: A
                        CodeReferenceElement: A
                          PsiElement(identifier)('A')
                      PsiElement(,)(',')
                      PsiWhiteSpace(' ')
                      SimpleType: B
                        CodeReferenceElement: B
                          PsiElement(identifier)('B')
                      PsiElement(])(']')
                  PsiWhiteSpace(' ')
                  PsiElement(=)('=')
                  PsiWhiteSpace(' ')
                  MatchStatement
                    ReferenceExpression: r
                      PsiElement(identifier)('r')
                    PsiWhiteSpace(' ')
                    PsiElement(match)('match')
                    PsiWhiteSpace(' ')
                    PsiElement({)('{')
                    PsiWhiteSpace(' ')
                    CaseClauses
                      CaseClause
                        PsiElement(case)('case')
                        PsiWhiteSpace(' ')
                        ConstructorPattern
                          CodeReferenceElement: ::
                            PsiElement(identifier)('::')
                          Pattern Argument List
                            PsiElement(()('(')
                            ReferencePattern: x
                              PsiElement(identifier)('x')
                            PsiElement(,)(',')
                            PsiWhiteSpace(' ')
                            StableElementPattern
                              ReferenceExpression: HNil
                                PsiElement(identifier)('HNil')
                            PsiElement())(')')
                        PsiWhiteSpace(' ')
                        PsiElement(=>)('=>')
                        PsiWhiteSpace(' ')
                        BlockOfExpressions
                          MethodCall
                            ReferenceExpression: Right
                              PsiElement(identifier)('Right')
                            ArgumentList
                              PsiElement(()('(')
                              ReferenceExpression: x
                                PsiElement(identifier)('x')
                              PsiElement())(')')
                    PsiWhiteSpace(' ')
                    PsiElement(})('}')
                PsiWhiteSpace('\n    ')
                PsiElement(})('}')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScObject: equal
    PsiComment(comment)('// First example from https://github.com/milessabin/shapeless-type-class-derivation-2015-demo')
    PsiWhiteSpace('\n')
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('equal')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScTrait: Eq
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(trait)('trait')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Eq')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: T
              PsiElement(identifier)('T')
            PsiElement(])(']')
          PsiWhiteSpace(' ')
          ExtendsBlock
            ScTemplateBody
              PsiElement({)('{')
              PsiWhiteSpace('\n    ')
              ScFunctionDeclaration: eqv
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(def)('def')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('eqv')
                Parameters
                  ParametersClause
                    PsiElement(()('(')
                    Parameter: x
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(identifier)('x')
                      PsiElement(:)(':')
                      PsiWhiteSpace(' ')
                      ParameterType
                        SimpleType: T
                          CodeReferenceElement: T
                            PsiElement(identifier)('T')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    Parameter: y
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(identifier)('y')
                      PsiElement(:)(':')
                      PsiWhiteSpace(' ')
                      ParameterType
                        SimpleType: T
                          CodeReferenceElement: T
                            PsiElement(identifier)('T')
                    PsiElement())(')')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                SimpleType: Boolean
                  CodeReferenceElement: Boolean
                    PsiElement(identifier)('Boolean')
              PsiWhiteSpace('\n  ')
              PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        ScObject: Eq
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(object)('object')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Eq')
          PsiWhiteSpace(' ')
          ExtendsBlock
            ScTemplateBody
              PsiElement({)('{')
              PsiWhiteSpace('\n    ')
              ScPatternDefinition: eqInt
                AnnotationsList
                  <empty list>
                Modifiers
                  PsiElement(implicit)('implicit')
                PsiWhiteSpace(' ')
                PsiElement(val)('val')
                PsiWhiteSpace(' ')
                ListOfPatterns
                  ReferencePattern: eqInt
                    PsiElement(identifier)('eqInt')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParametrizedType: Eq[Int]
                  SimpleType: Eq
                    CodeReferenceElement: Eq
                      PsiElement(identifier)('Eq')
                  TypeArgumentsList
                    PsiElement([)('[')
                    SimpleType: Int
                      CodeReferenceElement: Int
                        PsiElement(identifier)('Int')
                    PsiElement(])(']')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace('\n      ')
                ScNewTemplateDefinition: <anonymous>
                  PsiElement(new)('new')
                  PsiWhiteSpace(' ')
                  ExtendsBlock
                    TemplateParents
                      ConstructorInvocation
                        ParametrizedType: Eq[Int]
                          SimpleType: Eq
                            CodeReferenceElement: Eq
                              PsiElement(identifier)('Eq')
                          TypeArgumentsList
                            PsiElement([)('[')
                            SimpleType: Int
                              CodeReferenceElement: Int
                                PsiElement(identifier)('Int')
                            PsiElement(])(']')
                    PsiWhiteSpace(' ')
                    ScTemplateBody
                      PsiElement({)('{')
                      PsiWhiteSpace('\n        ')
                      ScFunctionDefinition: eqv
                        AnnotationsList
                          <empty list>
                        Modifiers
                          <empty list>
                        PsiElement(def)('def')
                        PsiWhiteSpace(' ')
                        PsiElement(identifier)('eqv')
                        Parameters
                          ParametersClause
                            PsiElement(()('(')
                            Parameter: x
                              AnnotationsList
                                <empty list>
                              Modifiers
                                <empty list>
                              PsiElement(identifier)('x')
                              PsiElement(:)(':')
                              PsiWhiteSpace(' ')
                              ParameterType
                                SimpleType: Int
                                  CodeReferenceElement: Int
                                    PsiElement(identifier)('Int')
                            PsiElement(,)(',')
                            PsiWhiteSpace(' ')
                            Parameter: y
                              AnnotationsList
                                <empty list>
                              Modifiers
                                <empty list>
                              PsiElement(identifier)('y')
                              PsiElement(:)(':')
                              PsiWhiteSpace(' ')
                              ParameterType
                                SimpleType: Int
                                  CodeReferenceElement: Int
                                    PsiElement(identifier)('Int')
                            PsiElement())(')')
                        PsiElement(:)(':')
                        PsiWhiteSpace(' ')
                        SimpleType: Boolean
                          CodeReferenceElement: Boolean
                            PsiElement(identifier)('Boolean')
                        PsiWhiteSpace(' ')
                        PsiElement(=)('=')
                        PsiWhiteSpace(' ')
                        InfixExpression
                          ReferenceExpression: x
                            PsiElement(identifier)('x')
                          PsiWhiteSpace(' ')
                          ReferenceExpression: ==
                            PsiElement(identifier)('==')
                          PsiWhiteSpace(' ')
                          ReferenceExpression: y
                            PsiElement(identifier)('y')
                      PsiWhiteSpace('\n      ')
                      PsiElement(})('}')
              PsiWhiteSpace('\n\n    ')
              ScPatternDefinition: eqString
                AnnotationsList
                  <empty list>
                Modifiers
                  PsiElement(implicit)('implicit')
                PsiWhiteSpace(' ')
                PsiElement(val)('val')
                PsiWhiteSpace(' ')
                ListOfPatterns
                  ReferencePattern: eqString
                    PsiElement(identifier)('eqString')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParametrizedType: Eq[String]
                  SimpleType: Eq
                    CodeReferenceElement: Eq
                      PsiElement(identifier)('Eq')
                  TypeArgumentsList
                    PsiElement([)('[')
                    SimpleType: String
                      CodeReferenceElement: String
                        PsiElement(identifier)('String')
                    PsiElement(])(']')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace('\n      ')
                ScNewTemplateDefinition: <anonymous>
                  PsiElement(new)('new')
                  PsiWhiteSpace(' ')
                  ExtendsBlock
                    TemplateParents
                      ConstructorInvocation
                        ParametrizedType: Eq[String]
                          SimpleType: Eq
                            CodeReferenceElement: Eq
                              PsiElement(identifier)('Eq')
                          TypeArgumentsList
                            PsiElement([)('[')
                            SimpleType: String
                              CodeReferenceElement: String
                                PsiElement(identifier)('String')
                            PsiElement(])(']')
                    PsiWhiteSpace(' ')
                    ScTemplateBody
                      PsiElement({)('{')
                      PsiWhiteSpace('\n        ')
                      ScFunctionDefinition: eqv
                        AnnotationsList
                          <empty list>
                        Modifiers
                          <empty list>
                        PsiElement(def)('def')
                        PsiWhiteSpace(' ')
                        PsiElement(identifier)('eqv')
                        Parameters
                          ParametersClause
                            PsiElement(()('(')
                            Parameter: x
                              AnnotationsList
                                <empty list>
                              Modifiers
                                <empty list>
                              PsiElement(identifier)('x')
                              PsiElement(:)(':')
                              PsiWhiteSpace(' ')
                              ParameterType
                                SimpleType: String
                                  CodeReferenceElement: String
                                    PsiElement(identifier)('String')
                            PsiElement(,)(',')
                            PsiWhiteSpace(' ')
                            Parameter: y
                              AnnotationsList
                                <empty list>
                              Modifiers
                                <empty list>
                              PsiElement(identifier)('y')
                              PsiElement(:)(':')
                              PsiWhiteSpace(' ')
                              ParameterType
                                SimpleType: String
                                  CodeReferenceElement: String
                                    PsiElement(identifier)('String')
                            PsiElement())(')')
                        PsiElement(:)(':')
                        PsiWhiteSpace(' ')
                        SimpleType: Boolean
                          CodeReferenceElement: Boolean
                            PsiElement(identifier)('Boolean')
                        PsiWhiteSpace(' ')
                        PsiElement(=)('=')
                        PsiWhiteSpace(' ')
                        InfixExpression
                          ReferenceExpression: x
                            PsiElement(identifier)('x')
                          PsiWhiteSpace(' ')
                          ReferenceExpression: ==
                            PsiElement(identifier)('==')
                          PsiWhiteSpace(' ')
                          ReferenceExpression: y
                            PsiElement(identifier)('y')
                      PsiWhiteSpace('\n      ')
                      PsiElement(})('}')
              PsiWhiteSpace('\n\n    ')
              ScFunctionDefinition: eqGeneric
                AnnotationsList
                  <empty list>
                Modifiers
                  PsiElement(implicit)('implicit')
                PsiWhiteSpace(' ')
                PsiElement(def)('def')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('eqGeneric')
                TypeParameterClause
                  PsiElement([)('[')
                  TypeParameter: T
                    PsiElement(identifier)('T')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  TypeParameter: R
                    PsiElement(identifier)('R')
                  PsiElement(])(']')
                PsiWhiteSpace('\n      ')
                Parameters
                  ParametersClause
                    PsiElement(()('(')
                    PsiElement(implicit)('implicit')
                    PsiWhiteSpace('\n        ')
                    Parameter: gen
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(identifier)('gen')
                      PsiElement(:)(':')
                      PsiWhiteSpace(' ')
                      ParameterType
                        CompoundType: Generic[T] { type Repr = R }
                          ParametrizedType: Generic[T]
                            SimpleType: Generic
                              CodeReferenceElement: Generic
                                PsiElement(identifier)('Generic')
                            TypeArgumentsList
                              PsiElement([)('[')
                              SimpleType: T
                                CodeReferenceElement: T
                                  PsiElement(identifier)('T')
                              PsiElement(])(']')
                          PsiWhiteSpace(' ')
                          Refinement
                            PsiElement({)('{')
                            PsiWhiteSpace(' ')
                            ScTypeAliasDefinition: Repr
                              AnnotationsList
                                <empty list>
                              Modifiers
                                <empty list>
                              PsiElement(type)('type')
                              PsiWhiteSpace(' ')
                              PsiElement(identifier)('Repr')
                              PsiWhiteSpace(' ')
                              PsiElement(=)('=')
                              PsiWhiteSpace(' ')
                              SimpleType: R
                                CodeReferenceElement: R
                                  PsiElement(identifier)('R')
                            PsiWhiteSpace(' ')
                            PsiElement(})('}')
                    PsiElement(,)(',')
                    PsiWhiteSpace('\n        ')
                    Parameter: eqRepr
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(identifier)('eqRepr')
                      PsiElement(:)(':')
                      PsiWhiteSpace(' ')
                      ParameterType
                        PsiElement(=>)('=>')
                        PsiWhiteSpace(' ')
                        ParametrizedType: Eq[R]
                          SimpleType: Eq
                            CodeReferenceElement: Eq
                              PsiElement(identifier)('Eq')
                          TypeArgumentsList
                            PsiElement([)('[')
                            SimpleType: R
                              CodeReferenceElement: R
                                PsiElement(identifier)('R')
                            PsiElement(])(']')
                    PsiWhiteSpace('\n      ')
                    PsiElement())(')')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParametrizedType: Eq[T]
                  SimpleType: Eq
                    CodeReferenceElement: Eq
                      PsiElement(identifier)('Eq')
                  TypeArgumentsList
                    PsiElement([)('[')
                    SimpleType: T
                      CodeReferenceElement: T
                        PsiElement(identifier)('T')
                    PsiElement(])(']')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace('\n        ')
                ScNewTemplateDefinition: <anonymous>
                  PsiElement(new)('new')
                  PsiWhiteSpace(' ')
                  ExtendsBlock
                    TemplateParents
                      ConstructorInvocation
                        ParametrizedType: Eq[T]
                          SimpleType: Eq
                            CodeReferenceElement: Eq
                              PsiElement(identifier)('Eq')
                          TypeArgumentsList
                            PsiElement([)('[')
                            SimpleType: T
                              CodeReferenceElement: T
                                PsiElement(identifier)('T')
                            PsiElement(])(']')
                    PsiWhiteSpace(' ')
                    ScTemplateBody
                      PsiElement({)('{')
                      PsiWhiteSpace('\n          ')
                      ScFunctionDefinition: eqv
                        AnnotationsList
                          <empty list>
                        Modifiers
                          <empty list>
                        PsiElement(def)('def')
                        PsiWhiteSpace(' ')
                        PsiElement(identifier)('eqv')
                        Parameters
                          ParametersClause
                            PsiElement(()('(')
                            Parameter: x
                              AnnotationsList
                                <empty list>
                              Modifiers
                                <empty list>
                              PsiElement(identifier)('x')
                              PsiElement(:)(':')
                              PsiWhiteSpace(' ')
                              ParameterType
                                SimpleType: T
                                  CodeReferenceElement: T
                                    PsiElement(identifier)('T')
                            PsiElement(,)(',')
                            PsiWhiteSpace(' ')
                            Parameter: y
                              AnnotationsList
                                <empty list>
                              Modifiers
                                <empty list>
                              PsiElement(identifier)('y')
                              PsiElement(:)(':')
                              PsiWhiteSpace(' ')
                              ParameterType
                                SimpleType: T
                                  CodeReferenceElement: T
                                    PsiElement(identifier)('T')
                            PsiElement())(')')
                        PsiElement(:)(':')
                        PsiWhiteSpace(' ')
                        SimpleType: Boolean
                          CodeReferenceElement: Boolean
                            PsiElement(identifier)('Boolean')
                        PsiWhiteSpace(' ')
                        PsiElement(=)('=')
                        PsiWhiteSpace('\n            ')
                        MethodCall
                          ReferenceExpression: eqRepr.eqv
                            ReferenceExpression: eqRepr
                              PsiElement(identifier)('eqRepr')
                            PsiElement(.)('.')
                            PsiElement(identifier)('eqv')
                          ArgumentList
                            PsiElement(()('(')
                            MethodCall
                              ReferenceExpression: gen.to
                                ReferenceExpression: gen
                                  PsiElement(identifier)('gen')
                                PsiElement(.)('.')
                                PsiElement(identifier)('to')
                              ArgumentList
                                PsiElement(()('(')
                                ReferenceExpression: x
                                  PsiElement(identifier)('x')
                                PsiElement())(')')
                            PsiElement(,)(',')
                            PsiWhiteSpace(' ')
                            MethodCall
                              ReferenceExpression: gen.to
                                ReferenceExpression: gen
                                  PsiElement(identifier)('gen')
                                PsiElement(.)('.')
                                PsiElement(identifier)('to')
                              ArgumentList
                                PsiElement(()('(')
                                ReferenceExpression: y
                                  PsiElement(identifier)('y')
                                PsiElement())(')')
                            PsiElement())(')')
                      PsiWhiteSpace('\n        ')
                      PsiElement(})('}')
              PsiWhiteSpace('\n\n    ')
              ScPatternDefinition: eqHNil
                AnnotationsList
                  <empty list>
                Modifiers
                  PsiElement(implicit)('implicit')
                PsiWhiteSpace(' ')
                PsiElement(val)('val')
                PsiWhiteSpace(' ')
                ListOfPatterns
                  ReferencePattern: eqHNil
                    PsiElement(identifier)('eqHNil')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParametrizedType: Eq[HNil]
                  SimpleType: Eq
                    CodeReferenceElement: Eq
                      PsiElement(identifier)('Eq')
                  TypeArgumentsList
                    PsiElement([)('[')
                    SimpleType: HNil
                      CodeReferenceElement: HNil
                        PsiElement(identifier)('HNil')
                    PsiElement(])(']')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                ScNewTemplateDefinition: <anonymous>
                  PsiElement(new)('new')
                  PsiWhiteSpace(' ')
                  ExtendsBlock
                    TemplateParents
                      ConstructorInvocation
                        ParametrizedType: Eq[HNil]
                          SimpleType: Eq
                            CodeReferenceElement: Eq
                              PsiElement(identifier)('Eq')
                          TypeArgumentsList
                            PsiElement([)('[')
                            SimpleType: HNil
                              CodeReferenceElement: HNil
                                PsiElement(identifier)('HNil')
                            PsiElement(])(']')
                    PsiWhiteSpace(' ')
                    ScTemplateBody
                      PsiElement({)('{')
                      PsiWhiteSpace('\n      ')
                      ScFunctionDefinition: eqv
                        AnnotationsList
                          <empty list>
                        Modifiers
                          <empty list>
                        PsiElement(def)('def')
                        PsiWhiteSpace(' ')
                        PsiElement(identifier)('eqv')
                        Parameters
                          ParametersClause
                            PsiElement(()('(')
                            Parameter: x
                              AnnotationsList
                                <empty list>
                              Modifiers
                                <empty list>
                              PsiElement(identifier)('x')
                              PsiElement(:)(':')
                              PsiWhiteSpace(' ')
                              ParameterType
                                SimpleType: HNil
                                  CodeReferenceElement: HNil
                                    PsiElement(identifier)('HNil')
                            PsiElement(,)(',')
                            PsiWhiteSpace(' ')
                            Parameter: y
                              AnnotationsList
                                <empty list>
                              Modifiers
                                <empty list>
                              PsiElement(identifier)('y')
                              PsiElement(:)(':')
                              PsiWhiteSpace(' ')
                              ParameterType
                                SimpleType: HNil
                                  CodeReferenceElement: HNil
                                    PsiElement(identifier)('HNil')
                            PsiElement())(')')
                        PsiElement(:)(':')
                        PsiWhiteSpace(' ')
                        SimpleType: Boolean
                          CodeReferenceElement: Boolean
                            PsiElement(identifier)('Boolean')
                        PsiWhiteSpace(' ')
                        PsiElement(=)('=')
                        PsiWhiteSpace(' ')
                        BooleanLiteral
                          PsiElement(true)('true')
                      PsiWhiteSpace('\n    ')
                      PsiElement(})('}')
              PsiWhiteSpace('\n\n    ')
              ScFunctionDefinition: eqHCons
                AnnotationsList
                  <empty list>
                Modifiers
                  PsiElement(implicit)('implicit')
                PsiWhiteSpace(' ')
                PsiElement(def)('def')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('eqHCons')
                TypeParameterClause
                  PsiElement([)('[')
                  TypeParameter: H
                    PsiElement(identifier)('H')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  TypeParameter: T
                    PsiElement(identifier)('T')
                    PsiWhiteSpace(' ')
                    PsiElement(<:)('<:')
                    PsiWhiteSpace(' ')
                    SimpleType: HList
                      CodeReferenceElement: HList
                        PsiElement(identifier)('HList')
                  PsiElement(])(']')
                PsiWhiteSpace('\n      ')
                Parameters
                  ParametersClause
                    PsiElement(()('(')
                    PsiElement(implicit)('implicit')
                    PsiWhiteSpace('\n        ')
                    Parameter: eqH
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(identifier)('eqH')
                      PsiElement(:)(':')
                      PsiWhiteSpace(' ')
                      ParameterType
                        PsiElement(=>)('=>')
                        PsiWhiteSpace(' ')
                        ParametrizedType: Eq[H]
                          SimpleType: Eq
                            CodeReferenceElement: Eq
                              PsiElement(identifier)('Eq')
                          TypeArgumentsList
                            PsiElement([)('[')
                            SimpleType: H
                              CodeReferenceElement: H
                                PsiElement(identifier)('H')
                            PsiElement(])(']')
                    PsiElement(,)(',')
                    PsiWhiteSpace('\n        ')
                    Parameter: eqT
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(identifier)('eqT')
                      PsiElement(:)(':')
                      PsiWhiteSpace(' ')
                      ParameterType
                        PsiElement(=>)('=>')
                        PsiWhiteSpace(' ')
                        ParametrizedType: Eq[T]
                          SimpleType: Eq
                            CodeReferenceElement: Eq
                              PsiElement(identifier)('Eq')
                          TypeArgumentsList
                            PsiElement([)('[')
                            SimpleType: T
                              CodeReferenceElement: T
                                PsiElement(identifier)('T')
                            PsiElement(])(']')
                    PsiWhiteSpace('\n      ')
                    PsiElement())(')')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParametrizedType: Eq[H :: T]
                  SimpleType: Eq
                    CodeReferenceElement: Eq
                      PsiElement(identifier)('Eq')
                  TypeArgumentsList
                    PsiElement([)('[')
                    InfixType: H :: T
                      SimpleType: H
                        CodeReferenceElement: H
                          PsiElement(identifier)('H')
                      PsiWhiteSpace(' ')
                      CodeReferenceElement: ::
                        PsiElement(identifier)('::')
                      PsiWhiteSpace(' ')
                      SimpleType: T
                        CodeReferenceElement: T
                          PsiElement(identifier)('T')
                    PsiElement(])(']')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace('\n        ')
                ScNewTemplateDefinition: <anonymous>
                  PsiElement(new)('new')
                  PsiWhiteSpace(' ')
                  ExtendsBlock
                    TemplateParents
                      ConstructorInvocation
                        ParametrizedType: Eq[H :: T]
                          SimpleType: Eq
                            CodeReferenceElement: Eq
                              PsiElement(identifier)('Eq')
                          TypeArgumentsList
                            PsiElement([)('[')
                            InfixType: H :: T
                              SimpleType: H
                                CodeReferenceElement: H
                                  PsiElement(identifier)('H')
                              PsiWhiteSpace(' ')
                              CodeReferenceElement: ::
                                PsiElement(identifier)('::')
                              PsiWhiteSpace(' ')
                              SimpleType: T
                                CodeReferenceElement: T
                                  PsiElement(identifier)('T')
                            PsiElement(])(']')
                    PsiWhiteSpace(' ')
                    ScTemplateBody
                      PsiElement({)('{')
                      PsiWhiteSpace('\n          ')
                      ScFunctionDefinition: eqv
                        AnnotationsList
                          <empty list>
                        Modifiers
                          <empty list>
                        PsiElement(def)('def')
                        PsiWhiteSpace(' ')
                        PsiElement(identifier)('eqv')
                        Parameters
                          ParametersClause
                            PsiElement(()('(')
                            Parameter: x
                              AnnotationsList
                                <empty list>
                              Modifiers
                                <empty list>
                              PsiElement(identifier)('x')
                              PsiElement(:)(':')
                              PsiWhiteSpace(' ')
                              ParameterType
                                InfixType: H :: T
                                  SimpleType: H
                                    CodeReferenceElement: H
                                      PsiElement(identifier)('H')
                                  PsiWhiteSpace(' ')
                                  CodeReferenceElement: ::
                                    PsiElement(identifier)('::')
                                  PsiWhiteSpace(' ')
                                  SimpleType: T
                                    CodeReferenceElement: T
                                      PsiElement(identifier)('T')
                            PsiElement(,)(',')
                            PsiWhiteSpace(' ')
                            Parameter: y
                              AnnotationsList
                                <empty list>
                              Modifiers
                                <empty list>
                              PsiElement(identifier)('y')
                              PsiElement(:)(':')
                              PsiWhiteSpace(' ')
                              ParameterType
                                InfixType: H :: T
                                  SimpleType: H
                                    CodeReferenceElement: H
                                      PsiElement(identifier)('H')
                                  PsiWhiteSpace(' ')
                                  CodeReferenceElement: ::
                                    PsiElement(identifier)('::')
                                  PsiWhiteSpace(' ')
                                  SimpleType: T
                                    CodeReferenceElement: T
                                      PsiElement(identifier)('T')
                            PsiElement())(')')
                        PsiElement(:)(':')
                        PsiWhiteSpace(' ')
                        SimpleType: Boolean
                          CodeReferenceElement: Boolean
                            PsiElement(identifier)('Boolean')
                        PsiWhiteSpace(' ')
                        PsiElement(=)('=')
                        PsiWhiteSpace('\n            ')
                        InfixExpression
                          MethodCall
                            ReferenceExpression: eqH.eqv
                              ReferenceExpression: eqH
                                PsiElement(identifier)('eqH')
                              PsiElement(.)('.')
                              PsiElement(identifier)('eqv')
                            ArgumentList
                              PsiElement(()('(')
                              ReferenceExpression: x.head
                                ReferenceExpression: x
                                  PsiElement(identifier)('x')
                                PsiElement(.)('.')
                                PsiElement(identifier)('head')
                              PsiElement(,)(',')
                              PsiWhiteSpace(' ')
                              ReferenceExpression: y.head
                                ReferenceExpression: y
                                  PsiElement(identifier)('y')
                                PsiElement(.)('.')
                                PsiElement(identifier)('head')
                              PsiElement())(')')
                          PsiWhiteSpace(' ')
                          ReferenceExpression: &&
                            PsiElement(identifier)('&&')
                          PsiWhiteSpace(' ')
                          MethodCall
                            ReferenceExpression: eqT.eqv
                              ReferenceExpression: eqT
                                PsiElement(identifier)('eqT')
                              PsiElement(.)('.')
                              PsiElement(identifier)('eqv')
                            ArgumentList
                              PsiElement(()('(')
                              ReferenceExpression: x.tail
                                ReferenceExpression: x
                                  PsiElement(identifier)('x')
                                PsiElement(.)('.')
                                PsiElement(identifier)('tail')
                              PsiElement(,)(',')
                              PsiWhiteSpace(' ')
                              ReferenceExpression: y.tail
                                ReferenceExpression: y
                                  PsiElement(identifier)('y')
                                PsiElement(.)('.')
                                PsiElement(identifier)('tail')
                              PsiElement())(')')
                      PsiWhiteSpace('\n        ')
                      PsiElement(})('}')
              PsiWhiteSpace('\n\n    ')
              ScPatternDefinition: eqCNil
                AnnotationsList
                  <empty list>
                Modifiers
                  PsiElement(implicit)('implicit')
                PsiWhiteSpace(' ')
                PsiElement(val)('val')
                PsiWhiteSpace(' ')
                ListOfPatterns
                  ReferencePattern: eqCNil
                    PsiElement(identifier)('eqCNil')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParametrizedType: Eq[CNil]
                  SimpleType: Eq
                    CodeReferenceElement: Eq
                      PsiElement(identifier)('Eq')
                  TypeArgumentsList
                    PsiElement([)('[')
                    SimpleType: CNil
                      CodeReferenceElement: CNil
                        PsiElement(identifier)('CNil')
                    PsiElement(])(']')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                ScNewTemplateDefinition: <anonymous>
                  PsiElement(new)('new')
                  PsiWhiteSpace(' ')
                  ExtendsBlock
                    TemplateParents
                      ConstructorInvocation
                        ParametrizedType: Eq[CNil]
                          SimpleType: Eq
                            CodeReferenceElement: Eq
                              PsiElement(identifier)('Eq')
                          TypeArgumentsList
                            PsiElement([)('[')
                            SimpleType: CNil
                              CodeReferenceElement: CNil
                                PsiElement(identifier)('CNil')
                            PsiElement(])(']')
                    PsiWhiteSpace(' ')
                    ScTemplateBody
                      PsiElement({)('{')
                      PsiWhiteSpace('\n      ')
                      ScFunctionDefinition: eqv
                        AnnotationsList
                          <empty list>
                        Modifiers
                          <empty list>
                        PsiElement(def)('def')
                        PsiWhiteSpace(' ')
                        PsiElement(identifier)('eqv')
                        Parameters
                          ParametersClause
                            PsiElement(()('(')
                            Parameter: x
                              AnnotationsList
                                <empty list>
                              Modifiers
                                <empty list>
                              PsiElement(identifier)('x')
                              PsiElement(:)(':')
                              PsiWhiteSpace(' ')
                              ParameterType
                                SimpleType: CNil
                                  CodeReferenceElement: CNil
                                    PsiElement(identifier)('CNil')
                            PsiElement(,)(',')
                            PsiWhiteSpace(' ')
                            Parameter: y
                              AnnotationsList
                                <empty list>
                              Modifiers
                                <empty list>
                              PsiElement(identifier)('y')
                              PsiElement(:)(':')
                              PsiWhiteSpace(' ')
                              ParameterType
                                SimpleType: CNil
                                  CodeReferenceElement: CNil
                                    PsiElement(identifier)('CNil')
                            PsiElement())(')')
                        PsiElement(:)(':')
                        PsiWhiteSpace(' ')
                        SimpleType: Boolean
                          CodeReferenceElement: Boolean
                            PsiElement(identifier)('Boolean')
                        PsiWhiteSpace(' ')
                        PsiElement(=)('=')
                        PsiWhiteSpace(' ')
                        BooleanLiteral
                          PsiElement(true)('true')
                      PsiWhiteSpace('\n    ')
                      PsiElement(})('}')
              PsiWhiteSpace('\n\n    ')
              ScFunctionDefinition: eqCNCons
                AnnotationsList
                  <empty list>
                Modifiers
                  PsiElement(implicit)('implicit')
                PsiWhiteSpace(' ')
                PsiElement(def)('def')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('eqCNCons')
                TypeParameterClause
                  PsiElement([)('[')
                  TypeParameter: H
                    PsiElement(identifier)('H')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  TypeParameter: T
                    PsiElement(identifier)('T')
                    PsiWhiteSpace(' ')
                    PsiElement(<:)('<:')
                    PsiWhiteSpace(' ')
                    SimpleType: Coproduct
                      CodeReferenceElement: Coproduct
                        PsiElement(identifier)('Coproduct')
                  PsiElement(])(']')
                PsiWhiteSpace('\n      ')
                Parameters
                  ParametersClause
                    PsiElement(()('(')
                    PsiElement(implicit)('implicit')
                    PsiWhiteSpace('\n        ')
                    Parameter: eqH
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(identifier)('eqH')
                      PsiElement(:)(':')
                      PsiWhiteSpace(' ')
                      ParameterType
                        PsiElement(=>)('=>')
                        PsiWhiteSpace(' ')
                        ParametrizedType: Eq[H]
                          SimpleType: Eq
                            CodeReferenceElement: Eq
                              PsiElement(identifier)('Eq')
                          TypeArgumentsList
                            PsiElement([)('[')
                            SimpleType: H
                              CodeReferenceElement: H
                                PsiElement(identifier)('H')
                            PsiElement(])(']')
                    PsiElement(,)(',')
                    PsiWhiteSpace('\n        ')
                    Parameter: eqT
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(identifier)('eqT')
                      PsiElement(:)(':')
                      PsiWhiteSpace(' ')
                      ParameterType
                        PsiElement(=>)('=>')
                        PsiWhiteSpace(' ')
                        ParametrizedType: Eq[T]
                          SimpleType: Eq
                            CodeReferenceElement: Eq
                              PsiElement(identifier)('Eq')
                          TypeArgumentsList
                            PsiElement([)('[')
                            SimpleType: T
                              CodeReferenceElement: T
                                PsiElement(identifier)('T')
                            PsiElement(])(']')
                    PsiWhiteSpace('\n      ')
                    PsiElement())(')')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParametrizedType: Eq[H :+: T]
                  SimpleType: Eq
                    CodeReferenceElement: Eq
                      PsiElement(identifier)('Eq')
                  TypeArgumentsList
                    PsiElement([)('[')
                    InfixType: H :+: T
                      SimpleType: H
                        CodeReferenceElement: H
                          PsiElement(identifier)('H')
                      PsiWhiteSpace(' ')
                      CodeReferenceElement: :+:
                        PsiElement(identifier)(':+:')
                      PsiWhiteSpace(' ')
                      SimpleType: T
                        CodeReferenceElement: T
                          PsiElement(identifier)('T')
                    PsiElement(])(']')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace('\n        ')
                ScNewTemplateDefinition: <anonymous>
                  PsiElement(new)('new')
                  PsiWhiteSpace(' ')
                  ExtendsBlock
                    TemplateParents
                      ConstructorInvocation
                        ParametrizedType: Eq[H :+: T]
                          SimpleType: Eq
                            CodeReferenceElement: Eq
                              PsiElement(identifier)('Eq')
                          TypeArgumentsList
                            PsiElement([)('[')
                            InfixType: H :+: T
                              SimpleType: H
                                CodeReferenceElement: H
                                  PsiElement(identifier)('H')
                              PsiWhiteSpace(' ')
                              CodeReferenceElement: :+:
                                PsiElement(identifier)(':+:')
                              PsiWhiteSpace(' ')
                              SimpleType: T
                                CodeReferenceElement: T
                                  PsiElement(identifier)('T')
                            PsiElement(])(']')
                    PsiWhiteSpace(' ')
                    ScTemplateBody
                      PsiElement({)('{')
                      PsiWhiteSpace('\n          ')
                      ScFunctionDefinition: eqv
                        AnnotationsList
                          <empty list>
                        Modifiers
                          <empty list>
                        PsiElement(def)('def')
                        PsiWhiteSpace(' ')
                        PsiElement(identifier)('eqv')
                        Parameters
                          ParametersClause
                            PsiElement(()('(')
                            Parameter: x
                              AnnotationsList
                                <empty list>
                              Modifiers
                                <empty list>
                              PsiElement(identifier)('x')
                              PsiElement(:)(':')
                              PsiWhiteSpace(' ')
                              ParameterType
                                InfixType: H :+: T
                                  SimpleType: H
                                    CodeReferenceElement: H
                                      PsiElement(identifier)('H')
                                  PsiWhiteSpace(' ')
                                  CodeReferenceElement: :+:
                                    PsiElement(identifier)(':+:')
                                  PsiWhiteSpace(' ')
                                  SimpleType: T
                                    CodeReferenceElement: T
                                      PsiElement(identifier)('T')
                            PsiElement(,)(',')
                            PsiWhiteSpace(' ')
                            Parameter: y
                              AnnotationsList
                                <empty list>
                              Modifiers
                                <empty list>
                              PsiElement(identifier)('y')
                              PsiElement(:)(':')
                              PsiWhiteSpace(' ')
                              ParameterType
                                InfixType: H :+: T
                                  SimpleType: H
                                    CodeReferenceElement: H
                                      PsiElement(identifier)('H')
                                  PsiWhiteSpace(' ')
                                  CodeReferenceElement: :+:
                                    PsiElement(identifier)(':+:')
                                  PsiWhiteSpace(' ')
                                  SimpleType: T
                                    CodeReferenceElement: T
                                      PsiElement(identifier)('T')
                            PsiElement())(')')
                        PsiElement(:)(':')
                        PsiWhiteSpace(' ')
                        SimpleType: Boolean
                          CodeReferenceElement: Boolean
                            PsiElement(identifier)('Boolean')
                        PsiWhiteSpace(' ')
                        PsiElement(=)('=')
                        PsiWhiteSpace('\n            ')
                        MatchStatement
                          Tuple
                            PsiElement(()('(')
                            ReferenceExpression: x
                              PsiElement(identifier)('x')
                            PsiElement(,)(',')
                            PsiWhiteSpace(' ')
                            ReferenceExpression: y
                              PsiElement(identifier)('y')
                            PsiElement())(')')
                          PsiWhiteSpace(' ')
                          PsiElement(match)('match')
                          PsiWhiteSpace(' ')
                          PsiElement({)('{')
                          PsiWhiteSpace('\n              ')
                          CaseClauses
                            CaseClause
                              PsiElement(case)('case')
                              PsiWhiteSpace(' ')
                              TuplePattern
                                PsiElement(()('(')
                                ArgumentPatterns
                                  ConstructorPattern
                                    CodeReferenceElement: Inl
                                      PsiElement(identifier)('Inl')
                                    Pattern Argument List
                                      PsiElement(()('(')
                                      ReferencePattern: xh
                                        PsiElement(identifier)('xh')
                                      PsiElement())(')')
                                  PsiElement(,)(',')
                                  PsiWhiteSpace(' ')
                                  ConstructorPattern
                                    CodeReferenceElement: Inl
                                      PsiElement(identifier)('Inl')
                                    Pattern Argument List
                                      PsiElement(()('(')
                                      ReferencePattern: yh
                                        PsiElement(identifier)('yh')
                                      PsiElement())(')')
                                PsiElement())(')')
                              PsiWhiteSpace(' ')
                              PsiElement(=>)('=>')
                              PsiWhiteSpace(' ')
                              BlockOfExpressions
                                MethodCall
                                  ReferenceExpression: eqH.eqv
                                    ReferenceExpression: eqH
                                      PsiElement(identifier)('eqH')
                                    PsiElement(.)('.')
                                    PsiElement(identifier)('eqv')
                                  ArgumentList
                                    PsiElement(()('(')
                                    ReferenceExpression: xh
                                      PsiElement(identifier)('xh')
                                    PsiElement(,)(',')
                                    PsiWhiteSpace(' ')
                                    ReferenceExpression: yh
                                      PsiElement(identifier)('yh')
                                    PsiElement())(')')
                            PsiWhiteSpace('\n              ')
                            CaseClause
                              PsiElement(case)('case')
                              PsiWhiteSpace(' ')
                              TuplePattern
                                PsiElement(()('(')
                                ArgumentPatterns
                                  ConstructorPattern
                                    CodeReferenceElement: Inr
                                      PsiElement(identifier)('Inr')
                                    Pattern Argument List
                                      PsiElement(()('(')
                                      ReferencePattern: xt
                                        PsiElement(identifier)('xt')
                                      PsiElement())(')')
                                  PsiElement(,)(',')
                                  PsiWhiteSpace(' ')
                                  ConstructorPattern
                                    CodeReferenceElement: Inr
                                      PsiElement(identifier)('Inr')
                                    Pattern Argument List
                                      PsiElement(()('(')
                                      ReferencePattern: yt
                                        PsiElement(identifier)('yt')
                                      PsiElement())(')')
                                PsiElement())(')')
                              PsiWhiteSpace(' ')
                              PsiElement(=>)('=>')
                              PsiWhiteSpace(' ')
                              BlockOfExpressions
                                MethodCall
                                  ReferenceExpression: eqT.eqv
                                    ReferenceExpression: eqT
                                      PsiElement(identifier)('eqT')
                                    PsiElement(.)('.')
                                    PsiElement(identifier)('eqv')
                                  ArgumentList
                                    PsiElement(()('(')
                                    ReferenceExpression: xt
                                      PsiElement(identifier)('xt')
                                    PsiElement(,)(',')
                                    PsiWhiteSpace(' ')
                                    ReferenceExpression: yt
                                      PsiElement(identifier)('yt')
                                    PsiElement())(')')
                            PsiWhiteSpace('\n              ')
                            CaseClause
                              PsiElement(case)('case')
                              PsiWhiteSpace(' ')
                              WildcardPattern
                                PsiElement(_)('_')
                              PsiWhiteSpace(' ')
                              PsiElement(=>)('=>')
                              PsiWhiteSpace(' ')
                              BlockOfExpressions
                                BooleanLiteral
                                  PsiElement(false)('false')
                          PsiWhiteSpace('\n            ')
                          PsiElement(})('}')
                      PsiWhiteSpace('\n        ')
                      PsiElement(})('}')
              PsiWhiteSpace('\n  ')
              PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        ScClass: EqOps
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(implicit)('implicit')
          PsiWhiteSpace(' ')
          PsiElement(class)('class')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('EqOps')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: T
              PsiElement(identifier)('T')
            PsiElement(])(']')
          PrimaryConstructor
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            Parameters
              ParametersClause
                PsiElement(()('(')
                ClassParameter: x
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(identifier)('x')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    SimpleType: T
                      CodeReferenceElement: T
                        PsiElement(identifier)('T')
                PsiElement())(')')
              ParametersClause
                PsiElement(()('(')
                PsiElement(implicit)('implicit')
                PsiWhiteSpace(' ')
                ClassParameter: eqT
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(identifier)('eqT')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    ParametrizedType: Eq[T]
                      SimpleType: Eq
                        CodeReferenceElement: Eq
                          PsiElement(identifier)('Eq')
                      TypeArgumentsList
                        PsiElement([)('[')
                        SimpleType: T
                          CodeReferenceElement: T
                            PsiElement(identifier)('T')
                        PsiElement(])(']')
                PsiElement())(')')
          PsiWhiteSpace(' ')
          ExtendsBlock
            ScTemplateBody
              PsiElement({)('{')
              PsiWhiteSpace('\n    ')
              ScFunctionDefinition: ===
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(def)('def')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('===')
                Parameters
                  ParametersClause
                    PsiElement(()('(')
                    Parameter: y
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(identifier)('y')
                      PsiElement(:)(':')
                      PsiWhiteSpace(' ')
                      ParameterType
                        SimpleType: T
                          CodeReferenceElement: T
                            PsiElement(identifier)('T')
                    PsiElement())(')')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                SimpleType: Boolean
                  CodeReferenceElement: Boolean
                    PsiElement(identifier)('Boolean')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                MethodCall
                  ReferenceExpression: eqT.eqv
                    ReferenceExpression: eqT
                      PsiElement(identifier)('eqT')
                    PsiElement(.)('.')
                    PsiElement(identifier)('eqv')
                  ArgumentList
                    PsiElement(()('(')
                    ReferenceExpression: x
                      PsiElement(identifier)('x')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: y
                      PsiElement(identifier)('y')
                    PsiElement())(')')
              PsiWhiteSpace('\n  ')
              PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        ScImportStatement
          PsiElement(import)('import')
          PsiWhiteSpace(' ')
          ImportExpression
            CodeReferenceElement: GenericInstances
              PsiElement(identifier)('GenericInstances')
            PsiElement(.)('.')
            PsiElement(*)('*')
        PsiWhiteSpace('\n\n  ')
        ScPatternDefinition: EqLongInstance
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(implicit)('implicit')
          PsiWhiteSpace(' ')
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: EqLongInstance
              PsiElement(identifier)('EqLongInstance')
          PsiElement(:)(':')
          PsiWhiteSpace('   ')
          ParametrizedType: Eq[Long]
            SimpleType: Eq
              CodeReferenceElement: Eq
                PsiElement(identifier)('Eq')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: Long
                CodeReferenceElement: Long
                  PsiElement(identifier)('Long')
              PsiElement(])(']')
          PsiWhiteSpace('   ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ScNewTemplateDefinition: <anonymous>
            PsiElement(new)('new')
            PsiWhiteSpace(' ')
            ExtendsBlock
              TemplateParents
                ConstructorInvocation
                  ParametrizedType: Eq[Long]
                    SimpleType: Eq
                      CodeReferenceElement: Eq
                        PsiElement(identifier)('Eq')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: Long
                        CodeReferenceElement: Long
                          PsiElement(identifier)('Long')
                      PsiElement(])(']')
              PsiWhiteSpace('   ')
              ScTemplateBody
                PsiElement({)('{')
                PsiWhiteSpace(' ')
                ScFunctionDefinition: eqv
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(def)('def')
                  PsiWhiteSpace(' ')
                  PsiElement(identifier)('eqv')
                  Parameters
                    ParametersClause
                      PsiElement(()('(')
                      Parameter: x
                        AnnotationsList
                          <empty list>
                        Modifiers
                          <empty list>
                        PsiElement(identifier)('x')
                        PsiElement(:)(':')
                        PsiWhiteSpace(' ')
                        ParameterType
                          SimpleType: Long
                            CodeReferenceElement: Long
                              PsiElement(identifier)('Long')
                      PsiElement(,)(',')
                      PsiWhiteSpace(' ')
                      Parameter: y
                        AnnotationsList
                          <empty list>
                        Modifiers
                          <empty list>
                        PsiElement(identifier)('y')
                        PsiElement(:)(':')
                        PsiWhiteSpace(' ')
                        ParameterType
                          SimpleType: Long
                            CodeReferenceElement: Long
                              PsiElement(identifier)('Long')
                      PsiElement())(')')
                  PsiElement(:)(':')
                  PsiWhiteSpace('     ')
                  SimpleType: Boolean
                    CodeReferenceElement: Boolean
                      PsiElement(identifier)('Boolean')
                  PsiWhiteSpace(' ')
                  PsiElement(=)('=')
                  PsiWhiteSpace(' ')
                  InfixExpression
                    ReferenceExpression: x
                      PsiElement(identifier)('x')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: ==
                      PsiElement(identifier)('==')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: y
                      PsiElement(identifier)('y')
                PsiWhiteSpace(' ')
                PsiElement(})('}')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: EqDoubleInstance
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(implicit)('implicit')
          PsiWhiteSpace(' ')
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: EqDoubleInstance
              PsiElement(identifier)('EqDoubleInstance')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: Eq[Double]
            SimpleType: Eq
              CodeReferenceElement: Eq
                PsiElement(identifier)('Eq')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: Double
                CodeReferenceElement: Double
                  PsiElement(identifier)('Double')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ScNewTemplateDefinition: <anonymous>
            PsiElement(new)('new')
            PsiWhiteSpace(' ')
            ExtendsBlock
              TemplateParents
                ConstructorInvocation
                  ParametrizedType: Eq[Double]
                    SimpleType: Eq
                      CodeReferenceElement: Eq
                        PsiElement(identifier)('Eq')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: Double
                        CodeReferenceElement: Double
                          PsiElement(identifier)('Double')
                      PsiElement(])(']')
              PsiWhiteSpace(' ')
              ScTemplateBody
                PsiElement({)('{')
                PsiWhiteSpace(' ')
                ScFunctionDefinition: eqv
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(def)('def')
                  PsiWhiteSpace(' ')
                  PsiElement(identifier)('eqv')
                  Parameters
                    ParametersClause
                      PsiElement(()('(')
                      Parameter: x
                        AnnotationsList
                          <empty list>
                        Modifiers
                          <empty list>
                        PsiElement(identifier)('x')
                        PsiElement(:)(':')
                        PsiWhiteSpace(' ')
                        ParameterType
                          SimpleType: Double
                            CodeReferenceElement: Double
                              PsiElement(identifier)('Double')
                      PsiElement(,)(',')
                      PsiWhiteSpace(' ')
                      Parameter: y
                        AnnotationsList
                          <empty list>
                        Modifiers
                          <empty list>
                        PsiElement(identifier)('y')
                        PsiElement(:)(':')
                        PsiWhiteSpace(' ')
                        ParameterType
                          SimpleType: Double
                            CodeReferenceElement: Double
                              PsiElement(identifier)('Double')
                      PsiElement())(')')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  SimpleType: Boolean
                    CodeReferenceElement: Boolean
                      PsiElement(identifier)('Boolean')
                  PsiWhiteSpace(' ')
                  PsiElement(=)('=')
                  PsiWhiteSpace(' ')
                  InfixExpression
                    ReferenceExpression: x
                      PsiElement(identifier)('x')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: ==
                      PsiElement(identifier)('==')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: y
                      PsiElement(identifier)('y')
                PsiWhiteSpace(' ')
                PsiElement(})('}')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: EqIntInstance
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(implicit)('implicit')
          PsiWhiteSpace(' ')
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: EqIntInstance
              PsiElement(identifier)('EqIntInstance')
          PsiElement(:)(':')
          PsiWhiteSpace('    ')
          ParametrizedType: Eq[Int]
            SimpleType: Eq
              CodeReferenceElement: Eq
                PsiElement(identifier)('Eq')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: Int
                CodeReferenceElement: Int
                  PsiElement(identifier)('Int')
              PsiElement(])(']')
          PsiWhiteSpace('    ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ScNewTemplateDefinition: <anonymous>
            PsiElement(new)('new')
            PsiWhiteSpace(' ')
            ExtendsBlock
              TemplateParents
                ConstructorInvocation
                  ParametrizedType: Eq[Int]
                    SimpleType: Eq
                      CodeReferenceElement: Eq
                        PsiElement(identifier)('Eq')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: Int
                        CodeReferenceElement: Int
                          PsiElement(identifier)('Int')
                      PsiElement(])(']')
              PsiWhiteSpace('    ')
              ScTemplateBody
                PsiElement({)('{')
                PsiWhiteSpace(' ')
                ScFunctionDefinition: eqv
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(def)('def')
                  PsiWhiteSpace(' ')
                  PsiElement(identifier)('eqv')
                  Parameters
                    ParametersClause
                      PsiElement(()('(')
                      Parameter: x
                        AnnotationsList
                          <empty list>
                        Modifiers
                          <empty list>
                        PsiElement(identifier)('x')
                        PsiElement(:)(':')
                        PsiWhiteSpace(' ')
                        ParameterType
                          SimpleType: Int
                            CodeReferenceElement: Int
                              PsiElement(identifier)('Int')
                      PsiElement(,)(',')
                      PsiWhiteSpace(' ')
                      Parameter: y
                        AnnotationsList
                          <empty list>
                        Modifiers
                          <empty list>
                        PsiElement(identifier)('y')
                        PsiElement(:)(':')
                        PsiWhiteSpace(' ')
                        ParameterType
                          SimpleType: Int
                            CodeReferenceElement: Int
                              PsiElement(identifier)('Int')
                      PsiElement())(')')
                  PsiElement(:)(':')
                  PsiWhiteSpace('       ')
                  SimpleType: Boolean
                    CodeReferenceElement: Boolean
                      PsiElement(identifier)('Boolean')
                  PsiWhiteSpace(' ')
                  PsiElement(=)('=')
                  PsiWhiteSpace(' ')
                  InfixExpression
                    ReferenceExpression: x
                      PsiElement(identifier)('x')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: ==
                      PsiElement(identifier)('==')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: y
                      PsiElement(identifier)('y')
                PsiWhiteSpace(' ')
                PsiElement(})('}')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: EqStringInstance
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(implicit)('implicit')
          PsiWhiteSpace(' ')
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: EqStringInstance
              PsiElement(identifier)('EqStringInstance')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: Eq[String]
            SimpleType: Eq
              CodeReferenceElement: Eq
                PsiElement(identifier)('Eq')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: String
                CodeReferenceElement: String
                  PsiElement(identifier)('String')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ScNewTemplateDefinition: <anonymous>
            PsiElement(new)('new')
            PsiWhiteSpace(' ')
            ExtendsBlock
              TemplateParents
                ConstructorInvocation
                  ParametrizedType: Eq[String]
                    SimpleType: Eq
                      CodeReferenceElement: Eq
                        PsiElement(identifier)('Eq')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: String
                        CodeReferenceElement: String
                          PsiElement(identifier)('String')
                      PsiElement(])(']')
              PsiWhiteSpace(' ')
              ScTemplateBody
                PsiElement({)('{')
                PsiWhiteSpace(' ')
                ScFunctionDefinition: eqv
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(def)('def')
                  PsiWhiteSpace(' ')
                  PsiElement(identifier)('eqv')
                  Parameters
                    ParametersClause
                      PsiElement(()('(')
                      Parameter: x
                        AnnotationsList
                          <empty list>
                        Modifiers
                          <empty list>
                        PsiElement(identifier)('x')
                        PsiElement(:)(':')
                        PsiWhiteSpace(' ')
                        ParameterType
                          SimpleType: String
                            CodeReferenceElement: String
                              PsiElement(identifier)('String')
                      PsiElement(,)(',')
                      PsiWhiteSpace(' ')
                      Parameter: y
                        AnnotationsList
                          <empty list>
                        Modifiers
                          <empty list>
                        PsiElement(identifier)('y')
                        PsiElement(:)(':')
                        PsiWhiteSpace(' ')
                        ParameterType
                          SimpleType: String
                            CodeReferenceElement: String
                              PsiElement(identifier)('String')
                      PsiElement())(')')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  SimpleType: Boolean
                    CodeReferenceElement: Boolean
                      PsiElement(identifier)('Boolean')
                  PsiWhiteSpace(' ')
                  PsiElement(=)('=')
                  PsiWhiteSpace(' ')
                  InfixExpression
                    ReferenceExpression: x
                      PsiElement(identifier)('x')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: ==
                      PsiElement(identifier)('==')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: y
                      PsiElement(identifier)('y')
                PsiWhiteSpace(' ')
                PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        GenericCall
          ReferenceExpression: implicitly
            PsiElement(identifier)('implicitly')
          TypeArgumentsList
            PsiElement([)('[')
            ParametrizedType: Eq[Dog]
              SimpleType: Eq
                CodeReferenceElement: Eq
                  PsiElement(identifier)('Eq')
              TypeArgumentsList
                PsiElement([)('[')
                SimpleType: Dog
                  CodeReferenceElement: Dog
                    PsiElement(identifier)('Dog')
                PsiElement(])(']')
            PsiElement(])(']')
        PsiWhiteSpace('\n  ')
        GenericCall
          ReferenceExpression: implicitly
            PsiElement(identifier)('implicitly')
          TypeArgumentsList
            PsiElement([)('[')
            ParametrizedType: Eq[Cat]
              SimpleType: Eq
                CodeReferenceElement: Eq
                  PsiElement(identifier)('Eq')
              TypeArgumentsList
                PsiElement([)('[')
                SimpleType: Cat
                  CodeReferenceElement: Cat
                    PsiElement(identifier)('Cat')
                PsiElement(])(']')
            PsiElement(])(']')
        PsiWhiteSpace('\n  ')
        GenericCall
          ReferenceExpression: implicitly
            PsiElement(identifier)('implicitly')
          TypeArgumentsList
            PsiElement([)('[')
            ParametrizedType: Eq[IDAABBS]
              SimpleType: Eq
                CodeReferenceElement: Eq
                  PsiElement(identifier)('Eq')
              TypeArgumentsList
                PsiElement([)('[')
                SimpleType: IDAABBS
                  CodeReferenceElement: IDAABBS
                    PsiElement(identifier)('IDAABBS')
                PsiElement(])(']')
            PsiElement(])(']')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
