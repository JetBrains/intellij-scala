case class Bar[T <: Tuple](val x: Int *: T)

class Test:
  def fail(e: Any): Int =
    e match { case b: Bar[t] => b.x.head[Int *: t] }
-----
ScalaFile
  ScClass: Bar
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(case)('case')
    PsiWhiteSpace(' ')
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Bar')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: T
        PsiElement(identifier)('T')
        PsiWhiteSpace(' ')
        PsiElement(<:)('<:')
        PsiWhiteSpace(' ')
        SimpleType: Tuple
          CodeReferenceElement: Tuple
            PsiElement(identifier)('Tuple')
      PsiElement(])(']')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        ParametersClause
          PsiElement(()('(')
          ClassParameter: x
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(val)('val')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('x')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            ParameterType
              InfixType: Int *: T
                SimpleType: Int
                  CodeReferenceElement: Int
                    PsiElement(identifier)('Int')
                PsiWhiteSpace(' ')
                CodeReferenceElement: *:
                  PsiElement(identifier)('*:')
                PsiWhiteSpace(' ')
                SimpleType: T
                  CodeReferenceElement: T
                    PsiElement(identifier)('T')
          PsiElement())(')')
    ExtendsBlock
      <empty list>
  PsiWhiteSpace('\n\n')
  ScClass: Test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    ExtendsBlock
      ScTemplateBody
        PsiElement(:)(':')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: fail
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('fail')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: e
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('e')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Any
                    CodeReferenceElement: Any
                      PsiElement(identifier)('Any')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Int
            CodeReferenceElement: Int
              PsiElement(identifier)('Int')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace('\n    ')
          MatchStatement
            ReferenceExpression: e
              PsiElement(identifier)('e')
            PsiWhiteSpace(' ')
            PsiElement(match)('match')
            PsiWhiteSpace(' ')
            PsiElement({)('{')
            PsiWhiteSpace(' ')
            CaseClauses
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                Scala3 TypedPattern
                  ReferencePattern: b
                    PsiElement(identifier)('b')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  TypePattern
                    ParametrizedType: Bar[t]
                      SimpleType: Bar
                        CodeReferenceElement: Bar
                          PsiElement(identifier)('Bar')
                      TypeArgumentsList
                        PsiElement([)('[')
                        TypeVariable: t
                          PsiElement(identifier)('t')
                        PsiElement(])(']')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                BlockOfExpressions
                  GenericCall
                    ReferenceExpression: b.x.head
                      ReferenceExpression: b.x
                        ReferenceExpression: b
                          PsiElement(identifier)('b')
                        PsiElement(.)('.')
                        PsiElement(identifier)('x')
                      PsiElement(.)('.')
                      PsiElement(identifier)('head')
                    TypeArgumentsList
                      PsiElement([)('[')
                      InfixType: Int *: t
                        SimpleType: Int
                          CodeReferenceElement: Int
                            PsiElement(identifier)('Int')
                        PsiWhiteSpace(' ')
                        CodeReferenceElement: *:
                          PsiElement(identifier)('*:')
                        PsiWhiteSpace(' ')
                        SimpleType: t
                          CodeReferenceElement: t
                            PsiElement(identifier)('t')
                      PsiElement(])(']')
            PsiWhiteSpace(' ')
            PsiElement(})('}')
