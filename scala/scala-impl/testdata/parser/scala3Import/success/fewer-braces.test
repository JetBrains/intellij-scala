import language.`3.3`

def Test =

  val xo: Option[Int] = Some(1)

  val y =
    xo.fold:
      22
    .apply: x =>
      x + 1
  println(y)

-----
ScalaFile
  ScImportStatement
    PsiElement(import)('import')
    PsiWhiteSpace(' ')
    ImportExpression
      CodeReferenceElement: language.`3.3`
        CodeReferenceElement: language
          PsiElement(identifier)('language')
        PsiElement(.)('.')
        PsiElement(identifier)('`3.3`')
  PsiWhiteSpace('\n\n')
  ScFunctionDefinition: Test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(def)('def')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test')
    Parameters
      <empty list>
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    BlockExpression
      PsiWhiteSpace('\n\n  ')
      ScPatternDefinition: xo
        AnnotationsList
          <empty list>
        Modifiers
          <empty list>
        PsiElement(val)('val')
        PsiWhiteSpace(' ')
        ListOfPatterns
          ReferencePattern: xo
            PsiElement(identifier)('xo')
        PsiElement(:)(':')
        PsiWhiteSpace(' ')
        ParametrizedType: Option[Int]
          SimpleType: Option
            CodeReferenceElement: Option
              PsiElement(identifier)('Option')
          TypeArgumentsList
            PsiElement([)('[')
            SimpleType: Int
              CodeReferenceElement: Int
                PsiElement(identifier)('Int')
            PsiElement(])(']')
        PsiWhiteSpace(' ')
        PsiElement(=)('=')
        PsiWhiteSpace(' ')
        MethodCall
          ReferenceExpression: Some
            PsiElement(identifier)('Some')
          ArgumentList
            PsiElement(()('(')
            IntegerLiteral
              PsiElement(integer)('1')
            PsiElement())(')')
      PsiWhiteSpace('\n\n  ')
      ScPatternDefinition: y
        AnnotationsList
          <empty list>
        Modifiers
          <empty list>
        PsiElement(val)('val')
        PsiWhiteSpace(' ')
        ListOfPatterns
          ReferencePattern: y
            PsiElement(identifier)('y')
        PsiWhiteSpace(' ')
        PsiElement(=)('=')
        PsiWhiteSpace('\n    ')
        MethodCall
          ReferenceExpression: xo.fold:
      22
    .apply
            MethodCall
              ReferenceExpression: xo.fold
                ReferenceExpression: xo
                  PsiElement(identifier)('xo')
                PsiElement(.)('.')
                PsiElement(identifier)('fold')
              ArgumentList
                BlockExpression
                  PsiElement(:)(':')
                  PsiWhiteSpace('\n      ')
                  IntegerLiteral
                    PsiElement(integer)('22')
            PsiWhiteSpace('\n    ')
            PsiElement(.)('.')
            PsiElement(identifier)('apply')
          ArgumentList
            BlockExpression
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              FunctionExpression
                Parameters
                  ParametersClause
                    Parameter: x
                      PsiElement(identifier)('x')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace('\n      ')
                BlockOfExpressions
                  InfixExpression
                    ReferenceExpression: x
                      PsiElement(identifier)('x')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: +
                      PsiElement(identifier)('+')
                    PsiWhiteSpace(' ')
                    IntegerLiteral
                      PsiElement(integer)('1')
      PsiWhiteSpace('\n  ')
      MethodCall
        ReferenceExpression: println
          PsiElement(identifier)('println')
        ArgumentList
          PsiElement(()('(')
          ReferenceExpression: y
            PsiElement(identifier)('y')
          PsiElement())(')')
