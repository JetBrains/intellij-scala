trait Monad[F[_]] {
  def foo[A](fa: F[A]): Unit = {}
}

class Bla[F[_], A]

object Test1 {
  type Id[A] = A

  val bla: Bla[Id, Unit] = ???
  implicit def blaMonad[F[_]: Monad, S]: Monad[({type L[X] = Bla[F, X]})#L] = ???
  implicit def idMonad: Monad[Id] = ???

  blaMonad.foo(bla) // does not diverge
}

object Test2 {
  type Id[A] = A

  val bla: Bla[Id, Unit] = ???
  implicit def blaMonad[F[_], S](implicit ev: => Monad[F]): Monad[({type L[X] = Bla[F, X]})#L] = ???
  implicit def idMonad: Monad[Id] = ???

  blaMonad.foo(bla) // does not diverge
}
-----
ScalaFile
  ScTrait: Monad
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Monad')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: F
        PsiElement(identifier)('F')
        TypeParameterClause
          PsiElement([)('[')
          TypeParameter: _
            PsiElement(_)('_')
          PsiElement(])(']')
      PsiElement(])(']')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: foo
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('foo')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: A
              PsiElement(identifier)('A')
            PsiElement(])(']')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: fa
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('fa')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  ParametrizedType: F[A]
                    SimpleType: F
                      CodeReferenceElement: F
                        PsiElement(identifier)('F')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: A
                        CodeReferenceElement: A
                          PsiElement(identifier)('A')
                      PsiElement(])(']')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Unit
            CodeReferenceElement: Unit
              PsiElement(identifier)('Unit')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          BlockExpression
            PsiElement({)('{')
            PsiElement(})('}')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScClass: Bla
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Bla')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: F
        PsiElement(identifier)('F')
        TypeParameterClause
          PsiElement([)('[')
          TypeParameter: _
            PsiElement(_)('_')
          PsiElement(])(']')
      PsiElement(,)(',')
      PsiWhiteSpace(' ')
      TypeParameter: A
        PsiElement(identifier)('A')
      PsiElement(])(']')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    ExtendsBlock
      <empty list>
  PsiWhiteSpace('\n\n')
  ScObject: Test1
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test1')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScTypeAliasDefinition: Id
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Id')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: A
              PsiElement(identifier)('A')
            PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          SimpleType: A
            CodeReferenceElement: A
              PsiElement(identifier)('A')
        PsiWhiteSpace('\n\n  ')
        ScPatternDefinition: bla
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: bla
              PsiElement(identifier)('bla')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: Bla[Id, Unit]
            SimpleType: Bla
              CodeReferenceElement: Bla
                PsiElement(identifier)('Bla')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: Id
                CodeReferenceElement: Id
                  PsiElement(identifier)('Id')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              SimpleType: Unit
                CodeReferenceElement: Unit
                  PsiElement(identifier)('Unit')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: ???
            PsiElement(identifier)('???')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: blaMonad
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(implicit)('implicit')
          PsiWhiteSpace(' ')
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('blaMonad')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: F
              PsiElement(identifier)('F')
              TypeParameterClause
                PsiElement([)('[')
                TypeParameter: _
                  PsiElement(_)('_')
                PsiElement(])(']')
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              SimpleType: Monad
                CodeReferenceElement: Monad
                  PsiElement(identifier)('Monad')
            PsiElement(,)(',')
            PsiWhiteSpace(' ')
            TypeParameter: S
              PsiElement(identifier)('S')
            PsiElement(])(']')
          Parameters
            <empty list>
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: Monad[({type L[X] = Bla[F, X]})#L]
            SimpleType: Monad
              CodeReferenceElement: Monad
                PsiElement(identifier)('Monad')
            TypeArgumentsList
              PsiElement([)('[')
              TypeProjection: ({type L[X] = Bla[F, X]})#L
                TypeInParenthesis: ({type L[X] = Bla[F, X]})
                  PsiElement(()('(')
                  CompoundType: {type L[X] = Bla[F, X]}
                    Refinement
                      PsiElement({)('{')
                      ScTypeAliasDefinition: L
                        AnnotationsList
                          <empty list>
                        Modifiers
                          <empty list>
                        PsiElement(type)('type')
                        PsiWhiteSpace(' ')
                        PsiElement(identifier)('L')
                        TypeParameterClause
                          PsiElement([)('[')
                          TypeParameter: X
                            PsiElement(identifier)('X')
                          PsiElement(])(']')
                        PsiWhiteSpace(' ')
                        PsiElement(=)('=')
                        PsiWhiteSpace(' ')
                        ParametrizedType: Bla[F, X]
                          SimpleType: Bla
                            CodeReferenceElement: Bla
                              PsiElement(identifier)('Bla')
                          TypeArgumentsList
                            PsiElement([)('[')
                            SimpleType: F
                              CodeReferenceElement: F
                                PsiElement(identifier)('F')
                            PsiElement(,)(',')
                            PsiWhiteSpace(' ')
                            SimpleType: X
                              CodeReferenceElement: X
                                PsiElement(identifier)('X')
                            PsiElement(])(']')
                      PsiElement(})('}')
                  PsiElement())(')')
                PsiElement(#)('#')
                PsiElement(identifier)('L')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: ???
            PsiElement(identifier)('???')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: idMonad
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(implicit)('implicit')
          PsiWhiteSpace(' ')
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('idMonad')
          Parameters
            <empty list>
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: Monad[Id]
            SimpleType: Monad
              CodeReferenceElement: Monad
                PsiElement(identifier)('Monad')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: Id
                CodeReferenceElement: Id
                  PsiElement(identifier)('Id')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: ???
            PsiElement(identifier)('???')
        PsiWhiteSpace('\n\n  ')
        MethodCall
          ReferenceExpression: blaMonad.foo
            ReferenceExpression: blaMonad
              PsiElement(identifier)('blaMonad')
            PsiElement(.)('.')
            PsiElement(identifier)('foo')
          ArgumentList
            PsiElement(()('(')
            ReferenceExpression: bla
              PsiElement(identifier)('bla')
            PsiElement())(')')
        PsiWhiteSpace(' ')
        PsiComment(comment)('// does not diverge')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScObject: Test2
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test2')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScTypeAliasDefinition: Id
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Id')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: A
              PsiElement(identifier)('A')
            PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          SimpleType: A
            CodeReferenceElement: A
              PsiElement(identifier)('A')
        PsiWhiteSpace('\n\n  ')
        ScPatternDefinition: bla
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: bla
              PsiElement(identifier)('bla')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: Bla[Id, Unit]
            SimpleType: Bla
              CodeReferenceElement: Bla
                PsiElement(identifier)('Bla')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: Id
                CodeReferenceElement: Id
                  PsiElement(identifier)('Id')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              SimpleType: Unit
                CodeReferenceElement: Unit
                  PsiElement(identifier)('Unit')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: ???
            PsiElement(identifier)('???')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: blaMonad
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(implicit)('implicit')
          PsiWhiteSpace(' ')
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('blaMonad')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: F
              PsiElement(identifier)('F')
              TypeParameterClause
                PsiElement([)('[')
                TypeParameter: _
                  PsiElement(_)('_')
                PsiElement(])(']')
            PsiElement(,)(',')
            PsiWhiteSpace(' ')
            TypeParameter: S
              PsiElement(identifier)('S')
            PsiElement(])(']')
          Parameters
            ParametersClause
              PsiElement(()('(')
              PsiElement(implicit)('implicit')
              PsiWhiteSpace(' ')
              Parameter: ev
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('ev')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  PsiElement(=>)('=>')
                  PsiWhiteSpace(' ')
                  ParametrizedType: Monad[F]
                    SimpleType: Monad
                      CodeReferenceElement: Monad
                        PsiElement(identifier)('Monad')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: F
                        CodeReferenceElement: F
                          PsiElement(identifier)('F')
                      PsiElement(])(']')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: Monad[({type L[X] = Bla[F, X]})#L]
            SimpleType: Monad
              CodeReferenceElement: Monad
                PsiElement(identifier)('Monad')
            TypeArgumentsList
              PsiElement([)('[')
              TypeProjection: ({type L[X] = Bla[F, X]})#L
                TypeInParenthesis: ({type L[X] = Bla[F, X]})
                  PsiElement(()('(')
                  CompoundType: {type L[X] = Bla[F, X]}
                    Refinement
                      PsiElement({)('{')
                      ScTypeAliasDefinition: L
                        AnnotationsList
                          <empty list>
                        Modifiers
                          <empty list>
                        PsiElement(type)('type')
                        PsiWhiteSpace(' ')
                        PsiElement(identifier)('L')
                        TypeParameterClause
                          PsiElement([)('[')
                          TypeParameter: X
                            PsiElement(identifier)('X')
                          PsiElement(])(']')
                        PsiWhiteSpace(' ')
                        PsiElement(=)('=')
                        PsiWhiteSpace(' ')
                        ParametrizedType: Bla[F, X]
                          SimpleType: Bla
                            CodeReferenceElement: Bla
                              PsiElement(identifier)('Bla')
                          TypeArgumentsList
                            PsiElement([)('[')
                            SimpleType: F
                              CodeReferenceElement: F
                                PsiElement(identifier)('F')
                            PsiElement(,)(',')
                            PsiWhiteSpace(' ')
                            SimpleType: X
                              CodeReferenceElement: X
                                PsiElement(identifier)('X')
                            PsiElement(])(']')
                      PsiElement(})('}')
                  PsiElement())(')')
                PsiElement(#)('#')
                PsiElement(identifier)('L')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: ???
            PsiElement(identifier)('???')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: idMonad
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(implicit)('implicit')
          PsiWhiteSpace(' ')
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('idMonad')
          Parameters
            <empty list>
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: Monad[Id]
            SimpleType: Monad
              CodeReferenceElement: Monad
                PsiElement(identifier)('Monad')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: Id
                CodeReferenceElement: Id
                  PsiElement(identifier)('Id')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: ???
            PsiElement(identifier)('???')
        PsiWhiteSpace('\n\n  ')
        MethodCall
          ReferenceExpression: blaMonad.foo
            ReferenceExpression: blaMonad
              PsiElement(identifier)('blaMonad')
            PsiElement(.)('.')
            PsiElement(identifier)('foo')
          ArgumentList
            PsiElement(()('(')
            ReferenceExpression: bla
              PsiElement(identifier)('bla')
            PsiElement())(')')
        PsiWhiteSpace(' ')
        PsiComment(comment)('// does not diverge')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
