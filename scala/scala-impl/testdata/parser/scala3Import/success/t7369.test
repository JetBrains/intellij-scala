object Test {
  val X, Y = true
  (null: Tuple1[Boolean]) match {
    case Tuple1(X) =>
    case Tuple1(Y) => // unreachable
    case _      =>
  }
}


sealed abstract class B;
case object True extends B;
case object False extends B;

object Test2 {

  val X: B = True
  val Y: B = False

  (null: Tuple1[B]) match {
    case Tuple1(X) =>
    case Tuple1(Y) => // no warning
    case _      =>
  }
}

object Test3 {
  val X, O = true
  def classify(neighbourhood: (Boolean, Boolean, Boolean)): String = {
    neighbourhood match {
      case (X, X, X) => "middle"
      case (X, X, O) => "right"
      case (O, X, X) => "left"
      case _ => throw new IllegalArgumentException("Invalid")
    }
  }
}
-----
ScalaFile
  ScObject: Test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: X, Y
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: X
              PsiElement(identifier)('X')
            PsiElement(,)(',')
            PsiWhiteSpace(' ')
            ReferencePattern: Y
              PsiElement(identifier)('Y')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          BooleanLiteral
            PsiElement(true)('true')
        PsiWhiteSpace('\n  ')
        MatchStatement
          ExpressionInParenthesis
            PsiElement(()('(')
            TypedExpression
              NullLiteral
                PsiElement(null)('null')
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              ParametrizedType: Tuple1[Boolean]
                SimpleType: Tuple1
                  CodeReferenceElement: Tuple1
                    PsiElement(identifier)('Tuple1')
                TypeArgumentsList
                  PsiElement([)('[')
                  SimpleType: Boolean
                    CodeReferenceElement: Boolean
                      PsiElement(identifier)('Boolean')
                  PsiElement(])(']')
            PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(match)('match')
          PsiWhiteSpace(' ')
          PsiElement({)('{')
          PsiWhiteSpace('\n    ')
          CaseClauses
            CaseClause
              PsiElement(case)('case')
              PsiWhiteSpace(' ')
              ConstructorPattern
                CodeReferenceElement: Tuple1
                  PsiElement(identifier)('Tuple1')
                Pattern Argument List
                  PsiElement(()('(')
                  StableElementPattern
                    ReferenceExpression: X
                      PsiElement(identifier)('X')
                  PsiElement())(')')
              PsiWhiteSpace(' ')
              PsiElement(=>)('=>')
              BlockOfExpressions
                <empty list>
            PsiWhiteSpace('\n    ')
            CaseClause
              PsiElement(case)('case')
              PsiWhiteSpace(' ')
              ConstructorPattern
                CodeReferenceElement: Tuple1
                  PsiElement(identifier)('Tuple1')
                Pattern Argument List
                  PsiElement(()('(')
                  StableElementPattern
                    ReferenceExpression: Y
                      PsiElement(identifier)('Y')
                  PsiElement())(')')
              PsiWhiteSpace(' ')
              PsiElement(=>)('=>')
              BlockOfExpressions
                <empty list>
            PsiWhiteSpace(' ')
            PsiComment(comment)('// unreachable')
            PsiWhiteSpace('\n    ')
            CaseClause
              PsiElement(case)('case')
              PsiWhiteSpace(' ')
              WildcardPattern
                PsiElement(_)('_')
              PsiWhiteSpace('      ')
              PsiElement(=>)('=>')
              BlockOfExpressions
                <empty list>
          PsiWhiteSpace('\n  ')
          PsiElement(})('}')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n\n')
  ScClass: B
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(sealed)('sealed')
      PsiWhiteSpace(' ')
      PsiElement(abstract)('abstract')
    PsiWhiteSpace(' ')
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('B')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    ExtendsBlock
      <empty list>
  PsiElement(;)(';')
  PsiWhiteSpace('\n')
  ScObject: True
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(case)('case')
    PsiWhiteSpace(' ')
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('True')
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          SimpleType: B
            CodeReferenceElement: B
              PsiElement(identifier)('B')
  PsiElement(;)(';')
  PsiWhiteSpace('\n')
  ScObject: False
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(case)('case')
    PsiWhiteSpace(' ')
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('False')
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          SimpleType: B
            CodeReferenceElement: B
              PsiElement(identifier)('B')
  PsiElement(;)(';')
  PsiWhiteSpace('\n\n')
  ScObject: Test2
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test2')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n\n  ')
        ScPatternDefinition: X
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: X
              PsiElement(identifier)('X')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: B
            CodeReferenceElement: B
              PsiElement(identifier)('B')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: True
            PsiElement(identifier)('True')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: Y
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: Y
              PsiElement(identifier)('Y')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: B
            CodeReferenceElement: B
              PsiElement(identifier)('B')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: False
            PsiElement(identifier)('False')
        PsiWhiteSpace('\n\n  ')
        MatchStatement
          ExpressionInParenthesis
            PsiElement(()('(')
            TypedExpression
              NullLiteral
                PsiElement(null)('null')
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              ParametrizedType: Tuple1[B]
                SimpleType: Tuple1
                  CodeReferenceElement: Tuple1
                    PsiElement(identifier)('Tuple1')
                TypeArgumentsList
                  PsiElement([)('[')
                  SimpleType: B
                    CodeReferenceElement: B
                      PsiElement(identifier)('B')
                  PsiElement(])(']')
            PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(match)('match')
          PsiWhiteSpace(' ')
          PsiElement({)('{')
          PsiWhiteSpace('\n    ')
          CaseClauses
            CaseClause
              PsiElement(case)('case')
              PsiWhiteSpace(' ')
              ConstructorPattern
                CodeReferenceElement: Tuple1
                  PsiElement(identifier)('Tuple1')
                Pattern Argument List
                  PsiElement(()('(')
                  StableElementPattern
                    ReferenceExpression: X
                      PsiElement(identifier)('X')
                  PsiElement())(')')
              PsiWhiteSpace(' ')
              PsiElement(=>)('=>')
              BlockOfExpressions
                <empty list>
            PsiWhiteSpace('\n    ')
            CaseClause
              PsiElement(case)('case')
              PsiWhiteSpace(' ')
              ConstructorPattern
                CodeReferenceElement: Tuple1
                  PsiElement(identifier)('Tuple1')
                Pattern Argument List
                  PsiElement(()('(')
                  StableElementPattern
                    ReferenceExpression: Y
                      PsiElement(identifier)('Y')
                  PsiElement())(')')
              PsiWhiteSpace(' ')
              PsiElement(=>)('=>')
              BlockOfExpressions
                <empty list>
            PsiWhiteSpace(' ')
            PsiComment(comment)('// no warning')
            PsiWhiteSpace('\n    ')
            CaseClause
              PsiElement(case)('case')
              PsiWhiteSpace(' ')
              WildcardPattern
                PsiElement(_)('_')
              PsiWhiteSpace('      ')
              PsiElement(=>)('=>')
              BlockOfExpressions
                <empty list>
          PsiWhiteSpace('\n  ')
          PsiElement(})('}')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScObject: Test3
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test3')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: X, O
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: X
              PsiElement(identifier)('X')
            PsiElement(,)(',')
            PsiWhiteSpace(' ')
            ReferencePattern: O
              PsiElement(identifier)('O')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          BooleanLiteral
            PsiElement(true)('true')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: classify
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('classify')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: neighbourhood
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('neighbourhood')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  TupleType: (Boolean, Boolean, Boolean)
                    PsiElement(()('(')
                    TypesList
                      SimpleType: Boolean
                        CodeReferenceElement: Boolean
                          PsiElement(identifier)('Boolean')
                      PsiElement(,)(',')
                      PsiWhiteSpace(' ')
                      SimpleType: Boolean
                        CodeReferenceElement: Boolean
                          PsiElement(identifier)('Boolean')
                      PsiElement(,)(',')
                      PsiWhiteSpace(' ')
                      SimpleType: Boolean
                        CodeReferenceElement: Boolean
                          PsiElement(identifier)('Boolean')
                    PsiElement())(')')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: String
            CodeReferenceElement: String
              PsiElement(identifier)('String')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          BlockExpression
            PsiElement({)('{')
            PsiWhiteSpace('\n    ')
            MatchStatement
              ReferenceExpression: neighbourhood
                PsiElement(identifier)('neighbourhood')
              PsiWhiteSpace(' ')
              PsiElement(match)('match')
              PsiWhiteSpace(' ')
              PsiElement({)('{')
              PsiWhiteSpace('\n      ')
              CaseClauses
                CaseClause
                  PsiElement(case)('case')
                  PsiWhiteSpace(' ')
                  TuplePattern
                    PsiElement(()('(')
                    ArgumentPatterns
                      StableElementPattern
                        ReferenceExpression: X
                          PsiElement(identifier)('X')
                      PsiElement(,)(',')
                      PsiWhiteSpace(' ')
                      StableElementPattern
                        ReferenceExpression: X
                          PsiElement(identifier)('X')
                      PsiElement(,)(',')
                      PsiWhiteSpace(' ')
                      StableElementPattern
                        ReferenceExpression: X
                          PsiElement(identifier)('X')
                    PsiElement())(')')
                  PsiWhiteSpace(' ')
                  PsiElement(=>)('=>')
                  PsiWhiteSpace(' ')
                  BlockOfExpressions
                    StringLiteral
                      PsiElement(string content)('"middle"')
                PsiWhiteSpace('\n      ')
                CaseClause
                  PsiElement(case)('case')
                  PsiWhiteSpace(' ')
                  TuplePattern
                    PsiElement(()('(')
                    ArgumentPatterns
                      StableElementPattern
                        ReferenceExpression: X
                          PsiElement(identifier)('X')
                      PsiElement(,)(',')
                      PsiWhiteSpace(' ')
                      StableElementPattern
                        ReferenceExpression: X
                          PsiElement(identifier)('X')
                      PsiElement(,)(',')
                      PsiWhiteSpace(' ')
                      StableElementPattern
                        ReferenceExpression: O
                          PsiElement(identifier)('O')
                    PsiElement())(')')
                  PsiWhiteSpace(' ')
                  PsiElement(=>)('=>')
                  PsiWhiteSpace(' ')
                  BlockOfExpressions
                    StringLiteral
                      PsiElement(string content)('"right"')
                PsiWhiteSpace('\n      ')
                CaseClause
                  PsiElement(case)('case')
                  PsiWhiteSpace(' ')
                  TuplePattern
                    PsiElement(()('(')
                    ArgumentPatterns
                      StableElementPattern
                        ReferenceExpression: O
                          PsiElement(identifier)('O')
                      PsiElement(,)(',')
                      PsiWhiteSpace(' ')
                      StableElementPattern
                        ReferenceExpression: X
                          PsiElement(identifier)('X')
                      PsiElement(,)(',')
                      PsiWhiteSpace(' ')
                      StableElementPattern
                        ReferenceExpression: X
                          PsiElement(identifier)('X')
                    PsiElement())(')')
                  PsiWhiteSpace(' ')
                  PsiElement(=>)('=>')
                  PsiWhiteSpace(' ')
                  BlockOfExpressions
                    StringLiteral
                      PsiElement(string content)('"left"')
                PsiWhiteSpace('\n      ')
                CaseClause
                  PsiElement(case)('case')
                  PsiWhiteSpace(' ')
                  WildcardPattern
                    PsiElement(_)('_')
                  PsiWhiteSpace(' ')
                  PsiElement(=>)('=>')
                  PsiWhiteSpace(' ')
                  BlockOfExpressions
                    ThrowStatement
                      PsiElement(throw)('throw')
                      PsiWhiteSpace(' ')
                      ScNewTemplateDefinition: <anonymous>
                        PsiElement(new)('new')
                        PsiWhiteSpace(' ')
                        ExtendsBlock
                          TemplateParents
                            ConstructorInvocation
                              SimpleType: IllegalArgumentException
                                CodeReferenceElement: IllegalArgumentException
                                  PsiElement(identifier)('IllegalArgumentException')
                              ArgumentList
                                PsiElement(()('(')
                                StringLiteral
                                  PsiElement(string content)('"Invalid"')
                                PsiElement())(')')
              PsiWhiteSpace('\n    ')
              PsiElement(})('}')
            PsiWhiteSpace('\n  ')
            PsiElement(})('}')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
