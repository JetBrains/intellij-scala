trait Parent {
  type Child
}

object Demo {
  def params(arr: Int): Int = ???

  def parametersOf[Parent, T]()(using m: String): Int = 0

  def combineInternal(using p: Parent): Int = {
    //this implicit needs to be available
    implicit val s: String = ""

    //parameter needs to be named
    params(arr = parametersOf[Parent, p.Child]())
  }
}
-----
ScalaFile
  ScTrait: Parent
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Parent')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScTypeAliasDeclaration: Child
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Child')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScObject: Demo
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Demo')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: params
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('params')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: arr
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('arr')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Int
                    CodeReferenceElement: Int
                      PsiElement(identifier)('Int')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Int
            CodeReferenceElement: Int
              PsiElement(identifier)('Int')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: ???
            PsiElement(identifier)('???')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: parametersOf
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('parametersOf')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: Parent
              PsiElement(identifier)('Parent')
            PsiElement(,)(',')
            PsiWhiteSpace(' ')
            TypeParameter: T
              PsiElement(identifier)('T')
            PsiElement(])(']')
          Parameters
            ParametersClause
              PsiElement(()('(')
              PsiElement())(')')
            ParametersClause
              PsiElement(()('(')
              PsiElement(using)('using')
              PsiWhiteSpace(' ')
              Parameter: m
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('m')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: String
                    CodeReferenceElement: String
                      PsiElement(identifier)('String')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Int
            CodeReferenceElement: Int
              PsiElement(identifier)('Int')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          IntegerLiteral
            PsiElement(integer)('0')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: combineInternal
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('combineInternal')
          Parameters
            ParametersClause
              PsiElement(()('(')
              PsiElement(using)('using')
              PsiWhiteSpace(' ')
              Parameter: p
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('p')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Parent
                    CodeReferenceElement: Parent
                      PsiElement(identifier)('Parent')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Int
            CodeReferenceElement: Int
              PsiElement(identifier)('Int')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          BlockExpression
            PsiElement({)('{')
            PsiWhiteSpace('\n    ')
            ScPatternDefinition: s
              PsiComment(comment)('//this implicit needs to be available')
              PsiWhiteSpace('\n    ')
              AnnotationsList
                <empty list>
              Modifiers
                PsiElement(implicit)('implicit')
              PsiWhiteSpace(' ')
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              ListOfPatterns
                ReferencePattern: s
                  PsiElement(identifier)('s')
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              SimpleType: String
                CodeReferenceElement: String
                  PsiElement(identifier)('String')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              StringLiteral
                PsiElement(string content)('""')
            PsiWhiteSpace('\n\n    ')
            PsiComment(comment)('//parameter needs to be named')
            PsiWhiteSpace('\n    ')
            MethodCall
              ReferenceExpression: params
                PsiElement(identifier)('params')
              ArgumentList
                PsiElement(()('(')
                AssignStatement
                  ReferenceExpression: arr
                    PsiElement(identifier)('arr')
                  PsiWhiteSpace(' ')
                  PsiElement(=)('=')
                  PsiWhiteSpace(' ')
                  MethodCall
                    GenericCall
                      ReferenceExpression: parametersOf
                        PsiElement(identifier)('parametersOf')
                      TypeArgumentsList
                        PsiElement([)('[')
                        SimpleType: Parent
                          CodeReferenceElement: Parent
                            PsiElement(identifier)('Parent')
                        PsiElement(,)(',')
                        PsiWhiteSpace(' ')
                        SimpleType: p.Child
                          CodeReferenceElement: p.Child
                            CodeReferenceElement: p
                              PsiElement(identifier)('p')
                            PsiElement(.)('.')
                            PsiElement(identifier)('Child')
                        PsiElement(])(']')
                    ArgumentList
                      PsiElement(()('(')
                      PsiElement())(')')
                PsiElement())(')')
            PsiWhiteSpace('\n  ')
            PsiElement(})('}')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
