object Foo {
  def bar = {
    val data = Map.empty[String, String]
    val list = List.empty[Map[String, String]]
    list.map(_ ++ data)
  }
}
-----
ScalaFile
  ScObject: Foo
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Foo')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: bar
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('bar')
          Parameters
            <empty list>
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          BlockExpression
            PsiElement({)('{')
            PsiWhiteSpace('\n    ')
            ScPatternDefinition: data
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              ListOfPatterns
                ReferencePattern: data
                  PsiElement(identifier)('data')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              GenericCall
                ReferenceExpression: Map.empty
                  ReferenceExpression: Map
                    PsiElement(identifier)('Map')
                  PsiElement(.)('.')
                  PsiElement(identifier)('empty')
                TypeArgumentsList
                  PsiElement([)('[')
                  SimpleType: String
                    CodeReferenceElement: String
                      PsiElement(identifier)('String')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  SimpleType: String
                    CodeReferenceElement: String
                      PsiElement(identifier)('String')
                  PsiElement(])(']')
            PsiWhiteSpace('\n    ')
            ScPatternDefinition: list
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              ListOfPatterns
                ReferencePattern: list
                  PsiElement(identifier)('list')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              GenericCall
                ReferenceExpression: List.empty
                  ReferenceExpression: List
                    PsiElement(identifier)('List')
                  PsiElement(.)('.')
                  PsiElement(identifier)('empty')
                TypeArgumentsList
                  PsiElement([)('[')
                  ParametrizedType: Map[String, String]
                    SimpleType: Map
                      CodeReferenceElement: Map
                        PsiElement(identifier)('Map')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: String
                        CodeReferenceElement: String
                          PsiElement(identifier)('String')
                      PsiElement(,)(',')
                      PsiWhiteSpace(' ')
                      SimpleType: String
                        CodeReferenceElement: String
                          PsiElement(identifier)('String')
                      PsiElement(])(']')
                  PsiElement(])(']')
            PsiWhiteSpace('\n    ')
            MethodCall
              ReferenceExpression: list.map
                ReferenceExpression: list
                  PsiElement(identifier)('list')
                PsiElement(.)('.')
                PsiElement(identifier)('map')
              ArgumentList
                PsiElement(()('(')
                InfixExpression
                  UnderscoreSection
                    PsiElement(_)('_')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: ++
                    PsiElement(identifier)('++')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: data
                    PsiElement(identifier)('data')
                PsiElement())(')')
            PsiWhiteSpace('\n  ')
            PsiElement(})('}')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
