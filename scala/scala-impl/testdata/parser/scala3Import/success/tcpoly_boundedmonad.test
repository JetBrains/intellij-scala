trait Monad[T <: Bound[T], MyType[x <: Bound[x]], Bound[_]] {
  def map[S <: Bound[S]](f: T => S): MyType[S]

  def flatMap[S <: RBound[S], RContainer[x <: RBound[x]], RBound[_],
              Result[x <: RBound[x]] <: Monad[x, RContainer, RBound]]
              (f: T => Result[S]): Result[S]

  def filter(p: T => Boolean): MyType[T]
}

class Set[T <: Ordered[T]] extends Monad[T, Set, Ordered] {
  def map[S <: Ordered[S]](f: T => S): Set[S] = sys.error("TODO")

  def flatMap[S <: RBound[S], RContainer[x <: RBound[x]], RBound[_],
              Result[x <: RBound[x]] <: Monad[x, RContainer, RBound]]
              (f: T => Result[S]): Result[S]  = sys.error("TODO")

  def filter(p: T => Boolean): Set[T] = sys.error("TODO")
}
-----
ScalaFile
  ScTrait: Monad
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Monad')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: T
        PsiElement(identifier)('T')
        PsiWhiteSpace(' ')
        PsiElement(<:)('<:')
        PsiWhiteSpace(' ')
        ParametrizedType: Bound[T]
          SimpleType: Bound
            CodeReferenceElement: Bound
              PsiElement(identifier)('Bound')
          TypeArgumentsList
            PsiElement([)('[')
            SimpleType: T
              CodeReferenceElement: T
                PsiElement(identifier)('T')
            PsiElement(])(']')
      PsiElement(,)(',')
      PsiWhiteSpace(' ')
      TypeParameter: MyType
        PsiElement(identifier)('MyType')
        TypeParameterClause
          PsiElement([)('[')
          TypeParameter: x
            PsiElement(identifier)('x')
            PsiWhiteSpace(' ')
            PsiElement(<:)('<:')
            PsiWhiteSpace(' ')
            ParametrizedType: Bound[x]
              SimpleType: Bound
                CodeReferenceElement: Bound
                  PsiElement(identifier)('Bound')
              TypeArgumentsList
                PsiElement([)('[')
                SimpleType: x
                  CodeReferenceElement: x
                    PsiElement(identifier)('x')
                PsiElement(])(']')
          PsiElement(])(']')
      PsiElement(,)(',')
      PsiWhiteSpace(' ')
      TypeParameter: Bound
        PsiElement(identifier)('Bound')
        TypeParameterClause
          PsiElement([)('[')
          TypeParameter: _
            PsiElement(_)('_')
          PsiElement(])(']')
      PsiElement(])(']')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDeclaration: map
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('map')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: S
              PsiElement(identifier)('S')
              PsiWhiteSpace(' ')
              PsiElement(<:)('<:')
              PsiWhiteSpace(' ')
              ParametrizedType: Bound[S]
                SimpleType: Bound
                  CodeReferenceElement: Bound
                    PsiElement(identifier)('Bound')
                TypeArgumentsList
                  PsiElement([)('[')
                  SimpleType: S
                    CodeReferenceElement: S
                      PsiElement(identifier)('S')
                  PsiElement(])(']')
            PsiElement(])(']')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: f
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('f')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  FunctionalType: T => S
                    SimpleType: T
                      CodeReferenceElement: T
                        PsiElement(identifier)('T')
                    PsiWhiteSpace(' ')
                    PsiElement(=>)('=>')
                    PsiWhiteSpace(' ')
                    SimpleType: S
                      CodeReferenceElement: S
                        PsiElement(identifier)('S')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: MyType[S]
            SimpleType: MyType
              CodeReferenceElement: MyType
                PsiElement(identifier)('MyType')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: S
                CodeReferenceElement: S
                  PsiElement(identifier)('S')
              PsiElement(])(']')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDeclaration: flatMap
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('flatMap')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: S
              PsiElement(identifier)('S')
              PsiWhiteSpace(' ')
              PsiElement(<:)('<:')
              PsiWhiteSpace(' ')
              ParametrizedType: RBound[S]
                SimpleType: RBound
                  CodeReferenceElement: RBound
                    PsiElement(identifier)('RBound')
                TypeArgumentsList
                  PsiElement([)('[')
                  SimpleType: S
                    CodeReferenceElement: S
                      PsiElement(identifier)('S')
                  PsiElement(])(']')
            PsiElement(,)(',')
            PsiWhiteSpace(' ')
            TypeParameter: RContainer
              PsiElement(identifier)('RContainer')
              TypeParameterClause
                PsiElement([)('[')
                TypeParameter: x
                  PsiElement(identifier)('x')
                  PsiWhiteSpace(' ')
                  PsiElement(<:)('<:')
                  PsiWhiteSpace(' ')
                  ParametrizedType: RBound[x]
                    SimpleType: RBound
                      CodeReferenceElement: RBound
                        PsiElement(identifier)('RBound')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: x
                        CodeReferenceElement: x
                          PsiElement(identifier)('x')
                      PsiElement(])(']')
                PsiElement(])(']')
            PsiElement(,)(',')
            PsiWhiteSpace(' ')
            TypeParameter: RBound
              PsiElement(identifier)('RBound')
              TypeParameterClause
                PsiElement([)('[')
                TypeParameter: _
                  PsiElement(_)('_')
                PsiElement(])(']')
            PsiElement(,)(',')
            PsiWhiteSpace('\n              ')
            TypeParameter: Result
              PsiElement(identifier)('Result')
              TypeParameterClause
                PsiElement([)('[')
                TypeParameter: x
                  PsiElement(identifier)('x')
                  PsiWhiteSpace(' ')
                  PsiElement(<:)('<:')
                  PsiWhiteSpace(' ')
                  ParametrizedType: RBound[x]
                    SimpleType: RBound
                      CodeReferenceElement: RBound
                        PsiElement(identifier)('RBound')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: x
                        CodeReferenceElement: x
                          PsiElement(identifier)('x')
                      PsiElement(])(']')
                PsiElement(])(']')
              PsiWhiteSpace(' ')
              PsiElement(<:)('<:')
              PsiWhiteSpace(' ')
              ParametrizedType: Monad[x, RContainer, RBound]
                SimpleType: Monad
                  CodeReferenceElement: Monad
                    PsiElement(identifier)('Monad')
                TypeArgumentsList
                  PsiElement([)('[')
                  SimpleType: x
                    CodeReferenceElement: x
                      PsiElement(identifier)('x')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  SimpleType: RContainer
                    CodeReferenceElement: RContainer
                      PsiElement(identifier)('RContainer')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  SimpleType: RBound
                    CodeReferenceElement: RBound
                      PsiElement(identifier)('RBound')
                  PsiElement(])(']')
            PsiElement(])(']')
          PsiWhiteSpace('\n              ')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: f
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('f')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  FunctionalType: T => Result[S]
                    SimpleType: T
                      CodeReferenceElement: T
                        PsiElement(identifier)('T')
                    PsiWhiteSpace(' ')
                    PsiElement(=>)('=>')
                    PsiWhiteSpace(' ')
                    ParametrizedType: Result[S]
                      SimpleType: Result
                        CodeReferenceElement: Result
                          PsiElement(identifier)('Result')
                      TypeArgumentsList
                        PsiElement([)('[')
                        SimpleType: S
                          CodeReferenceElement: S
                            PsiElement(identifier)('S')
                        PsiElement(])(']')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: Result[S]
            SimpleType: Result
              CodeReferenceElement: Result
                PsiElement(identifier)('Result')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: S
                CodeReferenceElement: S
                  PsiElement(identifier)('S')
              PsiElement(])(']')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDeclaration: filter
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('filter')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: p
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('p')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  FunctionalType: T => Boolean
                    SimpleType: T
                      CodeReferenceElement: T
                        PsiElement(identifier)('T')
                    PsiWhiteSpace(' ')
                    PsiElement(=>)('=>')
                    PsiWhiteSpace(' ')
                    SimpleType: Boolean
                      CodeReferenceElement: Boolean
                        PsiElement(identifier)('Boolean')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: MyType[T]
            SimpleType: MyType
              CodeReferenceElement: MyType
                PsiElement(identifier)('MyType')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: T
                CodeReferenceElement: T
                  PsiElement(identifier)('T')
              PsiElement(])(']')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScClass: Set
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Set')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: T
        PsiElement(identifier)('T')
        PsiWhiteSpace(' ')
        PsiElement(<:)('<:')
        PsiWhiteSpace(' ')
        ParametrizedType: Ordered[T]
          SimpleType: Ordered
            CodeReferenceElement: Ordered
              PsiElement(identifier)('Ordered')
          TypeArgumentsList
            PsiElement([)('[')
            SimpleType: T
              CodeReferenceElement: T
                PsiElement(identifier)('T')
            PsiElement(])(']')
      PsiElement(])(']')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          ParametrizedType: Monad[T, Set, Ordered]
            SimpleType: Monad
              CodeReferenceElement: Monad
                PsiElement(identifier)('Monad')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: T
                CodeReferenceElement: T
                  PsiElement(identifier)('T')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              SimpleType: Set
                CodeReferenceElement: Set
                  PsiElement(identifier)('Set')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              SimpleType: Ordered
                CodeReferenceElement: Ordered
                  PsiElement(identifier)('Ordered')
              PsiElement(])(']')
      PsiWhiteSpace(' ')
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: map
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('map')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: S
              PsiElement(identifier)('S')
              PsiWhiteSpace(' ')
              PsiElement(<:)('<:')
              PsiWhiteSpace(' ')
              ParametrizedType: Ordered[S]
                SimpleType: Ordered
                  CodeReferenceElement: Ordered
                    PsiElement(identifier)('Ordered')
                TypeArgumentsList
                  PsiElement([)('[')
                  SimpleType: S
                    CodeReferenceElement: S
                      PsiElement(identifier)('S')
                  PsiElement(])(']')
            PsiElement(])(']')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: f
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('f')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  FunctionalType: T => S
                    SimpleType: T
                      CodeReferenceElement: T
                        PsiElement(identifier)('T')
                    PsiWhiteSpace(' ')
                    PsiElement(=>)('=>')
                    PsiWhiteSpace(' ')
                    SimpleType: S
                      CodeReferenceElement: S
                        PsiElement(identifier)('S')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: Set[S]
            SimpleType: Set
              CodeReferenceElement: Set
                PsiElement(identifier)('Set')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: S
                CodeReferenceElement: S
                  PsiElement(identifier)('S')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: sys.error
              ReferenceExpression: sys
                PsiElement(identifier)('sys')
              PsiElement(.)('.')
              PsiElement(identifier)('error')
            ArgumentList
              PsiElement(()('(')
              StringLiteral
                PsiElement(string content)('"TODO"')
              PsiElement())(')')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: flatMap
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('flatMap')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: S
              PsiElement(identifier)('S')
              PsiWhiteSpace(' ')
              PsiElement(<:)('<:')
              PsiWhiteSpace(' ')
              ParametrizedType: RBound[S]
                SimpleType: RBound
                  CodeReferenceElement: RBound
                    PsiElement(identifier)('RBound')
                TypeArgumentsList
                  PsiElement([)('[')
                  SimpleType: S
                    CodeReferenceElement: S
                      PsiElement(identifier)('S')
                  PsiElement(])(']')
            PsiElement(,)(',')
            PsiWhiteSpace(' ')
            TypeParameter: RContainer
              PsiElement(identifier)('RContainer')
              TypeParameterClause
                PsiElement([)('[')
                TypeParameter: x
                  PsiElement(identifier)('x')
                  PsiWhiteSpace(' ')
                  PsiElement(<:)('<:')
                  PsiWhiteSpace(' ')
                  ParametrizedType: RBound[x]
                    SimpleType: RBound
                      CodeReferenceElement: RBound
                        PsiElement(identifier)('RBound')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: x
                        CodeReferenceElement: x
                          PsiElement(identifier)('x')
                      PsiElement(])(']')
                PsiElement(])(']')
            PsiElement(,)(',')
            PsiWhiteSpace(' ')
            TypeParameter: RBound
              PsiElement(identifier)('RBound')
              TypeParameterClause
                PsiElement([)('[')
                TypeParameter: _
                  PsiElement(_)('_')
                PsiElement(])(']')
            PsiElement(,)(',')
            PsiWhiteSpace('\n              ')
            TypeParameter: Result
              PsiElement(identifier)('Result')
              TypeParameterClause
                PsiElement([)('[')
                TypeParameter: x
                  PsiElement(identifier)('x')
                  PsiWhiteSpace(' ')
                  PsiElement(<:)('<:')
                  PsiWhiteSpace(' ')
                  ParametrizedType: RBound[x]
                    SimpleType: RBound
                      CodeReferenceElement: RBound
                        PsiElement(identifier)('RBound')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: x
                        CodeReferenceElement: x
                          PsiElement(identifier)('x')
                      PsiElement(])(']')
                PsiElement(])(']')
              PsiWhiteSpace(' ')
              PsiElement(<:)('<:')
              PsiWhiteSpace(' ')
              ParametrizedType: Monad[x, RContainer, RBound]
                SimpleType: Monad
                  CodeReferenceElement: Monad
                    PsiElement(identifier)('Monad')
                TypeArgumentsList
                  PsiElement([)('[')
                  SimpleType: x
                    CodeReferenceElement: x
                      PsiElement(identifier)('x')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  SimpleType: RContainer
                    CodeReferenceElement: RContainer
                      PsiElement(identifier)('RContainer')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  SimpleType: RBound
                    CodeReferenceElement: RBound
                      PsiElement(identifier)('RBound')
                  PsiElement(])(']')
            PsiElement(])(']')
          PsiWhiteSpace('\n              ')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: f
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('f')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  FunctionalType: T => Result[S]
                    SimpleType: T
                      CodeReferenceElement: T
                        PsiElement(identifier)('T')
                    PsiWhiteSpace(' ')
                    PsiElement(=>)('=>')
                    PsiWhiteSpace(' ')
                    ParametrizedType: Result[S]
                      SimpleType: Result
                        CodeReferenceElement: Result
                          PsiElement(identifier)('Result')
                      TypeArgumentsList
                        PsiElement([)('[')
                        SimpleType: S
                          CodeReferenceElement: S
                            PsiElement(identifier)('S')
                        PsiElement(])(']')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: Result[S]
            SimpleType: Result
              CodeReferenceElement: Result
                PsiElement(identifier)('Result')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: S
                CodeReferenceElement: S
                  PsiElement(identifier)('S')
              PsiElement(])(']')
          PsiWhiteSpace('  ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: sys.error
              ReferenceExpression: sys
                PsiElement(identifier)('sys')
              PsiElement(.)('.')
              PsiElement(identifier)('error')
            ArgumentList
              PsiElement(()('(')
              StringLiteral
                PsiElement(string content)('"TODO"')
              PsiElement())(')')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: filter
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('filter')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: p
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('p')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  FunctionalType: T => Boolean
                    SimpleType: T
                      CodeReferenceElement: T
                        PsiElement(identifier)('T')
                    PsiWhiteSpace(' ')
                    PsiElement(=>)('=>')
                    PsiWhiteSpace(' ')
                    SimpleType: Boolean
                      CodeReferenceElement: Boolean
                        PsiElement(identifier)('Boolean')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: Set[T]
            SimpleType: Set
              CodeReferenceElement: Set
                PsiElement(identifier)('Set')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: T
                CodeReferenceElement: T
                  PsiElement(identifier)('T')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: sys.error
              ReferenceExpression: sys
                PsiElement(identifier)('sys')
              PsiElement(.)('.')
              PsiElement(identifier)('error')
            ArgumentList
              PsiElement(()('(')
              StringLiteral
                PsiElement(string content)('"TODO"')
              PsiElement())(')')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
