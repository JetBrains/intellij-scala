enum Nat {
  case Zero
  case Succ[N <: Nat](n: N)
}
import Nat._

inline def toInt(inline n: Nat): Int = inline n match {
  case Zero => 0
  case Succ(n1) => toInt(n1) + 1
}

val natTwoA = toInt(Succ[Succ[Zero.type]](Succ(Zero)))
val natTwoB = toInt(Succ(Succ(Zero)): Succ[Succ[Zero.type]])
-----
ScalaFile
  ScEnum: Nat
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(enum)('enum')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Nat')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScEnumCases: Zero
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(case)('case')
          PsiWhiteSpace(' ')
          ScEnumSingletonCase: Zero
            PsiElement(identifier)('Zero')
            ExtendsBlock
              <empty list>
        PsiWhiteSpace('\n  ')
        ScEnumCases: Succ
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(case)('case')
          PsiWhiteSpace(' ')
          ScEnumClassCase: Succ
            PsiElement(identifier)('Succ')
            TypeParameterClause
              PsiElement([)('[')
              TypeParameter: N
                PsiElement(identifier)('N')
                PsiWhiteSpace(' ')
                PsiElement(<:)('<:')
                PsiWhiteSpace(' ')
                SimpleType: Nat
                  CodeReferenceElement: Nat
                    PsiElement(identifier)('Nat')
              PsiElement(])(']')
            PrimaryConstructor
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              Parameters
                ParametersClause
                  PsiElement(()('(')
                  ClassParameter: n
                    AnnotationsList
                      <empty list>
                    Modifiers
                      <empty list>
                    PsiElement(identifier)('n')
                    PsiElement(:)(':')
                    PsiWhiteSpace(' ')
                    ParameterType
                      SimpleType: N
                        CodeReferenceElement: N
                          PsiElement(identifier)('N')
                  PsiElement())(')')
            ExtendsBlock
              <empty list>
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n')
  ScImportStatement
    PsiElement(import)('import')
    PsiWhiteSpace(' ')
    ImportExpression
      CodeReferenceElement: Nat
        PsiElement(identifier)('Nat')
      PsiElement(.)('.')
      PsiElement(_)('_')
  PsiWhiteSpace('\n\n')
  ScFunctionDefinition: toInt
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(inline)('inline')
    PsiWhiteSpace(' ')
    PsiElement(def)('def')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('toInt')
    Parameters
      ParametersClause
        PsiElement(()('(')
        Parameter: n
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(inline)('inline')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('n')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParameterType
            SimpleType: Nat
              CodeReferenceElement: Nat
                PsiElement(identifier)('Nat')
        PsiElement())(')')
    PsiElement(:)(':')
    PsiWhiteSpace(' ')
    SimpleType: Int
      CodeReferenceElement: Int
        PsiElement(identifier)('Int')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    MatchStatement
      PsiElement(inline)('inline')
      PsiWhiteSpace(' ')
      ReferenceExpression: n
        PsiElement(identifier)('n')
      PsiWhiteSpace(' ')
      PsiElement(match)('match')
      PsiWhiteSpace(' ')
      PsiElement({)('{')
      PsiWhiteSpace('\n  ')
      CaseClauses
        CaseClause
          PsiElement(case)('case')
          PsiWhiteSpace(' ')
          StableElementPattern
            ReferenceExpression: Zero
              PsiElement(identifier)('Zero')
          PsiWhiteSpace(' ')
          PsiElement(=>)('=>')
          PsiWhiteSpace(' ')
          BlockOfExpressions
            IntegerLiteral
              PsiElement(integer)('0')
        PsiWhiteSpace('\n  ')
        CaseClause
          PsiElement(case)('case')
          PsiWhiteSpace(' ')
          ConstructorPattern
            CodeReferenceElement: Succ
              PsiElement(identifier)('Succ')
            Pattern Argument List
              PsiElement(()('(')
              ReferencePattern: n1
                PsiElement(identifier)('n1')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(=>)('=>')
          PsiWhiteSpace(' ')
          BlockOfExpressions
            InfixExpression
              MethodCall
                ReferenceExpression: toInt
                  PsiElement(identifier)('toInt')
                ArgumentList
                  PsiElement(()('(')
                  ReferenceExpression: n1
                    PsiElement(identifier)('n1')
                  PsiElement())(')')
              PsiWhiteSpace(' ')
              ReferenceExpression: +
                PsiElement(identifier)('+')
              PsiWhiteSpace(' ')
              IntegerLiteral
                PsiElement(integer)('1')
      PsiWhiteSpace('\n')
      PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScPatternDefinition: natTwoA
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(val)('val')
    PsiWhiteSpace(' ')
    ListOfPatterns
      ReferencePattern: natTwoA
        PsiElement(identifier)('natTwoA')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    MethodCall
      ReferenceExpression: toInt
        PsiElement(identifier)('toInt')
      ArgumentList
        PsiElement(()('(')
        MethodCall
          GenericCall
            ReferenceExpression: Succ
              PsiElement(identifier)('Succ')
            TypeArgumentsList
              PsiElement([)('[')
              ParametrizedType: Succ[Zero.type]
                SimpleType: Succ
                  CodeReferenceElement: Succ
                    PsiElement(identifier)('Succ')
                TypeArgumentsList
                  PsiElement([)('[')
                  SimpleType: Zero.type
                    CodeReferenceElement: Zero
                      PsiElement(identifier)('Zero')
                    PsiElement(.)('.')
                    PsiElement(type)('type')
                  PsiElement(])(']')
              PsiElement(])(']')
          ArgumentList
            PsiElement(()('(')
            MethodCall
              ReferenceExpression: Succ
                PsiElement(identifier)('Succ')
              ArgumentList
                PsiElement(()('(')
                ReferenceExpression: Zero
                  PsiElement(identifier)('Zero')
                PsiElement())(')')
            PsiElement())(')')
        PsiElement())(')')
  PsiWhiteSpace('\n')
  ScPatternDefinition: natTwoB
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(val)('val')
    PsiWhiteSpace(' ')
    ListOfPatterns
      ReferencePattern: natTwoB
        PsiElement(identifier)('natTwoB')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    MethodCall
      ReferenceExpression: toInt
        PsiElement(identifier)('toInt')
      ArgumentList
        PsiElement(()('(')
        TypedExpression
          MethodCall
            ReferenceExpression: Succ
              PsiElement(identifier)('Succ')
            ArgumentList
              PsiElement(()('(')
              MethodCall
                ReferenceExpression: Succ
                  PsiElement(identifier)('Succ')
                ArgumentList
                  PsiElement(()('(')
                  ReferenceExpression: Zero
                    PsiElement(identifier)('Zero')
                  PsiElement())(')')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: Succ[Succ[Zero.type]]
            SimpleType: Succ
              CodeReferenceElement: Succ
                PsiElement(identifier)('Succ')
            TypeArgumentsList
              PsiElement([)('[')
              ParametrizedType: Succ[Zero.type]
                SimpleType: Succ
                  CodeReferenceElement: Succ
                    PsiElement(identifier)('Succ')
                TypeArgumentsList
                  PsiElement([)('[')
                  SimpleType: Zero.type
                    CodeReferenceElement: Zero
                      PsiElement(identifier)('Zero')
                    PsiElement(.)('.')
                    PsiElement(type)('type')
                  PsiElement(])(']')
              PsiElement(])(']')
        PsiElement())(')')
