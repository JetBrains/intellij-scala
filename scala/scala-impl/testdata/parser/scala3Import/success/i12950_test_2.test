import repro.repro.{*, given}

val x = 1.lift[Two]
val _ = x.repro[2]
val y = 1.lift[2]
val _ = y.repro[2]
-----
ScalaFile
  ScImportStatement
    PsiElement(import)('import')
    PsiWhiteSpace(' ')
    ImportExpression
      CodeReferenceElement: repro.repro
        CodeReferenceElement: repro
          PsiElement(identifier)('repro')
        PsiElement(.)('.')
        PsiElement(identifier)('repro')
      PsiElement(.)('.')
      ImportSelectors
        PsiElement({)('{')
        ImportSelector
          PsiElement(*)('*')
        PsiElement(,)(',')
        PsiWhiteSpace(' ')
        ImportSelector
          PsiElement(given)('given')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScPatternDefinition: x
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(val)('val')
    PsiWhiteSpace(' ')
    ListOfPatterns
      ReferencePattern: x
        PsiElement(identifier)('x')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    GenericCall
      ReferenceExpression: 1.lift
        IntegerLiteral
          PsiElement(integer)('1')
        PsiElement(.)('.')
        PsiElement(identifier)('lift')
      TypeArgumentsList
        PsiElement([)('[')
        SimpleType: Two
          CodeReferenceElement: Two
            PsiElement(identifier)('Two')
        PsiElement(])(']')
  PsiWhiteSpace('\n')
  ScPatternDefinition
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(val)('val')
    PsiWhiteSpace(' ')
    ListOfPatterns
      WildcardPattern
        PsiElement(_)('_')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    GenericCall
      ReferenceExpression: x.repro
        ReferenceExpression: x
          PsiElement(identifier)('x')
        PsiElement(.)('.')
        PsiElement(identifier)('repro')
      TypeArgumentsList
        PsiElement([)('[')
        LiteralType: 2
          IntegerLiteral
            PsiElement(integer)('2')
        PsiElement(])(']')
  PsiWhiteSpace('\n')
  ScPatternDefinition: y
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(val)('val')
    PsiWhiteSpace(' ')
    ListOfPatterns
      ReferencePattern: y
        PsiElement(identifier)('y')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    GenericCall
      ReferenceExpression: 1.lift
        IntegerLiteral
          PsiElement(integer)('1')
        PsiElement(.)('.')
        PsiElement(identifier)('lift')
      TypeArgumentsList
        PsiElement([)('[')
        LiteralType: 2
          IntegerLiteral
            PsiElement(integer)('2')
        PsiElement(])(']')
  PsiWhiteSpace('\n')
  ScPatternDefinition
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(val)('val')
    PsiWhiteSpace(' ')
    ListOfPatterns
      WildcardPattern
        PsiElement(_)('_')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    GenericCall
      ReferenceExpression: y.repro
        ReferenceExpression: y
          PsiElement(identifier)('y')
        PsiElement(.)('.')
        PsiElement(identifier)('repro')
      TypeArgumentsList
        PsiElement([)('[')
        LiteralType: 2
          IntegerLiteral
            PsiElement(integer)('2')
        PsiElement(])(']')
