object Foo:
  def unapply[T <: Tuple](tup: T): String *: String *: T =
    "a" *: "b" *: tup

// like {pos,neg}/i15991, but with an abstract tuple tail
class Test:
  val tup2: String *: String *: EmptyTuple = ("c", "d")

  def test2 =
    val Foo(x, y, _, _) = tup2
    x + y

  // like test2, but as the desugaring of what PatternDef's become
  def test2b =
    val x1x = tup2 match
      case Foo(x, y, _, _) =>
        (x, y)
    val x = x1x._1
    val y = x1x._2
    x + y
-----
ScalaFile
  ScObject: Foo
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Foo')
    ExtendsBlock
      ScTemplateBody
        PsiElement(:)(':')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: unapply
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('unapply')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: T
              PsiElement(identifier)('T')
              PsiWhiteSpace(' ')
              PsiElement(<:)('<:')
              PsiWhiteSpace(' ')
              SimpleType: Tuple
                CodeReferenceElement: Tuple
                  PsiElement(identifier)('Tuple')
            PsiElement(])(']')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: tup
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('tup')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: T
                    CodeReferenceElement: T
                      PsiElement(identifier)('T')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          InfixType: String *: String *: T
            SimpleType: String
              CodeReferenceElement: String
                PsiElement(identifier)('String')
            PsiWhiteSpace(' ')
            CodeReferenceElement: *:
              PsiElement(identifier)('*:')
            PsiWhiteSpace(' ')
            InfixType: String *: T
              SimpleType: String
                CodeReferenceElement: String
                  PsiElement(identifier)('String')
              PsiWhiteSpace(' ')
              CodeReferenceElement: *:
                PsiElement(identifier)('*:')
              PsiWhiteSpace(' ')
              SimpleType: T
                CodeReferenceElement: T
                  PsiElement(identifier)('T')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace('\n    ')
          InfixExpression
            StringLiteral
              PsiElement(string content)('"a"')
            PsiWhiteSpace(' ')
            ReferenceExpression: *:
              PsiElement(identifier)('*:')
            PsiWhiteSpace(' ')
            InfixExpression
              StringLiteral
                PsiElement(string content)('"b"')
              PsiWhiteSpace(' ')
              ReferenceExpression: *:
                PsiElement(identifier)('*:')
              PsiWhiteSpace(' ')
              ReferenceExpression: tup
                PsiElement(identifier)('tup')
  PsiWhiteSpace('\n\n')
  ScClass: Test
    PsiComment(comment)('// like {pos,neg}/i15991, but with an abstract tuple tail')
    PsiWhiteSpace('\n')
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    ExtendsBlock
      ScTemplateBody
        PsiElement(:)(':')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: tup2
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: tup2
              PsiElement(identifier)('tup2')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          InfixType: String *: String *: EmptyTuple
            SimpleType: String
              CodeReferenceElement: String
                PsiElement(identifier)('String')
            PsiWhiteSpace(' ')
            CodeReferenceElement: *:
              PsiElement(identifier)('*:')
            PsiWhiteSpace(' ')
            InfixType: String *: EmptyTuple
              SimpleType: String
                CodeReferenceElement: String
                  PsiElement(identifier)('String')
              PsiWhiteSpace(' ')
              CodeReferenceElement: *:
                PsiElement(identifier)('*:')
              PsiWhiteSpace(' ')
              SimpleType: EmptyTuple
                CodeReferenceElement: EmptyTuple
                  PsiElement(identifier)('EmptyTuple')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          Tuple
            PsiElement(()('(')
            StringLiteral
              PsiElement(string content)('"c"')
            PsiElement(,)(',')
            PsiWhiteSpace(' ')
            StringLiteral
              PsiElement(string content)('"d"')
            PsiElement())(')')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: test2
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('test2')
          Parameters
            <empty list>
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          BlockExpression
            PsiWhiteSpace('\n    ')
            ScPatternDefinition: x, y
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              ListOfPatterns
                ConstructorPattern
                  CodeReferenceElement: Foo
                    PsiElement(identifier)('Foo')
                  Pattern Argument List
                    PsiElement(()('(')
                    ReferencePattern: x
                      PsiElement(identifier)('x')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    ReferencePattern: y
                      PsiElement(identifier)('y')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    WildcardPattern
                      PsiElement(_)('_')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    WildcardPattern
                      PsiElement(_)('_')
                    PsiElement())(')')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              ReferenceExpression: tup2
                PsiElement(identifier)('tup2')
            PsiWhiteSpace('\n    ')
            InfixExpression
              ReferenceExpression: x
                PsiElement(identifier)('x')
              PsiWhiteSpace(' ')
              ReferenceExpression: +
                PsiElement(identifier)('+')
              PsiWhiteSpace(' ')
              ReferenceExpression: y
                PsiElement(identifier)('y')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: test2b
          PsiComment(comment)('// like test2, but as the desugaring of what PatternDef's become')
          PsiWhiteSpace('\n  ')
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('test2b')
          Parameters
            <empty list>
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          BlockExpression
            PsiWhiteSpace('\n    ')
            ScPatternDefinition: x1x
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              ListOfPatterns
                ReferencePattern: x1x
                  PsiElement(identifier)('x1x')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              MatchStatement
                ReferenceExpression: tup2
                  PsiElement(identifier)('tup2')
                PsiWhiteSpace(' ')
                PsiElement(match)('match')
                PsiWhiteSpace('\n      ')
                CaseClauses
                  CaseClause
                    PsiElement(case)('case')
                    PsiWhiteSpace(' ')
                    ConstructorPattern
                      CodeReferenceElement: Foo
                        PsiElement(identifier)('Foo')
                      Pattern Argument List
                        PsiElement(()('(')
                        ReferencePattern: x
                          PsiElement(identifier)('x')
                        PsiElement(,)(',')
                        PsiWhiteSpace(' ')
                        ReferencePattern: y
                          PsiElement(identifier)('y')
                        PsiElement(,)(',')
                        PsiWhiteSpace(' ')
                        WildcardPattern
                          PsiElement(_)('_')
                        PsiElement(,)(',')
                        PsiWhiteSpace(' ')
                        WildcardPattern
                          PsiElement(_)('_')
                        PsiElement())(')')
                    PsiWhiteSpace(' ')
                    PsiElement(=>)('=>')
                    PsiWhiteSpace('\n        ')
                    BlockOfExpressions
                      Tuple
                        PsiElement(()('(')
                        ReferenceExpression: x
                          PsiElement(identifier)('x')
                        PsiElement(,)(',')
                        PsiWhiteSpace(' ')
                        ReferenceExpression: y
                          PsiElement(identifier)('y')
                        PsiElement())(')')
            PsiWhiteSpace('\n    ')
            ScPatternDefinition: x
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              ListOfPatterns
                ReferencePattern: x
                  PsiElement(identifier)('x')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              ReferenceExpression: x1x._1
                ReferenceExpression: x1x
                  PsiElement(identifier)('x1x')
                PsiElement(.)('.')
                PsiElement(identifier)('_1')
            PsiWhiteSpace('\n    ')
            ScPatternDefinition: y
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              ListOfPatterns
                ReferencePattern: y
                  PsiElement(identifier)('y')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              ReferenceExpression: x1x._2
                ReferenceExpression: x1x
                  PsiElement(identifier)('x1x')
                PsiElement(.)('.')
                PsiElement(identifier)('_2')
            PsiWhiteSpace('\n    ')
            InfixExpression
              ReferenceExpression: x
                PsiElement(identifier)('x')
              PsiWhiteSpace(' ')
              ReferenceExpression: +
                PsiElement(identifier)('+')
              PsiWhiteSpace(' ')
              ReferenceExpression: y
                PsiElement(identifier)('y')
