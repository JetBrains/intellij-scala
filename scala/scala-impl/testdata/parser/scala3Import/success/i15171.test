case class Expr[+T](get: T)
trait Ctx[F[_]]
sealed trait Selector[F[_]]:
  def appended(base: Expr[SelectLoop[F]]): Expr[SelectLoop[F]]

 // Without Ctx[F] argument it would compile correctly
class SelectLoop[F[_]](using Ctx[F])
object SelectLoop:
  def loopImpl[F[_]](ctx: Ctx[F])(caseDefs: List[Selector[F]]): Expr[Unit] =
    // Adding explicit type :Expr[SelectLoop[F]] satifies the compiler
    val s0 = Expr(new SelectLoop[F](using ctx))
    val g = caseDefs.foldRight(s0)(_.appended(_))
    Expr(())
-----
ScalaFile
  ScClass: Expr
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(case)('case')
    PsiWhiteSpace(' ')
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Expr')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: T
        PsiElement(identifier)('+')
        PsiElement(identifier)('T')
      PsiElement(])(']')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        ParametersClause
          PsiElement(()('(')
          ClassParameter: get
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(identifier)('get')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            ParameterType
              SimpleType: T
                CodeReferenceElement: T
                  PsiElement(identifier)('T')
          PsiElement())(')')
    ExtendsBlock
      <empty list>
  PsiWhiteSpace('\n')
  ScTrait: Ctx
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Ctx')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: F
        PsiElement(identifier)('F')
        TypeParameterClause
          PsiElement([)('[')
          TypeParameter: _
            PsiElement(_)('_')
          PsiElement(])(']')
      PsiElement(])(']')
    ExtendsBlock
      <empty list>
  PsiWhiteSpace('\n')
  ScTrait: Selector
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(sealed)('sealed')
    PsiWhiteSpace(' ')
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Selector')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: F
        PsiElement(identifier)('F')
        TypeParameterClause
          PsiElement([)('[')
          TypeParameter: _
            PsiElement(_)('_')
          PsiElement(])(']')
      PsiElement(])(']')
    ExtendsBlock
      ScTemplateBody
        PsiElement(:)(':')
        PsiWhiteSpace('\n  ')
        ScFunctionDeclaration: appended
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('appended')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: base
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('base')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  ParametrizedType: Expr[SelectLoop[F]]
                    SimpleType: Expr
                      CodeReferenceElement: Expr
                        PsiElement(identifier)('Expr')
                    TypeArgumentsList
                      PsiElement([)('[')
                      ParametrizedType: SelectLoop[F]
                        SimpleType: SelectLoop
                          CodeReferenceElement: SelectLoop
                            PsiElement(identifier)('SelectLoop')
                        TypeArgumentsList
                          PsiElement([)('[')
                          SimpleType: F
                            CodeReferenceElement: F
                              PsiElement(identifier)('F')
                          PsiElement(])(']')
                      PsiElement(])(']')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: Expr[SelectLoop[F]]
            SimpleType: Expr
              CodeReferenceElement: Expr
                PsiElement(identifier)('Expr')
            TypeArgumentsList
              PsiElement([)('[')
              ParametrizedType: SelectLoop[F]
                SimpleType: SelectLoop
                  CodeReferenceElement: SelectLoop
                    PsiElement(identifier)('SelectLoop')
                TypeArgumentsList
                  PsiElement([)('[')
                  SimpleType: F
                    CodeReferenceElement: F
                      PsiElement(identifier)('F')
                  PsiElement(])(']')
              PsiElement(])(']')
  PsiWhiteSpace('\n\n ')
  ScClass: SelectLoop
    PsiComment(comment)('// Without Ctx[F] argument it would compile correctly')
    PsiWhiteSpace('\n')
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('SelectLoop')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: F
        PsiElement(identifier)('F')
        TypeParameterClause
          PsiElement([)('[')
          TypeParameter: _
            PsiElement(_)('_')
          PsiElement(])(']')
      PsiElement(])(']')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        ParametersClause
          PsiElement(()('(')
          PsiElement(using)('using')
          PsiWhiteSpace(' ')
          ClassParameter: x$1
            ParameterType
              ParametrizedType: Ctx[F]
                SimpleType: Ctx
                  CodeReferenceElement: Ctx
                    PsiElement(identifier)('Ctx')
                TypeArgumentsList
                  PsiElement([)('[')
                  SimpleType: F
                    CodeReferenceElement: F
                      PsiElement(identifier)('F')
                  PsiElement(])(']')
          PsiElement())(')')
    ExtendsBlock
      <empty list>
  PsiWhiteSpace('\n')
  ScObject: SelectLoop
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('SelectLoop')
    ExtendsBlock
      ScTemplateBody
        PsiElement(:)(':')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: loopImpl
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('loopImpl')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: F
              PsiElement(identifier)('F')
              TypeParameterClause
                PsiElement([)('[')
                TypeParameter: _
                  PsiElement(_)('_')
                PsiElement(])(']')
            PsiElement(])(']')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: ctx
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('ctx')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  ParametrizedType: Ctx[F]
                    SimpleType: Ctx
                      CodeReferenceElement: Ctx
                        PsiElement(identifier)('Ctx')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: F
                        CodeReferenceElement: F
                          PsiElement(identifier)('F')
                      PsiElement(])(']')
              PsiElement())(')')
            ParametersClause
              PsiElement(()('(')
              Parameter: caseDefs
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('caseDefs')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  ParametrizedType: List[Selector[F]]
                    SimpleType: List
                      CodeReferenceElement: List
                        PsiElement(identifier)('List')
                    TypeArgumentsList
                      PsiElement([)('[')
                      ParametrizedType: Selector[F]
                        SimpleType: Selector
                          CodeReferenceElement: Selector
                            PsiElement(identifier)('Selector')
                        TypeArgumentsList
                          PsiElement([)('[')
                          SimpleType: F
                            CodeReferenceElement: F
                              PsiElement(identifier)('F')
                          PsiElement(])(']')
                      PsiElement(])(']')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: Expr[Unit]
            SimpleType: Expr
              CodeReferenceElement: Expr
                PsiElement(identifier)('Expr')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: Unit
                CodeReferenceElement: Unit
                  PsiElement(identifier)('Unit')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          BlockExpression
            PsiWhiteSpace('\n    ')
            ScPatternDefinition: s0
              PsiComment(comment)('// Adding explicit type :Expr[SelectLoop[F]] satifies the compiler')
              PsiWhiteSpace('\n    ')
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              ListOfPatterns
                ReferencePattern: s0
                  PsiElement(identifier)('s0')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              MethodCall
                ReferenceExpression: Expr
                  PsiElement(identifier)('Expr')
                ArgumentList
                  PsiElement(()('(')
                  ScNewTemplateDefinition: <anonymous>
                    PsiElement(new)('new')
                    PsiWhiteSpace(' ')
                    ExtendsBlock
                      TemplateParents
                        ConstructorInvocation
                          ParametrizedType: SelectLoop[F]
                            SimpleType: SelectLoop
                              CodeReferenceElement: SelectLoop
                                PsiElement(identifier)('SelectLoop')
                            TypeArgumentsList
                              PsiElement([)('[')
                              SimpleType: F
                                CodeReferenceElement: F
                                  PsiElement(identifier)('F')
                              PsiElement(])(']')
                          ArgumentList
                            PsiElement(()('(')
                            PsiElement(using)('using')
                            PsiWhiteSpace(' ')
                            ReferenceExpression: ctx
                              PsiElement(identifier)('ctx')
                            PsiElement())(')')
                  PsiElement())(')')
            PsiWhiteSpace('\n    ')
            ScPatternDefinition: g
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              ListOfPatterns
                ReferencePattern: g
                  PsiElement(identifier)('g')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              MethodCall
                MethodCall
                  ReferenceExpression: caseDefs.foldRight
                    ReferenceExpression: caseDefs
                      PsiElement(identifier)('caseDefs')
                    PsiElement(.)('.')
                    PsiElement(identifier)('foldRight')
                  ArgumentList
                    PsiElement(()('(')
                    ReferenceExpression: s0
                      PsiElement(identifier)('s0')
                    PsiElement())(')')
                ArgumentList
                  PsiElement(()('(')
                  MethodCall
                    ReferenceExpression: _.appended
                      UnderscoreSection
                        PsiElement(_)('_')
                      PsiElement(.)('.')
                      PsiElement(identifier)('appended')
                    ArgumentList
                      PsiElement(()('(')
                      UnderscoreSection
                        PsiElement(_)('_')
                      PsiElement())(')')
                  PsiElement())(')')
            PsiWhiteSpace('\n    ')
            MethodCall
              ReferenceExpression: Expr
                PsiElement(identifier)('Expr')
              ArgumentList
                PsiElement(()('(')
                UnitExpression
                  PsiElement(()('(')
                  PsiElement())(')')
                PsiElement())(')')
