sealed trait HList
sealed trait HNil extends HList
sealed trait ::[+H, +T <: HList] extends HList

case class Size[L <: HList](value: Int)

object Size {
  implicit val caseHNil: Size[HNil] = Size(0)
  implicit def caseHCons[H, T <: HList](implicit e: Size[T]): Size[H :: T] = Size(e.value + 1)
}

object HListTest {
  def main(args: Array[String]): Unit = {
    assert(implicitly[Size[HNil]].value == 0)
    assert(implicitly[Size[Int :: HNil]].value == 1)
    assert(implicitly[Size[Int :: Int :: HNil]].value == 2)
    assert(implicitly[Size[Int :: Int :: Int :: HNil]].value == 3)
  }
}
-----
ScalaFile
  ScTrait: HList
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(sealed)('sealed')
    PsiWhiteSpace(' ')
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('HList')
    ExtendsBlock
      <empty list>
  PsiWhiteSpace('\n')
  ScTrait: HNil
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(sealed)('sealed')
    PsiWhiteSpace(' ')
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('HNil')
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          SimpleType: HList
            CodeReferenceElement: HList
              PsiElement(identifier)('HList')
  PsiWhiteSpace('\n')
  ScTrait: ::
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(sealed)('sealed')
    PsiWhiteSpace(' ')
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('::')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: H
        PsiElement(identifier)('+')
        PsiElement(identifier)('H')
      PsiElement(,)(',')
      PsiWhiteSpace(' ')
      TypeParameter: T
        PsiElement(identifier)('+')
        PsiElement(identifier)('T')
        PsiWhiteSpace(' ')
        PsiElement(<:)('<:')
        PsiWhiteSpace(' ')
        SimpleType: HList
          CodeReferenceElement: HList
            PsiElement(identifier)('HList')
      PsiElement(])(']')
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          SimpleType: HList
            CodeReferenceElement: HList
              PsiElement(identifier)('HList')
  PsiWhiteSpace('\n\n')
  ScClass: Size
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(case)('case')
    PsiWhiteSpace(' ')
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Size')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: L
        PsiElement(identifier)('L')
        PsiWhiteSpace(' ')
        PsiElement(<:)('<:')
        PsiWhiteSpace(' ')
        SimpleType: HList
          CodeReferenceElement: HList
            PsiElement(identifier)('HList')
      PsiElement(])(']')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        ParametersClause
          PsiElement(()('(')
          ClassParameter: value
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(identifier)('value')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            ParameterType
              SimpleType: Int
                CodeReferenceElement: Int
                  PsiElement(identifier)('Int')
          PsiElement())(')')
    ExtendsBlock
      <empty list>
  PsiWhiteSpace('\n\n')
  ScObject: Size
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Size')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: caseHNil
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(implicit)('implicit')
          PsiWhiteSpace(' ')
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: caseHNil
              PsiElement(identifier)('caseHNil')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: Size[HNil]
            SimpleType: Size
              CodeReferenceElement: Size
                PsiElement(identifier)('Size')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: HNil
                CodeReferenceElement: HNil
                  PsiElement(identifier)('HNil')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: Size
              PsiElement(identifier)('Size')
            ArgumentList
              PsiElement(()('(')
              IntegerLiteral
                PsiElement(integer)('0')
              PsiElement())(')')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: caseHCons
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(implicit)('implicit')
          PsiWhiteSpace(' ')
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('caseHCons')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: H
              PsiElement(identifier)('H')
            PsiElement(,)(',')
            PsiWhiteSpace(' ')
            TypeParameter: T
              PsiElement(identifier)('T')
              PsiWhiteSpace(' ')
              PsiElement(<:)('<:')
              PsiWhiteSpace(' ')
              SimpleType: HList
                CodeReferenceElement: HList
                  PsiElement(identifier)('HList')
            PsiElement(])(']')
          Parameters
            ParametersClause
              PsiElement(()('(')
              PsiElement(implicit)('implicit')
              PsiWhiteSpace(' ')
              Parameter: e
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('e')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  ParametrizedType: Size[T]
                    SimpleType: Size
                      CodeReferenceElement: Size
                        PsiElement(identifier)('Size')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: T
                        CodeReferenceElement: T
                          PsiElement(identifier)('T')
                      PsiElement(])(']')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: Size[H :: T]
            SimpleType: Size
              CodeReferenceElement: Size
                PsiElement(identifier)('Size')
            TypeArgumentsList
              PsiElement([)('[')
              InfixType: H :: T
                SimpleType: H
                  CodeReferenceElement: H
                    PsiElement(identifier)('H')
                PsiWhiteSpace(' ')
                CodeReferenceElement: ::
                  PsiElement(identifier)('::')
                PsiWhiteSpace(' ')
                SimpleType: T
                  CodeReferenceElement: T
                    PsiElement(identifier)('T')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: Size
              PsiElement(identifier)('Size')
            ArgumentList
              PsiElement(()('(')
              InfixExpression
                ReferenceExpression: e.value
                  ReferenceExpression: e
                    PsiElement(identifier)('e')
                  PsiElement(.)('.')
                  PsiElement(identifier)('value')
                PsiWhiteSpace(' ')
                ReferenceExpression: +
                  PsiElement(identifier)('+')
                PsiWhiteSpace(' ')
                IntegerLiteral
                  PsiElement(integer)('1')
              PsiElement())(')')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScObject: HListTest
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('HListTest')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: main
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('main')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: args
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('args')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  ParametrizedType: Array[String]
                    SimpleType: Array
                      CodeReferenceElement: Array
                        PsiElement(identifier)('Array')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: String
                        CodeReferenceElement: String
                          PsiElement(identifier)('String')
                      PsiElement(])(']')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Unit
            CodeReferenceElement: Unit
              PsiElement(identifier)('Unit')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          BlockExpression
            PsiElement({)('{')
            PsiWhiteSpace('\n    ')
            MethodCall
              ReferenceExpression: assert
                PsiElement(identifier)('assert')
              ArgumentList
                PsiElement(()('(')
                InfixExpression
                  ReferenceExpression: implicitly[Size[HNil]].value
                    GenericCall
                      ReferenceExpression: implicitly
                        PsiElement(identifier)('implicitly')
                      TypeArgumentsList
                        PsiElement([)('[')
                        ParametrizedType: Size[HNil]
                          SimpleType: Size
                            CodeReferenceElement: Size
                              PsiElement(identifier)('Size')
                          TypeArgumentsList
                            PsiElement([)('[')
                            SimpleType: HNil
                              CodeReferenceElement: HNil
                                PsiElement(identifier)('HNil')
                            PsiElement(])(']')
                        PsiElement(])(']')
                    PsiElement(.)('.')
                    PsiElement(identifier)('value')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: ==
                    PsiElement(identifier)('==')
                  PsiWhiteSpace(' ')
                  IntegerLiteral
                    PsiElement(integer)('0')
                PsiElement())(')')
            PsiWhiteSpace('\n    ')
            MethodCall
              ReferenceExpression: assert
                PsiElement(identifier)('assert')
              ArgumentList
                PsiElement(()('(')
                InfixExpression
                  ReferenceExpression: implicitly[Size[Int :: HNil]].value
                    GenericCall
                      ReferenceExpression: implicitly
                        PsiElement(identifier)('implicitly')
                      TypeArgumentsList
                        PsiElement([)('[')
                        ParametrizedType: Size[Int :: HNil]
                          SimpleType: Size
                            CodeReferenceElement: Size
                              PsiElement(identifier)('Size')
                          TypeArgumentsList
                            PsiElement([)('[')
                            InfixType: Int :: HNil
                              SimpleType: Int
                                CodeReferenceElement: Int
                                  PsiElement(identifier)('Int')
                              PsiWhiteSpace(' ')
                              CodeReferenceElement: ::
                                PsiElement(identifier)('::')
                              PsiWhiteSpace(' ')
                              SimpleType: HNil
                                CodeReferenceElement: HNil
                                  PsiElement(identifier)('HNil')
                            PsiElement(])(']')
                        PsiElement(])(']')
                    PsiElement(.)('.')
                    PsiElement(identifier)('value')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: ==
                    PsiElement(identifier)('==')
                  PsiWhiteSpace(' ')
                  IntegerLiteral
                    PsiElement(integer)('1')
                PsiElement())(')')
            PsiWhiteSpace('\n    ')
            MethodCall
              ReferenceExpression: assert
                PsiElement(identifier)('assert')
              ArgumentList
                PsiElement(()('(')
                InfixExpression
                  ReferenceExpression: implicitly[Size[Int :: Int :: HNil]].value
                    GenericCall
                      ReferenceExpression: implicitly
                        PsiElement(identifier)('implicitly')
                      TypeArgumentsList
                        PsiElement([)('[')
                        ParametrizedType: Size[Int :: Int :: HNil]
                          SimpleType: Size
                            CodeReferenceElement: Size
                              PsiElement(identifier)('Size')
                          TypeArgumentsList
                            PsiElement([)('[')
                            InfixType: Int :: Int :: HNil
                              SimpleType: Int
                                CodeReferenceElement: Int
                                  PsiElement(identifier)('Int')
                              PsiWhiteSpace(' ')
                              CodeReferenceElement: ::
                                PsiElement(identifier)('::')
                              PsiWhiteSpace(' ')
                              InfixType: Int :: HNil
                                SimpleType: Int
                                  CodeReferenceElement: Int
                                    PsiElement(identifier)('Int')
                                PsiWhiteSpace(' ')
                                CodeReferenceElement: ::
                                  PsiElement(identifier)('::')
                                PsiWhiteSpace(' ')
                                SimpleType: HNil
                                  CodeReferenceElement: HNil
                                    PsiElement(identifier)('HNil')
                            PsiElement(])(']')
                        PsiElement(])(']')
                    PsiElement(.)('.')
                    PsiElement(identifier)('value')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: ==
                    PsiElement(identifier)('==')
                  PsiWhiteSpace(' ')
                  IntegerLiteral
                    PsiElement(integer)('2')
                PsiElement())(')')
            PsiWhiteSpace('\n    ')
            MethodCall
              ReferenceExpression: assert
                PsiElement(identifier)('assert')
              ArgumentList
                PsiElement(()('(')
                InfixExpression
                  ReferenceExpression: implicitly[Size[Int :: Int :: Int :: HNil]].value
                    GenericCall
                      ReferenceExpression: implicitly
                        PsiElement(identifier)('implicitly')
                      TypeArgumentsList
                        PsiElement([)('[')
                        ParametrizedType: Size[Int :: Int :: Int :: HNil]
                          SimpleType: Size
                            CodeReferenceElement: Size
                              PsiElement(identifier)('Size')
                          TypeArgumentsList
                            PsiElement([)('[')
                            InfixType: Int :: Int :: Int :: HNil
                              SimpleType: Int
                                CodeReferenceElement: Int
                                  PsiElement(identifier)('Int')
                              PsiWhiteSpace(' ')
                              CodeReferenceElement: ::
                                PsiElement(identifier)('::')
                              PsiWhiteSpace(' ')
                              InfixType: Int :: Int :: HNil
                                SimpleType: Int
                                  CodeReferenceElement: Int
                                    PsiElement(identifier)('Int')
                                PsiWhiteSpace(' ')
                                CodeReferenceElement: ::
                                  PsiElement(identifier)('::')
                                PsiWhiteSpace(' ')
                                InfixType: Int :: HNil
                                  SimpleType: Int
                                    CodeReferenceElement: Int
                                      PsiElement(identifier)('Int')
                                  PsiWhiteSpace(' ')
                                  CodeReferenceElement: ::
                                    PsiElement(identifier)('::')
                                  PsiWhiteSpace(' ')
                                  SimpleType: HNil
                                    CodeReferenceElement: HNil
                                      PsiElement(identifier)('HNil')
                            PsiElement(])(']')
                        PsiElement(])(']')
                    PsiElement(.)('.')
                    PsiElement(identifier)('value')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: ==
                    PsiElement(identifier)('==')
                  PsiWhiteSpace(' ')
                  IntegerLiteral
                    PsiElement(integer)('3')
                PsiElement())(')')
            PsiWhiteSpace('\n  ')
            PsiElement(})('}')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
