trait Scope:
  type Expr[+T]

def exprQuote[T](x: T)(using s: Scope, dummy: Null = null): s.Expr[T] = ???
def exprQuote[T <: Singleton](x: T)(using s: Scope): s.Expr[T] = ???

def test(using s: Scope): Unit =
  val t1: s.Expr[1] = exprQuote(1)
  val t2 = exprQuote(1)
  val t3: s.Expr[1] = t2
-----
ScalaFile
  ScTrait: Scope
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Scope')
    ExtendsBlock
      ScTemplateBody
        PsiElement(:)(':')
        PsiWhiteSpace('\n  ')
        ScTypeAliasDeclaration: Expr
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Expr')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: T
              PsiElement(identifier)('+')
              PsiElement(identifier)('T')
            PsiElement(])(']')
  PsiWhiteSpace('\n\n')
  ScFunctionDefinition: exprQuote
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(def)('def')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('exprQuote')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: T
        PsiElement(identifier)('T')
      PsiElement(])(']')
    Parameters
      ParametersClause
        PsiElement(()('(')
        Parameter: x
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(identifier)('x')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParameterType
            SimpleType: T
              CodeReferenceElement: T
                PsiElement(identifier)('T')
        PsiElement())(')')
      ParametersClause
        PsiElement(()('(')
        PsiElement(using)('using')
        PsiWhiteSpace(' ')
        Parameter: s
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(identifier)('s')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParameterType
            SimpleType: Scope
              CodeReferenceElement: Scope
                PsiElement(identifier)('Scope')
        PsiElement(,)(',')
        PsiWhiteSpace(' ')
        Parameter: dummy
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(identifier)('dummy')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParameterType
            SimpleType: Null
              CodeReferenceElement: Null
                PsiElement(identifier)('Null')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          NullLiteral
            PsiElement(null)('null')
        PsiElement())(')')
    PsiElement(:)(':')
    PsiWhiteSpace(' ')
    ParametrizedType: s.Expr[T]
      SimpleType: s.Expr
        CodeReferenceElement: s.Expr
          CodeReferenceElement: s
            PsiElement(identifier)('s')
          PsiElement(.)('.')
          PsiElement(identifier)('Expr')
      TypeArgumentsList
        PsiElement([)('[')
        SimpleType: T
          CodeReferenceElement: T
            PsiElement(identifier)('T')
        PsiElement(])(']')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    ReferenceExpression: ???
      PsiElement(identifier)('???')
  PsiWhiteSpace('\n')
  ScFunctionDefinition: exprQuote
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(def)('def')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('exprQuote')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: T
        PsiElement(identifier)('T')
        PsiWhiteSpace(' ')
        PsiElement(<:)('<:')
        PsiWhiteSpace(' ')
        SimpleType: Singleton
          CodeReferenceElement: Singleton
            PsiElement(identifier)('Singleton')
      PsiElement(])(']')
    Parameters
      ParametersClause
        PsiElement(()('(')
        Parameter: x
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(identifier)('x')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParameterType
            SimpleType: T
              CodeReferenceElement: T
                PsiElement(identifier)('T')
        PsiElement())(')')
      ParametersClause
        PsiElement(()('(')
        PsiElement(using)('using')
        PsiWhiteSpace(' ')
        Parameter: s
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(identifier)('s')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParameterType
            SimpleType: Scope
              CodeReferenceElement: Scope
                PsiElement(identifier)('Scope')
        PsiElement())(')')
    PsiElement(:)(':')
    PsiWhiteSpace(' ')
    ParametrizedType: s.Expr[T]
      SimpleType: s.Expr
        CodeReferenceElement: s.Expr
          CodeReferenceElement: s
            PsiElement(identifier)('s')
          PsiElement(.)('.')
          PsiElement(identifier)('Expr')
      TypeArgumentsList
        PsiElement([)('[')
        SimpleType: T
          CodeReferenceElement: T
            PsiElement(identifier)('T')
        PsiElement(])(']')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    ReferenceExpression: ???
      PsiElement(identifier)('???')
  PsiWhiteSpace('\n\n')
  ScFunctionDefinition: test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(def)('def')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('test')
    Parameters
      ParametersClause
        PsiElement(()('(')
        PsiElement(using)('using')
        PsiWhiteSpace(' ')
        Parameter: s
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(identifier)('s')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParameterType
            SimpleType: Scope
              CodeReferenceElement: Scope
                PsiElement(identifier)('Scope')
        PsiElement())(')')
    PsiElement(:)(':')
    PsiWhiteSpace(' ')
    SimpleType: Unit
      CodeReferenceElement: Unit
        PsiElement(identifier)('Unit')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    BlockExpression
      PsiWhiteSpace('\n  ')
      ScPatternDefinition: t1
        AnnotationsList
          <empty list>
        Modifiers
          <empty list>
        PsiElement(val)('val')
        PsiWhiteSpace(' ')
        ListOfPatterns
          ReferencePattern: t1
            PsiElement(identifier)('t1')
        PsiElement(:)(':')
        PsiWhiteSpace(' ')
        ParametrizedType: s.Expr[1]
          SimpleType: s.Expr
            CodeReferenceElement: s.Expr
              CodeReferenceElement: s
                PsiElement(identifier)('s')
              PsiElement(.)('.')
              PsiElement(identifier)('Expr')
          TypeArgumentsList
            PsiElement([)('[')
            LiteralType: 1
              IntegerLiteral
                PsiElement(integer)('1')
            PsiElement(])(']')
        PsiWhiteSpace(' ')
        PsiElement(=)('=')
        PsiWhiteSpace(' ')
        MethodCall
          ReferenceExpression: exprQuote
            PsiElement(identifier)('exprQuote')
          ArgumentList
            PsiElement(()('(')
            IntegerLiteral
              PsiElement(integer)('1')
            PsiElement())(')')
      PsiWhiteSpace('\n  ')
      ScPatternDefinition: t2
        AnnotationsList
          <empty list>
        Modifiers
          <empty list>
        PsiElement(val)('val')
        PsiWhiteSpace(' ')
        ListOfPatterns
          ReferencePattern: t2
            PsiElement(identifier)('t2')
        PsiWhiteSpace(' ')
        PsiElement(=)('=')
        PsiWhiteSpace(' ')
        MethodCall
          ReferenceExpression: exprQuote
            PsiElement(identifier)('exprQuote')
          ArgumentList
            PsiElement(()('(')
            IntegerLiteral
              PsiElement(integer)('1')
            PsiElement())(')')
      PsiWhiteSpace('\n  ')
      ScPatternDefinition: t3
        AnnotationsList
          <empty list>
        Modifiers
          <empty list>
        PsiElement(val)('val')
        PsiWhiteSpace(' ')
        ListOfPatterns
          ReferencePattern: t3
            PsiElement(identifier)('t3')
        PsiElement(:)(':')
        PsiWhiteSpace(' ')
        ParametrizedType: s.Expr[1]
          SimpleType: s.Expr
            CodeReferenceElement: s.Expr
              CodeReferenceElement: s
                PsiElement(identifier)('s')
              PsiElement(.)('.')
              PsiElement(identifier)('Expr')
          TypeArgumentsList
            PsiElement([)('[')
            LiteralType: 1
              IntegerLiteral
                PsiElement(integer)('1')
            PsiElement(])(']')
        PsiWhiteSpace(' ')
        PsiElement(=)('=')
        PsiWhiteSpace(' ')
        ReferenceExpression: t2
          PsiElement(identifier)('t2')
