package p

private val x = 10

val y = x

private[p] val xx = 10

val yy = xx

private class C {
  val z = x
}

-----
ScalaFile
  ScPackaging
    PsiElement(package)('package')
    PsiWhiteSpace(' ')
    CodeReferenceElement: p
      PsiElement(identifier)('p')
    PsiWhiteSpace('\n\n')
    ScPatternDefinition: x
      AnnotationsList
        <empty list>
      Modifiers
        AccessModifier
          PsiElement(private)('private')
      PsiWhiteSpace(' ')
      PsiElement(val)('val')
      PsiWhiteSpace(' ')
      ListOfPatterns
        ReferencePattern: x
          PsiElement(identifier)('x')
      PsiWhiteSpace(' ')
      PsiElement(=)('=')
      PsiWhiteSpace(' ')
      IntegerLiteral
        PsiElement(integer)('10')
    PsiWhiteSpace('\n\n')
    ScPatternDefinition: y
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      PsiElement(val)('val')
      PsiWhiteSpace(' ')
      ListOfPatterns
        ReferencePattern: y
          PsiElement(identifier)('y')
      PsiWhiteSpace(' ')
      PsiElement(=)('=')
      PsiWhiteSpace(' ')
      ReferenceExpression: x
        PsiElement(identifier)('x')
    PsiWhiteSpace('\n\n')
    ScPatternDefinition: xx
      AnnotationsList
        <empty list>
      Modifiers
        AccessModifier
          PsiElement(private)('private')
          PsiElement([)('[')
          PsiElement(identifier)('p')
          PsiElement(])(']')
      PsiWhiteSpace(' ')
      PsiElement(val)('val')
      PsiWhiteSpace(' ')
      ListOfPatterns
        ReferencePattern: xx
          PsiElement(identifier)('xx')
      PsiWhiteSpace(' ')
      PsiElement(=)('=')
      PsiWhiteSpace(' ')
      IntegerLiteral
        PsiElement(integer)('10')
    PsiWhiteSpace('\n\n')
    ScPatternDefinition: yy
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      PsiElement(val)('val')
      PsiWhiteSpace(' ')
      ListOfPatterns
        ReferencePattern: yy
          PsiElement(identifier)('yy')
      PsiWhiteSpace(' ')
      PsiElement(=)('=')
      PsiWhiteSpace(' ')
      ReferenceExpression: xx
        PsiElement(identifier)('xx')
    PsiWhiteSpace('\n\n')
    ScClass: C
      AnnotationsList
        <empty list>
      Modifiers
        AccessModifier
          PsiElement(private)('private')
      PsiWhiteSpace(' ')
      PsiElement(class)('class')
      PsiWhiteSpace(' ')
      PsiElement(identifier)('C')
      PrimaryConstructor
        AnnotationsList
          <empty list>
        Modifiers
          <empty list>
        Parameters
          <empty list>
      PsiWhiteSpace(' ')
      ExtendsBlock
        ScTemplateBody
          PsiElement({)('{')
          PsiWhiteSpace('\n  ')
          ScPatternDefinition: z
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(val)('val')
            PsiWhiteSpace(' ')
            ListOfPatterns
              ReferencePattern: z
                PsiElement(identifier)('z')
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace(' ')
            ReferenceExpression: x
              PsiElement(identifier)('x')
          PsiWhiteSpace('\n')
          PsiElement(})('}')
