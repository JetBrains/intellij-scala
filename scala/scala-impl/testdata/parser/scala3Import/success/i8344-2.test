sealed trait Datatype[T]
case class Foo[T <: Tuple](elems: Tuple.Map[T, Datatype]) extends Datatype[T]

def g =
  val tt: Datatype[_] = ???
  tt match {
    case Foo(_) => ???
  }
-----
ScalaFile
  ScTrait: Datatype
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(sealed)('sealed')
    PsiWhiteSpace(' ')
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Datatype')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: T
        PsiElement(identifier)('T')
      PsiElement(])(']')
    ExtendsBlock
      <empty list>
  PsiWhiteSpace('\n')
  ScClass: Foo
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(case)('case')
    PsiWhiteSpace(' ')
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Foo')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: T
        PsiElement(identifier)('T')
        PsiWhiteSpace(' ')
        PsiElement(<:)('<:')
        PsiWhiteSpace(' ')
        SimpleType: Tuple
          CodeReferenceElement: Tuple
            PsiElement(identifier)('Tuple')
      PsiElement(])(']')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        ParametersClause
          PsiElement(()('(')
          ClassParameter: elems
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(identifier)('elems')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            ParameterType
              ParametrizedType: Tuple.Map[T, Datatype]
                SimpleType: Tuple.Map
                  CodeReferenceElement: Tuple.Map
                    CodeReferenceElement: Tuple
                      PsiElement(identifier)('Tuple')
                    PsiElement(.)('.')
                    PsiElement(identifier)('Map')
                TypeArgumentsList
                  PsiElement([)('[')
                  SimpleType: T
                    CodeReferenceElement: T
                      PsiElement(identifier)('T')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  SimpleType: Datatype
                    CodeReferenceElement: Datatype
                      PsiElement(identifier)('Datatype')
                  PsiElement(])(']')
          PsiElement())(')')
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          ParametrizedType: Datatype[T]
            SimpleType: Datatype
              CodeReferenceElement: Datatype
                PsiElement(identifier)('Datatype')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: T
                CodeReferenceElement: T
                  PsiElement(identifier)('T')
              PsiElement(])(']')
  PsiWhiteSpace('\n\n')
  ScFunctionDefinition: g
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(def)('def')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('g')
    Parameters
      <empty list>
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    BlockExpression
      PsiWhiteSpace('\n  ')
      ScPatternDefinition: tt
        AnnotationsList
          <empty list>
        Modifiers
          <empty list>
        PsiElement(val)('val')
        PsiWhiteSpace(' ')
        ListOfPatterns
          ReferencePattern: tt
            PsiElement(identifier)('tt')
        PsiElement(:)(':')
        PsiWhiteSpace(' ')
        ParametrizedType: Datatype[_]
          SimpleType: Datatype
            CodeReferenceElement: Datatype
              PsiElement(identifier)('Datatype')
          TypeArgumentsList
            PsiElement([)('[')
            WildcardType: _
              PsiElement(_)('_')
            PsiElement(])(']')
        PsiWhiteSpace(' ')
        PsiElement(=)('=')
        PsiWhiteSpace(' ')
        ReferenceExpression: ???
          PsiElement(identifier)('???')
      PsiWhiteSpace('\n  ')
      MatchStatement
        ReferenceExpression: tt
          PsiElement(identifier)('tt')
        PsiWhiteSpace(' ')
        PsiElement(match)('match')
        PsiWhiteSpace(' ')
        PsiElement({)('{')
        PsiWhiteSpace('\n    ')
        CaseClauses
          CaseClause
            PsiElement(case)('case')
            PsiWhiteSpace(' ')
            ConstructorPattern
              CodeReferenceElement: Foo
                PsiElement(identifier)('Foo')
              Pattern Argument List
                PsiElement(()('(')
                WildcardPattern
                  PsiElement(_)('_')
                PsiElement())(')')
            PsiWhiteSpace(' ')
            PsiElement(=>)('=>')
            PsiWhiteSpace(' ')
            BlockOfExpressions
              ReferenceExpression: ???
                PsiElement(identifier)('???')
        PsiWhiteSpace('\n  ')
        PsiElement(})('}')
