object o:

  private[o] trait A
  trait B
  class C extends A, B
  class D extends A, B

def test =
  def f[T](x: T): T => T = identity
  val g = f(if ??? then o.C() else o.D())
  g(new o.B{})


-----
ScalaFile
  ScObject: o
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('o')
    ExtendsBlock
      ScTemplateBody
        PsiElement(:)(':')
        PsiWhiteSpace('\n\n  ')
        ScTrait: A
          AnnotationsList
            <empty list>
          Modifiers
            AccessModifier
              PsiElement(private)('private')
              PsiElement([)('[')
              PsiElement(identifier)('o')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(trait)('trait')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('A')
          ExtendsBlock
            <empty list>
        PsiWhiteSpace('\n  ')
        ScTrait: B
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(trait)('trait')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('B')
          ExtendsBlock
            <empty list>
        PsiWhiteSpace('\n  ')
        ScClass: C
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(class)('class')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('C')
          PrimaryConstructor
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            Parameters
              <empty list>
          PsiWhiteSpace(' ')
          ExtendsBlock
            PsiElement(extends)('extends')
            PsiWhiteSpace(' ')
            TemplateParents
              ConstructorInvocation
                SimpleType: A
                  CodeReferenceElement: A
                    PsiElement(identifier)('A')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              ConstructorInvocation
                SimpleType: B
                  CodeReferenceElement: B
                    PsiElement(identifier)('B')
        PsiWhiteSpace('\n  ')
        ScClass: D
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(class)('class')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('D')
          PrimaryConstructor
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            Parameters
              <empty list>
          PsiWhiteSpace(' ')
          ExtendsBlock
            PsiElement(extends)('extends')
            PsiWhiteSpace(' ')
            TemplateParents
              ConstructorInvocation
                SimpleType: A
                  CodeReferenceElement: A
                    PsiElement(identifier)('A')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              ConstructorInvocation
                SimpleType: B
                  CodeReferenceElement: B
                    PsiElement(identifier)('B')
  PsiWhiteSpace('\n\n')
  ScFunctionDefinition: test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(def)('def')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('test')
    Parameters
      <empty list>
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    BlockExpression
      PsiWhiteSpace('\n  ')
      ScFunctionDefinition: f
        AnnotationsList
          <empty list>
        Modifiers
          <empty list>
        PsiElement(def)('def')
        PsiWhiteSpace(' ')
        PsiElement(identifier)('f')
        TypeParameterClause
          PsiElement([)('[')
          TypeParameter: T
            PsiElement(identifier)('T')
          PsiElement(])(']')
        Parameters
          ParametersClause
            PsiElement(()('(')
            Parameter: x
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(identifier)('x')
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              ParameterType
                SimpleType: T
                  CodeReferenceElement: T
                    PsiElement(identifier)('T')
            PsiElement())(')')
        PsiElement(:)(':')
        PsiWhiteSpace(' ')
        FunctionalType: T => T
          SimpleType: T
            CodeReferenceElement: T
              PsiElement(identifier)('T')
          PsiWhiteSpace(' ')
          PsiElement(=>)('=>')
          PsiWhiteSpace(' ')
          SimpleType: T
            CodeReferenceElement: T
              PsiElement(identifier)('T')
        PsiWhiteSpace(' ')
        PsiElement(=)('=')
        PsiWhiteSpace(' ')
        ReferenceExpression: identity
          PsiElement(identifier)('identity')
      PsiWhiteSpace('\n  ')
      ScPatternDefinition: g
        AnnotationsList
          <empty list>
        Modifiers
          <empty list>
        PsiElement(val)('val')
        PsiWhiteSpace(' ')
        ListOfPatterns
          ReferencePattern: g
            PsiElement(identifier)('g')
        PsiWhiteSpace(' ')
        PsiElement(=)('=')
        PsiWhiteSpace(' ')
        MethodCall
          ReferenceExpression: f
            PsiElement(identifier)('f')
          ArgumentList
            PsiElement(()('(')
            IfStatement
              PsiElement(if)('if')
              PsiWhiteSpace(' ')
              ReferenceExpression: ???
                PsiElement(identifier)('???')
              PsiWhiteSpace(' ')
              PsiElement(then)('then')
              PsiWhiteSpace(' ')
              MethodCall
                ReferenceExpression: o.C
                  ReferenceExpression: o
                    PsiElement(identifier)('o')
                  PsiElement(.)('.')
                  PsiElement(identifier)('C')
                ArgumentList
                  PsiElement(()('(')
                  PsiElement())(')')
              PsiWhiteSpace(' ')
              PsiElement(else)('else')
              PsiWhiteSpace(' ')
              MethodCall
                ReferenceExpression: o.D
                  ReferenceExpression: o
                    PsiElement(identifier)('o')
                  PsiElement(.)('.')
                  PsiElement(identifier)('D')
                ArgumentList
                  PsiElement(()('(')
                  PsiElement())(')')
            PsiElement())(')')
      PsiWhiteSpace('\n  ')
      MethodCall
        ReferenceExpression: g
          PsiElement(identifier)('g')
        ArgumentList
          PsiElement(()('(')
          ScNewTemplateDefinition: <anonymous>
            PsiElement(new)('new')
            PsiWhiteSpace(' ')
            ExtendsBlock
              TemplateParents
                ConstructorInvocation
                  SimpleType: o.B
                    CodeReferenceElement: o.B
                      CodeReferenceElement: o
                        PsiElement(identifier)('o')
                      PsiElement(.)('.')
                      PsiElement(identifier)('B')
              ScTemplateBody
                PsiElement({)('{')
                PsiElement(})('}')
          PsiElement())(')')
