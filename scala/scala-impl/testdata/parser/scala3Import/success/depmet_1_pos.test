object Test {
  def precise(x: String)(y: x.type): x.type = y
  val foo = "foo"
  val fun : foo.type => foo.type = precise(foo)
  val bar : foo.type = precise(foo)(foo)
}
-----
ScalaFile
  ScObject: Test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: precise
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('precise')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: x
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: String
                    CodeReferenceElement: String
                      PsiElement(identifier)('String')
              PsiElement())(')')
            ParametersClause
              PsiElement(()('(')
              Parameter: y
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('y')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: x.type
                    CodeReferenceElement: x
                      PsiElement(identifier)('x')
                    PsiElement(.)('.')
                    PsiElement(type)('type')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: x.type
            CodeReferenceElement: x
              PsiElement(identifier)('x')
            PsiElement(.)('.')
            PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: y
            PsiElement(identifier)('y')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: foo
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: foo
              PsiElement(identifier)('foo')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          StringLiteral
            PsiElement(string content)('"foo"')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: fun
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: fun
              PsiElement(identifier)('fun')
          PsiWhiteSpace(' ')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          FunctionalType: foo.type => foo.type
            SimpleType: foo.type
              CodeReferenceElement: foo
                PsiElement(identifier)('foo')
              PsiElement(.)('.')
              PsiElement(type)('type')
            PsiWhiteSpace(' ')
            PsiElement(=>)('=>')
            PsiWhiteSpace(' ')
            SimpleType: foo.type
              CodeReferenceElement: foo
                PsiElement(identifier)('foo')
              PsiElement(.)('.')
              PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: precise
              PsiElement(identifier)('precise')
            ArgumentList
              PsiElement(()('(')
              ReferenceExpression: foo
                PsiElement(identifier)('foo')
              PsiElement())(')')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: bar
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: bar
              PsiElement(identifier)('bar')
          PsiWhiteSpace(' ')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: foo.type
            CodeReferenceElement: foo
              PsiElement(identifier)('foo')
            PsiElement(.)('.')
            PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            MethodCall
              ReferenceExpression: precise
                PsiElement(identifier)('precise')
              ArgumentList
                PsiElement(()('(')
                ReferenceExpression: foo
                  PsiElement(identifier)('foo')
                PsiElement())(')')
            ArgumentList
              PsiElement(()('(')
              ReferenceExpression: foo
                PsiElement(identifier)('foo')
              PsiElement())(')')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
