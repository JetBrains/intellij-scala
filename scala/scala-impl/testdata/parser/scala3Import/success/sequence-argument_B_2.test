import scala.reflect.ClassTag
import scala.language.implicitConversions

object B {
  def doubleSeq[T](x: T): Seq[T] = Seq(x, x)
  def doubleArray[T: ClassTag](x: T): Array[T] = Array(x, x)

  def box(args: Integer*): Unit = {}
  def widen(args: Long*): Unit = {}
  def conv(args: Y*): Unit = {}

  box(doubleSeq(1)*)
  box(doubleArray(1)*)
  Java_2.box(doubleSeq(1)*)
  Java_2.box(doubleArray(1)*)

  widen(doubleSeq(1)*)
  widen(doubleArray(1)*)
  Java_2.widen(doubleSeq(1)*)
  Java_2.widen(doubleArray(1)*)

  implicit def xToY(x: X): Y = new Y
  val x: X = new X
  conv(doubleSeq(x)*)
  conv(doubleArray(x)*)
  Java_2.conv(doubleSeq(x)*)
  Java_2.conv(doubleArray(x)*)
}
-----
ScalaFile
  ScImportStatement
    PsiElement(import)('import')
    PsiWhiteSpace(' ')
    ImportExpression
      CodeReferenceElement: scala.reflect.ClassTag
        CodeReferenceElement: scala.reflect
          CodeReferenceElement: scala
            PsiElement(identifier)('scala')
          PsiElement(.)('.')
          PsiElement(identifier)('reflect')
        PsiElement(.)('.')
        PsiElement(identifier)('ClassTag')
  PsiWhiteSpace('\n')
  ScImportStatement
    PsiElement(import)('import')
    PsiWhiteSpace(' ')
    ImportExpression
      CodeReferenceElement: scala.language.implicitConversions
        CodeReferenceElement: scala.language
          CodeReferenceElement: scala
            PsiElement(identifier)('scala')
          PsiElement(.)('.')
          PsiElement(identifier)('language')
        PsiElement(.)('.')
        PsiElement(identifier)('implicitConversions')
  PsiWhiteSpace('\n\n')
  ScObject: B
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('B')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: doubleSeq
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('doubleSeq')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: T
              PsiElement(identifier)('T')
            PsiElement(])(']')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: x
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: T
                    CodeReferenceElement: T
                      PsiElement(identifier)('T')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: Seq[T]
            SimpleType: Seq
              CodeReferenceElement: Seq
                PsiElement(identifier)('Seq')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: T
                CodeReferenceElement: T
                  PsiElement(identifier)('T')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: Seq
              PsiElement(identifier)('Seq')
            ArgumentList
              PsiElement(()('(')
              ReferenceExpression: x
                PsiElement(identifier)('x')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              ReferenceExpression: x
                PsiElement(identifier)('x')
              PsiElement())(')')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: doubleArray
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('doubleArray')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: T
              PsiElement(identifier)('T')
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              SimpleType: ClassTag
                CodeReferenceElement: ClassTag
                  PsiElement(identifier)('ClassTag')
            PsiElement(])(']')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: x
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: T
                    CodeReferenceElement: T
                      PsiElement(identifier)('T')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: Array[T]
            SimpleType: Array
              CodeReferenceElement: Array
                PsiElement(identifier)('Array')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: T
                CodeReferenceElement: T
                  PsiElement(identifier)('T')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: Array
              PsiElement(identifier)('Array')
            ArgumentList
              PsiElement(()('(')
              ReferenceExpression: x
                PsiElement(identifier)('x')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              ReferenceExpression: x
                PsiElement(identifier)('x')
              PsiElement())(')')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: box
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('box')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: args
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('args')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Integer
                    CodeReferenceElement: Integer
                      PsiElement(identifier)('Integer')
                  PsiElement(identifier)('*')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Unit
            CodeReferenceElement: Unit
              PsiElement(identifier)('Unit')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          BlockExpression
            PsiElement({)('{')
            PsiElement(})('}')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: widen
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('widen')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: args
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('args')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Long
                    CodeReferenceElement: Long
                      PsiElement(identifier)('Long')
                  PsiElement(identifier)('*')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Unit
            CodeReferenceElement: Unit
              PsiElement(identifier)('Unit')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          BlockExpression
            PsiElement({)('{')
            PsiElement(})('}')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: conv
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('conv')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: args
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('args')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Y
                    CodeReferenceElement: Y
                      PsiElement(identifier)('Y')
                  PsiElement(identifier)('*')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Unit
            CodeReferenceElement: Unit
              PsiElement(identifier)('Unit')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          BlockExpression
            PsiElement({)('{')
            PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        MethodCall
          ReferenceExpression: box
            PsiElement(identifier)('box')
          ArgumentList
            PsiElement(()('(')
            TypedExpression
              MethodCall
                ReferenceExpression: doubleSeq
                  PsiElement(identifier)('doubleSeq')
                ArgumentList
                  PsiElement(()('(')
                  IntegerLiteral
                    PsiElement(integer)('1')
                  PsiElement())(')')
              SequenceArgumentType
                PsiElement(identifier)('*')
            PsiElement())(')')
        PsiWhiteSpace('\n  ')
        MethodCall
          ReferenceExpression: box
            PsiElement(identifier)('box')
          ArgumentList
            PsiElement(()('(')
            TypedExpression
              MethodCall
                ReferenceExpression: doubleArray
                  PsiElement(identifier)('doubleArray')
                ArgumentList
                  PsiElement(()('(')
                  IntegerLiteral
                    PsiElement(integer)('1')
                  PsiElement())(')')
              SequenceArgumentType
                PsiElement(identifier)('*')
            PsiElement())(')')
        PsiWhiteSpace('\n  ')
        MethodCall
          ReferenceExpression: Java_2.box
            ReferenceExpression: Java_2
              PsiElement(identifier)('Java_2')
            PsiElement(.)('.')
            PsiElement(identifier)('box')
          ArgumentList
            PsiElement(()('(')
            TypedExpression
              MethodCall
                ReferenceExpression: doubleSeq
                  PsiElement(identifier)('doubleSeq')
                ArgumentList
                  PsiElement(()('(')
                  IntegerLiteral
                    PsiElement(integer)('1')
                  PsiElement())(')')
              SequenceArgumentType
                PsiElement(identifier)('*')
            PsiElement())(')')
        PsiWhiteSpace('\n  ')
        MethodCall
          ReferenceExpression: Java_2.box
            ReferenceExpression: Java_2
              PsiElement(identifier)('Java_2')
            PsiElement(.)('.')
            PsiElement(identifier)('box')
          ArgumentList
            PsiElement(()('(')
            TypedExpression
              MethodCall
                ReferenceExpression: doubleArray
                  PsiElement(identifier)('doubleArray')
                ArgumentList
                  PsiElement(()('(')
                  IntegerLiteral
                    PsiElement(integer)('1')
                  PsiElement())(')')
              SequenceArgumentType
                PsiElement(identifier)('*')
            PsiElement())(')')
        PsiWhiteSpace('\n\n  ')
        MethodCall
          ReferenceExpression: widen
            PsiElement(identifier)('widen')
          ArgumentList
            PsiElement(()('(')
            TypedExpression
              MethodCall
                ReferenceExpression: doubleSeq
                  PsiElement(identifier)('doubleSeq')
                ArgumentList
                  PsiElement(()('(')
                  IntegerLiteral
                    PsiElement(integer)('1')
                  PsiElement())(')')
              SequenceArgumentType
                PsiElement(identifier)('*')
            PsiElement())(')')
        PsiWhiteSpace('\n  ')
        MethodCall
          ReferenceExpression: widen
            PsiElement(identifier)('widen')
          ArgumentList
            PsiElement(()('(')
            TypedExpression
              MethodCall
                ReferenceExpression: doubleArray
                  PsiElement(identifier)('doubleArray')
                ArgumentList
                  PsiElement(()('(')
                  IntegerLiteral
                    PsiElement(integer)('1')
                  PsiElement())(')')
              SequenceArgumentType
                PsiElement(identifier)('*')
            PsiElement())(')')
        PsiWhiteSpace('\n  ')
        MethodCall
          ReferenceExpression: Java_2.widen
            ReferenceExpression: Java_2
              PsiElement(identifier)('Java_2')
            PsiElement(.)('.')
            PsiElement(identifier)('widen')
          ArgumentList
            PsiElement(()('(')
            TypedExpression
              MethodCall
                ReferenceExpression: doubleSeq
                  PsiElement(identifier)('doubleSeq')
                ArgumentList
                  PsiElement(()('(')
                  IntegerLiteral
                    PsiElement(integer)('1')
                  PsiElement())(')')
              SequenceArgumentType
                PsiElement(identifier)('*')
            PsiElement())(')')
        PsiWhiteSpace('\n  ')
        MethodCall
          ReferenceExpression: Java_2.widen
            ReferenceExpression: Java_2
              PsiElement(identifier)('Java_2')
            PsiElement(.)('.')
            PsiElement(identifier)('widen')
          ArgumentList
            PsiElement(()('(')
            TypedExpression
              MethodCall
                ReferenceExpression: doubleArray
                  PsiElement(identifier)('doubleArray')
                ArgumentList
                  PsiElement(()('(')
                  IntegerLiteral
                    PsiElement(integer)('1')
                  PsiElement())(')')
              SequenceArgumentType
                PsiElement(identifier)('*')
            PsiElement())(')')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: xToY
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(implicit)('implicit')
          PsiWhiteSpace(' ')
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('xToY')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: x
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: X
                    CodeReferenceElement: X
                      PsiElement(identifier)('X')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Y
            CodeReferenceElement: Y
              PsiElement(identifier)('Y')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ScNewTemplateDefinition: <anonymous>
            PsiElement(new)('new')
            PsiWhiteSpace(' ')
            ExtendsBlock
              TemplateParents
                ConstructorInvocation
                  SimpleType: Y
                    CodeReferenceElement: Y
                      PsiElement(identifier)('Y')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: x
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: x
              PsiElement(identifier)('x')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: X
            CodeReferenceElement: X
              PsiElement(identifier)('X')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ScNewTemplateDefinition: <anonymous>
            PsiElement(new)('new')
            PsiWhiteSpace(' ')
            ExtendsBlock
              TemplateParents
                ConstructorInvocation
                  SimpleType: X
                    CodeReferenceElement: X
                      PsiElement(identifier)('X')
        PsiWhiteSpace('\n  ')
        MethodCall
          ReferenceExpression: conv
            PsiElement(identifier)('conv')
          ArgumentList
            PsiElement(()('(')
            TypedExpression
              MethodCall
                ReferenceExpression: doubleSeq
                  PsiElement(identifier)('doubleSeq')
                ArgumentList
                  PsiElement(()('(')
                  ReferenceExpression: x
                    PsiElement(identifier)('x')
                  PsiElement())(')')
              SequenceArgumentType
                PsiElement(identifier)('*')
            PsiElement())(')')
        PsiWhiteSpace('\n  ')
        MethodCall
          ReferenceExpression: conv
            PsiElement(identifier)('conv')
          ArgumentList
            PsiElement(()('(')
            TypedExpression
              MethodCall
                ReferenceExpression: doubleArray
                  PsiElement(identifier)('doubleArray')
                ArgumentList
                  PsiElement(()('(')
                  ReferenceExpression: x
                    PsiElement(identifier)('x')
                  PsiElement())(')')
              SequenceArgumentType
                PsiElement(identifier)('*')
            PsiElement())(')')
        PsiWhiteSpace('\n  ')
        MethodCall
          ReferenceExpression: Java_2.conv
            ReferenceExpression: Java_2
              PsiElement(identifier)('Java_2')
            PsiElement(.)('.')
            PsiElement(identifier)('conv')
          ArgumentList
            PsiElement(()('(')
            TypedExpression
              MethodCall
                ReferenceExpression: doubleSeq
                  PsiElement(identifier)('doubleSeq')
                ArgumentList
                  PsiElement(()('(')
                  ReferenceExpression: x
                    PsiElement(identifier)('x')
                  PsiElement())(')')
              SequenceArgumentType
                PsiElement(identifier)('*')
            PsiElement())(')')
        PsiWhiteSpace('\n  ')
        MethodCall
          ReferenceExpression: Java_2.conv
            ReferenceExpression: Java_2
              PsiElement(identifier)('Java_2')
            PsiElement(.)('.')
            PsiElement(identifier)('conv')
          ArgumentList
            PsiElement(()('(')
            TypedExpression
              MethodCall
                ReferenceExpression: doubleArray
                  PsiElement(identifier)('doubleArray')
                ArgumentList
                  PsiElement(()('(')
                  ReferenceExpression: x
                    PsiElement(identifier)('x')
                  PsiElement())(')')
              SequenceArgumentType
                PsiElement(identifier)('*')
            PsiElement())(')')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
