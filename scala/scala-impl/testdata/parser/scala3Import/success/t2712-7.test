package test

// Cats Xor, Scalaz \/, scala.util.Either
sealed abstract class Xor[+A, +B] extends Product with Serializable
object Xor {
  final case class Left[+A](a: A) extends (A Xor Nothing)
  final case class Right[+B](b: B) extends (Nothing Xor B)
}

object TestXor {
  import Xor.*
  def meh[F[_], A, B](fa: F[A])(f: A => B): F[B] = ???
  meh(new Right(23): Xor[Boolean, Int])(_ < 13)
  meh(new Left(true): Xor[Boolean, Int])(_ < 13)
}
-----
ScalaFile
  ScPackaging
    PsiElement(package)('package')
    PsiWhiteSpace(' ')
    CodeReferenceElement: test
      PsiElement(identifier)('test')
    PsiWhiteSpace('\n\n')
    ScClass: Xor
      PsiComment(comment)('// Cats Xor, Scalaz \/, scala.util.Either')
      PsiWhiteSpace('\n')
      AnnotationsList
        <empty list>
      Modifiers
        PsiElement(sealed)('sealed')
        PsiWhiteSpace(' ')
        PsiElement(abstract)('abstract')
      PsiWhiteSpace(' ')
      PsiElement(class)('class')
      PsiWhiteSpace(' ')
      PsiElement(identifier)('Xor')
      TypeParameterClause
        PsiElement([)('[')
        TypeParameter: A
          PsiElement(identifier)('+')
          PsiElement(identifier)('A')
        PsiElement(,)(',')
        PsiWhiteSpace(' ')
        TypeParameter: B
          PsiElement(identifier)('+')
          PsiElement(identifier)('B')
        PsiElement(])(']')
      PrimaryConstructor
        AnnotationsList
          <empty list>
        Modifiers
          <empty list>
        Parameters
          <empty list>
      PsiWhiteSpace(' ')
      ExtendsBlock
        PsiElement(extends)('extends')
        PsiWhiteSpace(' ')
        TemplateParents
          ConstructorInvocation
            SimpleType: Product
              CodeReferenceElement: Product
                PsiElement(identifier)('Product')
          PsiWhiteSpace(' ')
          PsiElement(with)('with')
          PsiWhiteSpace(' ')
          ConstructorInvocation
            SimpleType: Serializable
              CodeReferenceElement: Serializable
                PsiElement(identifier)('Serializable')
    PsiWhiteSpace('\n')
    ScObject: Xor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      PsiElement(object)('object')
      PsiWhiteSpace(' ')
      PsiElement(identifier)('Xor')
      PsiWhiteSpace(' ')
      ExtendsBlock
        ScTemplateBody
          PsiElement({)('{')
          PsiWhiteSpace('\n  ')
          ScClass: Left
            AnnotationsList
              <empty list>
            Modifiers
              PsiElement(final)('final')
              PsiWhiteSpace(' ')
              PsiElement(case)('case')
            PsiWhiteSpace(' ')
            PsiElement(class)('class')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('Left')
            TypeParameterClause
              PsiElement([)('[')
              TypeParameter: A
                PsiElement(identifier)('+')
                PsiElement(identifier)('A')
              PsiElement(])(']')
            PrimaryConstructor
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              Parameters
                ParametersClause
                  PsiElement(()('(')
                  ClassParameter: a
                    AnnotationsList
                      <empty list>
                    Modifiers
                      <empty list>
                    PsiElement(identifier)('a')
                    PsiElement(:)(':')
                    PsiWhiteSpace(' ')
                    ParameterType
                      SimpleType: A
                        CodeReferenceElement: A
                          PsiElement(identifier)('A')
                  PsiElement())(')')
            PsiWhiteSpace(' ')
            ExtendsBlock
              PsiElement(extends)('extends')
              PsiWhiteSpace(' ')
              TemplateParents
                ConstructorInvocation
                  TypeInParenthesis: (A Xor Nothing)
                    PsiElement(()('(')
                    InfixType: A Xor Nothing
                      SimpleType: A
                        CodeReferenceElement: A
                          PsiElement(identifier)('A')
                      PsiWhiteSpace(' ')
                      CodeReferenceElement: Xor
                        PsiElement(identifier)('Xor')
                      PsiWhiteSpace(' ')
                      SimpleType: Nothing
                        CodeReferenceElement: Nothing
                          PsiElement(identifier)('Nothing')
                    PsiElement())(')')
          PsiWhiteSpace('\n  ')
          ScClass: Right
            AnnotationsList
              <empty list>
            Modifiers
              PsiElement(final)('final')
              PsiWhiteSpace(' ')
              PsiElement(case)('case')
            PsiWhiteSpace(' ')
            PsiElement(class)('class')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('Right')
            TypeParameterClause
              PsiElement([)('[')
              TypeParameter: B
                PsiElement(identifier)('+')
                PsiElement(identifier)('B')
              PsiElement(])(']')
            PrimaryConstructor
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              Parameters
                ParametersClause
                  PsiElement(()('(')
                  ClassParameter: b
                    AnnotationsList
                      <empty list>
                    Modifiers
                      <empty list>
                    PsiElement(identifier)('b')
                    PsiElement(:)(':')
                    PsiWhiteSpace(' ')
                    ParameterType
                      SimpleType: B
                        CodeReferenceElement: B
                          PsiElement(identifier)('B')
                  PsiElement())(')')
            PsiWhiteSpace(' ')
            ExtendsBlock
              PsiElement(extends)('extends')
              PsiWhiteSpace(' ')
              TemplateParents
                ConstructorInvocation
                  TypeInParenthesis: (Nothing Xor B)
                    PsiElement(()('(')
                    InfixType: Nothing Xor B
                      SimpleType: Nothing
                        CodeReferenceElement: Nothing
                          PsiElement(identifier)('Nothing')
                      PsiWhiteSpace(' ')
                      CodeReferenceElement: Xor
                        PsiElement(identifier)('Xor')
                      PsiWhiteSpace(' ')
                      SimpleType: B
                        CodeReferenceElement: B
                          PsiElement(identifier)('B')
                    PsiElement())(')')
          PsiWhiteSpace('\n')
          PsiElement(})('}')
    PsiWhiteSpace('\n\n')
    ScObject: TestXor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      PsiElement(object)('object')
      PsiWhiteSpace(' ')
      PsiElement(identifier)('TestXor')
      PsiWhiteSpace(' ')
      ExtendsBlock
        ScTemplateBody
          PsiElement({)('{')
          PsiWhiteSpace('\n  ')
          ScImportStatement
            PsiElement(import)('import')
            PsiWhiteSpace(' ')
            ImportExpression
              CodeReferenceElement: Xor
                PsiElement(identifier)('Xor')
              PsiElement(.)('.')
              PsiElement(*)('*')
          PsiWhiteSpace('\n  ')
          ScFunctionDefinition: meh
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(def)('def')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('meh')
            TypeParameterClause
              PsiElement([)('[')
              TypeParameter: F
                PsiElement(identifier)('F')
                TypeParameterClause
                  PsiElement([)('[')
                  TypeParameter: _
                    PsiElement(_)('_')
                  PsiElement(])(']')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              TypeParameter: A
                PsiElement(identifier)('A')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              TypeParameter: B
                PsiElement(identifier)('B')
              PsiElement(])(']')
            Parameters
              ParametersClause
                PsiElement(()('(')
                Parameter: fa
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(identifier)('fa')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    ParametrizedType: F[A]
                      SimpleType: F
                        CodeReferenceElement: F
                          PsiElement(identifier)('F')
                      TypeArgumentsList
                        PsiElement([)('[')
                        SimpleType: A
                          CodeReferenceElement: A
                            PsiElement(identifier)('A')
                        PsiElement(])(']')
                PsiElement())(')')
              ParametersClause
                PsiElement(()('(')
                Parameter: f
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(identifier)('f')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    FunctionalType: A => B
                      SimpleType: A
                        CodeReferenceElement: A
                          PsiElement(identifier)('A')
                      PsiWhiteSpace(' ')
                      PsiElement(=>)('=>')
                      PsiWhiteSpace(' ')
                      SimpleType: B
                        CodeReferenceElement: B
                          PsiElement(identifier)('B')
                PsiElement())(')')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            ParametrizedType: F[B]
              SimpleType: F
                CodeReferenceElement: F
                  PsiElement(identifier)('F')
              TypeArgumentsList
                PsiElement([)('[')
                SimpleType: B
                  CodeReferenceElement: B
                    PsiElement(identifier)('B')
                PsiElement(])(']')
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace(' ')
            ReferenceExpression: ???
              PsiElement(identifier)('???')
          PsiWhiteSpace('\n  ')
          MethodCall
            MethodCall
              ReferenceExpression: meh
                PsiElement(identifier)('meh')
              ArgumentList
                PsiElement(()('(')
                TypedExpression
                  ScNewTemplateDefinition: <anonymous>
                    PsiElement(new)('new')
                    PsiWhiteSpace(' ')
                    ExtendsBlock
                      TemplateParents
                        ConstructorInvocation
                          SimpleType: Right
                            CodeReferenceElement: Right
                              PsiElement(identifier)('Right')
                          ArgumentList
                            PsiElement(()('(')
                            IntegerLiteral
                              PsiElement(integer)('23')
                            PsiElement())(')')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParametrizedType: Xor[Boolean, Int]
                    SimpleType: Xor
                      CodeReferenceElement: Xor
                        PsiElement(identifier)('Xor')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: Boolean
                        CodeReferenceElement: Boolean
                          PsiElement(identifier)('Boolean')
                      PsiElement(,)(',')
                      PsiWhiteSpace(' ')
                      SimpleType: Int
                        CodeReferenceElement: Int
                          PsiElement(identifier)('Int')
                      PsiElement(])(']')
                PsiElement())(')')
            ArgumentList
              PsiElement(()('(')
              InfixExpression
                UnderscoreSection
                  PsiElement(_)('_')
                PsiWhiteSpace(' ')
                ReferenceExpression: <
                  PsiElement(identifier)('<')
                PsiWhiteSpace(' ')
                IntegerLiteral
                  PsiElement(integer)('13')
              PsiElement())(')')
          PsiWhiteSpace('\n  ')
          MethodCall
            MethodCall
              ReferenceExpression: meh
                PsiElement(identifier)('meh')
              ArgumentList
                PsiElement(()('(')
                TypedExpression
                  ScNewTemplateDefinition: <anonymous>
                    PsiElement(new)('new')
                    PsiWhiteSpace(' ')
                    ExtendsBlock
                      TemplateParents
                        ConstructorInvocation
                          SimpleType: Left
                            CodeReferenceElement: Left
                              PsiElement(identifier)('Left')
                          ArgumentList
                            PsiElement(()('(')
                            BooleanLiteral
                              PsiElement(true)('true')
                            PsiElement())(')')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParametrizedType: Xor[Boolean, Int]
                    SimpleType: Xor
                      CodeReferenceElement: Xor
                        PsiElement(identifier)('Xor')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: Boolean
                        CodeReferenceElement: Boolean
                          PsiElement(identifier)('Boolean')
                      PsiElement(,)(',')
                      PsiWhiteSpace(' ')
                      SimpleType: Int
                        CodeReferenceElement: Int
                          PsiElement(identifier)('Int')
                      PsiElement(])(']')
                PsiElement())(')')
            ArgumentList
              PsiElement(()('(')
              InfixExpression
                UnderscoreSection
                  PsiElement(_)('_')
                PsiWhiteSpace(' ')
                ReferenceExpression: <
                  PsiElement(identifier)('<')
                PsiWhiteSpace(' ')
                IntegerLiteral
                  PsiElement(integer)('13')
              PsiElement())(')')
          PsiWhiteSpace('\n')
          PsiElement(})('}')
