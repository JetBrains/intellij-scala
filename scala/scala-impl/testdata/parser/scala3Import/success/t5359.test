// /scala/trac/5359/a.scala
// Thu Jan  5 13:31:05 PST 2012

object test {
  trait Step[F[_]] {
    // crash: typeConstructor inapplicable for <none>
    this match {
      case S1() =>
    }
  }
  case class S1[F[_]]() extends Step[F]

  // okay
  (null: Step[Option]) match {
    case S1() =>
  }
}
-----
ScalaFile
  PsiComment(comment)('// /scala/trac/5359/a.scala')
  PsiWhiteSpace('\n')
  PsiComment(comment)('// Thu Jan  5 13:31:05 PST 2012')
  PsiWhiteSpace('\n\n')
  ScObject: test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('test')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScTrait: Step
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(trait)('trait')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Step')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: F
              PsiElement(identifier)('F')
              TypeParameterClause
                PsiElement([)('[')
                TypeParameter: _
                  PsiElement(_)('_')
                PsiElement(])(']')
            PsiElement(])(']')
          PsiWhiteSpace(' ')
          ExtendsBlock
            ScTemplateBody
              PsiElement({)('{')
              PsiWhiteSpace('\n    ')
              PsiComment(comment)('// crash: typeConstructor inapplicable for <none>')
              PsiWhiteSpace('\n    ')
              MatchStatement
                ThisReference
                  PsiElement(this)('this')
                PsiWhiteSpace(' ')
                PsiElement(match)('match')
                PsiWhiteSpace(' ')
                PsiElement({)('{')
                PsiWhiteSpace('\n      ')
                CaseClauses
                  CaseClause
                    PsiElement(case)('case')
                    PsiWhiteSpace(' ')
                    ConstructorPattern
                      CodeReferenceElement: S1
                        PsiElement(identifier)('S1')
                      Pattern Argument List
                        PsiElement(()('(')
                        PsiElement())(')')
                    PsiWhiteSpace(' ')
                    PsiElement(=>)('=>')
                    BlockOfExpressions
                      <empty list>
                PsiWhiteSpace('\n    ')
                PsiElement(})('}')
              PsiWhiteSpace('\n  ')
              PsiElement(})('}')
        PsiWhiteSpace('\n  ')
        ScClass: S1
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(case)('case')
          PsiWhiteSpace(' ')
          PsiElement(class)('class')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('S1')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: F
              PsiElement(identifier)('F')
              TypeParameterClause
                PsiElement([)('[')
                TypeParameter: _
                  PsiElement(_)('_')
                PsiElement(])(']')
            PsiElement(])(']')
          PrimaryConstructor
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            Parameters
              ParametersClause
                PsiElement(()('(')
                PsiElement())(')')
          PsiWhiteSpace(' ')
          ExtendsBlock
            PsiElement(extends)('extends')
            PsiWhiteSpace(' ')
            TemplateParents
              ConstructorInvocation
                ParametrizedType: Step[F]
                  SimpleType: Step
                    CodeReferenceElement: Step
                      PsiElement(identifier)('Step')
                  TypeArgumentsList
                    PsiElement([)('[')
                    SimpleType: F
                      CodeReferenceElement: F
                        PsiElement(identifier)('F')
                    PsiElement(])(']')
        PsiWhiteSpace('\n\n  ')
        PsiComment(comment)('// okay')
        PsiWhiteSpace('\n  ')
        MatchStatement
          ExpressionInParenthesis
            PsiElement(()('(')
            TypedExpression
              NullLiteral
                PsiElement(null)('null')
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              ParametrizedType: Step[Option]
                SimpleType: Step
                  CodeReferenceElement: Step
                    PsiElement(identifier)('Step')
                TypeArgumentsList
                  PsiElement([)('[')
                  SimpleType: Option
                    CodeReferenceElement: Option
                      PsiElement(identifier)('Option')
                  PsiElement(])(']')
            PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(match)('match')
          PsiWhiteSpace(' ')
          PsiElement({)('{')
          PsiWhiteSpace('\n    ')
          CaseClauses
            CaseClause
              PsiElement(case)('case')
              PsiWhiteSpace(' ')
              ConstructorPattern
                CodeReferenceElement: S1
                  PsiElement(identifier)('S1')
                Pattern Argument List
                  PsiElement(()('(')
                  PsiElement())(')')
              PsiWhiteSpace(' ')
              PsiElement(=>)('=>')
              BlockOfExpressions
                <empty list>
          PsiWhiteSpace('\n  ')
          PsiElement(})('}')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
