package test

object Tags {
  type Tagged[A, T] = {type Tag = T; type Self = A}

  type @@[T, Tag] = Tagged[T, Tag]

  trait Disjunction

  def meh[M[_], A](ma: M[A]): M[A] = ma
  meh(null: Int @@ Disjunction)//.asInstanceOf[Int @@ Disjunction])
}
-----
ScalaFile
  ScPackaging
    PsiElement(package)('package')
    PsiWhiteSpace(' ')
    CodeReferenceElement: test
      PsiElement(identifier)('test')
    PsiWhiteSpace('\n\n')
    ScObject: Tags
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      PsiElement(object)('object')
      PsiWhiteSpace(' ')
      PsiElement(identifier)('Tags')
      PsiWhiteSpace(' ')
      ExtendsBlock
        ScTemplateBody
          PsiElement({)('{')
          PsiWhiteSpace('\n  ')
          ScTypeAliasDefinition: Tagged
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(type)('type')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('Tagged')
            TypeParameterClause
              PsiElement([)('[')
              TypeParameter: A
                PsiElement(identifier)('A')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              TypeParameter: T
                PsiElement(identifier)('T')
              PsiElement(])(']')
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace(' ')
            CompoundType: {type Tag = T; type Self = A}
              Refinement
                PsiElement({)('{')
                ScTypeAliasDefinition: Tag
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(type)('type')
                  PsiWhiteSpace(' ')
                  PsiElement(identifier)('Tag')
                  PsiWhiteSpace(' ')
                  PsiElement(=)('=')
                  PsiWhiteSpace(' ')
                  SimpleType: T
                    CodeReferenceElement: T
                      PsiElement(identifier)('T')
                PsiElement(;)(';')
                PsiWhiteSpace(' ')
                ScTypeAliasDefinition: Self
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(type)('type')
                  PsiWhiteSpace(' ')
                  PsiElement(identifier)('Self')
                  PsiWhiteSpace(' ')
                  PsiElement(=)('=')
                  PsiWhiteSpace(' ')
                  SimpleType: A
                    CodeReferenceElement: A
                      PsiElement(identifier)('A')
                PsiElement(})('}')
          PsiWhiteSpace('\n\n  ')
          ScTypeAliasDefinition: @@
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(type)('type')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('@@')
            TypeParameterClause
              PsiElement([)('[')
              TypeParameter: T
                PsiElement(identifier)('T')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              TypeParameter: Tag
                PsiElement(identifier)('Tag')
              PsiElement(])(']')
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace(' ')
            ParametrizedType: Tagged[T, Tag]
              SimpleType: Tagged
                CodeReferenceElement: Tagged
                  PsiElement(identifier)('Tagged')
              TypeArgumentsList
                PsiElement([)('[')
                SimpleType: T
                  CodeReferenceElement: T
                    PsiElement(identifier)('T')
                PsiElement(,)(',')
                PsiWhiteSpace(' ')
                SimpleType: Tag
                  CodeReferenceElement: Tag
                    PsiElement(identifier)('Tag')
                PsiElement(])(']')
          PsiWhiteSpace('\n\n  ')
          ScTrait: Disjunction
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(trait)('trait')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('Disjunction')
            ExtendsBlock
              <empty list>
          PsiWhiteSpace('\n\n  ')
          ScFunctionDefinition: meh
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(def)('def')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('meh')
            TypeParameterClause
              PsiElement([)('[')
              TypeParameter: M
                PsiElement(identifier)('M')
                TypeParameterClause
                  PsiElement([)('[')
                  TypeParameter: _
                    PsiElement(_)('_')
                  PsiElement(])(']')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              TypeParameter: A
                PsiElement(identifier)('A')
              PsiElement(])(']')
            Parameters
              ParametersClause
                PsiElement(()('(')
                Parameter: ma
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(identifier)('ma')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    ParametrizedType: M[A]
                      SimpleType: M
                        CodeReferenceElement: M
                          PsiElement(identifier)('M')
                      TypeArgumentsList
                        PsiElement([)('[')
                        SimpleType: A
                          CodeReferenceElement: A
                            PsiElement(identifier)('A')
                        PsiElement(])(']')
                PsiElement())(')')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            ParametrizedType: M[A]
              SimpleType: M
                CodeReferenceElement: M
                  PsiElement(identifier)('M')
              TypeArgumentsList
                PsiElement([)('[')
                SimpleType: A
                  CodeReferenceElement: A
                    PsiElement(identifier)('A')
                PsiElement(])(']')
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace(' ')
            ReferenceExpression: ma
              PsiElement(identifier)('ma')
          PsiWhiteSpace('\n  ')
          MethodCall
            ReferenceExpression: meh
              PsiElement(identifier)('meh')
            ArgumentList
              PsiElement(()('(')
              TypedExpression
                NullLiteral
                  PsiElement(null)('null')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                InfixType: Int @@ Disjunction
                  SimpleType: Int
                    CodeReferenceElement: Int
                      PsiElement(identifier)('Int')
                  PsiWhiteSpace(' ')
                  CodeReferenceElement: @@
                    PsiElement(identifier)('@@')
                  PsiWhiteSpace(' ')
                  SimpleType: Disjunction
                    CodeReferenceElement: Disjunction
                      PsiElement(identifier)('Disjunction')
              PsiElement())(')')
          PsiComment(comment)('//.asInstanceOf[Int @@ Disjunction])')
          PsiWhiteSpace('\n')
          PsiElement(})('}')
