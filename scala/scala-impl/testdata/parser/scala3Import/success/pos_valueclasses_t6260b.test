package t6260b


class X(val value: Object) extends AnyVal { def or(alt: => X): X = this }
class Y { def f = new X("") or new X("") }
-----
ScalaFile
  ScPackaging
    PsiElement(package)('package')
    PsiWhiteSpace(' ')
    CodeReferenceElement: t6260b
      PsiElement(identifier)('t6260b')
    PsiWhiteSpace('\n\n\n')
    ScClass: X
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      PsiElement(class)('class')
      PsiWhiteSpace(' ')
      PsiElement(identifier)('X')
      PrimaryConstructor
        AnnotationsList
          <empty list>
        Modifiers
          <empty list>
        Parameters
          ParametersClause
            PsiElement(()('(')
            ClassParameter: value
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              PsiElement(identifier)('value')
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              ParameterType
                SimpleType: Object
                  CodeReferenceElement: Object
                    PsiElement(identifier)('Object')
            PsiElement())(')')
      PsiWhiteSpace(' ')
      ExtendsBlock
        PsiElement(extends)('extends')
        PsiWhiteSpace(' ')
        TemplateParents
          ConstructorInvocation
            SimpleType: AnyVal
              CodeReferenceElement: AnyVal
                PsiElement(identifier)('AnyVal')
        PsiWhiteSpace(' ')
        ScTemplateBody
          PsiElement({)('{')
          PsiWhiteSpace(' ')
          ScFunctionDefinition: or
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(def)('def')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('or')
            Parameters
              ParametersClause
                PsiElement(()('(')
                Parameter: alt
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(identifier)('alt')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    PsiElement(=>)('=>')
                    PsiWhiteSpace(' ')
                    SimpleType: X
                      CodeReferenceElement: X
                        PsiElement(identifier)('X')
                PsiElement())(')')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            SimpleType: X
              CodeReferenceElement: X
                PsiElement(identifier)('X')
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace(' ')
            ThisReference
              PsiElement(this)('this')
          PsiWhiteSpace(' ')
          PsiElement(})('}')
    PsiWhiteSpace('\n')
    ScClass: Y
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      PsiElement(class)('class')
      PsiWhiteSpace(' ')
      PsiElement(identifier)('Y')
      PrimaryConstructor
        AnnotationsList
          <empty list>
        Modifiers
          <empty list>
        Parameters
          <empty list>
      PsiWhiteSpace(' ')
      ExtendsBlock
        ScTemplateBody
          PsiElement({)('{')
          PsiWhiteSpace(' ')
          ScFunctionDefinition: f
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(def)('def')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('f')
            Parameters
              <empty list>
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace(' ')
            InfixExpression
              ScNewTemplateDefinition: <anonymous>
                PsiElement(new)('new')
                PsiWhiteSpace(' ')
                ExtendsBlock
                  TemplateParents
                    ConstructorInvocation
                      SimpleType: X
                        CodeReferenceElement: X
                          PsiElement(identifier)('X')
                      ArgumentList
                        PsiElement(()('(')
                        StringLiteral
                          PsiElement(string content)('""')
                        PsiElement())(')')
              PsiWhiteSpace(' ')
              ReferenceExpression: or
                PsiElement(identifier)('or')
              PsiWhiteSpace(' ')
              ScNewTemplateDefinition: <anonymous>
                PsiElement(new)('new')
                PsiWhiteSpace(' ')
                ExtendsBlock
                  TemplateParents
                    ConstructorInvocation
                      SimpleType: X
                        CodeReferenceElement: X
                          PsiElement(identifier)('X')
                      ArgumentList
                        PsiElement(()('(')
                        StringLiteral
                          PsiElement(string content)('""')
                        PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(})('}')
