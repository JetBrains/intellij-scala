object Test {
  def foo[M[_]](x: M[Int]) = x

  type Alias[A] = (A, A)
  val x: Alias[Int] = (1, 2)

  foo[Alias](x) // ok
  foo(x) // ok in scalac but fails in dotty with:
         // error: type mismatch:
         //  found   : (Int, Int)
         //  required: M[Int]
}
-----
ScalaFile
  ScObject: Test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: foo
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('foo')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: M
              PsiElement(identifier)('M')
              TypeParameterClause
                PsiElement([)('[')
                TypeParameter: _
                  PsiElement(_)('_')
                PsiElement(])(']')
            PsiElement(])(']')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: x
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  ParametrizedType: M[Int]
                    SimpleType: M
                      CodeReferenceElement: M
                        PsiElement(identifier)('M')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: Int
                        CodeReferenceElement: Int
                          PsiElement(identifier)('Int')
                      PsiElement(])(']')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: x
            PsiElement(identifier)('x')
        PsiWhiteSpace('\n\n  ')
        ScTypeAliasDefinition: Alias
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Alias')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: A
              PsiElement(identifier)('A')
            PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          TupleType: (A, A)
            PsiElement(()('(')
            TypesList
              SimpleType: A
                CodeReferenceElement: A
                  PsiElement(identifier)('A')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              SimpleType: A
                CodeReferenceElement: A
                  PsiElement(identifier)('A')
            PsiElement())(')')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: x
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: x
              PsiElement(identifier)('x')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: Alias[Int]
            SimpleType: Alias
              CodeReferenceElement: Alias
                PsiElement(identifier)('Alias')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: Int
                CodeReferenceElement: Int
                  PsiElement(identifier)('Int')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          Tuple
            PsiElement(()('(')
            IntegerLiteral
              PsiElement(integer)('1')
            PsiElement(,)(',')
            PsiWhiteSpace(' ')
            IntegerLiteral
              PsiElement(integer)('2')
            PsiElement())(')')
        PsiWhiteSpace('\n\n  ')
        MethodCall
          GenericCall
            ReferenceExpression: foo
              PsiElement(identifier)('foo')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: Alias
                CodeReferenceElement: Alias
                  PsiElement(identifier)('Alias')
              PsiElement(])(']')
          ArgumentList
            PsiElement(()('(')
            ReferenceExpression: x
              PsiElement(identifier)('x')
            PsiElement())(')')
        PsiWhiteSpace(' ')
        PsiComment(comment)('// ok')
        PsiWhiteSpace('\n  ')
        MethodCall
          ReferenceExpression: foo
            PsiElement(identifier)('foo')
          ArgumentList
            PsiElement(()('(')
            ReferenceExpression: x
              PsiElement(identifier)('x')
            PsiElement())(')')
        PsiWhiteSpace(' ')
        PsiComment(comment)('// ok in scalac but fails in dotty with:')
        PsiWhiteSpace('\n         ')
        PsiComment(comment)('// error: type mismatch:')
        PsiWhiteSpace('\n         ')
        PsiComment(comment)('//  found   : (Int, Int)')
        PsiWhiteSpace('\n         ')
        PsiComment(comment)('//  required: M[Int]')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
