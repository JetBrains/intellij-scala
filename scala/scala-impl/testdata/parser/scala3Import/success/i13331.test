def Choice = (_: Any) match { case Int => Long; case Long => Int } // ok

type Choice[A] = A match { case Int => Long ; case Long => Int } // error
-----
ScalaFile
  ScFunctionDefinition: Choice
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(def)('def')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Choice')
    Parameters
      <empty list>
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    MatchStatement
      ExpressionInParenthesis
        PsiElement(()('(')
        TypedExpression
          UnderscoreSection
            PsiElement(_)('_')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Any
            CodeReferenceElement: Any
              PsiElement(identifier)('Any')
        PsiElement())(')')
      PsiWhiteSpace(' ')
      PsiElement(match)('match')
      PsiWhiteSpace(' ')
      PsiElement({)('{')
      PsiWhiteSpace(' ')
      CaseClauses
        CaseClause
          PsiElement(case)('case')
          PsiWhiteSpace(' ')
          StableElementPattern
            ReferenceExpression: Int
              PsiElement(identifier)('Int')
          PsiWhiteSpace(' ')
          PsiElement(=>)('=>')
          PsiWhiteSpace(' ')
          BlockOfExpressions
            ReferenceExpression: Long
              PsiElement(identifier)('Long')
            PsiElement(;)(';')
        PsiWhiteSpace(' ')
        CaseClause
          PsiElement(case)('case')
          PsiWhiteSpace(' ')
          StableElementPattern
            ReferenceExpression: Long
              PsiElement(identifier)('Long')
          PsiWhiteSpace(' ')
          PsiElement(=>)('=>')
          PsiWhiteSpace(' ')
          BlockOfExpressions
            ReferenceExpression: Int
              PsiElement(identifier)('Int')
      PsiWhiteSpace(' ')
      PsiElement(})('}')
  PsiWhiteSpace(' ')
  PsiComment(comment)('// ok')
  PsiWhiteSpace('\n\n')
  ScTypeAliasDefinition: Choice
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(type)('type')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Choice')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: A
        PsiElement(identifier)('A')
      PsiElement(])(']')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    MatchType: A match { case Int => Long ; case Long => Int }
      SimpleType: A
        CodeReferenceElement: A
          PsiElement(identifier)('A')
      PsiWhiteSpace(' ')
      PsiElement(match)('match')
      PsiWhiteSpace(' ')
      PsiElement({)('{')
      PsiWhiteSpace(' ')
      ScMatchTypeCasesImpl(match type cases)
        ScMatchTypeCaseImpl(match type case)
          PsiElement(case)('case')
          PsiWhiteSpace(' ')
          SimpleType: Int
            CodeReferenceElement: Int
              PsiElement(identifier)('Int')
          PsiWhiteSpace(' ')
          PsiElement(=>)('=>')
          PsiWhiteSpace(' ')
          SimpleType: Long
            CodeReferenceElement: Long
              PsiElement(identifier)('Long')
        PsiWhiteSpace(' ')
        PsiElement(;)(';')
        PsiWhiteSpace(' ')
        ScMatchTypeCaseImpl(match type case)
          PsiElement(case)('case')
          PsiWhiteSpace(' ')
          SimpleType: Long
            CodeReferenceElement: Long
              PsiElement(identifier)('Long')
          PsiWhiteSpace(' ')
          PsiElement(=>)('=>')
          PsiWhiteSpace(' ')
          SimpleType: Int
            CodeReferenceElement: Int
              PsiElement(identifier)('Int')
      PsiWhiteSpace(' ')
      PsiElement(})('}')
  PsiWhiteSpace(' ')
  PsiComment(comment)('// error')
