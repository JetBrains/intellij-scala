package t6029

final case class V[A](x: A) extends AnyVal {
  def flatMap[B](f: A => V[B]) = if (true) this else f(x)
}
-----
ScalaFile
  ScPackaging
    PsiElement(package)('package')
    PsiWhiteSpace(' ')
    CodeReferenceElement: t6029
      PsiElement(identifier)('t6029')
    PsiWhiteSpace('\n\n')
    ScClass: V
      AnnotationsList
        <empty list>
      Modifiers
        PsiElement(final)('final')
        PsiWhiteSpace(' ')
        PsiElement(case)('case')
      PsiWhiteSpace(' ')
      PsiElement(class)('class')
      PsiWhiteSpace(' ')
      PsiElement(identifier)('V')
      TypeParameterClause
        PsiElement([)('[')
        TypeParameter: A
          PsiElement(identifier)('A')
        PsiElement(])(']')
      PrimaryConstructor
        AnnotationsList
          <empty list>
        Modifiers
          <empty list>
        Parameters
          ParametersClause
            PsiElement(()('(')
            ClassParameter: x
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(identifier)('x')
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              ParameterType
                SimpleType: A
                  CodeReferenceElement: A
                    PsiElement(identifier)('A')
            PsiElement())(')')
      PsiWhiteSpace(' ')
      ExtendsBlock
        PsiElement(extends)('extends')
        PsiWhiteSpace(' ')
        TemplateParents
          ConstructorInvocation
            SimpleType: AnyVal
              CodeReferenceElement: AnyVal
                PsiElement(identifier)('AnyVal')
        PsiWhiteSpace(' ')
        ScTemplateBody
          PsiElement({)('{')
          PsiWhiteSpace('\n  ')
          ScFunctionDefinition: flatMap
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(def)('def')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('flatMap')
            TypeParameterClause
              PsiElement([)('[')
              TypeParameter: B
                PsiElement(identifier)('B')
              PsiElement(])(']')
            Parameters
              ParametersClause
                PsiElement(()('(')
                Parameter: f
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(identifier)('f')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    FunctionalType: A => V[B]
                      SimpleType: A
                        CodeReferenceElement: A
                          PsiElement(identifier)('A')
                      PsiWhiteSpace(' ')
                      PsiElement(=>)('=>')
                      PsiWhiteSpace(' ')
                      ParametrizedType: V[B]
                        SimpleType: V
                          CodeReferenceElement: V
                            PsiElement(identifier)('V')
                        TypeArgumentsList
                          PsiElement([)('[')
                          SimpleType: B
                            CodeReferenceElement: B
                              PsiElement(identifier)('B')
                          PsiElement(])(']')
                PsiElement())(')')
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace(' ')
            IfStatement
              PsiElement(if)('if')
              PsiWhiteSpace(' ')
              PsiElement(()('(')
              BooleanLiteral
                PsiElement(true)('true')
              PsiElement())(')')
              PsiWhiteSpace(' ')
              ThisReference
                PsiElement(this)('this')
              PsiWhiteSpace(' ')
              PsiElement(else)('else')
              PsiWhiteSpace(' ')
              MethodCall
                ReferenceExpression: f
                  PsiElement(identifier)('f')
                ArgumentList
                  PsiElement(()('(')
                  ReferenceExpression: x
                    PsiElement(identifier)('x')
                  PsiElement())(')')
          PsiWhiteSpace('\n')
          PsiElement(})('}')
