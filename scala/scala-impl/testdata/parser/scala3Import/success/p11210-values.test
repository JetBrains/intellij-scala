trait Foo[+A] {
  def toSeq: Seq[A] = ???
}
trait Bar[+A] {
  def toSeq: Seq[Seq[A]] = ???
}

@main def Test = {
  val foobar: Foo[Seq[Double]] & Bar[Double] = ???
  val m: Seq[Seq[Double]] = foobar.toSeq
}
-----
ScalaFile
  ScTrait: Foo
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Foo')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: A
        PsiElement(identifier)('+')
        PsiElement(identifier)('A')
      PsiElement(])(']')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: toSeq
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('toSeq')
          Parameters
            <empty list>
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: Seq[A]
            SimpleType: Seq
              CodeReferenceElement: Seq
                PsiElement(identifier)('Seq')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: A
                CodeReferenceElement: A
                  PsiElement(identifier)('A')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: ???
            PsiElement(identifier)('???')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n')
  ScTrait: Bar
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Bar')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: A
        PsiElement(identifier)('+')
        PsiElement(identifier)('A')
      PsiElement(])(']')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: toSeq
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('toSeq')
          Parameters
            <empty list>
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: Seq[Seq[A]]
            SimpleType: Seq
              CodeReferenceElement: Seq
                PsiElement(identifier)('Seq')
            TypeArgumentsList
              PsiElement([)('[')
              ParametrizedType: Seq[A]
                SimpleType: Seq
                  CodeReferenceElement: Seq
                    PsiElement(identifier)('Seq')
                TypeArgumentsList
                  PsiElement([)('[')
                  SimpleType: A
                    CodeReferenceElement: A
                      PsiElement(identifier)('A')
                  PsiElement(])(']')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: ???
            PsiElement(identifier)('???')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScFunctionDefinition: Test
    AnnotationsList
      Annotation
        PsiElement(@)('@')
        AnnotationExpression
          ConstructorInvocation
            SimpleType: main
              CodeReferenceElement: main
                PsiElement(identifier)('main')
    Modifiers
      <empty list>
    PsiWhiteSpace(' ')
    PsiElement(def)('def')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test')
    Parameters
      <empty list>
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    BlockExpression
      PsiElement({)('{')
      PsiWhiteSpace('\n  ')
      ScPatternDefinition: foobar
        AnnotationsList
          <empty list>
        Modifiers
          <empty list>
        PsiElement(val)('val')
        PsiWhiteSpace(' ')
        ListOfPatterns
          ReferencePattern: foobar
            PsiElement(identifier)('foobar')
        PsiElement(:)(':')
        PsiWhiteSpace(' ')
        InfixType: Foo[Seq[Double]] & Bar[Double]
          ParametrizedType: Foo[Seq[Double]]
            SimpleType: Foo
              CodeReferenceElement: Foo
                PsiElement(identifier)('Foo')
            TypeArgumentsList
              PsiElement([)('[')
              ParametrizedType: Seq[Double]
                SimpleType: Seq
                  CodeReferenceElement: Seq
                    PsiElement(identifier)('Seq')
                TypeArgumentsList
                  PsiElement([)('[')
                  SimpleType: Double
                    CodeReferenceElement: Double
                      PsiElement(identifier)('Double')
                  PsiElement(])(']')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          CodeReferenceElement: &
            PsiElement(identifier)('&')
          PsiWhiteSpace(' ')
          ParametrizedType: Bar[Double]
            SimpleType: Bar
              CodeReferenceElement: Bar
                PsiElement(identifier)('Bar')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: Double
                CodeReferenceElement: Double
                  PsiElement(identifier)('Double')
              PsiElement(])(']')
        PsiWhiteSpace(' ')
        PsiElement(=)('=')
        PsiWhiteSpace(' ')
        ReferenceExpression: ???
          PsiElement(identifier)('???')
      PsiWhiteSpace('\n  ')
      ScPatternDefinition: m
        AnnotationsList
          <empty list>
        Modifiers
          <empty list>
        PsiElement(val)('val')
        PsiWhiteSpace(' ')
        ListOfPatterns
          ReferencePattern: m
            PsiElement(identifier)('m')
        PsiElement(:)(':')
        PsiWhiteSpace(' ')
        ParametrizedType: Seq[Seq[Double]]
          SimpleType: Seq
            CodeReferenceElement: Seq
              PsiElement(identifier)('Seq')
          TypeArgumentsList
            PsiElement([)('[')
            ParametrizedType: Seq[Double]
              SimpleType: Seq
                CodeReferenceElement: Seq
                  PsiElement(identifier)('Seq')
              TypeArgumentsList
                PsiElement([)('[')
                SimpleType: Double
                  CodeReferenceElement: Double
                    PsiElement(identifier)('Double')
                PsiElement(])(']')
            PsiElement(])(']')
        PsiWhiteSpace(' ')
        PsiElement(=)('=')
        PsiWhiteSpace(' ')
        ReferenceExpression: foobar.toSeq
          ReferenceExpression: foobar
            PsiElement(identifier)('foobar')
          PsiElement(.)('.')
          PsiElement(identifier)('toSeq')
      PsiWhiteSpace('\n')
      PsiElement(})('}')
