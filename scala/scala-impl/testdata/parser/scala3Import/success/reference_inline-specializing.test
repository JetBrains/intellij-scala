package inlinespecializing

object Test{
  class A
  class B extends A {
  def meth() = true
  }

  transparent inline def choose(b: Boolean): A = {
  if (b) new A()
  else new B()
  }

  val obj1 = choose(true)  // static type is A
  val obj2 = choose(false) // static type is B

  // obj1.meth() // compile-time error
  obj2.meth() // OK
}
-----
ScalaFile
  ScPackaging
    PsiElement(package)('package')
    PsiWhiteSpace(' ')
    CodeReferenceElement: inlinespecializing
      PsiElement(identifier)('inlinespecializing')
    PsiWhiteSpace('\n\n')
    ScObject: Test
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      PsiElement(object)('object')
      PsiWhiteSpace(' ')
      PsiElement(identifier)('Test')
      ExtendsBlock
        ScTemplateBody
          PsiElement({)('{')
          PsiWhiteSpace('\n  ')
          ScClass: A
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(class)('class')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('A')
            PrimaryConstructor
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              Parameters
                <empty list>
            ExtendsBlock
              <empty list>
          PsiWhiteSpace('\n  ')
          ScClass: B
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(class)('class')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('B')
            PrimaryConstructor
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              Parameters
                <empty list>
            PsiWhiteSpace(' ')
            ExtendsBlock
              PsiElement(extends)('extends')
              PsiWhiteSpace(' ')
              TemplateParents
                ConstructorInvocation
                  SimpleType: A
                    CodeReferenceElement: A
                      PsiElement(identifier)('A')
              PsiWhiteSpace(' ')
              ScTemplateBody
                PsiElement({)('{')
                PsiWhiteSpace('\n  ')
                ScFunctionDefinition: meth
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(def)('def')
                  PsiWhiteSpace(' ')
                  PsiElement(identifier)('meth')
                  Parameters
                    ParametersClause
                      PsiElement(()('(')
                      PsiElement())(')')
                  PsiWhiteSpace(' ')
                  PsiElement(=)('=')
                  PsiWhiteSpace(' ')
                  BooleanLiteral
                    PsiElement(true)('true')
                PsiWhiteSpace('\n  ')
                PsiElement(})('}')
          PsiWhiteSpace('\n\n  ')
          ScFunctionDefinition: choose
            AnnotationsList
              <empty list>
            Modifiers
              PsiElement(transparent)('transparent')
              PsiWhiteSpace(' ')
              PsiElement(inline)('inline')
            PsiWhiteSpace(' ')
            PsiElement(def)('def')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('choose')
            Parameters
              ParametersClause
                PsiElement(()('(')
                Parameter: b
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(identifier)('b')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    SimpleType: Boolean
                      CodeReferenceElement: Boolean
                        PsiElement(identifier)('Boolean')
                PsiElement())(')')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            SimpleType: A
              CodeReferenceElement: A
                PsiElement(identifier)('A')
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace(' ')
            BlockExpression
              PsiElement({)('{')
              PsiWhiteSpace('\n  ')
              IfStatement
                PsiElement(if)('if')
                PsiWhiteSpace(' ')
                PsiElement(()('(')
                ReferenceExpression: b
                  PsiElement(identifier)('b')
                PsiElement())(')')
                PsiWhiteSpace(' ')
                ScNewTemplateDefinition: <anonymous>
                  PsiElement(new)('new')
                  PsiWhiteSpace(' ')
                  ExtendsBlock
                    TemplateParents
                      ConstructorInvocation
                        SimpleType: A
                          CodeReferenceElement: A
                            PsiElement(identifier)('A')
                        ArgumentList
                          PsiElement(()('(')
                          PsiElement())(')')
                PsiWhiteSpace('\n  ')
                PsiElement(else)('else')
                PsiWhiteSpace(' ')
                ScNewTemplateDefinition: <anonymous>
                  PsiElement(new)('new')
                  PsiWhiteSpace(' ')
                  ExtendsBlock
                    TemplateParents
                      ConstructorInvocation
                        SimpleType: B
                          CodeReferenceElement: B
                            PsiElement(identifier)('B')
                        ArgumentList
                          PsiElement(()('(')
                          PsiElement())(')')
              PsiWhiteSpace('\n  ')
              PsiElement(})('}')
          PsiWhiteSpace('\n\n  ')
          ScPatternDefinition: obj1
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(val)('val')
            PsiWhiteSpace(' ')
            ListOfPatterns
              ReferencePattern: obj1
                PsiElement(identifier)('obj1')
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace(' ')
            MethodCall
              ReferenceExpression: choose
                PsiElement(identifier)('choose')
              ArgumentList
                PsiElement(()('(')
                BooleanLiteral
                  PsiElement(true)('true')
                PsiElement())(')')
          PsiWhiteSpace('  ')
          PsiComment(comment)('// static type is A')
          PsiWhiteSpace('\n  ')
          ScPatternDefinition: obj2
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(val)('val')
            PsiWhiteSpace(' ')
            ListOfPatterns
              ReferencePattern: obj2
                PsiElement(identifier)('obj2')
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace(' ')
            MethodCall
              ReferenceExpression: choose
                PsiElement(identifier)('choose')
              ArgumentList
                PsiElement(()('(')
                BooleanLiteral
                  PsiElement(false)('false')
                PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiComment(comment)('// static type is B')
          PsiWhiteSpace('\n\n  ')
          PsiComment(comment)('// obj1.meth() // compile-time error')
          PsiWhiteSpace('\n  ')
          MethodCall
            ReferenceExpression: obj2.meth
              ReferenceExpression: obj2
                PsiElement(identifier)('obj2')
              PsiElement(.)('.')
              PsiElement(identifier)('meth')
            ArgumentList
              PsiElement(()('(')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiComment(comment)('// OK')
          PsiWhiteSpace('\n')
          PsiElement(})('}')
