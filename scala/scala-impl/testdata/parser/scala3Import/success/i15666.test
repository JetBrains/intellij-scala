trait GetInt {
  def value: Int // if we add inline here, the program compiles
}

class Newtype {
  def f: Int = ???

  val g = new GetInt {
    inline def value: Int = f // has to be inline to crash
  }
}
-----
ScalaFile
  ScTrait: GetInt
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('GetInt')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDeclaration: value
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('value')
          Parameters
            <empty list>
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Int
            CodeReferenceElement: Int
              PsiElement(identifier)('Int')
        PsiWhiteSpace(' ')
        PsiComment(comment)('// if we add inline here, the program compiles')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScClass: Newtype
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Newtype')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: f
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('f')
          Parameters
            <empty list>
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Int
            CodeReferenceElement: Int
              PsiElement(identifier)('Int')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: ???
            PsiElement(identifier)('???')
        PsiWhiteSpace('\n\n  ')
        ScPatternDefinition: g
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: g
              PsiElement(identifier)('g')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ScNewTemplateDefinition: <anonymous>
            PsiElement(new)('new')
            PsiWhiteSpace(' ')
            ExtendsBlock
              TemplateParents
                ConstructorInvocation
                  SimpleType: GetInt
                    CodeReferenceElement: GetInt
                      PsiElement(identifier)('GetInt')
              PsiWhiteSpace(' ')
              ScTemplateBody
                PsiElement({)('{')
                PsiWhiteSpace('\n    ')
                ScFunctionDefinition: value
                  AnnotationsList
                    <empty list>
                  Modifiers
                    PsiElement(inline)('inline')
                  PsiWhiteSpace(' ')
                  PsiElement(def)('def')
                  PsiWhiteSpace(' ')
                  PsiElement(identifier)('value')
                  Parameters
                    <empty list>
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  SimpleType: Int
                    CodeReferenceElement: Int
                      PsiElement(identifier)('Int')
                  PsiWhiteSpace(' ')
                  PsiElement(=)('=')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: f
                    PsiElement(identifier)('f')
                PsiWhiteSpace(' ')
                PsiComment(comment)('// has to be inline to crash')
                PsiWhiteSpace('\n  ')
                PsiElement(})('}')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
