
object Test {
  def main(args: Array[String]): Unit = {
    val d: Double = (BigInt(1) << 64).toDouble
    val f: Float = d.toFloat
    val n: java.lang.Number = d.toFloat
    assert (d == f)   // ok
    assert (d == n)   // was: comparing values of types Double and Number using `==' will always yield false
    assert (n == d)   // was: Number and Double are unrelated: they will most likely never compare equal
    assert (f == n)
    assert (n == f)
  }
}
-----
ScalaFile
  ScObject: Test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: main
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('main')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: args
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('args')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  ParametrizedType: Array[String]
                    SimpleType: Array
                      CodeReferenceElement: Array
                        PsiElement(identifier)('Array')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: String
                        CodeReferenceElement: String
                          PsiElement(identifier)('String')
                      PsiElement(])(']')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Unit
            CodeReferenceElement: Unit
              PsiElement(identifier)('Unit')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          BlockExpression
            PsiElement({)('{')
            PsiWhiteSpace('\n    ')
            ScPatternDefinition: d
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              ListOfPatterns
                ReferencePattern: d
                  PsiElement(identifier)('d')
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              SimpleType: Double
                CodeReferenceElement: Double
                  PsiElement(identifier)('Double')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              ReferenceExpression: (BigInt(1) << 64).toDouble
                ExpressionInParenthesis
                  PsiElement(()('(')
                  InfixExpression
                    MethodCall
                      ReferenceExpression: BigInt
                        PsiElement(identifier)('BigInt')
                      ArgumentList
                        PsiElement(()('(')
                        IntegerLiteral
                          PsiElement(integer)('1')
                        PsiElement())(')')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: <<
                      PsiElement(identifier)('<<')
                    PsiWhiteSpace(' ')
                    IntegerLiteral
                      PsiElement(integer)('64')
                  PsiElement())(')')
                PsiElement(.)('.')
                PsiElement(identifier)('toDouble')
            PsiWhiteSpace('\n    ')
            ScPatternDefinition: f
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              ListOfPatterns
                ReferencePattern: f
                  PsiElement(identifier)('f')
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              SimpleType: Float
                CodeReferenceElement: Float
                  PsiElement(identifier)('Float')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              ReferenceExpression: d.toFloat
                ReferenceExpression: d
                  PsiElement(identifier)('d')
                PsiElement(.)('.')
                PsiElement(identifier)('toFloat')
            PsiWhiteSpace('\n    ')
            ScPatternDefinition: n
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              ListOfPatterns
                ReferencePattern: n
                  PsiElement(identifier)('n')
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              SimpleType: java.lang.Number
                CodeReferenceElement: java.lang.Number
                  CodeReferenceElement: java.lang
                    CodeReferenceElement: java
                      PsiElement(identifier)('java')
                    PsiElement(.)('.')
                    PsiElement(identifier)('lang')
                  PsiElement(.)('.')
                  PsiElement(identifier)('Number')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              ReferenceExpression: d.toFloat
                ReferenceExpression: d
                  PsiElement(identifier)('d')
                PsiElement(.)('.')
                PsiElement(identifier)('toFloat')
            PsiWhiteSpace('\n    ')
            MethodCall
              ReferenceExpression: assert
                PsiElement(identifier)('assert')
              PsiWhiteSpace(' ')
              ArgumentList
                PsiElement(()('(')
                InfixExpression
                  ReferenceExpression: d
                    PsiElement(identifier)('d')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: ==
                    PsiElement(identifier)('==')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: f
                    PsiElement(identifier)('f')
                PsiElement())(')')
            PsiWhiteSpace('   ')
            PsiComment(comment)('// ok')
            PsiWhiteSpace('\n    ')
            MethodCall
              ReferenceExpression: assert
                PsiElement(identifier)('assert')
              PsiWhiteSpace(' ')
              ArgumentList
                PsiElement(()('(')
                InfixExpression
                  ReferenceExpression: d
                    PsiElement(identifier)('d')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: ==
                    PsiElement(identifier)('==')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: n
                    PsiElement(identifier)('n')
                PsiElement())(')')
            PsiWhiteSpace('   ')
            PsiComment(comment)('// was: comparing values of types Double and Number using `==' will always yield false')
            PsiWhiteSpace('\n    ')
            MethodCall
              ReferenceExpression: assert
                PsiElement(identifier)('assert')
              PsiWhiteSpace(' ')
              ArgumentList
                PsiElement(()('(')
                InfixExpression
                  ReferenceExpression: n
                    PsiElement(identifier)('n')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: ==
                    PsiElement(identifier)('==')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: d
                    PsiElement(identifier)('d')
                PsiElement())(')')
            PsiWhiteSpace('   ')
            PsiComment(comment)('// was: Number and Double are unrelated: they will most likely never compare equal')
            PsiWhiteSpace('\n    ')
            MethodCall
              ReferenceExpression: assert
                PsiElement(identifier)('assert')
              PsiWhiteSpace(' ')
              ArgumentList
                PsiElement(()('(')
                InfixExpression
                  ReferenceExpression: f
                    PsiElement(identifier)('f')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: ==
                    PsiElement(identifier)('==')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: n
                    PsiElement(identifier)('n')
                PsiElement())(')')
            PsiWhiteSpace('\n    ')
            MethodCall
              ReferenceExpression: assert
                PsiElement(identifier)('assert')
              PsiWhiteSpace(' ')
              ArgumentList
                PsiElement(()('(')
                InfixExpression
                  ReferenceExpression: n
                    PsiElement(identifier)('n')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: ==
                    PsiElement(identifier)('==')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: f
                    PsiElement(identifier)('f')
                PsiElement())(')')
            PsiWhiteSpace('\n  ')
            PsiElement(})('}')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
