// error with -Xunapply, (because of missing call to memberType?)

trait Gunk[a] {

  type Seq

  object Cons {
    def unapply(s: Seq) = unapply_Cons(s)
  }
  def unapply_Cons(s: Any): Option[Tuple2[a, Seq]]
}

class Join[a] extends Gunk[a] {
  type Seq = JoinSeq

  abstract class JoinSeq
  case class App(xs: Seq, ys: Seq) extends JoinSeq

  def append(s1: Seq, s2: Seq): Seq = s1 // mock implementation

  def unapply_Cons(s: Any) = s match {
    case App(Cons(x, xs), ys) => Some((x, append(xs, ys)))
    case _ => null
  }
}
-----
ScalaFile
  PsiComment(comment)('// error with -Xunapply, (because of missing call to memberType?)')
  PsiWhiteSpace('\n\n')
  ScTrait: Gunk
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Gunk')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: a
        PsiElement(identifier)('a')
      PsiElement(])(']')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n\n  ')
        ScTypeAliasDeclaration: Seq
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Seq')
        PsiWhiteSpace('\n\n  ')
        ScObject: Cons
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(object)('object')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Cons')
          PsiWhiteSpace(' ')
          ExtendsBlock
            ScTemplateBody
              PsiElement({)('{')
              PsiWhiteSpace('\n    ')
              ScFunctionDefinition: unapply
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(def)('def')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('unapply')
                Parameters
                  ParametersClause
                    PsiElement(()('(')
                    Parameter: s
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(identifier)('s')
                      PsiElement(:)(':')
                      PsiWhiteSpace(' ')
                      ParameterType
                        SimpleType: Seq
                          CodeReferenceElement: Seq
                            PsiElement(identifier)('Seq')
                    PsiElement())(')')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                MethodCall
                  ReferenceExpression: unapply_Cons
                    PsiElement(identifier)('unapply_Cons')
                  ArgumentList
                    PsiElement(()('(')
                    ReferenceExpression: s
                      PsiElement(identifier)('s')
                    PsiElement())(')')
              PsiWhiteSpace('\n  ')
              PsiElement(})('}')
        PsiWhiteSpace('\n  ')
        ScFunctionDeclaration: unapply_Cons
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('unapply_Cons')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: s
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('s')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Any
                    CodeReferenceElement: Any
                      PsiElement(identifier)('Any')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: Option[Tuple2[a, Seq]]
            SimpleType: Option
              CodeReferenceElement: Option
                PsiElement(identifier)('Option')
            TypeArgumentsList
              PsiElement([)('[')
              ParametrizedType: Tuple2[a, Seq]
                SimpleType: Tuple2
                  CodeReferenceElement: Tuple2
                    PsiElement(identifier)('Tuple2')
                TypeArgumentsList
                  PsiElement([)('[')
                  SimpleType: a
                    CodeReferenceElement: a
                      PsiElement(identifier)('a')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  SimpleType: Seq
                    CodeReferenceElement: Seq
                      PsiElement(identifier)('Seq')
                  PsiElement(])(']')
              PsiElement(])(']')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScClass: Join
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Join')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: a
        PsiElement(identifier)('a')
      PsiElement(])(']')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          ParametrizedType: Gunk[a]
            SimpleType: Gunk
              CodeReferenceElement: Gunk
                PsiElement(identifier)('Gunk')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: a
                CodeReferenceElement: a
                  PsiElement(identifier)('a')
              PsiElement(])(']')
      PsiWhiteSpace(' ')
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScTypeAliasDefinition: Seq
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Seq')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          SimpleType: JoinSeq
            CodeReferenceElement: JoinSeq
              PsiElement(identifier)('JoinSeq')
        PsiWhiteSpace('\n\n  ')
        ScClass: JoinSeq
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(abstract)('abstract')
          PsiWhiteSpace(' ')
          PsiElement(class)('class')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('JoinSeq')
          PrimaryConstructor
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            Parameters
              <empty list>
          ExtendsBlock
            <empty list>
        PsiWhiteSpace('\n  ')
        ScClass: App
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(case)('case')
          PsiWhiteSpace(' ')
          PsiElement(class)('class')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('App')
          PrimaryConstructor
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            Parameters
              ParametersClause
                PsiElement(()('(')
                ClassParameter: xs
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(identifier)('xs')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    SimpleType: Seq
                      CodeReferenceElement: Seq
                        PsiElement(identifier)('Seq')
                PsiElement(,)(',')
                PsiWhiteSpace(' ')
                ClassParameter: ys
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(identifier)('ys')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    SimpleType: Seq
                      CodeReferenceElement: Seq
                        PsiElement(identifier)('Seq')
                PsiElement())(')')
          PsiWhiteSpace(' ')
          ExtendsBlock
            PsiElement(extends)('extends')
            PsiWhiteSpace(' ')
            TemplateParents
              ConstructorInvocation
                SimpleType: JoinSeq
                  CodeReferenceElement: JoinSeq
                    PsiElement(identifier)('JoinSeq')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: append
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('append')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: s1
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('s1')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Seq
                    CodeReferenceElement: Seq
                      PsiElement(identifier)('Seq')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              Parameter: s2
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('s2')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Seq
                    CodeReferenceElement: Seq
                      PsiElement(identifier)('Seq')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Seq
            CodeReferenceElement: Seq
              PsiElement(identifier)('Seq')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: s1
            PsiElement(identifier)('s1')
        PsiWhiteSpace(' ')
        PsiComment(comment)('// mock implementation')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: unapply_Cons
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('unapply_Cons')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: s
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('s')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Any
                    CodeReferenceElement: Any
                      PsiElement(identifier)('Any')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MatchStatement
            ReferenceExpression: s
              PsiElement(identifier)('s')
            PsiWhiteSpace(' ')
            PsiElement(match)('match')
            PsiWhiteSpace(' ')
            PsiElement({)('{')
            PsiWhiteSpace('\n    ')
            CaseClauses
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                ConstructorPattern
                  CodeReferenceElement: App
                    PsiElement(identifier)('App')
                  Pattern Argument List
                    PsiElement(()('(')
                    ConstructorPattern
                      CodeReferenceElement: Cons
                        PsiElement(identifier)('Cons')
                      Pattern Argument List
                        PsiElement(()('(')
                        ReferencePattern: x
                          PsiElement(identifier)('x')
                        PsiElement(,)(',')
                        PsiWhiteSpace(' ')
                        ReferencePattern: xs
                          PsiElement(identifier)('xs')
                        PsiElement())(')')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    ReferencePattern: ys
                      PsiElement(identifier)('ys')
                    PsiElement())(')')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                BlockOfExpressions
                  MethodCall
                    ReferenceExpression: Some
                      PsiElement(identifier)('Some')
                    ArgumentList
                      PsiElement(()('(')
                      Tuple
                        PsiElement(()('(')
                        ReferenceExpression: x
                          PsiElement(identifier)('x')
                        PsiElement(,)(',')
                        PsiWhiteSpace(' ')
                        MethodCall
                          ReferenceExpression: append
                            PsiElement(identifier)('append')
                          ArgumentList
                            PsiElement(()('(')
                            ReferenceExpression: xs
                              PsiElement(identifier)('xs')
                            PsiElement(,)(',')
                            PsiWhiteSpace(' ')
                            ReferenceExpression: ys
                              PsiElement(identifier)('ys')
                            PsiElement())(')')
                        PsiElement())(')')
                      PsiElement())(')')
              PsiWhiteSpace('\n    ')
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                WildcardPattern
                  PsiElement(_)('_')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                BlockOfExpressions
                  NullLiteral
                    PsiElement(null)('null')
            PsiWhiteSpace('\n  ')
            PsiElement(})('}')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
