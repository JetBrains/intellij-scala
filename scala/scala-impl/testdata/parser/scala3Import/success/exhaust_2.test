object ExhaustivityWarnBugReportMinimal {
  //sealed is needed for the warning
  sealed trait FoundNode[T]/*presence of parameters is irrelevant*/
  // This also causes a warning:
  // sealed abstract class FoundNode[T]/*presence of parameters is irrelevant*/
  case class FoundFilter[T](/*presence of parameters is irrelevant*/) extends FoundNode[T]
  case class FoundTypeCase[T](/*presence of parameters is irrelevant*/) extends FoundNode[T]
  val f: Some[_] = ???
  f match {
    case x: Some[t] => //no warning
  }
  //With these variants, no warnings:
  //val v: (Some[Int], FoundNode[_]) = (???, ???)
  //val v: (Some[AnyRef], FoundNode[_]) = (???, ???)
  //val v: (Some[String], FoundNode[_]) = (???, ???)

  val v: (Some[_], FoundNode[_]) = (???, ???)
  //Warning here:
  v match {
    case (x: Some[t], _: FoundNode[_]) =>
  }
  v match {
    case (x: Some[t], _) =>
  }

  v match {
    case (x: Some[_], _) =>
  }
  case class Foo[T]()

  val vp: (Foo[_], FoundNode[_]) = (???, ???)
  vp match {
    case (x: Foo[_], _) =>
  }

  //No warning here:
  v match {
    case (Some(y), _) =>
  }

  v match {
    case (x, _) =>
  }

  val v2: (Some[_], Int) = (???, ???)
  v2 match {
    case (x: Some[t], _) =>
  }

  val v3: (Option[_], FoundNode[_]) = (???, ???)
  v match {
    case (x: Option[_], _) =>
  }
}
-----
ScalaFile
  ScObject: ExhaustivityWarnBugReportMinimal
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('ExhaustivityWarnBugReportMinimal')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScTrait: FoundNode
          PsiComment(comment)('//sealed is needed for the warning')
          PsiWhiteSpace('\n  ')
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(sealed)('sealed')
          PsiWhiteSpace(' ')
          PsiElement(trait)('trait')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('FoundNode')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: T
              PsiElement(identifier)('T')
            PsiElement(])(']')
          ExtendsBlock
            <empty list>
        PsiComment(BlockComment)('/*presence of parameters is irrelevant*/')
        PsiWhiteSpace('\n  ')
        ScClass: FoundFilter
          PsiComment(comment)('// This also causes a warning:')
          PsiWhiteSpace('\n  ')
          PsiComment(comment)('// sealed abstract class FoundNode[T]/*presence of parameters is irrelevant*/')
          PsiWhiteSpace('\n  ')
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(case)('case')
          PsiWhiteSpace(' ')
          PsiElement(class)('class')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('FoundFilter')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: T
              PsiElement(identifier)('T')
            PsiElement(])(']')
          PrimaryConstructor
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            Parameters
              ParametersClause
                PsiElement(()('(')
                PsiComment(BlockComment)('/*presence of parameters is irrelevant*/')
                PsiElement())(')')
          PsiWhiteSpace(' ')
          ExtendsBlock
            PsiElement(extends)('extends')
            PsiWhiteSpace(' ')
            TemplateParents
              ConstructorInvocation
                ParametrizedType: FoundNode[T]
                  SimpleType: FoundNode
                    CodeReferenceElement: FoundNode
                      PsiElement(identifier)('FoundNode')
                  TypeArgumentsList
                    PsiElement([)('[')
                    SimpleType: T
                      CodeReferenceElement: T
                        PsiElement(identifier)('T')
                    PsiElement(])(']')
        PsiWhiteSpace('\n  ')
        ScClass: FoundTypeCase
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(case)('case')
          PsiWhiteSpace(' ')
          PsiElement(class)('class')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('FoundTypeCase')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: T
              PsiElement(identifier)('T')
            PsiElement(])(']')
          PrimaryConstructor
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            Parameters
              ParametersClause
                PsiElement(()('(')
                PsiComment(BlockComment)('/*presence of parameters is irrelevant*/')
                PsiElement())(')')
          PsiWhiteSpace(' ')
          ExtendsBlock
            PsiElement(extends)('extends')
            PsiWhiteSpace(' ')
            TemplateParents
              ConstructorInvocation
                ParametrizedType: FoundNode[T]
                  SimpleType: FoundNode
                    CodeReferenceElement: FoundNode
                      PsiElement(identifier)('FoundNode')
                  TypeArgumentsList
                    PsiElement([)('[')
                    SimpleType: T
                      CodeReferenceElement: T
                        PsiElement(identifier)('T')
                    PsiElement(])(']')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: f
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: f
              PsiElement(identifier)('f')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: Some[_]
            SimpleType: Some
              CodeReferenceElement: Some
                PsiElement(identifier)('Some')
            TypeArgumentsList
              PsiElement([)('[')
              WildcardType: _
                PsiElement(_)('_')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: ???
            PsiElement(identifier)('???')
        PsiWhiteSpace('\n  ')
        MatchStatement
          ReferenceExpression: f
            PsiElement(identifier)('f')
          PsiWhiteSpace(' ')
          PsiElement(match)('match')
          PsiWhiteSpace(' ')
          PsiElement({)('{')
          PsiWhiteSpace('\n    ')
          CaseClauses
            CaseClause
              PsiElement(case)('case')
              PsiWhiteSpace(' ')
              Scala3 TypedPattern
                ReferencePattern: x
                  PsiElement(identifier)('x')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                TypePattern
                  ParametrizedType: Some[t]
                    SimpleType: Some
                      CodeReferenceElement: Some
                        PsiElement(identifier)('Some')
                    TypeArgumentsList
                      PsiElement([)('[')
                      TypeVariable: t
                        PsiElement(identifier)('t')
                      PsiElement(])(']')
              PsiWhiteSpace(' ')
              PsiElement(=>)('=>')
              BlockOfExpressions
                <empty list>
          PsiWhiteSpace(' ')
          PsiComment(comment)('//no warning')
          PsiWhiteSpace('\n  ')
          PsiElement(})('}')
        PsiWhiteSpace('\n  ')
        PsiComment(comment)('//With these variants, no warnings:')
        PsiWhiteSpace('\n  ')
        PsiComment(comment)('//val v: (Some[Int], FoundNode[_]) = (???, ???)')
        PsiWhiteSpace('\n  ')
        PsiComment(comment)('//val v: (Some[AnyRef], FoundNode[_]) = (???, ???)')
        PsiWhiteSpace('\n  ')
        PsiComment(comment)('//val v: (Some[String], FoundNode[_]) = (???, ???)')
        PsiWhiteSpace('\n\n  ')
        ScPatternDefinition: v
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: v
              PsiElement(identifier)('v')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          TupleType: (Some[_], FoundNode[_])
            PsiElement(()('(')
            TypesList
              ParametrizedType: Some[_]
                SimpleType: Some
                  CodeReferenceElement: Some
                    PsiElement(identifier)('Some')
                TypeArgumentsList
                  PsiElement([)('[')
                  WildcardType: _
                    PsiElement(_)('_')
                  PsiElement(])(']')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              ParametrizedType: FoundNode[_]
                SimpleType: FoundNode
                  CodeReferenceElement: FoundNode
                    PsiElement(identifier)('FoundNode')
                TypeArgumentsList
                  PsiElement([)('[')
                  WildcardType: _
                    PsiElement(_)('_')
                  PsiElement(])(']')
            PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          Tuple
            PsiElement(()('(')
            ReferenceExpression: ???
              PsiElement(identifier)('???')
            PsiElement(,)(',')
            PsiWhiteSpace(' ')
            ReferenceExpression: ???
              PsiElement(identifier)('???')
            PsiElement())(')')
        PsiWhiteSpace('\n  ')
        PsiComment(comment)('//Warning here:')
        PsiWhiteSpace('\n  ')
        MatchStatement
          ReferenceExpression: v
            PsiElement(identifier)('v')
          PsiWhiteSpace(' ')
          PsiElement(match)('match')
          PsiWhiteSpace(' ')
          PsiElement({)('{')
          PsiWhiteSpace('\n    ')
          CaseClauses
            CaseClause
              PsiElement(case)('case')
              PsiWhiteSpace(' ')
              TuplePattern
                PsiElement(()('(')
                ArgumentPatterns
                  Scala3 TypedPattern
                    ReferencePattern: x
                      PsiElement(identifier)('x')
                    PsiElement(:)(':')
                    PsiWhiteSpace(' ')
                    TypePattern
                      ParametrizedType: Some[t]
                        SimpleType: Some
                          CodeReferenceElement: Some
                            PsiElement(identifier)('Some')
                        TypeArgumentsList
                          PsiElement([)('[')
                          TypeVariable: t
                            PsiElement(identifier)('t')
                          PsiElement(])(']')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  Scala3 TypedPattern
                    WildcardPattern
                      PsiElement(_)('_')
                    PsiElement(:)(':')
                    PsiWhiteSpace(' ')
                    TypePattern
                      ParametrizedType: FoundNode[_]
                        SimpleType: FoundNode
                          CodeReferenceElement: FoundNode
                            PsiElement(identifier)('FoundNode')
                        TypeArgumentsList
                          PsiElement([)('[')
                          TypeVariable: _
                            PsiElement(_)('_')
                          PsiElement(])(']')
                PsiElement())(')')
              PsiWhiteSpace(' ')
              PsiElement(=>)('=>')
              BlockOfExpressions
                <empty list>
          PsiWhiteSpace('\n  ')
          PsiElement(})('}')
        PsiWhiteSpace('\n  ')
        MatchStatement
          ReferenceExpression: v
            PsiElement(identifier)('v')
          PsiWhiteSpace(' ')
          PsiElement(match)('match')
          PsiWhiteSpace(' ')
          PsiElement({)('{')
          PsiWhiteSpace('\n    ')
          CaseClauses
            CaseClause
              PsiElement(case)('case')
              PsiWhiteSpace(' ')
              TuplePattern
                PsiElement(()('(')
                ArgumentPatterns
                  Scala3 TypedPattern
                    ReferencePattern: x
                      PsiElement(identifier)('x')
                    PsiElement(:)(':')
                    PsiWhiteSpace(' ')
                    TypePattern
                      ParametrizedType: Some[t]
                        SimpleType: Some
                          CodeReferenceElement: Some
                            PsiElement(identifier)('Some')
                        TypeArgumentsList
                          PsiElement([)('[')
                          TypeVariable: t
                            PsiElement(identifier)('t')
                          PsiElement(])(']')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  WildcardPattern
                    PsiElement(_)('_')
                PsiElement())(')')
              PsiWhiteSpace(' ')
              PsiElement(=>)('=>')
              BlockOfExpressions
                <empty list>
          PsiWhiteSpace('\n  ')
          PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        MatchStatement
          ReferenceExpression: v
            PsiElement(identifier)('v')
          PsiWhiteSpace(' ')
          PsiElement(match)('match')
          PsiWhiteSpace(' ')
          PsiElement({)('{')
          PsiWhiteSpace('\n    ')
          CaseClauses
            CaseClause
              PsiElement(case)('case')
              PsiWhiteSpace(' ')
              TuplePattern
                PsiElement(()('(')
                ArgumentPatterns
                  Scala3 TypedPattern
                    ReferencePattern: x
                      PsiElement(identifier)('x')
                    PsiElement(:)(':')
                    PsiWhiteSpace(' ')
                    TypePattern
                      ParametrizedType: Some[_]
                        SimpleType: Some
                          CodeReferenceElement: Some
                            PsiElement(identifier)('Some')
                        TypeArgumentsList
                          PsiElement([)('[')
                          TypeVariable: _
                            PsiElement(_)('_')
                          PsiElement(])(']')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  WildcardPattern
                    PsiElement(_)('_')
                PsiElement())(')')
              PsiWhiteSpace(' ')
              PsiElement(=>)('=>')
              BlockOfExpressions
                <empty list>
          PsiWhiteSpace('\n  ')
          PsiElement(})('}')
        PsiWhiteSpace('\n  ')
        ScClass: Foo
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(case)('case')
          PsiWhiteSpace(' ')
          PsiElement(class)('class')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Foo')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: T
              PsiElement(identifier)('T')
            PsiElement(])(']')
          PrimaryConstructor
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            Parameters
              ParametersClause
                PsiElement(()('(')
                PsiElement())(')')
          ExtendsBlock
            <empty list>
        PsiWhiteSpace('\n\n  ')
        ScPatternDefinition: vp
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: vp
              PsiElement(identifier)('vp')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          TupleType: (Foo[_], FoundNode[_])
            PsiElement(()('(')
            TypesList
              ParametrizedType: Foo[_]
                SimpleType: Foo
                  CodeReferenceElement: Foo
                    PsiElement(identifier)('Foo')
                TypeArgumentsList
                  PsiElement([)('[')
                  WildcardType: _
                    PsiElement(_)('_')
                  PsiElement(])(']')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              ParametrizedType: FoundNode[_]
                SimpleType: FoundNode
                  CodeReferenceElement: FoundNode
                    PsiElement(identifier)('FoundNode')
                TypeArgumentsList
                  PsiElement([)('[')
                  WildcardType: _
                    PsiElement(_)('_')
                  PsiElement(])(']')
            PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          Tuple
            PsiElement(()('(')
            ReferenceExpression: ???
              PsiElement(identifier)('???')
            PsiElement(,)(',')
            PsiWhiteSpace(' ')
            ReferenceExpression: ???
              PsiElement(identifier)('???')
            PsiElement())(')')
        PsiWhiteSpace('\n  ')
        MatchStatement
          ReferenceExpression: vp
            PsiElement(identifier)('vp')
          PsiWhiteSpace(' ')
          PsiElement(match)('match')
          PsiWhiteSpace(' ')
          PsiElement({)('{')
          PsiWhiteSpace('\n    ')
          CaseClauses
            CaseClause
              PsiElement(case)('case')
              PsiWhiteSpace(' ')
              TuplePattern
                PsiElement(()('(')
                ArgumentPatterns
                  Scala3 TypedPattern
                    ReferencePattern: x
                      PsiElement(identifier)('x')
                    PsiElement(:)(':')
                    PsiWhiteSpace(' ')
                    TypePattern
                      ParametrizedType: Foo[_]
                        SimpleType: Foo
                          CodeReferenceElement: Foo
                            PsiElement(identifier)('Foo')
                        TypeArgumentsList
                          PsiElement([)('[')
                          TypeVariable: _
                            PsiElement(_)('_')
                          PsiElement(])(']')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  WildcardPattern
                    PsiElement(_)('_')
                PsiElement())(')')
              PsiWhiteSpace(' ')
              PsiElement(=>)('=>')
              BlockOfExpressions
                <empty list>
          PsiWhiteSpace('\n  ')
          PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        PsiComment(comment)('//No warning here:')
        PsiWhiteSpace('\n  ')
        MatchStatement
          ReferenceExpression: v
            PsiElement(identifier)('v')
          PsiWhiteSpace(' ')
          PsiElement(match)('match')
          PsiWhiteSpace(' ')
          PsiElement({)('{')
          PsiWhiteSpace('\n    ')
          CaseClauses
            CaseClause
              PsiElement(case)('case')
              PsiWhiteSpace(' ')
              TuplePattern
                PsiElement(()('(')
                ArgumentPatterns
                  ConstructorPattern
                    CodeReferenceElement: Some
                      PsiElement(identifier)('Some')
                    Pattern Argument List
                      PsiElement(()('(')
                      ReferencePattern: y
                        PsiElement(identifier)('y')
                      PsiElement())(')')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  WildcardPattern
                    PsiElement(_)('_')
                PsiElement())(')')
              PsiWhiteSpace(' ')
              PsiElement(=>)('=>')
              BlockOfExpressions
                <empty list>
          PsiWhiteSpace('\n  ')
          PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        MatchStatement
          ReferenceExpression: v
            PsiElement(identifier)('v')
          PsiWhiteSpace(' ')
          PsiElement(match)('match')
          PsiWhiteSpace(' ')
          PsiElement({)('{')
          PsiWhiteSpace('\n    ')
          CaseClauses
            CaseClause
              PsiElement(case)('case')
              PsiWhiteSpace(' ')
              TuplePattern
                PsiElement(()('(')
                ArgumentPatterns
                  ReferencePattern: x
                    PsiElement(identifier)('x')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  WildcardPattern
                    PsiElement(_)('_')
                PsiElement())(')')
              PsiWhiteSpace(' ')
              PsiElement(=>)('=>')
              BlockOfExpressions
                <empty list>
          PsiWhiteSpace('\n  ')
          PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        ScPatternDefinition: v2
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: v2
              PsiElement(identifier)('v2')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          TupleType: (Some[_], Int)
            PsiElement(()('(')
            TypesList
              ParametrizedType: Some[_]
                SimpleType: Some
                  CodeReferenceElement: Some
                    PsiElement(identifier)('Some')
                TypeArgumentsList
                  PsiElement([)('[')
                  WildcardType: _
                    PsiElement(_)('_')
                  PsiElement(])(']')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              SimpleType: Int
                CodeReferenceElement: Int
                  PsiElement(identifier)('Int')
            PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          Tuple
            PsiElement(()('(')
            ReferenceExpression: ???
              PsiElement(identifier)('???')
            PsiElement(,)(',')
            PsiWhiteSpace(' ')
            ReferenceExpression: ???
              PsiElement(identifier)('???')
            PsiElement())(')')
        PsiWhiteSpace('\n  ')
        MatchStatement
          ReferenceExpression: v2
            PsiElement(identifier)('v2')
          PsiWhiteSpace(' ')
          PsiElement(match)('match')
          PsiWhiteSpace(' ')
          PsiElement({)('{')
          PsiWhiteSpace('\n    ')
          CaseClauses
            CaseClause
              PsiElement(case)('case')
              PsiWhiteSpace(' ')
              TuplePattern
                PsiElement(()('(')
                ArgumentPatterns
                  Scala3 TypedPattern
                    ReferencePattern: x
                      PsiElement(identifier)('x')
                    PsiElement(:)(':')
                    PsiWhiteSpace(' ')
                    TypePattern
                      ParametrizedType: Some[t]
                        SimpleType: Some
                          CodeReferenceElement: Some
                            PsiElement(identifier)('Some')
                        TypeArgumentsList
                          PsiElement([)('[')
                          TypeVariable: t
                            PsiElement(identifier)('t')
                          PsiElement(])(']')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  WildcardPattern
                    PsiElement(_)('_')
                PsiElement())(')')
              PsiWhiteSpace(' ')
              PsiElement(=>)('=>')
              BlockOfExpressions
                <empty list>
          PsiWhiteSpace('\n  ')
          PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        ScPatternDefinition: v3
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: v3
              PsiElement(identifier)('v3')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          TupleType: (Option[_], FoundNode[_])
            PsiElement(()('(')
            TypesList
              ParametrizedType: Option[_]
                SimpleType: Option
                  CodeReferenceElement: Option
                    PsiElement(identifier)('Option')
                TypeArgumentsList
                  PsiElement([)('[')
                  WildcardType: _
                    PsiElement(_)('_')
                  PsiElement(])(']')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              ParametrizedType: FoundNode[_]
                SimpleType: FoundNode
                  CodeReferenceElement: FoundNode
                    PsiElement(identifier)('FoundNode')
                TypeArgumentsList
                  PsiElement([)('[')
                  WildcardType: _
                    PsiElement(_)('_')
                  PsiElement(])(']')
            PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          Tuple
            PsiElement(()('(')
            ReferenceExpression: ???
              PsiElement(identifier)('???')
            PsiElement(,)(',')
            PsiWhiteSpace(' ')
            ReferenceExpression: ???
              PsiElement(identifier)('???')
            PsiElement())(')')
        PsiWhiteSpace('\n  ')
        MatchStatement
          ReferenceExpression: v
            PsiElement(identifier)('v')
          PsiWhiteSpace(' ')
          PsiElement(match)('match')
          PsiWhiteSpace(' ')
          PsiElement({)('{')
          PsiWhiteSpace('\n    ')
          CaseClauses
            CaseClause
              PsiElement(case)('case')
              PsiWhiteSpace(' ')
              TuplePattern
                PsiElement(()('(')
                ArgumentPatterns
                  Scala3 TypedPattern
                    ReferencePattern: x
                      PsiElement(identifier)('x')
                    PsiElement(:)(':')
                    PsiWhiteSpace(' ')
                    TypePattern
                      ParametrizedType: Option[_]
                        SimpleType: Option
                          CodeReferenceElement: Option
                            PsiElement(identifier)('Option')
                        TypeArgumentsList
                          PsiElement([)('[')
                          TypeVariable: _
                            PsiElement(_)('_')
                          PsiElement(])(']')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  WildcardPattern
                    PsiElement(_)('_')
                PsiElement())(')')
              PsiWhiteSpace(' ')
              PsiElement(=>)('=>')
              BlockOfExpressions
                <empty list>
          PsiWhiteSpace('\n  ')
          PsiElement(})('}')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
