object Test{
  def ?[S <: AnyRef](implicit w : S) : w.type = w

  // fallback, lower priority (overloading rules apply: pick alternative in subclass lowest in subtyping lattice)
  class ZipWithDefault {
    implicit def ZeroZipWith[S]: Test.ZipWith[S]{type T = Stream[S]} = new ZipWith[S] {
      type T = Stream[S]
    }
  }

  object ZipWith extends ZipWithDefault {
    // def apply[S: ZipWith](s : S) = ?[ZipWith[S]].zipWith(s) // TODO: bug return type should be inferred
    def apply[S](s : S)(implicit zw: ZipWith[S]): zw.T = zw.zipWith(s)

    implicit def SuccZipWith[S,R](implicit zWith : ZipWith[R]): Test.ZipWith[S => R]{type T = Stream[S] => zWith.T} = new ZipWith[S => R] {
      type T = Stream[S] => zWith.T // dependent types replace the associated types functionality
    }
  }

  import ZipWith.*

  trait ZipWith[S] {
    type T
    def zipWith : S => T = sys.error("")
  }

  // bug: inferred return type = (Stream[A]) => java.lang.Object with Test.ZipWith[B]{type T = Stream[B]}#T
  // this seems incompatible with vvvvvvvvvvvvvvvvvvvvvv   -- #3731
  def map1[A,B](f : A => B) = ZipWith(f)(SuccZipWith) // this typechecks but fails in -Ycheck:first
  val tst1: Stream[Int] = map1[String, Int]{(x: String) => x.length}.apply(Stream("a"))

  def map2[A,B](f : A => B) = ZipWith(f) // this finds ZeroZipWith where scalac finds SuccZipWith and fails typechecking in the next line.
  val tst2: Stream[Int] = map2{(x: String) => x.length}.apply(Stream("a"))
}
-----
ScalaFile
  ScObject: Test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: ?
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('?')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: S
              PsiElement(identifier)('S')
              PsiWhiteSpace(' ')
              PsiElement(<:)('<:')
              PsiWhiteSpace(' ')
              SimpleType: AnyRef
                CodeReferenceElement: AnyRef
                  PsiElement(identifier)('AnyRef')
            PsiElement(])(']')
          Parameters
            ParametersClause
              PsiElement(()('(')
              PsiElement(implicit)('implicit')
              PsiWhiteSpace(' ')
              Parameter: w
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('w')
                PsiWhiteSpace(' ')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: S
                    CodeReferenceElement: S
                      PsiElement(identifier)('S')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: w.type
            CodeReferenceElement: w
              PsiElement(identifier)('w')
            PsiElement(.)('.')
            PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: w
            PsiElement(identifier)('w')
        PsiWhiteSpace('\n\n  ')
        ScClass: ZipWithDefault
          PsiComment(comment)('// fallback, lower priority (overloading rules apply: pick alternative in subclass lowest in subtyping lattice)')
          PsiWhiteSpace('\n  ')
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(class)('class')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('ZipWithDefault')
          PrimaryConstructor
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            Parameters
              <empty list>
          PsiWhiteSpace(' ')
          ExtendsBlock
            ScTemplateBody
              PsiElement({)('{')
              PsiWhiteSpace('\n    ')
              ScFunctionDefinition: ZeroZipWith
                AnnotationsList
                  <empty list>
                Modifiers
                  PsiElement(implicit)('implicit')
                PsiWhiteSpace(' ')
                PsiElement(def)('def')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('ZeroZipWith')
                TypeParameterClause
                  PsiElement([)('[')
                  TypeParameter: S
                    PsiElement(identifier)('S')
                  PsiElement(])(']')
                Parameters
                  <empty list>
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                CompoundType: Test.ZipWith[S]{type T = Stream[S]}
                  ParametrizedType: Test.ZipWith[S]
                    SimpleType: Test.ZipWith
                      CodeReferenceElement: Test.ZipWith
                        CodeReferenceElement: Test
                          PsiElement(identifier)('Test')
                        PsiElement(.)('.')
                        PsiElement(identifier)('ZipWith')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: S
                        CodeReferenceElement: S
                          PsiElement(identifier)('S')
                      PsiElement(])(']')
                  Refinement
                    PsiElement({)('{')
                    ScTypeAliasDefinition: T
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(type)('type')
                      PsiWhiteSpace(' ')
                      PsiElement(identifier)('T')
                      PsiWhiteSpace(' ')
                      PsiElement(=)('=')
                      PsiWhiteSpace(' ')
                      ParametrizedType: Stream[S]
                        SimpleType: Stream
                          CodeReferenceElement: Stream
                            PsiElement(identifier)('Stream')
                        TypeArgumentsList
                          PsiElement([)('[')
                          SimpleType: S
                            CodeReferenceElement: S
                              PsiElement(identifier)('S')
                          PsiElement(])(']')
                    PsiElement(})('}')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                ScNewTemplateDefinition: <anonymous>
                  PsiElement(new)('new')
                  PsiWhiteSpace(' ')
                  ExtendsBlock
                    TemplateParents
                      ConstructorInvocation
                        ParametrizedType: ZipWith[S]
                          SimpleType: ZipWith
                            CodeReferenceElement: ZipWith
                              PsiElement(identifier)('ZipWith')
                          TypeArgumentsList
                            PsiElement([)('[')
                            SimpleType: S
                              CodeReferenceElement: S
                                PsiElement(identifier)('S')
                            PsiElement(])(']')
                    PsiWhiteSpace(' ')
                    ScTemplateBody
                      PsiElement({)('{')
                      PsiWhiteSpace('\n      ')
                      ScTypeAliasDefinition: T
                        AnnotationsList
                          <empty list>
                        Modifiers
                          <empty list>
                        PsiElement(type)('type')
                        PsiWhiteSpace(' ')
                        PsiElement(identifier)('T')
                        PsiWhiteSpace(' ')
                        PsiElement(=)('=')
                        PsiWhiteSpace(' ')
                        ParametrizedType: Stream[S]
                          SimpleType: Stream
                            CodeReferenceElement: Stream
                              PsiElement(identifier)('Stream')
                          TypeArgumentsList
                            PsiElement([)('[')
                            SimpleType: S
                              CodeReferenceElement: S
                                PsiElement(identifier)('S')
                            PsiElement(])(']')
                      PsiWhiteSpace('\n    ')
                      PsiElement(})('}')
              PsiWhiteSpace('\n  ')
              PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        ScObject: ZipWith
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(object)('object')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('ZipWith')
          PsiWhiteSpace(' ')
          ExtendsBlock
            PsiElement(extends)('extends')
            PsiWhiteSpace(' ')
            TemplateParents
              ConstructorInvocation
                SimpleType: ZipWithDefault
                  CodeReferenceElement: ZipWithDefault
                    PsiElement(identifier)('ZipWithDefault')
            PsiWhiteSpace(' ')
            ScTemplateBody
              PsiElement({)('{')
              PsiWhiteSpace('\n    ')
              ScFunctionDefinition: apply
                PsiComment(comment)('// def apply[S: ZipWith](s : S) = ?[ZipWith[S]].zipWith(s) // TODO: bug return type should be inferred')
                PsiWhiteSpace('\n    ')
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(def)('def')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('apply')
                TypeParameterClause
                  PsiElement([)('[')
                  TypeParameter: S
                    PsiElement(identifier)('S')
                  PsiElement(])(']')
                Parameters
                  ParametersClause
                    PsiElement(()('(')
                    Parameter: s
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(identifier)('s')
                      PsiWhiteSpace(' ')
                      PsiElement(:)(':')
                      PsiWhiteSpace(' ')
                      ParameterType
                        SimpleType: S
                          CodeReferenceElement: S
                            PsiElement(identifier)('S')
                    PsiElement())(')')
                  ParametersClause
                    PsiElement(()('(')
                    PsiElement(implicit)('implicit')
                    PsiWhiteSpace(' ')
                    Parameter: zw
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(identifier)('zw')
                      PsiElement(:)(':')
                      PsiWhiteSpace(' ')
                      ParameterType
                        ParametrizedType: ZipWith[S]
                          SimpleType: ZipWith
                            CodeReferenceElement: ZipWith
                              PsiElement(identifier)('ZipWith')
                          TypeArgumentsList
                            PsiElement([)('[')
                            SimpleType: S
                              CodeReferenceElement: S
                                PsiElement(identifier)('S')
                            PsiElement(])(']')
                    PsiElement())(')')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                SimpleType: zw.T
                  CodeReferenceElement: zw.T
                    CodeReferenceElement: zw
                      PsiElement(identifier)('zw')
                    PsiElement(.)('.')
                    PsiElement(identifier)('T')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                MethodCall
                  ReferenceExpression: zw.zipWith
                    ReferenceExpression: zw
                      PsiElement(identifier)('zw')
                    PsiElement(.)('.')
                    PsiElement(identifier)('zipWith')
                  ArgumentList
                    PsiElement(()('(')
                    ReferenceExpression: s
                      PsiElement(identifier)('s')
                    PsiElement())(')')
              PsiWhiteSpace('\n\n    ')
              ScFunctionDefinition: SuccZipWith
                AnnotationsList
                  <empty list>
                Modifiers
                  PsiElement(implicit)('implicit')
                PsiWhiteSpace(' ')
                PsiElement(def)('def')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('SuccZipWith')
                TypeParameterClause
                  PsiElement([)('[')
                  TypeParameter: S
                    PsiElement(identifier)('S')
                  PsiElement(,)(',')
                  TypeParameter: R
                    PsiElement(identifier)('R')
                  PsiElement(])(']')
                Parameters
                  ParametersClause
                    PsiElement(()('(')
                    PsiElement(implicit)('implicit')
                    PsiWhiteSpace(' ')
                    Parameter: zWith
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(identifier)('zWith')
                      PsiWhiteSpace(' ')
                      PsiElement(:)(':')
                      PsiWhiteSpace(' ')
                      ParameterType
                        ParametrizedType: ZipWith[R]
                          SimpleType: ZipWith
                            CodeReferenceElement: ZipWith
                              PsiElement(identifier)('ZipWith')
                          TypeArgumentsList
                            PsiElement([)('[')
                            SimpleType: R
                              CodeReferenceElement: R
                                PsiElement(identifier)('R')
                            PsiElement(])(']')
                    PsiElement())(')')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                CompoundType: Test.ZipWith[S => R]{type T = Stream[S] => zWith.T}
                  ParametrizedType: Test.ZipWith[S => R]
                    SimpleType: Test.ZipWith
                      CodeReferenceElement: Test.ZipWith
                        CodeReferenceElement: Test
                          PsiElement(identifier)('Test')
                        PsiElement(.)('.')
                        PsiElement(identifier)('ZipWith')
                    TypeArgumentsList
                      PsiElement([)('[')
                      FunctionalType: S => R
                        SimpleType: S
                          CodeReferenceElement: S
                            PsiElement(identifier)('S')
                        PsiWhiteSpace(' ')
                        PsiElement(=>)('=>')
                        PsiWhiteSpace(' ')
                        SimpleType: R
                          CodeReferenceElement: R
                            PsiElement(identifier)('R')
                      PsiElement(])(']')
                  Refinement
                    PsiElement({)('{')
                    ScTypeAliasDefinition: T
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(type)('type')
                      PsiWhiteSpace(' ')
                      PsiElement(identifier)('T')
                      PsiWhiteSpace(' ')
                      PsiElement(=)('=')
                      PsiWhiteSpace(' ')
                      FunctionalType: Stream[S] => zWith.T
                        ParametrizedType: Stream[S]
                          SimpleType: Stream
                            CodeReferenceElement: Stream
                              PsiElement(identifier)('Stream')
                          TypeArgumentsList
                            PsiElement([)('[')
                            SimpleType: S
                              CodeReferenceElement: S
                                PsiElement(identifier)('S')
                            PsiElement(])(']')
                        PsiWhiteSpace(' ')
                        PsiElement(=>)('=>')
                        PsiWhiteSpace(' ')
                        SimpleType: zWith.T
                          CodeReferenceElement: zWith.T
                            CodeReferenceElement: zWith
                              PsiElement(identifier)('zWith')
                            PsiElement(.)('.')
                            PsiElement(identifier)('T')
                    PsiElement(})('}')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                ScNewTemplateDefinition: <anonymous>
                  PsiElement(new)('new')
                  PsiWhiteSpace(' ')
                  ExtendsBlock
                    TemplateParents
                      ConstructorInvocation
                        ParametrizedType: ZipWith[S => R]
                          SimpleType: ZipWith
                            CodeReferenceElement: ZipWith
                              PsiElement(identifier)('ZipWith')
                          TypeArgumentsList
                            PsiElement([)('[')
                            FunctionalType: S => R
                              SimpleType: S
                                CodeReferenceElement: S
                                  PsiElement(identifier)('S')
                              PsiWhiteSpace(' ')
                              PsiElement(=>)('=>')
                              PsiWhiteSpace(' ')
                              SimpleType: R
                                CodeReferenceElement: R
                                  PsiElement(identifier)('R')
                            PsiElement(])(']')
                    PsiWhiteSpace(' ')
                    ScTemplateBody
                      PsiElement({)('{')
                      PsiWhiteSpace('\n      ')
                      ScTypeAliasDefinition: T
                        AnnotationsList
                          <empty list>
                        Modifiers
                          <empty list>
                        PsiElement(type)('type')
                        PsiWhiteSpace(' ')
                        PsiElement(identifier)('T')
                        PsiWhiteSpace(' ')
                        PsiElement(=)('=')
                        PsiWhiteSpace(' ')
                        FunctionalType: Stream[S] => zWith.T
                          ParametrizedType: Stream[S]
                            SimpleType: Stream
                              CodeReferenceElement: Stream
                                PsiElement(identifier)('Stream')
                            TypeArgumentsList
                              PsiElement([)('[')
                              SimpleType: S
                                CodeReferenceElement: S
                                  PsiElement(identifier)('S')
                              PsiElement(])(']')
                          PsiWhiteSpace(' ')
                          PsiElement(=>)('=>')
                          PsiWhiteSpace(' ')
                          SimpleType: zWith.T
                            CodeReferenceElement: zWith.T
                              CodeReferenceElement: zWith
                                PsiElement(identifier)('zWith')
                              PsiElement(.)('.')
                              PsiElement(identifier)('T')
                      PsiWhiteSpace(' ')
                      PsiComment(comment)('// dependent types replace the associated types functionality')
                      PsiWhiteSpace('\n    ')
                      PsiElement(})('}')
              PsiWhiteSpace('\n  ')
              PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        ScImportStatement
          PsiElement(import)('import')
          PsiWhiteSpace(' ')
          ImportExpression
            CodeReferenceElement: ZipWith
              PsiElement(identifier)('ZipWith')
            PsiElement(.)('.')
            PsiElement(*)('*')
        PsiWhiteSpace('\n\n  ')
        ScTrait: ZipWith
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(trait)('trait')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('ZipWith')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: S
              PsiElement(identifier)('S')
            PsiElement(])(']')
          PsiWhiteSpace(' ')
          ExtendsBlock
            ScTemplateBody
              PsiElement({)('{')
              PsiWhiteSpace('\n    ')
              ScTypeAliasDeclaration: T
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(type)('type')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('T')
              PsiWhiteSpace('\n    ')
              ScFunctionDefinition: zipWith
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(def)('def')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('zipWith')
                Parameters
                  <empty list>
                PsiWhiteSpace(' ')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                FunctionalType: S => T
                  SimpleType: S
                    CodeReferenceElement: S
                      PsiElement(identifier)('S')
                  PsiWhiteSpace(' ')
                  PsiElement(=>)('=>')
                  PsiWhiteSpace(' ')
                  SimpleType: T
                    CodeReferenceElement: T
                      PsiElement(identifier)('T')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                MethodCall
                  ReferenceExpression: sys.error
                    ReferenceExpression: sys
                      PsiElement(identifier)('sys')
                    PsiElement(.)('.')
                    PsiElement(identifier)('error')
                  ArgumentList
                    PsiElement(()('(')
                    StringLiteral
                      PsiElement(string content)('""')
                    PsiElement())(')')
              PsiWhiteSpace('\n  ')
              PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: map1
          PsiComment(comment)('// bug: inferred return type = (Stream[A]) => java.lang.Object with Test.ZipWith[B]{type T = Stream[B]}#T')
          PsiWhiteSpace('\n  ')
          PsiComment(comment)('// this seems incompatible with vvvvvvvvvvvvvvvvvvvvvv   -- #3731')
          PsiWhiteSpace('\n  ')
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('map1')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: A
              PsiElement(identifier)('A')
            PsiElement(,)(',')
            TypeParameter: B
              PsiElement(identifier)('B')
            PsiElement(])(']')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: f
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('f')
                PsiWhiteSpace(' ')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  FunctionalType: A => B
                    SimpleType: A
                      CodeReferenceElement: A
                        PsiElement(identifier)('A')
                    PsiWhiteSpace(' ')
                    PsiElement(=>)('=>')
                    PsiWhiteSpace(' ')
                    SimpleType: B
                      CodeReferenceElement: B
                        PsiElement(identifier)('B')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            MethodCall
              ReferenceExpression: ZipWith
                PsiElement(identifier)('ZipWith')
              ArgumentList
                PsiElement(()('(')
                ReferenceExpression: f
                  PsiElement(identifier)('f')
                PsiElement())(')')
            ArgumentList
              PsiElement(()('(')
              ReferenceExpression: SuccZipWith
                PsiElement(identifier)('SuccZipWith')
              PsiElement())(')')
        PsiWhiteSpace(' ')
        PsiComment(comment)('// this typechecks but fails in -Ycheck:first')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: tst1
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: tst1
              PsiElement(identifier)('tst1')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: Stream[Int]
            SimpleType: Stream
              CodeReferenceElement: Stream
                PsiElement(identifier)('Stream')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: Int
                CodeReferenceElement: Int
                  PsiElement(identifier)('Int')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: map1[String, Int]{(x: String) => x.length}.apply
              MethodCall
                GenericCall
                  ReferenceExpression: map1
                    PsiElement(identifier)('map1')
                  TypeArgumentsList
                    PsiElement([)('[')
                    SimpleType: String
                      CodeReferenceElement: String
                        PsiElement(identifier)('String')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    SimpleType: Int
                      CodeReferenceElement: Int
                        PsiElement(identifier)('Int')
                    PsiElement(])(']')
                ArgumentList
                  BlockExpression
                    PsiElement({)('{')
                    FunctionExpression
                      Parameters
                        ParametersClause
                          PsiElement(()('(')
                          Parameter: x
                            AnnotationsList
                              <empty list>
                            PsiElement(identifier)('x')
                            PsiElement(:)(':')
                            PsiWhiteSpace(' ')
                            ParameterType
                              SimpleType: String
                                CodeReferenceElement: String
                                  PsiElement(identifier)('String')
                          PsiElement())(')')
                      PsiWhiteSpace(' ')
                      PsiElement(=>)('=>')
                      PsiWhiteSpace(' ')
                      BlockOfExpressions
                        ReferenceExpression: x.length
                          ReferenceExpression: x
                            PsiElement(identifier)('x')
                          PsiElement(.)('.')
                          PsiElement(identifier)('length')
                    PsiElement(})('}')
              PsiElement(.)('.')
              PsiElement(identifier)('apply')
            ArgumentList
              PsiElement(()('(')
              MethodCall
                ReferenceExpression: Stream
                  PsiElement(identifier)('Stream')
                ArgumentList
                  PsiElement(()('(')
                  StringLiteral
                    PsiElement(string content)('"a"')
                  PsiElement())(')')
              PsiElement())(')')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: map2
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('map2')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: A
              PsiElement(identifier)('A')
            PsiElement(,)(',')
            TypeParameter: B
              PsiElement(identifier)('B')
            PsiElement(])(']')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: f
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('f')
                PsiWhiteSpace(' ')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  FunctionalType: A => B
                    SimpleType: A
                      CodeReferenceElement: A
                        PsiElement(identifier)('A')
                    PsiWhiteSpace(' ')
                    PsiElement(=>)('=>')
                    PsiWhiteSpace(' ')
                    SimpleType: B
                      CodeReferenceElement: B
                        PsiElement(identifier)('B')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: ZipWith
              PsiElement(identifier)('ZipWith')
            ArgumentList
              PsiElement(()('(')
              ReferenceExpression: f
                PsiElement(identifier)('f')
              PsiElement())(')')
        PsiWhiteSpace(' ')
        PsiComment(comment)('// this finds ZeroZipWith where scalac finds SuccZipWith and fails typechecking in the next line.')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: tst2
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: tst2
              PsiElement(identifier)('tst2')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: Stream[Int]
            SimpleType: Stream
              CodeReferenceElement: Stream
                PsiElement(identifier)('Stream')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: Int
                CodeReferenceElement: Int
                  PsiElement(identifier)('Int')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: map2{(x: String) => x.length}.apply
              MethodCall
                ReferenceExpression: map2
                  PsiElement(identifier)('map2')
                ArgumentList
                  BlockExpression
                    PsiElement({)('{')
                    FunctionExpression
                      Parameters
                        ParametersClause
                          PsiElement(()('(')
                          Parameter: x
                            AnnotationsList
                              <empty list>
                            PsiElement(identifier)('x')
                            PsiElement(:)(':')
                            PsiWhiteSpace(' ')
                            ParameterType
                              SimpleType: String
                                CodeReferenceElement: String
                                  PsiElement(identifier)('String')
                          PsiElement())(')')
                      PsiWhiteSpace(' ')
                      PsiElement(=>)('=>')
                      PsiWhiteSpace(' ')
                      BlockOfExpressions
                        ReferenceExpression: x.length
                          ReferenceExpression: x
                            PsiElement(identifier)('x')
                          PsiElement(.)('.')
                          PsiElement(identifier)('length')
                    PsiElement(})('}')
              PsiElement(.)('.')
              PsiElement(identifier)('apply')
            ArgumentList
              PsiElement(()('(')
              MethodCall
                ReferenceExpression: Stream
                  PsiElement(identifier)('Stream')
                ArgumentList
                  PsiElement(()('(')
                  StringLiteral
                    PsiElement(string content)('"a"')
                  PsiElement())(')')
              PsiElement())(')')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
