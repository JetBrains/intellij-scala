class C {
    def get(): Int = 0
}

def g = {
    val s: String | Null = ???
    val l = s.length // ok
    val c: C | Null = ???
    c.get() 
}
-----
ScalaFile
  ScClass: C
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('C')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n    ')
        ScFunctionDefinition: get
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('get')
          Parameters
            ParametersClause
              PsiElement(()('(')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Int
            CodeReferenceElement: Int
              PsiElement(identifier)('Int')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          IntegerLiteral
            PsiElement(integer)('0')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScFunctionDefinition: g
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(def)('def')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('g')
    Parameters
      <empty list>
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    BlockExpression
      PsiElement({)('{')
      PsiWhiteSpace('\n    ')
      ScPatternDefinition: s
        AnnotationsList
          <empty list>
        Modifiers
          <empty list>
        PsiElement(val)('val')
        PsiWhiteSpace(' ')
        ListOfPatterns
          ReferencePattern: s
            PsiElement(identifier)('s')
        PsiElement(:)(':')
        PsiWhiteSpace(' ')
        InfixType: String | Null
          SimpleType: String
            CodeReferenceElement: String
              PsiElement(identifier)('String')
          PsiWhiteSpace(' ')
          CodeReferenceElement: |
            PsiElement(identifier)('|')
          PsiWhiteSpace(' ')
          SimpleType: Null
            CodeReferenceElement: Null
              PsiElement(identifier)('Null')
        PsiWhiteSpace(' ')
        PsiElement(=)('=')
        PsiWhiteSpace(' ')
        ReferenceExpression: ???
          PsiElement(identifier)('???')
      PsiWhiteSpace('\n    ')
      ScPatternDefinition: l
        AnnotationsList
          <empty list>
        Modifiers
          <empty list>
        PsiElement(val)('val')
        PsiWhiteSpace(' ')
        ListOfPatterns
          ReferencePattern: l
            PsiElement(identifier)('l')
        PsiWhiteSpace(' ')
        PsiElement(=)('=')
        PsiWhiteSpace(' ')
        ReferenceExpression: s.length
          ReferenceExpression: s
            PsiElement(identifier)('s')
          PsiElement(.)('.')
          PsiElement(identifier)('length')
      PsiWhiteSpace(' ')
      PsiComment(comment)('// ok')
      PsiWhiteSpace('\n    ')
      ScPatternDefinition: c
        AnnotationsList
          <empty list>
        Modifiers
          <empty list>
        PsiElement(val)('val')
        PsiWhiteSpace(' ')
        ListOfPatterns
          ReferencePattern: c
            PsiElement(identifier)('c')
        PsiElement(:)(':')
        PsiWhiteSpace(' ')
        InfixType: C | Null
          SimpleType: C
            CodeReferenceElement: C
              PsiElement(identifier)('C')
          PsiWhiteSpace(' ')
          CodeReferenceElement: |
            PsiElement(identifier)('|')
          PsiWhiteSpace(' ')
          SimpleType: Null
            CodeReferenceElement: Null
              PsiElement(identifier)('Null')
        PsiWhiteSpace(' ')
        PsiElement(=)('=')
        PsiWhiteSpace(' ')
        ReferenceExpression: ???
          PsiElement(identifier)('???')
      PsiWhiteSpace('\n    ')
      MethodCall
        ReferenceExpression: c.get
          ReferenceExpression: c
            PsiElement(identifier)('c')
          PsiElement(.)('.')
          PsiElement(identifier)('get')
        ArgumentList
          PsiElement(()('(')
          PsiElement())(')')
      PsiWhiteSpace(' \n')
      PsiElement(})('}')
