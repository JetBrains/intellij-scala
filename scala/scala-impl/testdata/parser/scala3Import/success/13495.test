import scala.annotation.showAsInfix

object Test {
  trait Component
  sealed trait Deleted extends Component

  type Deletable[L <: CList] <: CList = L match {
    case h &: t => (h | Deleted) &: Deletable[t]
    case CNil => CNil
  }

  sealed trait CList
  sealed trait CNil extends CList
  @showAsInfix case class &:[+C <: Component, +L <: CList](h: C, t: L) extends CList

  case class A(x: Int, y: Int) extends Component
  case class B(x: Int, y: Int) extends Component

  val x: Deletable[A &: B &: CNil] = ???
}
-----
ScalaFile
  ScImportStatement
    PsiElement(import)('import')
    PsiWhiteSpace(' ')
    ImportExpression
      CodeReferenceElement: scala.annotation.showAsInfix
        CodeReferenceElement: scala.annotation
          CodeReferenceElement: scala
            PsiElement(identifier)('scala')
          PsiElement(.)('.')
          PsiElement(identifier)('annotation')
        PsiElement(.)('.')
        PsiElement(identifier)('showAsInfix')
  PsiWhiteSpace('\n\n')
  ScObject: Test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScTrait: Component
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(trait)('trait')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Component')
          ExtendsBlock
            <empty list>
        PsiWhiteSpace('\n  ')
        ScTrait: Deleted
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(sealed)('sealed')
          PsiWhiteSpace(' ')
          PsiElement(trait)('trait')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Deleted')
          PsiWhiteSpace(' ')
          ExtendsBlock
            PsiElement(extends)('extends')
            PsiWhiteSpace(' ')
            TemplateParents
              ConstructorInvocation
                SimpleType: Component
                  CodeReferenceElement: Component
                    PsiElement(identifier)('Component')
        PsiWhiteSpace('\n\n  ')
        ScTypeAliasDefinition: Deletable
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Deletable')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: L
              PsiElement(identifier)('L')
              PsiWhiteSpace(' ')
              PsiElement(<:)('<:')
              PsiWhiteSpace(' ')
              SimpleType: CList
                CodeReferenceElement: CList
                  PsiElement(identifier)('CList')
            PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(<:)('<:')
          PsiWhiteSpace(' ')
          SimpleType: CList
            CodeReferenceElement: CList
              PsiElement(identifier)('CList')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MatchType: L match {
    case h &: t => (h | Deleted) &: Deletable[t]
    case CNil => CNil
  }
            SimpleType: L
              CodeReferenceElement: L
                PsiElement(identifier)('L')
            PsiWhiteSpace(' ')
            PsiElement(match)('match')
            PsiWhiteSpace(' ')
            PsiElement({)('{')
            PsiWhiteSpace('\n    ')
            ScMatchTypeCasesImpl(match type cases)
              ScMatchTypeCaseImpl(match type case)
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                InfixType: h &: t
                  TypeVariable: h
                    PsiElement(identifier)('h')
                  PsiWhiteSpace(' ')
                  CodeReferenceElement: &:
                    PsiElement(identifier)('&:')
                  PsiWhiteSpace(' ')
                  TypeVariable: t
                    PsiElement(identifier)('t')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                InfixType: (h | Deleted) &: Deletable[t]
                  TypeInParenthesis: (h | Deleted)
                    PsiElement(()('(')
                    InfixType: h | Deleted
                      SimpleType: h
                        CodeReferenceElement: h
                          PsiElement(identifier)('h')
                      PsiWhiteSpace(' ')
                      CodeReferenceElement: |
                        PsiElement(identifier)('|')
                      PsiWhiteSpace(' ')
                      SimpleType: Deleted
                        CodeReferenceElement: Deleted
                          PsiElement(identifier)('Deleted')
                    PsiElement())(')')
                  PsiWhiteSpace(' ')
                  CodeReferenceElement: &:
                    PsiElement(identifier)('&:')
                  PsiWhiteSpace(' ')
                  ParametrizedType: Deletable[t]
                    SimpleType: Deletable
                      CodeReferenceElement: Deletable
                        PsiElement(identifier)('Deletable')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: t
                        CodeReferenceElement: t
                          PsiElement(identifier)('t')
                      PsiElement(])(']')
              PsiWhiteSpace('\n    ')
              ScMatchTypeCaseImpl(match type case)
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                SimpleType: CNil
                  CodeReferenceElement: CNil
                    PsiElement(identifier)('CNil')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                SimpleType: CNil
                  CodeReferenceElement: CNil
                    PsiElement(identifier)('CNil')
            PsiWhiteSpace('\n  ')
            PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        ScTrait: CList
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(sealed)('sealed')
          PsiWhiteSpace(' ')
          PsiElement(trait)('trait')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('CList')
          ExtendsBlock
            <empty list>
        PsiWhiteSpace('\n  ')
        ScTrait: CNil
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(sealed)('sealed')
          PsiWhiteSpace(' ')
          PsiElement(trait)('trait')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('CNil')
          PsiWhiteSpace(' ')
          ExtendsBlock
            PsiElement(extends)('extends')
            PsiWhiteSpace(' ')
            TemplateParents
              ConstructorInvocation
                SimpleType: CList
                  CodeReferenceElement: CList
                    PsiElement(identifier)('CList')
        PsiWhiteSpace('\n  ')
        ScClass: &:
          AnnotationsList
            Annotation
              PsiElement(@)('@')
              AnnotationExpression
                ConstructorInvocation
                  SimpleType: showAsInfix
                    CodeReferenceElement: showAsInfix
                      PsiElement(identifier)('showAsInfix')
          PsiWhiteSpace(' ')
          Modifiers
            PsiElement(case)('case')
          PsiWhiteSpace(' ')
          PsiElement(class)('class')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('&:')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: C
              PsiElement(identifier)('+')
              PsiElement(identifier)('C')
              PsiWhiteSpace(' ')
              PsiElement(<:)('<:')
              PsiWhiteSpace(' ')
              SimpleType: Component
                CodeReferenceElement: Component
                  PsiElement(identifier)('Component')
            PsiElement(,)(',')
            PsiWhiteSpace(' ')
            TypeParameter: L
              PsiElement(identifier)('+')
              PsiElement(identifier)('L')
              PsiWhiteSpace(' ')
              PsiElement(<:)('<:')
              PsiWhiteSpace(' ')
              SimpleType: CList
                CodeReferenceElement: CList
                  PsiElement(identifier)('CList')
            PsiElement(])(']')
          PrimaryConstructor
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            Parameters
              ParametersClause
                PsiElement(()('(')
                ClassParameter: h
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(identifier)('h')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    SimpleType: C
                      CodeReferenceElement: C
                        PsiElement(identifier)('C')
                PsiElement(,)(',')
                PsiWhiteSpace(' ')
                ClassParameter: t
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(identifier)('t')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    SimpleType: L
                      CodeReferenceElement: L
                        PsiElement(identifier)('L')
                PsiElement())(')')
          PsiWhiteSpace(' ')
          ExtendsBlock
            PsiElement(extends)('extends')
            PsiWhiteSpace(' ')
            TemplateParents
              ConstructorInvocation
                SimpleType: CList
                  CodeReferenceElement: CList
                    PsiElement(identifier)('CList')
        PsiWhiteSpace('\n\n  ')
        ScClass: A
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(case)('case')
          PsiWhiteSpace(' ')
          PsiElement(class)('class')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('A')
          PrimaryConstructor
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            Parameters
              ParametersClause
                PsiElement(()('(')
                ClassParameter: x
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(identifier)('x')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    SimpleType: Int
                      CodeReferenceElement: Int
                        PsiElement(identifier)('Int')
                PsiElement(,)(',')
                PsiWhiteSpace(' ')
                ClassParameter: y
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(identifier)('y')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    SimpleType: Int
                      CodeReferenceElement: Int
                        PsiElement(identifier)('Int')
                PsiElement())(')')
          PsiWhiteSpace(' ')
          ExtendsBlock
            PsiElement(extends)('extends')
            PsiWhiteSpace(' ')
            TemplateParents
              ConstructorInvocation
                SimpleType: Component
                  CodeReferenceElement: Component
                    PsiElement(identifier)('Component')
        PsiWhiteSpace('\n  ')
        ScClass: B
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(case)('case')
          PsiWhiteSpace(' ')
          PsiElement(class)('class')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('B')
          PrimaryConstructor
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            Parameters
              ParametersClause
                PsiElement(()('(')
                ClassParameter: x
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(identifier)('x')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    SimpleType: Int
                      CodeReferenceElement: Int
                        PsiElement(identifier)('Int')
                PsiElement(,)(',')
                PsiWhiteSpace(' ')
                ClassParameter: y
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(identifier)('y')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    SimpleType: Int
                      CodeReferenceElement: Int
                        PsiElement(identifier)('Int')
                PsiElement())(')')
          PsiWhiteSpace(' ')
          ExtendsBlock
            PsiElement(extends)('extends')
            PsiWhiteSpace(' ')
            TemplateParents
              ConstructorInvocation
                SimpleType: Component
                  CodeReferenceElement: Component
                    PsiElement(identifier)('Component')
        PsiWhiteSpace('\n\n  ')
        ScPatternDefinition: x
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: x
              PsiElement(identifier)('x')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: Deletable[A &: B &: CNil]
            SimpleType: Deletable
              CodeReferenceElement: Deletable
                PsiElement(identifier)('Deletable')
            TypeArgumentsList
              PsiElement([)('[')
              InfixType: A &: B &: CNil
                SimpleType: A
                  CodeReferenceElement: A
                    PsiElement(identifier)('A')
                PsiWhiteSpace(' ')
                CodeReferenceElement: &:
                  PsiElement(identifier)('&:')
                PsiWhiteSpace(' ')
                InfixType: B &: CNil
                  SimpleType: B
                    CodeReferenceElement: B
                      PsiElement(identifier)('B')
                  PsiWhiteSpace(' ')
                  CodeReferenceElement: &:
                    PsiElement(identifier)('&:')
                  PsiWhiteSpace(' ')
                  SimpleType: CNil
                    CodeReferenceElement: CNil
                      PsiElement(identifier)('CNil')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: ???
            PsiElement(identifier)('???')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
