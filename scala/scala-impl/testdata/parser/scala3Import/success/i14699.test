def always(block: => Unit): Unit = {}
def always(args: Int*)(block: => Unit): Unit ={}

def test =
  val x = always{}
  val xc: Unit = x
  always(1,2,3) {}
-----
ScalaFile
  ScFunctionDefinition: always
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(def)('def')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('always')
    Parameters
      ParametersClause
        PsiElement(()('(')
        Parameter: block
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(identifier)('block')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParameterType
            PsiElement(=>)('=>')
            PsiWhiteSpace(' ')
            SimpleType: Unit
              CodeReferenceElement: Unit
                PsiElement(identifier)('Unit')
        PsiElement())(')')
    PsiElement(:)(':')
    PsiWhiteSpace(' ')
    SimpleType: Unit
      CodeReferenceElement: Unit
        PsiElement(identifier)('Unit')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    BlockExpression
      PsiElement({)('{')
      PsiElement(})('}')
  PsiWhiteSpace('\n')
  ScFunctionDefinition: always
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(def)('def')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('always')
    Parameters
      ParametersClause
        PsiElement(()('(')
        Parameter: args
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(identifier)('args')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParameterType
            SimpleType: Int
              CodeReferenceElement: Int
                PsiElement(identifier)('Int')
            PsiElement(identifier)('*')
        PsiElement())(')')
      ParametersClause
        PsiElement(()('(')
        Parameter: block
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(identifier)('block')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParameterType
            PsiElement(=>)('=>')
            PsiWhiteSpace(' ')
            SimpleType: Unit
              CodeReferenceElement: Unit
                PsiElement(identifier)('Unit')
        PsiElement())(')')
    PsiElement(:)(':')
    PsiWhiteSpace(' ')
    SimpleType: Unit
      CodeReferenceElement: Unit
        PsiElement(identifier)('Unit')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    BlockExpression
      PsiElement({)('{')
      PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScFunctionDefinition: test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(def)('def')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('test')
    Parameters
      <empty list>
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    BlockExpression
      PsiWhiteSpace('\n  ')
      ScPatternDefinition: x
        AnnotationsList
          <empty list>
        Modifiers
          <empty list>
        PsiElement(val)('val')
        PsiWhiteSpace(' ')
        ListOfPatterns
          ReferencePattern: x
            PsiElement(identifier)('x')
        PsiWhiteSpace(' ')
        PsiElement(=)('=')
        PsiWhiteSpace(' ')
        MethodCall
          ReferenceExpression: always
            PsiElement(identifier)('always')
          ArgumentList
            BlockExpression
              PsiElement({)('{')
              PsiElement(})('}')
      PsiWhiteSpace('\n  ')
      ScPatternDefinition: xc
        AnnotationsList
          <empty list>
        Modifiers
          <empty list>
        PsiElement(val)('val')
        PsiWhiteSpace(' ')
        ListOfPatterns
          ReferencePattern: xc
            PsiElement(identifier)('xc')
        PsiElement(:)(':')
        PsiWhiteSpace(' ')
        SimpleType: Unit
          CodeReferenceElement: Unit
            PsiElement(identifier)('Unit')
        PsiWhiteSpace(' ')
        PsiElement(=)('=')
        PsiWhiteSpace(' ')
        ReferenceExpression: x
          PsiElement(identifier)('x')
      PsiWhiteSpace('\n  ')
      MethodCall
        MethodCall
          ReferenceExpression: always
            PsiElement(identifier)('always')
          ArgumentList
            PsiElement(()('(')
            IntegerLiteral
              PsiElement(integer)('1')
            PsiElement(,)(',')
            IntegerLiteral
              PsiElement(integer)('2')
            PsiElement(,)(',')
            IntegerLiteral
              PsiElement(integer)('3')
            PsiElement())(')')
        PsiWhiteSpace(' ')
        ArgumentList
          BlockExpression
            PsiElement({)('{')
            PsiElement(})('}')
