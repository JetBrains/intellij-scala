object Test extends App {
  val res0 = 1 #:: Stream.empty
  res0 match { case 1 #:: xs => xs }
}
-----
ScalaFile
  ScObject: Test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test')
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          SimpleType: App
            CodeReferenceElement: App
              PsiElement(identifier)('App')
      PsiWhiteSpace(' ')
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: res0
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: res0
              PsiElement(identifier)('res0')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          InfixExpression
            IntegerLiteral
              PsiElement(integer)('1')
            PsiWhiteSpace(' ')
            ReferenceExpression: #::
              PsiElement(identifier)('#::')
            PsiWhiteSpace(' ')
            ReferenceExpression: Stream.empty
              ReferenceExpression: Stream
                PsiElement(identifier)('Stream')
              PsiElement(.)('.')
              PsiElement(identifier)('empty')
        PsiWhiteSpace('\n  ')
        MatchStatement
          ReferenceExpression: res0
            PsiElement(identifier)('res0')
          PsiWhiteSpace(' ')
          PsiElement(match)('match')
          PsiWhiteSpace(' ')
          PsiElement({)('{')
          PsiWhiteSpace(' ')
          CaseClauses
            CaseClause
              PsiElement(case)('case')
              PsiWhiteSpace(' ')
              InfixPattern
                LiteralPattern
                  IntegerLiteral
                    PsiElement(integer)('1')
                PsiWhiteSpace(' ')
                CodeReferenceElement: #::
                  PsiElement(identifier)('#::')
                PsiWhiteSpace(' ')
                ReferencePattern: xs
                  PsiElement(identifier)('xs')
              PsiWhiteSpace(' ')
              PsiElement(=>)('=>')
              PsiWhiteSpace(' ')
              BlockOfExpressions
                ReferenceExpression: xs
                  PsiElement(identifier)('xs')
          PsiWhiteSpace(' ')
          PsiElement(})('}')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
