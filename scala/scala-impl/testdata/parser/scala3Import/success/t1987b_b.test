// compile with t1987a.scala

package bug.packageb
// Note that the overloading works if instead of being in the package we import it:
// replace the above line with import bug.packageb.*

class Client {
  val x = func(1) // doesn't compile: type mismatch; found: Int(1) required: String
  val y = func("1") // compiles
}
-----
ScalaFile
  PsiComment(comment)('// compile with t1987a.scala')
  PsiWhiteSpace('\n\n')
  ScPackaging
    PsiElement(package)('package')
    PsiWhiteSpace(' ')
    CodeReferenceElement: bug.packageb
      CodeReferenceElement: bug
        PsiElement(identifier)('bug')
      PsiElement(.)('.')
      PsiElement(identifier)('packageb')
    PsiWhiteSpace('\n')
    PsiComment(comment)('// Note that the overloading works if instead of being in the package we import it:')
    PsiWhiteSpace('\n')
    PsiComment(comment)('// replace the above line with import bug.packageb.*')
    PsiWhiteSpace('\n\n')
    ScClass: Client
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      PsiElement(class)('class')
      PsiWhiteSpace(' ')
      PsiElement(identifier)('Client')
      PrimaryConstructor
        AnnotationsList
          <empty list>
        Modifiers
          <empty list>
        Parameters
          <empty list>
      PsiWhiteSpace(' ')
      ExtendsBlock
        ScTemplateBody
          PsiElement({)('{')
          PsiWhiteSpace('\n  ')
          ScPatternDefinition: x
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(val)('val')
            PsiWhiteSpace(' ')
            ListOfPatterns
              ReferencePattern: x
                PsiElement(identifier)('x')
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace(' ')
            MethodCall
              ReferenceExpression: func
                PsiElement(identifier)('func')
              ArgumentList
                PsiElement(()('(')
                IntegerLiteral
                  PsiElement(integer)('1')
                PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiComment(comment)('// doesn't compile: type mismatch; found: Int(1) required: String')
          PsiWhiteSpace('\n  ')
          ScPatternDefinition: y
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(val)('val')
            PsiWhiteSpace(' ')
            ListOfPatterns
              ReferencePattern: y
                PsiElement(identifier)('y')
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace(' ')
            MethodCall
              ReferenceExpression: func
                PsiElement(identifier)('func')
              ArgumentList
                PsiElement(()('(')
                StringLiteral
                  PsiElement(string content)('"1"')
                PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiComment(comment)('// compiles')
          PsiWhiteSpace('\n')
          PsiElement(})('}')
