class Foo[A]

object Test {
  def foo[T](x: Foo[T]) = x

  foo((new Foo[Int]: Foo[_]))
}

import java.nio.file.*
import java.util.stream.Collectors

object Foo {
  Files.walk(Paths.get("")).collect(Collectors.toList[Path])
}


-----
ScalaFile
  ScClass: Foo
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Foo')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: A
        PsiElement(identifier)('A')
      PsiElement(])(']')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    ExtendsBlock
      <empty list>
  PsiWhiteSpace('\n\n')
  ScObject: Test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: foo
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('foo')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: T
              PsiElement(identifier)('T')
            PsiElement(])(']')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: x
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  ParametrizedType: Foo[T]
                    SimpleType: Foo
                      CodeReferenceElement: Foo
                        PsiElement(identifier)('Foo')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: T
                        CodeReferenceElement: T
                          PsiElement(identifier)('T')
                      PsiElement(])(']')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: x
            PsiElement(identifier)('x')
        PsiWhiteSpace('\n\n  ')
        MethodCall
          ReferenceExpression: foo
            PsiElement(identifier)('foo')
          ArgumentList
            PsiElement(()('(')
            ExpressionInParenthesis
              PsiElement(()('(')
              TypedExpression
                ScNewTemplateDefinition: <anonymous>
                  PsiElement(new)('new')
                  PsiWhiteSpace(' ')
                  ExtendsBlock
                    TemplateParents
                      ConstructorInvocation
                        ParametrizedType: Foo[Int]
                          SimpleType: Foo
                            CodeReferenceElement: Foo
                              PsiElement(identifier)('Foo')
                          TypeArgumentsList
                            PsiElement([)('[')
                            SimpleType: Int
                              CodeReferenceElement: Int
                                PsiElement(identifier)('Int')
                            PsiElement(])(']')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParametrizedType: Foo[_]
                  SimpleType: Foo
                    CodeReferenceElement: Foo
                      PsiElement(identifier)('Foo')
                  TypeArgumentsList
                    PsiElement([)('[')
                    WildcardType: _
                      PsiElement(_)('_')
                    PsiElement(])(']')
              PsiElement())(')')
            PsiElement())(')')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScImportStatement
    PsiElement(import)('import')
    PsiWhiteSpace(' ')
    ImportExpression
      CodeReferenceElement: java.nio.file
        CodeReferenceElement: java.nio
          CodeReferenceElement: java
            PsiElement(identifier)('java')
          PsiElement(.)('.')
          PsiElement(identifier)('nio')
        PsiElement(.)('.')
        PsiElement(identifier)('file')
      PsiElement(.)('.')
      PsiElement(*)('*')
  PsiWhiteSpace('\n')
  ScImportStatement
    PsiElement(import)('import')
    PsiWhiteSpace(' ')
    ImportExpression
      CodeReferenceElement: java.util.stream.Collectors
        CodeReferenceElement: java.util.stream
          CodeReferenceElement: java.util
            CodeReferenceElement: java
              PsiElement(identifier)('java')
            PsiElement(.)('.')
            PsiElement(identifier)('util')
          PsiElement(.)('.')
          PsiElement(identifier)('stream')
        PsiElement(.)('.')
        PsiElement(identifier)('Collectors')
  PsiWhiteSpace('\n\n')
  ScObject: Foo
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Foo')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        MethodCall
          ReferenceExpression: Files.walk(Paths.get("")).collect
            MethodCall
              ReferenceExpression: Files.walk
                ReferenceExpression: Files
                  PsiElement(identifier)('Files')
                PsiElement(.)('.')
                PsiElement(identifier)('walk')
              ArgumentList
                PsiElement(()('(')
                MethodCall
                  ReferenceExpression: Paths.get
                    ReferenceExpression: Paths
                      PsiElement(identifier)('Paths')
                    PsiElement(.)('.')
                    PsiElement(identifier)('get')
                  ArgumentList
                    PsiElement(()('(')
                    StringLiteral
                      PsiElement(string content)('""')
                    PsiElement())(')')
                PsiElement())(')')
            PsiElement(.)('.')
            PsiElement(identifier)('collect')
          ArgumentList
            PsiElement(()('(')
            GenericCall
              ReferenceExpression: Collectors.toList
                ReferenceExpression: Collectors
                  PsiElement(identifier)('Collectors')
                PsiElement(.)('.')
                PsiElement(identifier)('toList')
              TypeArgumentsList
                PsiElement([)('[')
                SimpleType: Path
                  CodeReferenceElement: Path
                    PsiElement(identifier)('Path')
                PsiElement(])(']')
            PsiElement())(')')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
