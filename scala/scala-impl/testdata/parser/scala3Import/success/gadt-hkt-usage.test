object test {
  class Foo[A]
  class Inv[M[_]]
  class InvFoo extends Inv[Foo]

  object Test {
    def foo[F[_]](x: Inv[F]) = x match {
      case x: InvFoo =>
        val z: F[Int] = ??? : Foo[Int]
      case _ =>
    }
  }
}
-----
ScalaFile
  ScObject: test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('test')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScClass: Foo
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(class)('class')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Foo')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: A
              PsiElement(identifier)('A')
            PsiElement(])(']')
          PrimaryConstructor
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            Parameters
              <empty list>
          ExtendsBlock
            <empty list>
        PsiWhiteSpace('\n  ')
        ScClass: Inv
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(class)('class')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Inv')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: M
              PsiElement(identifier)('M')
              TypeParameterClause
                PsiElement([)('[')
                TypeParameter: _
                  PsiElement(_)('_')
                PsiElement(])(']')
            PsiElement(])(']')
          PrimaryConstructor
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            Parameters
              <empty list>
          ExtendsBlock
            <empty list>
        PsiWhiteSpace('\n  ')
        ScClass: InvFoo
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(class)('class')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('InvFoo')
          PrimaryConstructor
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            Parameters
              <empty list>
          PsiWhiteSpace(' ')
          ExtendsBlock
            PsiElement(extends)('extends')
            PsiWhiteSpace(' ')
            TemplateParents
              ConstructorInvocation
                ParametrizedType: Inv[Foo]
                  SimpleType: Inv
                    CodeReferenceElement: Inv
                      PsiElement(identifier)('Inv')
                  TypeArgumentsList
                    PsiElement([)('[')
                    SimpleType: Foo
                      CodeReferenceElement: Foo
                        PsiElement(identifier)('Foo')
                    PsiElement(])(']')
        PsiWhiteSpace('\n\n  ')
        ScObject: Test
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(object)('object')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Test')
          PsiWhiteSpace(' ')
          ExtendsBlock
            ScTemplateBody
              PsiElement({)('{')
              PsiWhiteSpace('\n    ')
              ScFunctionDefinition: foo
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(def)('def')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('foo')
                TypeParameterClause
                  PsiElement([)('[')
                  TypeParameter: F
                    PsiElement(identifier)('F')
                    TypeParameterClause
                      PsiElement([)('[')
                      TypeParameter: _
                        PsiElement(_)('_')
                      PsiElement(])(']')
                  PsiElement(])(']')
                Parameters
                  ParametersClause
                    PsiElement(()('(')
                    Parameter: x
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(identifier)('x')
                      PsiElement(:)(':')
                      PsiWhiteSpace(' ')
                      ParameterType
                        ParametrizedType: Inv[F]
                          SimpleType: Inv
                            CodeReferenceElement: Inv
                              PsiElement(identifier)('Inv')
                          TypeArgumentsList
                            PsiElement([)('[')
                            SimpleType: F
                              CodeReferenceElement: F
                                PsiElement(identifier)('F')
                            PsiElement(])(']')
                    PsiElement())(')')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                MatchStatement
                  ReferenceExpression: x
                    PsiElement(identifier)('x')
                  PsiWhiteSpace(' ')
                  PsiElement(match)('match')
                  PsiWhiteSpace(' ')
                  PsiElement({)('{')
                  PsiWhiteSpace('\n      ')
                  CaseClauses
                    CaseClause
                      PsiElement(case)('case')
                      PsiWhiteSpace(' ')
                      Scala3 TypedPattern
                        ReferencePattern: x
                          PsiElement(identifier)('x')
                        PsiElement(:)(':')
                        PsiWhiteSpace(' ')
                        TypePattern
                          SimpleType: InvFoo
                            CodeReferenceElement: InvFoo
                              PsiElement(identifier)('InvFoo')
                      PsiWhiteSpace(' ')
                      PsiElement(=>)('=>')
                      PsiWhiteSpace('\n        ')
                      BlockOfExpressions
                        ScPatternDefinition: z
                          AnnotationsList
                            <empty list>
                          Modifiers
                            <empty list>
                          PsiElement(val)('val')
                          PsiWhiteSpace(' ')
                          ListOfPatterns
                            ReferencePattern: z
                              PsiElement(identifier)('z')
                          PsiElement(:)(':')
                          PsiWhiteSpace(' ')
                          ParametrizedType: F[Int]
                            SimpleType: F
                              CodeReferenceElement: F
                                PsiElement(identifier)('F')
                            TypeArgumentsList
                              PsiElement([)('[')
                              SimpleType: Int
                                CodeReferenceElement: Int
                                  PsiElement(identifier)('Int')
                              PsiElement(])(']')
                          PsiWhiteSpace(' ')
                          PsiElement(=)('=')
                          PsiWhiteSpace(' ')
                          TypedExpression
                            ReferenceExpression: ???
                              PsiElement(identifier)('???')
                            PsiWhiteSpace(' ')
                            PsiElement(:)(':')
                            PsiWhiteSpace(' ')
                            ParametrizedType: Foo[Int]
                              SimpleType: Foo
                                CodeReferenceElement: Foo
                                  PsiElement(identifier)('Foo')
                              TypeArgumentsList
                                PsiElement([)('[')
                                SimpleType: Int
                                  CodeReferenceElement: Int
                                    PsiElement(identifier)('Int')
                                PsiElement(])(']')
                    PsiWhiteSpace('\n      ')
                    CaseClause
                      PsiElement(case)('case')
                      PsiWhiteSpace(' ')
                      WildcardPattern
                        PsiElement(_)('_')
                      PsiWhiteSpace(' ')
                      PsiElement(=>)('=>')
                      BlockOfExpressions
                        <empty list>
                  PsiWhiteSpace('\n    ')
                  PsiElement(})('}')
              PsiWhiteSpace('\n  ')
              PsiElement(})('}')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
