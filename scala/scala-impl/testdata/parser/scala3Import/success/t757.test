package foo {
  object C {
    def foo: Unit = {
      Console.println("foo")
    }
  }
}

package bar {
  object Main extends App {
    foo.C.foo
  }
}
-----
ScalaFile
  ScPackaging
    PsiElement(package)('package')
    PsiWhiteSpace(' ')
    CodeReferenceElement: foo
      PsiElement(identifier)('foo')
    PsiWhiteSpace(' ')
    PsiElement({)('{')
    PsiWhiteSpace('\n  ')
    ScObject: C
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      PsiElement(object)('object')
      PsiWhiteSpace(' ')
      PsiElement(identifier)('C')
      PsiWhiteSpace(' ')
      ExtendsBlock
        ScTemplateBody
          PsiElement({)('{')
          PsiWhiteSpace('\n    ')
          ScFunctionDefinition: foo
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(def)('def')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('foo')
            Parameters
              <empty list>
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            SimpleType: Unit
              CodeReferenceElement: Unit
                PsiElement(identifier)('Unit')
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace(' ')
            BlockExpression
              PsiElement({)('{')
              PsiWhiteSpace('\n      ')
              MethodCall
                ReferenceExpression: Console.println
                  ReferenceExpression: Console
                    PsiElement(identifier)('Console')
                  PsiElement(.)('.')
                  PsiElement(identifier)('println')
                ArgumentList
                  PsiElement(()('(')
                  StringLiteral
                    PsiElement(string content)('"foo"')
                  PsiElement())(')')
              PsiWhiteSpace('\n    ')
              PsiElement(})('}')
          PsiWhiteSpace('\n  ')
          PsiElement(})('}')
    PsiWhiteSpace('\n')
    PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScPackaging
    PsiElement(package)('package')
    PsiWhiteSpace(' ')
    CodeReferenceElement: bar
      PsiElement(identifier)('bar')
    PsiWhiteSpace(' ')
    PsiElement({)('{')
    PsiWhiteSpace('\n  ')
    ScObject: Main
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      PsiElement(object)('object')
      PsiWhiteSpace(' ')
      PsiElement(identifier)('Main')
      PsiWhiteSpace(' ')
      ExtendsBlock
        PsiElement(extends)('extends')
        PsiWhiteSpace(' ')
        TemplateParents
          ConstructorInvocation
            SimpleType: App
              CodeReferenceElement: App
                PsiElement(identifier)('App')
        PsiWhiteSpace(' ')
        ScTemplateBody
          PsiElement({)('{')
          PsiWhiteSpace('\n    ')
          ReferenceExpression: foo.C.foo
            ReferenceExpression: foo.C
              ReferenceExpression: foo
                PsiElement(identifier)('foo')
              PsiElement(.)('.')
              PsiElement(identifier)('C')
            PsiElement(.)('.')
            PsiElement(identifier)('foo')
          PsiWhiteSpace('\n  ')
          PsiElement(})('}')
    PsiWhiteSpace('\n')
    PsiElement(})('}')
