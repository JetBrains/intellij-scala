abstract class C[Z] { def getZ: Z }
final case class C1() extends C[Tuple] { def getZ = new Tuple1[String]("foo") }

// Like pos/i15743 but definitely requires the constraint on T to be stored as a GADT constraint
// where in pos/i15743 it may have been reasonable to think that the constraint could be stored
// in the regular type inference constraints
class Alt:
  def test[T](e: C[T]) = e match
    case c1 @ C1() => // GADT constr: T := Tuple
      val t1: T        = c1.getZ
      val t2: Int *: T = (1: Int) *: t1
      val i1: Int      = (t2: Int *: T).head[Int *: T]
-----
ScalaFile
  ScClass: C
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(abstract)('abstract')
    PsiWhiteSpace(' ')
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('C')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: Z
        PsiElement(identifier)('Z')
      PsiElement(])(']')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace(' ')
        ScFunctionDeclaration: getZ
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('getZ')
          Parameters
            <empty list>
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Z
            CodeReferenceElement: Z
              PsiElement(identifier)('Z')
        PsiWhiteSpace(' ')
        PsiElement(})('}')
  PsiWhiteSpace('\n')
  ScClass: C1
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(final)('final')
      PsiWhiteSpace(' ')
      PsiElement(case)('case')
    PsiWhiteSpace(' ')
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('C1')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        ParametersClause
          PsiElement(()('(')
          PsiElement())(')')
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          ParametrizedType: C[Tuple]
            SimpleType: C
              CodeReferenceElement: C
                PsiElement(identifier)('C')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: Tuple
                CodeReferenceElement: Tuple
                  PsiElement(identifier)('Tuple')
              PsiElement(])(']')
      PsiWhiteSpace(' ')
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace(' ')
        ScFunctionDefinition: getZ
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('getZ')
          Parameters
            <empty list>
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ScNewTemplateDefinition: <anonymous>
            PsiElement(new)('new')
            PsiWhiteSpace(' ')
            ExtendsBlock
              TemplateParents
                ConstructorInvocation
                  ParametrizedType: Tuple1[String]
                    SimpleType: Tuple1
                      CodeReferenceElement: Tuple1
                        PsiElement(identifier)('Tuple1')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: String
                        CodeReferenceElement: String
                          PsiElement(identifier)('String')
                      PsiElement(])(']')
                  ArgumentList
                    PsiElement(()('(')
                    StringLiteral
                      PsiElement(string content)('"foo"')
                    PsiElement())(')')
        PsiWhiteSpace(' ')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScClass: Alt
    PsiComment(comment)('// Like pos/i15743 but definitely requires the constraint on T to be stored as a GADT constraint')
    PsiWhiteSpace('\n')
    PsiComment(comment)('// where in pos/i15743 it may have been reasonable to think that the constraint could be stored')
    PsiWhiteSpace('\n')
    PsiComment(comment)('// in the regular type inference constraints')
    PsiWhiteSpace('\n')
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Alt')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    ExtendsBlock
      ScTemplateBody
        PsiElement(:)(':')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: test
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('test')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: T
              PsiElement(identifier)('T')
            PsiElement(])(']')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: e
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('e')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  ParametrizedType: C[T]
                    SimpleType: C
                      CodeReferenceElement: C
                        PsiElement(identifier)('C')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: T
                        CodeReferenceElement: T
                          PsiElement(identifier)('T')
                      PsiElement(])(']')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MatchStatement
            ReferenceExpression: e
              PsiElement(identifier)('e')
            PsiWhiteSpace(' ')
            PsiElement(match)('match')
            PsiWhiteSpace('\n    ')
            CaseClauses
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                NamingPattern: c1
                  PsiElement(identifier)('c1')
                  PsiWhiteSpace(' ')
                  PsiElement(@)('@')
                  PsiWhiteSpace(' ')
                  ConstructorPattern
                    CodeReferenceElement: C1
                      PsiElement(identifier)('C1')
                    Pattern Argument List
                      PsiElement(()('(')
                      PsiElement())(')')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                PsiComment(comment)('// GADT constr: T := Tuple')
                PsiWhiteSpace('\n      ')
                BlockOfExpressions
                  ScPatternDefinition: t1
                    AnnotationsList
                      <empty list>
                    Modifiers
                      <empty list>
                    PsiElement(val)('val')
                    PsiWhiteSpace(' ')
                    ListOfPatterns
                      ReferencePattern: t1
                        PsiElement(identifier)('t1')
                    PsiElement(:)(':')
                    PsiWhiteSpace(' ')
                    SimpleType: T
                      CodeReferenceElement: T
                        PsiElement(identifier)('T')
                    PsiWhiteSpace('        ')
                    PsiElement(=)('=')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: c1.getZ
                      ReferenceExpression: c1
                        PsiElement(identifier)('c1')
                      PsiElement(.)('.')
                      PsiElement(identifier)('getZ')
                  PsiWhiteSpace('\n      ')
                  ScPatternDefinition: t2
                    AnnotationsList
                      <empty list>
                    Modifiers
                      <empty list>
                    PsiElement(val)('val')
                    PsiWhiteSpace(' ')
                    ListOfPatterns
                      ReferencePattern: t2
                        PsiElement(identifier)('t2')
                    PsiElement(:)(':')
                    PsiWhiteSpace(' ')
                    InfixType: Int *: T
                      SimpleType: Int
                        CodeReferenceElement: Int
                          PsiElement(identifier)('Int')
                      PsiWhiteSpace(' ')
                      CodeReferenceElement: *:
                        PsiElement(identifier)('*:')
                      PsiWhiteSpace(' ')
                      SimpleType: T
                        CodeReferenceElement: T
                          PsiElement(identifier)('T')
                    PsiWhiteSpace(' ')
                    PsiElement(=)('=')
                    PsiWhiteSpace(' ')
                    InfixExpression
                      ExpressionInParenthesis
                        PsiElement(()('(')
                        TypedExpression
                          IntegerLiteral
                            PsiElement(integer)('1')
                          PsiElement(:)(':')
                          PsiWhiteSpace(' ')
                          SimpleType: Int
                            CodeReferenceElement: Int
                              PsiElement(identifier)('Int')
                        PsiElement())(')')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: *:
                        PsiElement(identifier)('*:')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: t1
                        PsiElement(identifier)('t1')
                  PsiWhiteSpace('\n      ')
                  ScPatternDefinition: i1
                    AnnotationsList
                      <empty list>
                    Modifiers
                      <empty list>
                    PsiElement(val)('val')
                    PsiWhiteSpace(' ')
                    ListOfPatterns
                      ReferencePattern: i1
                        PsiElement(identifier)('i1')
                    PsiElement(:)(':')
                    PsiWhiteSpace(' ')
                    SimpleType: Int
                      CodeReferenceElement: Int
                        PsiElement(identifier)('Int')
                    PsiWhiteSpace('      ')
                    PsiElement(=)('=')
                    PsiWhiteSpace(' ')
                    GenericCall
                      ReferenceExpression: (t2: Int *: T).head
                        ExpressionInParenthesis
                          PsiElement(()('(')
                          TypedExpression
                            ReferenceExpression: t2
                              PsiElement(identifier)('t2')
                            PsiElement(:)(':')
                            PsiWhiteSpace(' ')
                            InfixType: Int *: T
                              SimpleType: Int
                                CodeReferenceElement: Int
                                  PsiElement(identifier)('Int')
                              PsiWhiteSpace(' ')
                              CodeReferenceElement: *:
                                PsiElement(identifier)('*:')
                              PsiWhiteSpace(' ')
                              SimpleType: T
                                CodeReferenceElement: T
                                  PsiElement(identifier)('T')
                          PsiElement())(')')
                        PsiElement(.)('.')
                        PsiElement(identifier)('head')
                      TypeArgumentsList
                        PsiElement([)('[')
                        InfixType: Int *: T
                          SimpleType: Int
                            CodeReferenceElement: Int
                              PsiElement(identifier)('Int')
                          PsiWhiteSpace(' ')
                          CodeReferenceElement: *:
                            PsiElement(identifier)('*:')
                          PsiWhiteSpace(' ')
                          SimpleType: T
                            CodeReferenceElement: T
                              PsiElement(identifier)('T')
                        PsiElement(])(']')
