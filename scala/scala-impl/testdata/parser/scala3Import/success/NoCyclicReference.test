package test

trait Iterable[+A] { self =>

  type CC[B] <: Iterable[B] { type CC[C] = self.CC[C] }

}
-----
ScalaFile
  ScPackaging
    PsiElement(package)('package')
    PsiWhiteSpace(' ')
    CodeReferenceElement: test
      PsiElement(identifier)('test')
    PsiWhiteSpace('\n\n')
    ScTrait: Iterable
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      PsiElement(trait)('trait')
      PsiWhiteSpace(' ')
      PsiElement(identifier)('Iterable')
      TypeParameterClause
        PsiElement([)('[')
        TypeParameter: A
          PsiElement(identifier)('+')
          PsiElement(identifier)('A')
        PsiElement(])(']')
      PsiWhiteSpace(' ')
      ExtendsBlock
        ScTemplateBody
          PsiElement({)('{')
          PsiWhiteSpace(' ')
          SelfType: self
            PsiElement(identifier)('self')
            PsiWhiteSpace(' ')
            PsiElement(=>)('=>')
          PsiWhiteSpace('\n\n  ')
          ScTypeAliasDeclaration: CC
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(type)('type')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('CC')
            TypeParameterClause
              PsiElement([)('[')
              TypeParameter: B
                PsiElement(identifier)('B')
              PsiElement(])(']')
            PsiWhiteSpace(' ')
            PsiElement(<:)('<:')
            PsiWhiteSpace(' ')
            CompoundType: Iterable[B] { type CC[C] = self.CC[C] }
              ParametrizedType: Iterable[B]
                SimpleType: Iterable
                  CodeReferenceElement: Iterable
                    PsiElement(identifier)('Iterable')
                TypeArgumentsList
                  PsiElement([)('[')
                  SimpleType: B
                    CodeReferenceElement: B
                      PsiElement(identifier)('B')
                  PsiElement(])(']')
              PsiWhiteSpace(' ')
              Refinement
                PsiElement({)('{')
                PsiWhiteSpace(' ')
                ScTypeAliasDefinition: CC
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(type)('type')
                  PsiWhiteSpace(' ')
                  PsiElement(identifier)('CC')
                  TypeParameterClause
                    PsiElement([)('[')
                    TypeParameter: C
                      PsiElement(identifier)('C')
                    PsiElement(])(']')
                  PsiWhiteSpace(' ')
                  PsiElement(=)('=')
                  PsiWhiteSpace(' ')
                  ParametrizedType: self.CC[C]
                    SimpleType: self.CC
                      CodeReferenceElement: self.CC
                        CodeReferenceElement: self
                          PsiElement(identifier)('self')
                        PsiElement(.)('.')
                        PsiElement(identifier)('CC')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: C
                        CodeReferenceElement: C
                          PsiElement(identifier)('C')
                      PsiElement(])(']')
                PsiWhiteSpace(' ')
                PsiElement(})('}')
          PsiWhiteSpace('\n\n')
          PsiElement(})('}')
