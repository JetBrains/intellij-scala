class Test {
  inline def foo(x: Int = 5)(implicit y: Int): Int =
    if (x > 0) y * y
    else y + y

  implicit val m: Int = 7

  (new Test).foo()
}
-----
ScalaFile
  ScClass: Test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: foo
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(inline)('inline')
          PsiWhiteSpace(' ')
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('foo')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: x
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Int
                    CodeReferenceElement: Int
                      PsiElement(identifier)('Int')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                IntegerLiteral
                  PsiElement(integer)('5')
              PsiElement())(')')
            ParametersClause
              PsiElement(()('(')
              PsiElement(implicit)('implicit')
              PsiWhiteSpace(' ')
              Parameter: y
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('y')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Int
                    CodeReferenceElement: Int
                      PsiElement(identifier)('Int')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Int
            CodeReferenceElement: Int
              PsiElement(identifier)('Int')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace('\n    ')
          IfStatement
            PsiElement(if)('if')
            PsiWhiteSpace(' ')
            PsiElement(()('(')
            InfixExpression
              ReferenceExpression: x
                PsiElement(identifier)('x')
              PsiWhiteSpace(' ')
              ReferenceExpression: >
                PsiElement(identifier)('>')
              PsiWhiteSpace(' ')
              IntegerLiteral
                PsiElement(integer)('0')
            PsiElement())(')')
            PsiWhiteSpace(' ')
            InfixExpression
              ReferenceExpression: y
                PsiElement(identifier)('y')
              PsiWhiteSpace(' ')
              ReferenceExpression: *
                PsiElement(identifier)('*')
              PsiWhiteSpace(' ')
              ReferenceExpression: y
                PsiElement(identifier)('y')
            PsiWhiteSpace('\n    ')
            PsiElement(else)('else')
            PsiWhiteSpace(' ')
            InfixExpression
              ReferenceExpression: y
                PsiElement(identifier)('y')
              PsiWhiteSpace(' ')
              ReferenceExpression: +
                PsiElement(identifier)('+')
              PsiWhiteSpace(' ')
              ReferenceExpression: y
                PsiElement(identifier)('y')
        PsiWhiteSpace('\n\n  ')
        ScPatternDefinition: m
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(implicit)('implicit')
          PsiWhiteSpace(' ')
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: m
              PsiElement(identifier)('m')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Int
            CodeReferenceElement: Int
              PsiElement(identifier)('Int')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          IntegerLiteral
            PsiElement(integer)('7')
        PsiWhiteSpace('\n\n  ')
        MethodCall
          ReferenceExpression: (new Test).foo
            ExpressionInParenthesis
              PsiElement(()('(')
              ScNewTemplateDefinition: <anonymous>
                PsiElement(new)('new')
                PsiWhiteSpace(' ')
                ExtendsBlock
                  TemplateParents
                    ConstructorInvocation
                      SimpleType: Test
                        CodeReferenceElement: Test
                          PsiElement(identifier)('Test')
              PsiElement())(')')
            PsiElement(.)('.')
            PsiElement(identifier)('foo')
          ArgumentList
            PsiElement(()('(')
            PsiElement())(')')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
