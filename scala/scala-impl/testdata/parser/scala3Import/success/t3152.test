trait Applicative[M[_]]

sealed trait MA[M[_], A] {
  def sequence[N[_], B](implicit a: A <:< N[B], n: Applicative[N]): N[M[B]] = sys.error("stub")
  // def sequence3[N[_], B]()(implicit a: A <:< N[B], n: Applicative[N]): N[M[B]] = sys.error("stub")
}

object test {
  implicit def ListMA[A](l: List[A]): MA[List, A] = sys.error("stub")
  implicit val ao: Applicative[Option] = sys.error("stub")

  /* This compiles OK:
  (Nil: List[Option[Int]]).sequence3(): Option[List[Int]]
  */

  // BUG: error: immutable is not an enclosing class
  // !!! No line number is reported with the error
  (Nil: List[Option[Int]]).sequence: Option[List[Int]]
  (List[Option[Int]]()).sequence: Option[List[Int]]
}
-----
ScalaFile
  ScTrait: Applicative
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Applicative')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: M
        PsiElement(identifier)('M')
        TypeParameterClause
          PsiElement([)('[')
          TypeParameter: _
            PsiElement(_)('_')
          PsiElement(])(']')
      PsiElement(])(']')
    ExtendsBlock
      <empty list>
  PsiWhiteSpace('\n\n')
  ScTrait: MA
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(sealed)('sealed')
    PsiWhiteSpace(' ')
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('MA')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: M
        PsiElement(identifier)('M')
        TypeParameterClause
          PsiElement([)('[')
          TypeParameter: _
            PsiElement(_)('_')
          PsiElement(])(']')
      PsiElement(,)(',')
      PsiWhiteSpace(' ')
      TypeParameter: A
        PsiElement(identifier)('A')
      PsiElement(])(']')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: sequence
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('sequence')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: N
              PsiElement(identifier)('N')
              TypeParameterClause
                PsiElement([)('[')
                TypeParameter: _
                  PsiElement(_)('_')
                PsiElement(])(']')
            PsiElement(,)(',')
            PsiWhiteSpace(' ')
            TypeParameter: B
              PsiElement(identifier)('B')
            PsiElement(])(']')
          Parameters
            ParametersClause
              PsiElement(()('(')
              PsiElement(implicit)('implicit')
              PsiWhiteSpace(' ')
              Parameter: a
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('a')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  InfixType: A <:< N[B]
                    SimpleType: A
                      CodeReferenceElement: A
                        PsiElement(identifier)('A')
                    PsiWhiteSpace(' ')
                    CodeReferenceElement: <:<
                      PsiElement(identifier)('<:<')
                    PsiWhiteSpace(' ')
                    ParametrizedType: N[B]
                      SimpleType: N
                        CodeReferenceElement: N
                          PsiElement(identifier)('N')
                      TypeArgumentsList
                        PsiElement([)('[')
                        SimpleType: B
                          CodeReferenceElement: B
                            PsiElement(identifier)('B')
                        PsiElement(])(']')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              Parameter: n
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('n')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  ParametrizedType: Applicative[N]
                    SimpleType: Applicative
                      CodeReferenceElement: Applicative
                        PsiElement(identifier)('Applicative')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: N
                        CodeReferenceElement: N
                          PsiElement(identifier)('N')
                      PsiElement(])(']')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: N[M[B]]
            SimpleType: N
              CodeReferenceElement: N
                PsiElement(identifier)('N')
            TypeArgumentsList
              PsiElement([)('[')
              ParametrizedType: M[B]
                SimpleType: M
                  CodeReferenceElement: M
                    PsiElement(identifier)('M')
                TypeArgumentsList
                  PsiElement([)('[')
                  SimpleType: B
                    CodeReferenceElement: B
                      PsiElement(identifier)('B')
                  PsiElement(])(']')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: sys.error
              ReferenceExpression: sys
                PsiElement(identifier)('sys')
              PsiElement(.)('.')
              PsiElement(identifier)('error')
            ArgumentList
              PsiElement(()('(')
              StringLiteral
                PsiElement(string content)('"stub"')
              PsiElement())(')')
        PsiWhiteSpace('\n  ')
        PsiComment(comment)('// def sequence3[N[_], B]()(implicit a: A <:< N[B], n: Applicative[N]): N[M[B]] = sys.error("stub")')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScObject: test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('test')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: ListMA
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(implicit)('implicit')
          PsiWhiteSpace(' ')
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('ListMA')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: A
              PsiElement(identifier)('A')
            PsiElement(])(']')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: l
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('l')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  ParametrizedType: List[A]
                    SimpleType: List
                      CodeReferenceElement: List
                        PsiElement(identifier)('List')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: A
                        CodeReferenceElement: A
                          PsiElement(identifier)('A')
                      PsiElement(])(']')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: MA[List, A]
            SimpleType: MA
              CodeReferenceElement: MA
                PsiElement(identifier)('MA')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: List
                CodeReferenceElement: List
                  PsiElement(identifier)('List')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              SimpleType: A
                CodeReferenceElement: A
                  PsiElement(identifier)('A')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: sys.error
              ReferenceExpression: sys
                PsiElement(identifier)('sys')
              PsiElement(.)('.')
              PsiElement(identifier)('error')
            ArgumentList
              PsiElement(()('(')
              StringLiteral
                PsiElement(string content)('"stub"')
              PsiElement())(')')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: ao
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(implicit)('implicit')
          PsiWhiteSpace(' ')
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: ao
              PsiElement(identifier)('ao')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: Applicative[Option]
            SimpleType: Applicative
              CodeReferenceElement: Applicative
                PsiElement(identifier)('Applicative')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: Option
                CodeReferenceElement: Option
                  PsiElement(identifier)('Option')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: sys.error
              ReferenceExpression: sys
                PsiElement(identifier)('sys')
              PsiElement(.)('.')
              PsiElement(identifier)('error')
            ArgumentList
              PsiElement(()('(')
              StringLiteral
                PsiElement(string content)('"stub"')
              PsiElement())(')')
        PsiWhiteSpace('\n\n  ')
        PsiComment(BlockComment)('/* This compiles OK:\n  (Nil: List[Option[Int]]).sequence3(): Option[List[Int]]\n  */')
        PsiWhiteSpace('\n\n  ')
        PsiComment(comment)('// BUG: error: immutable is not an enclosing class')
        PsiWhiteSpace('\n  ')
        PsiComment(comment)('// !!! No line number is reported with the error')
        PsiWhiteSpace('\n  ')
        TypedExpression
          ReferenceExpression: (Nil: List[Option[Int]]).sequence
            ExpressionInParenthesis
              PsiElement(()('(')
              TypedExpression
                ReferenceExpression: Nil
                  PsiElement(identifier)('Nil')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParametrizedType: List[Option[Int]]
                  SimpleType: List
                    CodeReferenceElement: List
                      PsiElement(identifier)('List')
                  TypeArgumentsList
                    PsiElement([)('[')
                    ParametrizedType: Option[Int]
                      SimpleType: Option
                        CodeReferenceElement: Option
                          PsiElement(identifier)('Option')
                      TypeArgumentsList
                        PsiElement([)('[')
                        SimpleType: Int
                          CodeReferenceElement: Int
                            PsiElement(identifier)('Int')
                        PsiElement(])(']')
                    PsiElement(])(']')
              PsiElement())(')')
            PsiElement(.)('.')
            PsiElement(identifier)('sequence')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: Option[List[Int]]
            SimpleType: Option
              CodeReferenceElement: Option
                PsiElement(identifier)('Option')
            TypeArgumentsList
              PsiElement([)('[')
              ParametrizedType: List[Int]
                SimpleType: List
                  CodeReferenceElement: List
                    PsiElement(identifier)('List')
                TypeArgumentsList
                  PsiElement([)('[')
                  SimpleType: Int
                    CodeReferenceElement: Int
                      PsiElement(identifier)('Int')
                  PsiElement(])(']')
              PsiElement(])(']')
        PsiWhiteSpace('\n  ')
        TypedExpression
          ReferenceExpression: (List[Option[Int]]()).sequence
            ExpressionInParenthesis
              PsiElement(()('(')
              MethodCall
                GenericCall
                  ReferenceExpression: List
                    PsiElement(identifier)('List')
                  TypeArgumentsList
                    PsiElement([)('[')
                    ParametrizedType: Option[Int]
                      SimpleType: Option
                        CodeReferenceElement: Option
                          PsiElement(identifier)('Option')
                      TypeArgumentsList
                        PsiElement([)('[')
                        SimpleType: Int
                          CodeReferenceElement: Int
                            PsiElement(identifier)('Int')
                        PsiElement(])(']')
                    PsiElement(])(']')
                ArgumentList
                  PsiElement(()('(')
                  PsiElement())(')')
              PsiElement())(')')
            PsiElement(.)('.')
            PsiElement(identifier)('sequence')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: Option[List[Int]]
            SimpleType: Option
              CodeReferenceElement: Option
                PsiElement(identifier)('Option')
            TypeArgumentsList
              PsiElement([)('[')
              ParametrizedType: List[Int]
                SimpleType: List
                  CodeReferenceElement: List
                    PsiElement(identifier)('List')
                TypeArgumentsList
                  PsiElement([)('[')
                  SimpleType: Int
                    CodeReferenceElement: Int
                      PsiElement(identifier)('Int')
                  PsiElement(])(']')
              PsiElement(])(']')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
