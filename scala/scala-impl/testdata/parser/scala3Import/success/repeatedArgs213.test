import scala.collection.{immutable, mutable}
import java.nio.file.Paths

class repeatedArgs {
  def bar(xs: String*): Int = bat(xs)
  def bat(xs: immutable.Seq[String]) = xs.length

  def test(xs: immutable.Seq[String]): Unit = {
    bar("a", "b", "c")
    bar(xs*)

    Paths.get("Hello", "World")
    Paths.get("Hello", xs*)

    val List(_, others*) = xs.toList // toList should not be needed, see #4790
    val x: immutable.Seq[String] = others
  }

  def test2(xs: immutable.Seq[String] | Null): Unit = {
    bar("a", "b", "c")
    bar(xs*)

    Paths.get("Hello", "World")
    Paths.get("Hello", xs*)

    val List(_, others*) = xs.toList // toList should not be needed, see #4790
    val x: immutable.Seq[String] = others
  }
}
-----
ScalaFile
  ScImportStatement
    PsiElement(import)('import')
    PsiWhiteSpace(' ')
    ImportExpression
      CodeReferenceElement: scala.collection
        CodeReferenceElement: scala
          PsiElement(identifier)('scala')
        PsiElement(.)('.')
        PsiElement(identifier)('collection')
      PsiElement(.)('.')
      ImportSelectors
        PsiElement({)('{')
        ImportSelector
          CodeReferenceElement: immutable
            PsiElement(identifier)('immutable')
        PsiElement(,)(',')
        PsiWhiteSpace(' ')
        ImportSelector
          CodeReferenceElement: mutable
            PsiElement(identifier)('mutable')
        PsiElement(})('}')
  PsiWhiteSpace('\n')
  ScImportStatement
    PsiElement(import)('import')
    PsiWhiteSpace(' ')
    ImportExpression
      CodeReferenceElement: java.nio.file.Paths
        CodeReferenceElement: java.nio.file
          CodeReferenceElement: java.nio
            CodeReferenceElement: java
              PsiElement(identifier)('java')
            PsiElement(.)('.')
            PsiElement(identifier)('nio')
          PsiElement(.)('.')
          PsiElement(identifier)('file')
        PsiElement(.)('.')
        PsiElement(identifier)('Paths')
  PsiWhiteSpace('\n\n')
  ScClass: repeatedArgs
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('repeatedArgs')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: bar
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('bar')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: xs
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('xs')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: String
                    CodeReferenceElement: String
                      PsiElement(identifier)('String')
                  PsiElement(identifier)('*')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Int
            CodeReferenceElement: Int
              PsiElement(identifier)('Int')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: bat
              PsiElement(identifier)('bat')
            ArgumentList
              PsiElement(()('(')
              ReferenceExpression: xs
                PsiElement(identifier)('xs')
              PsiElement())(')')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: bat
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('bat')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: xs
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('xs')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  ParametrizedType: immutable.Seq[String]
                    SimpleType: immutable.Seq
                      CodeReferenceElement: immutable.Seq
                        CodeReferenceElement: immutable
                          PsiElement(identifier)('immutable')
                        PsiElement(.)('.')
                        PsiElement(identifier)('Seq')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: String
                        CodeReferenceElement: String
                          PsiElement(identifier)('String')
                      PsiElement(])(']')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: xs.length
            ReferenceExpression: xs
              PsiElement(identifier)('xs')
            PsiElement(.)('.')
            PsiElement(identifier)('length')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: test
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('test')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: xs
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('xs')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  ParametrizedType: immutable.Seq[String]
                    SimpleType: immutable.Seq
                      CodeReferenceElement: immutable.Seq
                        CodeReferenceElement: immutable
                          PsiElement(identifier)('immutable')
                        PsiElement(.)('.')
                        PsiElement(identifier)('Seq')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: String
                        CodeReferenceElement: String
                          PsiElement(identifier)('String')
                      PsiElement(])(']')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Unit
            CodeReferenceElement: Unit
              PsiElement(identifier)('Unit')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          BlockExpression
            PsiElement({)('{')
            PsiWhiteSpace('\n    ')
            MethodCall
              ReferenceExpression: bar
                PsiElement(identifier)('bar')
              ArgumentList
                PsiElement(()('(')
                StringLiteral
                  PsiElement(string content)('"a"')
                PsiElement(,)(',')
                PsiWhiteSpace(' ')
                StringLiteral
                  PsiElement(string content)('"b"')
                PsiElement(,)(',')
                PsiWhiteSpace(' ')
                StringLiteral
                  PsiElement(string content)('"c"')
                PsiElement())(')')
            PsiWhiteSpace('\n    ')
            MethodCall
              ReferenceExpression: bar
                PsiElement(identifier)('bar')
              ArgumentList
                PsiElement(()('(')
                TypedExpression
                  ReferenceExpression: xs
                    PsiElement(identifier)('xs')
                  SequenceArgumentType
                    PsiElement(identifier)('*')
                PsiElement())(')')
            PsiWhiteSpace('\n\n    ')
            MethodCall
              ReferenceExpression: Paths.get
                ReferenceExpression: Paths
                  PsiElement(identifier)('Paths')
                PsiElement(.)('.')
                PsiElement(identifier)('get')
              ArgumentList
                PsiElement(()('(')
                StringLiteral
                  PsiElement(string content)('"Hello"')
                PsiElement(,)(',')
                PsiWhiteSpace(' ')
                StringLiteral
                  PsiElement(string content)('"World"')
                PsiElement())(')')
            PsiWhiteSpace('\n    ')
            MethodCall
              ReferenceExpression: Paths.get
                ReferenceExpression: Paths
                  PsiElement(identifier)('Paths')
                PsiElement(.)('.')
                PsiElement(identifier)('get')
              ArgumentList
                PsiElement(()('(')
                StringLiteral
                  PsiElement(string content)('"Hello"')
                PsiElement(,)(',')
                PsiWhiteSpace(' ')
                TypedExpression
                  ReferenceExpression: xs
                    PsiElement(identifier)('xs')
                  SequenceArgumentType
                    PsiElement(identifier)('*')
                PsiElement())(')')
            PsiWhiteSpace('\n\n    ')
            ScPatternDefinition: others
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              ListOfPatterns
                ConstructorPattern
                  CodeReferenceElement: List
                    PsiElement(identifier)('List')
                  Pattern Argument List
                    PsiElement(()('(')
                    WildcardPattern
                      PsiElement(_)('_')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    SequenceWildcardPattern: others
                      PsiElement(identifier)('others')
                      PsiElement(identifier)('*')
                    PsiElement())(')')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              ReferenceExpression: xs.toList
                ReferenceExpression: xs
                  PsiElement(identifier)('xs')
                PsiElement(.)('.')
                PsiElement(identifier)('toList')
            PsiWhiteSpace(' ')
            PsiComment(comment)('// toList should not be needed, see #4790')
            PsiWhiteSpace('\n    ')
            ScPatternDefinition: x
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              ListOfPatterns
                ReferencePattern: x
                  PsiElement(identifier)('x')
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              ParametrizedType: immutable.Seq[String]
                SimpleType: immutable.Seq
                  CodeReferenceElement: immutable.Seq
                    CodeReferenceElement: immutable
                      PsiElement(identifier)('immutable')
                    PsiElement(.)('.')
                    PsiElement(identifier)('Seq')
                TypeArgumentsList
                  PsiElement([)('[')
                  SimpleType: String
                    CodeReferenceElement: String
                      PsiElement(identifier)('String')
                  PsiElement(])(']')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              ReferenceExpression: others
                PsiElement(identifier)('others')
            PsiWhiteSpace('\n  ')
            PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: test2
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('test2')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: xs
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('xs')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  InfixType: immutable.Seq[String] | Null
                    ParametrizedType: immutable.Seq[String]
                      SimpleType: immutable.Seq
                        CodeReferenceElement: immutable.Seq
                          CodeReferenceElement: immutable
                            PsiElement(identifier)('immutable')
                          PsiElement(.)('.')
                          PsiElement(identifier)('Seq')
                      TypeArgumentsList
                        PsiElement([)('[')
                        SimpleType: String
                          CodeReferenceElement: String
                            PsiElement(identifier)('String')
                        PsiElement(])(']')
                    PsiWhiteSpace(' ')
                    CodeReferenceElement: |
                      PsiElement(identifier)('|')
                    PsiWhiteSpace(' ')
                    SimpleType: Null
                      CodeReferenceElement: Null
                        PsiElement(identifier)('Null')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Unit
            CodeReferenceElement: Unit
              PsiElement(identifier)('Unit')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          BlockExpression
            PsiElement({)('{')
            PsiWhiteSpace('\n    ')
            MethodCall
              ReferenceExpression: bar
                PsiElement(identifier)('bar')
              ArgumentList
                PsiElement(()('(')
                StringLiteral
                  PsiElement(string content)('"a"')
                PsiElement(,)(',')
                PsiWhiteSpace(' ')
                StringLiteral
                  PsiElement(string content)('"b"')
                PsiElement(,)(',')
                PsiWhiteSpace(' ')
                StringLiteral
                  PsiElement(string content)('"c"')
                PsiElement())(')')
            PsiWhiteSpace('\n    ')
            MethodCall
              ReferenceExpression: bar
                PsiElement(identifier)('bar')
              ArgumentList
                PsiElement(()('(')
                TypedExpression
                  ReferenceExpression: xs
                    PsiElement(identifier)('xs')
                  SequenceArgumentType
                    PsiElement(identifier)('*')
                PsiElement())(')')
            PsiWhiteSpace('\n\n    ')
            MethodCall
              ReferenceExpression: Paths.get
                ReferenceExpression: Paths
                  PsiElement(identifier)('Paths')
                PsiElement(.)('.')
                PsiElement(identifier)('get')
              ArgumentList
                PsiElement(()('(')
                StringLiteral
                  PsiElement(string content)('"Hello"')
                PsiElement(,)(',')
                PsiWhiteSpace(' ')
                StringLiteral
                  PsiElement(string content)('"World"')
                PsiElement())(')')
            PsiWhiteSpace('\n    ')
            MethodCall
              ReferenceExpression: Paths.get
                ReferenceExpression: Paths
                  PsiElement(identifier)('Paths')
                PsiElement(.)('.')
                PsiElement(identifier)('get')
              ArgumentList
                PsiElement(()('(')
                StringLiteral
                  PsiElement(string content)('"Hello"')
                PsiElement(,)(',')
                PsiWhiteSpace(' ')
                TypedExpression
                  ReferenceExpression: xs
                    PsiElement(identifier)('xs')
                  SequenceArgumentType
                    PsiElement(identifier)('*')
                PsiElement())(')')
            PsiWhiteSpace('\n\n    ')
            ScPatternDefinition: others
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              ListOfPatterns
                ConstructorPattern
                  CodeReferenceElement: List
                    PsiElement(identifier)('List')
                  Pattern Argument List
                    PsiElement(()('(')
                    WildcardPattern
                      PsiElement(_)('_')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    SequenceWildcardPattern: others
                      PsiElement(identifier)('others')
                      PsiElement(identifier)('*')
                    PsiElement())(')')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              ReferenceExpression: xs.toList
                ReferenceExpression: xs
                  PsiElement(identifier)('xs')
                PsiElement(.)('.')
                PsiElement(identifier)('toList')
            PsiWhiteSpace(' ')
            PsiComment(comment)('// toList should not be needed, see #4790')
            PsiWhiteSpace('\n    ')
            ScPatternDefinition: x
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              ListOfPatterns
                ReferencePattern: x
                  PsiElement(identifier)('x')
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              ParametrizedType: immutable.Seq[String]
                SimpleType: immutable.Seq
                  CodeReferenceElement: immutable.Seq
                    CodeReferenceElement: immutable
                      PsiElement(identifier)('immutable')
                    PsiElement(.)('.')
                    PsiElement(identifier)('Seq')
                TypeArgumentsList
                  PsiElement([)('[')
                  SimpleType: String
                    CodeReferenceElement: String
                      PsiElement(identifier)('String')
                  PsiElement(])(']')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              ReferenceExpression: others
                PsiElement(identifier)('others')
            PsiWhiteSpace('\n  ')
            PsiElement(})('}')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
