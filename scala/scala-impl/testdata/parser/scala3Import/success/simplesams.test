package test

trait X { def foo(x: Int): Int; def bar = foo(2) }
trait XX extends X

object test {
  val x: X = (x: Int) => 2  // should be a closure
  val xx: XX = (x: Int) => 2  // should be a closure, but blows up in backend
}
-----
ScalaFile
  ScPackaging
    PsiElement(package)('package')
    PsiWhiteSpace(' ')
    CodeReferenceElement: test
      PsiElement(identifier)('test')
    PsiWhiteSpace('\n\n')
    ScTrait: X
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      PsiElement(trait)('trait')
      PsiWhiteSpace(' ')
      PsiElement(identifier)('X')
      PsiWhiteSpace(' ')
      ExtendsBlock
        ScTemplateBody
          PsiElement({)('{')
          PsiWhiteSpace(' ')
          ScFunctionDeclaration: foo
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(def)('def')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('foo')
            Parameters
              ParametersClause
                PsiElement(()('(')
                Parameter: x
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(identifier)('x')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    SimpleType: Int
                      CodeReferenceElement: Int
                        PsiElement(identifier)('Int')
                PsiElement())(')')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            SimpleType: Int
              CodeReferenceElement: Int
                PsiElement(identifier)('Int')
          PsiElement(;)(';')
          PsiWhiteSpace(' ')
          ScFunctionDefinition: bar
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(def)('def')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('bar')
            Parameters
              <empty list>
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace(' ')
            MethodCall
              ReferenceExpression: foo
                PsiElement(identifier)('foo')
              ArgumentList
                PsiElement(()('(')
                IntegerLiteral
                  PsiElement(integer)('2')
                PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(})('}')
    PsiWhiteSpace('\n')
    ScTrait: XX
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      PsiElement(trait)('trait')
      PsiWhiteSpace(' ')
      PsiElement(identifier)('XX')
      PsiWhiteSpace(' ')
      ExtendsBlock
        PsiElement(extends)('extends')
        PsiWhiteSpace(' ')
        TemplateParents
          ConstructorInvocation
            SimpleType: X
              CodeReferenceElement: X
                PsiElement(identifier)('X')
    PsiWhiteSpace('\n\n')
    ScObject: test
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      PsiElement(object)('object')
      PsiWhiteSpace(' ')
      PsiElement(identifier)('test')
      PsiWhiteSpace(' ')
      ExtendsBlock
        ScTemplateBody
          PsiElement({)('{')
          PsiWhiteSpace('\n  ')
          ScPatternDefinition: x
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(val)('val')
            PsiWhiteSpace(' ')
            ListOfPatterns
              ReferencePattern: x
                PsiElement(identifier)('x')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            SimpleType: X
              CodeReferenceElement: X
                PsiElement(identifier)('X')
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace(' ')
            FunctionExpression
              Parameters
                ParametersClause
                  PsiElement(()('(')
                  Parameter: x
                    AnnotationsList
                      <empty list>
                    PsiElement(identifier)('x')
                    PsiElement(:)(':')
                    PsiWhiteSpace(' ')
                    ParameterType
                      SimpleType: Int
                        CodeReferenceElement: Int
                          PsiElement(identifier)('Int')
                  PsiElement())(')')
              PsiWhiteSpace(' ')
              PsiElement(=>)('=>')
              PsiWhiteSpace(' ')
              IntegerLiteral
                PsiElement(integer)('2')
          PsiWhiteSpace('  ')
          PsiComment(comment)('// should be a closure')
          PsiWhiteSpace('\n  ')
          ScPatternDefinition: xx
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(val)('val')
            PsiWhiteSpace(' ')
            ListOfPatterns
              ReferencePattern: xx
                PsiElement(identifier)('xx')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            SimpleType: XX
              CodeReferenceElement: XX
                PsiElement(identifier)('XX')
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace(' ')
            FunctionExpression
              Parameters
                ParametersClause
                  PsiElement(()('(')
                  Parameter: x
                    AnnotationsList
                      <empty list>
                    PsiElement(identifier)('x')
                    PsiElement(:)(':')
                    PsiWhiteSpace(' ')
                    ParameterType
                      SimpleType: Int
                        CodeReferenceElement: Int
                          PsiElement(identifier)('Int')
                  PsiElement())(')')
              PsiWhiteSpace(' ')
              PsiElement(=>)('=>')
              PsiWhiteSpace(' ')
              IntegerLiteral
                PsiElement(integer)('2')
          PsiWhiteSpace('  ')
          PsiComment(comment)('// should be a closure, but blows up in backend')
          PsiWhiteSpace('\n')
          PsiElement(})('}')
