/*
object Test {
  class A
  class B
  class C
  class D

  /*
  {
    implicit def parentA(implicit arg: => B): A = ???
    implicit def parentB(implicit arg: C): B = ???
    implicit def parentC(implicit arg: D): C = ???
    implicit def parentD(implicit arg: A): D = ???

    implicitly[A]
  }
  */

  /*
  {
    implicit def parentA(implicit arg: B): A = ???
    implicit def parentB(implicit arg: => C): B = ???
    implicit def parentC(implicit arg: D): C = ???
    implicit def parentD(implicit arg: A): D = ???

    implicitly[A]
  }
  */

  {
    implicit def parentA(implicit arg: B): A = ???
    implicit def parentB(implicit arg: C): B = ???
    implicit def parentC(implicit arg: => D): C = ???
    implicit def parentD(implicit arg: A): D = ???

    implicitly[A]
  }

  /*
  {
    implicit def parentA(implicit arg: B): A = ???
    implicit def parentB(implicit arg: C): B = ???
    implicit def parentC(implicit arg: D): C = ???
    implicit def parentD(implicit arg: => A): D = ???

    implicitly[A]
  }
  */
}
*/

object Test {
  class A

  {
    implicit def parentA(implicit arg: => A): A = ???

    implicitly[A]
  }

  {
    implicit def parentA(implicit arg: => A): A = ???

    implicitly[A]
  }
}
-----
ScalaFile
  PsiComment(BlockComment)('/*\nobject Test {\n  class A\n  class B\n  class C\n  class D\n\n  /*\n  {\n    implicit def parentA(implicit arg: => B): A = ???\n    implicit def parentB(implicit arg: C): B = ???\n    implicit def parentC(implicit arg: D): C = ???\n    implicit def parentD(implicit arg: A): D = ???\n\n    implicitly[A]\n  }\n  */\n\n  /*\n  {\n    implicit def parentA(implicit arg: B): A = ???\n    implicit def parentB(implicit arg: => C): B = ???\n    implicit def parentC(implicit arg: D): C = ???\n    implicit def parentD(implicit arg: A): D = ???\n\n    implicitly[A]\n  }\n  */\n\n  {\n    implicit def parentA(implicit arg: B): A = ???\n    implicit def parentB(implicit arg: C): B = ???\n    implicit def parentC(implicit arg: => D): C = ???\n    implicit def parentD(implicit arg: A): D = ???\n\n    implicitly[A]\n  }\n\n  /*\n  {\n    implicit def parentA(implicit arg: B): A = ???\n    implicit def parentB(implicit arg: C): B = ???\n    implicit def parentC(implicit arg: D): C = ???\n    implicit def parentD(implicit arg: => A): D = ???\n\n    implicitly[A]\n  }\n  */\n}\n*/')
  PsiWhiteSpace('\n\n')
  ScObject: Test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScClass: A
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(class)('class')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('A')
          PrimaryConstructor
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            Parameters
              <empty list>
          ExtendsBlock
            <empty list>
        PsiWhiteSpace('\n\n  ')
        BlockExpression
          PsiElement({)('{')
          PsiWhiteSpace('\n    ')
          ScFunctionDefinition: parentA
            AnnotationsList
              <empty list>
            Modifiers
              PsiElement(implicit)('implicit')
            PsiWhiteSpace(' ')
            PsiElement(def)('def')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('parentA')
            Parameters
              ParametersClause
                PsiElement(()('(')
                PsiElement(implicit)('implicit')
                PsiWhiteSpace(' ')
                Parameter: arg
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(identifier)('arg')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    PsiElement(=>)('=>')
                    PsiWhiteSpace(' ')
                    SimpleType: A
                      CodeReferenceElement: A
                        PsiElement(identifier)('A')
                PsiElement())(')')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            SimpleType: A
              CodeReferenceElement: A
                PsiElement(identifier)('A')
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace(' ')
            ReferenceExpression: ???
              PsiElement(identifier)('???')
          PsiWhiteSpace('\n\n    ')
          GenericCall
            ReferenceExpression: implicitly
              PsiElement(identifier)('implicitly')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: A
                CodeReferenceElement: A
                  PsiElement(identifier)('A')
              PsiElement(])(']')
          PsiWhiteSpace('\n  ')
          PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        BlockExpression
          PsiElement({)('{')
          PsiWhiteSpace('\n    ')
          ScFunctionDefinition: parentA
            AnnotationsList
              <empty list>
            Modifiers
              PsiElement(implicit)('implicit')
            PsiWhiteSpace(' ')
            PsiElement(def)('def')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('parentA')
            Parameters
              ParametersClause
                PsiElement(()('(')
                PsiElement(implicit)('implicit')
                PsiWhiteSpace(' ')
                Parameter: arg
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(identifier)('arg')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    PsiElement(=>)('=>')
                    PsiWhiteSpace(' ')
                    SimpleType: A
                      CodeReferenceElement: A
                        PsiElement(identifier)('A')
                PsiElement())(')')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            SimpleType: A
              CodeReferenceElement: A
                PsiElement(identifier)('A')
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace(' ')
            ReferenceExpression: ???
              PsiElement(identifier)('???')
          PsiWhiteSpace('\n\n    ')
          GenericCall
            ReferenceExpression: implicitly
              PsiElement(identifier)('implicitly')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: A
                CodeReferenceElement: A
                  PsiElement(identifier)('A')
              PsiElement(])(']')
          PsiWhiteSpace('\n  ')
          PsiElement(})('}')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
