trait CompilerInterface {
  type Tree22
}

class Reflect(val internal: CompilerInterface) {
  opaque type Tree22 = internal.Tree22
  def show(t: Tree22): String = ???
}

object App {
  val refl: Reflect = ???
  import refl.*

  show(??? : Tree22)
}
-----
ScalaFile
  ScTrait: CompilerInterface
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('CompilerInterface')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScTypeAliasDeclaration: Tree22
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Tree22')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScClass: Reflect
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Reflect')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        ParametersClause
          PsiElement(()('(')
          ClassParameter: internal
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(val)('val')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('internal')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            ParameterType
              SimpleType: CompilerInterface
                CodeReferenceElement: CompilerInterface
                  PsiElement(identifier)('CompilerInterface')
          PsiElement())(')')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScTypeAliasDefinition: Tree22
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(opaque)('opaque')
          PsiWhiteSpace(' ')
          PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Tree22')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          SimpleType: internal.Tree22
            CodeReferenceElement: internal.Tree22
              CodeReferenceElement: internal
                PsiElement(identifier)('internal')
              PsiElement(.)('.')
              PsiElement(identifier)('Tree22')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: show
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('show')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: t
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('t')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Tree22
                    CodeReferenceElement: Tree22
                      PsiElement(identifier)('Tree22')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: String
            CodeReferenceElement: String
              PsiElement(identifier)('String')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: ???
            PsiElement(identifier)('???')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScObject: App
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('App')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: refl
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: refl
              PsiElement(identifier)('refl')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Reflect
            CodeReferenceElement: Reflect
              PsiElement(identifier)('Reflect')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: ???
            PsiElement(identifier)('???')
        PsiWhiteSpace('\n  ')
        ScImportStatement
          PsiElement(import)('import')
          PsiWhiteSpace(' ')
          ImportExpression
            CodeReferenceElement: refl
              PsiElement(identifier)('refl')
            PsiElement(.)('.')
            PsiElement(*)('*')
        PsiWhiteSpace('\n\n  ')
        MethodCall
          ReferenceExpression: show
            PsiElement(identifier)('show')
          ArgumentList
            PsiElement(()('(')
            TypedExpression
              ReferenceExpression: ???
                PsiElement(identifier)('???')
              PsiWhiteSpace(' ')
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              SimpleType: Tree22
                CodeReferenceElement: Tree22
                  PsiElement(identifier)('Tree22')
            PsiElement())(')')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
