object Breakdown {
  def unapplySeq(x: Int): Some[List[String]] = Some(List("", "there"))
}
object Test {
  42 match {
    case Breakdown("") =>  // needed to trigger bug
    case Breakdown("", who) => println ("hello " + who)
  }
}
object Test2 {
  42 match {
    case Breakdown("") =>  // needed to trigger bug
    case Breakdown("foo") =>  // needed to trigger bug
    case Breakdown("", who) => println ("hello " + who)
  }
}
-----
ScalaFile
  ScObject: Breakdown
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Breakdown')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: unapplySeq
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('unapplySeq')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: x
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Int
                    CodeReferenceElement: Int
                      PsiElement(identifier)('Int')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: Some[List[String]]
            SimpleType: Some
              CodeReferenceElement: Some
                PsiElement(identifier)('Some')
            TypeArgumentsList
              PsiElement([)('[')
              ParametrizedType: List[String]
                SimpleType: List
                  CodeReferenceElement: List
                    PsiElement(identifier)('List')
                TypeArgumentsList
                  PsiElement([)('[')
                  SimpleType: String
                    CodeReferenceElement: String
                      PsiElement(identifier)('String')
                  PsiElement(])(']')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: Some
              PsiElement(identifier)('Some')
            ArgumentList
              PsiElement(()('(')
              MethodCall
                ReferenceExpression: List
                  PsiElement(identifier)('List')
                ArgumentList
                  PsiElement(()('(')
                  StringLiteral
                    PsiElement(string content)('""')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  StringLiteral
                    PsiElement(string content)('"there"')
                  PsiElement())(')')
              PsiElement())(')')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n')
  ScObject: Test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        MatchStatement
          IntegerLiteral
            PsiElement(integer)('42')
          PsiWhiteSpace(' ')
          PsiElement(match)('match')
          PsiWhiteSpace(' ')
          PsiElement({)('{')
          PsiWhiteSpace('\n    ')
          CaseClauses
            CaseClause
              PsiElement(case)('case')
              PsiWhiteSpace(' ')
              ConstructorPattern
                CodeReferenceElement: Breakdown
                  PsiElement(identifier)('Breakdown')
                Pattern Argument List
                  PsiElement(()('(')
                  LiteralPattern
                    StringLiteral
                      PsiElement(string content)('""')
                  PsiElement())(')')
              PsiWhiteSpace(' ')
              PsiElement(=>)('=>')
              BlockOfExpressions
                <empty list>
            PsiWhiteSpace('  ')
            PsiComment(comment)('// needed to trigger bug')
            PsiWhiteSpace('\n    ')
            CaseClause
              PsiElement(case)('case')
              PsiWhiteSpace(' ')
              ConstructorPattern
                CodeReferenceElement: Breakdown
                  PsiElement(identifier)('Breakdown')
                Pattern Argument List
                  PsiElement(()('(')
                  LiteralPattern
                    StringLiteral
                      PsiElement(string content)('""')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  ReferencePattern: who
                    PsiElement(identifier)('who')
                  PsiElement())(')')
              PsiWhiteSpace(' ')
              PsiElement(=>)('=>')
              PsiWhiteSpace(' ')
              BlockOfExpressions
                MethodCall
                  ReferenceExpression: println
                    PsiElement(identifier)('println')
                  PsiWhiteSpace(' ')
                  ArgumentList
                    PsiElement(()('(')
                    InfixExpression
                      StringLiteral
                        PsiElement(string content)('"hello "')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: +
                        PsiElement(identifier)('+')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: who
                        PsiElement(identifier)('who')
                    PsiElement())(')')
          PsiWhiteSpace('\n  ')
          PsiElement(})('}')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n')
  ScObject: Test2
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test2')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        MatchStatement
          IntegerLiteral
            PsiElement(integer)('42')
          PsiWhiteSpace(' ')
          PsiElement(match)('match')
          PsiWhiteSpace(' ')
          PsiElement({)('{')
          PsiWhiteSpace('\n    ')
          CaseClauses
            CaseClause
              PsiElement(case)('case')
              PsiWhiteSpace(' ')
              ConstructorPattern
                CodeReferenceElement: Breakdown
                  PsiElement(identifier)('Breakdown')
                Pattern Argument List
                  PsiElement(()('(')
                  LiteralPattern
                    StringLiteral
                      PsiElement(string content)('""')
                  PsiElement())(')')
              PsiWhiteSpace(' ')
              PsiElement(=>)('=>')
              BlockOfExpressions
                <empty list>
            PsiWhiteSpace('  ')
            PsiComment(comment)('// needed to trigger bug')
            PsiWhiteSpace('\n    ')
            CaseClause
              PsiElement(case)('case')
              PsiWhiteSpace(' ')
              ConstructorPattern
                CodeReferenceElement: Breakdown
                  PsiElement(identifier)('Breakdown')
                Pattern Argument List
                  PsiElement(()('(')
                  LiteralPattern
                    StringLiteral
                      PsiElement(string content)('"foo"')
                  PsiElement())(')')
              PsiWhiteSpace(' ')
              PsiElement(=>)('=>')
              BlockOfExpressions
                <empty list>
            PsiWhiteSpace('  ')
            PsiComment(comment)('// needed to trigger bug')
            PsiWhiteSpace('\n    ')
            CaseClause
              PsiElement(case)('case')
              PsiWhiteSpace(' ')
              ConstructorPattern
                CodeReferenceElement: Breakdown
                  PsiElement(identifier)('Breakdown')
                Pattern Argument List
                  PsiElement(()('(')
                  LiteralPattern
                    StringLiteral
                      PsiElement(string content)('""')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  ReferencePattern: who
                    PsiElement(identifier)('who')
                  PsiElement())(')')
              PsiWhiteSpace(' ')
              PsiElement(=>)('=>')
              PsiWhiteSpace(' ')
              BlockOfExpressions
                MethodCall
                  ReferenceExpression: println
                    PsiElement(identifier)('println')
                  PsiWhiteSpace(' ')
                  ArgumentList
                    PsiElement(()('(')
                    InfixExpression
                      StringLiteral
                        PsiElement(string content)('"hello "')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: +
                        PsiElement(identifier)('+')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: who
                        PsiElement(identifier)('who')
                    PsiElement())(')')
          PsiWhiteSpace('\n  ')
          PsiElement(})('}')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
