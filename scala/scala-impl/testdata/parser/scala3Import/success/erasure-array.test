// https://github.com/lampepfl/dotty/issues/1065
package hello

object world {
  def mkArray(atype: Int): Array[_ <: AnyVal] = {
    (if (atype == 1) new Array[Int](10) else new Array[Float](10))
  }

  def main(args: Array[String]): Unit = {
    println(mkArray(1))
  }
}
-----
ScalaFile
  PsiComment(comment)('// https://github.com/lampepfl/dotty/issues/1065')
  PsiWhiteSpace('\n')
  ScPackaging
    PsiElement(package)('package')
    PsiWhiteSpace(' ')
    CodeReferenceElement: hello
      PsiElement(identifier)('hello')
    PsiWhiteSpace('\n\n')
    ScObject: world
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      PsiElement(object)('object')
      PsiWhiteSpace(' ')
      PsiElement(identifier)('world')
      PsiWhiteSpace(' ')
      ExtendsBlock
        ScTemplateBody
          PsiElement({)('{')
          PsiWhiteSpace('\n  ')
          ScFunctionDefinition: mkArray
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(def)('def')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('mkArray')
            Parameters
              ParametersClause
                PsiElement(()('(')
                Parameter: atype
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(identifier)('atype')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    SimpleType: Int
                      CodeReferenceElement: Int
                        PsiElement(identifier)('Int')
                PsiElement())(')')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            ParametrizedType: Array[_ <: AnyVal]
              SimpleType: Array
                CodeReferenceElement: Array
                  PsiElement(identifier)('Array')
              TypeArgumentsList
                PsiElement([)('[')
                WildcardType: _ <: AnyVal
                  PsiElement(_)('_')
                  PsiWhiteSpace(' ')
                  PsiElement(<:)('<:')
                  PsiWhiteSpace(' ')
                  SimpleType: AnyVal
                    CodeReferenceElement: AnyVal
                      PsiElement(identifier)('AnyVal')
                PsiElement(])(']')
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace(' ')
            BlockExpression
              PsiElement({)('{')
              PsiWhiteSpace('\n    ')
              ExpressionInParenthesis
                PsiElement(()('(')
                IfStatement
                  PsiElement(if)('if')
                  PsiWhiteSpace(' ')
                  PsiElement(()('(')
                  InfixExpression
                    ReferenceExpression: atype
                      PsiElement(identifier)('atype')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: ==
                      PsiElement(identifier)('==')
                    PsiWhiteSpace(' ')
                    IntegerLiteral
                      PsiElement(integer)('1')
                  PsiElement())(')')
                  PsiWhiteSpace(' ')
                  ScNewTemplateDefinition: <anonymous>
                    PsiElement(new)('new')
                    PsiWhiteSpace(' ')
                    ExtendsBlock
                      TemplateParents
                        ConstructorInvocation
                          ParametrizedType: Array[Int]
                            SimpleType: Array
                              CodeReferenceElement: Array
                                PsiElement(identifier)('Array')
                            TypeArgumentsList
                              PsiElement([)('[')
                              SimpleType: Int
                                CodeReferenceElement: Int
                                  PsiElement(identifier)('Int')
                              PsiElement(])(']')
                          ArgumentList
                            PsiElement(()('(')
                            IntegerLiteral
                              PsiElement(integer)('10')
                            PsiElement())(')')
                  PsiWhiteSpace(' ')
                  PsiElement(else)('else')
                  PsiWhiteSpace(' ')
                  ScNewTemplateDefinition: <anonymous>
                    PsiElement(new)('new')
                    PsiWhiteSpace(' ')
                    ExtendsBlock
                      TemplateParents
                        ConstructorInvocation
                          ParametrizedType: Array[Float]
                            SimpleType: Array
                              CodeReferenceElement: Array
                                PsiElement(identifier)('Array')
                            TypeArgumentsList
                              PsiElement([)('[')
                              SimpleType: Float
                                CodeReferenceElement: Float
                                  PsiElement(identifier)('Float')
                              PsiElement(])(']')
                          ArgumentList
                            PsiElement(()('(')
                            IntegerLiteral
                              PsiElement(integer)('10')
                            PsiElement())(')')
                PsiElement())(')')
              PsiWhiteSpace('\n  ')
              PsiElement(})('}')
          PsiWhiteSpace('\n\n  ')
          ScFunctionDefinition: main
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(def)('def')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('main')
            Parameters
              ParametersClause
                PsiElement(()('(')
                Parameter: args
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(identifier)('args')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    ParametrizedType: Array[String]
                      SimpleType: Array
                        CodeReferenceElement: Array
                          PsiElement(identifier)('Array')
                      TypeArgumentsList
                        PsiElement([)('[')
                        SimpleType: String
                          CodeReferenceElement: String
                            PsiElement(identifier)('String')
                        PsiElement(])(']')
                PsiElement())(')')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            SimpleType: Unit
              CodeReferenceElement: Unit
                PsiElement(identifier)('Unit')
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace(' ')
            BlockExpression
              PsiElement({)('{')
              PsiWhiteSpace('\n    ')
              MethodCall
                ReferenceExpression: println
                  PsiElement(identifier)('println')
                ArgumentList
                  PsiElement(()('(')
                  MethodCall
                    ReferenceExpression: mkArray
                      PsiElement(identifier)('mkArray')
                    ArgumentList
                      PsiElement(()('(')
                      IntegerLiteral
                        PsiElement(integer)('1')
                      PsiElement())(')')
                  PsiElement())(')')
              PsiWhiteSpace('\n  ')
              PsiElement(})('}')
          PsiWhiteSpace('\n')
          PsiElement(})('}')
