case class A private (i: Int)
object A {
  def a0 = new A(0)    // constructor is accessible in companion
  def a = A(1).copy(2) // apply and copy are accessible in companion
}

case class B private (i: Int) { // no user-defined companion object, should compile
  def b0 = new B(0)    // constructor is accessible
  def b = B(1).copy(2) // apply and copy are accessible
}

object qualified_private {
  case class A private[qualified_private] (i: Int)
  object A {
    def a0 = new A(0)    // constructor is accessible in companion
    def a = A(1).copy(2) // apply and copy are accessible in companion
  }

  def a0 = new A(0)    // constructor is accessible in qualified_private object
  def a = A(1).copy(2) // apply and copy are accessible in qualified_private object

  case class B private[qualified_private] (i: Int) { // no user-defined companion object, should compile
    def b0 = new B(0)    // constructor is accessible
    def b = B(1).copy(2) // apply and copy are accessible
  }

  def b0 = new B(0)    // constructor is accessible in qualified_private object
  def b = B(1).copy(2) // apply and copy are accessible in qualified_private object
}

case class C protected (i: Int)
class CSub extends C(1) {
  def c = copy(2) // copy is accessible in subclass
}

object qualified_protected {
  case class C protected[qualified_protected] (i: Int)
  class CSub extends C(1) {
    def c = copy(2) // copy is accessible in subclass
  }
  def eta: Int => C = C // can eta-expand C.apply method

  def c0 = new C(0)    // constructor is accessible in qualified_protected object
  def c = C(1).copy(2) // apply and copy are accessible in qualified_protected object
}
-----
ScalaFile
  ScClass: A
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(case)('case')
    PsiWhiteSpace(' ')
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('A')
    PsiWhiteSpace(' ')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        AccessModifier
          PsiElement(private)('private')
      PsiWhiteSpace(' ')
      Parameters
        ParametersClause
          PsiElement(()('(')
          ClassParameter: i
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(identifier)('i')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            ParameterType
              SimpleType: Int
                CodeReferenceElement: Int
                  PsiElement(identifier)('Int')
          PsiElement())(')')
    ExtendsBlock
      <empty list>
  PsiWhiteSpace('\n')
  ScObject: A
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('A')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: a0
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('a0')
          Parameters
            <empty list>
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ScNewTemplateDefinition: <anonymous>
            PsiElement(new)('new')
            PsiWhiteSpace(' ')
            ExtendsBlock
              TemplateParents
                ConstructorInvocation
                  SimpleType: A
                    CodeReferenceElement: A
                      PsiElement(identifier)('A')
                  ArgumentList
                    PsiElement(()('(')
                    IntegerLiteral
                      PsiElement(integer)('0')
                    PsiElement())(')')
        PsiWhiteSpace('    ')
        PsiComment(comment)('// constructor is accessible in companion')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: a
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('a')
          Parameters
            <empty list>
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: A(1).copy
              MethodCall
                ReferenceExpression: A
                  PsiElement(identifier)('A')
                ArgumentList
                  PsiElement(()('(')
                  IntegerLiteral
                    PsiElement(integer)('1')
                  PsiElement())(')')
              PsiElement(.)('.')
              PsiElement(identifier)('copy')
            ArgumentList
              PsiElement(()('(')
              IntegerLiteral
                PsiElement(integer)('2')
              PsiElement())(')')
        PsiWhiteSpace(' ')
        PsiComment(comment)('// apply and copy are accessible in companion')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScClass: B
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(case)('case')
    PsiWhiteSpace(' ')
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('B')
    PsiWhiteSpace(' ')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        AccessModifier
          PsiElement(private)('private')
      PsiWhiteSpace(' ')
      Parameters
        ParametersClause
          PsiElement(()('(')
          ClassParameter: i
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(identifier)('i')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            ParameterType
              SimpleType: Int
                CodeReferenceElement: Int
                  PsiElement(identifier)('Int')
          PsiElement())(')')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace(' ')
        PsiComment(comment)('// no user-defined companion object, should compile')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: b0
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('b0')
          Parameters
            <empty list>
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ScNewTemplateDefinition: <anonymous>
            PsiElement(new)('new')
            PsiWhiteSpace(' ')
            ExtendsBlock
              TemplateParents
                ConstructorInvocation
                  SimpleType: B
                    CodeReferenceElement: B
                      PsiElement(identifier)('B')
                  ArgumentList
                    PsiElement(()('(')
                    IntegerLiteral
                      PsiElement(integer)('0')
                    PsiElement())(')')
        PsiWhiteSpace('    ')
        PsiComment(comment)('// constructor is accessible')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: b
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('b')
          Parameters
            <empty list>
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: B(1).copy
              MethodCall
                ReferenceExpression: B
                  PsiElement(identifier)('B')
                ArgumentList
                  PsiElement(()('(')
                  IntegerLiteral
                    PsiElement(integer)('1')
                  PsiElement())(')')
              PsiElement(.)('.')
              PsiElement(identifier)('copy')
            ArgumentList
              PsiElement(()('(')
              IntegerLiteral
                PsiElement(integer)('2')
              PsiElement())(')')
        PsiWhiteSpace(' ')
        PsiComment(comment)('// apply and copy are accessible')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScObject: qualified_private
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('qualified_private')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScClass: A
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(case)('case')
          PsiWhiteSpace(' ')
          PsiElement(class)('class')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('A')
          PsiWhiteSpace(' ')
          PrimaryConstructor
            AnnotationsList
              <empty list>
            Modifiers
              AccessModifier
                PsiElement(private)('private')
                PsiElement([)('[')
                PsiElement(identifier)('qualified_private')
                PsiElement(])(']')
            PsiWhiteSpace(' ')
            Parameters
              ParametersClause
                PsiElement(()('(')
                ClassParameter: i
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(identifier)('i')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    SimpleType: Int
                      CodeReferenceElement: Int
                        PsiElement(identifier)('Int')
                PsiElement())(')')
          ExtendsBlock
            <empty list>
        PsiWhiteSpace('\n  ')
        ScObject: A
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(object)('object')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('A')
          PsiWhiteSpace(' ')
          ExtendsBlock
            ScTemplateBody
              PsiElement({)('{')
              PsiWhiteSpace('\n    ')
              ScFunctionDefinition: a0
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(def)('def')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('a0')
                Parameters
                  <empty list>
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                ScNewTemplateDefinition: <anonymous>
                  PsiElement(new)('new')
                  PsiWhiteSpace(' ')
                  ExtendsBlock
                    TemplateParents
                      ConstructorInvocation
                        SimpleType: A
                          CodeReferenceElement: A
                            PsiElement(identifier)('A')
                        ArgumentList
                          PsiElement(()('(')
                          IntegerLiteral
                            PsiElement(integer)('0')
                          PsiElement())(')')
              PsiWhiteSpace('    ')
              PsiComment(comment)('// constructor is accessible in companion')
              PsiWhiteSpace('\n    ')
              ScFunctionDefinition: a
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(def)('def')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('a')
                Parameters
                  <empty list>
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                MethodCall
                  ReferenceExpression: A(1).copy
                    MethodCall
                      ReferenceExpression: A
                        PsiElement(identifier)('A')
                      ArgumentList
                        PsiElement(()('(')
                        IntegerLiteral
                          PsiElement(integer)('1')
                        PsiElement())(')')
                    PsiElement(.)('.')
                    PsiElement(identifier)('copy')
                  ArgumentList
                    PsiElement(()('(')
                    IntegerLiteral
                      PsiElement(integer)('2')
                    PsiElement())(')')
              PsiWhiteSpace(' ')
              PsiComment(comment)('// apply and copy are accessible in companion')
              PsiWhiteSpace('\n  ')
              PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: a0
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('a0')
          Parameters
            <empty list>
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ScNewTemplateDefinition: <anonymous>
            PsiElement(new)('new')
            PsiWhiteSpace(' ')
            ExtendsBlock
              TemplateParents
                ConstructorInvocation
                  SimpleType: A
                    CodeReferenceElement: A
                      PsiElement(identifier)('A')
                  ArgumentList
                    PsiElement(()('(')
                    IntegerLiteral
                      PsiElement(integer)('0')
                    PsiElement())(')')
        PsiWhiteSpace('    ')
        PsiComment(comment)('// constructor is accessible in qualified_private object')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: a
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('a')
          Parameters
            <empty list>
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: A(1).copy
              MethodCall
                ReferenceExpression: A
                  PsiElement(identifier)('A')
                ArgumentList
                  PsiElement(()('(')
                  IntegerLiteral
                    PsiElement(integer)('1')
                  PsiElement())(')')
              PsiElement(.)('.')
              PsiElement(identifier)('copy')
            ArgumentList
              PsiElement(()('(')
              IntegerLiteral
                PsiElement(integer)('2')
              PsiElement())(')')
        PsiWhiteSpace(' ')
        PsiComment(comment)('// apply and copy are accessible in qualified_private object')
        PsiWhiteSpace('\n\n  ')
        ScClass: B
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(case)('case')
          PsiWhiteSpace(' ')
          PsiElement(class)('class')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('B')
          PsiWhiteSpace(' ')
          PrimaryConstructor
            AnnotationsList
              <empty list>
            Modifiers
              AccessModifier
                PsiElement(private)('private')
                PsiElement([)('[')
                PsiElement(identifier)('qualified_private')
                PsiElement(])(']')
            PsiWhiteSpace(' ')
            Parameters
              ParametersClause
                PsiElement(()('(')
                ClassParameter: i
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(identifier)('i')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    SimpleType: Int
                      CodeReferenceElement: Int
                        PsiElement(identifier)('Int')
                PsiElement())(')')
          PsiWhiteSpace(' ')
          ExtendsBlock
            ScTemplateBody
              PsiElement({)('{')
              PsiWhiteSpace(' ')
              PsiComment(comment)('// no user-defined companion object, should compile')
              PsiWhiteSpace('\n    ')
              ScFunctionDefinition: b0
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(def)('def')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('b0')
                Parameters
                  <empty list>
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                ScNewTemplateDefinition: <anonymous>
                  PsiElement(new)('new')
                  PsiWhiteSpace(' ')
                  ExtendsBlock
                    TemplateParents
                      ConstructorInvocation
                        SimpleType: B
                          CodeReferenceElement: B
                            PsiElement(identifier)('B')
                        ArgumentList
                          PsiElement(()('(')
                          IntegerLiteral
                            PsiElement(integer)('0')
                          PsiElement())(')')
              PsiWhiteSpace('    ')
              PsiComment(comment)('// constructor is accessible')
              PsiWhiteSpace('\n    ')
              ScFunctionDefinition: b
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(def)('def')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('b')
                Parameters
                  <empty list>
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                MethodCall
                  ReferenceExpression: B(1).copy
                    MethodCall
                      ReferenceExpression: B
                        PsiElement(identifier)('B')
                      ArgumentList
                        PsiElement(()('(')
                        IntegerLiteral
                          PsiElement(integer)('1')
                        PsiElement())(')')
                    PsiElement(.)('.')
                    PsiElement(identifier)('copy')
                  ArgumentList
                    PsiElement(()('(')
                    IntegerLiteral
                      PsiElement(integer)('2')
                    PsiElement())(')')
              PsiWhiteSpace(' ')
              PsiComment(comment)('// apply and copy are accessible')
              PsiWhiteSpace('\n  ')
              PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: b0
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('b0')
          Parameters
            <empty list>
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ScNewTemplateDefinition: <anonymous>
            PsiElement(new)('new')
            PsiWhiteSpace(' ')
            ExtendsBlock
              TemplateParents
                ConstructorInvocation
                  SimpleType: B
                    CodeReferenceElement: B
                      PsiElement(identifier)('B')
                  ArgumentList
                    PsiElement(()('(')
                    IntegerLiteral
                      PsiElement(integer)('0')
                    PsiElement())(')')
        PsiWhiteSpace('    ')
        PsiComment(comment)('// constructor is accessible in qualified_private object')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: b
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('b')
          Parameters
            <empty list>
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: B(1).copy
              MethodCall
                ReferenceExpression: B
                  PsiElement(identifier)('B')
                ArgumentList
                  PsiElement(()('(')
                  IntegerLiteral
                    PsiElement(integer)('1')
                  PsiElement())(')')
              PsiElement(.)('.')
              PsiElement(identifier)('copy')
            ArgumentList
              PsiElement(()('(')
              IntegerLiteral
                PsiElement(integer)('2')
              PsiElement())(')')
        PsiWhiteSpace(' ')
        PsiComment(comment)('// apply and copy are accessible in qualified_private object')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScClass: C
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(case)('case')
    PsiWhiteSpace(' ')
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('C')
    PsiWhiteSpace(' ')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        AccessModifier
          PsiElement(protected)('protected')
      PsiWhiteSpace(' ')
      Parameters
        ParametersClause
          PsiElement(()('(')
          ClassParameter: i
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(identifier)('i')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            ParameterType
              SimpleType: Int
                CodeReferenceElement: Int
                  PsiElement(identifier)('Int')
          PsiElement())(')')
    ExtendsBlock
      <empty list>
  PsiWhiteSpace('\n')
  ScClass: CSub
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('CSub')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          SimpleType: C
            CodeReferenceElement: C
              PsiElement(identifier)('C')
          ArgumentList
            PsiElement(()('(')
            IntegerLiteral
              PsiElement(integer)('1')
            PsiElement())(')')
      PsiWhiteSpace(' ')
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: c
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('c')
          Parameters
            <empty list>
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: copy
              PsiElement(identifier)('copy')
            ArgumentList
              PsiElement(()('(')
              IntegerLiteral
                PsiElement(integer)('2')
              PsiElement())(')')
        PsiWhiteSpace(' ')
        PsiComment(comment)('// copy is accessible in subclass')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScObject: qualified_protected
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('qualified_protected')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScClass: C
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(case)('case')
          PsiWhiteSpace(' ')
          PsiElement(class)('class')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('C')
          PsiWhiteSpace(' ')
          PrimaryConstructor
            AnnotationsList
              <empty list>
            Modifiers
              AccessModifier
                PsiElement(protected)('protected')
                PsiElement([)('[')
                PsiElement(identifier)('qualified_protected')
                PsiElement(])(']')
            PsiWhiteSpace(' ')
            Parameters
              ParametersClause
                PsiElement(()('(')
                ClassParameter: i
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(identifier)('i')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    SimpleType: Int
                      CodeReferenceElement: Int
                        PsiElement(identifier)('Int')
                PsiElement())(')')
          ExtendsBlock
            <empty list>
        PsiWhiteSpace('\n  ')
        ScClass: CSub
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(class)('class')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('CSub')
          PrimaryConstructor
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            Parameters
              <empty list>
          PsiWhiteSpace(' ')
          ExtendsBlock
            PsiElement(extends)('extends')
            PsiWhiteSpace(' ')
            TemplateParents
              ConstructorInvocation
                SimpleType: C
                  CodeReferenceElement: C
                    PsiElement(identifier)('C')
                ArgumentList
                  PsiElement(()('(')
                  IntegerLiteral
                    PsiElement(integer)('1')
                  PsiElement())(')')
            PsiWhiteSpace(' ')
            ScTemplateBody
              PsiElement({)('{')
              PsiWhiteSpace('\n    ')
              ScFunctionDefinition: c
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(def)('def')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('c')
                Parameters
                  <empty list>
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                MethodCall
                  ReferenceExpression: copy
                    PsiElement(identifier)('copy')
                  ArgumentList
                    PsiElement(()('(')
                    IntegerLiteral
                      PsiElement(integer)('2')
                    PsiElement())(')')
              PsiWhiteSpace(' ')
              PsiComment(comment)('// copy is accessible in subclass')
              PsiWhiteSpace('\n  ')
              PsiElement(})('}')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: eta
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('eta')
          Parameters
            <empty list>
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          FunctionalType: Int => C
            SimpleType: Int
              CodeReferenceElement: Int
                PsiElement(identifier)('Int')
            PsiWhiteSpace(' ')
            PsiElement(=>)('=>')
            PsiWhiteSpace(' ')
            SimpleType: C
              CodeReferenceElement: C
                PsiElement(identifier)('C')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: C
            PsiElement(identifier)('C')
        PsiWhiteSpace(' ')
        PsiComment(comment)('// can eta-expand C.apply method')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: c0
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('c0')
          Parameters
            <empty list>
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ScNewTemplateDefinition: <anonymous>
            PsiElement(new)('new')
            PsiWhiteSpace(' ')
            ExtendsBlock
              TemplateParents
                ConstructorInvocation
                  SimpleType: C
                    CodeReferenceElement: C
                      PsiElement(identifier)('C')
                  ArgumentList
                    PsiElement(()('(')
                    IntegerLiteral
                      PsiElement(integer)('0')
                    PsiElement())(')')
        PsiWhiteSpace('    ')
        PsiComment(comment)('// constructor is accessible in qualified_protected object')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: c
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('c')
          Parameters
            <empty list>
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: C(1).copy
              MethodCall
                ReferenceExpression: C
                  PsiElement(identifier)('C')
                ArgumentList
                  PsiElement(()('(')
                  IntegerLiteral
                    PsiElement(integer)('1')
                  PsiElement())(')')
              PsiElement(.)('.')
              PsiElement(identifier)('copy')
            ArgumentList
              PsiElement(()('(')
              IntegerLiteral
                PsiElement(integer)('2')
              PsiElement())(')')
        PsiWhiteSpace(' ')
        PsiComment(comment)('// apply and copy are accessible in qualified_protected object')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
