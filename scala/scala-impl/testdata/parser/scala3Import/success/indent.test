object Test:

  locally {
    var x = 0
    while x < 10 do x += 1
    val f = 10
    while
      x += 1
      x < 10
    do ()
  }

  def f(x: Int): Int =
    val y =
      if x > 0 then
        println("hello")
        22
      else
        println("world")
        33
    val y1 =
      if x > 0 then
        1
      else
        2
    val y2 =
      if (y > 0) && y < 0 then
        1
      else
        2
    extension (x: Int) def gt(y: Int) = x > y
    val y3 =
      if (1) max 10 gt 0

      then
        1
      else
        2
    if (true) println (2)
    val z = 22
    x + y + z
  end f

  def g = "!"

  val xs = List(1, 2, 3)

  xs.map {
    x =>
      val y = x * x
      y * y
  }

  val gg = (x: Int) ?=>
    val y = x + 1
    y

  xs.map {
    x =>
    val y = x * x
    y + y
  }

  xs.map { x =>
    val y = x * x
    if y >= 0 then
      val z = y + y
      println(z)
    y + 1
  }

  println(f(2) + g)

  (new Test2).foo
  (new Test3).foo

  var x = 1
  while
    x += 1
    val y = x
    println(y)
    x < 10
  do ()

  def sign(x: Int): Int =
    if (x > 0) 1
    else if (x < 0) - 1        // was: value - is not a member of Boolean
    else 0
  def lessPersuasively(x: Int): Unit =
    while (x < 0) - 42         // was: value - is not a member of Boolean
end Test

class Test2:
  self =>
  def foo(x: Int) =
    if x < 0 then throw
      val ex = new AssertionError()
      ex
    x

  val x =
    new Test2 {
      override def foo(x: Int) = 2
    }
  end x
end Test2

class Test3:
 self =>
  def foo = 1

import collection.mutable.HashMap

class Coder(words: List[String]):

  class Foo:
    println()
  end Foo

  class Bar

  (2 -> "ABC",  new ArrowAssoc('3') -> "DEF")

  private val mnemonics = Map(
      '2' -> "ABC", '3' -> "DEF", '4' -> "GHI", '5' -> "JKL",
      '6' -> "MNO", '7' -> "PQRS", '8' -> "TUV", '9' -> "WXYZ")

  ('1', "1") match
    case (digit, str) => true
    case _ => false

  ('1', "1") match
  case (digit, str) => true
  case _ => false

  try List(1, 2, 3) match
  case x :: xs => println(x)
  case Nil => println("Nil")
  catch
  case ex: java.io.IOException => println(ex)
  case ex: Throwable =>
    throw ex
  end try

  /** Invert the mnemonics map to give a map from chars 'A' ... 'Z' to '2' ... '9' */
  private val charCode0: Map[Char, Char] =
    mnemonics
      .withFilter {
        case (digit, str) => true
        case _ => false
      }
      .flatMap {
        case (digit, str) => str map (ltr => ltr -> digit)
      }
end Coder

object Test22:
  def foo: Int = 22
-----
ScalaFile
  ScObject: Test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test')
    ExtendsBlock
      ScTemplateBody
        PsiElement(:)(':')
        PsiWhiteSpace('\n\n  ')
        MethodCall
          ReferenceExpression: locally
            PsiElement(identifier)('locally')
          PsiWhiteSpace(' ')
          ArgumentList
            BlockExpression
              PsiElement({)('{')
              PsiWhiteSpace('\n    ')
              ScVariableDefinition: x
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(var)('var')
                PsiWhiteSpace(' ')
                ListOfPatterns
                  ReferencePattern: x
                    PsiElement(identifier)('x')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                IntegerLiteral
                  PsiElement(integer)('0')
              PsiWhiteSpace('\n    ')
              WhileStatement
                PsiElement(while)('while')
                PsiWhiteSpace(' ')
                InfixExpression
                  ReferenceExpression: x
                    PsiElement(identifier)('x')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: <
                    PsiElement(identifier)('<')
                  PsiWhiteSpace(' ')
                  IntegerLiteral
                    PsiElement(integer)('10')
                PsiWhiteSpace(' ')
                PsiElement(do)('do')
                PsiWhiteSpace(' ')
                InfixExpression
                  ReferenceExpression: x
                    PsiElement(identifier)('x')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: +=
                    PsiElement(identifier)('+=')
                  PsiWhiteSpace(' ')
                  IntegerLiteral
                    PsiElement(integer)('1')
              PsiWhiteSpace('\n    ')
              ScPatternDefinition: f
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(val)('val')
                PsiWhiteSpace(' ')
                ListOfPatterns
                  ReferencePattern: f
                    PsiElement(identifier)('f')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                IntegerLiteral
                  PsiElement(integer)('10')
              PsiWhiteSpace('\n    ')
              WhileStatement
                PsiElement(while)('while')
                BlockExpression
                  PsiWhiteSpace('\n      ')
                  InfixExpression
                    ReferenceExpression: x
                      PsiElement(identifier)('x')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: +=
                      PsiElement(identifier)('+=')
                    PsiWhiteSpace(' ')
                    IntegerLiteral
                      PsiElement(integer)('1')
                  PsiWhiteSpace('\n      ')
                  InfixExpression
                    ReferenceExpression: x
                      PsiElement(identifier)('x')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: <
                      PsiElement(identifier)('<')
                    PsiWhiteSpace(' ')
                    IntegerLiteral
                      PsiElement(integer)('10')
                PsiWhiteSpace('\n    ')
                PsiElement(do)('do')
                PsiWhiteSpace(' ')
                UnitExpression
                  PsiElement(()('(')
                  PsiElement())(')')
              PsiWhiteSpace('\n  ')
              PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: f
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('f')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: x
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Int
                    CodeReferenceElement: Int
                      PsiElement(identifier)('Int')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Int
            CodeReferenceElement: Int
              PsiElement(identifier)('Int')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          BlockExpression
            PsiWhiteSpace('\n    ')
            ScPatternDefinition: y
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              ListOfPatterns
                ReferencePattern: y
                  PsiElement(identifier)('y')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace('\n      ')
              IfStatement
                PsiElement(if)('if')
                PsiWhiteSpace(' ')
                InfixExpression
                  ReferenceExpression: x
                    PsiElement(identifier)('x')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: >
                    PsiElement(identifier)('>')
                  PsiWhiteSpace(' ')
                  IntegerLiteral
                    PsiElement(integer)('0')
                PsiWhiteSpace(' ')
                PsiElement(then)('then')
                BlockExpression
                  PsiWhiteSpace('\n        ')
                  MethodCall
                    ReferenceExpression: println
                      PsiElement(identifier)('println')
                    ArgumentList
                      PsiElement(()('(')
                      StringLiteral
                        PsiElement(string content)('"hello"')
                      PsiElement())(')')
                  PsiWhiteSpace('\n        ')
                  IntegerLiteral
                    PsiElement(integer)('22')
                PsiWhiteSpace('\n      ')
                PsiElement(else)('else')
                BlockExpression
                  PsiWhiteSpace('\n        ')
                  MethodCall
                    ReferenceExpression: println
                      PsiElement(identifier)('println')
                    ArgumentList
                      PsiElement(()('(')
                      StringLiteral
                        PsiElement(string content)('"world"')
                      PsiElement())(')')
                  PsiWhiteSpace('\n        ')
                  IntegerLiteral
                    PsiElement(integer)('33')
            PsiWhiteSpace('\n    ')
            ScPatternDefinition: y1
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              ListOfPatterns
                ReferencePattern: y1
                  PsiElement(identifier)('y1')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace('\n      ')
              IfStatement
                PsiElement(if)('if')
                PsiWhiteSpace(' ')
                InfixExpression
                  ReferenceExpression: x
                    PsiElement(identifier)('x')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: >
                    PsiElement(identifier)('>')
                  PsiWhiteSpace(' ')
                  IntegerLiteral
                    PsiElement(integer)('0')
                PsiWhiteSpace(' ')
                PsiElement(then)('then')
                PsiWhiteSpace('\n        ')
                IntegerLiteral
                  PsiElement(integer)('1')
                PsiWhiteSpace('\n      ')
                PsiElement(else)('else')
                PsiWhiteSpace('\n        ')
                IntegerLiteral
                  PsiElement(integer)('2')
            PsiWhiteSpace('\n    ')
            ScPatternDefinition: y2
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              ListOfPatterns
                ReferencePattern: y2
                  PsiElement(identifier)('y2')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace('\n      ')
              IfStatement
                PsiElement(if)('if')
                PsiWhiteSpace(' ')
                InfixExpression
                  ExpressionInParenthesis
                    PsiElement(()('(')
                    InfixExpression
                      ReferenceExpression: y
                        PsiElement(identifier)('y')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: >
                        PsiElement(identifier)('>')
                      PsiWhiteSpace(' ')
                      IntegerLiteral
                        PsiElement(integer)('0')
                    PsiElement())(')')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: &&
                    PsiElement(identifier)('&&')
                  PsiWhiteSpace(' ')
                  InfixExpression
                    ReferenceExpression: y
                      PsiElement(identifier)('y')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: <
                      PsiElement(identifier)('<')
                    PsiWhiteSpace(' ')
                    IntegerLiteral
                      PsiElement(integer)('0')
                PsiWhiteSpace(' ')
                PsiElement(then)('then')
                PsiWhiteSpace('\n        ')
                IntegerLiteral
                  PsiElement(integer)('1')
                PsiWhiteSpace('\n      ')
                PsiElement(else)('else')
                PsiWhiteSpace('\n        ')
                IntegerLiteral
                  PsiElement(integer)('2')
            PsiWhiteSpace('\n    ')
            Extension on Int
              PsiElement(extension)('extension')
              PsiWhiteSpace(' ')
              Parameters
                ParametersClause
                  PsiElement(()('(')
                  Parameter: x
                    AnnotationsList
                      <empty list>
                    Modifiers
                      <empty list>
                    PsiElement(identifier)('x')
                    PsiElement(:)(':')
                    PsiWhiteSpace(' ')
                    ParameterType
                      SimpleType: Int
                        CodeReferenceElement: Int
                          PsiElement(identifier)('Int')
                  PsiElement())(')')
              PsiWhiteSpace(' ')
              ScExtensionBody
                ScFunctionDefinition: gt
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(def)('def')
                  PsiWhiteSpace(' ')
                  PsiElement(identifier)('gt')
                  Parameters
                    ParametersClause
                      PsiElement(()('(')
                      Parameter: y
                        AnnotationsList
                          <empty list>
                        Modifiers
                          <empty list>
                        PsiElement(identifier)('y')
                        PsiElement(:)(':')
                        PsiWhiteSpace(' ')
                        ParameterType
                          SimpleType: Int
                            CodeReferenceElement: Int
                              PsiElement(identifier)('Int')
                      PsiElement())(')')
                  PsiWhiteSpace(' ')
                  PsiElement(=)('=')
                  PsiWhiteSpace(' ')
                  InfixExpression
                    ReferenceExpression: x
                      PsiElement(identifier)('x')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: >
                      PsiElement(identifier)('>')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: y
                      PsiElement(identifier)('y')
            PsiWhiteSpace('\n    ')
            ScPatternDefinition: y3
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              ListOfPatterns
                ReferencePattern: y3
                  PsiElement(identifier)('y3')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace('\n      ')
              IfStatement
                PsiElement(if)('if')
                PsiWhiteSpace(' ')
                InfixExpression
                  InfixExpression
                    ExpressionInParenthesis
                      PsiElement(()('(')
                      IntegerLiteral
                        PsiElement(integer)('1')
                      PsiElement())(')')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: max
                      PsiElement(identifier)('max')
                    PsiWhiteSpace(' ')
                    IntegerLiteral
                      PsiElement(integer)('10')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: gt
                    PsiElement(identifier)('gt')
                  PsiWhiteSpace(' ')
                  IntegerLiteral
                    PsiElement(integer)('0')
                PsiWhiteSpace('\n\n      ')
                PsiElement(then)('then')
                PsiWhiteSpace('\n        ')
                IntegerLiteral
                  PsiElement(integer)('1')
                PsiWhiteSpace('\n      ')
                PsiElement(else)('else')
                PsiWhiteSpace('\n        ')
                IntegerLiteral
                  PsiElement(integer)('2')
            PsiWhiteSpace('\n    ')
            IfStatement
              PsiElement(if)('if')
              PsiWhiteSpace(' ')
              PsiElement(()('(')
              BooleanLiteral
                PsiElement(true)('true')
              PsiElement())(')')
              PsiWhiteSpace(' ')
              MethodCall
                ReferenceExpression: println
                  PsiElement(identifier)('println')
                PsiWhiteSpace(' ')
                ArgumentList
                  PsiElement(()('(')
                  IntegerLiteral
                    PsiElement(integer)('2')
                  PsiElement())(')')
            PsiWhiteSpace('\n    ')
            ScPatternDefinition: z
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              ListOfPatterns
                ReferencePattern: z
                  PsiElement(identifier)('z')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              IntegerLiteral
                PsiElement(integer)('22')
            PsiWhiteSpace('\n    ')
            InfixExpression
              InfixExpression
                ReferenceExpression: x
                  PsiElement(identifier)('x')
                PsiWhiteSpace(' ')
                ReferenceExpression: +
                  PsiElement(identifier)('+')
                PsiWhiteSpace(' ')
                ReferenceExpression: y
                  PsiElement(identifier)('y')
              PsiWhiteSpace(' ')
              ReferenceExpression: +
                PsiElement(identifier)('+')
              PsiWhiteSpace(' ')
              ReferenceExpression: z
                PsiElement(identifier)('z')
          PsiWhiteSpace('\n  ')
          End: f
            PsiElement(end)('end')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('f')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: g
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('g')
          Parameters
            <empty list>
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          StringLiteral
            PsiElement(string content)('"!"')
        PsiWhiteSpace('\n\n  ')
        ScPatternDefinition: xs
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: xs
              PsiElement(identifier)('xs')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: List
              PsiElement(identifier)('List')
            ArgumentList
              PsiElement(()('(')
              IntegerLiteral
                PsiElement(integer)('1')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              IntegerLiteral
                PsiElement(integer)('2')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              IntegerLiteral
                PsiElement(integer)('3')
              PsiElement())(')')
        PsiWhiteSpace('\n\n  ')
        MethodCall
          ReferenceExpression: xs.map
            ReferenceExpression: xs
              PsiElement(identifier)('xs')
            PsiElement(.)('.')
            PsiElement(identifier)('map')
          PsiWhiteSpace(' ')
          ArgumentList
            BlockExpression
              PsiElement({)('{')
              PsiWhiteSpace('\n    ')
              FunctionExpression
                Parameters
                  ParametersClause
                    Parameter: x
                      PsiElement(identifier)('x')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace('\n      ')
                BlockOfExpressions
                  ScPatternDefinition: y
                    AnnotationsList
                      <empty list>
                    Modifiers
                      <empty list>
                    PsiElement(val)('val')
                    PsiWhiteSpace(' ')
                    ListOfPatterns
                      ReferencePattern: y
                        PsiElement(identifier)('y')
                    PsiWhiteSpace(' ')
                    PsiElement(=)('=')
                    PsiWhiteSpace(' ')
                    InfixExpression
                      ReferenceExpression: x
                        PsiElement(identifier)('x')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: *
                        PsiElement(identifier)('*')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: x
                        PsiElement(identifier)('x')
                  PsiWhiteSpace('\n      ')
                  InfixExpression
                    ReferenceExpression: y
                      PsiElement(identifier)('y')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: *
                      PsiElement(identifier)('*')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: y
                      PsiElement(identifier)('y')
              PsiWhiteSpace('\n  ')
              PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        ScPatternDefinition: gg
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: gg
              PsiElement(identifier)('gg')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          FunctionExpression
            Parameters
              ParametersClause
                PsiElement(()('(')
                Parameter: x
                  AnnotationsList
                    <empty list>
                  PsiElement(identifier)('x')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    SimpleType: Int
                      CodeReferenceElement: Int
                        PsiElement(identifier)('Int')
                PsiElement())(')')
            PsiWhiteSpace(' ')
            PsiElement(?=>)('?=>')
            BlockExpression
              PsiWhiteSpace('\n    ')
              ScPatternDefinition: y
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(val)('val')
                PsiWhiteSpace(' ')
                ListOfPatterns
                  ReferencePattern: y
                    PsiElement(identifier)('y')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                InfixExpression
                  ReferenceExpression: x
                    PsiElement(identifier)('x')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: +
                    PsiElement(identifier)('+')
                  PsiWhiteSpace(' ')
                  IntegerLiteral
                    PsiElement(integer)('1')
              PsiWhiteSpace('\n    ')
              ReferenceExpression: y
                PsiElement(identifier)('y')
        PsiWhiteSpace('\n\n  ')
        MethodCall
          ReferenceExpression: xs.map
            ReferenceExpression: xs
              PsiElement(identifier)('xs')
            PsiElement(.)('.')
            PsiElement(identifier)('map')
          PsiWhiteSpace(' ')
          ArgumentList
            BlockExpression
              PsiElement({)('{')
              PsiWhiteSpace('\n    ')
              FunctionExpression
                Parameters
                  ParametersClause
                    Parameter: x
                      PsiElement(identifier)('x')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace('\n    ')
                BlockOfExpressions
                  ScPatternDefinition: y
                    AnnotationsList
                      <empty list>
                    Modifiers
                      <empty list>
                    PsiElement(val)('val')
                    PsiWhiteSpace(' ')
                    ListOfPatterns
                      ReferencePattern: y
                        PsiElement(identifier)('y')
                    PsiWhiteSpace(' ')
                    PsiElement(=)('=')
                    PsiWhiteSpace(' ')
                    InfixExpression
                      ReferenceExpression: x
                        PsiElement(identifier)('x')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: *
                        PsiElement(identifier)('*')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: x
                        PsiElement(identifier)('x')
                  PsiWhiteSpace('\n    ')
                  InfixExpression
                    ReferenceExpression: y
                      PsiElement(identifier)('y')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: +
                      PsiElement(identifier)('+')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: y
                      PsiElement(identifier)('y')
              PsiWhiteSpace('\n  ')
              PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        MethodCall
          ReferenceExpression: xs.map
            ReferenceExpression: xs
              PsiElement(identifier)('xs')
            PsiElement(.)('.')
            PsiElement(identifier)('map')
          PsiWhiteSpace(' ')
          ArgumentList
            BlockExpression
              PsiElement({)('{')
              PsiWhiteSpace(' ')
              FunctionExpression
                Parameters
                  ParametersClause
                    Parameter: x
                      PsiElement(identifier)('x')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace('\n    ')
                BlockOfExpressions
                  ScPatternDefinition: y
                    AnnotationsList
                      <empty list>
                    Modifiers
                      <empty list>
                    PsiElement(val)('val')
                    PsiWhiteSpace(' ')
                    ListOfPatterns
                      ReferencePattern: y
                        PsiElement(identifier)('y')
                    PsiWhiteSpace(' ')
                    PsiElement(=)('=')
                    PsiWhiteSpace(' ')
                    InfixExpression
                      ReferenceExpression: x
                        PsiElement(identifier)('x')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: *
                        PsiElement(identifier)('*')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: x
                        PsiElement(identifier)('x')
                  PsiWhiteSpace('\n    ')
                  IfStatement
                    PsiElement(if)('if')
                    PsiWhiteSpace(' ')
                    InfixExpression
                      ReferenceExpression: y
                        PsiElement(identifier)('y')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: >=
                        PsiElement(identifier)('>=')
                      PsiWhiteSpace(' ')
                      IntegerLiteral
                        PsiElement(integer)('0')
                    PsiWhiteSpace(' ')
                    PsiElement(then)('then')
                    BlockExpression
                      PsiWhiteSpace('\n      ')
                      ScPatternDefinition: z
                        AnnotationsList
                          <empty list>
                        Modifiers
                          <empty list>
                        PsiElement(val)('val')
                        PsiWhiteSpace(' ')
                        ListOfPatterns
                          ReferencePattern: z
                            PsiElement(identifier)('z')
                        PsiWhiteSpace(' ')
                        PsiElement(=)('=')
                        PsiWhiteSpace(' ')
                        InfixExpression
                          ReferenceExpression: y
                            PsiElement(identifier)('y')
                          PsiWhiteSpace(' ')
                          ReferenceExpression: +
                            PsiElement(identifier)('+')
                          PsiWhiteSpace(' ')
                          ReferenceExpression: y
                            PsiElement(identifier)('y')
                      PsiWhiteSpace('\n      ')
                      MethodCall
                        ReferenceExpression: println
                          PsiElement(identifier)('println')
                        ArgumentList
                          PsiElement(()('(')
                          ReferenceExpression: z
                            PsiElement(identifier)('z')
                          PsiElement())(')')
                  PsiWhiteSpace('\n    ')
                  InfixExpression
                    ReferenceExpression: y
                      PsiElement(identifier)('y')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: +
                      PsiElement(identifier)('+')
                    PsiWhiteSpace(' ')
                    IntegerLiteral
                      PsiElement(integer)('1')
              PsiWhiteSpace('\n  ')
              PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        MethodCall
          ReferenceExpression: println
            PsiElement(identifier)('println')
          ArgumentList
            PsiElement(()('(')
            InfixExpression
              MethodCall
                ReferenceExpression: f
                  PsiElement(identifier)('f')
                ArgumentList
                  PsiElement(()('(')
                  IntegerLiteral
                    PsiElement(integer)('2')
                  PsiElement())(')')
              PsiWhiteSpace(' ')
              ReferenceExpression: +
                PsiElement(identifier)('+')
              PsiWhiteSpace(' ')
              ReferenceExpression: g
                PsiElement(identifier)('g')
            PsiElement())(')')
        PsiWhiteSpace('\n\n  ')
        ReferenceExpression: (new Test2).foo
          ExpressionInParenthesis
            PsiElement(()('(')
            ScNewTemplateDefinition: <anonymous>
              PsiElement(new)('new')
              PsiWhiteSpace(' ')
              ExtendsBlock
                TemplateParents
                  ConstructorInvocation
                    SimpleType: Test2
                      CodeReferenceElement: Test2
                        PsiElement(identifier)('Test2')
            PsiElement())(')')
          PsiElement(.)('.')
          PsiElement(identifier)('foo')
        PsiWhiteSpace('\n  ')
        ReferenceExpression: (new Test3).foo
          ExpressionInParenthesis
            PsiElement(()('(')
            ScNewTemplateDefinition: <anonymous>
              PsiElement(new)('new')
              PsiWhiteSpace(' ')
              ExtendsBlock
                TemplateParents
                  ConstructorInvocation
                    SimpleType: Test3
                      CodeReferenceElement: Test3
                        PsiElement(identifier)('Test3')
            PsiElement())(')')
          PsiElement(.)('.')
          PsiElement(identifier)('foo')
        PsiWhiteSpace('\n\n  ')
        ScVariableDefinition: x
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(var)('var')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: x
              PsiElement(identifier)('x')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          IntegerLiteral
            PsiElement(integer)('1')
        PsiWhiteSpace('\n  ')
        WhileStatement
          PsiElement(while)('while')
          BlockExpression
            PsiWhiteSpace('\n    ')
            InfixExpression
              ReferenceExpression: x
                PsiElement(identifier)('x')
              PsiWhiteSpace(' ')
              ReferenceExpression: +=
                PsiElement(identifier)('+=')
              PsiWhiteSpace(' ')
              IntegerLiteral
                PsiElement(integer)('1')
            PsiWhiteSpace('\n    ')
            ScPatternDefinition: y
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              ListOfPatterns
                ReferencePattern: y
                  PsiElement(identifier)('y')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              ReferenceExpression: x
                PsiElement(identifier)('x')
            PsiWhiteSpace('\n    ')
            MethodCall
              ReferenceExpression: println
                PsiElement(identifier)('println')
              ArgumentList
                PsiElement(()('(')
                ReferenceExpression: y
                  PsiElement(identifier)('y')
                PsiElement())(')')
            PsiWhiteSpace('\n    ')
            InfixExpression
              ReferenceExpression: x
                PsiElement(identifier)('x')
              PsiWhiteSpace(' ')
              ReferenceExpression: <
                PsiElement(identifier)('<')
              PsiWhiteSpace(' ')
              IntegerLiteral
                PsiElement(integer)('10')
          PsiWhiteSpace('\n  ')
          PsiElement(do)('do')
          PsiWhiteSpace(' ')
          UnitExpression
            PsiElement(()('(')
            PsiElement())(')')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: sign
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('sign')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: x
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Int
                    CodeReferenceElement: Int
                      PsiElement(identifier)('Int')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Int
            CodeReferenceElement: Int
              PsiElement(identifier)('Int')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace('\n    ')
          IfStatement
            PsiElement(if)('if')
            PsiWhiteSpace(' ')
            PsiElement(()('(')
            InfixExpression
              ReferenceExpression: x
                PsiElement(identifier)('x')
              PsiWhiteSpace(' ')
              ReferenceExpression: >
                PsiElement(identifier)('>')
              PsiWhiteSpace(' ')
              IntegerLiteral
                PsiElement(integer)('0')
            PsiElement())(')')
            PsiWhiteSpace(' ')
            IntegerLiteral
              PsiElement(integer)('1')
            PsiWhiteSpace('\n    ')
            PsiElement(else)('else')
            PsiWhiteSpace(' ')
            IfStatement
              PsiElement(if)('if')
              PsiWhiteSpace(' ')
              PsiElement(()('(')
              InfixExpression
                ReferenceExpression: x
                  PsiElement(identifier)('x')
                PsiWhiteSpace(' ')
                ReferenceExpression: <
                  PsiElement(identifier)('<')
                PsiWhiteSpace(' ')
                IntegerLiteral
                  PsiElement(integer)('0')
              PsiElement())(')')
              PsiWhiteSpace(' ')
              PrefixExpression
                ReferenceExpression: -
                  PsiElement(identifier)('-')
                PsiWhiteSpace(' ')
                IntegerLiteral
                  PsiElement(integer)('1')
              PsiWhiteSpace('        ')
              PsiComment(comment)('// was: value - is not a member of Boolean')
              PsiWhiteSpace('\n    ')
              PsiElement(else)('else')
              PsiWhiteSpace(' ')
              IntegerLiteral
                PsiElement(integer)('0')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: lessPersuasively
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('lessPersuasively')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: x
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Int
                    CodeReferenceElement: Int
                      PsiElement(identifier)('Int')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Unit
            CodeReferenceElement: Unit
              PsiElement(identifier)('Unit')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace('\n    ')
          WhileStatement
            PsiElement(while)('while')
            PsiWhiteSpace(' ')
            PsiElement(()('(')
            InfixExpression
              ReferenceExpression: x
                PsiElement(identifier)('x')
              PsiWhiteSpace(' ')
              ReferenceExpression: <
                PsiElement(identifier)('<')
              PsiWhiteSpace(' ')
              IntegerLiteral
                PsiElement(integer)('0')
            PsiElement())(')')
            PsiWhiteSpace(' ')
            PrefixExpression
              ReferenceExpression: -
                PsiElement(identifier)('-')
              PsiWhiteSpace(' ')
              IntegerLiteral
                PsiElement(integer)('42')
        PsiWhiteSpace('         ')
        PsiComment(comment)('// was: value - is not a member of Boolean')
        PsiWhiteSpace('\n')
        End: Test
          PsiElement(end)('end')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Test')
  PsiWhiteSpace('\n\n')
  ScClass: Test2
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test2')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    ExtendsBlock
      ScTemplateBody
        PsiElement(:)(':')
        PsiWhiteSpace('\n  ')
        SelfType: self
          PsiElement(identifier)('self')
          PsiWhiteSpace(' ')
          PsiElement(=>)('=>')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: foo
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('foo')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: x
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Int
                    CodeReferenceElement: Int
                      PsiElement(identifier)('Int')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          BlockExpression
            PsiWhiteSpace('\n    ')
            IfStatement
              PsiElement(if)('if')
              PsiWhiteSpace(' ')
              InfixExpression
                ReferenceExpression: x
                  PsiElement(identifier)('x')
                PsiWhiteSpace(' ')
                ReferenceExpression: <
                  PsiElement(identifier)('<')
                PsiWhiteSpace(' ')
                IntegerLiteral
                  PsiElement(integer)('0')
              PsiWhiteSpace(' ')
              PsiElement(then)('then')
              PsiWhiteSpace(' ')
              ThrowStatement
                PsiElement(throw)('throw')
                BlockExpression
                  PsiWhiteSpace('\n      ')
                  ScPatternDefinition: ex
                    AnnotationsList
                      <empty list>
                    Modifiers
                      <empty list>
                    PsiElement(val)('val')
                    PsiWhiteSpace(' ')
                    ListOfPatterns
                      ReferencePattern: ex
                        PsiElement(identifier)('ex')
                    PsiWhiteSpace(' ')
                    PsiElement(=)('=')
                    PsiWhiteSpace(' ')
                    ScNewTemplateDefinition: <anonymous>
                      PsiElement(new)('new')
                      PsiWhiteSpace(' ')
                      ExtendsBlock
                        TemplateParents
                          ConstructorInvocation
                            SimpleType: AssertionError
                              CodeReferenceElement: AssertionError
                                PsiElement(identifier)('AssertionError')
                            ArgumentList
                              PsiElement(()('(')
                              PsiElement())(')')
                  PsiWhiteSpace('\n      ')
                  ReferenceExpression: ex
                    PsiElement(identifier)('ex')
            PsiWhiteSpace('\n    ')
            ReferenceExpression: x
              PsiElement(identifier)('x')
        PsiWhiteSpace('\n\n  ')
        ScPatternDefinition: x
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: x
              PsiElement(identifier)('x')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace('\n    ')
          ScNewTemplateDefinition: <anonymous>
            PsiElement(new)('new')
            PsiWhiteSpace(' ')
            ExtendsBlock
              TemplateParents
                ConstructorInvocation
                  SimpleType: Test2
                    CodeReferenceElement: Test2
                      PsiElement(identifier)('Test2')
              PsiWhiteSpace(' ')
              ScTemplateBody
                PsiElement({)('{')
                PsiWhiteSpace('\n      ')
                ScFunctionDefinition: foo
                  AnnotationsList
                    <empty list>
                  Modifiers
                    PsiElement(override)('override')
                  PsiWhiteSpace(' ')
                  PsiElement(def)('def')
                  PsiWhiteSpace(' ')
                  PsiElement(identifier)('foo')
                  Parameters
                    ParametersClause
                      PsiElement(()('(')
                      Parameter: x
                        AnnotationsList
                          <empty list>
                        Modifiers
                          <empty list>
                        PsiElement(identifier)('x')
                        PsiElement(:)(':')
                        PsiWhiteSpace(' ')
                        ParameterType
                          SimpleType: Int
                            CodeReferenceElement: Int
                              PsiElement(identifier)('Int')
                      PsiElement())(')')
                  PsiWhiteSpace(' ')
                  PsiElement(=)('=')
                  PsiWhiteSpace(' ')
                  IntegerLiteral
                    PsiElement(integer)('2')
                PsiWhiteSpace('\n    ')
                PsiElement(})('}')
          PsiWhiteSpace('\n  ')
          End: x
            PsiElement(end)('end')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('x')
        PsiWhiteSpace('\n')
        End: Test2
          PsiElement(end)('end')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Test2')
  PsiWhiteSpace('\n\n')
  ScClass: Test3
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test3')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    ExtendsBlock
      ScTemplateBody
        PsiElement(:)(':')
        PsiWhiteSpace('\n ')
        SelfType: self
          PsiElement(identifier)('self')
          PsiWhiteSpace(' ')
          PsiElement(=>)('=>')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: foo
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('foo')
          Parameters
            <empty list>
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          IntegerLiteral
            PsiElement(integer)('1')
  PsiWhiteSpace('\n\n')
  ScImportStatement
    PsiElement(import)('import')
    PsiWhiteSpace(' ')
    ImportExpression
      CodeReferenceElement: collection.mutable.HashMap
        CodeReferenceElement: collection.mutable
          CodeReferenceElement: collection
            PsiElement(identifier)('collection')
          PsiElement(.)('.')
          PsiElement(identifier)('mutable')
        PsiElement(.)('.')
        PsiElement(identifier)('HashMap')
  PsiWhiteSpace('\n\n')
  ScClass: Coder
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Coder')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        ParametersClause
          PsiElement(()('(')
          ClassParameter: words
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(identifier)('words')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            ParameterType
              ParametrizedType: List[String]
                SimpleType: List
                  CodeReferenceElement: List
                    PsiElement(identifier)('List')
                TypeArgumentsList
                  PsiElement([)('[')
                  SimpleType: String
                    CodeReferenceElement: String
                      PsiElement(identifier)('String')
                  PsiElement(])(']')
          PsiElement())(')')
    ExtendsBlock
      ScTemplateBody
        PsiElement(:)(':')
        PsiWhiteSpace('\n\n  ')
        ScClass: Foo
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(class)('class')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Foo')
          PrimaryConstructor
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            Parameters
              <empty list>
          ExtendsBlock
            ScTemplateBody
              PsiElement(:)(':')
              PsiWhiteSpace('\n    ')
              MethodCall
                ReferenceExpression: println
                  PsiElement(identifier)('println')
                ArgumentList
                  PsiElement(()('(')
                  PsiElement())(')')
              PsiWhiteSpace('\n  ')
              End: Foo
                PsiElement(end)('end')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('Foo')
        PsiWhiteSpace('\n\n  ')
        ScClass: Bar
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(class)('class')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Bar')
          PrimaryConstructor
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            Parameters
              <empty list>
          ExtendsBlock
            <empty list>
        PsiWhiteSpace('\n\n  ')
        Tuple
          PsiElement(()('(')
          InfixExpression
            IntegerLiteral
              PsiElement(integer)('2')
            PsiWhiteSpace(' ')
            ReferenceExpression: ->
              PsiElement(identifier)('->')
            PsiWhiteSpace(' ')
            StringLiteral
              PsiElement(string content)('"ABC"')
          PsiElement(,)(',')
          PsiWhiteSpace('  ')
          InfixExpression
            ScNewTemplateDefinition: <anonymous>
              PsiElement(new)('new')
              PsiWhiteSpace(' ')
              ExtendsBlock
                TemplateParents
                  ConstructorInvocation
                    SimpleType: ArrowAssoc
                      CodeReferenceElement: ArrowAssoc
                        PsiElement(identifier)('ArrowAssoc')
                    ArgumentList
                      PsiElement(()('(')
                      CharLiteral
                        PsiElement(Character)(''3'')
                      PsiElement())(')')
            PsiWhiteSpace(' ')
            ReferenceExpression: ->
              PsiElement(identifier)('->')
            PsiWhiteSpace(' ')
            StringLiteral
              PsiElement(string content)('"DEF"')
          PsiElement())(')')
        PsiWhiteSpace('\n\n  ')
        ScPatternDefinition: mnemonics
          AnnotationsList
            <empty list>
          Modifiers
            AccessModifier
              PsiElement(private)('private')
          PsiWhiteSpace(' ')
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: mnemonics
              PsiElement(identifier)('mnemonics')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: Map
              PsiElement(identifier)('Map')
            ArgumentList
              PsiElement(()('(')
              PsiWhiteSpace('\n      ')
              InfixExpression
                CharLiteral
                  PsiElement(Character)(''2'')
                PsiWhiteSpace(' ')
                ReferenceExpression: ->
                  PsiElement(identifier)('->')
                PsiWhiteSpace(' ')
                StringLiteral
                  PsiElement(string content)('"ABC"')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              InfixExpression
                CharLiteral
                  PsiElement(Character)(''3'')
                PsiWhiteSpace(' ')
                ReferenceExpression: ->
                  PsiElement(identifier)('->')
                PsiWhiteSpace(' ')
                StringLiteral
                  PsiElement(string content)('"DEF"')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              InfixExpression
                CharLiteral
                  PsiElement(Character)(''4'')
                PsiWhiteSpace(' ')
                ReferenceExpression: ->
                  PsiElement(identifier)('->')
                PsiWhiteSpace(' ')
                StringLiteral
                  PsiElement(string content)('"GHI"')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              InfixExpression
                CharLiteral
                  PsiElement(Character)(''5'')
                PsiWhiteSpace(' ')
                ReferenceExpression: ->
                  PsiElement(identifier)('->')
                PsiWhiteSpace(' ')
                StringLiteral
                  PsiElement(string content)('"JKL"')
              PsiElement(,)(',')
              PsiWhiteSpace('\n      ')
              InfixExpression
                CharLiteral
                  PsiElement(Character)(''6'')
                PsiWhiteSpace(' ')
                ReferenceExpression: ->
                  PsiElement(identifier)('->')
                PsiWhiteSpace(' ')
                StringLiteral
                  PsiElement(string content)('"MNO"')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              InfixExpression
                CharLiteral
                  PsiElement(Character)(''7'')
                PsiWhiteSpace(' ')
                ReferenceExpression: ->
                  PsiElement(identifier)('->')
                PsiWhiteSpace(' ')
                StringLiteral
                  PsiElement(string content)('"PQRS"')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              InfixExpression
                CharLiteral
                  PsiElement(Character)(''8'')
                PsiWhiteSpace(' ')
                ReferenceExpression: ->
                  PsiElement(identifier)('->')
                PsiWhiteSpace(' ')
                StringLiteral
                  PsiElement(string content)('"TUV"')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              InfixExpression
                CharLiteral
                  PsiElement(Character)(''9'')
                PsiWhiteSpace(' ')
                ReferenceExpression: ->
                  PsiElement(identifier)('->')
                PsiWhiteSpace(' ')
                StringLiteral
                  PsiElement(string content)('"WXYZ"')
              PsiElement())(')')
        PsiWhiteSpace('\n\n  ')
        MatchStatement
          Tuple
            PsiElement(()('(')
            CharLiteral
              PsiElement(Character)(''1'')
            PsiElement(,)(',')
            PsiWhiteSpace(' ')
            StringLiteral
              PsiElement(string content)('"1"')
            PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(match)('match')
          PsiWhiteSpace('\n    ')
          CaseClauses
            CaseClause
              PsiElement(case)('case')
              PsiWhiteSpace(' ')
              TuplePattern
                PsiElement(()('(')
                ArgumentPatterns
                  ReferencePattern: digit
                    PsiElement(identifier)('digit')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  ReferencePattern: str
                    PsiElement(identifier)('str')
                PsiElement())(')')
              PsiWhiteSpace(' ')
              PsiElement(=>)('=>')
              PsiWhiteSpace(' ')
              BlockOfExpressions
                BooleanLiteral
                  PsiElement(true)('true')
            PsiWhiteSpace('\n    ')
            CaseClause
              PsiElement(case)('case')
              PsiWhiteSpace(' ')
              WildcardPattern
                PsiElement(_)('_')
              PsiWhiteSpace(' ')
              PsiElement(=>)('=>')
              PsiWhiteSpace(' ')
              BlockOfExpressions
                BooleanLiteral
                  PsiElement(false)('false')
        PsiWhiteSpace('\n\n  ')
        MatchStatement
          Tuple
            PsiElement(()('(')
            CharLiteral
              PsiElement(Character)(''1'')
            PsiElement(,)(',')
            PsiWhiteSpace(' ')
            StringLiteral
              PsiElement(string content)('"1"')
            PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(match)('match')
          PsiWhiteSpace('\n  ')
          CaseClauses
            CaseClause
              PsiElement(case)('case')
              PsiWhiteSpace(' ')
              TuplePattern
                PsiElement(()('(')
                ArgumentPatterns
                  ReferencePattern: digit
                    PsiElement(identifier)('digit')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  ReferencePattern: str
                    PsiElement(identifier)('str')
                PsiElement())(')')
              PsiWhiteSpace(' ')
              PsiElement(=>)('=>')
              PsiWhiteSpace(' ')
              BlockOfExpressions
                BooleanLiteral
                  PsiElement(true)('true')
            PsiWhiteSpace('\n  ')
            CaseClause
              PsiElement(case)('case')
              PsiWhiteSpace(' ')
              WildcardPattern
                PsiElement(_)('_')
              PsiWhiteSpace(' ')
              PsiElement(=>)('=>')
              PsiWhiteSpace(' ')
              BlockOfExpressions
                BooleanLiteral
                  PsiElement(false)('false')
        PsiWhiteSpace('\n\n  ')
        TryStatement
          PsiElement(try)('try')
          PsiWhiteSpace(' ')
          MatchStatement
            MethodCall
              ReferenceExpression: List
                PsiElement(identifier)('List')
              ArgumentList
                PsiElement(()('(')
                IntegerLiteral
                  PsiElement(integer)('1')
                PsiElement(,)(',')
                PsiWhiteSpace(' ')
                IntegerLiteral
                  PsiElement(integer)('2')
                PsiElement(,)(',')
                PsiWhiteSpace(' ')
                IntegerLiteral
                  PsiElement(integer)('3')
                PsiElement())(')')
            PsiWhiteSpace(' ')
            PsiElement(match)('match')
            PsiWhiteSpace('\n  ')
            CaseClauses
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                InfixPattern
                  ReferencePattern: x
                    PsiElement(identifier)('x')
                  PsiWhiteSpace(' ')
                  CodeReferenceElement: ::
                    PsiElement(identifier)('::')
                  PsiWhiteSpace(' ')
                  ReferencePattern: xs
                    PsiElement(identifier)('xs')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                BlockOfExpressions
                  MethodCall
                    ReferenceExpression: println
                      PsiElement(identifier)('println')
                    ArgumentList
                      PsiElement(()('(')
                      ReferenceExpression: x
                        PsiElement(identifier)('x')
                      PsiElement())(')')
              PsiWhiteSpace('\n  ')
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                StableElementPattern
                  ReferenceExpression: Nil
                    PsiElement(identifier)('Nil')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                BlockOfExpressions
                  MethodCall
                    ReferenceExpression: println
                      PsiElement(identifier)('println')
                    ArgumentList
                      PsiElement(()('(')
                      StringLiteral
                        PsiElement(string content)('"Nil"')
                      PsiElement())(')')
          PsiWhiteSpace('\n  ')
          CatchBlock
            PsiElement(catch)('catch')
            PsiWhiteSpace('\n  ')
            CaseClauses
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                Scala3 TypedPattern
                  ReferencePattern: ex
                    PsiElement(identifier)('ex')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  TypePattern
                    SimpleType: java.io.IOException
                      CodeReferenceElement: java.io.IOException
                        CodeReferenceElement: java.io
                          CodeReferenceElement: java
                            PsiElement(identifier)('java')
                          PsiElement(.)('.')
                          PsiElement(identifier)('io')
                        PsiElement(.)('.')
                        PsiElement(identifier)('IOException')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                BlockOfExpressions
                  MethodCall
                    ReferenceExpression: println
                      PsiElement(identifier)('println')
                    ArgumentList
                      PsiElement(()('(')
                      ReferenceExpression: ex
                        PsiElement(identifier)('ex')
                      PsiElement())(')')
              PsiWhiteSpace('\n  ')
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                Scala3 TypedPattern
                  ReferencePattern: ex
                    PsiElement(identifier)('ex')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  TypePattern
                    SimpleType: Throwable
                      CodeReferenceElement: Throwable
                        PsiElement(identifier)('Throwable')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace('\n    ')
                BlockOfExpressions
                  ThrowStatement
                    PsiElement(throw)('throw')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: ex
                      PsiElement(identifier)('ex')
          PsiWhiteSpace('\n  ')
          End: try
            PsiElement(end)('end')
            PsiWhiteSpace(' ')
            PsiElement(try)('try')
        PsiWhiteSpace('\n\n  ')
        ScPatternDefinition: charCode0
          DocComment
            ScPsiDocToken(DOC_COMMENT_START)('/**')
            ScDocParagraph
              ScPsiDocToken(DOC_WHITESPACE)(' ')
              ScPsiDocToken(DOC_COMMENT_DATA)('Invert the mnemonics map to give a map from chars 'A' ... 'Z' to '2' ... '9'')
              ScPsiDocToken(DOC_WHITESPACE)(' ')
            ScPsiDocToken(DOC_COMMENT_END)('*/')
          PsiWhiteSpace('\n  ')
          AnnotationsList
            <empty list>
          Modifiers
            AccessModifier
              PsiElement(private)('private')
          PsiWhiteSpace(' ')
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: charCode0
              PsiElement(identifier)('charCode0')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: Map[Char, Char]
            SimpleType: Map
              CodeReferenceElement: Map
                PsiElement(identifier)('Map')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: Char
                CodeReferenceElement: Char
                  PsiElement(identifier)('Char')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              SimpleType: Char
                CodeReferenceElement: Char
                  PsiElement(identifier)('Char')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace('\n    ')
          MethodCall
            ReferenceExpression: mnemonics
      .withFilter {
        case (digit, str) => true
        case _ => false
      }
      .flatMap
              MethodCall
                ReferenceExpression: mnemonics
      .withFilter
                  ReferenceExpression: mnemonics
                    PsiElement(identifier)('mnemonics')
                  PsiWhiteSpace('\n      ')
                  PsiElement(.)('.')
                  PsiElement(identifier)('withFilter')
                PsiWhiteSpace(' ')
                ArgumentList
                  BlockExpression
                    PsiElement({)('{')
                    PsiWhiteSpace('\n        ')
                    CaseClauses
                      CaseClause
                        PsiElement(case)('case')
                        PsiWhiteSpace(' ')
                        TuplePattern
                          PsiElement(()('(')
                          ArgumentPatterns
                            ReferencePattern: digit
                              PsiElement(identifier)('digit')
                            PsiElement(,)(',')
                            PsiWhiteSpace(' ')
                            ReferencePattern: str
                              PsiElement(identifier)('str')
                          PsiElement())(')')
                        PsiWhiteSpace(' ')
                        PsiElement(=>)('=>')
                        PsiWhiteSpace(' ')
                        BlockOfExpressions
                          BooleanLiteral
                            PsiElement(true)('true')
                      PsiWhiteSpace('\n        ')
                      CaseClause
                        PsiElement(case)('case')
                        PsiWhiteSpace(' ')
                        WildcardPattern
                          PsiElement(_)('_')
                        PsiWhiteSpace(' ')
                        PsiElement(=>)('=>')
                        PsiWhiteSpace(' ')
                        BlockOfExpressions
                          BooleanLiteral
                            PsiElement(false)('false')
                    PsiWhiteSpace('\n      ')
                    PsiElement(})('}')
              PsiWhiteSpace('\n      ')
              PsiElement(.)('.')
              PsiElement(identifier)('flatMap')
            PsiWhiteSpace(' ')
            ArgumentList
              BlockExpression
                PsiElement({)('{')
                PsiWhiteSpace('\n        ')
                CaseClauses
                  CaseClause
                    PsiElement(case)('case')
                    PsiWhiteSpace(' ')
                    TuplePattern
                      PsiElement(()('(')
                      ArgumentPatterns
                        ReferencePattern: digit
                          PsiElement(identifier)('digit')
                        PsiElement(,)(',')
                        PsiWhiteSpace(' ')
                        ReferencePattern: str
                          PsiElement(identifier)('str')
                      PsiElement())(')')
                    PsiWhiteSpace(' ')
                    PsiElement(=>)('=>')
                    PsiWhiteSpace(' ')
                    BlockOfExpressions
                      InfixExpression
                        ReferenceExpression: str
                          PsiElement(identifier)('str')
                        PsiWhiteSpace(' ')
                        ReferenceExpression: map
                          PsiElement(identifier)('map')
                        PsiWhiteSpace(' ')
                        ExpressionInParenthesis
                          PsiElement(()('(')
                          FunctionExpression
                            Parameters
                              ParametersClause
                                Parameter: ltr
                                  PsiElement(identifier)('ltr')
                            PsiWhiteSpace(' ')
                            PsiElement(=>)('=>')
                            PsiWhiteSpace(' ')
                            InfixExpression
                              ReferenceExpression: ltr
                                PsiElement(identifier)('ltr')
                              PsiWhiteSpace(' ')
                              ReferenceExpression: ->
                                PsiElement(identifier)('->')
                              PsiWhiteSpace(' ')
                              ReferenceExpression: digit
                                PsiElement(identifier)('digit')
                          PsiElement())(')')
                PsiWhiteSpace('\n      ')
                PsiElement(})('}')
        PsiWhiteSpace('\n')
        End: Coder
          PsiElement(end)('end')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Coder')
  PsiWhiteSpace('\n\n')
  ScObject: Test22
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test22')
    ExtendsBlock
      ScTemplateBody
        PsiElement(:)(':')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: foo
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('foo')
          Parameters
            <empty list>
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Int
            CodeReferenceElement: Int
              PsiElement(identifier)('Int')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          IntegerLiteral
            PsiElement(integer)('22')
