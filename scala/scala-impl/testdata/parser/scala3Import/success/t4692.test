class TypeAliasVsImplicitTest {

    class For[m[_], a](x: m[a]) {
       def map[b](y: a => b): m[b] = throw new Error
    }
    implicit def toFor[m[_], a](x: m[a]): For[m, a] = new For[m, a](x)

    trait MyList[A]

    def foo(xs: MyList[Int]) = xs.map(x => x) // compiles fine.

    type MyListOfInt = MyList[Int]
    def bar(xs: MyListOfInt) = xs.map(x => x) // doesn't compile: value map is not a member of TypeAliasVsImplicitTest.this.MyListOfInt
}

// minimal case -- the bug was in type constructor inference where `xs.type` needed to be widened *and* dealiased
// in 2.8.1 implicit conversion search started with a widened type, so that combo never came up
// object Test {
//   class For[m[_], a](x: m[a])
//   def toFor[m[_], a](x: m[a]): For[m, a] = new For[m, a](x)
//
//   trait MyList[A]
//   type MyListOfInt = MyList[Int]
//
//   val xs: MyListOfInt = error("")
//   toFor(xs : xs.type)
// }
-----
ScalaFile
  ScClass: TypeAliasVsImplicitTest
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('TypeAliasVsImplicitTest')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n\n    ')
        ScClass: For
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(class)('class')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('For')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: m
              PsiElement(identifier)('m')
              TypeParameterClause
                PsiElement([)('[')
                TypeParameter: _
                  PsiElement(_)('_')
                PsiElement(])(']')
            PsiElement(,)(',')
            PsiWhiteSpace(' ')
            TypeParameter: a
              PsiElement(identifier)('a')
            PsiElement(])(']')
          PrimaryConstructor
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            Parameters
              ParametersClause
                PsiElement(()('(')
                ClassParameter: x
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(identifier)('x')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    ParametrizedType: m[a]
                      SimpleType: m
                        CodeReferenceElement: m
                          PsiElement(identifier)('m')
                      TypeArgumentsList
                        PsiElement([)('[')
                        SimpleType: a
                          CodeReferenceElement: a
                            PsiElement(identifier)('a')
                        PsiElement(])(']')
                PsiElement())(')')
          PsiWhiteSpace(' ')
          ExtendsBlock
            ScTemplateBody
              PsiElement({)('{')
              PsiWhiteSpace('\n       ')
              ScFunctionDefinition: map
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(def)('def')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('map')
                TypeParameterClause
                  PsiElement([)('[')
                  TypeParameter: b
                    PsiElement(identifier)('b')
                  PsiElement(])(']')
                Parameters
                  ParametersClause
                    PsiElement(()('(')
                    Parameter: y
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(identifier)('y')
                      PsiElement(:)(':')
                      PsiWhiteSpace(' ')
                      ParameterType
                        FunctionalType: a => b
                          SimpleType: a
                            CodeReferenceElement: a
                              PsiElement(identifier)('a')
                          PsiWhiteSpace(' ')
                          PsiElement(=>)('=>')
                          PsiWhiteSpace(' ')
                          SimpleType: b
                            CodeReferenceElement: b
                              PsiElement(identifier)('b')
                    PsiElement())(')')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParametrizedType: m[b]
                  SimpleType: m
                    CodeReferenceElement: m
                      PsiElement(identifier)('m')
                  TypeArgumentsList
                    PsiElement([)('[')
                    SimpleType: b
                      CodeReferenceElement: b
                        PsiElement(identifier)('b')
                    PsiElement(])(']')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                ThrowStatement
                  PsiElement(throw)('throw')
                  PsiWhiteSpace(' ')
                  ScNewTemplateDefinition: <anonymous>
                    PsiElement(new)('new')
                    PsiWhiteSpace(' ')
                    ExtendsBlock
                      TemplateParents
                        ConstructorInvocation
                          SimpleType: Error
                            CodeReferenceElement: Error
                              PsiElement(identifier)('Error')
              PsiWhiteSpace('\n    ')
              PsiElement(})('}')
        PsiWhiteSpace('\n    ')
        ScFunctionDefinition: toFor
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(implicit)('implicit')
          PsiWhiteSpace(' ')
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('toFor')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: m
              PsiElement(identifier)('m')
              TypeParameterClause
                PsiElement([)('[')
                TypeParameter: _
                  PsiElement(_)('_')
                PsiElement(])(']')
            PsiElement(,)(',')
            PsiWhiteSpace(' ')
            TypeParameter: a
              PsiElement(identifier)('a')
            PsiElement(])(']')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: x
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  ParametrizedType: m[a]
                    SimpleType: m
                      CodeReferenceElement: m
                        PsiElement(identifier)('m')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: a
                        CodeReferenceElement: a
                          PsiElement(identifier)('a')
                      PsiElement(])(']')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: For[m, a]
            SimpleType: For
              CodeReferenceElement: For
                PsiElement(identifier)('For')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: m
                CodeReferenceElement: m
                  PsiElement(identifier)('m')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              SimpleType: a
                CodeReferenceElement: a
                  PsiElement(identifier)('a')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ScNewTemplateDefinition: <anonymous>
            PsiElement(new)('new')
            PsiWhiteSpace(' ')
            ExtendsBlock
              TemplateParents
                ConstructorInvocation
                  ParametrizedType: For[m, a]
                    SimpleType: For
                      CodeReferenceElement: For
                        PsiElement(identifier)('For')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: m
                        CodeReferenceElement: m
                          PsiElement(identifier)('m')
                      PsiElement(,)(',')
                      PsiWhiteSpace(' ')
                      SimpleType: a
                        CodeReferenceElement: a
                          PsiElement(identifier)('a')
                      PsiElement(])(']')
                  ArgumentList
                    PsiElement(()('(')
                    ReferenceExpression: x
                      PsiElement(identifier)('x')
                    PsiElement())(')')
        PsiWhiteSpace('\n\n    ')
        ScTrait: MyList
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(trait)('trait')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('MyList')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: A
              PsiElement(identifier)('A')
            PsiElement(])(']')
          ExtendsBlock
            <empty list>
        PsiWhiteSpace('\n\n    ')
        ScFunctionDefinition: foo
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('foo')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: xs
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('xs')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  ParametrizedType: MyList[Int]
                    SimpleType: MyList
                      CodeReferenceElement: MyList
                        PsiElement(identifier)('MyList')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: Int
                        CodeReferenceElement: Int
                          PsiElement(identifier)('Int')
                      PsiElement(])(']')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: xs.map
              ReferenceExpression: xs
                PsiElement(identifier)('xs')
              PsiElement(.)('.')
              PsiElement(identifier)('map')
            ArgumentList
              PsiElement(()('(')
              FunctionExpression
                Parameters
                  ParametersClause
                    Parameter: x
                      PsiElement(identifier)('x')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                ReferenceExpression: x
                  PsiElement(identifier)('x')
              PsiElement())(')')
        PsiWhiteSpace(' ')
        PsiComment(comment)('// compiles fine.')
        PsiWhiteSpace('\n\n    ')
        ScTypeAliasDefinition: MyListOfInt
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('MyListOfInt')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ParametrizedType: MyList[Int]
            SimpleType: MyList
              CodeReferenceElement: MyList
                PsiElement(identifier)('MyList')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: Int
                CodeReferenceElement: Int
                  PsiElement(identifier)('Int')
              PsiElement(])(']')
        PsiWhiteSpace('\n    ')
        ScFunctionDefinition: bar
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('bar')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: xs
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('xs')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: MyListOfInt
                    CodeReferenceElement: MyListOfInt
                      PsiElement(identifier)('MyListOfInt')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: xs.map
              ReferenceExpression: xs
                PsiElement(identifier)('xs')
              PsiElement(.)('.')
              PsiElement(identifier)('map')
            ArgumentList
              PsiElement(()('(')
              FunctionExpression
                Parameters
                  ParametersClause
                    Parameter: x
                      PsiElement(identifier)('x')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                ReferenceExpression: x
                  PsiElement(identifier)('x')
              PsiElement())(')')
        PsiWhiteSpace(' ')
        PsiComment(comment)('// doesn't compile: value map is not a member of TypeAliasVsImplicitTest.this.MyListOfInt')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  PsiComment(comment)('// minimal case -- the bug was in type constructor inference where `xs.type` needed to be widened *and* dealiased')
  PsiWhiteSpace('\n')
  PsiComment(comment)('// in 2.8.1 implicit conversion search started with a widened type, so that combo never came up')
  PsiWhiteSpace('\n')
  PsiComment(comment)('// object Test {')
  PsiWhiteSpace('\n')
  PsiComment(comment)('//   class For[m[_], a](x: m[a])')
  PsiWhiteSpace('\n')
  PsiComment(comment)('//   def toFor[m[_], a](x: m[a]): For[m, a] = new For[m, a](x)')
  PsiWhiteSpace('\n')
  PsiComment(comment)('//')
  PsiWhiteSpace('\n')
  PsiComment(comment)('//   trait MyList[A]')
  PsiWhiteSpace('\n')
  PsiComment(comment)('//   type MyListOfInt = MyList[Int]')
  PsiWhiteSpace('\n')
  PsiComment(comment)('//')
  PsiWhiteSpace('\n')
  PsiComment(comment)('//   val xs: MyListOfInt = error("")')
  PsiWhiteSpace('\n')
  PsiComment(comment)('//   toFor(xs : xs.type)')
  PsiWhiteSpace('\n')
  PsiComment(comment)('// }')
