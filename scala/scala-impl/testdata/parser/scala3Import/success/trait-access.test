package foo {
  protected[foo] trait A {
    def a: Unit = {}
  }
  class B extends A
}
trait C extends foo.B
object Test {
  def test: Unit = {
    val c = new C {}
    c.a
  }
}
-----
ScalaFile
  ScPackaging
    PsiElement(package)('package')
    PsiWhiteSpace(' ')
    CodeReferenceElement: foo
      PsiElement(identifier)('foo')
    PsiWhiteSpace(' ')
    PsiElement({)('{')
    PsiWhiteSpace('\n  ')
    ScTrait: A
      AnnotationsList
        <empty list>
      Modifiers
        AccessModifier
          PsiElement(protected)('protected')
          PsiElement([)('[')
          PsiElement(identifier)('foo')
          PsiElement(])(']')
      PsiWhiteSpace(' ')
      PsiElement(trait)('trait')
      PsiWhiteSpace(' ')
      PsiElement(identifier)('A')
      PsiWhiteSpace(' ')
      ExtendsBlock
        ScTemplateBody
          PsiElement({)('{')
          PsiWhiteSpace('\n    ')
          ScFunctionDefinition: a
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(def)('def')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('a')
            Parameters
              <empty list>
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            SimpleType: Unit
              CodeReferenceElement: Unit
                PsiElement(identifier)('Unit')
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace(' ')
            BlockExpression
              PsiElement({)('{')
              PsiElement(})('}')
          PsiWhiteSpace('\n  ')
          PsiElement(})('}')
    PsiWhiteSpace('\n  ')
    ScClass: B
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      PsiElement(class)('class')
      PsiWhiteSpace(' ')
      PsiElement(identifier)('B')
      PrimaryConstructor
        AnnotationsList
          <empty list>
        Modifiers
          <empty list>
        Parameters
          <empty list>
      PsiWhiteSpace(' ')
      ExtendsBlock
        PsiElement(extends)('extends')
        PsiWhiteSpace(' ')
        TemplateParents
          ConstructorInvocation
            SimpleType: A
              CodeReferenceElement: A
                PsiElement(identifier)('A')
    PsiWhiteSpace('\n')
    PsiElement(})('}')
  PsiWhiteSpace('\n')
  ScTrait: C
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('C')
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          SimpleType: foo.B
            CodeReferenceElement: foo.B
              CodeReferenceElement: foo
                PsiElement(identifier)('foo')
              PsiElement(.)('.')
              PsiElement(identifier)('B')
  PsiWhiteSpace('\n')
  ScObject: Test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: test
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('test')
          Parameters
            <empty list>
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Unit
            CodeReferenceElement: Unit
              PsiElement(identifier)('Unit')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          BlockExpression
            PsiElement({)('{')
            PsiWhiteSpace('\n    ')
            ScPatternDefinition: c
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              ListOfPatterns
                ReferencePattern: c
                  PsiElement(identifier)('c')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              ScNewTemplateDefinition: <anonymous>
                PsiElement(new)('new')
                PsiWhiteSpace(' ')
                ExtendsBlock
                  TemplateParents
                    ConstructorInvocation
                      SimpleType: C
                        CodeReferenceElement: C
                          PsiElement(identifier)('C')
                  PsiWhiteSpace(' ')
                  ScTemplateBody
                    PsiElement({)('{')
                    PsiElement(})('}')
            PsiWhiteSpace('\n    ')
            ReferenceExpression: c.a
              ReferenceExpression: c
                PsiElement(identifier)('c')
              PsiElement(.)('.')
              PsiElement(identifier)('a')
            PsiWhiteSpace('\n  ')
            PsiElement(})('}')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
