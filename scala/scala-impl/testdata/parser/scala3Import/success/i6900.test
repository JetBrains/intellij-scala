object Test1 {
  trait Foo[A]:
    def foo[C]: C => A

  // Works with old-style conversion
  implicit def i2f[A](a: A): Foo[A] = new Foo[A]:
    def foo[C]: C => A = _ => a

  // But not with newstyle
  /*
  given [A]: Conversion[A, Foo[A]] with
    def apply(a: A) = new Foo[A]:
      def foo[C]: C => A = _ => a
  */

  1.foo.foo
  1.foo.foo[String]
  1.foo[String].foo
  1.foo[String].foo[String]
}
object Test2 {

  // Works with extension method
  extension [A](a: A)
    def foo[C]: C => A = _ => a

  1.foo.foo

  1.foo.foo[String]
  1.foo[String].foo
  1.foo[String].foo[String]

}

-----
ScalaFile
  ScObject: Test1
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test1')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScTrait: Foo
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(trait)('trait')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Foo')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: A
              PsiElement(identifier)('A')
            PsiElement(])(']')
          ExtendsBlock
            ScTemplateBody
              PsiElement(:)(':')
              PsiWhiteSpace('\n    ')
              ScFunctionDeclaration: foo
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(def)('def')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('foo')
                TypeParameterClause
                  PsiElement([)('[')
                  TypeParameter: C
                    PsiElement(identifier)('C')
                  PsiElement(])(']')
                Parameters
                  <empty list>
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                FunctionalType: C => A
                  SimpleType: C
                    CodeReferenceElement: C
                      PsiElement(identifier)('C')
                  PsiWhiteSpace(' ')
                  PsiElement(=>)('=>')
                  PsiWhiteSpace(' ')
                  SimpleType: A
                    CodeReferenceElement: A
                      PsiElement(identifier)('A')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: i2f
          PsiComment(comment)('// Works with old-style conversion')
          PsiWhiteSpace('\n  ')
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(implicit)('implicit')
          PsiWhiteSpace(' ')
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('i2f')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: A
              PsiElement(identifier)('A')
            PsiElement(])(']')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: a
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('a')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: A
                    CodeReferenceElement: A
                      PsiElement(identifier)('A')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: Foo[A]
            SimpleType: Foo
              CodeReferenceElement: Foo
                PsiElement(identifier)('Foo')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: A
                CodeReferenceElement: A
                  PsiElement(identifier)('A')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ScNewTemplateDefinition: <anonymous>
            PsiElement(new)('new')
            PsiWhiteSpace(' ')
            ExtendsBlock
              TemplateParents
                ConstructorInvocation
                  ParametrizedType: Foo[A]
                    SimpleType: Foo
                      CodeReferenceElement: Foo
                        PsiElement(identifier)('Foo')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: A
                        CodeReferenceElement: A
                          PsiElement(identifier)('A')
                      PsiElement(])(']')
              ScTemplateBody
                PsiElement(:)(':')
                PsiWhiteSpace('\n    ')
                ScFunctionDefinition: foo
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(def)('def')
                  PsiWhiteSpace(' ')
                  PsiElement(identifier)('foo')
                  TypeParameterClause
                    PsiElement([)('[')
                    TypeParameter: C
                      PsiElement(identifier)('C')
                    PsiElement(])(']')
                  Parameters
                    <empty list>
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  FunctionalType: C => A
                    SimpleType: C
                      CodeReferenceElement: C
                        PsiElement(identifier)('C')
                    PsiWhiteSpace(' ')
                    PsiElement(=>)('=>')
                    PsiWhiteSpace(' ')
                    SimpleType: A
                      CodeReferenceElement: A
                        PsiElement(identifier)('A')
                  PsiWhiteSpace(' ')
                  PsiElement(=)('=')
                  PsiWhiteSpace(' ')
                  FunctionExpression
                    Parameters
                      ParametersClause
                        Parameter: _
                          PsiElement(_)('_')
                    PsiWhiteSpace(' ')
                    PsiElement(=>)('=>')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: a
                      PsiElement(identifier)('a')
        PsiWhiteSpace('\n\n  ')
        PsiComment(comment)('// But not with newstyle')
        PsiWhiteSpace('\n  ')
        PsiComment(BlockComment)('/*\n  given [A]: Conversion[A, Foo[A]] with\n    def apply(a: A) = new Foo[A]:\n      def foo[C]: C => A = _ => a\n  */')
        PsiWhiteSpace('\n\n  ')
        ReferenceExpression: 1.foo.foo
          ReferenceExpression: 1.foo
            IntegerLiteral
              PsiElement(integer)('1')
            PsiElement(.)('.')
            PsiElement(identifier)('foo')
          PsiElement(.)('.')
          PsiElement(identifier)('foo')
        PsiWhiteSpace('\n  ')
        GenericCall
          ReferenceExpression: 1.foo.foo
            ReferenceExpression: 1.foo
              IntegerLiteral
                PsiElement(integer)('1')
              PsiElement(.)('.')
              PsiElement(identifier)('foo')
            PsiElement(.)('.')
            PsiElement(identifier)('foo')
          TypeArgumentsList
            PsiElement([)('[')
            SimpleType: String
              CodeReferenceElement: String
                PsiElement(identifier)('String')
            PsiElement(])(']')
        PsiWhiteSpace('\n  ')
        ReferenceExpression: 1.foo[String].foo
          GenericCall
            ReferenceExpression: 1.foo
              IntegerLiteral
                PsiElement(integer)('1')
              PsiElement(.)('.')
              PsiElement(identifier)('foo')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: String
                CodeReferenceElement: String
                  PsiElement(identifier)('String')
              PsiElement(])(']')
          PsiElement(.)('.')
          PsiElement(identifier)('foo')
        PsiWhiteSpace('\n  ')
        GenericCall
          ReferenceExpression: 1.foo[String].foo
            GenericCall
              ReferenceExpression: 1.foo
                IntegerLiteral
                  PsiElement(integer)('1')
                PsiElement(.)('.')
                PsiElement(identifier)('foo')
              TypeArgumentsList
                PsiElement([)('[')
                SimpleType: String
                  CodeReferenceElement: String
                    PsiElement(identifier)('String')
                PsiElement(])(']')
            PsiElement(.)('.')
            PsiElement(identifier)('foo')
          TypeArgumentsList
            PsiElement([)('[')
            SimpleType: String
              CodeReferenceElement: String
                PsiElement(identifier)('String')
            PsiElement(])(']')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n')
  ScObject: Test2
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test2')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n\n  ')
        PsiComment(comment)('// Works with extension method')
        PsiWhiteSpace('\n  ')
        Extension on A
          PsiElement(extension)('extension')
          PsiWhiteSpace(' ')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: A
              PsiElement(identifier)('A')
            PsiElement(])(']')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: a
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('a')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: A
                    CodeReferenceElement: A
                      PsiElement(identifier)('A')
              PsiElement())(')')
          PsiWhiteSpace('\n    ')
          ScExtensionBody
            ScFunctionDefinition: foo
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(def)('def')
              PsiWhiteSpace(' ')
              PsiElement(identifier)('foo')
              TypeParameterClause
                PsiElement([)('[')
                TypeParameter: C
                  PsiElement(identifier)('C')
                PsiElement(])(']')
              Parameters
                <empty list>
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              FunctionalType: C => A
                SimpleType: C
                  CodeReferenceElement: C
                    PsiElement(identifier)('C')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                SimpleType: A
                  CodeReferenceElement: A
                    PsiElement(identifier)('A')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              FunctionExpression
                Parameters
                  ParametersClause
                    Parameter: _
                      PsiElement(_)('_')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                ReferenceExpression: a
                  PsiElement(identifier)('a')
        PsiWhiteSpace('\n\n  ')
        ReferenceExpression: 1.foo.foo
          ReferenceExpression: 1.foo
            IntegerLiteral
              PsiElement(integer)('1')
            PsiElement(.)('.')
            PsiElement(identifier)('foo')
          PsiElement(.)('.')
          PsiElement(identifier)('foo')
        PsiWhiteSpace('\n\n  ')
        GenericCall
          ReferenceExpression: 1.foo.foo
            ReferenceExpression: 1.foo
              IntegerLiteral
                PsiElement(integer)('1')
              PsiElement(.)('.')
              PsiElement(identifier)('foo')
            PsiElement(.)('.')
            PsiElement(identifier)('foo')
          TypeArgumentsList
            PsiElement([)('[')
            SimpleType: String
              CodeReferenceElement: String
                PsiElement(identifier)('String')
            PsiElement(])(']')
        PsiWhiteSpace('\n  ')
        ReferenceExpression: 1.foo[String].foo
          GenericCall
            ReferenceExpression: 1.foo
              IntegerLiteral
                PsiElement(integer)('1')
              PsiElement(.)('.')
              PsiElement(identifier)('foo')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: String
                CodeReferenceElement: String
                  PsiElement(identifier)('String')
              PsiElement(])(']')
          PsiElement(.)('.')
          PsiElement(identifier)('foo')
        PsiWhiteSpace('\n  ')
        GenericCall
          ReferenceExpression: 1.foo[String].foo
            GenericCall
              ReferenceExpression: 1.foo
                IntegerLiteral
                  PsiElement(integer)('1')
                PsiElement(.)('.')
                PsiElement(identifier)('foo')
              TypeArgumentsList
                PsiElement([)('[')
                SimpleType: String
                  CodeReferenceElement: String
                    PsiElement(identifier)('String')
                PsiElement(])(']')
            PsiElement(.)('.')
            PsiElement(identifier)('foo')
          TypeArgumentsList
            PsiElement([)('[')
            SimpleType: String
              CodeReferenceElement: String
                PsiElement(identifier)('String')
            PsiElement(])(']')
        PsiWhiteSpace('\n\n')
        PsiElement(})('}')
