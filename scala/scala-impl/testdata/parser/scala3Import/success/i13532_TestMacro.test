package testcode

import scala.quoted.Quotes

object TestMacro {
    private def impl()(using Quotes) = '{ 123 }
    inline def call(): Int = ${ impl() }
}
-----
ScalaFile
  ScPackaging
    PsiElement(package)('package')
    PsiWhiteSpace(' ')
    CodeReferenceElement: testcode
      PsiElement(identifier)('testcode')
    PsiWhiteSpace('\n\n')
    ScImportStatement
      PsiElement(import)('import')
      PsiWhiteSpace(' ')
      ImportExpression
        CodeReferenceElement: scala.quoted.Quotes
          CodeReferenceElement: scala.quoted
            CodeReferenceElement: scala
              PsiElement(identifier)('scala')
            PsiElement(.)('.')
            PsiElement(identifier)('quoted')
          PsiElement(.)('.')
          PsiElement(identifier)('Quotes')
    PsiWhiteSpace('\n\n')
    ScObject: TestMacro
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      PsiElement(object)('object')
      PsiWhiteSpace(' ')
      PsiElement(identifier)('TestMacro')
      PsiWhiteSpace(' ')
      ExtendsBlock
        ScTemplateBody
          PsiElement({)('{')
          PsiWhiteSpace('\n    ')
          ScFunctionDefinition: impl
            AnnotationsList
              <empty list>
            Modifiers
              AccessModifier
                PsiElement(private)('private')
            PsiWhiteSpace(' ')
            PsiElement(def)('def')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('impl')
            Parameters
              ParametersClause
                PsiElement(()('(')
                PsiElement())(')')
              ParametersClause
                PsiElement(()('(')
                PsiElement(using)('using')
                PsiWhiteSpace(' ')
                Parameter: <anonymous>
                  ParameterType
                    SimpleType: Quotes
                      CodeReferenceElement: Quotes
                        PsiElement(identifier)('Quotes')
                PsiElement())(')')
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace(' ')
            QuotedBlock
              PsiElement(')(''')
              PsiElement({)('{')
              PsiWhiteSpace(' ')
              IntegerLiteral
                PsiElement(integer)('123')
              PsiWhiteSpace(' ')
              PsiElement(})('}')
          PsiWhiteSpace('\n    ')
          ScFunctionDefinition: call
            AnnotationsList
              <empty list>
            Modifiers
              PsiElement(inline)('inline')
            PsiWhiteSpace(' ')
            PsiElement(def)('def')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('call')
            Parameters
              ParametersClause
                PsiElement(()('(')
                PsiElement())(')')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            SimpleType: Int
              CodeReferenceElement: Int
                PsiElement(identifier)('Int')
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace(' ')
            SplicedBlock
              PsiElement($)('$')
              PsiElement({)('{')
              PsiWhiteSpace(' ')
              MethodCall
                ReferenceExpression: impl
                  PsiElement(identifier)('impl')
                ArgumentList
                  PsiElement(()('(')
                  PsiElement())(')')
              PsiWhiteSpace(' ')
              PsiElement(})('}')
          PsiWhiteSpace('\n')
          PsiElement(})('}')
