package intersectionTypes

object t1 {
  trait Resetable {
    def reset(): this.type
  }

  trait Growable[T] {
    def add(x: T): this.type
  }

  def f(x: Resetable & Growable[String]) = {
    x.reset()
    x.add("first")
  }
}

object t2 {

  trait A {
    def children: List[A]
  }

  trait B {
    def children: List[B]
  }

  val x: A & B = new C
  val ys: List[A & B] = x.children

  class C extends A with B {
    def children: List[A & B] = ???
  }

  val z: B & A = x // commutative
}
-----
ScalaFile
  ScPackaging
    PsiElement(package)('package')
    PsiWhiteSpace(' ')
    CodeReferenceElement: intersectionTypes
      PsiElement(identifier)('intersectionTypes')
    PsiWhiteSpace('\n\n')
    ScObject: t1
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      PsiElement(object)('object')
      PsiWhiteSpace(' ')
      PsiElement(identifier)('t1')
      PsiWhiteSpace(' ')
      ExtendsBlock
        ScTemplateBody
          PsiElement({)('{')
          PsiWhiteSpace('\n  ')
          ScTrait: Resetable
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(trait)('trait')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('Resetable')
            PsiWhiteSpace(' ')
            ExtendsBlock
              ScTemplateBody
                PsiElement({)('{')
                PsiWhiteSpace('\n    ')
                ScFunctionDeclaration: reset
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(def)('def')
                  PsiWhiteSpace(' ')
                  PsiElement(identifier)('reset')
                  Parameters
                    ParametersClause
                      PsiElement(()('(')
                      PsiElement())(')')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  SimpleType: this.type
                    ThisReference
                      PsiElement(this)('this')
                    PsiElement(.)('.')
                    PsiElement(type)('type')
                PsiWhiteSpace('\n  ')
                PsiElement(})('}')
          PsiWhiteSpace('\n\n  ')
          ScTrait: Growable
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(trait)('trait')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('Growable')
            TypeParameterClause
              PsiElement([)('[')
              TypeParameter: T
                PsiElement(identifier)('T')
              PsiElement(])(']')
            PsiWhiteSpace(' ')
            ExtendsBlock
              ScTemplateBody
                PsiElement({)('{')
                PsiWhiteSpace('\n    ')
                ScFunctionDeclaration: add
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(def)('def')
                  PsiWhiteSpace(' ')
                  PsiElement(identifier)('add')
                  Parameters
                    ParametersClause
                      PsiElement(()('(')
                      Parameter: x
                        AnnotationsList
                          <empty list>
                        Modifiers
                          <empty list>
                        PsiElement(identifier)('x')
                        PsiElement(:)(':')
                        PsiWhiteSpace(' ')
                        ParameterType
                          SimpleType: T
                            CodeReferenceElement: T
                              PsiElement(identifier)('T')
                      PsiElement())(')')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  SimpleType: this.type
                    ThisReference
                      PsiElement(this)('this')
                    PsiElement(.)('.')
                    PsiElement(type)('type')
                PsiWhiteSpace('\n  ')
                PsiElement(})('}')
          PsiWhiteSpace('\n\n  ')
          ScFunctionDefinition: f
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(def)('def')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('f')
            Parameters
              ParametersClause
                PsiElement(()('(')
                Parameter: x
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(identifier)('x')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    InfixType: Resetable & Growable[String]
                      SimpleType: Resetable
                        CodeReferenceElement: Resetable
                          PsiElement(identifier)('Resetable')
                      PsiWhiteSpace(' ')
                      CodeReferenceElement: &
                        PsiElement(identifier)('&')
                      PsiWhiteSpace(' ')
                      ParametrizedType: Growable[String]
                        SimpleType: Growable
                          CodeReferenceElement: Growable
                            PsiElement(identifier)('Growable')
                        TypeArgumentsList
                          PsiElement([)('[')
                          SimpleType: String
                            CodeReferenceElement: String
                              PsiElement(identifier)('String')
                          PsiElement(])(']')
                PsiElement())(')')
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace(' ')
            BlockExpression
              PsiElement({)('{')
              PsiWhiteSpace('\n    ')
              MethodCall
                ReferenceExpression: x.reset
                  ReferenceExpression: x
                    PsiElement(identifier)('x')
                  PsiElement(.)('.')
                  PsiElement(identifier)('reset')
                ArgumentList
                  PsiElement(()('(')
                  PsiElement())(')')
              PsiWhiteSpace('\n    ')
              MethodCall
                ReferenceExpression: x.add
                  ReferenceExpression: x
                    PsiElement(identifier)('x')
                  PsiElement(.)('.')
                  PsiElement(identifier)('add')
                ArgumentList
                  PsiElement(()('(')
                  StringLiteral
                    PsiElement(string content)('"first"')
                  PsiElement())(')')
              PsiWhiteSpace('\n  ')
              PsiElement(})('}')
          PsiWhiteSpace('\n')
          PsiElement(})('}')
    PsiWhiteSpace('\n\n')
    ScObject: t2
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      PsiElement(object)('object')
      PsiWhiteSpace(' ')
      PsiElement(identifier)('t2')
      PsiWhiteSpace(' ')
      ExtendsBlock
        ScTemplateBody
          PsiElement({)('{')
          PsiWhiteSpace('\n\n  ')
          ScTrait: A
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(trait)('trait')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('A')
            PsiWhiteSpace(' ')
            ExtendsBlock
              ScTemplateBody
                PsiElement({)('{')
                PsiWhiteSpace('\n    ')
                ScFunctionDeclaration: children
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(def)('def')
                  PsiWhiteSpace(' ')
                  PsiElement(identifier)('children')
                  Parameters
                    <empty list>
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParametrizedType: List[A]
                    SimpleType: List
                      CodeReferenceElement: List
                        PsiElement(identifier)('List')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: A
                        CodeReferenceElement: A
                          PsiElement(identifier)('A')
                      PsiElement(])(']')
                PsiWhiteSpace('\n  ')
                PsiElement(})('}')
          PsiWhiteSpace('\n\n  ')
          ScTrait: B
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(trait)('trait')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('B')
            PsiWhiteSpace(' ')
            ExtendsBlock
              ScTemplateBody
                PsiElement({)('{')
                PsiWhiteSpace('\n    ')
                ScFunctionDeclaration: children
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(def)('def')
                  PsiWhiteSpace(' ')
                  PsiElement(identifier)('children')
                  Parameters
                    <empty list>
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParametrizedType: List[B]
                    SimpleType: List
                      CodeReferenceElement: List
                        PsiElement(identifier)('List')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: B
                        CodeReferenceElement: B
                          PsiElement(identifier)('B')
                      PsiElement(])(']')
                PsiWhiteSpace('\n  ')
                PsiElement(})('}')
          PsiWhiteSpace('\n\n  ')
          ScPatternDefinition: x
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(val)('val')
            PsiWhiteSpace(' ')
            ListOfPatterns
              ReferencePattern: x
                PsiElement(identifier)('x')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            InfixType: A & B
              SimpleType: A
                CodeReferenceElement: A
                  PsiElement(identifier)('A')
              PsiWhiteSpace(' ')
              CodeReferenceElement: &
                PsiElement(identifier)('&')
              PsiWhiteSpace(' ')
              SimpleType: B
                CodeReferenceElement: B
                  PsiElement(identifier)('B')
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace(' ')
            ScNewTemplateDefinition: <anonymous>
              PsiElement(new)('new')
              PsiWhiteSpace(' ')
              ExtendsBlock
                TemplateParents
                  ConstructorInvocation
                    SimpleType: C
                      CodeReferenceElement: C
                        PsiElement(identifier)('C')
          PsiWhiteSpace('\n  ')
          ScPatternDefinition: ys
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(val)('val')
            PsiWhiteSpace(' ')
            ListOfPatterns
              ReferencePattern: ys
                PsiElement(identifier)('ys')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            ParametrizedType: List[A & B]
              SimpleType: List
                CodeReferenceElement: List
                  PsiElement(identifier)('List')
              TypeArgumentsList
                PsiElement([)('[')
                InfixType: A & B
                  SimpleType: A
                    CodeReferenceElement: A
                      PsiElement(identifier)('A')
                  PsiWhiteSpace(' ')
                  CodeReferenceElement: &
                    PsiElement(identifier)('&')
                  PsiWhiteSpace(' ')
                  SimpleType: B
                    CodeReferenceElement: B
                      PsiElement(identifier)('B')
                PsiElement(])(']')
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace(' ')
            ReferenceExpression: x.children
              ReferenceExpression: x
                PsiElement(identifier)('x')
              PsiElement(.)('.')
              PsiElement(identifier)('children')
          PsiWhiteSpace('\n\n  ')
          ScClass: C
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(class)('class')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('C')
            PrimaryConstructor
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              Parameters
                <empty list>
            PsiWhiteSpace(' ')
            ExtendsBlock
              PsiElement(extends)('extends')
              PsiWhiteSpace(' ')
              TemplateParents
                ConstructorInvocation
                  SimpleType: A
                    CodeReferenceElement: A
                      PsiElement(identifier)('A')
                PsiWhiteSpace(' ')
                PsiElement(with)('with')
                PsiWhiteSpace(' ')
                ConstructorInvocation
                  SimpleType: B
                    CodeReferenceElement: B
                      PsiElement(identifier)('B')
              PsiWhiteSpace(' ')
              ScTemplateBody
                PsiElement({)('{')
                PsiWhiteSpace('\n    ')
                ScFunctionDefinition: children
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(def)('def')
                  PsiWhiteSpace(' ')
                  PsiElement(identifier)('children')
                  Parameters
                    <empty list>
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParametrizedType: List[A & B]
                    SimpleType: List
                      CodeReferenceElement: List
                        PsiElement(identifier)('List')
                    TypeArgumentsList
                      PsiElement([)('[')
                      InfixType: A & B
                        SimpleType: A
                          CodeReferenceElement: A
                            PsiElement(identifier)('A')
                        PsiWhiteSpace(' ')
                        CodeReferenceElement: &
                          PsiElement(identifier)('&')
                        PsiWhiteSpace(' ')
                        SimpleType: B
                          CodeReferenceElement: B
                            PsiElement(identifier)('B')
                      PsiElement(])(']')
                  PsiWhiteSpace(' ')
                  PsiElement(=)('=')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: ???
                    PsiElement(identifier)('???')
                PsiWhiteSpace('\n  ')
                PsiElement(})('}')
          PsiWhiteSpace('\n\n  ')
          ScPatternDefinition: z
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(val)('val')
            PsiWhiteSpace(' ')
            ListOfPatterns
              ReferencePattern: z
                PsiElement(identifier)('z')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            InfixType: B & A
              SimpleType: B
                CodeReferenceElement: B
                  PsiElement(identifier)('B')
              PsiWhiteSpace(' ')
              CodeReferenceElement: &
                PsiElement(identifier)('&')
              PsiWhiteSpace(' ')
              SimpleType: A
                CodeReferenceElement: A
                  PsiElement(identifier)('A')
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace(' ')
            ReferenceExpression: x
              PsiElement(identifier)('x')
          PsiWhiteSpace(' ')
          PsiComment(comment)('// commutative')
          PsiWhiteSpace('\n')
          PsiElement(})('}')
