def g(x: Int, op: Int => Int) = op(x)

def test1 = g(1, x =>
    val y = x * x
    y * y
  )

def test2 = g(1,
  x =>
    val y = x * x
    y * y
  )

def f(x: Int) =
  assert(
    if x > 0 then
      true
    else
      false
  )
  assert(
    if x > 0 then
      true
    else
      false)
  assert(
    if x > 0 then
      true
    else
      false, "fail")
  assert(
    if x > 0 then
      true
    else
      if x < 0 then
        true
      else
        false, "fail")
  (
    if x > 0 then
      println(x)
      x
    else
      s"""foo${
        if x > 0 then
          println(x)
          x
        else
          -x
        }"""
  )
-----
ScalaFile
  ScFunctionDefinition: g
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(def)('def')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('g')
    Parameters
      ParametersClause
        PsiElement(()('(')
        Parameter: x
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(identifier)('x')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParameterType
            SimpleType: Int
              CodeReferenceElement: Int
                PsiElement(identifier)('Int')
        PsiElement(,)(',')
        PsiWhiteSpace(' ')
        Parameter: op
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(identifier)('op')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParameterType
            FunctionalType: Int => Int
              SimpleType: Int
                CodeReferenceElement: Int
                  PsiElement(identifier)('Int')
              PsiWhiteSpace(' ')
              PsiElement(=>)('=>')
              PsiWhiteSpace(' ')
              SimpleType: Int
                CodeReferenceElement: Int
                  PsiElement(identifier)('Int')
        PsiElement())(')')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    MethodCall
      ReferenceExpression: op
        PsiElement(identifier)('op')
      ArgumentList
        PsiElement(()('(')
        ReferenceExpression: x
          PsiElement(identifier)('x')
        PsiElement())(')')
  PsiWhiteSpace('\n\n')
  ScFunctionDefinition: test1
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(def)('def')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('test1')
    Parameters
      <empty list>
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    MethodCall
      ReferenceExpression: g
        PsiElement(identifier)('g')
      ArgumentList
        PsiElement(()('(')
        IntegerLiteral
          PsiElement(integer)('1')
        PsiElement(,)(',')
        PsiWhiteSpace(' ')
        FunctionExpression
          Parameters
            ParametersClause
              Parameter: x
                PsiElement(identifier)('x')
          PsiWhiteSpace(' ')
          PsiElement(=>)('=>')
          BlockExpression
            PsiWhiteSpace('\n    ')
            ScPatternDefinition: y
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              ListOfPatterns
                ReferencePattern: y
                  PsiElement(identifier)('y')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              InfixExpression
                ReferenceExpression: x
                  PsiElement(identifier)('x')
                PsiWhiteSpace(' ')
                ReferenceExpression: *
                  PsiElement(identifier)('*')
                PsiWhiteSpace(' ')
                ReferenceExpression: x
                  PsiElement(identifier)('x')
            PsiWhiteSpace('\n    ')
            InfixExpression
              ReferenceExpression: y
                PsiElement(identifier)('y')
              PsiWhiteSpace(' ')
              ReferenceExpression: *
                PsiElement(identifier)('*')
              PsiWhiteSpace(' ')
              ReferenceExpression: y
                PsiElement(identifier)('y')
        PsiWhiteSpace('\n  ')
        PsiElement())(')')
  PsiWhiteSpace('\n\n')
  ScFunctionDefinition: test2
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(def)('def')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('test2')
    Parameters
      <empty list>
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    MethodCall
      ReferenceExpression: g
        PsiElement(identifier)('g')
      ArgumentList
        PsiElement(()('(')
        IntegerLiteral
          PsiElement(integer)('1')
        PsiElement(,)(',')
        PsiWhiteSpace('\n  ')
        FunctionExpression
          Parameters
            ParametersClause
              Parameter: x
                PsiElement(identifier)('x')
          PsiWhiteSpace(' ')
          PsiElement(=>)('=>')
          BlockExpression
            PsiWhiteSpace('\n    ')
            ScPatternDefinition: y
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              ListOfPatterns
                ReferencePattern: y
                  PsiElement(identifier)('y')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              InfixExpression
                ReferenceExpression: x
                  PsiElement(identifier)('x')
                PsiWhiteSpace(' ')
                ReferenceExpression: *
                  PsiElement(identifier)('*')
                PsiWhiteSpace(' ')
                ReferenceExpression: x
                  PsiElement(identifier)('x')
            PsiWhiteSpace('\n    ')
            InfixExpression
              ReferenceExpression: y
                PsiElement(identifier)('y')
              PsiWhiteSpace(' ')
              ReferenceExpression: *
                PsiElement(identifier)('*')
              PsiWhiteSpace(' ')
              ReferenceExpression: y
                PsiElement(identifier)('y')
        PsiWhiteSpace('\n  ')
        PsiElement())(')')
  PsiWhiteSpace('\n\n')
  ScFunctionDefinition: f
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(def)('def')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('f')
    Parameters
      ParametersClause
        PsiElement(()('(')
        Parameter: x
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(identifier)('x')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParameterType
            SimpleType: Int
              CodeReferenceElement: Int
                PsiElement(identifier)('Int')
        PsiElement())(')')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    BlockExpression
      PsiWhiteSpace('\n  ')
      MethodCall
        ReferenceExpression: assert
          PsiElement(identifier)('assert')
        ArgumentList
          PsiElement(()('(')
          PsiWhiteSpace('\n    ')
          IfStatement
            PsiElement(if)('if')
            PsiWhiteSpace(' ')
            InfixExpression
              ReferenceExpression: x
                PsiElement(identifier)('x')
              PsiWhiteSpace(' ')
              ReferenceExpression: >
                PsiElement(identifier)('>')
              PsiWhiteSpace(' ')
              IntegerLiteral
                PsiElement(integer)('0')
            PsiWhiteSpace(' ')
            PsiElement(then)('then')
            PsiWhiteSpace('\n      ')
            BooleanLiteral
              PsiElement(true)('true')
            PsiWhiteSpace('\n    ')
            PsiElement(else)('else')
            PsiWhiteSpace('\n      ')
            BooleanLiteral
              PsiElement(false)('false')
          PsiWhiteSpace('\n  ')
          PsiElement())(')')
      PsiWhiteSpace('\n  ')
      MethodCall
        ReferenceExpression: assert
          PsiElement(identifier)('assert')
        ArgumentList
          PsiElement(()('(')
          PsiWhiteSpace('\n    ')
          IfStatement
            PsiElement(if)('if')
            PsiWhiteSpace(' ')
            InfixExpression
              ReferenceExpression: x
                PsiElement(identifier)('x')
              PsiWhiteSpace(' ')
              ReferenceExpression: >
                PsiElement(identifier)('>')
              PsiWhiteSpace(' ')
              IntegerLiteral
                PsiElement(integer)('0')
            PsiWhiteSpace(' ')
            PsiElement(then)('then')
            PsiWhiteSpace('\n      ')
            BooleanLiteral
              PsiElement(true)('true')
            PsiWhiteSpace('\n    ')
            PsiElement(else)('else')
            PsiWhiteSpace('\n      ')
            BooleanLiteral
              PsiElement(false)('false')
          PsiElement())(')')
      PsiWhiteSpace('\n  ')
      MethodCall
        ReferenceExpression: assert
          PsiElement(identifier)('assert')
        ArgumentList
          PsiElement(()('(')
          PsiWhiteSpace('\n    ')
          IfStatement
            PsiElement(if)('if')
            PsiWhiteSpace(' ')
            InfixExpression
              ReferenceExpression: x
                PsiElement(identifier)('x')
              PsiWhiteSpace(' ')
              ReferenceExpression: >
                PsiElement(identifier)('>')
              PsiWhiteSpace(' ')
              IntegerLiteral
                PsiElement(integer)('0')
            PsiWhiteSpace(' ')
            PsiElement(then)('then')
            PsiWhiteSpace('\n      ')
            BooleanLiteral
              PsiElement(true)('true')
            PsiWhiteSpace('\n    ')
            PsiElement(else)('else')
            PsiWhiteSpace('\n      ')
            BooleanLiteral
              PsiElement(false)('false')
          PsiElement(,)(',')
          PsiWhiteSpace(' ')
          StringLiteral
            PsiElement(string content)('"fail"')
          PsiElement())(')')
      PsiWhiteSpace('\n  ')
      MethodCall
        ReferenceExpression: assert
          PsiElement(identifier)('assert')
        ArgumentList
          PsiElement(()('(')
          PsiWhiteSpace('\n    ')
          IfStatement
            PsiElement(if)('if')
            PsiWhiteSpace(' ')
            InfixExpression
              ReferenceExpression: x
                PsiElement(identifier)('x')
              PsiWhiteSpace(' ')
              ReferenceExpression: >
                PsiElement(identifier)('>')
              PsiWhiteSpace(' ')
              IntegerLiteral
                PsiElement(integer)('0')
            PsiWhiteSpace(' ')
            PsiElement(then)('then')
            PsiWhiteSpace('\n      ')
            BooleanLiteral
              PsiElement(true)('true')
            PsiWhiteSpace('\n    ')
            PsiElement(else)('else')
            PsiWhiteSpace('\n      ')
            IfStatement
              PsiElement(if)('if')
              PsiWhiteSpace(' ')
              InfixExpression
                ReferenceExpression: x
                  PsiElement(identifier)('x')
                PsiWhiteSpace(' ')
                ReferenceExpression: <
                  PsiElement(identifier)('<')
                PsiWhiteSpace(' ')
                IntegerLiteral
                  PsiElement(integer)('0')
              PsiWhiteSpace(' ')
              PsiElement(then)('then')
              PsiWhiteSpace('\n        ')
              BooleanLiteral
                PsiElement(true)('true')
              PsiWhiteSpace('\n      ')
              PsiElement(else)('else')
              PsiWhiteSpace('\n        ')
              BooleanLiteral
                PsiElement(false)('false')
          PsiElement(,)(',')
          PsiWhiteSpace(' ')
          StringLiteral
            PsiElement(string content)('"fail"')
          PsiElement())(')')
      PsiWhiteSpace('\n  ')
      ExpressionInParenthesis
        PsiElement(()('(')
        PsiWhiteSpace('\n    ')
        IfStatement
          PsiElement(if)('if')
          PsiWhiteSpace(' ')
          InfixExpression
            ReferenceExpression: x
              PsiElement(identifier)('x')
            PsiWhiteSpace(' ')
            ReferenceExpression: >
              PsiElement(identifier)('>')
            PsiWhiteSpace(' ')
            IntegerLiteral
              PsiElement(integer)('0')
          PsiWhiteSpace(' ')
          PsiElement(then)('then')
          BlockExpression
            PsiWhiteSpace('\n      ')
            MethodCall
              ReferenceExpression: println
                PsiElement(identifier)('println')
              ArgumentList
                PsiElement(()('(')
                ReferenceExpression: x
                  PsiElement(identifier)('x')
                PsiElement())(')')
            PsiWhiteSpace('\n      ')
            ReferenceExpression: x
              PsiElement(identifier)('x')
          PsiWhiteSpace('\n    ')
          PsiElement(else)('else')
          PsiWhiteSpace('\n      ')
          InterpolatedStringLiteral
            InterpolatedExpressionPrefix: s
              PsiElement(interpolated string id)('s')
            PsiElement(interpolated multiline string)('"""foo')
            PsiElement(interpolated string injection)('$')
            BlockExpression
              PsiElement({)('{')
              PsiWhiteSpace('\n        ')
              IfStatement
                PsiElement(if)('if')
                PsiWhiteSpace(' ')
                InfixExpression
                  ReferenceExpression: x
                    PsiElement(identifier)('x')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: >
                    PsiElement(identifier)('>')
                  PsiWhiteSpace(' ')
                  IntegerLiteral
                    PsiElement(integer)('0')
                PsiWhiteSpace(' ')
                PsiElement(then)('then')
                BlockExpression
                  PsiWhiteSpace('\n          ')
                  MethodCall
                    ReferenceExpression: println
                      PsiElement(identifier)('println')
                    ArgumentList
                      PsiElement(()('(')
                      ReferenceExpression: x
                        PsiElement(identifier)('x')
                      PsiElement())(')')
                  PsiWhiteSpace('\n          ')
                  ReferenceExpression: x
                    PsiElement(identifier)('x')
                PsiWhiteSpace('\n        ')
                PsiElement(else)('else')
                PsiWhiteSpace('\n          ')
                PrefixExpression
                  ReferenceExpression: -
                    PsiElement(identifier)('-')
                  ReferenceExpression: x
                    PsiElement(identifier)('x')
              PsiWhiteSpace('\n        ')
              PsiElement(})('}')
            PsiElement(interpolated string end)('"""')
        PsiWhiteSpace('\n  ')
        PsiElement())(')')
