
class A {
  def foo(a: Int) = 0
}

class RichA {
  def foo(a: String) = 0
  def foo(a: String, b: String) = 0
  def foo() = 0
}

object TestNoAutoTupling {
  import language.noAutoTupling // try with on and off

  implicit def AToRichA(a: A): RichA = new RichA

  val a = new A
  a.foo()
  a.foo(1)

  a.foo("")   // Without implicits, a type error regarding invalid argument types is generated at `""`. This is
                  // the same position as an argument, so the 'second try' typing with an Implicit View is tried,
                  // and AToRichA(a).foo("") is found.
                  //
                  // My reading of the spec "7.3 Views" is that `a.foo` denotes a member of `a`, so the view should
                  // not be triggered.
                  //
                  // But perhaps the implementation was changed to solve See https://lampsvn.epfl.ch/trac/scala/ticket/1756

  a.foo("a", "b") // Without implicits, a type error regarding invalid arity is generated at `foo(<error>"", "")`.
                  // Typers#tryTypedApply:3274 only checks if the error is as the same position as `foo`, `"a"`, or `"b"`.
}

// t0851 is essentially the same:
object test1 {
  case class Foo[T,T2](f : (T,T2) => String) {
    def apply(t : T) = (s:T2) => f(t,s)
  }
  implicit def g[T](f : (T,String) => String): test1.Foo[T,String] = Foo(f)
  def main(args : Array[String]) : Unit = {
    val f = (x:Int,s:String) => s + x
    println(f(1))
    ()
  }
}
object Main {
  def main(args : Array[String]): Unit = {
    val fn = (a : Int, str : String) => "a: " + a + ", str: " + str
    implicit def fx[T](f : (T,String) => String): T => String = (x:T) => f(x,null)
    println(fn(1))
    ()
  }
}

object TestWithAutoTupling {

  implicit def AToRichA(a: A): RichA = new RichA

  val a = new A
  a.foo()
  a.foo(1)

  a.foo("")       // Without implicits, a type error regarding invalid argument types is generated at `""`. This is
                  // the same position as an argument, so the 'second try' typing with an Implicit View is tried,
                  // and AToRichA(a).foo("") is found.
                  //
                  // My reading of the spec "7.3 Views" is that `a.foo` denotes a member of `a`, so the view should
                  // not be triggered.
                  //
                  // But perhaps the implementation was changed to solve See https://lampsvn.epfl.ch/trac/scala/ticket/1756

  a.foo("a", "b") // Without implicits, a type error regarding invalid arity is generated at `foo(<error>"", "")`.
                  // Typers#tryTypedApply:3274 only checks if the error is as the same position as `foo`, `"a"`, or `"b"`.
}

-----
ScalaFile
  ScClass: A
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('A')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: foo
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('foo')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: a
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('a')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Int
                    CodeReferenceElement: Int
                      PsiElement(identifier)('Int')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          IntegerLiteral
            PsiElement(integer)('0')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScClass: RichA
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('RichA')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: foo
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('foo')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: a
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('a')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: String
                    CodeReferenceElement: String
                      PsiElement(identifier)('String')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          IntegerLiteral
            PsiElement(integer)('0')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: foo
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('foo')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: a
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('a')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: String
                    CodeReferenceElement: String
                      PsiElement(identifier)('String')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              Parameter: b
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('b')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: String
                    CodeReferenceElement: String
                      PsiElement(identifier)('String')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          IntegerLiteral
            PsiElement(integer)('0')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: foo
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('foo')
          Parameters
            ParametersClause
              PsiElement(()('(')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          IntegerLiteral
            PsiElement(integer)('0')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScObject: TestNoAutoTupling
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('TestNoAutoTupling')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScImportStatement
          PsiElement(import)('import')
          PsiWhiteSpace(' ')
          ImportExpression
            CodeReferenceElement: language.noAutoTupling
              CodeReferenceElement: language
                PsiElement(identifier)('language')
              PsiElement(.)('.')
              PsiElement(identifier)('noAutoTupling')
        PsiWhiteSpace(' ')
        PsiComment(comment)('// try with on and off')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: AToRichA
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(implicit)('implicit')
          PsiWhiteSpace(' ')
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('AToRichA')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: a
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('a')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: A
                    CodeReferenceElement: A
                      PsiElement(identifier)('A')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: RichA
            CodeReferenceElement: RichA
              PsiElement(identifier)('RichA')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ScNewTemplateDefinition: <anonymous>
            PsiElement(new)('new')
            PsiWhiteSpace(' ')
            ExtendsBlock
              TemplateParents
                ConstructorInvocation
                  SimpleType: RichA
                    CodeReferenceElement: RichA
                      PsiElement(identifier)('RichA')
        PsiWhiteSpace('\n\n  ')
        ScPatternDefinition: a
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: a
              PsiElement(identifier)('a')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ScNewTemplateDefinition: <anonymous>
            PsiElement(new)('new')
            PsiWhiteSpace(' ')
            ExtendsBlock
              TemplateParents
                ConstructorInvocation
                  SimpleType: A
                    CodeReferenceElement: A
                      PsiElement(identifier)('A')
        PsiWhiteSpace('\n  ')
        MethodCall
          ReferenceExpression: a.foo
            ReferenceExpression: a
              PsiElement(identifier)('a')
            PsiElement(.)('.')
            PsiElement(identifier)('foo')
          ArgumentList
            PsiElement(()('(')
            PsiElement())(')')
        PsiWhiteSpace('\n  ')
        MethodCall
          ReferenceExpression: a.foo
            ReferenceExpression: a
              PsiElement(identifier)('a')
            PsiElement(.)('.')
            PsiElement(identifier)('foo')
          ArgumentList
            PsiElement(()('(')
            IntegerLiteral
              PsiElement(integer)('1')
            PsiElement())(')')
        PsiWhiteSpace('\n\n  ')
        MethodCall
          ReferenceExpression: a.foo
            ReferenceExpression: a
              PsiElement(identifier)('a')
            PsiElement(.)('.')
            PsiElement(identifier)('foo')
          ArgumentList
            PsiElement(()('(')
            StringLiteral
              PsiElement(string content)('""')
            PsiElement())(')')
        PsiWhiteSpace('   ')
        PsiComment(comment)('// Without implicits, a type error regarding invalid argument types is generated at `""`. This is')
        PsiWhiteSpace('\n                  ')
        PsiComment(comment)('// the same position as an argument, so the 'second try' typing with an Implicit View is tried,')
        PsiWhiteSpace('\n                  ')
        PsiComment(comment)('// and AToRichA(a).foo("") is found.')
        PsiWhiteSpace('\n                  ')
        PsiComment(comment)('//')
        PsiWhiteSpace('\n                  ')
        PsiComment(comment)('// My reading of the spec "7.3 Views" is that `a.foo` denotes a member of `a`, so the view should')
        PsiWhiteSpace('\n                  ')
        PsiComment(comment)('// not be triggered.')
        PsiWhiteSpace('\n                  ')
        PsiComment(comment)('//')
        PsiWhiteSpace('\n                  ')
        PsiComment(comment)('// But perhaps the implementation was changed to solve See https://lampsvn.epfl.ch/trac/scala/ticket/1756')
        PsiWhiteSpace('\n\n  ')
        MethodCall
          ReferenceExpression: a.foo
            ReferenceExpression: a
              PsiElement(identifier)('a')
            PsiElement(.)('.')
            PsiElement(identifier)('foo')
          ArgumentList
            PsiElement(()('(')
            StringLiteral
              PsiElement(string content)('"a"')
            PsiElement(,)(',')
            PsiWhiteSpace(' ')
            StringLiteral
              PsiElement(string content)('"b"')
            PsiElement())(')')
        PsiWhiteSpace(' ')
        PsiComment(comment)('// Without implicits, a type error regarding invalid arity is generated at `foo(<error>"", "")`.')
        PsiWhiteSpace('\n                  ')
        PsiComment(comment)('// Typers#tryTypedApply:3274 only checks if the error is as the same position as `foo`, `"a"`, or `"b"`.')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScObject: test1
    PsiComment(comment)('// t0851 is essentially the same:')
    PsiWhiteSpace('\n')
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('test1')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScClass: Foo
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(case)('case')
          PsiWhiteSpace(' ')
          PsiElement(class)('class')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Foo')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: T
              PsiElement(identifier)('T')
            PsiElement(,)(',')
            TypeParameter: T2
              PsiElement(identifier)('T2')
            PsiElement(])(']')
          PrimaryConstructor
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            Parameters
              ParametersClause
                PsiElement(()('(')
                ClassParameter: f
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(identifier)('f')
                  PsiWhiteSpace(' ')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    FunctionalType: (T,T2) => String
                      TupleType: (T,T2)
                        PsiElement(()('(')
                        TypesList
                          SimpleType: T
                            CodeReferenceElement: T
                              PsiElement(identifier)('T')
                          PsiElement(,)(',')
                          SimpleType: T2
                            CodeReferenceElement: T2
                              PsiElement(identifier)('T2')
                        PsiElement())(')')
                      PsiWhiteSpace(' ')
                      PsiElement(=>)('=>')
                      PsiWhiteSpace(' ')
                      SimpleType: String
                        CodeReferenceElement: String
                          PsiElement(identifier)('String')
                PsiElement())(')')
          PsiWhiteSpace(' ')
          ExtendsBlock
            ScTemplateBody
              PsiElement({)('{')
              PsiWhiteSpace('\n    ')
              ScFunctionDefinition: apply
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(def)('def')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('apply')
                Parameters
                  ParametersClause
                    PsiElement(()('(')
                    Parameter: t
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(identifier)('t')
                      PsiWhiteSpace(' ')
                      PsiElement(:)(':')
                      PsiWhiteSpace(' ')
                      ParameterType
                        SimpleType: T
                          CodeReferenceElement: T
                            PsiElement(identifier)('T')
                    PsiElement())(')')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                FunctionExpression
                  Parameters
                    ParametersClause
                      PsiElement(()('(')
                      Parameter: s
                        AnnotationsList
                          <empty list>
                        PsiElement(identifier)('s')
                        PsiElement(:)(':')
                        ParameterType
                          SimpleType: T2
                            CodeReferenceElement: T2
                              PsiElement(identifier)('T2')
                      PsiElement())(')')
                  PsiWhiteSpace(' ')
                  PsiElement(=>)('=>')
                  PsiWhiteSpace(' ')
                  MethodCall
                    ReferenceExpression: f
                      PsiElement(identifier)('f')
                    ArgumentList
                      PsiElement(()('(')
                      ReferenceExpression: t
                        PsiElement(identifier)('t')
                      PsiElement(,)(',')
                      ReferenceExpression: s
                        PsiElement(identifier)('s')
                      PsiElement())(')')
              PsiWhiteSpace('\n  ')
              PsiElement(})('}')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: g
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(implicit)('implicit')
          PsiWhiteSpace(' ')
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('g')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: T
              PsiElement(identifier)('T')
            PsiElement(])(']')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: f
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('f')
                PsiWhiteSpace(' ')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  FunctionalType: (T,String) => String
                    TupleType: (T,String)
                      PsiElement(()('(')
                      TypesList
                        SimpleType: T
                          CodeReferenceElement: T
                            PsiElement(identifier)('T')
                        PsiElement(,)(',')
                        SimpleType: String
                          CodeReferenceElement: String
                            PsiElement(identifier)('String')
                      PsiElement())(')')
                    PsiWhiteSpace(' ')
                    PsiElement(=>)('=>')
                    PsiWhiteSpace(' ')
                    SimpleType: String
                      CodeReferenceElement: String
                        PsiElement(identifier)('String')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: test1.Foo[T,String]
            SimpleType: test1.Foo
              CodeReferenceElement: test1.Foo
                CodeReferenceElement: test1
                  PsiElement(identifier)('test1')
                PsiElement(.)('.')
                PsiElement(identifier)('Foo')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: T
                CodeReferenceElement: T
                  PsiElement(identifier)('T')
              PsiElement(,)(',')
              SimpleType: String
                CodeReferenceElement: String
                  PsiElement(identifier)('String')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: Foo
              PsiElement(identifier)('Foo')
            ArgumentList
              PsiElement(()('(')
              ReferenceExpression: f
                PsiElement(identifier)('f')
              PsiElement())(')')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: main
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('main')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: args
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('args')
                PsiWhiteSpace(' ')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  ParametrizedType: Array[String]
                    SimpleType: Array
                      CodeReferenceElement: Array
                        PsiElement(identifier)('Array')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: String
                        CodeReferenceElement: String
                          PsiElement(identifier)('String')
                      PsiElement(])(']')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Unit
            CodeReferenceElement: Unit
              PsiElement(identifier)('Unit')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          BlockExpression
            PsiElement({)('{')
            PsiWhiteSpace('\n    ')
            ScPatternDefinition: f
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              ListOfPatterns
                ReferencePattern: f
                  PsiElement(identifier)('f')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              FunctionExpression
                Parameters
                  ParametersClause
                    PsiElement(()('(')
                    Parameter: x
                      AnnotationsList
                        <empty list>
                      PsiElement(identifier)('x')
                      PsiElement(:)(':')
                      ParameterType
                        SimpleType: Int
                          CodeReferenceElement: Int
                            PsiElement(identifier)('Int')
                    PsiElement(,)(',')
                    Parameter: s
                      AnnotationsList
                        <empty list>
                      PsiElement(identifier)('s')
                      PsiElement(:)(':')
                      ParameterType
                        SimpleType: String
                          CodeReferenceElement: String
                            PsiElement(identifier)('String')
                    PsiElement())(')')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                InfixExpression
                  ReferenceExpression: s
                    PsiElement(identifier)('s')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: +
                    PsiElement(identifier)('+')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: x
                    PsiElement(identifier)('x')
            PsiWhiteSpace('\n    ')
            MethodCall
              ReferenceExpression: println
                PsiElement(identifier)('println')
              ArgumentList
                PsiElement(()('(')
                MethodCall
                  ReferenceExpression: f
                    PsiElement(identifier)('f')
                  ArgumentList
                    PsiElement(()('(')
                    IntegerLiteral
                      PsiElement(integer)('1')
                    PsiElement())(')')
                PsiElement())(')')
            PsiWhiteSpace('\n    ')
            UnitExpression
              PsiElement(()('(')
              PsiElement())(')')
            PsiWhiteSpace('\n  ')
            PsiElement(})('}')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n')
  ScObject: Main
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Main')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: main
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('main')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: args
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('args')
                PsiWhiteSpace(' ')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  ParametrizedType: Array[String]
                    SimpleType: Array
                      CodeReferenceElement: Array
                        PsiElement(identifier)('Array')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: String
                        CodeReferenceElement: String
                          PsiElement(identifier)('String')
                      PsiElement(])(']')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Unit
            CodeReferenceElement: Unit
              PsiElement(identifier)('Unit')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          BlockExpression
            PsiElement({)('{')
            PsiWhiteSpace('\n    ')
            ScPatternDefinition: fn
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              ListOfPatterns
                ReferencePattern: fn
                  PsiElement(identifier)('fn')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              FunctionExpression
                Parameters
                  ParametersClause
                    PsiElement(()('(')
                    Parameter: a
                      AnnotationsList
                        <empty list>
                      PsiElement(identifier)('a')
                      PsiWhiteSpace(' ')
                      PsiElement(:)(':')
                      PsiWhiteSpace(' ')
                      ParameterType
                        SimpleType: Int
                          CodeReferenceElement: Int
                            PsiElement(identifier)('Int')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    Parameter: str
                      AnnotationsList
                        <empty list>
                      PsiElement(identifier)('str')
                      PsiWhiteSpace(' ')
                      PsiElement(:)(':')
                      PsiWhiteSpace(' ')
                      ParameterType
                        SimpleType: String
                          CodeReferenceElement: String
                            PsiElement(identifier)('String')
                    PsiElement())(')')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                InfixExpression
                  InfixExpression
                    InfixExpression
                      StringLiteral
                        PsiElement(string content)('"a: "')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: +
                        PsiElement(identifier)('+')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: a
                        PsiElement(identifier)('a')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: +
                      PsiElement(identifier)('+')
                    PsiWhiteSpace(' ')
                    StringLiteral
                      PsiElement(string content)('", str: "')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: +
                    PsiElement(identifier)('+')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: str
                    PsiElement(identifier)('str')
            PsiWhiteSpace('\n    ')
            ScFunctionDefinition: fx
              AnnotationsList
                <empty list>
              Modifiers
                PsiElement(implicit)('implicit')
              PsiWhiteSpace(' ')
              PsiElement(def)('def')
              PsiWhiteSpace(' ')
              PsiElement(identifier)('fx')
              TypeParameterClause
                PsiElement([)('[')
                TypeParameter: T
                  PsiElement(identifier)('T')
                PsiElement(])(']')
              Parameters
                ParametersClause
                  PsiElement(()('(')
                  Parameter: f
                    AnnotationsList
                      <empty list>
                    Modifiers
                      <empty list>
                    PsiElement(identifier)('f')
                    PsiWhiteSpace(' ')
                    PsiElement(:)(':')
                    PsiWhiteSpace(' ')
                    ParameterType
                      FunctionalType: (T,String) => String
                        TupleType: (T,String)
                          PsiElement(()('(')
                          TypesList
                            SimpleType: T
                              CodeReferenceElement: T
                                PsiElement(identifier)('T')
                            PsiElement(,)(',')
                            SimpleType: String
                              CodeReferenceElement: String
                                PsiElement(identifier)('String')
                          PsiElement())(')')
                        PsiWhiteSpace(' ')
                        PsiElement(=>)('=>')
                        PsiWhiteSpace(' ')
                        SimpleType: String
                          CodeReferenceElement: String
                            PsiElement(identifier)('String')
                  PsiElement())(')')
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              FunctionalType: T => String
                SimpleType: T
                  CodeReferenceElement: T
                    PsiElement(identifier)('T')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                SimpleType: String
                  CodeReferenceElement: String
                    PsiElement(identifier)('String')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              FunctionExpression
                Parameters
                  ParametersClause
                    PsiElement(()('(')
                    Parameter: x
                      AnnotationsList
                        <empty list>
                      PsiElement(identifier)('x')
                      PsiElement(:)(':')
                      ParameterType
                        SimpleType: T
                          CodeReferenceElement: T
                            PsiElement(identifier)('T')
                    PsiElement())(')')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                MethodCall
                  ReferenceExpression: f
                    PsiElement(identifier)('f')
                  ArgumentList
                    PsiElement(()('(')
                    ReferenceExpression: x
                      PsiElement(identifier)('x')
                    PsiElement(,)(',')
                    NullLiteral
                      PsiElement(null)('null')
                    PsiElement())(')')
            PsiWhiteSpace('\n    ')
            MethodCall
              ReferenceExpression: println
                PsiElement(identifier)('println')
              ArgumentList
                PsiElement(()('(')
                MethodCall
                  ReferenceExpression: fn
                    PsiElement(identifier)('fn')
                  ArgumentList
                    PsiElement(()('(')
                    IntegerLiteral
                      PsiElement(integer)('1')
                    PsiElement())(')')
                PsiElement())(')')
            PsiWhiteSpace('\n    ')
            UnitExpression
              PsiElement(()('(')
              PsiElement())(')')
            PsiWhiteSpace('\n  ')
            PsiElement(})('}')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScObject: TestWithAutoTupling
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('TestWithAutoTupling')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: AToRichA
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(implicit)('implicit')
          PsiWhiteSpace(' ')
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('AToRichA')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: a
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('a')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: A
                    CodeReferenceElement: A
                      PsiElement(identifier)('A')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: RichA
            CodeReferenceElement: RichA
              PsiElement(identifier)('RichA')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ScNewTemplateDefinition: <anonymous>
            PsiElement(new)('new')
            PsiWhiteSpace(' ')
            ExtendsBlock
              TemplateParents
                ConstructorInvocation
                  SimpleType: RichA
                    CodeReferenceElement: RichA
                      PsiElement(identifier)('RichA')
        PsiWhiteSpace('\n\n  ')
        ScPatternDefinition: a
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: a
              PsiElement(identifier)('a')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ScNewTemplateDefinition: <anonymous>
            PsiElement(new)('new')
            PsiWhiteSpace(' ')
            ExtendsBlock
              TemplateParents
                ConstructorInvocation
                  SimpleType: A
                    CodeReferenceElement: A
                      PsiElement(identifier)('A')
        PsiWhiteSpace('\n  ')
        MethodCall
          ReferenceExpression: a.foo
            ReferenceExpression: a
              PsiElement(identifier)('a')
            PsiElement(.)('.')
            PsiElement(identifier)('foo')
          ArgumentList
            PsiElement(()('(')
            PsiElement())(')')
        PsiWhiteSpace('\n  ')
        MethodCall
          ReferenceExpression: a.foo
            ReferenceExpression: a
              PsiElement(identifier)('a')
            PsiElement(.)('.')
            PsiElement(identifier)('foo')
          ArgumentList
            PsiElement(()('(')
            IntegerLiteral
              PsiElement(integer)('1')
            PsiElement())(')')
        PsiWhiteSpace('\n\n  ')
        MethodCall
          ReferenceExpression: a.foo
            ReferenceExpression: a
              PsiElement(identifier)('a')
            PsiElement(.)('.')
            PsiElement(identifier)('foo')
          ArgumentList
            PsiElement(()('(')
            StringLiteral
              PsiElement(string content)('""')
            PsiElement())(')')
        PsiWhiteSpace('       ')
        PsiComment(comment)('// Without implicits, a type error regarding invalid argument types is generated at `""`. This is')
        PsiWhiteSpace('\n                  ')
        PsiComment(comment)('// the same position as an argument, so the 'second try' typing with an Implicit View is tried,')
        PsiWhiteSpace('\n                  ')
        PsiComment(comment)('// and AToRichA(a).foo("") is found.')
        PsiWhiteSpace('\n                  ')
        PsiComment(comment)('//')
        PsiWhiteSpace('\n                  ')
        PsiComment(comment)('// My reading of the spec "7.3 Views" is that `a.foo` denotes a member of `a`, so the view should')
        PsiWhiteSpace('\n                  ')
        PsiComment(comment)('// not be triggered.')
        PsiWhiteSpace('\n                  ')
        PsiComment(comment)('//')
        PsiWhiteSpace('\n                  ')
        PsiComment(comment)('// But perhaps the implementation was changed to solve See https://lampsvn.epfl.ch/trac/scala/ticket/1756')
        PsiWhiteSpace('\n\n  ')
        MethodCall
          ReferenceExpression: a.foo
            ReferenceExpression: a
              PsiElement(identifier)('a')
            PsiElement(.)('.')
            PsiElement(identifier)('foo')
          ArgumentList
            PsiElement(()('(')
            StringLiteral
              PsiElement(string content)('"a"')
            PsiElement(,)(',')
            PsiWhiteSpace(' ')
            StringLiteral
              PsiElement(string content)('"b"')
            PsiElement())(')')
        PsiWhiteSpace(' ')
        PsiComment(comment)('// Without implicits, a type error regarding invalid arity is generated at `foo(<error>"", "")`.')
        PsiWhiteSpace('\n                  ')
        PsiComment(comment)('// Typers#tryTypedApply:3274 only checks if the error is as the same position as `foo`, `"a"`, or `"b"`.')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
