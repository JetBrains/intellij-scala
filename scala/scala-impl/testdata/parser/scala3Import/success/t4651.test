object Test {
  def analyze(x: Any) = x match {
    case s: String => println("It's a string: " + s)
    case 1 => println("It's a one")
    case (a: Int, b) => println("It's a pair of and int " + a +
                                " and something " + b)
    case 1 :: 2 :: _ => println("It's a list starting with 1, 2")
    case List(a, b, c) => println("It's a three-element list with " +
                                  a + ", " + b + ", " + c)
    case _ => println("It's something different")
  }
}
-----
ScalaFile
  ScObject: Test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: analyze
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('analyze')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: x
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Any
                    CodeReferenceElement: Any
                      PsiElement(identifier)('Any')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MatchStatement
            ReferenceExpression: x
              PsiElement(identifier)('x')
            PsiWhiteSpace(' ')
            PsiElement(match)('match')
            PsiWhiteSpace(' ')
            PsiElement({)('{')
            PsiWhiteSpace('\n    ')
            CaseClauses
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                Scala3 TypedPattern
                  ReferencePattern: s
                    PsiElement(identifier)('s')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  TypePattern
                    SimpleType: String
                      CodeReferenceElement: String
                        PsiElement(identifier)('String')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                BlockOfExpressions
                  MethodCall
                    ReferenceExpression: println
                      PsiElement(identifier)('println')
                    ArgumentList
                      PsiElement(()('(')
                      InfixExpression
                        StringLiteral
                          PsiElement(string content)('"It's a string: "')
                        PsiWhiteSpace(' ')
                        ReferenceExpression: +
                          PsiElement(identifier)('+')
                        PsiWhiteSpace(' ')
                        ReferenceExpression: s
                          PsiElement(identifier)('s')
                      PsiElement())(')')
              PsiWhiteSpace('\n    ')
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                LiteralPattern
                  IntegerLiteral
                    PsiElement(integer)('1')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                BlockOfExpressions
                  MethodCall
                    ReferenceExpression: println
                      PsiElement(identifier)('println')
                    ArgumentList
                      PsiElement(()('(')
                      StringLiteral
                        PsiElement(string content)('"It's a one"')
                      PsiElement())(')')
              PsiWhiteSpace('\n    ')
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                TuplePattern
                  PsiElement(()('(')
                  ArgumentPatterns
                    Scala3 TypedPattern
                      ReferencePattern: a
                        PsiElement(identifier)('a')
                      PsiElement(:)(':')
                      PsiWhiteSpace(' ')
                      TypePattern
                        SimpleType: Int
                          CodeReferenceElement: Int
                            PsiElement(identifier)('Int')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    ReferencePattern: b
                      PsiElement(identifier)('b')
                  PsiElement())(')')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                BlockOfExpressions
                  MethodCall
                    ReferenceExpression: println
                      PsiElement(identifier)('println')
                    ArgumentList
                      PsiElement(()('(')
                      InfixExpression
                        InfixExpression
                          InfixExpression
                            StringLiteral
                              PsiElement(string content)('"It's a pair of and int "')
                            PsiWhiteSpace(' ')
                            ReferenceExpression: +
                              PsiElement(identifier)('+')
                            PsiWhiteSpace(' ')
                            ReferenceExpression: a
                              PsiElement(identifier)('a')
                          PsiWhiteSpace(' ')
                          ReferenceExpression: +
                            PsiElement(identifier)('+')
                          PsiWhiteSpace('\n                                ')
                          StringLiteral
                            PsiElement(string content)('" and something "')
                        PsiWhiteSpace(' ')
                        ReferenceExpression: +
                          PsiElement(identifier)('+')
                        PsiWhiteSpace(' ')
                        ReferenceExpression: b
                          PsiElement(identifier)('b')
                      PsiElement())(')')
              PsiWhiteSpace('\n    ')
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                InfixPattern
                  LiteralPattern
                    IntegerLiteral
                      PsiElement(integer)('1')
                  PsiWhiteSpace(' ')
                  CodeReferenceElement: ::
                    PsiElement(identifier)('::')
                  PsiWhiteSpace(' ')
                  InfixPattern
                    LiteralPattern
                      IntegerLiteral
                        PsiElement(integer)('2')
                    PsiWhiteSpace(' ')
                    CodeReferenceElement: ::
                      PsiElement(identifier)('::')
                    PsiWhiteSpace(' ')
                    WildcardPattern
                      PsiElement(_)('_')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                BlockOfExpressions
                  MethodCall
                    ReferenceExpression: println
                      PsiElement(identifier)('println')
                    ArgumentList
                      PsiElement(()('(')
                      StringLiteral
                        PsiElement(string content)('"It's a list starting with 1, 2"')
                      PsiElement())(')')
              PsiWhiteSpace('\n    ')
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                ConstructorPattern
                  CodeReferenceElement: List
                    PsiElement(identifier)('List')
                  Pattern Argument List
                    PsiElement(()('(')
                    ReferencePattern: a
                      PsiElement(identifier)('a')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    ReferencePattern: b
                      PsiElement(identifier)('b')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    ReferencePattern: c
                      PsiElement(identifier)('c')
                    PsiElement())(')')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                BlockOfExpressions
                  MethodCall
                    ReferenceExpression: println
                      PsiElement(identifier)('println')
                    ArgumentList
                      PsiElement(()('(')
                      InfixExpression
                        InfixExpression
                          InfixExpression
                            InfixExpression
                              InfixExpression
                                StringLiteral
                                  PsiElement(string content)('"It's a three-element list with "')
                                PsiWhiteSpace(' ')
                                ReferenceExpression: +
                                  PsiElement(identifier)('+')
                                PsiWhiteSpace('\n                                  ')
                                ReferenceExpression: a
                                  PsiElement(identifier)('a')
                              PsiWhiteSpace(' ')
                              ReferenceExpression: +
                                PsiElement(identifier)('+')
                              PsiWhiteSpace(' ')
                              StringLiteral
                                PsiElement(string content)('", "')
                            PsiWhiteSpace(' ')
                            ReferenceExpression: +
                              PsiElement(identifier)('+')
                            PsiWhiteSpace(' ')
                            ReferenceExpression: b
                              PsiElement(identifier)('b')
                          PsiWhiteSpace(' ')
                          ReferenceExpression: +
                            PsiElement(identifier)('+')
                          PsiWhiteSpace(' ')
                          StringLiteral
                            PsiElement(string content)('", "')
                        PsiWhiteSpace(' ')
                        ReferenceExpression: +
                          PsiElement(identifier)('+')
                        PsiWhiteSpace(' ')
                        ReferenceExpression: c
                          PsiElement(identifier)('c')
                      PsiElement())(')')
              PsiWhiteSpace('\n    ')
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                WildcardPattern
                  PsiElement(_)('_')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                BlockOfExpressions
                  MethodCall
                    ReferenceExpression: println
                      PsiElement(identifier)('println')
                    ArgumentList
                      PsiElement(()('(')
                      StringLiteral
                        PsiElement(string content)('"It's something different"')
                      PsiElement())(')')
            PsiWhiteSpace('\n  ')
            PsiElement(})('}')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
