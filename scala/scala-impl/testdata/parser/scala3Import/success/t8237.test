import scala.language.higherKinds

object TestExplicit {
  trait TC[A]
  def fTt[A,E[X] <: List[X]](a: A)(implicit tt: TC[E[A]]) = a
  implicit def tc[T]: TC[T] = ???

  // Typechecking results in SOE in TypeVar.isGround
  fTt(1)(tc)
  // fun = TestExplicit.this.fTt[Int, E](1)
  // args = TestExplicit.this.tc[E[Int]]
  // argTpes.head.instantiateTypeParams = TC[?E#1[Int]]
  // formals.head.instantiateTypeParams = TC[?E#2[Int]]
  //   (where ?E#1 and ?E#2 as distinct AppliedTypeVars that resulted
  //    from separate applications of type args to the same HKTypeVar, ?E)
  //
  // As we check if the argument conforms to the formal, we would have
  // AppliedTypeVars sharing the same TypeConstraints on the LHS and RHS,
  // which leads to a cyclic constraint.
}

object TestImplicit    {
  trait TC[A]
  def fTt[A,E[X] <: List[X]](a: A)(implicit tt: TC[E[A]]) = a
  implicit def tc[T]: TC[T] = ???

  // Oddly enough, this one works.
  fTt(1)
}
-----
ScalaFile
  ScImportStatement
    PsiElement(import)('import')
    PsiWhiteSpace(' ')
    ImportExpression
      CodeReferenceElement: scala.language.higherKinds
        CodeReferenceElement: scala.language
          CodeReferenceElement: scala
            PsiElement(identifier)('scala')
          PsiElement(.)('.')
          PsiElement(identifier)('language')
        PsiElement(.)('.')
        PsiElement(identifier)('higherKinds')
  PsiWhiteSpace('\n\n')
  ScObject: TestExplicit
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('TestExplicit')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScTrait: TC
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(trait)('trait')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('TC')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: A
              PsiElement(identifier)('A')
            PsiElement(])(']')
          ExtendsBlock
            <empty list>
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: fTt
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('fTt')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: A
              PsiElement(identifier)('A')
            PsiElement(,)(',')
            TypeParameter: E
              PsiElement(identifier)('E')
              TypeParameterClause
                PsiElement([)('[')
                TypeParameter: X
                  PsiElement(identifier)('X')
                PsiElement(])(']')
              PsiWhiteSpace(' ')
              PsiElement(<:)('<:')
              PsiWhiteSpace(' ')
              ParametrizedType: List[X]
                SimpleType: List
                  CodeReferenceElement: List
                    PsiElement(identifier)('List')
                TypeArgumentsList
                  PsiElement([)('[')
                  SimpleType: X
                    CodeReferenceElement: X
                      PsiElement(identifier)('X')
                  PsiElement(])(']')
            PsiElement(])(']')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: a
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('a')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: A
                    CodeReferenceElement: A
                      PsiElement(identifier)('A')
              PsiElement())(')')
            ParametersClause
              PsiElement(()('(')
              PsiElement(implicit)('implicit')
              PsiWhiteSpace(' ')
              Parameter: tt
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('tt')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  ParametrizedType: TC[E[A]]
                    SimpleType: TC
                      CodeReferenceElement: TC
                        PsiElement(identifier)('TC')
                    TypeArgumentsList
                      PsiElement([)('[')
                      ParametrizedType: E[A]
                        SimpleType: E
                          CodeReferenceElement: E
                            PsiElement(identifier)('E')
                        TypeArgumentsList
                          PsiElement([)('[')
                          SimpleType: A
                            CodeReferenceElement: A
                              PsiElement(identifier)('A')
                          PsiElement(])(']')
                      PsiElement(])(']')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: a
            PsiElement(identifier)('a')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: tc
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(implicit)('implicit')
          PsiWhiteSpace(' ')
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('tc')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: T
              PsiElement(identifier)('T')
            PsiElement(])(']')
          Parameters
            <empty list>
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: TC[T]
            SimpleType: TC
              CodeReferenceElement: TC
                PsiElement(identifier)('TC')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: T
                CodeReferenceElement: T
                  PsiElement(identifier)('T')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: ???
            PsiElement(identifier)('???')
        PsiWhiteSpace('\n\n  ')
        PsiComment(comment)('// Typechecking results in SOE in TypeVar.isGround')
        PsiWhiteSpace('\n  ')
        MethodCall
          MethodCall
            ReferenceExpression: fTt
              PsiElement(identifier)('fTt')
            ArgumentList
              PsiElement(()('(')
              IntegerLiteral
                PsiElement(integer)('1')
              PsiElement())(')')
          ArgumentList
            PsiElement(()('(')
            ReferenceExpression: tc
              PsiElement(identifier)('tc')
            PsiElement())(')')
        PsiWhiteSpace('\n  ')
        PsiComment(comment)('// fun = TestExplicit.this.fTt[Int, E](1)')
        PsiWhiteSpace('\n  ')
        PsiComment(comment)('// args = TestExplicit.this.tc[E[Int]]')
        PsiWhiteSpace('\n  ')
        PsiComment(comment)('// argTpes.head.instantiateTypeParams = TC[?E#1[Int]]')
        PsiWhiteSpace('\n  ')
        PsiComment(comment)('// formals.head.instantiateTypeParams = TC[?E#2[Int]]')
        PsiWhiteSpace('\n  ')
        PsiComment(comment)('//   (where ?E#1 and ?E#2 as distinct AppliedTypeVars that resulted')
        PsiWhiteSpace('\n  ')
        PsiComment(comment)('//    from separate applications of type args to the same HKTypeVar, ?E)')
        PsiWhiteSpace('\n  ')
        PsiComment(comment)('//')
        PsiWhiteSpace('\n  ')
        PsiComment(comment)('// As we check if the argument conforms to the formal, we would have')
        PsiWhiteSpace('\n  ')
        PsiComment(comment)('// AppliedTypeVars sharing the same TypeConstraints on the LHS and RHS,')
        PsiWhiteSpace('\n  ')
        PsiComment(comment)('// which leads to a cyclic constraint.')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScObject: TestImplicit
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('TestImplicit')
    PsiWhiteSpace('    ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScTrait: TC
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(trait)('trait')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('TC')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: A
              PsiElement(identifier)('A')
            PsiElement(])(']')
          ExtendsBlock
            <empty list>
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: fTt
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('fTt')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: A
              PsiElement(identifier)('A')
            PsiElement(,)(',')
            TypeParameter: E
              PsiElement(identifier)('E')
              TypeParameterClause
                PsiElement([)('[')
                TypeParameter: X
                  PsiElement(identifier)('X')
                PsiElement(])(']')
              PsiWhiteSpace(' ')
              PsiElement(<:)('<:')
              PsiWhiteSpace(' ')
              ParametrizedType: List[X]
                SimpleType: List
                  CodeReferenceElement: List
                    PsiElement(identifier)('List')
                TypeArgumentsList
                  PsiElement([)('[')
                  SimpleType: X
                    CodeReferenceElement: X
                      PsiElement(identifier)('X')
                  PsiElement(])(']')
            PsiElement(])(']')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: a
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('a')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: A
                    CodeReferenceElement: A
                      PsiElement(identifier)('A')
              PsiElement())(')')
            ParametersClause
              PsiElement(()('(')
              PsiElement(implicit)('implicit')
              PsiWhiteSpace(' ')
              Parameter: tt
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('tt')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  ParametrizedType: TC[E[A]]
                    SimpleType: TC
                      CodeReferenceElement: TC
                        PsiElement(identifier)('TC')
                    TypeArgumentsList
                      PsiElement([)('[')
                      ParametrizedType: E[A]
                        SimpleType: E
                          CodeReferenceElement: E
                            PsiElement(identifier)('E')
                        TypeArgumentsList
                          PsiElement([)('[')
                          SimpleType: A
                            CodeReferenceElement: A
                              PsiElement(identifier)('A')
                          PsiElement(])(']')
                      PsiElement(])(']')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: a
            PsiElement(identifier)('a')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: tc
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(implicit)('implicit')
          PsiWhiteSpace(' ')
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('tc')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: T
              PsiElement(identifier)('T')
            PsiElement(])(']')
          Parameters
            <empty list>
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: TC[T]
            SimpleType: TC
              CodeReferenceElement: TC
                PsiElement(identifier)('TC')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: T
                CodeReferenceElement: T
                  PsiElement(identifier)('T')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: ???
            PsiElement(identifier)('???')
        PsiWhiteSpace('\n\n  ')
        PsiComment(comment)('// Oddly enough, this one works.')
        PsiWhiteSpace('\n  ')
        MethodCall
          ReferenceExpression: fTt
            PsiElement(identifier)('fTt')
          ArgumentList
            PsiElement(()('(')
            IntegerLiteral
              PsiElement(integer)('1')
            PsiElement())(')')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
