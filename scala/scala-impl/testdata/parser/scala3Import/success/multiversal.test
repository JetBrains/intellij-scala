object Test {
  import scala.CanEqual

  given [X, Y](using CanEqual[X, Y]): CanEqual[List[X], List[Y]] = CanEqual.derived

  val b: Byte = 1
  val c: Char = 2
  val i: Int = 3
  val l: Long = 4L
  val ii: Integer = i

  List(b) == List(l)
  List(l) == List(c)
  List(b) != List(c)
  List(i) == List(l)
  List(i) == List(ii)
  List(ii) == List(l)
  List(b) == List(ii)
  List(ii) == List(l)

  import reflect.ClassTag
  val BooleanTag: ClassTag[Boolean]      = ClassTag.Boolean

  class Setting[T: ClassTag] {
    def doSet() = implicitly[ClassTag[T]] match {
      case BooleanTag =>
      case _ =>
    }
  }
}
-----
ScalaFile
  ScObject: Test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScImportStatement
          PsiElement(import)('import')
          PsiWhiteSpace(' ')
          ImportExpression
            CodeReferenceElement: scala.CanEqual
              CodeReferenceElement: scala
                PsiElement(identifier)('scala')
              PsiElement(.)('.')
              PsiElement(identifier)('CanEqual')
        PsiWhiteSpace('\n\n  ')
        ScGivenAliasDefinition: given_CanEqual_List_List
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(given)('given')
          PsiWhiteSpace(' ')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: X
              PsiElement(identifier)('X')
            PsiElement(,)(',')
            PsiWhiteSpace(' ')
            TypeParameter: Y
              PsiElement(identifier)('Y')
            PsiElement(])(']')
          Parameters
            ParametersClause
              PsiElement(()('(')
              PsiElement(using)('using')
              PsiWhiteSpace(' ')
              Parameter: <anonymous>
                ParameterType
                  ParametrizedType: CanEqual[X, Y]
                    SimpleType: CanEqual
                      CodeReferenceElement: CanEqual
                        PsiElement(identifier)('CanEqual')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: X
                        CodeReferenceElement: X
                          PsiElement(identifier)('X')
                      PsiElement(,)(',')
                      PsiWhiteSpace(' ')
                      SimpleType: Y
                        CodeReferenceElement: Y
                          PsiElement(identifier)('Y')
                      PsiElement(])(']')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: CanEqual[List[X], List[Y]]
            SimpleType: CanEqual
              CodeReferenceElement: CanEqual
                PsiElement(identifier)('CanEqual')
            TypeArgumentsList
              PsiElement([)('[')
              ParametrizedType: List[X]
                SimpleType: List
                  CodeReferenceElement: List
                    PsiElement(identifier)('List')
                TypeArgumentsList
                  PsiElement([)('[')
                  SimpleType: X
                    CodeReferenceElement: X
                      PsiElement(identifier)('X')
                  PsiElement(])(']')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              ParametrizedType: List[Y]
                SimpleType: List
                  CodeReferenceElement: List
                    PsiElement(identifier)('List')
                TypeArgumentsList
                  PsiElement([)('[')
                  SimpleType: Y
                    CodeReferenceElement: Y
                      PsiElement(identifier)('Y')
                  PsiElement(])(']')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: CanEqual.derived
            ReferenceExpression: CanEqual
              PsiElement(identifier)('CanEqual')
            PsiElement(.)('.')
            PsiElement(identifier)('derived')
        PsiWhiteSpace('\n\n  ')
        ScPatternDefinition: b
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: b
              PsiElement(identifier)('b')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Byte
            CodeReferenceElement: Byte
              PsiElement(identifier)('Byte')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          IntegerLiteral
            PsiElement(integer)('1')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: c
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: c
              PsiElement(identifier)('c')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Char
            CodeReferenceElement: Char
              PsiElement(identifier)('Char')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          IntegerLiteral
            PsiElement(integer)('2')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: i
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: i
              PsiElement(identifier)('i')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Int
            CodeReferenceElement: Int
              PsiElement(identifier)('Int')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          IntegerLiteral
            PsiElement(integer)('3')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: l
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: l
              PsiElement(identifier)('l')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Long
            CodeReferenceElement: Long
              PsiElement(identifier)('Long')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          LongLiteral
            PsiElement(long)('4L')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: ii
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: ii
              PsiElement(identifier)('ii')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Integer
            CodeReferenceElement: Integer
              PsiElement(identifier)('Integer')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: i
            PsiElement(identifier)('i')
        PsiWhiteSpace('\n\n  ')
        InfixExpression
          MethodCall
            ReferenceExpression: List
              PsiElement(identifier)('List')
            ArgumentList
              PsiElement(()('(')
              ReferenceExpression: b
                PsiElement(identifier)('b')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          ReferenceExpression: ==
            PsiElement(identifier)('==')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: List
              PsiElement(identifier)('List')
            ArgumentList
              PsiElement(()('(')
              ReferenceExpression: l
                PsiElement(identifier)('l')
              PsiElement())(')')
        PsiWhiteSpace('\n  ')
        InfixExpression
          MethodCall
            ReferenceExpression: List
              PsiElement(identifier)('List')
            ArgumentList
              PsiElement(()('(')
              ReferenceExpression: l
                PsiElement(identifier)('l')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          ReferenceExpression: ==
            PsiElement(identifier)('==')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: List
              PsiElement(identifier)('List')
            ArgumentList
              PsiElement(()('(')
              ReferenceExpression: c
                PsiElement(identifier)('c')
              PsiElement())(')')
        PsiWhiteSpace('\n  ')
        InfixExpression
          MethodCall
            ReferenceExpression: List
              PsiElement(identifier)('List')
            ArgumentList
              PsiElement(()('(')
              ReferenceExpression: b
                PsiElement(identifier)('b')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          ReferenceExpression: !=
            PsiElement(identifier)('!=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: List
              PsiElement(identifier)('List')
            ArgumentList
              PsiElement(()('(')
              ReferenceExpression: c
                PsiElement(identifier)('c')
              PsiElement())(')')
        PsiWhiteSpace('\n  ')
        InfixExpression
          MethodCall
            ReferenceExpression: List
              PsiElement(identifier)('List')
            ArgumentList
              PsiElement(()('(')
              ReferenceExpression: i
                PsiElement(identifier)('i')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          ReferenceExpression: ==
            PsiElement(identifier)('==')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: List
              PsiElement(identifier)('List')
            ArgumentList
              PsiElement(()('(')
              ReferenceExpression: l
                PsiElement(identifier)('l')
              PsiElement())(')')
        PsiWhiteSpace('\n  ')
        InfixExpression
          MethodCall
            ReferenceExpression: List
              PsiElement(identifier)('List')
            ArgumentList
              PsiElement(()('(')
              ReferenceExpression: i
                PsiElement(identifier)('i')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          ReferenceExpression: ==
            PsiElement(identifier)('==')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: List
              PsiElement(identifier)('List')
            ArgumentList
              PsiElement(()('(')
              ReferenceExpression: ii
                PsiElement(identifier)('ii')
              PsiElement())(')')
        PsiWhiteSpace('\n  ')
        InfixExpression
          MethodCall
            ReferenceExpression: List
              PsiElement(identifier)('List')
            ArgumentList
              PsiElement(()('(')
              ReferenceExpression: ii
                PsiElement(identifier)('ii')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          ReferenceExpression: ==
            PsiElement(identifier)('==')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: List
              PsiElement(identifier)('List')
            ArgumentList
              PsiElement(()('(')
              ReferenceExpression: l
                PsiElement(identifier)('l')
              PsiElement())(')')
        PsiWhiteSpace('\n  ')
        InfixExpression
          MethodCall
            ReferenceExpression: List
              PsiElement(identifier)('List')
            ArgumentList
              PsiElement(()('(')
              ReferenceExpression: b
                PsiElement(identifier)('b')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          ReferenceExpression: ==
            PsiElement(identifier)('==')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: List
              PsiElement(identifier)('List')
            ArgumentList
              PsiElement(()('(')
              ReferenceExpression: ii
                PsiElement(identifier)('ii')
              PsiElement())(')')
        PsiWhiteSpace('\n  ')
        InfixExpression
          MethodCall
            ReferenceExpression: List
              PsiElement(identifier)('List')
            ArgumentList
              PsiElement(()('(')
              ReferenceExpression: ii
                PsiElement(identifier)('ii')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          ReferenceExpression: ==
            PsiElement(identifier)('==')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: List
              PsiElement(identifier)('List')
            ArgumentList
              PsiElement(()('(')
              ReferenceExpression: l
                PsiElement(identifier)('l')
              PsiElement())(')')
        PsiWhiteSpace('\n\n  ')
        ScImportStatement
          PsiElement(import)('import')
          PsiWhiteSpace(' ')
          ImportExpression
            CodeReferenceElement: reflect.ClassTag
              CodeReferenceElement: reflect
                PsiElement(identifier)('reflect')
              PsiElement(.)('.')
              PsiElement(identifier)('ClassTag')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: BooleanTag
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: BooleanTag
              PsiElement(identifier)('BooleanTag')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: ClassTag[Boolean]
            SimpleType: ClassTag
              CodeReferenceElement: ClassTag
                PsiElement(identifier)('ClassTag')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: Boolean
                CodeReferenceElement: Boolean
                  PsiElement(identifier)('Boolean')
              PsiElement(])(']')
          PsiWhiteSpace('      ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: ClassTag.Boolean
            ReferenceExpression: ClassTag
              PsiElement(identifier)('ClassTag')
            PsiElement(.)('.')
            PsiElement(identifier)('Boolean')
        PsiWhiteSpace('\n\n  ')
        ScClass: Setting
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(class)('class')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Setting')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: T
              PsiElement(identifier)('T')
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              SimpleType: ClassTag
                CodeReferenceElement: ClassTag
                  PsiElement(identifier)('ClassTag')
            PsiElement(])(']')
          PrimaryConstructor
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            Parameters
              <empty list>
          PsiWhiteSpace(' ')
          ExtendsBlock
            ScTemplateBody
              PsiElement({)('{')
              PsiWhiteSpace('\n    ')
              ScFunctionDefinition: doSet
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(def)('def')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('doSet')
                Parameters
                  ParametersClause
                    PsiElement(()('(')
                    PsiElement())(')')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                MatchStatement
                  GenericCall
                    ReferenceExpression: implicitly
                      PsiElement(identifier)('implicitly')
                    TypeArgumentsList
                      PsiElement([)('[')
                      ParametrizedType: ClassTag[T]
                        SimpleType: ClassTag
                          CodeReferenceElement: ClassTag
                            PsiElement(identifier)('ClassTag')
                        TypeArgumentsList
                          PsiElement([)('[')
                          SimpleType: T
                            CodeReferenceElement: T
                              PsiElement(identifier)('T')
                          PsiElement(])(']')
                      PsiElement(])(']')
                  PsiWhiteSpace(' ')
                  PsiElement(match)('match')
                  PsiWhiteSpace(' ')
                  PsiElement({)('{')
                  PsiWhiteSpace('\n      ')
                  CaseClauses
                    CaseClause
                      PsiElement(case)('case')
                      PsiWhiteSpace(' ')
                      StableElementPattern
                        ReferenceExpression: BooleanTag
                          PsiElement(identifier)('BooleanTag')
                      PsiWhiteSpace(' ')
                      PsiElement(=>)('=>')
                      BlockOfExpressions
                        <empty list>
                    PsiWhiteSpace('\n      ')
                    CaseClause
                      PsiElement(case)('case')
                      PsiWhiteSpace(' ')
                      WildcardPattern
                        PsiElement(_)('_')
                      PsiWhiteSpace(' ')
                      PsiElement(=>)('=>')
                      BlockOfExpressions
                        <empty list>
                  PsiWhiteSpace('\n    ')
                  PsiElement(})('}')
              PsiWhiteSpace('\n  ')
              PsiElement(})('}')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
