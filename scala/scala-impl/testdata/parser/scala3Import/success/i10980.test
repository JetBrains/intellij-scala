class A:
  val x: AnyRef = Object()
  val y: AnyRef = Object()

@main def m: Unit =
  val a = new A
  val b: a.x.type = a.x
  val c: A { val x: a.x.type } = a
  val d: A { val x: a.x.type;  val y: a.y.type } = a
-----
ScalaFile
  ScClass: A
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('A')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    ExtendsBlock
      ScTemplateBody
        PsiElement(:)(':')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: x
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: x
              PsiElement(identifier)('x')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: AnyRef
            CodeReferenceElement: AnyRef
              PsiElement(identifier)('AnyRef')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: Object
              PsiElement(identifier)('Object')
            ArgumentList
              PsiElement(()('(')
              PsiElement())(')')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: y
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: y
              PsiElement(identifier)('y')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: AnyRef
            CodeReferenceElement: AnyRef
              PsiElement(identifier)('AnyRef')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: Object
              PsiElement(identifier)('Object')
            ArgumentList
              PsiElement(()('(')
              PsiElement())(')')
  PsiWhiteSpace('\n\n')
  ScFunctionDefinition: m
    AnnotationsList
      Annotation
        PsiElement(@)('@')
        AnnotationExpression
          ConstructorInvocation
            SimpleType: main
              CodeReferenceElement: main
                PsiElement(identifier)('main')
    Modifiers
      <empty list>
    PsiWhiteSpace(' ')
    PsiElement(def)('def')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('m')
    Parameters
      <empty list>
    PsiElement(:)(':')
    PsiWhiteSpace(' ')
    SimpleType: Unit
      CodeReferenceElement: Unit
        PsiElement(identifier)('Unit')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    BlockExpression
      PsiWhiteSpace('\n  ')
      ScPatternDefinition: a
        AnnotationsList
          <empty list>
        Modifiers
          <empty list>
        PsiElement(val)('val')
        PsiWhiteSpace(' ')
        ListOfPatterns
          ReferencePattern: a
            PsiElement(identifier)('a')
        PsiWhiteSpace(' ')
        PsiElement(=)('=')
        PsiWhiteSpace(' ')
        ScNewTemplateDefinition: <anonymous>
          PsiElement(new)('new')
          PsiWhiteSpace(' ')
          ExtendsBlock
            TemplateParents
              ConstructorInvocation
                SimpleType: A
                  CodeReferenceElement: A
                    PsiElement(identifier)('A')
      PsiWhiteSpace('\n  ')
      ScPatternDefinition: b
        AnnotationsList
          <empty list>
        Modifiers
          <empty list>
        PsiElement(val)('val')
        PsiWhiteSpace(' ')
        ListOfPatterns
          ReferencePattern: b
            PsiElement(identifier)('b')
        PsiElement(:)(':')
        PsiWhiteSpace(' ')
        SimpleType: a.x.type
          CodeReferenceElement: a.x
            CodeReferenceElement: a
              PsiElement(identifier)('a')
            PsiElement(.)('.')
            PsiElement(identifier)('x')
          PsiElement(.)('.')
          PsiElement(type)('type')
        PsiWhiteSpace(' ')
        PsiElement(=)('=')
        PsiWhiteSpace(' ')
        ReferenceExpression: a.x
          ReferenceExpression: a
            PsiElement(identifier)('a')
          PsiElement(.)('.')
          PsiElement(identifier)('x')
      PsiWhiteSpace('\n  ')
      ScPatternDefinition: c
        AnnotationsList
          <empty list>
        Modifiers
          <empty list>
        PsiElement(val)('val')
        PsiWhiteSpace(' ')
        ListOfPatterns
          ReferencePattern: c
            PsiElement(identifier)('c')
        PsiElement(:)(':')
        PsiWhiteSpace(' ')
        CompoundType: A { val x: a.x.type }
          SimpleType: A
            CodeReferenceElement: A
              PsiElement(identifier)('A')
          PsiWhiteSpace(' ')
          Refinement
            PsiElement({)('{')
            PsiWhiteSpace(' ')
            ScValueDeclaration: x
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              ListOfIdentifiers
                Field identifier: x
                  PsiElement(identifier)('x')
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              SimpleType: a.x.type
                CodeReferenceElement: a.x
                  CodeReferenceElement: a
                    PsiElement(identifier)('a')
                  PsiElement(.)('.')
                  PsiElement(identifier)('x')
                PsiElement(.)('.')
                PsiElement(type)('type')
            PsiWhiteSpace(' ')
            PsiElement(})('}')
        PsiWhiteSpace(' ')
        PsiElement(=)('=')
        PsiWhiteSpace(' ')
        ReferenceExpression: a
          PsiElement(identifier)('a')
      PsiWhiteSpace('\n  ')
      ScPatternDefinition: d
        AnnotationsList
          <empty list>
        Modifiers
          <empty list>
        PsiElement(val)('val')
        PsiWhiteSpace(' ')
        ListOfPatterns
          ReferencePattern: d
            PsiElement(identifier)('d')
        PsiElement(:)(':')
        PsiWhiteSpace(' ')
        CompoundType: A { val x: a.x.type;  val y: a.y.type }
          SimpleType: A
            CodeReferenceElement: A
              PsiElement(identifier)('A')
          PsiWhiteSpace(' ')
          Refinement
            PsiElement({)('{')
            PsiWhiteSpace(' ')
            ScValueDeclaration: x
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              ListOfIdentifiers
                Field identifier: x
                  PsiElement(identifier)('x')
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              SimpleType: a.x.type
                CodeReferenceElement: a.x
                  CodeReferenceElement: a
                    PsiElement(identifier)('a')
                  PsiElement(.)('.')
                  PsiElement(identifier)('x')
                PsiElement(.)('.')
                PsiElement(type)('type')
            PsiElement(;)(';')
            PsiWhiteSpace('  ')
            ScValueDeclaration: y
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              ListOfIdentifiers
                Field identifier: y
                  PsiElement(identifier)('y')
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              SimpleType: a.y.type
                CodeReferenceElement: a.y
                  CodeReferenceElement: a
                    PsiElement(identifier)('a')
                  PsiElement(.)('.')
                  PsiElement(identifier)('y')
                PsiElement(.)('.')
                PsiElement(type)('type')
            PsiWhiteSpace(' ')
            PsiElement(})('}')
        PsiWhiteSpace(' ')
        PsiElement(=)('=')
        PsiWhiteSpace(' ')
        ReferenceExpression: a
          PsiElement(identifier)('a')
