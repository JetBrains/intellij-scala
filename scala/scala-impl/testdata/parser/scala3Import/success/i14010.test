abstract class LazyList[+T] {
  def head: T
  def tail: LazyList[T]
  def isEmpty: Boolean
  def push[E >: T](top: => E): LazyList[E] =
    new Push[E](top, this)
  //def map[R](f: T => R): LazyList[R]
  def append[E >: T](that: => LazyList[E]): LazyList[E]
}

private class Push[+T](top: => T, stack: => LazyList[T]) extends LazyList[T] {
  override def head: T =
    top
  override def tail: LazyList[T] =
    stack
  override def isEmpty: Boolean =
    false
  //override def map[R](f: T => R): LazyList[R] =
  //  new Push[R](f(top), stack.map(f)) {
  //        override def map[R2](f2: R => R2): LazyList[R2] =
  //          Push.this.map(f2 compose f)
  //      }
  override def append[E >: T](that: => LazyList[E]): LazyList[E] =
    new Push[E](top, stack.append(that)) {
          override def append[E2 >: E](that2: => LazyList[E2]): LazyList[E2] =
            Push.this.append(that.append(that2))
        }
}

object LazyList {
  val empty =
    new LazyList[Nothing] {
          override def head: Nothing =
            throw new NoSuchElementException
          override def tail: LazyList[Nothing] =
            throw new UnsupportedOperationException
          override def isEmpty: Boolean =
            true
          //override def map[R](f: _ => R): LazyList[R] =
          //  this
          override def append[E](that: => LazyList[E]): LazyList[E] =
            that
        }
  def apply[T](elements: T*): LazyList[T] =
    elements.foldRight[LazyList[T]](empty)(new Push(_, _))
}
-----
ScalaFile
  ScClass: LazyList
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(abstract)('abstract')
    PsiWhiteSpace(' ')
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('LazyList')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: T
        PsiElement(identifier)('+')
        PsiElement(identifier)('T')
      PsiElement(])(']')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDeclaration: head
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('head')
          Parameters
            <empty list>
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: T
            CodeReferenceElement: T
              PsiElement(identifier)('T')
        PsiWhiteSpace('\n  ')
        ScFunctionDeclaration: tail
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('tail')
          Parameters
            <empty list>
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: LazyList[T]
            SimpleType: LazyList
              CodeReferenceElement: LazyList
                PsiElement(identifier)('LazyList')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: T
                CodeReferenceElement: T
                  PsiElement(identifier)('T')
              PsiElement(])(']')
        PsiWhiteSpace('\n  ')
        ScFunctionDeclaration: isEmpty
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('isEmpty')
          Parameters
            <empty list>
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Boolean
            CodeReferenceElement: Boolean
              PsiElement(identifier)('Boolean')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: push
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('push')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: E
              PsiElement(identifier)('E')
              PsiWhiteSpace(' ')
              PsiElement(>:)('>:')
              PsiWhiteSpace(' ')
              SimpleType: T
                CodeReferenceElement: T
                  PsiElement(identifier)('T')
            PsiElement(])(']')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: top
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('top')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  PsiElement(=>)('=>')
                  PsiWhiteSpace(' ')
                  SimpleType: E
                    CodeReferenceElement: E
                      PsiElement(identifier)('E')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: LazyList[E]
            SimpleType: LazyList
              CodeReferenceElement: LazyList
                PsiElement(identifier)('LazyList')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: E
                CodeReferenceElement: E
                  PsiElement(identifier)('E')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace('\n    ')
          ScNewTemplateDefinition: <anonymous>
            PsiElement(new)('new')
            PsiWhiteSpace(' ')
            ExtendsBlock
              TemplateParents
                ConstructorInvocation
                  ParametrizedType: Push[E]
                    SimpleType: Push
                      CodeReferenceElement: Push
                        PsiElement(identifier)('Push')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: E
                        CodeReferenceElement: E
                          PsiElement(identifier)('E')
                      PsiElement(])(']')
                  ArgumentList
                    PsiElement(()('(')
                    ReferenceExpression: top
                      PsiElement(identifier)('top')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    ThisReference
                      PsiElement(this)('this')
                    PsiElement())(')')
        PsiWhiteSpace('\n  ')
        ScFunctionDeclaration: append
          PsiComment(comment)('//def map[R](f: T => R): LazyList[R]')
          PsiWhiteSpace('\n  ')
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('append')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: E
              PsiElement(identifier)('E')
              PsiWhiteSpace(' ')
              PsiElement(>:)('>:')
              PsiWhiteSpace(' ')
              SimpleType: T
                CodeReferenceElement: T
                  PsiElement(identifier)('T')
            PsiElement(])(']')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: that
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('that')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  PsiElement(=>)('=>')
                  PsiWhiteSpace(' ')
                  ParametrizedType: LazyList[E]
                    SimpleType: LazyList
                      CodeReferenceElement: LazyList
                        PsiElement(identifier)('LazyList')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: E
                        CodeReferenceElement: E
                          PsiElement(identifier)('E')
                      PsiElement(])(']')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: LazyList[E]
            SimpleType: LazyList
              CodeReferenceElement: LazyList
                PsiElement(identifier)('LazyList')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: E
                CodeReferenceElement: E
                  PsiElement(identifier)('E')
              PsiElement(])(']')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScClass: Push
    AnnotationsList
      <empty list>
    Modifiers
      AccessModifier
        PsiElement(private)('private')
    PsiWhiteSpace(' ')
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Push')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: T
        PsiElement(identifier)('+')
        PsiElement(identifier)('T')
      PsiElement(])(']')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        ParametersClause
          PsiElement(()('(')
          ClassParameter: top
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(identifier)('top')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            ParameterType
              PsiElement(=>)('=>')
              PsiWhiteSpace(' ')
              SimpleType: T
                CodeReferenceElement: T
                  PsiElement(identifier)('T')
          PsiElement(,)(',')
          PsiWhiteSpace(' ')
          ClassParameter: stack
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(identifier)('stack')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            ParameterType
              PsiElement(=>)('=>')
              PsiWhiteSpace(' ')
              ParametrizedType: LazyList[T]
                SimpleType: LazyList
                  CodeReferenceElement: LazyList
                    PsiElement(identifier)('LazyList')
                TypeArgumentsList
                  PsiElement([)('[')
                  SimpleType: T
                    CodeReferenceElement: T
                      PsiElement(identifier)('T')
                  PsiElement(])(']')
          PsiElement())(')')
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          ParametrizedType: LazyList[T]
            SimpleType: LazyList
              CodeReferenceElement: LazyList
                PsiElement(identifier)('LazyList')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: T
                CodeReferenceElement: T
                  PsiElement(identifier)('T')
              PsiElement(])(']')
      PsiWhiteSpace(' ')
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: head
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(override)('override')
          PsiWhiteSpace(' ')
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('head')
          Parameters
            <empty list>
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: T
            CodeReferenceElement: T
              PsiElement(identifier)('T')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace('\n    ')
          ReferenceExpression: top
            PsiElement(identifier)('top')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: tail
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(override)('override')
          PsiWhiteSpace(' ')
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('tail')
          Parameters
            <empty list>
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: LazyList[T]
            SimpleType: LazyList
              CodeReferenceElement: LazyList
                PsiElement(identifier)('LazyList')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: T
                CodeReferenceElement: T
                  PsiElement(identifier)('T')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace('\n    ')
          ReferenceExpression: stack
            PsiElement(identifier)('stack')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: isEmpty
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(override)('override')
          PsiWhiteSpace(' ')
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('isEmpty')
          Parameters
            <empty list>
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Boolean
            CodeReferenceElement: Boolean
              PsiElement(identifier)('Boolean')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace('\n    ')
          BooleanLiteral
            PsiElement(false)('false')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: append
          PsiComment(comment)('//override def map[R](f: T => R): LazyList[R] =')
          PsiWhiteSpace('\n  ')
          PsiComment(comment)('//  new Push[R](f(top), stack.map(f)) {')
          PsiWhiteSpace('\n  ')
          PsiComment(comment)('//        override def map[R2](f2: R => R2): LazyList[R2] =')
          PsiWhiteSpace('\n  ')
          PsiComment(comment)('//          Push.this.map(f2 compose f)')
          PsiWhiteSpace('\n  ')
          PsiComment(comment)('//      }')
          PsiWhiteSpace('\n  ')
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(override)('override')
          PsiWhiteSpace(' ')
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('append')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: E
              PsiElement(identifier)('E')
              PsiWhiteSpace(' ')
              PsiElement(>:)('>:')
              PsiWhiteSpace(' ')
              SimpleType: T
                CodeReferenceElement: T
                  PsiElement(identifier)('T')
            PsiElement(])(']')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: that
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('that')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  PsiElement(=>)('=>')
                  PsiWhiteSpace(' ')
                  ParametrizedType: LazyList[E]
                    SimpleType: LazyList
                      CodeReferenceElement: LazyList
                        PsiElement(identifier)('LazyList')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: E
                        CodeReferenceElement: E
                          PsiElement(identifier)('E')
                      PsiElement(])(']')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: LazyList[E]
            SimpleType: LazyList
              CodeReferenceElement: LazyList
                PsiElement(identifier)('LazyList')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: E
                CodeReferenceElement: E
                  PsiElement(identifier)('E')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace('\n    ')
          ScNewTemplateDefinition: <anonymous>
            PsiElement(new)('new')
            PsiWhiteSpace(' ')
            ExtendsBlock
              TemplateParents
                ConstructorInvocation
                  ParametrizedType: Push[E]
                    SimpleType: Push
                      CodeReferenceElement: Push
                        PsiElement(identifier)('Push')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: E
                        CodeReferenceElement: E
                          PsiElement(identifier)('E')
                      PsiElement(])(']')
                  ArgumentList
                    PsiElement(()('(')
                    ReferenceExpression: top
                      PsiElement(identifier)('top')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    MethodCall
                      ReferenceExpression: stack.append
                        ReferenceExpression: stack
                          PsiElement(identifier)('stack')
                        PsiElement(.)('.')
                        PsiElement(identifier)('append')
                      ArgumentList
                        PsiElement(()('(')
                        ReferenceExpression: that
                          PsiElement(identifier)('that')
                        PsiElement())(')')
                    PsiElement())(')')
              PsiWhiteSpace(' ')
              ScTemplateBody
                PsiElement({)('{')
                PsiWhiteSpace('\n          ')
                ScFunctionDefinition: append
                  AnnotationsList
                    <empty list>
                  Modifiers
                    PsiElement(override)('override')
                  PsiWhiteSpace(' ')
                  PsiElement(def)('def')
                  PsiWhiteSpace(' ')
                  PsiElement(identifier)('append')
                  TypeParameterClause
                    PsiElement([)('[')
                    TypeParameter: E2
                      PsiElement(identifier)('E2')
                      PsiWhiteSpace(' ')
                      PsiElement(>:)('>:')
                      PsiWhiteSpace(' ')
                      SimpleType: E
                        CodeReferenceElement: E
                          PsiElement(identifier)('E')
                    PsiElement(])(']')
                  Parameters
                    ParametersClause
                      PsiElement(()('(')
                      Parameter: that2
                        AnnotationsList
                          <empty list>
                        Modifiers
                          <empty list>
                        PsiElement(identifier)('that2')
                        PsiElement(:)(':')
                        PsiWhiteSpace(' ')
                        ParameterType
                          PsiElement(=>)('=>')
                          PsiWhiteSpace(' ')
                          ParametrizedType: LazyList[E2]
                            SimpleType: LazyList
                              CodeReferenceElement: LazyList
                                PsiElement(identifier)('LazyList')
                            TypeArgumentsList
                              PsiElement([)('[')
                              SimpleType: E2
                                CodeReferenceElement: E2
                                  PsiElement(identifier)('E2')
                              PsiElement(])(']')
                      PsiElement())(')')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParametrizedType: LazyList[E2]
                    SimpleType: LazyList
                      CodeReferenceElement: LazyList
                        PsiElement(identifier)('LazyList')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: E2
                        CodeReferenceElement: E2
                          PsiElement(identifier)('E2')
                      PsiElement(])(']')
                  PsiWhiteSpace(' ')
                  PsiElement(=)('=')
                  PsiWhiteSpace('\n            ')
                  MethodCall
                    ReferenceExpression: Push.this.append
                      ThisReference
                        CodeReferenceElement: Push
                          PsiElement(identifier)('Push')
                        PsiElement(.)('.')
                        PsiElement(this)('this')
                      PsiElement(.)('.')
                      PsiElement(identifier)('append')
                    ArgumentList
                      PsiElement(()('(')
                      MethodCall
                        ReferenceExpression: that.append
                          ReferenceExpression: that
                            PsiElement(identifier)('that')
                          PsiElement(.)('.')
                          PsiElement(identifier)('append')
                        ArgumentList
                          PsiElement(()('(')
                          ReferenceExpression: that2
                            PsiElement(identifier)('that2')
                          PsiElement())(')')
                      PsiElement())(')')
                PsiWhiteSpace('\n        ')
                PsiElement(})('}')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScObject: LazyList
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('LazyList')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: empty
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: empty
              PsiElement(identifier)('empty')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace('\n    ')
          ScNewTemplateDefinition: <anonymous>
            PsiElement(new)('new')
            PsiWhiteSpace(' ')
            ExtendsBlock
              TemplateParents
                ConstructorInvocation
                  ParametrizedType: LazyList[Nothing]
                    SimpleType: LazyList
                      CodeReferenceElement: LazyList
                        PsiElement(identifier)('LazyList')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: Nothing
                        CodeReferenceElement: Nothing
                          PsiElement(identifier)('Nothing')
                      PsiElement(])(']')
              PsiWhiteSpace(' ')
              ScTemplateBody
                PsiElement({)('{')
                PsiWhiteSpace('\n          ')
                ScFunctionDefinition: head
                  AnnotationsList
                    <empty list>
                  Modifiers
                    PsiElement(override)('override')
                  PsiWhiteSpace(' ')
                  PsiElement(def)('def')
                  PsiWhiteSpace(' ')
                  PsiElement(identifier)('head')
                  Parameters
                    <empty list>
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  SimpleType: Nothing
                    CodeReferenceElement: Nothing
                      PsiElement(identifier)('Nothing')
                  PsiWhiteSpace(' ')
                  PsiElement(=)('=')
                  PsiWhiteSpace('\n            ')
                  ThrowStatement
                    PsiElement(throw)('throw')
                    PsiWhiteSpace(' ')
                    ScNewTemplateDefinition: <anonymous>
                      PsiElement(new)('new')
                      PsiWhiteSpace(' ')
                      ExtendsBlock
                        TemplateParents
                          ConstructorInvocation
                            SimpleType: NoSuchElementException
                              CodeReferenceElement: NoSuchElementException
                                PsiElement(identifier)('NoSuchElementException')
                PsiWhiteSpace('\n          ')
                ScFunctionDefinition: tail
                  AnnotationsList
                    <empty list>
                  Modifiers
                    PsiElement(override)('override')
                  PsiWhiteSpace(' ')
                  PsiElement(def)('def')
                  PsiWhiteSpace(' ')
                  PsiElement(identifier)('tail')
                  Parameters
                    <empty list>
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParametrizedType: LazyList[Nothing]
                    SimpleType: LazyList
                      CodeReferenceElement: LazyList
                        PsiElement(identifier)('LazyList')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: Nothing
                        CodeReferenceElement: Nothing
                          PsiElement(identifier)('Nothing')
                      PsiElement(])(']')
                  PsiWhiteSpace(' ')
                  PsiElement(=)('=')
                  PsiWhiteSpace('\n            ')
                  ThrowStatement
                    PsiElement(throw)('throw')
                    PsiWhiteSpace(' ')
                    ScNewTemplateDefinition: <anonymous>
                      PsiElement(new)('new')
                      PsiWhiteSpace(' ')
                      ExtendsBlock
                        TemplateParents
                          ConstructorInvocation
                            SimpleType: UnsupportedOperationException
                              CodeReferenceElement: UnsupportedOperationException
                                PsiElement(identifier)('UnsupportedOperationException')
                PsiWhiteSpace('\n          ')
                ScFunctionDefinition: isEmpty
                  AnnotationsList
                    <empty list>
                  Modifiers
                    PsiElement(override)('override')
                  PsiWhiteSpace(' ')
                  PsiElement(def)('def')
                  PsiWhiteSpace(' ')
                  PsiElement(identifier)('isEmpty')
                  Parameters
                    <empty list>
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  SimpleType: Boolean
                    CodeReferenceElement: Boolean
                      PsiElement(identifier)('Boolean')
                  PsiWhiteSpace(' ')
                  PsiElement(=)('=')
                  PsiWhiteSpace('\n            ')
                  BooleanLiteral
                    PsiElement(true)('true')
                PsiWhiteSpace('\n          ')
                ScFunctionDefinition: append
                  PsiComment(comment)('//override def map[R](f: _ => R): LazyList[R] =')
                  PsiWhiteSpace('\n          ')
                  PsiComment(comment)('//  this')
                  PsiWhiteSpace('\n          ')
                  AnnotationsList
                    <empty list>
                  Modifiers
                    PsiElement(override)('override')
                  PsiWhiteSpace(' ')
                  PsiElement(def)('def')
                  PsiWhiteSpace(' ')
                  PsiElement(identifier)('append')
                  TypeParameterClause
                    PsiElement([)('[')
                    TypeParameter: E
                      PsiElement(identifier)('E')
                    PsiElement(])(']')
                  Parameters
                    ParametersClause
                      PsiElement(()('(')
                      Parameter: that
                        AnnotationsList
                          <empty list>
                        Modifiers
                          <empty list>
                        PsiElement(identifier)('that')
                        PsiElement(:)(':')
                        PsiWhiteSpace(' ')
                        ParameterType
                          PsiElement(=>)('=>')
                          PsiWhiteSpace(' ')
                          ParametrizedType: LazyList[E]
                            SimpleType: LazyList
                              CodeReferenceElement: LazyList
                                PsiElement(identifier)('LazyList')
                            TypeArgumentsList
                              PsiElement([)('[')
                              SimpleType: E
                                CodeReferenceElement: E
                                  PsiElement(identifier)('E')
                              PsiElement(])(']')
                      PsiElement())(')')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParametrizedType: LazyList[E]
                    SimpleType: LazyList
                      CodeReferenceElement: LazyList
                        PsiElement(identifier)('LazyList')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: E
                        CodeReferenceElement: E
                          PsiElement(identifier)('E')
                      PsiElement(])(']')
                  PsiWhiteSpace(' ')
                  PsiElement(=)('=')
                  PsiWhiteSpace('\n            ')
                  ReferenceExpression: that
                    PsiElement(identifier)('that')
                PsiWhiteSpace('\n        ')
                PsiElement(})('}')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: apply
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('apply')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: T
              PsiElement(identifier)('T')
            PsiElement(])(']')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: elements
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('elements')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: T
                    CodeReferenceElement: T
                      PsiElement(identifier)('T')
                  PsiElement(identifier)('*')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: LazyList[T]
            SimpleType: LazyList
              CodeReferenceElement: LazyList
                PsiElement(identifier)('LazyList')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: T
                CodeReferenceElement: T
                  PsiElement(identifier)('T')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace('\n    ')
          MethodCall
            MethodCall
              GenericCall
                ReferenceExpression: elements.foldRight
                  ReferenceExpression: elements
                    PsiElement(identifier)('elements')
                  PsiElement(.)('.')
                  PsiElement(identifier)('foldRight')
                TypeArgumentsList
                  PsiElement([)('[')
                  ParametrizedType: LazyList[T]
                    SimpleType: LazyList
                      CodeReferenceElement: LazyList
                        PsiElement(identifier)('LazyList')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: T
                        CodeReferenceElement: T
                          PsiElement(identifier)('T')
                      PsiElement(])(']')
                  PsiElement(])(']')
              ArgumentList
                PsiElement(()('(')
                ReferenceExpression: empty
                  PsiElement(identifier)('empty')
                PsiElement())(')')
            ArgumentList
              PsiElement(()('(')
              ScNewTemplateDefinition: <anonymous>
                PsiElement(new)('new')
                PsiWhiteSpace(' ')
                ExtendsBlock
                  TemplateParents
                    ConstructorInvocation
                      SimpleType: Push
                        CodeReferenceElement: Push
                          PsiElement(identifier)('Push')
                      ArgumentList
                        PsiElement(()('(')
                        UnderscoreSection
                          PsiElement(_)('_')
                        PsiElement(,)(',')
                        PsiWhiteSpace(' ')
                        UnderscoreSection
                          PsiElement(_)('_')
                        PsiElement())(')')
              PsiElement())(')')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
