import scala.util.control.NonFatal
object p {

  enum Result[+T, +E] {
    case OK [T](x: T) extends Result[T, Nothing]
    case Err[E](e: E) extends Result[Nothing, E]
  }

  type Try[T] = Result[T, Throwable]
  object Try {
    def apply[T](x: => T): Try[T] =
      try Result.OK(x)
      catch {
        case NonFatal(ex) => Result.Err(ex)
      }
  }
}
-----
ScalaFile
  ScImportStatement
    PsiElement(import)('import')
    PsiWhiteSpace(' ')
    ImportExpression
      CodeReferenceElement: scala.util.control.NonFatal
        CodeReferenceElement: scala.util.control
          CodeReferenceElement: scala.util
            CodeReferenceElement: scala
              PsiElement(identifier)('scala')
            PsiElement(.)('.')
            PsiElement(identifier)('util')
          PsiElement(.)('.')
          PsiElement(identifier)('control')
        PsiElement(.)('.')
        PsiElement(identifier)('NonFatal')
  PsiWhiteSpace('\n')
  ScObject: p
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('p')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n\n  ')
        ScEnum: Result
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(enum)('enum')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Result')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: T
              PsiElement(identifier)('+')
              PsiElement(identifier)('T')
            PsiElement(,)(',')
            PsiWhiteSpace(' ')
            TypeParameter: E
              PsiElement(identifier)('+')
              PsiElement(identifier)('E')
            PsiElement(])(']')
          PrimaryConstructor
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            Parameters
              <empty list>
          PsiWhiteSpace(' ')
          ExtendsBlock
            ScTemplateBody
              PsiElement({)('{')
              PsiWhiteSpace('\n    ')
              ScEnumCases: OK
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                ScEnumClassCase: OK
                  PsiElement(identifier)('OK')
                  PsiWhiteSpace(' ')
                  TypeParameterClause
                    PsiElement([)('[')
                    TypeParameter: T
                      PsiElement(identifier)('T')
                    PsiElement(])(']')
                  PrimaryConstructor
                    AnnotationsList
                      <empty list>
                    Modifiers
                      <empty list>
                    Parameters
                      ParametersClause
                        PsiElement(()('(')
                        ClassParameter: x
                          AnnotationsList
                            <empty list>
                          Modifiers
                            <empty list>
                          PsiElement(identifier)('x')
                          PsiElement(:)(':')
                          PsiWhiteSpace(' ')
                          ParameterType
                            SimpleType: T
                              CodeReferenceElement: T
                                PsiElement(identifier)('T')
                        PsiElement())(')')
                  PsiWhiteSpace(' ')
                  ExtendsBlock
                    PsiElement(extends)('extends')
                    PsiWhiteSpace(' ')
                    TemplateParents
                      ConstructorInvocation
                        ParametrizedType: Result[T, Nothing]
                          SimpleType: Result
                            CodeReferenceElement: Result
                              PsiElement(identifier)('Result')
                          TypeArgumentsList
                            PsiElement([)('[')
                            SimpleType: T
                              CodeReferenceElement: T
                                PsiElement(identifier)('T')
                            PsiElement(,)(',')
                            PsiWhiteSpace(' ')
                            SimpleType: Nothing
                              CodeReferenceElement: Nothing
                                PsiElement(identifier)('Nothing')
                            PsiElement(])(']')
              PsiWhiteSpace('\n    ')
              ScEnumCases: Err
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                ScEnumClassCase: Err
                  PsiElement(identifier)('Err')
                  TypeParameterClause
                    PsiElement([)('[')
                    TypeParameter: E
                      PsiElement(identifier)('E')
                    PsiElement(])(']')
                  PrimaryConstructor
                    AnnotationsList
                      <empty list>
                    Modifiers
                      <empty list>
                    Parameters
                      ParametersClause
                        PsiElement(()('(')
                        ClassParameter: e
                          AnnotationsList
                            <empty list>
                          Modifiers
                            <empty list>
                          PsiElement(identifier)('e')
                          PsiElement(:)(':')
                          PsiWhiteSpace(' ')
                          ParameterType
                            SimpleType: E
                              CodeReferenceElement: E
                                PsiElement(identifier)('E')
                        PsiElement())(')')
                  PsiWhiteSpace(' ')
                  ExtendsBlock
                    PsiElement(extends)('extends')
                    PsiWhiteSpace(' ')
                    TemplateParents
                      ConstructorInvocation
                        ParametrizedType: Result[Nothing, E]
                          SimpleType: Result
                            CodeReferenceElement: Result
                              PsiElement(identifier)('Result')
                          TypeArgumentsList
                            PsiElement([)('[')
                            SimpleType: Nothing
                              CodeReferenceElement: Nothing
                                PsiElement(identifier)('Nothing')
                            PsiElement(,)(',')
                            PsiWhiteSpace(' ')
                            SimpleType: E
                              CodeReferenceElement: E
                                PsiElement(identifier)('E')
                            PsiElement(])(']')
              PsiWhiteSpace('\n  ')
              PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        ScTypeAliasDefinition: Try
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Try')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: T
              PsiElement(identifier)('T')
            PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ParametrizedType: Result[T, Throwable]
            SimpleType: Result
              CodeReferenceElement: Result
                PsiElement(identifier)('Result')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: T
                CodeReferenceElement: T
                  PsiElement(identifier)('T')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              SimpleType: Throwable
                CodeReferenceElement: Throwable
                  PsiElement(identifier)('Throwable')
              PsiElement(])(']')
        PsiWhiteSpace('\n  ')
        ScObject: Try
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(object)('object')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Try')
          PsiWhiteSpace(' ')
          ExtendsBlock
            ScTemplateBody
              PsiElement({)('{')
              PsiWhiteSpace('\n    ')
              ScFunctionDefinition: apply
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(def)('def')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('apply')
                TypeParameterClause
                  PsiElement([)('[')
                  TypeParameter: T
                    PsiElement(identifier)('T')
                  PsiElement(])(']')
                Parameters
                  ParametersClause
                    PsiElement(()('(')
                    Parameter: x
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(identifier)('x')
                      PsiElement(:)(':')
                      PsiWhiteSpace(' ')
                      ParameterType
                        PsiElement(=>)('=>')
                        PsiWhiteSpace(' ')
                        SimpleType: T
                          CodeReferenceElement: T
                            PsiElement(identifier)('T')
                    PsiElement())(')')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParametrizedType: Try[T]
                  SimpleType: Try
                    CodeReferenceElement: Try
                      PsiElement(identifier)('Try')
                  TypeArgumentsList
                    PsiElement([)('[')
                    SimpleType: T
                      CodeReferenceElement: T
                        PsiElement(identifier)('T')
                    PsiElement(])(']')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace('\n      ')
                TryStatement
                  PsiElement(try)('try')
                  PsiWhiteSpace(' ')
                  MethodCall
                    ReferenceExpression: Result.OK
                      ReferenceExpression: Result
                        PsiElement(identifier)('Result')
                      PsiElement(.)('.')
                      PsiElement(identifier)('OK')
                    ArgumentList
                      PsiElement(()('(')
                      ReferenceExpression: x
                        PsiElement(identifier)('x')
                      PsiElement())(')')
                  PsiWhiteSpace('\n      ')
                  CatchBlock
                    PsiElement(catch)('catch')
                    PsiWhiteSpace(' ')
                    BlockExpression
                      PsiElement({)('{')
                      PsiWhiteSpace('\n        ')
                      CaseClauses
                        CaseClause
                          PsiElement(case)('case')
                          PsiWhiteSpace(' ')
                          ConstructorPattern
                            CodeReferenceElement: NonFatal
                              PsiElement(identifier)('NonFatal')
                            Pattern Argument List
                              PsiElement(()('(')
                              ReferencePattern: ex
                                PsiElement(identifier)('ex')
                              PsiElement())(')')
                          PsiWhiteSpace(' ')
                          PsiElement(=>)('=>')
                          PsiWhiteSpace(' ')
                          BlockOfExpressions
                            MethodCall
                              ReferenceExpression: Result.Err
                                ReferenceExpression: Result
                                  PsiElement(identifier)('Result')
                                PsiElement(.)('.')
                                PsiElement(identifier)('Err')
                              ArgumentList
                                PsiElement(()('(')
                                ReferenceExpression: ex
                                  PsiElement(identifier)('ex')
                                PsiElement())(')')
                      PsiWhiteSpace('\n      ')
                      PsiElement(})('}')
              PsiWhiteSpace('\n  ')
              PsiElement(})('}')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
