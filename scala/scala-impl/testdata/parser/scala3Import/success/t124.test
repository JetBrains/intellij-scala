class N{
  val F: Any => Any  = (x:Any) => F(x);
  val f:(Any => Any) = (x:Any) => f(x);
  val g: Any => Any  = (x:Any) => g(x);
}
-----
ScalaFile
  ScClass: N
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('N')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: F
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: F
              PsiElement(identifier)('F')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          FunctionalType: Any => Any
            SimpleType: Any
              CodeReferenceElement: Any
                PsiElement(identifier)('Any')
            PsiWhiteSpace(' ')
            PsiElement(=>)('=>')
            PsiWhiteSpace(' ')
            SimpleType: Any
              CodeReferenceElement: Any
                PsiElement(identifier)('Any')
          PsiWhiteSpace('  ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          FunctionExpression
            Parameters
              ParametersClause
                PsiElement(()('(')
                Parameter: x
                  AnnotationsList
                    <empty list>
                  PsiElement(identifier)('x')
                  PsiElement(:)(':')
                  ParameterType
                    SimpleType: Any
                      CodeReferenceElement: Any
                        PsiElement(identifier)('Any')
                PsiElement())(')')
            PsiWhiteSpace(' ')
            PsiElement(=>)('=>')
            PsiWhiteSpace(' ')
            MethodCall
              ReferenceExpression: F
                PsiElement(identifier)('F')
              ArgumentList
                PsiElement(()('(')
                ReferenceExpression: x
                  PsiElement(identifier)('x')
                PsiElement())(')')
        PsiElement(;)(';')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: f
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: f
              PsiElement(identifier)('f')
          PsiElement(:)(':')
          TypeInParenthesis: (Any => Any)
            PsiElement(()('(')
            FunctionalType: Any => Any
              SimpleType: Any
                CodeReferenceElement: Any
                  PsiElement(identifier)('Any')
              PsiWhiteSpace(' ')
              PsiElement(=>)('=>')
              PsiWhiteSpace(' ')
              SimpleType: Any
                CodeReferenceElement: Any
                  PsiElement(identifier)('Any')
            PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          FunctionExpression
            Parameters
              ParametersClause
                PsiElement(()('(')
                Parameter: x
                  AnnotationsList
                    <empty list>
                  PsiElement(identifier)('x')
                  PsiElement(:)(':')
                  ParameterType
                    SimpleType: Any
                      CodeReferenceElement: Any
                        PsiElement(identifier)('Any')
                PsiElement())(')')
            PsiWhiteSpace(' ')
            PsiElement(=>)('=>')
            PsiWhiteSpace(' ')
            MethodCall
              ReferenceExpression: f
                PsiElement(identifier)('f')
              ArgumentList
                PsiElement(()('(')
                ReferenceExpression: x
                  PsiElement(identifier)('x')
                PsiElement())(')')
        PsiElement(;)(';')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: g
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: g
              PsiElement(identifier)('g')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          FunctionalType: Any => Any
            SimpleType: Any
              CodeReferenceElement: Any
                PsiElement(identifier)('Any')
            PsiWhiteSpace(' ')
            PsiElement(=>)('=>')
            PsiWhiteSpace(' ')
            SimpleType: Any
              CodeReferenceElement: Any
                PsiElement(identifier)('Any')
          PsiWhiteSpace('  ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          FunctionExpression
            Parameters
              ParametersClause
                PsiElement(()('(')
                Parameter: x
                  AnnotationsList
                    <empty list>
                  PsiElement(identifier)('x')
                  PsiElement(:)(':')
                  ParameterType
                    SimpleType: Any
                      CodeReferenceElement: Any
                        PsiElement(identifier)('Any')
                PsiElement())(')')
            PsiWhiteSpace(' ')
            PsiElement(=>)('=>')
            PsiWhiteSpace(' ')
            MethodCall
              ReferenceExpression: g
                PsiElement(identifier)('g')
              ArgumentList
                PsiElement(()('(')
                ReferenceExpression: x
                  PsiElement(identifier)('x')
                PsiElement())(')')
        PsiElement(;)(';')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
