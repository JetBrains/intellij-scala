object Test {
  def foo[C[_]](implicit t: C[Char] => Traversable[Char]): C[Char] = ???

  val a: List[Char] = foo
}
-----
ScalaFile
  ScObject: Test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: foo
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('foo')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: C
              PsiElement(identifier)('C')
              TypeParameterClause
                PsiElement([)('[')
                TypeParameter: _
                  PsiElement(_)('_')
                PsiElement(])(']')
            PsiElement(])(']')
          Parameters
            ParametersClause
              PsiElement(()('(')
              PsiElement(implicit)('implicit')
              PsiWhiteSpace(' ')
              Parameter: t
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('t')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  FunctionalType: C[Char] => Traversable[Char]
                    ParametrizedType: C[Char]
                      SimpleType: C
                        CodeReferenceElement: C
                          PsiElement(identifier)('C')
                      TypeArgumentsList
                        PsiElement([)('[')
                        SimpleType: Char
                          CodeReferenceElement: Char
                            PsiElement(identifier)('Char')
                        PsiElement(])(']')
                    PsiWhiteSpace(' ')
                    PsiElement(=>)('=>')
                    PsiWhiteSpace(' ')
                    ParametrizedType: Traversable[Char]
                      SimpleType: Traversable
                        CodeReferenceElement: Traversable
                          PsiElement(identifier)('Traversable')
                      TypeArgumentsList
                        PsiElement([)('[')
                        SimpleType: Char
                          CodeReferenceElement: Char
                            PsiElement(identifier)('Char')
                        PsiElement(])(']')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: C[Char]
            SimpleType: C
              CodeReferenceElement: C
                PsiElement(identifier)('C')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: Char
                CodeReferenceElement: Char
                  PsiElement(identifier)('Char')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: ???
            PsiElement(identifier)('???')
        PsiWhiteSpace('\n\n  ')
        ScPatternDefinition: a
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: a
              PsiElement(identifier)('a')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: List[Char]
            SimpleType: List
              CodeReferenceElement: List
                PsiElement(identifier)('List')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: Char
                CodeReferenceElement: Char
                  PsiElement(identifier)('Char')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: foo
            PsiElement(identifier)('foo')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
