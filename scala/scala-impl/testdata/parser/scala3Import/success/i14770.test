type UndefOr[A] = A | Unit

extension [A](maybe: UndefOr[A])
  def foreach(f: A => Unit): Unit =
    maybe match
      case () => ()
      case a: A => f(a)

trait Foo
trait Bar

object Baz:
  var booBap: Foo | Bar = _

def z: UndefOr[Foo | Bar] = ???

@main
def main =
  z.foreach(x => Baz.booBap = x)

def test[A](v: A | Unit): A | Unit =  v
val x1 = test(5: Int | Unit)
val x2 = test(5: String | Int | Unit)
val _: Int | Unit = x1
val _: String | Int | Unit = x2
-----
ScalaFile
  ScTypeAliasDefinition: UndefOr
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(type)('type')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('UndefOr')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: A
        PsiElement(identifier)('A')
      PsiElement(])(']')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    InfixType: A | Unit
      SimpleType: A
        CodeReferenceElement: A
          PsiElement(identifier)('A')
      PsiWhiteSpace(' ')
      CodeReferenceElement: |
        PsiElement(identifier)('|')
      PsiWhiteSpace(' ')
      SimpleType: Unit
        CodeReferenceElement: Unit
          PsiElement(identifier)('Unit')
  PsiWhiteSpace('\n\n')
  Extension on UndefOr[A]
    PsiElement(extension)('extension')
    PsiWhiteSpace(' ')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: A
        PsiElement(identifier)('A')
      PsiElement(])(']')
    Parameters
      ParametersClause
        PsiElement(()('(')
        Parameter: maybe
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(identifier)('maybe')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParameterType
            ParametrizedType: UndefOr[A]
              SimpleType: UndefOr
                CodeReferenceElement: UndefOr
                  PsiElement(identifier)('UndefOr')
              TypeArgumentsList
                PsiElement([)('[')
                SimpleType: A
                  CodeReferenceElement: A
                    PsiElement(identifier)('A')
                PsiElement(])(']')
        PsiElement())(')')
    PsiWhiteSpace('\n  ')
    ScExtensionBody
      ScFunctionDefinition: foreach
        AnnotationsList
          <empty list>
        Modifiers
          <empty list>
        PsiElement(def)('def')
        PsiWhiteSpace(' ')
        PsiElement(identifier)('foreach')
        Parameters
          ParametersClause
            PsiElement(()('(')
            Parameter: f
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(identifier)('f')
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              ParameterType
                FunctionalType: A => Unit
                  SimpleType: A
                    CodeReferenceElement: A
                      PsiElement(identifier)('A')
                  PsiWhiteSpace(' ')
                  PsiElement(=>)('=>')
                  PsiWhiteSpace(' ')
                  SimpleType: Unit
                    CodeReferenceElement: Unit
                      PsiElement(identifier)('Unit')
            PsiElement())(')')
        PsiElement(:)(':')
        PsiWhiteSpace(' ')
        SimpleType: Unit
          CodeReferenceElement: Unit
            PsiElement(identifier)('Unit')
        PsiWhiteSpace(' ')
        PsiElement(=)('=')
        PsiWhiteSpace('\n    ')
        MatchStatement
          ReferenceExpression: maybe
            PsiElement(identifier)('maybe')
          PsiWhiteSpace(' ')
          PsiElement(match)('match')
          PsiWhiteSpace('\n      ')
          CaseClauses
            CaseClause
              PsiElement(case)('case')
              PsiWhiteSpace(' ')
              TuplePattern
                PsiElement(()('(')
                PsiElement())(')')
              PsiWhiteSpace(' ')
              PsiElement(=>)('=>')
              PsiWhiteSpace(' ')
              BlockOfExpressions
                UnitExpression
                  PsiElement(()('(')
                  PsiElement())(')')
            PsiWhiteSpace('\n      ')
            CaseClause
              PsiElement(case)('case')
              PsiWhiteSpace(' ')
              Scala3 TypedPattern
                ReferencePattern: a
                  PsiElement(identifier)('a')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                TypePattern
                  SimpleType: A
                    CodeReferenceElement: A
                      PsiElement(identifier)('A')
              PsiWhiteSpace(' ')
              PsiElement(=>)('=>')
              PsiWhiteSpace(' ')
              BlockOfExpressions
                MethodCall
                  ReferenceExpression: f
                    PsiElement(identifier)('f')
                  ArgumentList
                    PsiElement(()('(')
                    ReferenceExpression: a
                      PsiElement(identifier)('a')
                    PsiElement())(')')
  PsiWhiteSpace('\n\n')
  ScTrait: Foo
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Foo')
    ExtendsBlock
      <empty list>
  PsiWhiteSpace('\n')
  ScTrait: Bar
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Bar')
    ExtendsBlock
      <empty list>
  PsiWhiteSpace('\n\n')
  ScObject: Baz
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Baz')
    ExtendsBlock
      ScTemplateBody
        PsiElement(:)(':')
        PsiWhiteSpace('\n  ')
        ScVariableDefinition: booBap
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(var)('var')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: booBap
              PsiElement(identifier)('booBap')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          InfixType: Foo | Bar
            SimpleType: Foo
              CodeReferenceElement: Foo
                PsiElement(identifier)('Foo')
            PsiWhiteSpace(' ')
            CodeReferenceElement: |
              PsiElement(identifier)('|')
            PsiWhiteSpace(' ')
            SimpleType: Bar
              CodeReferenceElement: Bar
                PsiElement(identifier)('Bar')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          UnderscoreSection
            PsiElement(_)('_')
  PsiWhiteSpace('\n\n')
  ScFunctionDefinition: z
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(def)('def')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('z')
    Parameters
      <empty list>
    PsiElement(:)(':')
    PsiWhiteSpace(' ')
    ParametrizedType: UndefOr[Foo | Bar]
      SimpleType: UndefOr
        CodeReferenceElement: UndefOr
          PsiElement(identifier)('UndefOr')
      TypeArgumentsList
        PsiElement([)('[')
        InfixType: Foo | Bar
          SimpleType: Foo
            CodeReferenceElement: Foo
              PsiElement(identifier)('Foo')
          PsiWhiteSpace(' ')
          CodeReferenceElement: |
            PsiElement(identifier)('|')
          PsiWhiteSpace(' ')
          SimpleType: Bar
            CodeReferenceElement: Bar
              PsiElement(identifier)('Bar')
        PsiElement(])(']')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    ReferenceExpression: ???
      PsiElement(identifier)('???')
  PsiWhiteSpace('\n\n')
  ScFunctionDefinition: main
    AnnotationsList
      Annotation
        PsiElement(@)('@')
        AnnotationExpression
          ConstructorInvocation
            SimpleType: main
              CodeReferenceElement: main
                PsiElement(identifier)('main')
    Modifiers
      <empty list>
    PsiWhiteSpace('\n')
    PsiElement(def)('def')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('main')
    Parameters
      <empty list>
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace('\n  ')
    MethodCall
      ReferenceExpression: z.foreach
        ReferenceExpression: z
          PsiElement(identifier)('z')
        PsiElement(.)('.')
        PsiElement(identifier)('foreach')
      ArgumentList
        PsiElement(()('(')
        FunctionExpression
          Parameters
            ParametersClause
              Parameter: x
                PsiElement(identifier)('x')
          PsiWhiteSpace(' ')
          PsiElement(=>)('=>')
          PsiWhiteSpace(' ')
          AssignStatement
            ReferenceExpression: Baz.booBap
              ReferenceExpression: Baz
                PsiElement(identifier)('Baz')
              PsiElement(.)('.')
              PsiElement(identifier)('booBap')
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace(' ')
            ReferenceExpression: x
              PsiElement(identifier)('x')
        PsiElement())(')')
  PsiWhiteSpace('\n\n')
  ScFunctionDefinition: test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(def)('def')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('test')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: A
        PsiElement(identifier)('A')
      PsiElement(])(']')
    Parameters
      ParametersClause
        PsiElement(()('(')
        Parameter: v
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(identifier)('v')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParameterType
            InfixType: A | Unit
              SimpleType: A
                CodeReferenceElement: A
                  PsiElement(identifier)('A')
              PsiWhiteSpace(' ')
              CodeReferenceElement: |
                PsiElement(identifier)('|')
              PsiWhiteSpace(' ')
              SimpleType: Unit
                CodeReferenceElement: Unit
                  PsiElement(identifier)('Unit')
        PsiElement())(')')
    PsiElement(:)(':')
    PsiWhiteSpace(' ')
    InfixType: A | Unit
      SimpleType: A
        CodeReferenceElement: A
          PsiElement(identifier)('A')
      PsiWhiteSpace(' ')
      CodeReferenceElement: |
        PsiElement(identifier)('|')
      PsiWhiteSpace(' ')
      SimpleType: Unit
        CodeReferenceElement: Unit
          PsiElement(identifier)('Unit')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace('  ')
    ReferenceExpression: v
      PsiElement(identifier)('v')
  PsiWhiteSpace('\n')
  ScPatternDefinition: x1
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(val)('val')
    PsiWhiteSpace(' ')
    ListOfPatterns
      ReferencePattern: x1
        PsiElement(identifier)('x1')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    MethodCall
      ReferenceExpression: test
        PsiElement(identifier)('test')
      ArgumentList
        PsiElement(()('(')
        TypedExpression
          IntegerLiteral
            PsiElement(integer)('5')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          InfixType: Int | Unit
            SimpleType: Int
              CodeReferenceElement: Int
                PsiElement(identifier)('Int')
            PsiWhiteSpace(' ')
            CodeReferenceElement: |
              PsiElement(identifier)('|')
            PsiWhiteSpace(' ')
            SimpleType: Unit
              CodeReferenceElement: Unit
                PsiElement(identifier)('Unit')
        PsiElement())(')')
  PsiWhiteSpace('\n')
  ScPatternDefinition: x2
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(val)('val')
    PsiWhiteSpace(' ')
    ListOfPatterns
      ReferencePattern: x2
        PsiElement(identifier)('x2')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    MethodCall
      ReferenceExpression: test
        PsiElement(identifier)('test')
      ArgumentList
        PsiElement(()('(')
        TypedExpression
          IntegerLiteral
            PsiElement(integer)('5')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          InfixType: String | Int | Unit
            InfixType: String | Int
              SimpleType: String
                CodeReferenceElement: String
                  PsiElement(identifier)('String')
              PsiWhiteSpace(' ')
              CodeReferenceElement: |
                PsiElement(identifier)('|')
              PsiWhiteSpace(' ')
              SimpleType: Int
                CodeReferenceElement: Int
                  PsiElement(identifier)('Int')
            PsiWhiteSpace(' ')
            CodeReferenceElement: |
              PsiElement(identifier)('|')
            PsiWhiteSpace(' ')
            SimpleType: Unit
              CodeReferenceElement: Unit
                PsiElement(identifier)('Unit')
        PsiElement())(')')
  PsiWhiteSpace('\n')
  ScPatternDefinition
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(val)('val')
    PsiWhiteSpace(' ')
    ListOfPatterns
      WildcardPattern
        PsiElement(_)('_')
    PsiElement(:)(':')
    PsiWhiteSpace(' ')
    InfixType: Int | Unit
      SimpleType: Int
        CodeReferenceElement: Int
          PsiElement(identifier)('Int')
      PsiWhiteSpace(' ')
      CodeReferenceElement: |
        PsiElement(identifier)('|')
      PsiWhiteSpace(' ')
      SimpleType: Unit
        CodeReferenceElement: Unit
          PsiElement(identifier)('Unit')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    ReferenceExpression: x1
      PsiElement(identifier)('x1')
  PsiWhiteSpace('\n')
  ScPatternDefinition
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(val)('val')
    PsiWhiteSpace(' ')
    ListOfPatterns
      WildcardPattern
        PsiElement(_)('_')
    PsiElement(:)(':')
    PsiWhiteSpace(' ')
    InfixType: String | Int | Unit
      InfixType: String | Int
        SimpleType: String
          CodeReferenceElement: String
            PsiElement(identifier)('String')
        PsiWhiteSpace(' ')
        CodeReferenceElement: |
          PsiElement(identifier)('|')
        PsiWhiteSpace(' ')
        SimpleType: Int
          CodeReferenceElement: Int
            PsiElement(identifier)('Int')
      PsiWhiteSpace(' ')
      CodeReferenceElement: |
        PsiElement(identifier)('|')
      PsiWhiteSpace(' ')
      SimpleType: Unit
        CodeReferenceElement: Unit
          PsiElement(identifier)('Unit')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    ReferenceExpression: x2
      PsiElement(identifier)('x2')
