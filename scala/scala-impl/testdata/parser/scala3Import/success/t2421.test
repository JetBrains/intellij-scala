object Test {
  abstract class <~<[-From, +To] extends (From => To)
  implicit def trivial[A]: A <~< A = sys.error("")


  trait Forcible[T]
  implicit val forcibleInt: (Int <~< Forcible[Int]) = sys.error("")

  def headProxy[P <: Forcible[Int]](implicit w: Int <~< P): P = sys.error("")

  headProxy
  // trivial[Int] should not be considered a valid implicit, since w would have type Int <~< Int,
  // and headProxy's type parameter P cannot be instantiated to Int
}
-----
ScalaFile
  ScObject: Test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScClass: <~<
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(abstract)('abstract')
          PsiWhiteSpace(' ')
          PsiElement(class)('class')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('<~<')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: From
              PsiElement(identifier)('-')
              PsiElement(identifier)('From')
            PsiElement(,)(',')
            PsiWhiteSpace(' ')
            TypeParameter: To
              PsiElement(identifier)('+')
              PsiElement(identifier)('To')
            PsiElement(])(']')
          PrimaryConstructor
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            Parameters
              <empty list>
          PsiWhiteSpace(' ')
          ExtendsBlock
            PsiElement(extends)('extends')
            PsiWhiteSpace(' ')
            TemplateParents
              ConstructorInvocation
                TypeInParenthesis: (From => To)
                  PsiElement(()('(')
                  FunctionalType: From => To
                    SimpleType: From
                      CodeReferenceElement: From
                        PsiElement(identifier)('From')
                    PsiWhiteSpace(' ')
                    PsiElement(=>)('=>')
                    PsiWhiteSpace(' ')
                    SimpleType: To
                      CodeReferenceElement: To
                        PsiElement(identifier)('To')
                  PsiElement())(')')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: trivial
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(implicit)('implicit')
          PsiWhiteSpace(' ')
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('trivial')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: A
              PsiElement(identifier)('A')
            PsiElement(])(']')
          Parameters
            <empty list>
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          InfixType: A <~< A
            SimpleType: A
              CodeReferenceElement: A
                PsiElement(identifier)('A')
            PsiWhiteSpace(' ')
            CodeReferenceElement: <~<
              PsiElement(identifier)('<~<')
            PsiWhiteSpace(' ')
            SimpleType: A
              CodeReferenceElement: A
                PsiElement(identifier)('A')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: sys.error
              ReferenceExpression: sys
                PsiElement(identifier)('sys')
              PsiElement(.)('.')
              PsiElement(identifier)('error')
            ArgumentList
              PsiElement(()('(')
              StringLiteral
                PsiElement(string content)('""')
              PsiElement())(')')
        PsiWhiteSpace('\n\n\n  ')
        ScTrait: Forcible
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(trait)('trait')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Forcible')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: T
              PsiElement(identifier)('T')
            PsiElement(])(']')
          ExtendsBlock
            <empty list>
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: forcibleInt
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(implicit)('implicit')
          PsiWhiteSpace(' ')
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: forcibleInt
              PsiElement(identifier)('forcibleInt')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          TypeInParenthesis: (Int <~< Forcible[Int])
            PsiElement(()('(')
            InfixType: Int <~< Forcible[Int]
              SimpleType: Int
                CodeReferenceElement: Int
                  PsiElement(identifier)('Int')
              PsiWhiteSpace(' ')
              CodeReferenceElement: <~<
                PsiElement(identifier)('<~<')
              PsiWhiteSpace(' ')
              ParametrizedType: Forcible[Int]
                SimpleType: Forcible
                  CodeReferenceElement: Forcible
                    PsiElement(identifier)('Forcible')
                TypeArgumentsList
                  PsiElement([)('[')
                  SimpleType: Int
                    CodeReferenceElement: Int
                      PsiElement(identifier)('Int')
                  PsiElement(])(']')
            PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: sys.error
              ReferenceExpression: sys
                PsiElement(identifier)('sys')
              PsiElement(.)('.')
              PsiElement(identifier)('error')
            ArgumentList
              PsiElement(()('(')
              StringLiteral
                PsiElement(string content)('""')
              PsiElement())(')')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: headProxy
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('headProxy')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: P
              PsiElement(identifier)('P')
              PsiWhiteSpace(' ')
              PsiElement(<:)('<:')
              PsiWhiteSpace(' ')
              ParametrizedType: Forcible[Int]
                SimpleType: Forcible
                  CodeReferenceElement: Forcible
                    PsiElement(identifier)('Forcible')
                TypeArgumentsList
                  PsiElement([)('[')
                  SimpleType: Int
                    CodeReferenceElement: Int
                      PsiElement(identifier)('Int')
                  PsiElement(])(']')
            PsiElement(])(']')
          Parameters
            ParametersClause
              PsiElement(()('(')
              PsiElement(implicit)('implicit')
              PsiWhiteSpace(' ')
              Parameter: w
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('w')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  InfixType: Int <~< P
                    SimpleType: Int
                      CodeReferenceElement: Int
                        PsiElement(identifier)('Int')
                    PsiWhiteSpace(' ')
                    CodeReferenceElement: <~<
                      PsiElement(identifier)('<~<')
                    PsiWhiteSpace(' ')
                    SimpleType: P
                      CodeReferenceElement: P
                        PsiElement(identifier)('P')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: P
            CodeReferenceElement: P
              PsiElement(identifier)('P')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: sys.error
              ReferenceExpression: sys
                PsiElement(identifier)('sys')
              PsiElement(.)('.')
              PsiElement(identifier)('error')
            ArgumentList
              PsiElement(()('(')
              StringLiteral
                PsiElement(string content)('""')
              PsiElement())(')')
        PsiWhiteSpace('\n\n  ')
        ReferenceExpression: headProxy
          PsiElement(identifier)('headProxy')
        PsiWhiteSpace('\n  ')
        PsiComment(comment)('// trivial[Int] should not be considered a valid implicit, since w would have type Int <~< Int,')
        PsiWhiteSpace('\n  ')
        PsiComment(comment)('// and headProxy's type parameter P cannot be instantiated to Int')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
