import scala.deriving.Mirror

trait MixinAMini {
  lazy val mixinB = new MixinBMini() {}
}
trait MixinBMini {
  sealed trait Lst // crucially, no companion is defined
  case class Cn(h: Int, t: Lst) extends Lst
  case object Nl extends Lst
}
trait SubABMini extends MixinAMini with MixinBMini {
  val mirror_SubABMini_super_mixinB_Lst =
    summon[Mirror.Of[SubABMini.super[MixinAMini].mixinB.Lst]]
}
-----
ScalaFile
  ScImportStatement
    PsiElement(import)('import')
    PsiWhiteSpace(' ')
    ImportExpression
      CodeReferenceElement: scala.deriving.Mirror
        CodeReferenceElement: scala.deriving
          CodeReferenceElement: scala
            PsiElement(identifier)('scala')
          PsiElement(.)('.')
          PsiElement(identifier)('deriving')
        PsiElement(.)('.')
        PsiElement(identifier)('Mirror')
  PsiWhiteSpace('\n\n')
  ScTrait: MixinAMini
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('MixinAMini')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: mixinB
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(lazy)('lazy')
          PsiWhiteSpace(' ')
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: mixinB
              PsiElement(identifier)('mixinB')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ScNewTemplateDefinition: <anonymous>
            PsiElement(new)('new')
            PsiWhiteSpace(' ')
            ExtendsBlock
              TemplateParents
                ConstructorInvocation
                  SimpleType: MixinBMini
                    CodeReferenceElement: MixinBMini
                      PsiElement(identifier)('MixinBMini')
                  ArgumentList
                    PsiElement(()('(')
                    PsiElement())(')')
              PsiWhiteSpace(' ')
              ScTemplateBody
                PsiElement({)('{')
                PsiElement(})('}')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n')
  ScTrait: MixinBMini
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('MixinBMini')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScTrait: Lst
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(sealed)('sealed')
          PsiWhiteSpace(' ')
          PsiElement(trait)('trait')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Lst')
          ExtendsBlock
            <empty list>
        PsiWhiteSpace(' ')
        PsiComment(comment)('// crucially, no companion is defined')
        PsiWhiteSpace('\n  ')
        ScClass: Cn
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(case)('case')
          PsiWhiteSpace(' ')
          PsiElement(class)('class')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Cn')
          PrimaryConstructor
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            Parameters
              ParametersClause
                PsiElement(()('(')
                ClassParameter: h
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(identifier)('h')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    SimpleType: Int
                      CodeReferenceElement: Int
                        PsiElement(identifier)('Int')
                PsiElement(,)(',')
                PsiWhiteSpace(' ')
                ClassParameter: t
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(identifier)('t')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    SimpleType: Lst
                      CodeReferenceElement: Lst
                        PsiElement(identifier)('Lst')
                PsiElement())(')')
          PsiWhiteSpace(' ')
          ExtendsBlock
            PsiElement(extends)('extends')
            PsiWhiteSpace(' ')
            TemplateParents
              ConstructorInvocation
                SimpleType: Lst
                  CodeReferenceElement: Lst
                    PsiElement(identifier)('Lst')
        PsiWhiteSpace('\n  ')
        ScObject: Nl
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(case)('case')
          PsiWhiteSpace(' ')
          PsiElement(object)('object')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Nl')
          PsiWhiteSpace(' ')
          ExtendsBlock
            PsiElement(extends)('extends')
            PsiWhiteSpace(' ')
            TemplateParents
              ConstructorInvocation
                SimpleType: Lst
                  CodeReferenceElement: Lst
                    PsiElement(identifier)('Lst')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n')
  ScTrait: SubABMini
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('SubABMini')
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          SimpleType: MixinAMini
            CodeReferenceElement: MixinAMini
              PsiElement(identifier)('MixinAMini')
        PsiWhiteSpace(' ')
        PsiElement(with)('with')
        PsiWhiteSpace(' ')
        ConstructorInvocation
          SimpleType: MixinBMini
            CodeReferenceElement: MixinBMini
              PsiElement(identifier)('MixinBMini')
      PsiWhiteSpace(' ')
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: mirror_SubABMini_super_mixinB_Lst
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: mirror_SubABMini_super_mixinB_Lst
              PsiElement(identifier)('mirror_SubABMini_super_mixinB_Lst')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace('\n    ')
          GenericCall
            ReferenceExpression: summon
              PsiElement(identifier)('summon')
            TypeArgumentsList
              PsiElement([)('[')
              ParametrizedType: Mirror.Of[SubABMini.super[MixinAMini].mixinB.Lst]
                SimpleType: Mirror.Of
                  CodeReferenceElement: Mirror.Of
                    CodeReferenceElement: Mirror
                      PsiElement(identifier)('Mirror')
                    PsiElement(.)('.')
                    PsiElement(identifier)('Of')
                TypeArgumentsList
                  PsiElement([)('[')
                  SimpleType: SubABMini.super[MixinAMini].mixinB.Lst
                    CodeReferenceElement: SubABMini.super[MixinAMini].mixinB.Lst
                      CodeReferenceElement: SubABMini.super[MixinAMini].mixinB
                        SuperReference
                          CodeReferenceElement: SubABMini
                            PsiElement(identifier)('SubABMini')
                          PsiElement(.)('.')
                          PsiElement(super)('super')
                          PsiElement([)('[')
                          PsiElement(identifier)('MixinAMini')
                          PsiElement(])(']')
                        PsiElement(.)('.')
                        PsiElement(identifier)('mixinB')
                      PsiElement(.)('.')
                      PsiElement(identifier)('Lst')
                  PsiElement(])(']')
              PsiElement(])(']')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
