object TailrecAfterTryCatch {

  @annotation.tailrec
  final def good1(): Unit = {
    1 match {
      case 2 => {
        try {
        //  return
        } catch {
          case e: ClassNotFoundException =>
        }
        good1()
      }
    }
  }

  @annotation.tailrec
  final def good2(): Unit = {
    //1 match {
    //  case 2 => {
        try {
          return
        } catch {
          case e: ClassNotFoundException =>
        }
        good2()
    //  }
    //}
  }

  @annotation.tailrec
  final def good3(): Unit = {
    val 1 = 2
    try {
      return
    } catch {
      case e: ClassNotFoundException =>
    }
    good3()
  }

  @annotation.tailrec
  final def bad(): Unit = {
    1 match {
      case 2 => {
        try {
          return
        } catch {
          case e: ClassNotFoundException =>
        }
        bad()
      }
    }
  }

}
-----
ScalaFile
  ScObject: TailrecAfterTryCatch
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('TailrecAfterTryCatch')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: good1
          AnnotationsList
            Annotation
              PsiElement(@)('@')
              AnnotationExpression
                ConstructorInvocation
                  SimpleType: annotation.tailrec
                    CodeReferenceElement: annotation.tailrec
                      CodeReferenceElement: annotation
                        PsiElement(identifier)('annotation')
                      PsiElement(.)('.')
                      PsiElement(identifier)('tailrec')
          PsiWhiteSpace('\n  ')
          Modifiers
            PsiElement(final)('final')
          PsiWhiteSpace(' ')
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('good1')
          Parameters
            ParametersClause
              PsiElement(()('(')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Unit
            CodeReferenceElement: Unit
              PsiElement(identifier)('Unit')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          BlockExpression
            PsiElement({)('{')
            PsiWhiteSpace('\n    ')
            MatchStatement
              IntegerLiteral
                PsiElement(integer)('1')
              PsiWhiteSpace(' ')
              PsiElement(match)('match')
              PsiWhiteSpace(' ')
              PsiElement({)('{')
              PsiWhiteSpace('\n      ')
              CaseClauses
                CaseClause
                  PsiElement(case)('case')
                  PsiWhiteSpace(' ')
                  LiteralPattern
                    IntegerLiteral
                      PsiElement(integer)('2')
                  PsiWhiteSpace(' ')
                  PsiElement(=>)('=>')
                  PsiWhiteSpace(' ')
                  BlockOfExpressions
                    BlockExpression
                      PsiElement({)('{')
                      PsiWhiteSpace('\n        ')
                      TryStatement
                        PsiElement(try)('try')
                        PsiWhiteSpace(' ')
                        BlockExpression
                          PsiElement({)('{')
                          PsiWhiteSpace('\n        ')
                          PsiComment(comment)('//  return')
                          PsiWhiteSpace('\n        ')
                          PsiElement(})('}')
                        PsiWhiteSpace(' ')
                        CatchBlock
                          PsiElement(catch)('catch')
                          PsiWhiteSpace(' ')
                          BlockExpression
                            PsiElement({)('{')
                            PsiWhiteSpace('\n          ')
                            CaseClauses
                              CaseClause
                                PsiElement(case)('case')
                                PsiWhiteSpace(' ')
                                Scala3 TypedPattern
                                  ReferencePattern: e
                                    PsiElement(identifier)('e')
                                  PsiElement(:)(':')
                                  PsiWhiteSpace(' ')
                                  TypePattern
                                    SimpleType: ClassNotFoundException
                                      CodeReferenceElement: ClassNotFoundException
                                        PsiElement(identifier)('ClassNotFoundException')
                                PsiWhiteSpace(' ')
                                PsiElement(=>)('=>')
                                BlockOfExpressions
                                  <empty list>
                            PsiWhiteSpace('\n        ')
                            PsiElement(})('}')
                      PsiWhiteSpace('\n        ')
                      MethodCall
                        ReferenceExpression: good1
                          PsiElement(identifier)('good1')
                        ArgumentList
                          PsiElement(()('(')
                          PsiElement())(')')
                      PsiWhiteSpace('\n      ')
                      PsiElement(})('}')
              PsiWhiteSpace('\n    ')
              PsiElement(})('}')
            PsiWhiteSpace('\n  ')
            PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: good2
          AnnotationsList
            Annotation
              PsiElement(@)('@')
              AnnotationExpression
                ConstructorInvocation
                  SimpleType: annotation.tailrec
                    CodeReferenceElement: annotation.tailrec
                      CodeReferenceElement: annotation
                        PsiElement(identifier)('annotation')
                      PsiElement(.)('.')
                      PsiElement(identifier)('tailrec')
          PsiWhiteSpace('\n  ')
          Modifiers
            PsiElement(final)('final')
          PsiWhiteSpace(' ')
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('good2')
          Parameters
            ParametersClause
              PsiElement(()('(')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Unit
            CodeReferenceElement: Unit
              PsiElement(identifier)('Unit')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          BlockExpression
            PsiElement({)('{')
            PsiWhiteSpace('\n    ')
            PsiComment(comment)('//1 match {')
            PsiWhiteSpace('\n    ')
            PsiComment(comment)('//  case 2 => {')
            PsiWhiteSpace('\n        ')
            TryStatement
              PsiElement(try)('try')
              PsiWhiteSpace(' ')
              BlockExpression
                PsiElement({)('{')
                PsiWhiteSpace('\n          ')
                ReturnStatement
                  PsiElement(return)('return')
                PsiWhiteSpace('\n        ')
                PsiElement(})('}')
              PsiWhiteSpace(' ')
              CatchBlock
                PsiElement(catch)('catch')
                PsiWhiteSpace(' ')
                BlockExpression
                  PsiElement({)('{')
                  PsiWhiteSpace('\n          ')
                  CaseClauses
                    CaseClause
                      PsiElement(case)('case')
                      PsiWhiteSpace(' ')
                      Scala3 TypedPattern
                        ReferencePattern: e
                          PsiElement(identifier)('e')
                        PsiElement(:)(':')
                        PsiWhiteSpace(' ')
                        TypePattern
                          SimpleType: ClassNotFoundException
                            CodeReferenceElement: ClassNotFoundException
                              PsiElement(identifier)('ClassNotFoundException')
                      PsiWhiteSpace(' ')
                      PsiElement(=>)('=>')
                      BlockOfExpressions
                        <empty list>
                  PsiWhiteSpace('\n        ')
                  PsiElement(})('}')
            PsiWhiteSpace('\n        ')
            MethodCall
              ReferenceExpression: good2
                PsiElement(identifier)('good2')
              ArgumentList
                PsiElement(()('(')
                PsiElement())(')')
            PsiWhiteSpace('\n    ')
            PsiComment(comment)('//  }')
            PsiWhiteSpace('\n    ')
            PsiComment(comment)('//}')
            PsiWhiteSpace('\n  ')
            PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: good3
          AnnotationsList
            Annotation
              PsiElement(@)('@')
              AnnotationExpression
                ConstructorInvocation
                  SimpleType: annotation.tailrec
                    CodeReferenceElement: annotation.tailrec
                      CodeReferenceElement: annotation
                        PsiElement(identifier)('annotation')
                      PsiElement(.)('.')
                      PsiElement(identifier)('tailrec')
          PsiWhiteSpace('\n  ')
          Modifiers
            PsiElement(final)('final')
          PsiWhiteSpace(' ')
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('good3')
          Parameters
            ParametersClause
              PsiElement(()('(')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Unit
            CodeReferenceElement: Unit
              PsiElement(identifier)('Unit')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          BlockExpression
            PsiElement({)('{')
            PsiWhiteSpace('\n    ')
            ScPatternDefinition
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              ListOfPatterns
                LiteralPattern
                  IntegerLiteral
                    PsiElement(integer)('1')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              IntegerLiteral
                PsiElement(integer)('2')
            PsiWhiteSpace('\n    ')
            TryStatement
              PsiElement(try)('try')
              PsiWhiteSpace(' ')
              BlockExpression
                PsiElement({)('{')
                PsiWhiteSpace('\n      ')
                ReturnStatement
                  PsiElement(return)('return')
                PsiWhiteSpace('\n    ')
                PsiElement(})('}')
              PsiWhiteSpace(' ')
              CatchBlock
                PsiElement(catch)('catch')
                PsiWhiteSpace(' ')
                BlockExpression
                  PsiElement({)('{')
                  PsiWhiteSpace('\n      ')
                  CaseClauses
                    CaseClause
                      PsiElement(case)('case')
                      PsiWhiteSpace(' ')
                      Scala3 TypedPattern
                        ReferencePattern: e
                          PsiElement(identifier)('e')
                        PsiElement(:)(':')
                        PsiWhiteSpace(' ')
                        TypePattern
                          SimpleType: ClassNotFoundException
                            CodeReferenceElement: ClassNotFoundException
                              PsiElement(identifier)('ClassNotFoundException')
                      PsiWhiteSpace(' ')
                      PsiElement(=>)('=>')
                      BlockOfExpressions
                        <empty list>
                  PsiWhiteSpace('\n    ')
                  PsiElement(})('}')
            PsiWhiteSpace('\n    ')
            MethodCall
              ReferenceExpression: good3
                PsiElement(identifier)('good3')
              ArgumentList
                PsiElement(()('(')
                PsiElement())(')')
            PsiWhiteSpace('\n  ')
            PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: bad
          AnnotationsList
            Annotation
              PsiElement(@)('@')
              AnnotationExpression
                ConstructorInvocation
                  SimpleType: annotation.tailrec
                    CodeReferenceElement: annotation.tailrec
                      CodeReferenceElement: annotation
                        PsiElement(identifier)('annotation')
                      PsiElement(.)('.')
                      PsiElement(identifier)('tailrec')
          PsiWhiteSpace('\n  ')
          Modifiers
            PsiElement(final)('final')
          PsiWhiteSpace(' ')
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('bad')
          Parameters
            ParametersClause
              PsiElement(()('(')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Unit
            CodeReferenceElement: Unit
              PsiElement(identifier)('Unit')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          BlockExpression
            PsiElement({)('{')
            PsiWhiteSpace('\n    ')
            MatchStatement
              IntegerLiteral
                PsiElement(integer)('1')
              PsiWhiteSpace(' ')
              PsiElement(match)('match')
              PsiWhiteSpace(' ')
              PsiElement({)('{')
              PsiWhiteSpace('\n      ')
              CaseClauses
                CaseClause
                  PsiElement(case)('case')
                  PsiWhiteSpace(' ')
                  LiteralPattern
                    IntegerLiteral
                      PsiElement(integer)('2')
                  PsiWhiteSpace(' ')
                  PsiElement(=>)('=>')
                  PsiWhiteSpace(' ')
                  BlockOfExpressions
                    BlockExpression
                      PsiElement({)('{')
                      PsiWhiteSpace('\n        ')
                      TryStatement
                        PsiElement(try)('try')
                        PsiWhiteSpace(' ')
                        BlockExpression
                          PsiElement({)('{')
                          PsiWhiteSpace('\n          ')
                          ReturnStatement
                            PsiElement(return)('return')
                          PsiWhiteSpace('\n        ')
                          PsiElement(})('}')
                        PsiWhiteSpace(' ')
                        CatchBlock
                          PsiElement(catch)('catch')
                          PsiWhiteSpace(' ')
                          BlockExpression
                            PsiElement({)('{')
                            PsiWhiteSpace('\n          ')
                            CaseClauses
                              CaseClause
                                PsiElement(case)('case')
                                PsiWhiteSpace(' ')
                                Scala3 TypedPattern
                                  ReferencePattern: e
                                    PsiElement(identifier)('e')
                                  PsiElement(:)(':')
                                  PsiWhiteSpace(' ')
                                  TypePattern
                                    SimpleType: ClassNotFoundException
                                      CodeReferenceElement: ClassNotFoundException
                                        PsiElement(identifier)('ClassNotFoundException')
                                PsiWhiteSpace(' ')
                                PsiElement(=>)('=>')
                                BlockOfExpressions
                                  <empty list>
                            PsiWhiteSpace('\n        ')
                            PsiElement(})('}')
                      PsiWhiteSpace('\n        ')
                      MethodCall
                        ReferenceExpression: bad
                          PsiElement(identifier)('bad')
                        ArgumentList
                          PsiElement(()('(')
                          PsiElement())(')')
                      PsiWhiteSpace('\n      ')
                      PsiElement(})('}')
              PsiWhiteSpace('\n    ')
              PsiElement(})('}')
            PsiWhiteSpace('\n  ')
            PsiElement(})('}')
        PsiWhiteSpace('\n\n')
        PsiElement(})('}')
