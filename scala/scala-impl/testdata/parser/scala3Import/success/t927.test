object Test {

  def sum(stream: Stream[Int]): Int =
    stream match {
      case Stream.Empty => 0
      case Stream.cons(hd, tl) => hd + sum(tl)
    }
  val str: Stream[Int] = List(1,2,3).iterator.toStream
  assert(sum(str) == 6)

}
-----
ScalaFile
  ScObject: Test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: sum
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('sum')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: stream
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('stream')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  ParametrizedType: Stream[Int]
                    SimpleType: Stream
                      CodeReferenceElement: Stream
                        PsiElement(identifier)('Stream')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: Int
                        CodeReferenceElement: Int
                          PsiElement(identifier)('Int')
                      PsiElement(])(']')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Int
            CodeReferenceElement: Int
              PsiElement(identifier)('Int')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace('\n    ')
          MatchStatement
            ReferenceExpression: stream
              PsiElement(identifier)('stream')
            PsiWhiteSpace(' ')
            PsiElement(match)('match')
            PsiWhiteSpace(' ')
            PsiElement({)('{')
            PsiWhiteSpace('\n      ')
            CaseClauses
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                StableElementPattern
                  ReferenceExpression: Stream.Empty
                    ReferenceExpression: Stream
                      PsiElement(identifier)('Stream')
                    PsiElement(.)('.')
                    PsiElement(identifier)('Empty')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                BlockOfExpressions
                  IntegerLiteral
                    PsiElement(integer)('0')
              PsiWhiteSpace('\n      ')
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                ConstructorPattern
                  CodeReferenceElement: Stream.cons
                    CodeReferenceElement: Stream
                      PsiElement(identifier)('Stream')
                    PsiElement(.)('.')
                    PsiElement(identifier)('cons')
                  Pattern Argument List
                    PsiElement(()('(')
                    ReferencePattern: hd
                      PsiElement(identifier)('hd')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    ReferencePattern: tl
                      PsiElement(identifier)('tl')
                    PsiElement())(')')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                BlockOfExpressions
                  InfixExpression
                    ReferenceExpression: hd
                      PsiElement(identifier)('hd')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: +
                      PsiElement(identifier)('+')
                    PsiWhiteSpace(' ')
                    MethodCall
                      ReferenceExpression: sum
                        PsiElement(identifier)('sum')
                      ArgumentList
                        PsiElement(()('(')
                        ReferenceExpression: tl
                          PsiElement(identifier)('tl')
                        PsiElement())(')')
            PsiWhiteSpace('\n    ')
            PsiElement(})('}')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: str
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: str
              PsiElement(identifier)('str')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: Stream[Int]
            SimpleType: Stream
              CodeReferenceElement: Stream
                PsiElement(identifier)('Stream')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: Int
                CodeReferenceElement: Int
                  PsiElement(identifier)('Int')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: List(1,2,3).iterator.toStream
            ReferenceExpression: List(1,2,3).iterator
              MethodCall
                ReferenceExpression: List
                  PsiElement(identifier)('List')
                ArgumentList
                  PsiElement(()('(')
                  IntegerLiteral
                    PsiElement(integer)('1')
                  PsiElement(,)(',')
                  IntegerLiteral
                    PsiElement(integer)('2')
                  PsiElement(,)(',')
                  IntegerLiteral
                    PsiElement(integer)('3')
                  PsiElement())(')')
              PsiElement(.)('.')
              PsiElement(identifier)('iterator')
            PsiElement(.)('.')
            PsiElement(identifier)('toStream')
        PsiWhiteSpace('\n  ')
        MethodCall
          ReferenceExpression: assert
            PsiElement(identifier)('assert')
          ArgumentList
            PsiElement(()('(')
            InfixExpression
              MethodCall
                ReferenceExpression: sum
                  PsiElement(identifier)('sum')
                ArgumentList
                  PsiElement(()('(')
                  ReferenceExpression: str
                    PsiElement(identifier)('str')
                  PsiElement())(')')
              PsiWhiteSpace(' ')
              ReferenceExpression: ==
                PsiElement(identifier)('==')
              PsiWhiteSpace(' ')
              IntegerLiteral
                PsiElement(integer)('6')
            PsiElement())(')')
        PsiWhiteSpace('\n\n')
        PsiElement(})('}')
