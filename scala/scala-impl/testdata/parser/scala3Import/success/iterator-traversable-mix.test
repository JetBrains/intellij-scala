object Test {
  for {
    x1 <- List(1, 2)
    x2 <- Iterator(3, 4)
    x3 <- Seq(5, 6).iterator
    x4 <- LazyList(7, 8)
  } yield x1 + x2 + x3 + x4
}
-----
ScalaFile
  ScObject: Test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ForStatement
          PsiElement(for)('for')
          PsiWhiteSpace(' ')
          PsiElement({)('{')
          PsiWhiteSpace('\n    ')
          Enumerators
            Generator
              ReferencePattern: x1
                PsiElement(identifier)('x1')
              PsiWhiteSpace(' ')
              PsiElement(<-)('<-')
              PsiWhiteSpace(' ')
              MethodCall
                ReferenceExpression: List
                  PsiElement(identifier)('List')
                ArgumentList
                  PsiElement(()('(')
                  IntegerLiteral
                    PsiElement(integer)('1')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  IntegerLiteral
                    PsiElement(integer)('2')
                  PsiElement())(')')
            PsiWhiteSpace('\n    ')
            Generator
              ReferencePattern: x2
                PsiElement(identifier)('x2')
              PsiWhiteSpace(' ')
              PsiElement(<-)('<-')
              PsiWhiteSpace(' ')
              MethodCall
                ReferenceExpression: Iterator
                  PsiElement(identifier)('Iterator')
                ArgumentList
                  PsiElement(()('(')
                  IntegerLiteral
                    PsiElement(integer)('3')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  IntegerLiteral
                    PsiElement(integer)('4')
                  PsiElement())(')')
            PsiWhiteSpace('\n    ')
            Generator
              ReferencePattern: x3
                PsiElement(identifier)('x3')
              PsiWhiteSpace(' ')
              PsiElement(<-)('<-')
              PsiWhiteSpace(' ')
              ReferenceExpression: Seq(5, 6).iterator
                MethodCall
                  ReferenceExpression: Seq
                    PsiElement(identifier)('Seq')
                  ArgumentList
                    PsiElement(()('(')
                    IntegerLiteral
                      PsiElement(integer)('5')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    IntegerLiteral
                      PsiElement(integer)('6')
                    PsiElement())(')')
                PsiElement(.)('.')
                PsiElement(identifier)('iterator')
            PsiWhiteSpace('\n    ')
            Generator
              ReferencePattern: x4
                PsiElement(identifier)('x4')
              PsiWhiteSpace(' ')
              PsiElement(<-)('<-')
              PsiWhiteSpace(' ')
              MethodCall
                ReferenceExpression: LazyList
                  PsiElement(identifier)('LazyList')
                ArgumentList
                  PsiElement(()('(')
                  IntegerLiteral
                    PsiElement(integer)('7')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  IntegerLiteral
                    PsiElement(integer)('8')
                  PsiElement())(')')
          PsiWhiteSpace('\n  ')
          PsiElement(})('}')
          PsiWhiteSpace(' ')
          PsiElement(yield)('yield')
          PsiWhiteSpace(' ')
          InfixExpression
            InfixExpression
              InfixExpression
                ReferenceExpression: x1
                  PsiElement(identifier)('x1')
                PsiWhiteSpace(' ')
                ReferenceExpression: +
                  PsiElement(identifier)('+')
                PsiWhiteSpace(' ')
                ReferenceExpression: x2
                  PsiElement(identifier)('x2')
              PsiWhiteSpace(' ')
              ReferenceExpression: +
                PsiElement(identifier)('+')
              PsiWhiteSpace(' ')
              ReferenceExpression: x3
                PsiElement(identifier)('x3')
            PsiWhiteSpace(' ')
            ReferenceExpression: +
              PsiElement(identifier)('+')
            PsiWhiteSpace(' ')
            ReferenceExpression: x4
              PsiElement(identifier)('x4')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
