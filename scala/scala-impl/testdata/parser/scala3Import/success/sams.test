object test {

  trait X { def foo(x: Int): Int; def bar = foo(2) }

  val x: X = (x: Int) => 2  // should be a closure

  trait T {
    var f = 2
    def foo(x: Int): Int
  }

  val t: T = (x: Int) => 2   // needs to be an anonymous class because of defined field

  trait U extends T

  val u: U = (x: Int) => 2   // needs to be an anonymous class because of inherited field

  trait V extends Exception { def foo(x: Int): Int }

  val v: V = (x: Int) => 2   // needs to be an anonymous class because the trait extends a non-object class

  trait Y extends X {
    def baz = super.bar
  }

  val y: Y = (x: Int) => 2   // needs to be an anonymous class because of super accessor

  trait Z {
    def foo(x: Int): Int; println("hi there!")
  }
  trait ZZ extends Z

  val z: Z = (x: Int) => 2   // needs to be an anonymous class because trait has initialization code
  val zz: ZZ = (x: Int) => 2   // needs to be an anonymous class becaiuse trait has initialization code

  abstract class C {
    def foo(x: Int): Int

    trait I { def foo(x: Int): Int }

  }

  val c: C = (x: Int) => 2   // needs to be an anonymous class because C is not a trait

  val ci: c.I = (x: Int) => 2 // needs to be an anonymous class because it needs an outer pointer


  val pf: PartialFunction[Int, Int] = {
    case 1 => 1
    case 2 => 2
  }

  val qf: PartialFunction[(Int, String), Int] = {
    case (1, "abc") => 1
    case _ => 2
  }

  val rf: PartialFunction[(Int, AnyRef), Int] = {
    case (_: Int, _: String) => 1
    case _ => 2
  }

  val sf: PartialFunction[Any, Int] = {
    case x: String if x == "abc" => 1
  }
}

// From: neg/sammy_poly
// synthesizeSAMFunction where the sam type is not fully defined
class T {
  trait F[T, U] { def apply(x: T): U }
  // this is an inner trait, that will receive an abstract $outer pointer. Not a SAM.
  def app[T, U](x: T)(f: F[T, U]): U = f(x)
  app(1)(x => List(x))
}

object SI9943 {

class Foo[T] {
  def toMap[K, V](implicit ev: Foo[T] <:< Foo[(K, V)]): Foo[Map[K, V]] = null
  def toMap[K](keySelector: T => K): Foo[Map[K, T]] = null
}

object Foo {
  val f: Foo[Int] = null
  val m = f.toMap(_ % 2)
}
}
-----
ScalaFile
  ScObject: test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('test')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n\n  ')
        ScTrait: X
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(trait)('trait')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('X')
          PsiWhiteSpace(' ')
          ExtendsBlock
            ScTemplateBody
              PsiElement({)('{')
              PsiWhiteSpace(' ')
              ScFunctionDeclaration: foo
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(def)('def')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('foo')
                Parameters
                  ParametersClause
                    PsiElement(()('(')
                    Parameter: x
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(identifier)('x')
                      PsiElement(:)(':')
                      PsiWhiteSpace(' ')
                      ParameterType
                        SimpleType: Int
                          CodeReferenceElement: Int
                            PsiElement(identifier)('Int')
                    PsiElement())(')')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                SimpleType: Int
                  CodeReferenceElement: Int
                    PsiElement(identifier)('Int')
              PsiElement(;)(';')
              PsiWhiteSpace(' ')
              ScFunctionDefinition: bar
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(def)('def')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('bar')
                Parameters
                  <empty list>
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                MethodCall
                  ReferenceExpression: foo
                    PsiElement(identifier)('foo')
                  ArgumentList
                    PsiElement(()('(')
                    IntegerLiteral
                      PsiElement(integer)('2')
                    PsiElement())(')')
              PsiWhiteSpace(' ')
              PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        ScPatternDefinition: x
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: x
              PsiElement(identifier)('x')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: X
            CodeReferenceElement: X
              PsiElement(identifier)('X')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          FunctionExpression
            Parameters
              ParametersClause
                PsiElement(()('(')
                Parameter: x
                  AnnotationsList
                    <empty list>
                  PsiElement(identifier)('x')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    SimpleType: Int
                      CodeReferenceElement: Int
                        PsiElement(identifier)('Int')
                PsiElement())(')')
            PsiWhiteSpace(' ')
            PsiElement(=>)('=>')
            PsiWhiteSpace(' ')
            IntegerLiteral
              PsiElement(integer)('2')
        PsiWhiteSpace('  ')
        PsiComment(comment)('// should be a closure')
        PsiWhiteSpace('\n\n  ')
        ScTrait: T
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(trait)('trait')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('T')
          PsiWhiteSpace(' ')
          ExtendsBlock
            ScTemplateBody
              PsiElement({)('{')
              PsiWhiteSpace('\n    ')
              ScVariableDefinition: f
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(var)('var')
                PsiWhiteSpace(' ')
                ListOfPatterns
                  ReferencePattern: f
                    PsiElement(identifier)('f')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                IntegerLiteral
                  PsiElement(integer)('2')
              PsiWhiteSpace('\n    ')
              ScFunctionDeclaration: foo
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(def)('def')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('foo')
                Parameters
                  ParametersClause
                    PsiElement(()('(')
                    Parameter: x
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(identifier)('x')
                      PsiElement(:)(':')
                      PsiWhiteSpace(' ')
                      ParameterType
                        SimpleType: Int
                          CodeReferenceElement: Int
                            PsiElement(identifier)('Int')
                    PsiElement())(')')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                SimpleType: Int
                  CodeReferenceElement: Int
                    PsiElement(identifier)('Int')
              PsiWhiteSpace('\n  ')
              PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        ScPatternDefinition: t
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: t
              PsiElement(identifier)('t')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: T
            CodeReferenceElement: T
              PsiElement(identifier)('T')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          FunctionExpression
            Parameters
              ParametersClause
                PsiElement(()('(')
                Parameter: x
                  AnnotationsList
                    <empty list>
                  PsiElement(identifier)('x')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    SimpleType: Int
                      CodeReferenceElement: Int
                        PsiElement(identifier)('Int')
                PsiElement())(')')
            PsiWhiteSpace(' ')
            PsiElement(=>)('=>')
            PsiWhiteSpace(' ')
            IntegerLiteral
              PsiElement(integer)('2')
        PsiWhiteSpace('   ')
        PsiComment(comment)('// needs to be an anonymous class because of defined field')
        PsiWhiteSpace('\n\n  ')
        ScTrait: U
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(trait)('trait')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('U')
          PsiWhiteSpace(' ')
          ExtendsBlock
            PsiElement(extends)('extends')
            PsiWhiteSpace(' ')
            TemplateParents
              ConstructorInvocation
                SimpleType: T
                  CodeReferenceElement: T
                    PsiElement(identifier)('T')
        PsiWhiteSpace('\n\n  ')
        ScPatternDefinition: u
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: u
              PsiElement(identifier)('u')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: U
            CodeReferenceElement: U
              PsiElement(identifier)('U')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          FunctionExpression
            Parameters
              ParametersClause
                PsiElement(()('(')
                Parameter: x
                  AnnotationsList
                    <empty list>
                  PsiElement(identifier)('x')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    SimpleType: Int
                      CodeReferenceElement: Int
                        PsiElement(identifier)('Int')
                PsiElement())(')')
            PsiWhiteSpace(' ')
            PsiElement(=>)('=>')
            PsiWhiteSpace(' ')
            IntegerLiteral
              PsiElement(integer)('2')
        PsiWhiteSpace('   ')
        PsiComment(comment)('// needs to be an anonymous class because of inherited field')
        PsiWhiteSpace('\n\n  ')
        ScTrait: V
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(trait)('trait')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('V')
          PsiWhiteSpace(' ')
          ExtendsBlock
            PsiElement(extends)('extends')
            PsiWhiteSpace(' ')
            TemplateParents
              ConstructorInvocation
                SimpleType: Exception
                  CodeReferenceElement: Exception
                    PsiElement(identifier)('Exception')
            PsiWhiteSpace(' ')
            ScTemplateBody
              PsiElement({)('{')
              PsiWhiteSpace(' ')
              ScFunctionDeclaration: foo
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(def)('def')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('foo')
                Parameters
                  ParametersClause
                    PsiElement(()('(')
                    Parameter: x
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(identifier)('x')
                      PsiElement(:)(':')
                      PsiWhiteSpace(' ')
                      ParameterType
                        SimpleType: Int
                          CodeReferenceElement: Int
                            PsiElement(identifier)('Int')
                    PsiElement())(')')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                SimpleType: Int
                  CodeReferenceElement: Int
                    PsiElement(identifier)('Int')
              PsiWhiteSpace(' ')
              PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        ScPatternDefinition: v
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: v
              PsiElement(identifier)('v')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: V
            CodeReferenceElement: V
              PsiElement(identifier)('V')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          FunctionExpression
            Parameters
              ParametersClause
                PsiElement(()('(')
                Parameter: x
                  AnnotationsList
                    <empty list>
                  PsiElement(identifier)('x')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    SimpleType: Int
                      CodeReferenceElement: Int
                        PsiElement(identifier)('Int')
                PsiElement())(')')
            PsiWhiteSpace(' ')
            PsiElement(=>)('=>')
            PsiWhiteSpace(' ')
            IntegerLiteral
              PsiElement(integer)('2')
        PsiWhiteSpace('   ')
        PsiComment(comment)('// needs to be an anonymous class because the trait extends a non-object class')
        PsiWhiteSpace('\n\n  ')
        ScTrait: Y
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(trait)('trait')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Y')
          PsiWhiteSpace(' ')
          ExtendsBlock
            PsiElement(extends)('extends')
            PsiWhiteSpace(' ')
            TemplateParents
              ConstructorInvocation
                SimpleType: X
                  CodeReferenceElement: X
                    PsiElement(identifier)('X')
            PsiWhiteSpace(' ')
            ScTemplateBody
              PsiElement({)('{')
              PsiWhiteSpace('\n    ')
              ScFunctionDefinition: baz
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(def)('def')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('baz')
                Parameters
                  <empty list>
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                ReferenceExpression: super.bar
                  SuperReference
                    PsiElement(super)('super')
                  PsiElement(.)('.')
                  PsiElement(identifier)('bar')
              PsiWhiteSpace('\n  ')
              PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        ScPatternDefinition: y
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: y
              PsiElement(identifier)('y')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Y
            CodeReferenceElement: Y
              PsiElement(identifier)('Y')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          FunctionExpression
            Parameters
              ParametersClause
                PsiElement(()('(')
                Parameter: x
                  AnnotationsList
                    <empty list>
                  PsiElement(identifier)('x')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    SimpleType: Int
                      CodeReferenceElement: Int
                        PsiElement(identifier)('Int')
                PsiElement())(')')
            PsiWhiteSpace(' ')
            PsiElement(=>)('=>')
            PsiWhiteSpace(' ')
            IntegerLiteral
              PsiElement(integer)('2')
        PsiWhiteSpace('   ')
        PsiComment(comment)('// needs to be an anonymous class because of super accessor')
        PsiWhiteSpace('\n\n  ')
        ScTrait: Z
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(trait)('trait')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Z')
          PsiWhiteSpace(' ')
          ExtendsBlock
            ScTemplateBody
              PsiElement({)('{')
              PsiWhiteSpace('\n    ')
              ScFunctionDeclaration: foo
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(def)('def')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('foo')
                Parameters
                  ParametersClause
                    PsiElement(()('(')
                    Parameter: x
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(identifier)('x')
                      PsiElement(:)(':')
                      PsiWhiteSpace(' ')
                      ParameterType
                        SimpleType: Int
                          CodeReferenceElement: Int
                            PsiElement(identifier)('Int')
                    PsiElement())(')')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                SimpleType: Int
                  CodeReferenceElement: Int
                    PsiElement(identifier)('Int')
              PsiElement(;)(';')
              PsiWhiteSpace(' ')
              MethodCall
                ReferenceExpression: println
                  PsiElement(identifier)('println')
                ArgumentList
                  PsiElement(()('(')
                  StringLiteral
                    PsiElement(string content)('"hi there!"')
                  PsiElement())(')')
              PsiWhiteSpace('\n  ')
              PsiElement(})('}')
        PsiWhiteSpace('\n  ')
        ScTrait: ZZ
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(trait)('trait')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('ZZ')
          PsiWhiteSpace(' ')
          ExtendsBlock
            PsiElement(extends)('extends')
            PsiWhiteSpace(' ')
            TemplateParents
              ConstructorInvocation
                SimpleType: Z
                  CodeReferenceElement: Z
                    PsiElement(identifier)('Z')
        PsiWhiteSpace('\n\n  ')
        ScPatternDefinition: z
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: z
              PsiElement(identifier)('z')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Z
            CodeReferenceElement: Z
              PsiElement(identifier)('Z')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          FunctionExpression
            Parameters
              ParametersClause
                PsiElement(()('(')
                Parameter: x
                  AnnotationsList
                    <empty list>
                  PsiElement(identifier)('x')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    SimpleType: Int
                      CodeReferenceElement: Int
                        PsiElement(identifier)('Int')
                PsiElement())(')')
            PsiWhiteSpace(' ')
            PsiElement(=>)('=>')
            PsiWhiteSpace(' ')
            IntegerLiteral
              PsiElement(integer)('2')
        PsiWhiteSpace('   ')
        PsiComment(comment)('// needs to be an anonymous class because trait has initialization code')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: zz
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: zz
              PsiElement(identifier)('zz')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: ZZ
            CodeReferenceElement: ZZ
              PsiElement(identifier)('ZZ')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          FunctionExpression
            Parameters
              ParametersClause
                PsiElement(()('(')
                Parameter: x
                  AnnotationsList
                    <empty list>
                  PsiElement(identifier)('x')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    SimpleType: Int
                      CodeReferenceElement: Int
                        PsiElement(identifier)('Int')
                PsiElement())(')')
            PsiWhiteSpace(' ')
            PsiElement(=>)('=>')
            PsiWhiteSpace(' ')
            IntegerLiteral
              PsiElement(integer)('2')
        PsiWhiteSpace('   ')
        PsiComment(comment)('// needs to be an anonymous class becaiuse trait has initialization code')
        PsiWhiteSpace('\n\n  ')
        ScClass: C
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(abstract)('abstract')
          PsiWhiteSpace(' ')
          PsiElement(class)('class')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('C')
          PrimaryConstructor
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            Parameters
              <empty list>
          PsiWhiteSpace(' ')
          ExtendsBlock
            ScTemplateBody
              PsiElement({)('{')
              PsiWhiteSpace('\n    ')
              ScFunctionDeclaration: foo
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(def)('def')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('foo')
                Parameters
                  ParametersClause
                    PsiElement(()('(')
                    Parameter: x
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(identifier)('x')
                      PsiElement(:)(':')
                      PsiWhiteSpace(' ')
                      ParameterType
                        SimpleType: Int
                          CodeReferenceElement: Int
                            PsiElement(identifier)('Int')
                    PsiElement())(')')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                SimpleType: Int
                  CodeReferenceElement: Int
                    PsiElement(identifier)('Int')
              PsiWhiteSpace('\n\n    ')
              ScTrait: I
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(trait)('trait')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('I')
                PsiWhiteSpace(' ')
                ExtendsBlock
                  ScTemplateBody
                    PsiElement({)('{')
                    PsiWhiteSpace(' ')
                    ScFunctionDeclaration: foo
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(def)('def')
                      PsiWhiteSpace(' ')
                      PsiElement(identifier)('foo')
                      Parameters
                        ParametersClause
                          PsiElement(()('(')
                          Parameter: x
                            AnnotationsList
                              <empty list>
                            Modifiers
                              <empty list>
                            PsiElement(identifier)('x')
                            PsiElement(:)(':')
                            PsiWhiteSpace(' ')
                            ParameterType
                              SimpleType: Int
                                CodeReferenceElement: Int
                                  PsiElement(identifier)('Int')
                          PsiElement())(')')
                      PsiElement(:)(':')
                      PsiWhiteSpace(' ')
                      SimpleType: Int
                        CodeReferenceElement: Int
                          PsiElement(identifier)('Int')
                    PsiWhiteSpace(' ')
                    PsiElement(})('}')
              PsiWhiteSpace('\n\n  ')
              PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        ScPatternDefinition: c
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: c
              PsiElement(identifier)('c')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: C
            CodeReferenceElement: C
              PsiElement(identifier)('C')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          FunctionExpression
            Parameters
              ParametersClause
                PsiElement(()('(')
                Parameter: x
                  AnnotationsList
                    <empty list>
                  PsiElement(identifier)('x')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    SimpleType: Int
                      CodeReferenceElement: Int
                        PsiElement(identifier)('Int')
                PsiElement())(')')
            PsiWhiteSpace(' ')
            PsiElement(=>)('=>')
            PsiWhiteSpace(' ')
            IntegerLiteral
              PsiElement(integer)('2')
        PsiWhiteSpace('   ')
        PsiComment(comment)('// needs to be an anonymous class because C is not a trait')
        PsiWhiteSpace('\n\n  ')
        ScPatternDefinition: ci
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: ci
              PsiElement(identifier)('ci')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: c.I
            CodeReferenceElement: c.I
              CodeReferenceElement: c
                PsiElement(identifier)('c')
              PsiElement(.)('.')
              PsiElement(identifier)('I')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          FunctionExpression
            Parameters
              ParametersClause
                PsiElement(()('(')
                Parameter: x
                  AnnotationsList
                    <empty list>
                  PsiElement(identifier)('x')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    SimpleType: Int
                      CodeReferenceElement: Int
                        PsiElement(identifier)('Int')
                PsiElement())(')')
            PsiWhiteSpace(' ')
            PsiElement(=>)('=>')
            PsiWhiteSpace(' ')
            IntegerLiteral
              PsiElement(integer)('2')
        PsiWhiteSpace(' ')
        PsiComment(comment)('// needs to be an anonymous class because it needs an outer pointer')
        PsiWhiteSpace('\n\n\n  ')
        ScPatternDefinition: pf
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: pf
              PsiElement(identifier)('pf')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: PartialFunction[Int, Int]
            SimpleType: PartialFunction
              CodeReferenceElement: PartialFunction
                PsiElement(identifier)('PartialFunction')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: Int
                CodeReferenceElement: Int
                  PsiElement(identifier)('Int')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              SimpleType: Int
                CodeReferenceElement: Int
                  PsiElement(identifier)('Int')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          BlockExpression
            PsiElement({)('{')
            PsiWhiteSpace('\n    ')
            CaseClauses
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                LiteralPattern
                  IntegerLiteral
                    PsiElement(integer)('1')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                BlockOfExpressions
                  IntegerLiteral
                    PsiElement(integer)('1')
              PsiWhiteSpace('\n    ')
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                LiteralPattern
                  IntegerLiteral
                    PsiElement(integer)('2')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                BlockOfExpressions
                  IntegerLiteral
                    PsiElement(integer)('2')
            PsiWhiteSpace('\n  ')
            PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        ScPatternDefinition: qf
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: qf
              PsiElement(identifier)('qf')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: PartialFunction[(Int, String), Int]
            SimpleType: PartialFunction
              CodeReferenceElement: PartialFunction
                PsiElement(identifier)('PartialFunction')
            TypeArgumentsList
              PsiElement([)('[')
              TupleType: (Int, String)
                PsiElement(()('(')
                TypesList
                  SimpleType: Int
                    CodeReferenceElement: Int
                      PsiElement(identifier)('Int')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  SimpleType: String
                    CodeReferenceElement: String
                      PsiElement(identifier)('String')
                PsiElement())(')')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              SimpleType: Int
                CodeReferenceElement: Int
                  PsiElement(identifier)('Int')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          BlockExpression
            PsiElement({)('{')
            PsiWhiteSpace('\n    ')
            CaseClauses
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                TuplePattern
                  PsiElement(()('(')
                  ArgumentPatterns
                    LiteralPattern
                      IntegerLiteral
                        PsiElement(integer)('1')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    LiteralPattern
                      StringLiteral
                        PsiElement(string content)('"abc"')
                  PsiElement())(')')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                BlockOfExpressions
                  IntegerLiteral
                    PsiElement(integer)('1')
              PsiWhiteSpace('\n    ')
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                WildcardPattern
                  PsiElement(_)('_')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                BlockOfExpressions
                  IntegerLiteral
                    PsiElement(integer)('2')
            PsiWhiteSpace('\n  ')
            PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        ScPatternDefinition: rf
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: rf
              PsiElement(identifier)('rf')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: PartialFunction[(Int, AnyRef), Int]
            SimpleType: PartialFunction
              CodeReferenceElement: PartialFunction
                PsiElement(identifier)('PartialFunction')
            TypeArgumentsList
              PsiElement([)('[')
              TupleType: (Int, AnyRef)
                PsiElement(()('(')
                TypesList
                  SimpleType: Int
                    CodeReferenceElement: Int
                      PsiElement(identifier)('Int')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  SimpleType: AnyRef
                    CodeReferenceElement: AnyRef
                      PsiElement(identifier)('AnyRef')
                PsiElement())(')')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              SimpleType: Int
                CodeReferenceElement: Int
                  PsiElement(identifier)('Int')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          BlockExpression
            PsiElement({)('{')
            PsiWhiteSpace('\n    ')
            CaseClauses
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                TuplePattern
                  PsiElement(()('(')
                  ArgumentPatterns
                    Scala3 TypedPattern
                      WildcardPattern
                        PsiElement(_)('_')
                      PsiElement(:)(':')
                      PsiWhiteSpace(' ')
                      TypePattern
                        SimpleType: Int
                          CodeReferenceElement: Int
                            PsiElement(identifier)('Int')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    Scala3 TypedPattern
                      WildcardPattern
                        PsiElement(_)('_')
                      PsiElement(:)(':')
                      PsiWhiteSpace(' ')
                      TypePattern
                        SimpleType: String
                          CodeReferenceElement: String
                            PsiElement(identifier)('String')
                  PsiElement())(')')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                BlockOfExpressions
                  IntegerLiteral
                    PsiElement(integer)('1')
              PsiWhiteSpace('\n    ')
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                WildcardPattern
                  PsiElement(_)('_')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                BlockOfExpressions
                  IntegerLiteral
                    PsiElement(integer)('2')
            PsiWhiteSpace('\n  ')
            PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        ScPatternDefinition: sf
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: sf
              PsiElement(identifier)('sf')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: PartialFunction[Any, Int]
            SimpleType: PartialFunction
              CodeReferenceElement: PartialFunction
                PsiElement(identifier)('PartialFunction')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: Any
                CodeReferenceElement: Any
                  PsiElement(identifier)('Any')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              SimpleType: Int
                CodeReferenceElement: Int
                  PsiElement(identifier)('Int')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          BlockExpression
            PsiElement({)('{')
            PsiWhiteSpace('\n    ')
            CaseClauses
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                Scala3 TypedPattern
                  ReferencePattern: x
                    PsiElement(identifier)('x')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  TypePattern
                    SimpleType: String
                      CodeReferenceElement: String
                        PsiElement(identifier)('String')
                PsiWhiteSpace(' ')
                Guard
                  PsiElement(if)('if')
                  PsiWhiteSpace(' ')
                  InfixExpression
                    ReferenceExpression: x
                      PsiElement(identifier)('x')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: ==
                      PsiElement(identifier)('==')
                    PsiWhiteSpace(' ')
                    StringLiteral
                      PsiElement(string content)('"abc"')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                BlockOfExpressions
                  IntegerLiteral
                    PsiElement(integer)('1')
            PsiWhiteSpace('\n  ')
            PsiElement(})('}')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScClass: T
    PsiComment(comment)('// From: neg/sammy_poly')
    PsiWhiteSpace('\n')
    PsiComment(comment)('// synthesizeSAMFunction where the sam type is not fully defined')
    PsiWhiteSpace('\n')
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('T')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScTrait: F
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(trait)('trait')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('F')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: T
              PsiElement(identifier)('T')
            PsiElement(,)(',')
            PsiWhiteSpace(' ')
            TypeParameter: U
              PsiElement(identifier)('U')
            PsiElement(])(']')
          PsiWhiteSpace(' ')
          ExtendsBlock
            ScTemplateBody
              PsiElement({)('{')
              PsiWhiteSpace(' ')
              ScFunctionDeclaration: apply
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(def)('def')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('apply')
                Parameters
                  ParametersClause
                    PsiElement(()('(')
                    Parameter: x
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(identifier)('x')
                      PsiElement(:)(':')
                      PsiWhiteSpace(' ')
                      ParameterType
                        SimpleType: T
                          CodeReferenceElement: T
                            PsiElement(identifier)('T')
                    PsiElement())(')')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                SimpleType: U
                  CodeReferenceElement: U
                    PsiElement(identifier)('U')
              PsiWhiteSpace(' ')
              PsiElement(})('}')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: app
          PsiComment(comment)('// this is an inner trait, that will receive an abstract $outer pointer. Not a SAM.')
          PsiWhiteSpace('\n  ')
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('app')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: T
              PsiElement(identifier)('T')
            PsiElement(,)(',')
            PsiWhiteSpace(' ')
            TypeParameter: U
              PsiElement(identifier)('U')
            PsiElement(])(']')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: x
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: T
                    CodeReferenceElement: T
                      PsiElement(identifier)('T')
              PsiElement())(')')
            ParametersClause
              PsiElement(()('(')
              Parameter: f
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('f')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  ParametrizedType: F[T, U]
                    SimpleType: F
                      CodeReferenceElement: F
                        PsiElement(identifier)('F')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: T
                        CodeReferenceElement: T
                          PsiElement(identifier)('T')
                      PsiElement(,)(',')
                      PsiWhiteSpace(' ')
                      SimpleType: U
                        CodeReferenceElement: U
                          PsiElement(identifier)('U')
                      PsiElement(])(']')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: U
            CodeReferenceElement: U
              PsiElement(identifier)('U')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: f
              PsiElement(identifier)('f')
            ArgumentList
              PsiElement(()('(')
              ReferenceExpression: x
                PsiElement(identifier)('x')
              PsiElement())(')')
        PsiWhiteSpace('\n  ')
        MethodCall
          MethodCall
            ReferenceExpression: app
              PsiElement(identifier)('app')
            ArgumentList
              PsiElement(()('(')
              IntegerLiteral
                PsiElement(integer)('1')
              PsiElement())(')')
          ArgumentList
            PsiElement(()('(')
            FunctionExpression
              Parameters
                ParametersClause
                  Parameter: x
                    PsiElement(identifier)('x')
              PsiWhiteSpace(' ')
              PsiElement(=>)('=>')
              PsiWhiteSpace(' ')
              MethodCall
                ReferenceExpression: List
                  PsiElement(identifier)('List')
                ArgumentList
                  PsiElement(()('(')
                  ReferenceExpression: x
                    PsiElement(identifier)('x')
                  PsiElement())(')')
            PsiElement())(')')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScObject: SI9943
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('SI9943')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n\n')
        ScClass: Foo
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(class)('class')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Foo')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: T
              PsiElement(identifier)('T')
            PsiElement(])(']')
          PrimaryConstructor
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            Parameters
              <empty list>
          PsiWhiteSpace(' ')
          ExtendsBlock
            ScTemplateBody
              PsiElement({)('{')
              PsiWhiteSpace('\n  ')
              ScFunctionDefinition: toMap
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(def)('def')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('toMap')
                TypeParameterClause
                  PsiElement([)('[')
                  TypeParameter: K
                    PsiElement(identifier)('K')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  TypeParameter: V
                    PsiElement(identifier)('V')
                  PsiElement(])(']')
                Parameters
                  ParametersClause
                    PsiElement(()('(')
                    PsiElement(implicit)('implicit')
                    PsiWhiteSpace(' ')
                    Parameter: ev
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(identifier)('ev')
                      PsiElement(:)(':')
                      PsiWhiteSpace(' ')
                      ParameterType
                        InfixType: Foo[T] <:< Foo[(K, V)]
                          ParametrizedType: Foo[T]
                            SimpleType: Foo
                              CodeReferenceElement: Foo
                                PsiElement(identifier)('Foo')
                            TypeArgumentsList
                              PsiElement([)('[')
                              SimpleType: T
                                CodeReferenceElement: T
                                  PsiElement(identifier)('T')
                              PsiElement(])(']')
                          PsiWhiteSpace(' ')
                          CodeReferenceElement: <:<
                            PsiElement(identifier)('<:<')
                          PsiWhiteSpace(' ')
                          ParametrizedType: Foo[(K, V)]
                            SimpleType: Foo
                              CodeReferenceElement: Foo
                                PsiElement(identifier)('Foo')
                            TypeArgumentsList
                              PsiElement([)('[')
                              TupleType: (K, V)
                                PsiElement(()('(')
                                TypesList
                                  SimpleType: K
                                    CodeReferenceElement: K
                                      PsiElement(identifier)('K')
                                  PsiElement(,)(',')
                                  PsiWhiteSpace(' ')
                                  SimpleType: V
                                    CodeReferenceElement: V
                                      PsiElement(identifier)('V')
                                PsiElement())(')')
                              PsiElement(])(']')
                    PsiElement())(')')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParametrizedType: Foo[Map[K, V]]
                  SimpleType: Foo
                    CodeReferenceElement: Foo
                      PsiElement(identifier)('Foo')
                  TypeArgumentsList
                    PsiElement([)('[')
                    ParametrizedType: Map[K, V]
                      SimpleType: Map
                        CodeReferenceElement: Map
                          PsiElement(identifier)('Map')
                      TypeArgumentsList
                        PsiElement([)('[')
                        SimpleType: K
                          CodeReferenceElement: K
                            PsiElement(identifier)('K')
                        PsiElement(,)(',')
                        PsiWhiteSpace(' ')
                        SimpleType: V
                          CodeReferenceElement: V
                            PsiElement(identifier)('V')
                        PsiElement(])(']')
                    PsiElement(])(']')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                NullLiteral
                  PsiElement(null)('null')
              PsiWhiteSpace('\n  ')
              ScFunctionDefinition: toMap
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(def)('def')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('toMap')
                TypeParameterClause
                  PsiElement([)('[')
                  TypeParameter: K
                    PsiElement(identifier)('K')
                  PsiElement(])(']')
                Parameters
                  ParametersClause
                    PsiElement(()('(')
                    Parameter: keySelector
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(identifier)('keySelector')
                      PsiElement(:)(':')
                      PsiWhiteSpace(' ')
                      ParameterType
                        FunctionalType: T => K
                          SimpleType: T
                            CodeReferenceElement: T
                              PsiElement(identifier)('T')
                          PsiWhiteSpace(' ')
                          PsiElement(=>)('=>')
                          PsiWhiteSpace(' ')
                          SimpleType: K
                            CodeReferenceElement: K
                              PsiElement(identifier)('K')
                    PsiElement())(')')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParametrizedType: Foo[Map[K, T]]
                  SimpleType: Foo
                    CodeReferenceElement: Foo
                      PsiElement(identifier)('Foo')
                  TypeArgumentsList
                    PsiElement([)('[')
                    ParametrizedType: Map[K, T]
                      SimpleType: Map
                        CodeReferenceElement: Map
                          PsiElement(identifier)('Map')
                      TypeArgumentsList
                        PsiElement([)('[')
                        SimpleType: K
                          CodeReferenceElement: K
                            PsiElement(identifier)('K')
                        PsiElement(,)(',')
                        PsiWhiteSpace(' ')
                        SimpleType: T
                          CodeReferenceElement: T
                            PsiElement(identifier)('T')
                        PsiElement(])(']')
                    PsiElement(])(']')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                NullLiteral
                  PsiElement(null)('null')
              PsiWhiteSpace('\n')
              PsiElement(})('}')
        PsiWhiteSpace('\n\n')
        ScObject: Foo
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(object)('object')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Foo')
          PsiWhiteSpace(' ')
          ExtendsBlock
            ScTemplateBody
              PsiElement({)('{')
              PsiWhiteSpace('\n  ')
              ScPatternDefinition: f
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(val)('val')
                PsiWhiteSpace(' ')
                ListOfPatterns
                  ReferencePattern: f
                    PsiElement(identifier)('f')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParametrizedType: Foo[Int]
                  SimpleType: Foo
                    CodeReferenceElement: Foo
                      PsiElement(identifier)('Foo')
                  TypeArgumentsList
                    PsiElement([)('[')
                    SimpleType: Int
                      CodeReferenceElement: Int
                        PsiElement(identifier)('Int')
                    PsiElement(])(']')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                NullLiteral
                  PsiElement(null)('null')
              PsiWhiteSpace('\n  ')
              ScPatternDefinition: m
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(val)('val')
                PsiWhiteSpace(' ')
                ListOfPatterns
                  ReferencePattern: m
                    PsiElement(identifier)('m')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                MethodCall
                  ReferenceExpression: f.toMap
                    ReferenceExpression: f
                      PsiElement(identifier)('f')
                    PsiElement(.)('.')
                    PsiElement(identifier)('toMap')
                  ArgumentList
                    PsiElement(()('(')
                    InfixExpression
                      UnderscoreSection
                        PsiElement(_)('_')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: %
                        PsiElement(identifier)('%')
                      PsiWhiteSpace(' ')
                      IntegerLiteral
                        PsiElement(integer)('2')
                    PsiElement())(')')
              PsiWhiteSpace('\n')
              PsiElement(})('}')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
