abstract class F {
    type mType <: M
}

abstract class M { self =>

    type mType <: M

    type fType = F {type mType >: self.mType }
    def fs: List[fType]
}

abstract class A0 extends M {
    type mType = A0
    def fs: List[fType] = Nil
}

object A extends A0 {}

abstract class B0 extends M {
    type mType = B0
    def fs: List[fType] = Nil
}

object B extends B0 {}

object C {
    def ab = List(A) ::: List(B)
    // the following compiles successfully:
    // def ab = List(A) ::: List[M](B)
}
-----
ScalaFile
  ScClass: F
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(abstract)('abstract')
    PsiWhiteSpace(' ')
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('F')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n    ')
        ScTypeAliasDeclaration: mType
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('mType')
          PsiWhiteSpace(' ')
          PsiElement(<:)('<:')
          PsiWhiteSpace(' ')
          SimpleType: M
            CodeReferenceElement: M
              PsiElement(identifier)('M')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScClass: M
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(abstract)('abstract')
    PsiWhiteSpace(' ')
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('M')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace(' ')
        SelfType: self
          PsiElement(identifier)('self')
          PsiWhiteSpace(' ')
          PsiElement(=>)('=>')
        PsiWhiteSpace('\n\n    ')
        ScTypeAliasDeclaration: mType
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('mType')
          PsiWhiteSpace(' ')
          PsiElement(<:)('<:')
          PsiWhiteSpace(' ')
          SimpleType: M
            CodeReferenceElement: M
              PsiElement(identifier)('M')
        PsiWhiteSpace('\n\n    ')
        ScTypeAliasDefinition: fType
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('fType')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          CompoundType: F {type mType >: self.mType }
            SimpleType: F
              CodeReferenceElement: F
                PsiElement(identifier)('F')
            PsiWhiteSpace(' ')
            Refinement
              PsiElement({)('{')
              ScTypeAliasDeclaration: mType
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(type)('type')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('mType')
                PsiWhiteSpace(' ')
                PsiElement(>:)('>:')
                PsiWhiteSpace(' ')
                SimpleType: self.mType
                  CodeReferenceElement: self.mType
                    CodeReferenceElement: self
                      PsiElement(identifier)('self')
                    PsiElement(.)('.')
                    PsiElement(identifier)('mType')
              PsiWhiteSpace(' ')
              PsiElement(})('}')
        PsiWhiteSpace('\n    ')
        ScFunctionDeclaration: fs
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('fs')
          Parameters
            <empty list>
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: List[fType]
            SimpleType: List
              CodeReferenceElement: List
                PsiElement(identifier)('List')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: fType
                CodeReferenceElement: fType
                  PsiElement(identifier)('fType')
              PsiElement(])(']')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScClass: A0
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(abstract)('abstract')
    PsiWhiteSpace(' ')
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('A0')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          SimpleType: M
            CodeReferenceElement: M
              PsiElement(identifier)('M')
      PsiWhiteSpace(' ')
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n    ')
        ScTypeAliasDefinition: mType
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('mType')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          SimpleType: A0
            CodeReferenceElement: A0
              PsiElement(identifier)('A0')
        PsiWhiteSpace('\n    ')
        ScFunctionDefinition: fs
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('fs')
          Parameters
            <empty list>
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: List[fType]
            SimpleType: List
              CodeReferenceElement: List
                PsiElement(identifier)('List')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: fType
                CodeReferenceElement: fType
                  PsiElement(identifier)('fType')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: Nil
            PsiElement(identifier)('Nil')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScObject: A
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('A')
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          SimpleType: A0
            CodeReferenceElement: A0
              PsiElement(identifier)('A0')
      PsiWhiteSpace(' ')
      ScTemplateBody
        PsiElement({)('{')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScClass: B0
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(abstract)('abstract')
    PsiWhiteSpace(' ')
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('B0')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          SimpleType: M
            CodeReferenceElement: M
              PsiElement(identifier)('M')
      PsiWhiteSpace(' ')
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n    ')
        ScTypeAliasDefinition: mType
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('mType')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          SimpleType: B0
            CodeReferenceElement: B0
              PsiElement(identifier)('B0')
        PsiWhiteSpace('\n    ')
        ScFunctionDefinition: fs
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('fs')
          Parameters
            <empty list>
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: List[fType]
            SimpleType: List
              CodeReferenceElement: List
                PsiElement(identifier)('List')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: fType
                CodeReferenceElement: fType
                  PsiElement(identifier)('fType')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: Nil
            PsiElement(identifier)('Nil')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScObject: B
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('B')
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          SimpleType: B0
            CodeReferenceElement: B0
              PsiElement(identifier)('B0')
      PsiWhiteSpace(' ')
      ScTemplateBody
        PsiElement({)('{')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScObject: C
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('C')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n    ')
        ScFunctionDefinition: ab
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('ab')
          Parameters
            <empty list>
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          InfixExpression
            MethodCall
              ReferenceExpression: List
                PsiElement(identifier)('List')
              ArgumentList
                PsiElement(()('(')
                ReferenceExpression: A
                  PsiElement(identifier)('A')
                PsiElement())(')')
            PsiWhiteSpace(' ')
            ReferenceExpression: :::
              PsiElement(identifier)(':::')
            PsiWhiteSpace(' ')
            MethodCall
              ReferenceExpression: List
                PsiElement(identifier)('List')
              ArgumentList
                PsiElement(()('(')
                ReferenceExpression: B
                  PsiElement(identifier)('B')
                PsiElement())(')')
        PsiWhiteSpace('\n    ')
        PsiComment(comment)('// the following compiles successfully:')
        PsiWhiteSpace('\n    ')
        PsiComment(comment)('// def ab = List(A) ::: List[M](B)')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
