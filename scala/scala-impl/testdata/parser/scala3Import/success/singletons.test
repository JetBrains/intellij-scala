
object Test {

  val x: 1 = 1
  final val y = x
  val z: 1 = y

  object O { final val x = 42 }
  val fourtyTwo: 42 = O.x

  final val a = { println("x"); 2 } // side effects don't matter
  val b: 2 = a

  def f: 3 = 3
  final val c = f

  val dc: 3.0 = 3.0
  final val dc1 = dc
  val fc: 3.0f = 3.0f
  final val fc1 = fc

  val t: true = true

  val str: "" = ""
  final val str2 = str
}
/* To do: test that after erasure we have generated code like this:
 *
package <empty> {
  final lazy module val Test: Test$ = new Test$()
  final module class Test$() extends Object() { this: <notype> =>
    <accessor> def x(): Int = 1
    final <accessor> def y(): Int = 1
    <accessor> def z(): Int = 1
    final lazy module val O: Test.O$ = new Test.O$()
    final module class O$() extends Object() { this: <notype> =>
      final <accessor> def x(): Int = 42
    }
    <accessor> def fourtyTwo(): Int = 42
    final <accessor> def a(): Int = {
      println("x")
      2
    }
    <accessor> def b(): Int = 2
    def f(): Int = 3
    final <accessor> def c(): Int = Test.f()
    <accessor> def dc(): Double = 3.0
    final <accessor> def dc1(): Double = 3.0
    <accessor> def fc(): Float = 3.0
    final <accessor> def fc1(): Float = 3.0
    <accessor> def t(): Boolean = true
    <accessor> def str(): String = ""
    final <accessor> def str2(): String = ""
  }
}
*/
-----
ScalaFile
  ScObject: Test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n\n  ')
        ScPatternDefinition: x
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: x
              PsiElement(identifier)('x')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          LiteralType: 1
            IntegerLiteral
              PsiElement(integer)('1')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          IntegerLiteral
            PsiElement(integer)('1')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: y
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(final)('final')
          PsiWhiteSpace(' ')
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: y
              PsiElement(identifier)('y')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: x
            PsiElement(identifier)('x')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: z
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: z
              PsiElement(identifier)('z')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          LiteralType: 1
            IntegerLiteral
              PsiElement(integer)('1')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: y
            PsiElement(identifier)('y')
        PsiWhiteSpace('\n\n  ')
        ScObject: O
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(object)('object')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('O')
          PsiWhiteSpace(' ')
          ExtendsBlock
            ScTemplateBody
              PsiElement({)('{')
              PsiWhiteSpace(' ')
              ScPatternDefinition: x
                AnnotationsList
                  <empty list>
                Modifiers
                  PsiElement(final)('final')
                PsiWhiteSpace(' ')
                PsiElement(val)('val')
                PsiWhiteSpace(' ')
                ListOfPatterns
                  ReferencePattern: x
                    PsiElement(identifier)('x')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                IntegerLiteral
                  PsiElement(integer)('42')
              PsiWhiteSpace(' ')
              PsiElement(})('}')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: fourtyTwo
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: fourtyTwo
              PsiElement(identifier)('fourtyTwo')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          LiteralType: 42
            IntegerLiteral
              PsiElement(integer)('42')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: O.x
            ReferenceExpression: O
              PsiElement(identifier)('O')
            PsiElement(.)('.')
            PsiElement(identifier)('x')
        PsiWhiteSpace('\n\n  ')
        ScPatternDefinition: a
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(final)('final')
          PsiWhiteSpace(' ')
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: a
              PsiElement(identifier)('a')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          BlockExpression
            PsiElement({)('{')
            PsiWhiteSpace(' ')
            MethodCall
              ReferenceExpression: println
                PsiElement(identifier)('println')
              ArgumentList
                PsiElement(()('(')
                StringLiteral
                  PsiElement(string content)('"x"')
                PsiElement())(')')
            PsiElement(;)(';')
            PsiWhiteSpace(' ')
            IntegerLiteral
              PsiElement(integer)('2')
            PsiWhiteSpace(' ')
            PsiElement(})('}')
        PsiWhiteSpace(' ')
        PsiComment(comment)('// side effects don't matter')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: b
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: b
              PsiElement(identifier)('b')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          LiteralType: 2
            IntegerLiteral
              PsiElement(integer)('2')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: a
            PsiElement(identifier)('a')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: f
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('f')
          Parameters
            <empty list>
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          LiteralType: 3
            IntegerLiteral
              PsiElement(integer)('3')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          IntegerLiteral
            PsiElement(integer)('3')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: c
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(final)('final')
          PsiWhiteSpace(' ')
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: c
              PsiElement(identifier)('c')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: f
            PsiElement(identifier)('f')
        PsiWhiteSpace('\n\n  ')
        ScPatternDefinition: dc
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: dc
              PsiElement(identifier)('dc')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          LiteralType: 3.0
            DoubleLiteral
              PsiElement(double)('3.0')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          DoubleLiteral
            PsiElement(double)('3.0')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: dc1
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(final)('final')
          PsiWhiteSpace(' ')
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: dc1
              PsiElement(identifier)('dc1')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: dc
            PsiElement(identifier)('dc')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: fc
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: fc
              PsiElement(identifier)('fc')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          LiteralType: 3.0f
            FloatLiteral
              PsiElement(float)('3.0f')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          FloatLiteral
            PsiElement(float)('3.0f')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: fc1
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(final)('final')
          PsiWhiteSpace(' ')
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: fc1
              PsiElement(identifier)('fc1')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: fc
            PsiElement(identifier)('fc')
        PsiWhiteSpace('\n\n  ')
        ScPatternDefinition: t
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: t
              PsiElement(identifier)('t')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          LiteralType: true
            BooleanLiteral
              PsiElement(true)('true')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          BooleanLiteral
            PsiElement(true)('true')
        PsiWhiteSpace('\n\n  ')
        ScPatternDefinition: str
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: str
              PsiElement(identifier)('str')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          LiteralType: ""
            StringLiteral
              PsiElement(string content)('""')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          StringLiteral
            PsiElement(string content)('""')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: str2
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(final)('final')
          PsiWhiteSpace(' ')
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: str2
              PsiElement(identifier)('str2')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: str
            PsiElement(identifier)('str')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n')
  PsiComment(BlockComment)('/* To do: test that after erasure we have generated code like this:\n *\npackage <empty> {\n  final lazy module val Test: Test$ = new Test$()\n  final module class Test$() extends Object() { this: <notype> =>\n    <accessor> def x(): Int = 1\n    final <accessor> def y(): Int = 1\n    <accessor> def z(): Int = 1\n    final lazy module val O: Test.O$ = new Test.O$()\n    final module class O$() extends Object() { this: <notype> =>\n      final <accessor> def x(): Int = 42\n    }\n    <accessor> def fourtyTwo(): Int = 42\n    final <accessor> def a(): Int = {\n      println("x")\n      2\n    }\n    <accessor> def b(): Int = 2\n    def f(): Int = 3\n    final <accessor> def c(): Int = Test.f()\n    <accessor> def dc(): Double = 3.0\n    final <accessor> def dc1(): Double = 3.0\n    <accessor> def fc(): Float = 3.0\n    final <accessor> def fc1(): Float = 3.0\n    <accessor> def t(): Boolean = true\n    <accessor> def str(): String = ""\n    final <accessor> def str2(): String = ""\n  }\n}\n*/')
