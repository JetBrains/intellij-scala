/* In the following we should never have two nested closures after phase betaReduce
 * The output of the program should instead look like this:

      package <empty> {
        @scala.annotation.internal.SourceFile("i6375.scala") class Test() extends
          Object
        () {
          final given def given_Int: Int = 0
          @scala.annotation.internal.ContextResultCount(1) def f(): (Int) ?=> Boolean
            =
          {
            def $anonfun(using evidence$1: Int): Boolean = true
            closure($anonfun)
          }
          @scala.annotation.internal.ContextResultCount(1) inline def g():
            (Int) ?=> Boolean
          =
            {
              def $anonfun(using evidence$3: Int): Boolean = true
              closure($anonfun)
            }
          {
            {
              def $anonfun(using evidence$3: Int): Boolean = true
              closure($anonfun)
            }
          }.apply(this.given_Int)
        }
      }
 */
class Test:
  given Int = 0

  def f(): Int ?=> Boolean = true : (Int ?=> Boolean)

  inline def g(): Int ?=> Boolean = true
  g()

-----
ScalaFile
  ScClass: Test
    PsiComment(BlockComment)('/* In the following we should never have two nested closures after phase betaReduce\n * The output of the program should instead look like this:\n\n      package <empty> {\n        @scala.annotation.internal.SourceFile("i6375.scala") class Test() extends\n          Object\n        () {\n          final given def given_Int: Int = 0\n          @scala.annotation.internal.ContextResultCount(1) def f(): (Int) ?=> Boolean\n            =\n          {\n            def $anonfun(using evidence$1: Int): Boolean = true\n            closure($anonfun)\n          }\n          @scala.annotation.internal.ContextResultCount(1) inline def g():\n            (Int) ?=> Boolean\n          =\n            {\n              def $anonfun(using evidence$3: Int): Boolean = true\n              closure($anonfun)\n            }\n          {\n            {\n              def $anonfun(using evidence$3: Int): Boolean = true\n              closure($anonfun)\n            }\n          }.apply(this.given_Int)\n        }\n      }\n */')
    PsiWhiteSpace('\n')
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    ExtendsBlock
      ScTemplateBody
        PsiElement(:)(':')
        PsiWhiteSpace('\n  ')
        ScGivenAliasDefinition: given_Int
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(given)('given')
          PsiWhiteSpace(' ')
          SimpleType: Int
            CodeReferenceElement: Int
              PsiElement(identifier)('Int')
          Parameters
            <empty list>
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          IntegerLiteral
            PsiElement(integer)('0')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: f
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('f')
          Parameters
            ParametersClause
              PsiElement(()('(')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          FunctionalType: Int ?=> Boolean
            SimpleType: Int
              CodeReferenceElement: Int
                PsiElement(identifier)('Int')
            PsiWhiteSpace(' ')
            PsiElement(?=>)('?=>')
            PsiWhiteSpace(' ')
            SimpleType: Boolean
              CodeReferenceElement: Boolean
                PsiElement(identifier)('Boolean')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          TypedExpression
            BooleanLiteral
              PsiElement(true)('true')
            PsiWhiteSpace(' ')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            TypeInParenthesis: (Int ?=> Boolean)
              PsiElement(()('(')
              FunctionalType: Int ?=> Boolean
                SimpleType: Int
                  CodeReferenceElement: Int
                    PsiElement(identifier)('Int')
                PsiWhiteSpace(' ')
                PsiElement(?=>)('?=>')
                PsiWhiteSpace(' ')
                SimpleType: Boolean
                  CodeReferenceElement: Boolean
                    PsiElement(identifier)('Boolean')
              PsiElement())(')')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: g
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(inline)('inline')
          PsiWhiteSpace(' ')
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('g')
          Parameters
            ParametersClause
              PsiElement(()('(')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          FunctionalType: Int ?=> Boolean
            SimpleType: Int
              CodeReferenceElement: Int
                PsiElement(identifier)('Int')
            PsiWhiteSpace(' ')
            PsiElement(?=>)('?=>')
            PsiWhiteSpace(' ')
            SimpleType: Boolean
              CodeReferenceElement: Boolean
                PsiElement(identifier)('Boolean')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          BooleanLiteral
            PsiElement(true)('true')
        PsiWhiteSpace('\n  ')
        MethodCall
          ReferenceExpression: g
            PsiElement(identifier)('g')
          ArgumentList
            PsiElement(()('(')
            PsiElement())(')')
