object Test {
  List(1) match { case Nil => 0; case (x::xs) => x }

  case class Foo(a: Int)
  val FooAlias: Foo.type = Foo
  Foo(0) match { case FooAlias(_) => 0 }
  Foo(0) match { case Foo(_) => 0 }

  case class Bar()
  val BarAlias: Bar.type = Bar
  Bar() match { case BarAlias() => 0 }
  Bar() match { case Bar() => 0 }
}
-----
ScalaFile
  ScObject: Test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        MatchStatement
          MethodCall
            ReferenceExpression: List
              PsiElement(identifier)('List')
            ArgumentList
              PsiElement(()('(')
              IntegerLiteral
                PsiElement(integer)('1')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(match)('match')
          PsiWhiteSpace(' ')
          PsiElement({)('{')
          PsiWhiteSpace(' ')
          CaseClauses
            CaseClause
              PsiElement(case)('case')
              PsiWhiteSpace(' ')
              StableElementPattern
                ReferenceExpression: Nil
                  PsiElement(identifier)('Nil')
              PsiWhiteSpace(' ')
              PsiElement(=>)('=>')
              PsiWhiteSpace(' ')
              BlockOfExpressions
                IntegerLiteral
                  PsiElement(integer)('0')
                PsiElement(;)(';')
            PsiWhiteSpace(' ')
            CaseClause
              PsiElement(case)('case')
              PsiWhiteSpace(' ')
              PatternInParenthesis
                PsiElement(()('(')
                InfixPattern
                  ReferencePattern: x
                    PsiElement(identifier)('x')
                  CodeReferenceElement: ::
                    PsiElement(identifier)('::')
                  ReferencePattern: xs
                    PsiElement(identifier)('xs')
                PsiElement())(')')
              PsiWhiteSpace(' ')
              PsiElement(=>)('=>')
              PsiWhiteSpace(' ')
              BlockOfExpressions
                ReferenceExpression: x
                  PsiElement(identifier)('x')
          PsiWhiteSpace(' ')
          PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        ScClass: Foo
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(case)('case')
          PsiWhiteSpace(' ')
          PsiElement(class)('class')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Foo')
          PrimaryConstructor
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            Parameters
              ParametersClause
                PsiElement(()('(')
                ClassParameter: a
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(identifier)('a')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    SimpleType: Int
                      CodeReferenceElement: Int
                        PsiElement(identifier)('Int')
                PsiElement())(')')
          ExtendsBlock
            <empty list>
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: FooAlias
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: FooAlias
              PsiElement(identifier)('FooAlias')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Foo.type
            CodeReferenceElement: Foo
              PsiElement(identifier)('Foo')
            PsiElement(.)('.')
            PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: Foo
            PsiElement(identifier)('Foo')
        PsiWhiteSpace('\n  ')
        MatchStatement
          MethodCall
            ReferenceExpression: Foo
              PsiElement(identifier)('Foo')
            ArgumentList
              PsiElement(()('(')
              IntegerLiteral
                PsiElement(integer)('0')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(match)('match')
          PsiWhiteSpace(' ')
          PsiElement({)('{')
          PsiWhiteSpace(' ')
          CaseClauses
            CaseClause
              PsiElement(case)('case')
              PsiWhiteSpace(' ')
              ConstructorPattern
                CodeReferenceElement: FooAlias
                  PsiElement(identifier)('FooAlias')
                Pattern Argument List
                  PsiElement(()('(')
                  WildcardPattern
                    PsiElement(_)('_')
                  PsiElement())(')')
              PsiWhiteSpace(' ')
              PsiElement(=>)('=>')
              PsiWhiteSpace(' ')
              BlockOfExpressions
                IntegerLiteral
                  PsiElement(integer)('0')
          PsiWhiteSpace(' ')
          PsiElement(})('}')
        PsiWhiteSpace('\n  ')
        MatchStatement
          MethodCall
            ReferenceExpression: Foo
              PsiElement(identifier)('Foo')
            ArgumentList
              PsiElement(()('(')
              IntegerLiteral
                PsiElement(integer)('0')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(match)('match')
          PsiWhiteSpace(' ')
          PsiElement({)('{')
          PsiWhiteSpace(' ')
          CaseClauses
            CaseClause
              PsiElement(case)('case')
              PsiWhiteSpace(' ')
              ConstructorPattern
                CodeReferenceElement: Foo
                  PsiElement(identifier)('Foo')
                Pattern Argument List
                  PsiElement(()('(')
                  WildcardPattern
                    PsiElement(_)('_')
                  PsiElement())(')')
              PsiWhiteSpace(' ')
              PsiElement(=>)('=>')
              PsiWhiteSpace(' ')
              BlockOfExpressions
                IntegerLiteral
                  PsiElement(integer)('0')
          PsiWhiteSpace(' ')
          PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        ScClass: Bar
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(case)('case')
          PsiWhiteSpace(' ')
          PsiElement(class)('class')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Bar')
          PrimaryConstructor
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            Parameters
              ParametersClause
                PsiElement(()('(')
                PsiElement())(')')
          ExtendsBlock
            <empty list>
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: BarAlias
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: BarAlias
              PsiElement(identifier)('BarAlias')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Bar.type
            CodeReferenceElement: Bar
              PsiElement(identifier)('Bar')
            PsiElement(.)('.')
            PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: Bar
            PsiElement(identifier)('Bar')
        PsiWhiteSpace('\n  ')
        MatchStatement
          MethodCall
            ReferenceExpression: Bar
              PsiElement(identifier)('Bar')
            ArgumentList
              PsiElement(()('(')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(match)('match')
          PsiWhiteSpace(' ')
          PsiElement({)('{')
          PsiWhiteSpace(' ')
          CaseClauses
            CaseClause
              PsiElement(case)('case')
              PsiWhiteSpace(' ')
              ConstructorPattern
                CodeReferenceElement: BarAlias
                  PsiElement(identifier)('BarAlias')
                Pattern Argument List
                  PsiElement(()('(')
                  PsiElement())(')')
              PsiWhiteSpace(' ')
              PsiElement(=>)('=>')
              PsiWhiteSpace(' ')
              BlockOfExpressions
                IntegerLiteral
                  PsiElement(integer)('0')
          PsiWhiteSpace(' ')
          PsiElement(})('}')
        PsiWhiteSpace('\n  ')
        MatchStatement
          MethodCall
            ReferenceExpression: Bar
              PsiElement(identifier)('Bar')
            ArgumentList
              PsiElement(()('(')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(match)('match')
          PsiWhiteSpace(' ')
          PsiElement({)('{')
          PsiWhiteSpace(' ')
          CaseClauses
            CaseClause
              PsiElement(case)('case')
              PsiWhiteSpace(' ')
              ConstructorPattern
                CodeReferenceElement: Bar
                  PsiElement(identifier)('Bar')
                Pattern Argument List
                  PsiElement(()('(')
                  PsiElement())(')')
              PsiWhiteSpace(' ')
              PsiElement(=>)('=>')
              PsiWhiteSpace(' ')
              BlockOfExpressions
                IntegerLiteral
                  PsiElement(integer)('0')
          PsiWhiteSpace(' ')
          PsiElement(})('}')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
