class A
object ObjA extends A
class B
object ObjB extends B

object Test {
  def foo[T <: A | B](t: T): List[T] = List(t)
  val x: ObjA.type | ObjB.type = ObjA

  // infers `T = ObjA$ | ObjB$` instead of `ObjA.type | ObjB.type` due to the
  // use of `widenSingleton` in TypeComparer#secondTry when the lhs is a union
  // type.
  val y = foo(ObjA : ObjA.type | ObjB.type)

  // This only compiles if `ObjA$ <:< ObjA.type`, there is a special-case in
  // `firstTry` for that but we also need a special case in `atoms` since unions
  // are involved.
  val z: List[ObjA.type | ObjB.type] = y
}
-----
ScalaFile
  ScClass: A
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('A')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    ExtendsBlock
      <empty list>
  PsiWhiteSpace('\n')
  ScObject: ObjA
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('ObjA')
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          SimpleType: A
            CodeReferenceElement: A
              PsiElement(identifier)('A')
  PsiWhiteSpace('\n')
  ScClass: B
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('B')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    ExtendsBlock
      <empty list>
  PsiWhiteSpace('\n')
  ScObject: ObjB
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('ObjB')
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          SimpleType: B
            CodeReferenceElement: B
              PsiElement(identifier)('B')
  PsiWhiteSpace('\n\n')
  ScObject: Test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: foo
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('foo')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: T
              PsiElement(identifier)('T')
              PsiWhiteSpace(' ')
              PsiElement(<:)('<:')
              PsiWhiteSpace(' ')
              InfixType: A | B
                SimpleType: A
                  CodeReferenceElement: A
                    PsiElement(identifier)('A')
                PsiWhiteSpace(' ')
                CodeReferenceElement: |
                  PsiElement(identifier)('|')
                PsiWhiteSpace(' ')
                SimpleType: B
                  CodeReferenceElement: B
                    PsiElement(identifier)('B')
            PsiElement(])(']')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: t
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('t')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: T
                    CodeReferenceElement: T
                      PsiElement(identifier)('T')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: List[T]
            SimpleType: List
              CodeReferenceElement: List
                PsiElement(identifier)('List')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: T
                CodeReferenceElement: T
                  PsiElement(identifier)('T')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: List
              PsiElement(identifier)('List')
            ArgumentList
              PsiElement(()('(')
              ReferenceExpression: t
                PsiElement(identifier)('t')
              PsiElement())(')')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: x
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: x
              PsiElement(identifier)('x')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          InfixType: ObjA.type | ObjB.type
            SimpleType: ObjA.type
              CodeReferenceElement: ObjA
                PsiElement(identifier)('ObjA')
              PsiElement(.)('.')
              PsiElement(type)('type')
            PsiWhiteSpace(' ')
            CodeReferenceElement: |
              PsiElement(identifier)('|')
            PsiWhiteSpace(' ')
            SimpleType: ObjB.type
              CodeReferenceElement: ObjB
                PsiElement(identifier)('ObjB')
              PsiElement(.)('.')
              PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: ObjA
            PsiElement(identifier)('ObjA')
        PsiWhiteSpace('\n\n  ')
        ScPatternDefinition: y
          PsiComment(comment)('// infers `T = ObjA$ | ObjB$` instead of `ObjA.type | ObjB.type` due to the')
          PsiWhiteSpace('\n  ')
          PsiComment(comment)('// use of `widenSingleton` in TypeComparer#secondTry when the lhs is a union')
          PsiWhiteSpace('\n  ')
          PsiComment(comment)('// type.')
          PsiWhiteSpace('\n  ')
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: y
              PsiElement(identifier)('y')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: foo
              PsiElement(identifier)('foo')
            ArgumentList
              PsiElement(()('(')
              TypedExpression
                ReferenceExpression: ObjA
                  PsiElement(identifier)('ObjA')
                PsiWhiteSpace(' ')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                InfixType: ObjA.type | ObjB.type
                  SimpleType: ObjA.type
                    CodeReferenceElement: ObjA
                      PsiElement(identifier)('ObjA')
                    PsiElement(.)('.')
                    PsiElement(type)('type')
                  PsiWhiteSpace(' ')
                  CodeReferenceElement: |
                    PsiElement(identifier)('|')
                  PsiWhiteSpace(' ')
                  SimpleType: ObjB.type
                    CodeReferenceElement: ObjB
                      PsiElement(identifier)('ObjB')
                    PsiElement(.)('.')
                    PsiElement(type)('type')
              PsiElement())(')')
        PsiWhiteSpace('\n\n  ')
        ScPatternDefinition: z
          PsiComment(comment)('// This only compiles if `ObjA$ <:< ObjA.type`, there is a special-case in')
          PsiWhiteSpace('\n  ')
          PsiComment(comment)('// `firstTry` for that but we also need a special case in `atoms` since unions')
          PsiWhiteSpace('\n  ')
          PsiComment(comment)('// are involved.')
          PsiWhiteSpace('\n  ')
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: z
              PsiElement(identifier)('z')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: List[ObjA.type | ObjB.type]
            SimpleType: List
              CodeReferenceElement: List
                PsiElement(identifier)('List')
            TypeArgumentsList
              PsiElement([)('[')
              InfixType: ObjA.type | ObjB.type
                SimpleType: ObjA.type
                  CodeReferenceElement: ObjA
                    PsiElement(identifier)('ObjA')
                  PsiElement(.)('.')
                  PsiElement(type)('type')
                PsiWhiteSpace(' ')
                CodeReferenceElement: |
                  PsiElement(identifier)('|')
                PsiWhiteSpace(' ')
                SimpleType: ObjB.type
                  CodeReferenceElement: ObjB
                    PsiElement(identifier)('ObjB')
                  PsiElement(.)('.')
                  PsiElement(type)('type')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: y
            PsiElement(identifier)('y')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
