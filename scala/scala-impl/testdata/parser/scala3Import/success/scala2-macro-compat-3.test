

object Macro1 {
  import scala.language.experimental.macros
  def lineNumber: Int = macro LineNumberMacro2.thisLineNumberImpl
  inline def lineNumber: Int = 4
}

object Macro1Consume {
  val test = Macro1.lineNumber
}

object LineNumberMacro2 {
  class Context: // Dummy scala.reflect.macros.Context
    type Expr[+T]

  def thisLineNumberImpl(context: Context): context.Expr[Int] = {
    // val lineNumber = context.enclosingPosition.line
    // context.literal(lineNumber)
    ???
  }
}

-----
ScalaFile
  ScObject: Macro1
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Macro1')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScImportStatement
          PsiElement(import)('import')
          PsiWhiteSpace(' ')
          ImportExpression
            CodeReferenceElement: scala.language.experimental.macros
              CodeReferenceElement: scala.language.experimental
                CodeReferenceElement: scala.language
                  CodeReferenceElement: scala
                    PsiElement(identifier)('scala')
                  PsiElement(.)('.')
                  PsiElement(identifier)('language')
                PsiElement(.)('.')
                PsiElement(identifier)('experimental')
              PsiElement(.)('.')
              PsiElement(identifier)('macros')
        PsiWhiteSpace('\n  ')
        ScMacroDefinition: lineNumber
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('lineNumber')
          Parameters
            <empty list>
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Int
            CodeReferenceElement: Int
              PsiElement(identifier)('Int')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          PsiElement(macro)('macro')
          PsiWhiteSpace(' ')
          CodeReferenceElement: LineNumberMacro2.thisLineNumberImpl
            CodeReferenceElement: LineNumberMacro2
              PsiElement(identifier)('LineNumberMacro2')
            PsiElement(.)('.')
            PsiElement(identifier)('thisLineNumberImpl')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: lineNumber
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(inline)('inline')
          PsiWhiteSpace(' ')
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('lineNumber')
          Parameters
            <empty list>
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Int
            CodeReferenceElement: Int
              PsiElement(identifier)('Int')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          IntegerLiteral
            PsiElement(integer)('4')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScObject: Macro1Consume
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Macro1Consume')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: test
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: test
              PsiElement(identifier)('test')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: Macro1.lineNumber
            ReferenceExpression: Macro1
              PsiElement(identifier)('Macro1')
            PsiElement(.)('.')
            PsiElement(identifier)('lineNumber')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScObject: LineNumberMacro2
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('LineNumberMacro2')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScClass: Context
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(class)('class')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Context')
          PrimaryConstructor
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            Parameters
              <empty list>
          ExtendsBlock
            ScTemplateBody
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              PsiComment(comment)('// Dummy scala.reflect.macros.Context')
              PsiWhiteSpace('\n    ')
              ScTypeAliasDeclaration: Expr
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(type)('type')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('Expr')
                TypeParameterClause
                  PsiElement([)('[')
                  TypeParameter: T
                    PsiElement(identifier)('+')
                    PsiElement(identifier)('T')
                  PsiElement(])(']')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: thisLineNumberImpl
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('thisLineNumberImpl')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: context
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('context')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Context
                    CodeReferenceElement: Context
                      PsiElement(identifier)('Context')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: context.Expr[Int]
            SimpleType: context.Expr
              CodeReferenceElement: context.Expr
                CodeReferenceElement: context
                  PsiElement(identifier)('context')
                PsiElement(.)('.')
                PsiElement(identifier)('Expr')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: Int
                CodeReferenceElement: Int
                  PsiElement(identifier)('Int')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          BlockExpression
            PsiElement({)('{')
            PsiWhiteSpace('\n    ')
            PsiComment(comment)('// val lineNumber = context.enclosingPosition.line')
            PsiWhiteSpace('\n    ')
            PsiComment(comment)('// context.literal(lineNumber)')
            PsiWhiteSpace('\n    ')
            ReferenceExpression: ???
              PsiElement(identifier)('???')
            PsiWhiteSpace('\n  ')
            PsiElement(})('}')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
