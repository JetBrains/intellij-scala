object A {
  val x = 2
  val y = x.asInstanceOf[Byte]
  val z = 1.0 / 2
  val s = "z is " + z

  val a = 1 + 1
  val b = -(1:1)
  val c = -(1:1 & Any)
}

object Test extends App {

    Console.println(A.x);
    Console.println(A.y);
    Console.println(A.z);
    Console.println(A.s);
}
-----
ScalaFile
  ScObject: A
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('A')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: x
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: x
              PsiElement(identifier)('x')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          IntegerLiteral
            PsiElement(integer)('2')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: y
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: y
              PsiElement(identifier)('y')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          GenericCall
            ReferenceExpression: x.asInstanceOf
              ReferenceExpression: x
                PsiElement(identifier)('x')
              PsiElement(.)('.')
              PsiElement(identifier)('asInstanceOf')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: Byte
                CodeReferenceElement: Byte
                  PsiElement(identifier)('Byte')
              PsiElement(])(']')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: z
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: z
              PsiElement(identifier)('z')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          InfixExpression
            DoubleLiteral
              PsiElement(double)('1.0')
            PsiWhiteSpace(' ')
            ReferenceExpression: /
              PsiElement(identifier)('/')
            PsiWhiteSpace(' ')
            IntegerLiteral
              PsiElement(integer)('2')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: s
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: s
              PsiElement(identifier)('s')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          InfixExpression
            StringLiteral
              PsiElement(string content)('"z is "')
            PsiWhiteSpace(' ')
            ReferenceExpression: +
              PsiElement(identifier)('+')
            PsiWhiteSpace(' ')
            ReferenceExpression: z
              PsiElement(identifier)('z')
        PsiWhiteSpace('\n\n  ')
        ScPatternDefinition: a
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: a
              PsiElement(identifier)('a')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          InfixExpression
            IntegerLiteral
              PsiElement(integer)('1')
            PsiWhiteSpace(' ')
            ReferenceExpression: +
              PsiElement(identifier)('+')
            PsiWhiteSpace(' ')
            IntegerLiteral
              PsiElement(integer)('1')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: b
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: b
              PsiElement(identifier)('b')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          PrefixExpression
            ReferenceExpression: -
              PsiElement(identifier)('-')
            ExpressionInParenthesis
              PsiElement(()('(')
              TypedExpression
                IntegerLiteral
                  PsiElement(integer)('1')
                PsiElement(:)(':')
                LiteralType: 1
                  IntegerLiteral
                    PsiElement(integer)('1')
              PsiElement())(')')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: c
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: c
              PsiElement(identifier)('c')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          PrefixExpression
            ReferenceExpression: -
              PsiElement(identifier)('-')
            ExpressionInParenthesis
              PsiElement(()('(')
              TypedExpression
                IntegerLiteral
                  PsiElement(integer)('1')
                PsiElement(:)(':')
                InfixType: 1 & Any
                  LiteralType: 1
                    IntegerLiteral
                      PsiElement(integer)('1')
                  PsiWhiteSpace(' ')
                  CodeReferenceElement: &
                    PsiElement(identifier)('&')
                  PsiWhiteSpace(' ')
                  SimpleType: Any
                    CodeReferenceElement: Any
                      PsiElement(identifier)('Any')
              PsiElement())(')')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScObject: Test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test')
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          SimpleType: App
            CodeReferenceElement: App
              PsiElement(identifier)('App')
      PsiWhiteSpace(' ')
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n\n    ')
        MethodCall
          ReferenceExpression: Console.println
            ReferenceExpression: Console
              PsiElement(identifier)('Console')
            PsiElement(.)('.')
            PsiElement(identifier)('println')
          ArgumentList
            PsiElement(()('(')
            ReferenceExpression: A.x
              ReferenceExpression: A
                PsiElement(identifier)('A')
              PsiElement(.)('.')
              PsiElement(identifier)('x')
            PsiElement())(')')
        PsiElement(;)(';')
        PsiWhiteSpace('\n    ')
        MethodCall
          ReferenceExpression: Console.println
            ReferenceExpression: Console
              PsiElement(identifier)('Console')
            PsiElement(.)('.')
            PsiElement(identifier)('println')
          ArgumentList
            PsiElement(()('(')
            ReferenceExpression: A.y
              ReferenceExpression: A
                PsiElement(identifier)('A')
              PsiElement(.)('.')
              PsiElement(identifier)('y')
            PsiElement())(')')
        PsiElement(;)(';')
        PsiWhiteSpace('\n    ')
        MethodCall
          ReferenceExpression: Console.println
            ReferenceExpression: Console
              PsiElement(identifier)('Console')
            PsiElement(.)('.')
            PsiElement(identifier)('println')
          ArgumentList
            PsiElement(()('(')
            ReferenceExpression: A.z
              ReferenceExpression: A
                PsiElement(identifier)('A')
              PsiElement(.)('.')
              PsiElement(identifier)('z')
            PsiElement())(')')
        PsiElement(;)(';')
        PsiWhiteSpace('\n    ')
        MethodCall
          ReferenceExpression: Console.println
            ReferenceExpression: Console
              PsiElement(identifier)('Console')
            PsiElement(.)('.')
            PsiElement(identifier)('println')
          ArgumentList
            PsiElement(()('(')
            ReferenceExpression: A.s
              ReferenceExpression: A
                PsiElement(identifier)('A')
              PsiElement(.)('.')
              PsiElement(identifier)('s')
            PsiElement())(')')
        PsiElement(;)(';')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
