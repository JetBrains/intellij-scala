trait Type[T]:
  type Out

type varchar

given Type[varchar] with
  type Out = String

class Placeholder[T, U]

object Placeholder:
  def apply[T](using t: Type[T]): Placeholder[T, t.Out] = new Placeholder

trait Encoder[P, X]:
  def encode(x: X): String

object Encoder:
  def apply[P, X](placeholder: P)(using e: Encoder[P, X]): X => String = e.encode

  given [T, X]: Encoder[Placeholder[T, X], X] with
    def encode(x: X): String = ???

def Test =
  // the following compiles just fine
  Encoder(new Placeholder[varchar, String])("hello")
  // the following fails
  Encoder(Placeholder[varchar])("hello")
-----
ScalaFile
  ScTrait: Type
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Type')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: T
        PsiElement(identifier)('T')
      PsiElement(])(']')
    ExtendsBlock
      ScTemplateBody
        PsiElement(:)(':')
        PsiWhiteSpace('\n  ')
        ScTypeAliasDeclaration: Out
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Out')
  PsiWhiteSpace('\n\n')
  ScTypeAliasDeclaration: varchar
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(type)('type')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('varchar')
  PsiWhiteSpace('\n\n')
  ScGivenDefinition: given_Type_varchar
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(given)('given')
    PsiWhiteSpace(' ')
    ExtendsBlock
      TemplateParents
        ConstructorInvocation
          ParametrizedType: Type[varchar]
            SimpleType: Type
              CodeReferenceElement: Type
                PsiElement(identifier)('Type')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: varchar
                CodeReferenceElement: varchar
                  PsiElement(identifier)('varchar')
              PsiElement(])(']')
      PsiWhiteSpace(' ')
      PsiElement(with)('with')
      PsiWhiteSpace('\n  ')
      ScTemplateBody
        ScTypeAliasDefinition: Out
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Out')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          SimpleType: String
            CodeReferenceElement: String
              PsiElement(identifier)('String')
  PsiWhiteSpace('\n\n')
  ScClass: Placeholder
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Placeholder')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: T
        PsiElement(identifier)('T')
      PsiElement(,)(',')
      PsiWhiteSpace(' ')
      TypeParameter: U
        PsiElement(identifier)('U')
      PsiElement(])(']')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    ExtendsBlock
      <empty list>
  PsiWhiteSpace('\n\n')
  ScObject: Placeholder
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Placeholder')
    ExtendsBlock
      ScTemplateBody
        PsiElement(:)(':')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: apply
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('apply')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: T
              PsiElement(identifier)('T')
            PsiElement(])(']')
          Parameters
            ParametersClause
              PsiElement(()('(')
              PsiElement(using)('using')
              PsiWhiteSpace(' ')
              Parameter: t
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('t')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  ParametrizedType: Type[T]
                    SimpleType: Type
                      CodeReferenceElement: Type
                        PsiElement(identifier)('Type')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: T
                        CodeReferenceElement: T
                          PsiElement(identifier)('T')
                      PsiElement(])(']')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: Placeholder[T, t.Out]
            SimpleType: Placeholder
              CodeReferenceElement: Placeholder
                PsiElement(identifier)('Placeholder')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: T
                CodeReferenceElement: T
                  PsiElement(identifier)('T')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              SimpleType: t.Out
                CodeReferenceElement: t.Out
                  CodeReferenceElement: t
                    PsiElement(identifier)('t')
                  PsiElement(.)('.')
                  PsiElement(identifier)('Out')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ScNewTemplateDefinition: <anonymous>
            PsiElement(new)('new')
            PsiWhiteSpace(' ')
            ExtendsBlock
              TemplateParents
                ConstructorInvocation
                  SimpleType: Placeholder
                    CodeReferenceElement: Placeholder
                      PsiElement(identifier)('Placeholder')
  PsiWhiteSpace('\n\n')
  ScTrait: Encoder
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Encoder')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: P
        PsiElement(identifier)('P')
      PsiElement(,)(',')
      PsiWhiteSpace(' ')
      TypeParameter: X
        PsiElement(identifier)('X')
      PsiElement(])(']')
    ExtendsBlock
      ScTemplateBody
        PsiElement(:)(':')
        PsiWhiteSpace('\n  ')
        ScFunctionDeclaration: encode
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('encode')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: x
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: X
                    CodeReferenceElement: X
                      PsiElement(identifier)('X')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: String
            CodeReferenceElement: String
              PsiElement(identifier)('String')
  PsiWhiteSpace('\n\n')
  ScObject: Encoder
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Encoder')
    ExtendsBlock
      ScTemplateBody
        PsiElement(:)(':')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: apply
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('apply')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: P
              PsiElement(identifier)('P')
            PsiElement(,)(',')
            PsiWhiteSpace(' ')
            TypeParameter: X
              PsiElement(identifier)('X')
            PsiElement(])(']')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: placeholder
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('placeholder')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: P
                    CodeReferenceElement: P
                      PsiElement(identifier)('P')
              PsiElement())(')')
            ParametersClause
              PsiElement(()('(')
              PsiElement(using)('using')
              PsiWhiteSpace(' ')
              Parameter: e
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('e')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  ParametrizedType: Encoder[P, X]
                    SimpleType: Encoder
                      CodeReferenceElement: Encoder
                        PsiElement(identifier)('Encoder')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: P
                        CodeReferenceElement: P
                          PsiElement(identifier)('P')
                      PsiElement(,)(',')
                      PsiWhiteSpace(' ')
                      SimpleType: X
                        CodeReferenceElement: X
                          PsiElement(identifier)('X')
                      PsiElement(])(']')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          FunctionalType: X => String
            SimpleType: X
              CodeReferenceElement: X
                PsiElement(identifier)('X')
            PsiWhiteSpace(' ')
            PsiElement(=>)('=>')
            PsiWhiteSpace(' ')
            SimpleType: String
              CodeReferenceElement: String
                PsiElement(identifier)('String')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: e.encode
            ReferenceExpression: e
              PsiElement(identifier)('e')
            PsiElement(.)('.')
            PsiElement(identifier)('encode')
        PsiWhiteSpace('\n\n  ')
        ScGivenDefinition: given_Encoder_Placeholder_X
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(given)('given')
          PsiWhiteSpace(' ')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: T
              PsiElement(identifier)('T')
            PsiElement(,)(',')
            PsiWhiteSpace(' ')
            TypeParameter: X
              PsiElement(identifier)('X')
            PsiElement(])(']')
          Parameters
            <empty list>
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ExtendsBlock
            TemplateParents
              ConstructorInvocation
                ParametrizedType: Encoder[Placeholder[T, X], X]
                  SimpleType: Encoder
                    CodeReferenceElement: Encoder
                      PsiElement(identifier)('Encoder')
                  TypeArgumentsList
                    PsiElement([)('[')
                    ParametrizedType: Placeholder[T, X]
                      SimpleType: Placeholder
                        CodeReferenceElement: Placeholder
                          PsiElement(identifier)('Placeholder')
                      TypeArgumentsList
                        PsiElement([)('[')
                        SimpleType: T
                          CodeReferenceElement: T
                            PsiElement(identifier)('T')
                        PsiElement(,)(',')
                        PsiWhiteSpace(' ')
                        SimpleType: X
                          CodeReferenceElement: X
                            PsiElement(identifier)('X')
                        PsiElement(])(']')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    SimpleType: X
                      CodeReferenceElement: X
                        PsiElement(identifier)('X')
                    PsiElement(])(']')
            PsiWhiteSpace(' ')
            PsiElement(with)('with')
            PsiWhiteSpace('\n    ')
            ScTemplateBody
              ScFunctionDefinition: encode
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(def)('def')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('encode')
                Parameters
                  ParametersClause
                    PsiElement(()('(')
                    Parameter: x
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(identifier)('x')
                      PsiElement(:)(':')
                      PsiWhiteSpace(' ')
                      ParameterType
                        SimpleType: X
                          CodeReferenceElement: X
                            PsiElement(identifier)('X')
                    PsiElement())(')')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                SimpleType: String
                  CodeReferenceElement: String
                    PsiElement(identifier)('String')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                ReferenceExpression: ???
                  PsiElement(identifier)('???')
  PsiWhiteSpace('\n\n')
  ScFunctionDefinition: Test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(def)('def')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test')
    Parameters
      <empty list>
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    BlockExpression
      PsiWhiteSpace('\n  ')
      PsiComment(comment)('// the following compiles just fine')
      PsiWhiteSpace('\n  ')
      MethodCall
        MethodCall
          ReferenceExpression: Encoder
            PsiElement(identifier)('Encoder')
          ArgumentList
            PsiElement(()('(')
            ScNewTemplateDefinition: <anonymous>
              PsiElement(new)('new')
              PsiWhiteSpace(' ')
              ExtendsBlock
                TemplateParents
                  ConstructorInvocation
                    ParametrizedType: Placeholder[varchar, String]
                      SimpleType: Placeholder
                        CodeReferenceElement: Placeholder
                          PsiElement(identifier)('Placeholder')
                      TypeArgumentsList
                        PsiElement([)('[')
                        SimpleType: varchar
                          CodeReferenceElement: varchar
                            PsiElement(identifier)('varchar')
                        PsiElement(,)(',')
                        PsiWhiteSpace(' ')
                        SimpleType: String
                          CodeReferenceElement: String
                            PsiElement(identifier)('String')
                        PsiElement(])(']')
            PsiElement())(')')
        ArgumentList
          PsiElement(()('(')
          StringLiteral
            PsiElement(string content)('"hello"')
          PsiElement())(')')
      PsiWhiteSpace('\n  ')
      PsiComment(comment)('// the following fails')
      PsiWhiteSpace('\n  ')
      MethodCall
        MethodCall
          ReferenceExpression: Encoder
            PsiElement(identifier)('Encoder')
          ArgumentList
            PsiElement(()('(')
            GenericCall
              ReferenceExpression: Placeholder
                PsiElement(identifier)('Placeholder')
              TypeArgumentsList
                PsiElement([)('[')
                SimpleType: varchar
                  CodeReferenceElement: varchar
                    PsiElement(identifier)('varchar')
                PsiElement(])(']')
            PsiElement())(')')
        ArgumentList
          PsiElement(()('(')
          StringLiteral
            PsiElement(string content)('"hello"')
          PsiElement())(')')
