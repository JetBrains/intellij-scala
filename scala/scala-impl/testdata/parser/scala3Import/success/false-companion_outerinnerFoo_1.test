package outer
package inner
object Foo {
  val a: Int = 1
}
-----
ScalaFile
  ScPackaging
    PsiElement(package)('package')
    PsiWhiteSpace(' ')
    CodeReferenceElement: outer
      PsiElement(identifier)('outer')
    PsiWhiteSpace('\n')
    ScPackaging
      PsiElement(package)('package')
      PsiWhiteSpace(' ')
      CodeReferenceElement: inner
        PsiElement(identifier)('inner')
      PsiWhiteSpace('\n')
      ScObject: Foo
        AnnotationsList
          <empty list>
        Modifiers
          <empty list>
        PsiElement(object)('object')
        PsiWhiteSpace(' ')
        PsiElement(identifier)('Foo')
        PsiWhiteSpace(' ')
        ExtendsBlock
          ScTemplateBody
            PsiElement({)('{')
            PsiWhiteSpace('\n  ')
            ScPatternDefinition: a
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              ListOfPatterns
                ReferencePattern: a
                  PsiElement(identifier)('a')
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              SimpleType: Int
                CodeReferenceElement: Int
                  PsiElement(identifier)('Int')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              IntegerLiteral
                PsiElement(integer)('1')
            PsiWhiteSpace('\n')
            PsiElement(})('}')
