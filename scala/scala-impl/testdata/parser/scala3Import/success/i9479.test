trait Applicative[F[_]]

def traverse[F[_]: Applicative, A, B](as: List[A])(f: A => F[B]) = ???

object Test {
  implicit def eitherApplicative[A]: Applicative[[X] =>> Either[A, X]] = ???

  // Used to fail looking for `Applicative[[X] =>> Right[Nothing, X] | Left[Int, X]]`
  traverse(List(1, 2))(i => if (true) Right(i) else Left(i))
}
-----
ScalaFile
  ScTrait: Applicative
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Applicative')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: F
        PsiElement(identifier)('F')
        TypeParameterClause
          PsiElement([)('[')
          TypeParameter: _
            PsiElement(_)('_')
          PsiElement(])(']')
      PsiElement(])(']')
    ExtendsBlock
      <empty list>
  PsiWhiteSpace('\n\n')
  ScFunctionDefinition: traverse
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(def)('def')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('traverse')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: F
        PsiElement(identifier)('F')
        TypeParameterClause
          PsiElement([)('[')
          TypeParameter: _
            PsiElement(_)('_')
          PsiElement(])(']')
        PsiElement(:)(':')
        PsiWhiteSpace(' ')
        SimpleType: Applicative
          CodeReferenceElement: Applicative
            PsiElement(identifier)('Applicative')
      PsiElement(,)(',')
      PsiWhiteSpace(' ')
      TypeParameter: A
        PsiElement(identifier)('A')
      PsiElement(,)(',')
      PsiWhiteSpace(' ')
      TypeParameter: B
        PsiElement(identifier)('B')
      PsiElement(])(']')
    Parameters
      ParametersClause
        PsiElement(()('(')
        Parameter: as
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(identifier)('as')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParameterType
            ParametrizedType: List[A]
              SimpleType: List
                CodeReferenceElement: List
                  PsiElement(identifier)('List')
              TypeArgumentsList
                PsiElement([)('[')
                SimpleType: A
                  CodeReferenceElement: A
                    PsiElement(identifier)('A')
                PsiElement(])(']')
        PsiElement())(')')
      ParametersClause
        PsiElement(()('(')
        Parameter: f
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(identifier)('f')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParameterType
            FunctionalType: A => F[B]
              SimpleType: A
                CodeReferenceElement: A
                  PsiElement(identifier)('A')
              PsiWhiteSpace(' ')
              PsiElement(=>)('=>')
              PsiWhiteSpace(' ')
              ParametrizedType: F[B]
                SimpleType: F
                  CodeReferenceElement: F
                    PsiElement(identifier)('F')
                TypeArgumentsList
                  PsiElement([)('[')
                  SimpleType: B
                    CodeReferenceElement: B
                      PsiElement(identifier)('B')
                  PsiElement(])(']')
        PsiElement())(')')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    ReferenceExpression: ???
      PsiElement(identifier)('???')
  PsiWhiteSpace('\n\n')
  ScObject: Test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: eitherApplicative
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(implicit)('implicit')
          PsiWhiteSpace(' ')
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('eitherApplicative')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: A
              PsiElement(identifier)('A')
            PsiElement(])(']')
          Parameters
            <empty list>
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: Applicative[[X] =>> Either[A, X]]
            SimpleType: Applicative
              CodeReferenceElement: Applicative
                PsiElement(identifier)('Applicative')
            TypeArgumentsList
              PsiElement([)('[')
              TypeLambda: [X] =>> Either[A, X]
                TypeParameterClause
                  PsiElement([)('[')
                  TypeParameter: X
                    PsiElement(identifier)('X')
                  PsiElement(])(']')
                PsiWhiteSpace(' ')
                PsiElement(=>>)('=>>')
                PsiWhiteSpace(' ')
                ParametrizedType: Either[A, X]
                  SimpleType: Either
                    CodeReferenceElement: Either
                      PsiElement(identifier)('Either')
                  TypeArgumentsList
                    PsiElement([)('[')
                    SimpleType: A
                      CodeReferenceElement: A
                        PsiElement(identifier)('A')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    SimpleType: X
                      CodeReferenceElement: X
                        PsiElement(identifier)('X')
                    PsiElement(])(']')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: ???
            PsiElement(identifier)('???')
        PsiWhiteSpace('\n\n  ')
        PsiComment(comment)('// Used to fail looking for `Applicative[[X] =>> Right[Nothing, X] | Left[Int, X]]`')
        PsiWhiteSpace('\n  ')
        MethodCall
          MethodCall
            ReferenceExpression: traverse
              PsiElement(identifier)('traverse')
            ArgumentList
              PsiElement(()('(')
              MethodCall
                ReferenceExpression: List
                  PsiElement(identifier)('List')
                ArgumentList
                  PsiElement(()('(')
                  IntegerLiteral
                    PsiElement(integer)('1')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  IntegerLiteral
                    PsiElement(integer)('2')
                  PsiElement())(')')
              PsiElement())(')')
          ArgumentList
            PsiElement(()('(')
            FunctionExpression
              Parameters
                ParametersClause
                  Parameter: i
                    PsiElement(identifier)('i')
              PsiWhiteSpace(' ')
              PsiElement(=>)('=>')
              PsiWhiteSpace(' ')
              IfStatement
                PsiElement(if)('if')
                PsiWhiteSpace(' ')
                PsiElement(()('(')
                BooleanLiteral
                  PsiElement(true)('true')
                PsiElement())(')')
                PsiWhiteSpace(' ')
                MethodCall
                  ReferenceExpression: Right
                    PsiElement(identifier)('Right')
                  ArgumentList
                    PsiElement(()('(')
                    ReferenceExpression: i
                      PsiElement(identifier)('i')
                    PsiElement())(')')
                PsiWhiteSpace(' ')
                PsiElement(else)('else')
                PsiWhiteSpace(' ')
                MethodCall
                  ReferenceExpression: Left
                    PsiElement(identifier)('Left')
                  ArgumentList
                    PsiElement(()('(')
                    ReferenceExpression: i
                      PsiElement(identifier)('i')
                    PsiElement())(')')
            PsiElement())(')')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
