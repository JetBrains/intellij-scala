// exercise coevolveSym
trait HasElem { type A }
trait View[AIn] {
  val tc: HasElem { type A = AIn }
  def f2(p: tc.A): tc.A = p
}

object Test {
  val view: View[Int] = null

  view f2 5  // fails
}
-----
ScalaFile
  ScTrait: HasElem
    PsiComment(comment)('// exercise coevolveSym')
    PsiWhiteSpace('\n')
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('HasElem')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace(' ')
        ScTypeAliasDeclaration: A
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('A')
        PsiWhiteSpace(' ')
        PsiElement(})('}')
  PsiWhiteSpace('\n')
  ScTrait: View
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('View')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: AIn
        PsiElement(identifier)('AIn')
      PsiElement(])(']')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScValueDeclaration: tc
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfIdentifiers
            Field identifier: tc
              PsiElement(identifier)('tc')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          CompoundType: HasElem { type A = AIn }
            SimpleType: HasElem
              CodeReferenceElement: HasElem
                PsiElement(identifier)('HasElem')
            PsiWhiteSpace(' ')
            Refinement
              PsiElement({)('{')
              PsiWhiteSpace(' ')
              ScTypeAliasDefinition: A
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(type)('type')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('A')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                SimpleType: AIn
                  CodeReferenceElement: AIn
                    PsiElement(identifier)('AIn')
              PsiWhiteSpace(' ')
              PsiElement(})('}')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: f2
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('f2')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: p
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('p')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: tc.A
                    CodeReferenceElement: tc.A
                      CodeReferenceElement: tc
                        PsiElement(identifier)('tc')
                      PsiElement(.)('.')
                      PsiElement(identifier)('A')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: tc.A
            CodeReferenceElement: tc.A
              CodeReferenceElement: tc
                PsiElement(identifier)('tc')
              PsiElement(.)('.')
              PsiElement(identifier)('A')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: p
            PsiElement(identifier)('p')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScObject: Test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: view
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: view
              PsiElement(identifier)('view')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: View[Int]
            SimpleType: View
              CodeReferenceElement: View
                PsiElement(identifier)('View')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: Int
                CodeReferenceElement: Int
                  PsiElement(identifier)('Int')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          NullLiteral
            PsiElement(null)('null')
        PsiWhiteSpace('\n\n  ')
        InfixExpression
          ReferenceExpression: view
            PsiElement(identifier)('view')
          PsiWhiteSpace(' ')
          ReferenceExpression: f2
            PsiElement(identifier)('f2')
          PsiWhiteSpace(' ')
          IntegerLiteral
            PsiElement(integer)('5')
        PsiWhiteSpace('  ')
        PsiComment(comment)('// fails')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
