object i4075 {
  case class One[T](fst: T)
  def bad[T](e: One[T]) = e match {
    case foo: One[a] =>
      val t: T = e.fst
      // val nok: Nothing = t // should not compile
      val ok: a = t // does compile
      One(ok)
  }

  val one: One[Int] = bad(One(0))
}
-----
ScalaFile
  ScObject: i4075
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('i4075')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScClass: One
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(case)('case')
          PsiWhiteSpace(' ')
          PsiElement(class)('class')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('One')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: T
              PsiElement(identifier)('T')
            PsiElement(])(']')
          PrimaryConstructor
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            Parameters
              ParametersClause
                PsiElement(()('(')
                ClassParameter: fst
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(identifier)('fst')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    SimpleType: T
                      CodeReferenceElement: T
                        PsiElement(identifier)('T')
                PsiElement())(')')
          ExtendsBlock
            <empty list>
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: bad
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('bad')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: T
              PsiElement(identifier)('T')
            PsiElement(])(']')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: e
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('e')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  ParametrizedType: One[T]
                    SimpleType: One
                      CodeReferenceElement: One
                        PsiElement(identifier)('One')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: T
                        CodeReferenceElement: T
                          PsiElement(identifier)('T')
                      PsiElement(])(']')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MatchStatement
            ReferenceExpression: e
              PsiElement(identifier)('e')
            PsiWhiteSpace(' ')
            PsiElement(match)('match')
            PsiWhiteSpace(' ')
            PsiElement({)('{')
            PsiWhiteSpace('\n    ')
            CaseClauses
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                Scala3 TypedPattern
                  ReferencePattern: foo
                    PsiElement(identifier)('foo')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  TypePattern
                    ParametrizedType: One[a]
                      SimpleType: One
                        CodeReferenceElement: One
                          PsiElement(identifier)('One')
                      TypeArgumentsList
                        PsiElement([)('[')
                        TypeVariable: a
                          PsiElement(identifier)('a')
                        PsiElement(])(']')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace('\n      ')
                BlockOfExpressions
                  ScPatternDefinition: t
                    AnnotationsList
                      <empty list>
                    Modifiers
                      <empty list>
                    PsiElement(val)('val')
                    PsiWhiteSpace(' ')
                    ListOfPatterns
                      ReferencePattern: t
                        PsiElement(identifier)('t')
                    PsiElement(:)(':')
                    PsiWhiteSpace(' ')
                    SimpleType: T
                      CodeReferenceElement: T
                        PsiElement(identifier)('T')
                    PsiWhiteSpace(' ')
                    PsiElement(=)('=')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: e.fst
                      ReferenceExpression: e
                        PsiElement(identifier)('e')
                      PsiElement(.)('.')
                      PsiElement(identifier)('fst')
                  PsiWhiteSpace('\n      ')
                  ScPatternDefinition: ok
                    PsiComment(comment)('// val nok: Nothing = t // should not compile')
                    PsiWhiteSpace('\n      ')
                    AnnotationsList
                      <empty list>
                    Modifiers
                      <empty list>
                    PsiElement(val)('val')
                    PsiWhiteSpace(' ')
                    ListOfPatterns
                      ReferencePattern: ok
                        PsiElement(identifier)('ok')
                    PsiElement(:)(':')
                    PsiWhiteSpace(' ')
                    SimpleType: a
                      CodeReferenceElement: a
                        PsiElement(identifier)('a')
                    PsiWhiteSpace(' ')
                    PsiElement(=)('=')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: t
                      PsiElement(identifier)('t')
                  PsiWhiteSpace(' ')
                  PsiComment(comment)('// does compile')
                  PsiWhiteSpace('\n      ')
                  MethodCall
                    ReferenceExpression: One
                      PsiElement(identifier)('One')
                    ArgumentList
                      PsiElement(()('(')
                      ReferenceExpression: ok
                        PsiElement(identifier)('ok')
                      PsiElement())(')')
            PsiWhiteSpace('\n  ')
            PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        ScPatternDefinition: one
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: one
              PsiElement(identifier)('one')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: One[Int]
            SimpleType: One
              CodeReferenceElement: One
                PsiElement(identifier)('One')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: Int
                CodeReferenceElement: Int
                  PsiElement(identifier)('Int')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: bad
              PsiElement(identifier)('bad')
            ArgumentList
              PsiElement(()('(')
              MethodCall
                ReferenceExpression: One
                  PsiElement(identifier)('One')
                ArgumentList
                  PsiElement(()('(')
                  IntegerLiteral
                    PsiElement(integer)('0')
                  PsiElement())(')')
              PsiElement())(')')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
