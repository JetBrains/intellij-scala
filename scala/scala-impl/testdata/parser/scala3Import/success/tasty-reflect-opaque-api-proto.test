
trait CompilerInterface {
  type Tree
  type Term <: Tree
}

class Reflect(val internal: CompilerInterface) {

  opaque type Tree = internal.Tree
  opaque type Term <: Tree = internal.Term

  object Tree {
    extension (tree: Tree) {
      def show: String = ???
    }
  }

}

object App {
  val refl: Reflect = ???
  import refl.*

  val tree: Tree = ???
  tree.show

  val term: Term = ???
  tree.show

}
-----
ScalaFile
  ScTrait: CompilerInterface
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('CompilerInterface')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScTypeAliasDeclaration: Tree
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Tree')
        PsiWhiteSpace('\n  ')
        ScTypeAliasDeclaration: Term
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Term')
          PsiWhiteSpace(' ')
          PsiElement(<:)('<:')
          PsiWhiteSpace(' ')
          SimpleType: Tree
            CodeReferenceElement: Tree
              PsiElement(identifier)('Tree')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScClass: Reflect
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Reflect')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        ParametersClause
          PsiElement(()('(')
          ClassParameter: internal
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(val)('val')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('internal')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            ParameterType
              SimpleType: CompilerInterface
                CodeReferenceElement: CompilerInterface
                  PsiElement(identifier)('CompilerInterface')
          PsiElement())(')')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n\n  ')
        ScTypeAliasDefinition: Tree
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(opaque)('opaque')
          PsiWhiteSpace(' ')
          PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Tree')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          SimpleType: internal.Tree
            CodeReferenceElement: internal.Tree
              CodeReferenceElement: internal
                PsiElement(identifier)('internal')
              PsiElement(.)('.')
              PsiElement(identifier)('Tree')
        PsiWhiteSpace('\n  ')
        ScTypeAliasDefinition: Term
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(opaque)('opaque')
          PsiWhiteSpace(' ')
          PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Term')
          PsiWhiteSpace(' ')
          PsiElement(<:)('<:')
          PsiWhiteSpace(' ')
          SimpleType: Tree
            CodeReferenceElement: Tree
              PsiElement(identifier)('Tree')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          SimpleType: internal.Term
            CodeReferenceElement: internal.Term
              CodeReferenceElement: internal
                PsiElement(identifier)('internal')
              PsiElement(.)('.')
              PsiElement(identifier)('Term')
        PsiWhiteSpace('\n\n  ')
        ScObject: Tree
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(object)('object')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Tree')
          PsiWhiteSpace(' ')
          ExtendsBlock
            ScTemplateBody
              PsiElement({)('{')
              PsiWhiteSpace('\n    ')
              Extension on Tree
                PsiElement(extension)('extension')
                PsiWhiteSpace(' ')
                Parameters
                  ParametersClause
                    PsiElement(()('(')
                    Parameter: tree
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(identifier)('tree')
                      PsiElement(:)(':')
                      PsiWhiteSpace(' ')
                      ParameterType
                        SimpleType: Tree
                          CodeReferenceElement: Tree
                            PsiElement(identifier)('Tree')
                    PsiElement())(')')
                PsiWhiteSpace(' ')
                ScExtensionBody
                  PsiElement({)('{')
                  PsiWhiteSpace('\n      ')
                  ScFunctionDefinition: show
                    AnnotationsList
                      <empty list>
                    Modifiers
                      <empty list>
                    PsiElement(def)('def')
                    PsiWhiteSpace(' ')
                    PsiElement(identifier)('show')
                    Parameters
                      <empty list>
                    PsiElement(:)(':')
                    PsiWhiteSpace(' ')
                    SimpleType: String
                      CodeReferenceElement: String
                        PsiElement(identifier)('String')
                    PsiWhiteSpace(' ')
                    PsiElement(=)('=')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: ???
                      PsiElement(identifier)('???')
                  PsiWhiteSpace('\n    ')
                  PsiElement(})('}')
              PsiWhiteSpace('\n  ')
              PsiElement(})('}')
        PsiWhiteSpace('\n\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScObject: App
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('App')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: refl
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: refl
              PsiElement(identifier)('refl')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Reflect
            CodeReferenceElement: Reflect
              PsiElement(identifier)('Reflect')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: ???
            PsiElement(identifier)('???')
        PsiWhiteSpace('\n  ')
        ScImportStatement
          PsiElement(import)('import')
          PsiWhiteSpace(' ')
          ImportExpression
            CodeReferenceElement: refl
              PsiElement(identifier)('refl')
            PsiElement(.)('.')
            PsiElement(*)('*')
        PsiWhiteSpace('\n\n  ')
        ScPatternDefinition: tree
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: tree
              PsiElement(identifier)('tree')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Tree
            CodeReferenceElement: Tree
              PsiElement(identifier)('Tree')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: ???
            PsiElement(identifier)('???')
        PsiWhiteSpace('\n  ')
        ReferenceExpression: tree.show
          ReferenceExpression: tree
            PsiElement(identifier)('tree')
          PsiElement(.)('.')
          PsiElement(identifier)('show')
        PsiWhiteSpace('\n\n  ')
        ScPatternDefinition: term
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: term
              PsiElement(identifier)('term')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Term
            CodeReferenceElement: Term
              PsiElement(identifier)('Term')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: ???
            PsiElement(identifier)('???')
        PsiWhiteSpace('\n  ')
        ReferenceExpression: tree.show
          ReferenceExpression: tree
            PsiElement(identifier)('tree')
          PsiElement(.)('.')
          PsiElement(identifier)('show')
        PsiWhiteSpace('\n\n')
        PsiElement(})('}')
