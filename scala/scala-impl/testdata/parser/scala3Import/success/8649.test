// This is crazy:
type Get0 = OK[Int, Unit]
def get0: Handler[Get0] = IO[Unit]()

case class HandlerAlt[A](value: Handler[A])

type Handler[API] = handler.Go[API]

case class IO[A]()
case class OK[A, B]()

object handler:
  // Starter for Handler reduction:
  type Go[API] = API match
    case _ =>
      HandlerSingle[API]

  type HandlerSingle[X] = X match
    case OK[_, response] =>
      IO[response]

object Minimized {
  case class HandlerAlt[A](value: M2[A])

  type M1[X] = X match {
    case _ => M2[X]
  }

  type M2[X] = X match {
    case Int => String
  }
}
-----
ScalaFile
  ScTypeAliasDefinition: Get0
    PsiComment(comment)('// This is crazy:')
    PsiWhiteSpace('\n')
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(type)('type')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Get0')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    ParametrizedType: OK[Int, Unit]
      SimpleType: OK
        CodeReferenceElement: OK
          PsiElement(identifier)('OK')
      TypeArgumentsList
        PsiElement([)('[')
        SimpleType: Int
          CodeReferenceElement: Int
            PsiElement(identifier)('Int')
        PsiElement(,)(',')
        PsiWhiteSpace(' ')
        SimpleType: Unit
          CodeReferenceElement: Unit
            PsiElement(identifier)('Unit')
        PsiElement(])(']')
  PsiWhiteSpace('\n')
  ScFunctionDefinition: get0
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(def)('def')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('get0')
    Parameters
      <empty list>
    PsiElement(:)(':')
    PsiWhiteSpace(' ')
    ParametrizedType: Handler[Get0]
      SimpleType: Handler
        CodeReferenceElement: Handler
          PsiElement(identifier)('Handler')
      TypeArgumentsList
        PsiElement([)('[')
        SimpleType: Get0
          CodeReferenceElement: Get0
            PsiElement(identifier)('Get0')
        PsiElement(])(']')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    MethodCall
      GenericCall
        ReferenceExpression: IO
          PsiElement(identifier)('IO')
        TypeArgumentsList
          PsiElement([)('[')
          SimpleType: Unit
            CodeReferenceElement: Unit
              PsiElement(identifier)('Unit')
          PsiElement(])(']')
      ArgumentList
        PsiElement(()('(')
        PsiElement())(')')
  PsiWhiteSpace('\n\n')
  ScClass: HandlerAlt
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(case)('case')
    PsiWhiteSpace(' ')
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('HandlerAlt')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: A
        PsiElement(identifier)('A')
      PsiElement(])(']')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        ParametersClause
          PsiElement(()('(')
          ClassParameter: value
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(identifier)('value')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            ParameterType
              ParametrizedType: Handler[A]
                SimpleType: Handler
                  CodeReferenceElement: Handler
                    PsiElement(identifier)('Handler')
                TypeArgumentsList
                  PsiElement([)('[')
                  SimpleType: A
                    CodeReferenceElement: A
                      PsiElement(identifier)('A')
                  PsiElement(])(']')
          PsiElement())(')')
    ExtendsBlock
      <empty list>
  PsiWhiteSpace('\n\n')
  ScTypeAliasDefinition: Handler
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(type)('type')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Handler')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: API
        PsiElement(identifier)('API')
      PsiElement(])(']')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    ParametrizedType: handler.Go[API]
      SimpleType: handler.Go
        CodeReferenceElement: handler.Go
          CodeReferenceElement: handler
            PsiElement(identifier)('handler')
          PsiElement(.)('.')
          PsiElement(identifier)('Go')
      TypeArgumentsList
        PsiElement([)('[')
        SimpleType: API
          CodeReferenceElement: API
            PsiElement(identifier)('API')
        PsiElement(])(']')
  PsiWhiteSpace('\n\n')
  ScClass: IO
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(case)('case')
    PsiWhiteSpace(' ')
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('IO')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: A
        PsiElement(identifier)('A')
      PsiElement(])(']')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        ParametersClause
          PsiElement(()('(')
          PsiElement())(')')
    ExtendsBlock
      <empty list>
  PsiWhiteSpace('\n')
  ScClass: OK
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(case)('case')
    PsiWhiteSpace(' ')
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('OK')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: A
        PsiElement(identifier)('A')
      PsiElement(,)(',')
      PsiWhiteSpace(' ')
      TypeParameter: B
        PsiElement(identifier)('B')
      PsiElement(])(']')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        ParametersClause
          PsiElement(()('(')
          PsiElement())(')')
    ExtendsBlock
      <empty list>
  PsiWhiteSpace('\n\n')
  ScObject: handler
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('handler')
    ExtendsBlock
      ScTemplateBody
        PsiElement(:)(':')
        PsiWhiteSpace('\n  ')
        ScTypeAliasDefinition: Go
          PsiComment(comment)('// Starter for Handler reduction:')
          PsiWhiteSpace('\n  ')
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Go')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: API
              PsiElement(identifier)('API')
            PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MatchType: API match
    case _ =>
      HandlerSingle[API]
            SimpleType: API
              CodeReferenceElement: API
                PsiElement(identifier)('API')
            PsiWhiteSpace(' ')
            PsiElement(match)('match')
            PsiWhiteSpace('\n    ')
            ScMatchTypeCasesImpl(match type cases)
              ScMatchTypeCaseImpl(match type case)
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                WildcardType: _
                  PsiElement(_)('_')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace('\n      ')
                ParametrizedType: HandlerSingle[API]
                  SimpleType: HandlerSingle
                    CodeReferenceElement: HandlerSingle
                      PsiElement(identifier)('HandlerSingle')
                  TypeArgumentsList
                    PsiElement([)('[')
                    SimpleType: API
                      CodeReferenceElement: API
                        PsiElement(identifier)('API')
                    PsiElement(])(']')
        PsiWhiteSpace('\n\n  ')
        ScTypeAliasDefinition: HandlerSingle
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('HandlerSingle')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: X
              PsiElement(identifier)('X')
            PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MatchType: X match
    case OK[_, response] =>
      IO[response]
            SimpleType: X
              CodeReferenceElement: X
                PsiElement(identifier)('X')
            PsiWhiteSpace(' ')
            PsiElement(match)('match')
            PsiWhiteSpace('\n    ')
            ScMatchTypeCasesImpl(match type cases)
              ScMatchTypeCaseImpl(match type case)
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                ParametrizedType: OK[_, response]
                  SimpleType: OK
                    CodeReferenceElement: OK
                      PsiElement(identifier)('OK')
                  TypeArgumentsList
                    PsiElement([)('[')
                    TypeVariable: _
                      PsiElement(_)('_')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    TypeVariable: response
                      PsiElement(identifier)('response')
                    PsiElement(])(']')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace('\n      ')
                ParametrizedType: IO[response]
                  SimpleType: IO
                    CodeReferenceElement: IO
                      PsiElement(identifier)('IO')
                  TypeArgumentsList
                    PsiElement([)('[')
                    SimpleType: response
                      CodeReferenceElement: response
                        PsiElement(identifier)('response')
                    PsiElement(])(']')
  PsiWhiteSpace('\n\n')
  ScObject: Minimized
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Minimized')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScClass: HandlerAlt
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(case)('case')
          PsiWhiteSpace(' ')
          PsiElement(class)('class')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('HandlerAlt')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: A
              PsiElement(identifier)('A')
            PsiElement(])(']')
          PrimaryConstructor
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            Parameters
              ParametersClause
                PsiElement(()('(')
                ClassParameter: value
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(identifier)('value')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    ParametrizedType: M2[A]
                      SimpleType: M2
                        CodeReferenceElement: M2
                          PsiElement(identifier)('M2')
                      TypeArgumentsList
                        PsiElement([)('[')
                        SimpleType: A
                          CodeReferenceElement: A
                            PsiElement(identifier)('A')
                        PsiElement(])(']')
                PsiElement())(')')
          ExtendsBlock
            <empty list>
        PsiWhiteSpace('\n\n  ')
        ScTypeAliasDefinition: M1
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('M1')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: X
              PsiElement(identifier)('X')
            PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MatchType: X match {
    case _ => M2[X]
  }
            SimpleType: X
              CodeReferenceElement: X
                PsiElement(identifier)('X')
            PsiWhiteSpace(' ')
            PsiElement(match)('match')
            PsiWhiteSpace(' ')
            PsiElement({)('{')
            PsiWhiteSpace('\n    ')
            ScMatchTypeCasesImpl(match type cases)
              ScMatchTypeCaseImpl(match type case)
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                WildcardType: _
                  PsiElement(_)('_')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                ParametrizedType: M2[X]
                  SimpleType: M2
                    CodeReferenceElement: M2
                      PsiElement(identifier)('M2')
                  TypeArgumentsList
                    PsiElement([)('[')
                    SimpleType: X
                      CodeReferenceElement: X
                        PsiElement(identifier)('X')
                    PsiElement(])(']')
            PsiWhiteSpace('\n  ')
            PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        ScTypeAliasDefinition: M2
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('M2')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: X
              PsiElement(identifier)('X')
            PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MatchType: X match {
    case Int => String
  }
            SimpleType: X
              CodeReferenceElement: X
                PsiElement(identifier)('X')
            PsiWhiteSpace(' ')
            PsiElement(match)('match')
            PsiWhiteSpace(' ')
            PsiElement({)('{')
            PsiWhiteSpace('\n    ')
            ScMatchTypeCasesImpl(match type cases)
              ScMatchTypeCaseImpl(match type case)
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                SimpleType: Int
                  CodeReferenceElement: Int
                    PsiElement(identifier)('Int')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                SimpleType: String
                  CodeReferenceElement: String
                    PsiElement(identifier)('String')
            PsiWhiteSpace('\n  ')
            PsiElement(})('}')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
