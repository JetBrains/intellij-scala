import scala.reflect.TypeTest

object Test {
  def test[S, T](using TypeTest[S, T]): Unit = ()
  val a: A = ???

  test[Any, Any]
  test[Int, Int]

  test[Int, Any]
  test[String, Any]
  test[String, AnyRef]

  test[Any, Int]
  test[Any, String]
  test[Any, Some[_]]
  test[Any, Array[Int]]
  test[Seq[Int], List[Int]]

  test[Any, Some[Int]] // unchecked warning
  test[Any, a.X] // unchecked warning
  test[a.X, a.Y] // unchecked warning

}

class A {
  type X
  type Y <: X
}
-----
ScalaFile
  ScImportStatement
    PsiElement(import)('import')
    PsiWhiteSpace(' ')
    ImportExpression
      CodeReferenceElement: scala.reflect.TypeTest
        CodeReferenceElement: scala.reflect
          CodeReferenceElement: scala
            PsiElement(identifier)('scala')
          PsiElement(.)('.')
          PsiElement(identifier)('reflect')
        PsiElement(.)('.')
        PsiElement(identifier)('TypeTest')
  PsiWhiteSpace('\n\n')
  ScObject: Test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: test
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('test')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: S
              PsiElement(identifier)('S')
            PsiElement(,)(',')
            PsiWhiteSpace(' ')
            TypeParameter: T
              PsiElement(identifier)('T')
            PsiElement(])(']')
          Parameters
            ParametersClause
              PsiElement(()('(')
              PsiElement(using)('using')
              PsiWhiteSpace(' ')
              Parameter: <anonymous>
                ParameterType
                  ParametrizedType: TypeTest[S, T]
                    SimpleType: TypeTest
                      CodeReferenceElement: TypeTest
                        PsiElement(identifier)('TypeTest')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: S
                        CodeReferenceElement: S
                          PsiElement(identifier)('S')
                      PsiElement(,)(',')
                      PsiWhiteSpace(' ')
                      SimpleType: T
                        CodeReferenceElement: T
                          PsiElement(identifier)('T')
                      PsiElement(])(']')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Unit
            CodeReferenceElement: Unit
              PsiElement(identifier)('Unit')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          UnitExpression
            PsiElement(()('(')
            PsiElement())(')')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: a
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: a
              PsiElement(identifier)('a')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: A
            CodeReferenceElement: A
              PsiElement(identifier)('A')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: ???
            PsiElement(identifier)('???')
        PsiWhiteSpace('\n\n  ')
        GenericCall
          ReferenceExpression: test
            PsiElement(identifier)('test')
          TypeArgumentsList
            PsiElement([)('[')
            SimpleType: Any
              CodeReferenceElement: Any
                PsiElement(identifier)('Any')
            PsiElement(,)(',')
            PsiWhiteSpace(' ')
            SimpleType: Any
              CodeReferenceElement: Any
                PsiElement(identifier)('Any')
            PsiElement(])(']')
        PsiWhiteSpace('\n  ')
        GenericCall
          ReferenceExpression: test
            PsiElement(identifier)('test')
          TypeArgumentsList
            PsiElement([)('[')
            SimpleType: Int
              CodeReferenceElement: Int
                PsiElement(identifier)('Int')
            PsiElement(,)(',')
            PsiWhiteSpace(' ')
            SimpleType: Int
              CodeReferenceElement: Int
                PsiElement(identifier)('Int')
            PsiElement(])(']')
        PsiWhiteSpace('\n\n  ')
        GenericCall
          ReferenceExpression: test
            PsiElement(identifier)('test')
          TypeArgumentsList
            PsiElement([)('[')
            SimpleType: Int
              CodeReferenceElement: Int
                PsiElement(identifier)('Int')
            PsiElement(,)(',')
            PsiWhiteSpace(' ')
            SimpleType: Any
              CodeReferenceElement: Any
                PsiElement(identifier)('Any')
            PsiElement(])(']')
        PsiWhiteSpace('\n  ')
        GenericCall
          ReferenceExpression: test
            PsiElement(identifier)('test')
          TypeArgumentsList
            PsiElement([)('[')
            SimpleType: String
              CodeReferenceElement: String
                PsiElement(identifier)('String')
            PsiElement(,)(',')
            PsiWhiteSpace(' ')
            SimpleType: Any
              CodeReferenceElement: Any
                PsiElement(identifier)('Any')
            PsiElement(])(']')
        PsiWhiteSpace('\n  ')
        GenericCall
          ReferenceExpression: test
            PsiElement(identifier)('test')
          TypeArgumentsList
            PsiElement([)('[')
            SimpleType: String
              CodeReferenceElement: String
                PsiElement(identifier)('String')
            PsiElement(,)(',')
            PsiWhiteSpace(' ')
            SimpleType: AnyRef
              CodeReferenceElement: AnyRef
                PsiElement(identifier)('AnyRef')
            PsiElement(])(']')
        PsiWhiteSpace('\n\n  ')
        GenericCall
          ReferenceExpression: test
            PsiElement(identifier)('test')
          TypeArgumentsList
            PsiElement([)('[')
            SimpleType: Any
              CodeReferenceElement: Any
                PsiElement(identifier)('Any')
            PsiElement(,)(',')
            PsiWhiteSpace(' ')
            SimpleType: Int
              CodeReferenceElement: Int
                PsiElement(identifier)('Int')
            PsiElement(])(']')
        PsiWhiteSpace('\n  ')
        GenericCall
          ReferenceExpression: test
            PsiElement(identifier)('test')
          TypeArgumentsList
            PsiElement([)('[')
            SimpleType: Any
              CodeReferenceElement: Any
                PsiElement(identifier)('Any')
            PsiElement(,)(',')
            PsiWhiteSpace(' ')
            SimpleType: String
              CodeReferenceElement: String
                PsiElement(identifier)('String')
            PsiElement(])(']')
        PsiWhiteSpace('\n  ')
        GenericCall
          ReferenceExpression: test
            PsiElement(identifier)('test')
          TypeArgumentsList
            PsiElement([)('[')
            SimpleType: Any
              CodeReferenceElement: Any
                PsiElement(identifier)('Any')
            PsiElement(,)(',')
            PsiWhiteSpace(' ')
            ParametrizedType: Some[_]
              SimpleType: Some
                CodeReferenceElement: Some
                  PsiElement(identifier)('Some')
              TypeArgumentsList
                PsiElement([)('[')
                WildcardType: _
                  PsiElement(_)('_')
                PsiElement(])(']')
            PsiElement(])(']')
        PsiWhiteSpace('\n  ')
        GenericCall
          ReferenceExpression: test
            PsiElement(identifier)('test')
          TypeArgumentsList
            PsiElement([)('[')
            SimpleType: Any
              CodeReferenceElement: Any
                PsiElement(identifier)('Any')
            PsiElement(,)(',')
            PsiWhiteSpace(' ')
            ParametrizedType: Array[Int]
              SimpleType: Array
                CodeReferenceElement: Array
                  PsiElement(identifier)('Array')
              TypeArgumentsList
                PsiElement([)('[')
                SimpleType: Int
                  CodeReferenceElement: Int
                    PsiElement(identifier)('Int')
                PsiElement(])(']')
            PsiElement(])(']')
        PsiWhiteSpace('\n  ')
        GenericCall
          ReferenceExpression: test
            PsiElement(identifier)('test')
          TypeArgumentsList
            PsiElement([)('[')
            ParametrizedType: Seq[Int]
              SimpleType: Seq
                CodeReferenceElement: Seq
                  PsiElement(identifier)('Seq')
              TypeArgumentsList
                PsiElement([)('[')
                SimpleType: Int
                  CodeReferenceElement: Int
                    PsiElement(identifier)('Int')
                PsiElement(])(']')
            PsiElement(,)(',')
            PsiWhiteSpace(' ')
            ParametrizedType: List[Int]
              SimpleType: List
                CodeReferenceElement: List
                  PsiElement(identifier)('List')
              TypeArgumentsList
                PsiElement([)('[')
                SimpleType: Int
                  CodeReferenceElement: Int
                    PsiElement(identifier)('Int')
                PsiElement(])(']')
            PsiElement(])(']')
        PsiWhiteSpace('\n\n  ')
        GenericCall
          ReferenceExpression: test
            PsiElement(identifier)('test')
          TypeArgumentsList
            PsiElement([)('[')
            SimpleType: Any
              CodeReferenceElement: Any
                PsiElement(identifier)('Any')
            PsiElement(,)(',')
            PsiWhiteSpace(' ')
            ParametrizedType: Some[Int]
              SimpleType: Some
                CodeReferenceElement: Some
                  PsiElement(identifier)('Some')
              TypeArgumentsList
                PsiElement([)('[')
                SimpleType: Int
                  CodeReferenceElement: Int
                    PsiElement(identifier)('Int')
                PsiElement(])(']')
            PsiElement(])(']')
        PsiWhiteSpace(' ')
        PsiComment(comment)('// unchecked warning')
        PsiWhiteSpace('\n  ')
        GenericCall
          ReferenceExpression: test
            PsiElement(identifier)('test')
          TypeArgumentsList
            PsiElement([)('[')
            SimpleType: Any
              CodeReferenceElement: Any
                PsiElement(identifier)('Any')
            PsiElement(,)(',')
            PsiWhiteSpace(' ')
            SimpleType: a.X
              CodeReferenceElement: a.X
                CodeReferenceElement: a
                  PsiElement(identifier)('a')
                PsiElement(.)('.')
                PsiElement(identifier)('X')
            PsiElement(])(']')
        PsiWhiteSpace(' ')
        PsiComment(comment)('// unchecked warning')
        PsiWhiteSpace('\n  ')
        GenericCall
          ReferenceExpression: test
            PsiElement(identifier)('test')
          TypeArgumentsList
            PsiElement([)('[')
            SimpleType: a.X
              CodeReferenceElement: a.X
                CodeReferenceElement: a
                  PsiElement(identifier)('a')
                PsiElement(.)('.')
                PsiElement(identifier)('X')
            PsiElement(,)(',')
            PsiWhiteSpace(' ')
            SimpleType: a.Y
              CodeReferenceElement: a.Y
                CodeReferenceElement: a
                  PsiElement(identifier)('a')
                PsiElement(.)('.')
                PsiElement(identifier)('Y')
            PsiElement(])(']')
        PsiWhiteSpace(' ')
        PsiComment(comment)('// unchecked warning')
        PsiWhiteSpace('\n\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScClass: A
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('A')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScTypeAliasDeclaration: X
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('X')
        PsiWhiteSpace('\n  ')
        ScTypeAliasDeclaration: Y
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Y')
          PsiWhiteSpace(' ')
          PsiElement(<:)('<:')
          PsiWhiteSpace(' ')
          SimpleType: X
            CodeReferenceElement: X
              PsiElement(identifier)('X')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
