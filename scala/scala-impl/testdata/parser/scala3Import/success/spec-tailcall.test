class TailCall[@specialized T] {
  final def dropLeft(n: Int, xs: List[T]): List[T] =
    if (n == 0) xs
    else dropLeft(n - 1, xs.tail)
/*
  def filter(pf: PartialFunction[Option[String], Boolean]) = null

  def crash(o: Option[String]) = filter {
    case None if {
      def dropLeft[T](n: Int, xs: List[T]): List[T] =
        if (n == 0) xs
        else dropLeft(n - 1, xs.tail)
      dropLeft(2, List(1, 2, 3)).isEmpty
    } => true
  }
*/
}
-----
ScalaFile
  ScClass: TailCall
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('TailCall')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: T
        AnnotationsList
          Annotation
            PsiElement(@)('@')
            AnnotationExpression
              ConstructorInvocation
                SimpleType: specialized
                  CodeReferenceElement: specialized
                    PsiElement(identifier)('specialized')
        PsiWhiteSpace(' ')
        PsiElement(identifier)('T')
      PsiElement(])(']')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: dropLeft
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(final)('final')
          PsiWhiteSpace(' ')
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('dropLeft')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: n
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('n')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Int
                    CodeReferenceElement: Int
                      PsiElement(identifier)('Int')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              Parameter: xs
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('xs')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  ParametrizedType: List[T]
                    SimpleType: List
                      CodeReferenceElement: List
                        PsiElement(identifier)('List')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: T
                        CodeReferenceElement: T
                          PsiElement(identifier)('T')
                      PsiElement(])(']')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: List[T]
            SimpleType: List
              CodeReferenceElement: List
                PsiElement(identifier)('List')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: T
                CodeReferenceElement: T
                  PsiElement(identifier)('T')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace('\n    ')
          IfStatement
            PsiElement(if)('if')
            PsiWhiteSpace(' ')
            PsiElement(()('(')
            InfixExpression
              ReferenceExpression: n
                PsiElement(identifier)('n')
              PsiWhiteSpace(' ')
              ReferenceExpression: ==
                PsiElement(identifier)('==')
              PsiWhiteSpace(' ')
              IntegerLiteral
                PsiElement(integer)('0')
            PsiElement())(')')
            PsiWhiteSpace(' ')
            ReferenceExpression: xs
              PsiElement(identifier)('xs')
            PsiWhiteSpace('\n    ')
            PsiElement(else)('else')
            PsiWhiteSpace(' ')
            MethodCall
              ReferenceExpression: dropLeft
                PsiElement(identifier)('dropLeft')
              ArgumentList
                PsiElement(()('(')
                InfixExpression
                  ReferenceExpression: n
                    PsiElement(identifier)('n')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: -
                    PsiElement(identifier)('-')
                  PsiWhiteSpace(' ')
                  IntegerLiteral
                    PsiElement(integer)('1')
                PsiElement(,)(',')
                PsiWhiteSpace(' ')
                ReferenceExpression: xs.tail
                  ReferenceExpression: xs
                    PsiElement(identifier)('xs')
                  PsiElement(.)('.')
                  PsiElement(identifier)('tail')
                PsiElement())(')')
        PsiWhiteSpace('\n')
        PsiComment(BlockComment)('/*\n  def filter(pf: PartialFunction[Option[String], Boolean]) = null\n\n  def crash(o: Option[String]) = filter {\n    case None if {\n      def dropLeft[T](n: Int, xs: List[T]): List[T] =\n        if (n == 0) xs\n        else dropLeft(n - 1, xs.tail)\n      dropLeft(2, List(1, 2, 3)).isEmpty\n    } => true\n  }\n*/')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
