trait Tag { val data: Int }

enum EQ[A, B]:
  case Refl[C]() extends EQ[C, C]

def foo[T, B <: Tag](ev: EQ[T, B], x: T) = ev match
  case EQ.Refl() =>
    val i: Int = x.data

-----
ScalaFile
  ScTrait: Tag
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Tag')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace(' ')
        ScValueDeclaration: data
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfIdentifiers
            Field identifier: data
              PsiElement(identifier)('data')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Int
            CodeReferenceElement: Int
              PsiElement(identifier)('Int')
        PsiWhiteSpace(' ')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScEnum: EQ
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(enum)('enum')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('EQ')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: A
        PsiElement(identifier)('A')
      PsiElement(,)(',')
      PsiWhiteSpace(' ')
      TypeParameter: B
        PsiElement(identifier)('B')
      PsiElement(])(']')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    ExtendsBlock
      ScTemplateBody
        PsiElement(:)(':')
        PsiWhiteSpace('\n  ')
        ScEnumCases: Refl
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(case)('case')
          PsiWhiteSpace(' ')
          ScEnumClassCase: Refl
            PsiElement(identifier)('Refl')
            TypeParameterClause
              PsiElement([)('[')
              TypeParameter: C
                PsiElement(identifier)('C')
              PsiElement(])(']')
            PrimaryConstructor
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              Parameters
                ParametersClause
                  PsiElement(()('(')
                  PsiElement())(')')
            PsiWhiteSpace(' ')
            ExtendsBlock
              PsiElement(extends)('extends')
              PsiWhiteSpace(' ')
              TemplateParents
                ConstructorInvocation
                  ParametrizedType: EQ[C, C]
                    SimpleType: EQ
                      CodeReferenceElement: EQ
                        PsiElement(identifier)('EQ')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: C
                        CodeReferenceElement: C
                          PsiElement(identifier)('C')
                      PsiElement(,)(',')
                      PsiWhiteSpace(' ')
                      SimpleType: C
                        CodeReferenceElement: C
                          PsiElement(identifier)('C')
                      PsiElement(])(']')
  PsiWhiteSpace('\n\n')
  ScFunctionDefinition: foo
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(def)('def')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('foo')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: T
        PsiElement(identifier)('T')
      PsiElement(,)(',')
      PsiWhiteSpace(' ')
      TypeParameter: B
        PsiElement(identifier)('B')
        PsiWhiteSpace(' ')
        PsiElement(<:)('<:')
        PsiWhiteSpace(' ')
        SimpleType: Tag
          CodeReferenceElement: Tag
            PsiElement(identifier)('Tag')
      PsiElement(])(']')
    Parameters
      ParametersClause
        PsiElement(()('(')
        Parameter: ev
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(identifier)('ev')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParameterType
            ParametrizedType: EQ[T, B]
              SimpleType: EQ
                CodeReferenceElement: EQ
                  PsiElement(identifier)('EQ')
              TypeArgumentsList
                PsiElement([)('[')
                SimpleType: T
                  CodeReferenceElement: T
                    PsiElement(identifier)('T')
                PsiElement(,)(',')
                PsiWhiteSpace(' ')
                SimpleType: B
                  CodeReferenceElement: B
                    PsiElement(identifier)('B')
                PsiElement(])(']')
        PsiElement(,)(',')
        PsiWhiteSpace(' ')
        Parameter: x
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(identifier)('x')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParameterType
            SimpleType: T
              CodeReferenceElement: T
                PsiElement(identifier)('T')
        PsiElement())(')')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    MatchStatement
      ReferenceExpression: ev
        PsiElement(identifier)('ev')
      PsiWhiteSpace(' ')
      PsiElement(match)('match')
      PsiWhiteSpace('\n  ')
      CaseClauses
        CaseClause
          PsiElement(case)('case')
          PsiWhiteSpace(' ')
          ConstructorPattern
            CodeReferenceElement: EQ.Refl
              CodeReferenceElement: EQ
                PsiElement(identifier)('EQ')
              PsiElement(.)('.')
              PsiElement(identifier)('Refl')
            Pattern Argument List
              PsiElement(()('(')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(=>)('=>')
          PsiWhiteSpace('\n    ')
          BlockOfExpressions
            ScPatternDefinition: i
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              ListOfPatterns
                ReferencePattern: i
                  PsiElement(identifier)('i')
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              SimpleType: Int
                CodeReferenceElement: Int
                  PsiElement(identifier)('Int')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              ReferenceExpression: x.data
                ReferenceExpression: x
                  PsiElement(identifier)('x')
                PsiElement(.)('.')
                PsiElement(identifier)('data')
