object Test {
  def test: Unit = {
    val e: Enum[_] = java.util.concurrent.TimeUnit.SECONDS
    e match { case x => println(x) }


    trait TA[X <: CharSequence]
    val ta: TA[_] = new TA[String] {}

    ta match {
      case _ => println("hi")
    }

    def f(ta: TA[_]) = ta match { case _ => "hi" }
  }
}
-----
ScalaFile
  ScObject: Test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: test
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('test')
          Parameters
            <empty list>
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Unit
            CodeReferenceElement: Unit
              PsiElement(identifier)('Unit')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          BlockExpression
            PsiElement({)('{')
            PsiWhiteSpace('\n    ')
            ScPatternDefinition: e
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              ListOfPatterns
                ReferencePattern: e
                  PsiElement(identifier)('e')
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              ParametrizedType: Enum[_]
                SimpleType: Enum
                  CodeReferenceElement: Enum
                    PsiElement(identifier)('Enum')
                TypeArgumentsList
                  PsiElement([)('[')
                  WildcardType: _
                    PsiElement(_)('_')
                  PsiElement(])(']')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              ReferenceExpression: java.util.concurrent.TimeUnit.SECONDS
                ReferenceExpression: java.util.concurrent.TimeUnit
                  ReferenceExpression: java.util.concurrent
                    ReferenceExpression: java.util
                      ReferenceExpression: java
                        PsiElement(identifier)('java')
                      PsiElement(.)('.')
                      PsiElement(identifier)('util')
                    PsiElement(.)('.')
                    PsiElement(identifier)('concurrent')
                  PsiElement(.)('.')
                  PsiElement(identifier)('TimeUnit')
                PsiElement(.)('.')
                PsiElement(identifier)('SECONDS')
            PsiWhiteSpace('\n    ')
            MatchStatement
              ReferenceExpression: e
                PsiElement(identifier)('e')
              PsiWhiteSpace(' ')
              PsiElement(match)('match')
              PsiWhiteSpace(' ')
              PsiElement({)('{')
              PsiWhiteSpace(' ')
              CaseClauses
                CaseClause
                  PsiElement(case)('case')
                  PsiWhiteSpace(' ')
                  ReferencePattern: x
                    PsiElement(identifier)('x')
                  PsiWhiteSpace(' ')
                  PsiElement(=>)('=>')
                  PsiWhiteSpace(' ')
                  BlockOfExpressions
                    MethodCall
                      ReferenceExpression: println
                        PsiElement(identifier)('println')
                      ArgumentList
                        PsiElement(()('(')
                        ReferenceExpression: x
                          PsiElement(identifier)('x')
                        PsiElement())(')')
              PsiWhiteSpace(' ')
              PsiElement(})('}')
            PsiWhiteSpace('\n\n\n    ')
            ScTrait: TA
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(trait)('trait')
              PsiWhiteSpace(' ')
              PsiElement(identifier)('TA')
              TypeParameterClause
                PsiElement([)('[')
                TypeParameter: X
                  PsiElement(identifier)('X')
                  PsiWhiteSpace(' ')
                  PsiElement(<:)('<:')
                  PsiWhiteSpace(' ')
                  SimpleType: CharSequence
                    CodeReferenceElement: CharSequence
                      PsiElement(identifier)('CharSequence')
                PsiElement(])(']')
              ExtendsBlock
                <empty list>
            PsiWhiteSpace('\n    ')
            ScPatternDefinition: ta
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              ListOfPatterns
                ReferencePattern: ta
                  PsiElement(identifier)('ta')
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              ParametrizedType: TA[_]
                SimpleType: TA
                  CodeReferenceElement: TA
                    PsiElement(identifier)('TA')
                TypeArgumentsList
                  PsiElement([)('[')
                  WildcardType: _
                    PsiElement(_)('_')
                  PsiElement(])(']')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              ScNewTemplateDefinition: <anonymous>
                PsiElement(new)('new')
                PsiWhiteSpace(' ')
                ExtendsBlock
                  TemplateParents
                    ConstructorInvocation
                      ParametrizedType: TA[String]
                        SimpleType: TA
                          CodeReferenceElement: TA
                            PsiElement(identifier)('TA')
                        TypeArgumentsList
                          PsiElement([)('[')
                          SimpleType: String
                            CodeReferenceElement: String
                              PsiElement(identifier)('String')
                          PsiElement(])(']')
                  PsiWhiteSpace(' ')
                  ScTemplateBody
                    PsiElement({)('{')
                    PsiElement(})('}')
            PsiWhiteSpace('\n\n    ')
            MatchStatement
              ReferenceExpression: ta
                PsiElement(identifier)('ta')
              PsiWhiteSpace(' ')
              PsiElement(match)('match')
              PsiWhiteSpace(' ')
              PsiElement({)('{')
              PsiWhiteSpace('\n      ')
              CaseClauses
                CaseClause
                  PsiElement(case)('case')
                  PsiWhiteSpace(' ')
                  WildcardPattern
                    PsiElement(_)('_')
                  PsiWhiteSpace(' ')
                  PsiElement(=>)('=>')
                  PsiWhiteSpace(' ')
                  BlockOfExpressions
                    MethodCall
                      ReferenceExpression: println
                        PsiElement(identifier)('println')
                      ArgumentList
                        PsiElement(()('(')
                        StringLiteral
                          PsiElement(string content)('"hi"')
                        PsiElement())(')')
              PsiWhiteSpace('\n    ')
              PsiElement(})('}')
            PsiWhiteSpace('\n\n    ')
            ScFunctionDefinition: f
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(def)('def')
              PsiWhiteSpace(' ')
              PsiElement(identifier)('f')
              Parameters
                ParametersClause
                  PsiElement(()('(')
                  Parameter: ta
                    AnnotationsList
                      <empty list>
                    Modifiers
                      <empty list>
                    PsiElement(identifier)('ta')
                    PsiElement(:)(':')
                    PsiWhiteSpace(' ')
                    ParameterType
                      ParametrizedType: TA[_]
                        SimpleType: TA
                          CodeReferenceElement: TA
                            PsiElement(identifier)('TA')
                        TypeArgumentsList
                          PsiElement([)('[')
                          WildcardType: _
                            PsiElement(_)('_')
                          PsiElement(])(']')
                  PsiElement())(')')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              MatchStatement
                ReferenceExpression: ta
                  PsiElement(identifier)('ta')
                PsiWhiteSpace(' ')
                PsiElement(match)('match')
                PsiWhiteSpace(' ')
                PsiElement({)('{')
                PsiWhiteSpace(' ')
                CaseClauses
                  CaseClause
                    PsiElement(case)('case')
                    PsiWhiteSpace(' ')
                    WildcardPattern
                      PsiElement(_)('_')
                    PsiWhiteSpace(' ')
                    PsiElement(=>)('=>')
                    PsiWhiteSpace(' ')
                    BlockOfExpressions
                      StringLiteral
                        PsiElement(string content)('"hi"')
                PsiWhiteSpace(' ')
                PsiElement(})('}')
            PsiWhiteSpace('\n  ')
            PsiElement(})('}')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
