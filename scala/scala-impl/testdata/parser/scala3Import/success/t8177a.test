// exercise coevolveSym
trait Thing { type A; var p: A = _ }
class AA[T](final val x: Thing { type A = T }) {
  def foo: x.A = ???
}

class B extends AA[Int](null) {
  override def foo: B.this.x.A = super.foo
}
-----
ScalaFile
  ScTrait: Thing
    PsiComment(comment)('// exercise coevolveSym')
    PsiWhiteSpace('\n')
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Thing')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace(' ')
        ScTypeAliasDeclaration: A
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('A')
        PsiElement(;)(';')
        PsiWhiteSpace(' ')
        ScVariableDefinition: p
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(var)('var')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: p
              PsiElement(identifier)('p')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: A
            CodeReferenceElement: A
              PsiElement(identifier)('A')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          UnderscoreSection
            PsiElement(_)('_')
        PsiWhiteSpace(' ')
        PsiElement(})('}')
  PsiWhiteSpace('\n')
  ScClass: AA
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('AA')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: T
        PsiElement(identifier)('T')
      PsiElement(])(']')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        ParametersClause
          PsiElement(()('(')
          ClassParameter: x
            AnnotationsList
              <empty list>
            Modifiers
              PsiElement(final)('final')
            PsiWhiteSpace(' ')
            PsiElement(val)('val')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('x')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            ParameterType
              CompoundType: Thing { type A = T }
                SimpleType: Thing
                  CodeReferenceElement: Thing
                    PsiElement(identifier)('Thing')
                PsiWhiteSpace(' ')
                Refinement
                  PsiElement({)('{')
                  PsiWhiteSpace(' ')
                  ScTypeAliasDefinition: A
                    AnnotationsList
                      <empty list>
                    Modifiers
                      <empty list>
                    PsiElement(type)('type')
                    PsiWhiteSpace(' ')
                    PsiElement(identifier)('A')
                    PsiWhiteSpace(' ')
                    PsiElement(=)('=')
                    PsiWhiteSpace(' ')
                    SimpleType: T
                      CodeReferenceElement: T
                        PsiElement(identifier)('T')
                  PsiWhiteSpace(' ')
                  PsiElement(})('}')
          PsiElement())(')')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: foo
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('foo')
          Parameters
            <empty list>
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: x.A
            CodeReferenceElement: x.A
              CodeReferenceElement: x
                PsiElement(identifier)('x')
              PsiElement(.)('.')
              PsiElement(identifier)('A')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: ???
            PsiElement(identifier)('???')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScClass: B
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('B')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          ParametrizedType: AA[Int]
            SimpleType: AA
              CodeReferenceElement: AA
                PsiElement(identifier)('AA')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: Int
                CodeReferenceElement: Int
                  PsiElement(identifier)('Int')
              PsiElement(])(']')
          ArgumentList
            PsiElement(()('(')
            NullLiteral
              PsiElement(null)('null')
            PsiElement())(')')
      PsiWhiteSpace(' ')
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: foo
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(override)('override')
          PsiWhiteSpace(' ')
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('foo')
          Parameters
            <empty list>
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: B.this.x.A
            CodeReferenceElement: B.this.x.A
              CodeReferenceElement: B.this.x
                ThisReference
                  CodeReferenceElement: B
                    PsiElement(identifier)('B')
                  PsiElement(.)('.')
                  PsiElement(this)('this')
                PsiElement(.)('.')
                PsiElement(identifier)('x')
              PsiElement(.)('.')
              PsiElement(identifier)('A')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: super.foo
            SuperReference
              PsiElement(super)('super')
            PsiElement(.)('.')
            PsiElement(identifier)('foo')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
