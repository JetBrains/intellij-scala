class Rational

import scala.quoted.*

class TC

object meta:
  object rationalTE:
    def unapply(using Quotes)(tr: quotes.reflect.TypeRepr): Option[Rational] = ???

  object rationalTC:
    def unapply(using Quotes)(using TC)(tr: quotes.reflect.TypeRepr): Option[Rational] = ???

  def foo(using Quotes)(p: quotes.reflect.TypeRepr): Unit =
    val rationalTE(e) = p  // warn: pattern binding uses refutable extractor `meta.rationalTE`

  def bar(using Quotes)(using TC)(p: quotes.reflect.TypeRepr): Unit =
    val rationalTC(c) = p  // warn: pattern binding uses refutable extractor `meta.rationalTC`
-----
ScalaFile
  ScClass: Rational
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Rational')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    ExtendsBlock
      <empty list>
  PsiWhiteSpace('\n\n')
  ScImportStatement
    PsiElement(import)('import')
    PsiWhiteSpace(' ')
    ImportExpression
      CodeReferenceElement: scala.quoted
        CodeReferenceElement: scala
          PsiElement(identifier)('scala')
        PsiElement(.)('.')
        PsiElement(identifier)('quoted')
      PsiElement(.)('.')
      PsiElement(*)('*')
  PsiWhiteSpace('\n\n')
  ScClass: TC
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('TC')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    ExtendsBlock
      <empty list>
  PsiWhiteSpace('\n\n')
  ScObject: meta
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('meta')
    ExtendsBlock
      ScTemplateBody
        PsiElement(:)(':')
        PsiWhiteSpace('\n  ')
        ScObject: rationalTE
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(object)('object')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('rationalTE')
          ExtendsBlock
            ScTemplateBody
              PsiElement(:)(':')
              PsiWhiteSpace('\n    ')
              ScFunctionDefinition: unapply
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(def)('def')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('unapply')
                Parameters
                  ParametersClause
                    PsiElement(()('(')
                    PsiElement(using)('using')
                    PsiWhiteSpace(' ')
                    Parameter: <anonymous>
                      ParameterType
                        SimpleType: Quotes
                          CodeReferenceElement: Quotes
                            PsiElement(identifier)('Quotes')
                    PsiElement())(')')
                  ParametersClause
                    PsiElement(()('(')
                    Parameter: tr
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(identifier)('tr')
                      PsiElement(:)(':')
                      PsiWhiteSpace(' ')
                      ParameterType
                        SimpleType: quotes.reflect.TypeRepr
                          CodeReferenceElement: quotes.reflect.TypeRepr
                            CodeReferenceElement: quotes.reflect
                              CodeReferenceElement: quotes
                                PsiElement(identifier)('quotes')
                              PsiElement(.)('.')
                              PsiElement(identifier)('reflect')
                            PsiElement(.)('.')
                            PsiElement(identifier)('TypeRepr')
                    PsiElement())(')')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParametrizedType: Option[Rational]
                  SimpleType: Option
                    CodeReferenceElement: Option
                      PsiElement(identifier)('Option')
                  TypeArgumentsList
                    PsiElement([)('[')
                    SimpleType: Rational
                      CodeReferenceElement: Rational
                        PsiElement(identifier)('Rational')
                    PsiElement(])(']')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                ReferenceExpression: ???
                  PsiElement(identifier)('???')
        PsiWhiteSpace('\n\n  ')
        ScObject: rationalTC
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(object)('object')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('rationalTC')
          ExtendsBlock
            ScTemplateBody
              PsiElement(:)(':')
              PsiWhiteSpace('\n    ')
              ScFunctionDefinition: unapply
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(def)('def')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('unapply')
                Parameters
                  ParametersClause
                    PsiElement(()('(')
                    PsiElement(using)('using')
                    PsiWhiteSpace(' ')
                    Parameter: <anonymous>
                      ParameterType
                        SimpleType: Quotes
                          CodeReferenceElement: Quotes
                            PsiElement(identifier)('Quotes')
                    PsiElement())(')')
                  ParametersClause
                    PsiElement(()('(')
                    PsiElement(using)('using')
                    PsiWhiteSpace(' ')
                    Parameter: <anonymous>
                      ParameterType
                        SimpleType: TC
                          CodeReferenceElement: TC
                            PsiElement(identifier)('TC')
                    PsiElement())(')')
                  ParametersClause
                    PsiElement(()('(')
                    Parameter: tr
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(identifier)('tr')
                      PsiElement(:)(':')
                      PsiWhiteSpace(' ')
                      ParameterType
                        SimpleType: quotes.reflect.TypeRepr
                          CodeReferenceElement: quotes.reflect.TypeRepr
                            CodeReferenceElement: quotes.reflect
                              CodeReferenceElement: quotes
                                PsiElement(identifier)('quotes')
                              PsiElement(.)('.')
                              PsiElement(identifier)('reflect')
                            PsiElement(.)('.')
                            PsiElement(identifier)('TypeRepr')
                    PsiElement())(')')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParametrizedType: Option[Rational]
                  SimpleType: Option
                    CodeReferenceElement: Option
                      PsiElement(identifier)('Option')
                  TypeArgumentsList
                    PsiElement([)('[')
                    SimpleType: Rational
                      CodeReferenceElement: Rational
                        PsiElement(identifier)('Rational')
                    PsiElement(])(']')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                ReferenceExpression: ???
                  PsiElement(identifier)('???')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: foo
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('foo')
          Parameters
            ParametersClause
              PsiElement(()('(')
              PsiElement(using)('using')
              PsiWhiteSpace(' ')
              Parameter: <anonymous>
                ParameterType
                  SimpleType: Quotes
                    CodeReferenceElement: Quotes
                      PsiElement(identifier)('Quotes')
              PsiElement())(')')
            ParametersClause
              PsiElement(()('(')
              Parameter: p
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('p')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: quotes.reflect.TypeRepr
                    CodeReferenceElement: quotes.reflect.TypeRepr
                      CodeReferenceElement: quotes.reflect
                        CodeReferenceElement: quotes
                          PsiElement(identifier)('quotes')
                        PsiElement(.)('.')
                        PsiElement(identifier)('reflect')
                      PsiElement(.)('.')
                      PsiElement(identifier)('TypeRepr')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Unit
            CodeReferenceElement: Unit
              PsiElement(identifier)('Unit')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          BlockExpression
            PsiWhiteSpace('\n    ')
            ScPatternDefinition: e
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              ListOfPatterns
                ConstructorPattern
                  CodeReferenceElement: rationalTE
                    PsiElement(identifier)('rationalTE')
                  Pattern Argument List
                    PsiElement(()('(')
                    ReferencePattern: e
                      PsiElement(identifier)('e')
                    PsiElement())(')')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              ReferenceExpression: p
                PsiElement(identifier)('p')
        PsiWhiteSpace('  ')
        PsiComment(comment)('// warn: pattern binding uses refutable extractor `meta.rationalTE`')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: bar
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('bar')
          Parameters
            ParametersClause
              PsiElement(()('(')
              PsiElement(using)('using')
              PsiWhiteSpace(' ')
              Parameter: <anonymous>
                ParameterType
                  SimpleType: Quotes
                    CodeReferenceElement: Quotes
                      PsiElement(identifier)('Quotes')
              PsiElement())(')')
            ParametersClause
              PsiElement(()('(')
              PsiElement(using)('using')
              PsiWhiteSpace(' ')
              Parameter: <anonymous>
                ParameterType
                  SimpleType: TC
                    CodeReferenceElement: TC
                      PsiElement(identifier)('TC')
              PsiElement())(')')
            ParametersClause
              PsiElement(()('(')
              Parameter: p
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('p')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: quotes.reflect.TypeRepr
                    CodeReferenceElement: quotes.reflect.TypeRepr
                      CodeReferenceElement: quotes.reflect
                        CodeReferenceElement: quotes
                          PsiElement(identifier)('quotes')
                        PsiElement(.)('.')
                        PsiElement(identifier)('reflect')
                      PsiElement(.)('.')
                      PsiElement(identifier)('TypeRepr')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Unit
            CodeReferenceElement: Unit
              PsiElement(identifier)('Unit')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          BlockExpression
            PsiWhiteSpace('\n    ')
            ScPatternDefinition: c
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              ListOfPatterns
                ConstructorPattern
                  CodeReferenceElement: rationalTC
                    PsiElement(identifier)('rationalTC')
                  Pattern Argument List
                    PsiElement(()('(')
                    ReferencePattern: c
                      PsiElement(identifier)('c')
                    PsiElement())(')')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              ReferenceExpression: p
                PsiElement(identifier)('p')
  PsiWhiteSpace('  ')
  PsiComment(comment)('// warn: pattern binding uses refutable extractor `meta.rationalTC`')
