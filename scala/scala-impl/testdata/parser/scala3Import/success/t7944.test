class M[+A, +B]

object Test {
  implicit class EitherOps[A, B](self: Either[A, B]) {
    def disjunction: M[A, B] = null
  }

  def foo = {
    val l: Either[Int, Nothing] = Left[Int, Nothing](1)

    var ok = EitherOps(l).disjunction

    val runawayTypeVar = l.disjunction

    // reported bug:
    // found   : M[Int,B]; required: M[Int,Nothing]
    val assign: M[Int, Nothing] = runawayTypeVar

    // variations on the theme, all failed before similarly.
    val assign1: M[Int, Nothing] = {val temp = runawayTypeVar; temp}
    val assign2: M[Int, String] = runawayTypeVar
    val assign3: M[Int, Nothing] = {val temp = Left(1).disjunction; temp}
  }
}
-----
ScalaFile
  ScClass: M
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('M')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: A
        PsiElement(identifier)('+')
        PsiElement(identifier)('A')
      PsiElement(,)(',')
      PsiWhiteSpace(' ')
      TypeParameter: B
        PsiElement(identifier)('+')
        PsiElement(identifier)('B')
      PsiElement(])(']')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    ExtendsBlock
      <empty list>
  PsiWhiteSpace('\n\n')
  ScObject: Test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScClass: EitherOps
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(implicit)('implicit')
          PsiWhiteSpace(' ')
          PsiElement(class)('class')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('EitherOps')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: A
              PsiElement(identifier)('A')
            PsiElement(,)(',')
            PsiWhiteSpace(' ')
            TypeParameter: B
              PsiElement(identifier)('B')
            PsiElement(])(']')
          PrimaryConstructor
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            Parameters
              ParametersClause
                PsiElement(()('(')
                ClassParameter: self
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(identifier)('self')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    ParametrizedType: Either[A, B]
                      SimpleType: Either
                        CodeReferenceElement: Either
                          PsiElement(identifier)('Either')
                      TypeArgumentsList
                        PsiElement([)('[')
                        SimpleType: A
                          CodeReferenceElement: A
                            PsiElement(identifier)('A')
                        PsiElement(,)(',')
                        PsiWhiteSpace(' ')
                        SimpleType: B
                          CodeReferenceElement: B
                            PsiElement(identifier)('B')
                        PsiElement(])(']')
                PsiElement())(')')
          PsiWhiteSpace(' ')
          ExtendsBlock
            ScTemplateBody
              PsiElement({)('{')
              PsiWhiteSpace('\n    ')
              ScFunctionDefinition: disjunction
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(def)('def')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('disjunction')
                Parameters
                  <empty list>
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParametrizedType: M[A, B]
                  SimpleType: M
                    CodeReferenceElement: M
                      PsiElement(identifier)('M')
                  TypeArgumentsList
                    PsiElement([)('[')
                    SimpleType: A
                      CodeReferenceElement: A
                        PsiElement(identifier)('A')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    SimpleType: B
                      CodeReferenceElement: B
                        PsiElement(identifier)('B')
                    PsiElement(])(']')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                NullLiteral
                  PsiElement(null)('null')
              PsiWhiteSpace('\n  ')
              PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: foo
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('foo')
          Parameters
            <empty list>
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          BlockExpression
            PsiElement({)('{')
            PsiWhiteSpace('\n    ')
            ScPatternDefinition: l
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              ListOfPatterns
                ReferencePattern: l
                  PsiElement(identifier)('l')
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              ParametrizedType: Either[Int, Nothing]
                SimpleType: Either
                  CodeReferenceElement: Either
                    PsiElement(identifier)('Either')
                TypeArgumentsList
                  PsiElement([)('[')
                  SimpleType: Int
                    CodeReferenceElement: Int
                      PsiElement(identifier)('Int')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  SimpleType: Nothing
                    CodeReferenceElement: Nothing
                      PsiElement(identifier)('Nothing')
                  PsiElement(])(']')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              MethodCall
                GenericCall
                  ReferenceExpression: Left
                    PsiElement(identifier)('Left')
                  TypeArgumentsList
                    PsiElement([)('[')
                    SimpleType: Int
                      CodeReferenceElement: Int
                        PsiElement(identifier)('Int')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    SimpleType: Nothing
                      CodeReferenceElement: Nothing
                        PsiElement(identifier)('Nothing')
                    PsiElement(])(']')
                ArgumentList
                  PsiElement(()('(')
                  IntegerLiteral
                    PsiElement(integer)('1')
                  PsiElement())(')')
            PsiWhiteSpace('\n\n    ')
            ScVariableDefinition: ok
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(var)('var')
              PsiWhiteSpace(' ')
              ListOfPatterns
                ReferencePattern: ok
                  PsiElement(identifier)('ok')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              ReferenceExpression: EitherOps(l).disjunction
                MethodCall
                  ReferenceExpression: EitherOps
                    PsiElement(identifier)('EitherOps')
                  ArgumentList
                    PsiElement(()('(')
                    ReferenceExpression: l
                      PsiElement(identifier)('l')
                    PsiElement())(')')
                PsiElement(.)('.')
                PsiElement(identifier)('disjunction')
            PsiWhiteSpace('\n\n    ')
            ScPatternDefinition: runawayTypeVar
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              ListOfPatterns
                ReferencePattern: runawayTypeVar
                  PsiElement(identifier)('runawayTypeVar')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              ReferenceExpression: l.disjunction
                ReferenceExpression: l
                  PsiElement(identifier)('l')
                PsiElement(.)('.')
                PsiElement(identifier)('disjunction')
            PsiWhiteSpace('\n\n    ')
            ScPatternDefinition: assign
              PsiComment(comment)('// reported bug:')
              PsiWhiteSpace('\n    ')
              PsiComment(comment)('// found   : M[Int,B]; required: M[Int,Nothing]')
              PsiWhiteSpace('\n    ')
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              ListOfPatterns
                ReferencePattern: assign
                  PsiElement(identifier)('assign')
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              ParametrizedType: M[Int, Nothing]
                SimpleType: M
                  CodeReferenceElement: M
                    PsiElement(identifier)('M')
                TypeArgumentsList
                  PsiElement([)('[')
                  SimpleType: Int
                    CodeReferenceElement: Int
                      PsiElement(identifier)('Int')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  SimpleType: Nothing
                    CodeReferenceElement: Nothing
                      PsiElement(identifier)('Nothing')
                  PsiElement(])(']')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              ReferenceExpression: runawayTypeVar
                PsiElement(identifier)('runawayTypeVar')
            PsiWhiteSpace('\n\n    ')
            ScPatternDefinition: assign1
              PsiComment(comment)('// variations on the theme, all failed before similarly.')
              PsiWhiteSpace('\n    ')
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              ListOfPatterns
                ReferencePattern: assign1
                  PsiElement(identifier)('assign1')
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              ParametrizedType: M[Int, Nothing]
                SimpleType: M
                  CodeReferenceElement: M
                    PsiElement(identifier)('M')
                TypeArgumentsList
                  PsiElement([)('[')
                  SimpleType: Int
                    CodeReferenceElement: Int
                      PsiElement(identifier)('Int')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  SimpleType: Nothing
                    CodeReferenceElement: Nothing
                      PsiElement(identifier)('Nothing')
                  PsiElement(])(']')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              BlockExpression
                PsiElement({)('{')
                ScPatternDefinition: temp
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(val)('val')
                  PsiWhiteSpace(' ')
                  ListOfPatterns
                    ReferencePattern: temp
                      PsiElement(identifier)('temp')
                  PsiWhiteSpace(' ')
                  PsiElement(=)('=')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: runawayTypeVar
                    PsiElement(identifier)('runawayTypeVar')
                PsiElement(;)(';')
                PsiWhiteSpace(' ')
                ReferenceExpression: temp
                  PsiElement(identifier)('temp')
                PsiElement(})('}')
            PsiWhiteSpace('\n    ')
            ScPatternDefinition: assign2
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              ListOfPatterns
                ReferencePattern: assign2
                  PsiElement(identifier)('assign2')
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              ParametrizedType: M[Int, String]
                SimpleType: M
                  CodeReferenceElement: M
                    PsiElement(identifier)('M')
                TypeArgumentsList
                  PsiElement([)('[')
                  SimpleType: Int
                    CodeReferenceElement: Int
                      PsiElement(identifier)('Int')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  SimpleType: String
                    CodeReferenceElement: String
                      PsiElement(identifier)('String')
                  PsiElement(])(']')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              ReferenceExpression: runawayTypeVar
                PsiElement(identifier)('runawayTypeVar')
            PsiWhiteSpace('\n    ')
            ScPatternDefinition: assign3
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              ListOfPatterns
                ReferencePattern: assign3
                  PsiElement(identifier)('assign3')
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              ParametrizedType: M[Int, Nothing]
                SimpleType: M
                  CodeReferenceElement: M
                    PsiElement(identifier)('M')
                TypeArgumentsList
                  PsiElement([)('[')
                  SimpleType: Int
                    CodeReferenceElement: Int
                      PsiElement(identifier)('Int')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  SimpleType: Nothing
                    CodeReferenceElement: Nothing
                      PsiElement(identifier)('Nothing')
                  PsiElement(])(']')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              BlockExpression
                PsiElement({)('{')
                ScPatternDefinition: temp
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(val)('val')
                  PsiWhiteSpace(' ')
                  ListOfPatterns
                    ReferencePattern: temp
                      PsiElement(identifier)('temp')
                  PsiWhiteSpace(' ')
                  PsiElement(=)('=')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: Left(1).disjunction
                    MethodCall
                      ReferenceExpression: Left
                        PsiElement(identifier)('Left')
                      ArgumentList
                        PsiElement(()('(')
                        IntegerLiteral
                          PsiElement(integer)('1')
                        PsiElement())(')')
                    PsiElement(.)('.')
                    PsiElement(identifier)('disjunction')
                PsiElement(;)(';')
                PsiWhiteSpace(' ')
                ReferenceExpression: temp
                  PsiElement(identifier)('temp')
                PsiElement(})('}')
            PsiWhiteSpace('\n  ')
            PsiElement(})('}')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
