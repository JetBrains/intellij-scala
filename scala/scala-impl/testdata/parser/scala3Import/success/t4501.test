// After lub modification
import scala.collection.mutable.ListBuffer

class A {
  def foo[T](a:T, b:T):T = a
  // f1 no longer compiles with 2.13 collections, it produces an invalid lub; added to run/invalid-lubs.scala
  // def f1 = foo(ListBuffer(), List())
  def f2 = foo(ListBuffer(), ListBuffer())
  def f3 = foo(List(), List())

  // scalap
  // def f1 : scala.collection.Seq[scala.Nothing] = { /* compiled code */ }
  // def f2 : scala.collection.mutable.ListBuffer[scala.Nothing] = { /* compiled code */ }
  // def f3 : scala.collection.immutable.List[scala.Nothing] = { /* compiled code */ }
}
-----
ScalaFile
  PsiComment(comment)('// After lub modification')
  PsiWhiteSpace('\n')
  ScImportStatement
    PsiElement(import)('import')
    PsiWhiteSpace(' ')
    ImportExpression
      CodeReferenceElement: scala.collection.mutable.ListBuffer
        CodeReferenceElement: scala.collection.mutable
          CodeReferenceElement: scala.collection
            CodeReferenceElement: scala
              PsiElement(identifier)('scala')
            PsiElement(.)('.')
            PsiElement(identifier)('collection')
          PsiElement(.)('.')
          PsiElement(identifier)('mutable')
        PsiElement(.)('.')
        PsiElement(identifier)('ListBuffer')
  PsiWhiteSpace('\n\n')
  ScClass: A
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('A')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: foo
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('foo')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: T
              PsiElement(identifier)('T')
            PsiElement(])(']')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: a
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('a')
                PsiElement(:)(':')
                ParameterType
                  SimpleType: T
                    CodeReferenceElement: T
                      PsiElement(identifier)('T')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              Parameter: b
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('b')
                PsiElement(:)(':')
                ParameterType
                  SimpleType: T
                    CodeReferenceElement: T
                      PsiElement(identifier)('T')
              PsiElement())(')')
          PsiElement(:)(':')
          SimpleType: T
            CodeReferenceElement: T
              PsiElement(identifier)('T')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: a
            PsiElement(identifier)('a')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: f2
          PsiComment(comment)('// f1 no longer compiles with 2.13 collections, it produces an invalid lub; added to run/invalid-lubs.scala')
          PsiWhiteSpace('\n  ')
          PsiComment(comment)('// def f1 = foo(ListBuffer(), List())')
          PsiWhiteSpace('\n  ')
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('f2')
          Parameters
            <empty list>
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: foo
              PsiElement(identifier)('foo')
            ArgumentList
              PsiElement(()('(')
              MethodCall
                ReferenceExpression: ListBuffer
                  PsiElement(identifier)('ListBuffer')
                ArgumentList
                  PsiElement(()('(')
                  PsiElement())(')')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              MethodCall
                ReferenceExpression: ListBuffer
                  PsiElement(identifier)('ListBuffer')
                ArgumentList
                  PsiElement(()('(')
                  PsiElement())(')')
              PsiElement())(')')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: f3
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('f3')
          Parameters
            <empty list>
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: foo
              PsiElement(identifier)('foo')
            ArgumentList
              PsiElement(()('(')
              MethodCall
                ReferenceExpression: List
                  PsiElement(identifier)('List')
                ArgumentList
                  PsiElement(()('(')
                  PsiElement())(')')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              MethodCall
                ReferenceExpression: List
                  PsiElement(identifier)('List')
                ArgumentList
                  PsiElement(()('(')
                  PsiElement())(')')
              PsiElement())(')')
        PsiWhiteSpace('\n\n  ')
        PsiComment(comment)('// scalap')
        PsiWhiteSpace('\n  ')
        PsiComment(comment)('// def f1 : scala.collection.Seq[scala.Nothing] = { /* compiled code */ }')
        PsiWhiteSpace('\n  ')
        PsiComment(comment)('// def f2 : scala.collection.mutable.ListBuffer[scala.Nothing] = { /* compiled code */ }')
        PsiWhiteSpace('\n  ')
        PsiComment(comment)('// def f3 : scala.collection.immutable.List[scala.Nothing] = { /* compiled code */ }')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
