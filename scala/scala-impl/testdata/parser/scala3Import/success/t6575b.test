// inferred types were okay here as Function nodes aren't
// translated into anoymous subclasses of AbstractFunctionN
// until after the typer.
//
// So this test is just confirmation.
trait X { def foo: Function1[Int, Int] }

trait Y extends X {
  abstract override def foo = { case i => super.foo(i) * 2 }
}
trait Z extends X {
  abstract override def foo = { case i => super.foo(i) + 3 }
}

trait Comb extends Y with Z {
  abstract override def foo: Function1[Int, Int] = { case i => super.foo(i) - 2 }
}
-----
ScalaFile
  ScTrait: X
    PsiComment(comment)('// inferred types were okay here as Function nodes aren't')
    PsiWhiteSpace('\n')
    PsiComment(comment)('// translated into anoymous subclasses of AbstractFunctionN')
    PsiWhiteSpace('\n')
    PsiComment(comment)('// until after the typer.')
    PsiWhiteSpace('\n')
    PsiComment(comment)('//')
    PsiWhiteSpace('\n')
    PsiComment(comment)('// So this test is just confirmation.')
    PsiWhiteSpace('\n')
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('X')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace(' ')
        ScFunctionDeclaration: foo
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('foo')
          Parameters
            <empty list>
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: Function1[Int, Int]
            SimpleType: Function1
              CodeReferenceElement: Function1
                PsiElement(identifier)('Function1')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: Int
                CodeReferenceElement: Int
                  PsiElement(identifier)('Int')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              SimpleType: Int
                CodeReferenceElement: Int
                  PsiElement(identifier)('Int')
              PsiElement(])(']')
        PsiWhiteSpace(' ')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScTrait: Y
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Y')
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          SimpleType: X
            CodeReferenceElement: X
              PsiElement(identifier)('X')
      PsiWhiteSpace(' ')
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: foo
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(abstract)('abstract')
            PsiWhiteSpace(' ')
            PsiElement(override)('override')
          PsiWhiteSpace(' ')
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('foo')
          Parameters
            <empty list>
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          BlockExpression
            PsiElement({)('{')
            PsiWhiteSpace(' ')
            CaseClauses
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                ReferencePattern: i
                  PsiElement(identifier)('i')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                BlockOfExpressions
                  InfixExpression
                    MethodCall
                      ReferenceExpression: super.foo
                        SuperReference
                          PsiElement(super)('super')
                        PsiElement(.)('.')
                        PsiElement(identifier)('foo')
                      ArgumentList
                        PsiElement(()('(')
                        ReferenceExpression: i
                          PsiElement(identifier)('i')
                        PsiElement())(')')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: *
                      PsiElement(identifier)('*')
                    PsiWhiteSpace(' ')
                    IntegerLiteral
                      PsiElement(integer)('2')
            PsiWhiteSpace(' ')
            PsiElement(})('}')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n')
  ScTrait: Z
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Z')
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          SimpleType: X
            CodeReferenceElement: X
              PsiElement(identifier)('X')
      PsiWhiteSpace(' ')
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: foo
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(abstract)('abstract')
            PsiWhiteSpace(' ')
            PsiElement(override)('override')
          PsiWhiteSpace(' ')
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('foo')
          Parameters
            <empty list>
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          BlockExpression
            PsiElement({)('{')
            PsiWhiteSpace(' ')
            CaseClauses
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                ReferencePattern: i
                  PsiElement(identifier)('i')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                BlockOfExpressions
                  InfixExpression
                    MethodCall
                      ReferenceExpression: super.foo
                        SuperReference
                          PsiElement(super)('super')
                        PsiElement(.)('.')
                        PsiElement(identifier)('foo')
                      ArgumentList
                        PsiElement(()('(')
                        ReferenceExpression: i
                          PsiElement(identifier)('i')
                        PsiElement())(')')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: +
                      PsiElement(identifier)('+')
                    PsiWhiteSpace(' ')
                    IntegerLiteral
                      PsiElement(integer)('3')
            PsiWhiteSpace(' ')
            PsiElement(})('}')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScTrait: Comb
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Comb')
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          SimpleType: Y
            CodeReferenceElement: Y
              PsiElement(identifier)('Y')
        PsiWhiteSpace(' ')
        PsiElement(with)('with')
        PsiWhiteSpace(' ')
        ConstructorInvocation
          SimpleType: Z
            CodeReferenceElement: Z
              PsiElement(identifier)('Z')
      PsiWhiteSpace(' ')
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: foo
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(abstract)('abstract')
            PsiWhiteSpace(' ')
            PsiElement(override)('override')
          PsiWhiteSpace(' ')
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('foo')
          Parameters
            <empty list>
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: Function1[Int, Int]
            SimpleType: Function1
              CodeReferenceElement: Function1
                PsiElement(identifier)('Function1')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: Int
                CodeReferenceElement: Int
                  PsiElement(identifier)('Int')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              SimpleType: Int
                CodeReferenceElement: Int
                  PsiElement(identifier)('Int')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          BlockExpression
            PsiElement({)('{')
            PsiWhiteSpace(' ')
            CaseClauses
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                ReferencePattern: i
                  PsiElement(identifier)('i')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                BlockOfExpressions
                  InfixExpression
                    MethodCall
                      ReferenceExpression: super.foo
                        SuperReference
                          PsiElement(super)('super')
                        PsiElement(.)('.')
                        PsiElement(identifier)('foo')
                      ArgumentList
                        PsiElement(()('(')
                        ReferenceExpression: i
                          PsiElement(identifier)('i')
                        PsiElement())(')')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: -
                      PsiElement(identifier)('-')
                    PsiWhiteSpace(' ')
                    IntegerLiteral
                      PsiElement(integer)('2')
            PsiWhiteSpace(' ')
            PsiElement(})('}')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
