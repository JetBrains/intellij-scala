package foo {
  package object foo {
    case class X(z: Int) { }
  }
}
-----
ScalaFile
  ScPackaging
    PsiElement(package)('package')
    PsiWhiteSpace(' ')
    CodeReferenceElement: foo
      PsiElement(identifier)('foo')
    PsiWhiteSpace(' ')
    PsiElement({)('{')
    PsiWhiteSpace('\n  ')
    ScObject: foo
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      PsiElement(package)('package')
      PsiWhiteSpace(' ')
      PsiElement(object)('object')
      PsiWhiteSpace(' ')
      PsiElement(identifier)('foo')
      PsiWhiteSpace(' ')
      ExtendsBlock
        ScTemplateBody
          PsiElement({)('{')
          PsiWhiteSpace('\n    ')
          ScClass: X
            AnnotationsList
              <empty list>
            Modifiers
              PsiElement(case)('case')
            PsiWhiteSpace(' ')
            PsiElement(class)('class')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('X')
            PrimaryConstructor
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              Parameters
                ParametersClause
                  PsiElement(()('(')
                  ClassParameter: z
                    AnnotationsList
                      <empty list>
                    Modifiers
                      <empty list>
                    PsiElement(identifier)('z')
                    PsiElement(:)(':')
                    PsiWhiteSpace(' ')
                    ParameterType
                      SimpleType: Int
                        CodeReferenceElement: Int
                          PsiElement(identifier)('Int')
                  PsiElement())(')')
            PsiWhiteSpace(' ')
            ExtendsBlock
              ScTemplateBody
                PsiElement({)('{')
                PsiWhiteSpace(' ')
                PsiElement(})('}')
          PsiWhiteSpace('\n  ')
          PsiElement(})('}')
    PsiWhiteSpace('\n')
    PsiElement(})('}')
