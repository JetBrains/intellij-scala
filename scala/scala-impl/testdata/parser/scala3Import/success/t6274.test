trait Crash {

    def foo(i: => Int) (j: Int): Int

    def t = {
        // var count = 0
        foo {
            var count = 0
            count
        } _
    }

}
-----
ScalaFile
  ScTrait: Crash
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Crash')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n\n    ')
        ScFunctionDeclaration: foo
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('foo')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: i
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('i')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  PsiElement(=>)('=>')
                  PsiWhiteSpace(' ')
                  SimpleType: Int
                    CodeReferenceElement: Int
                      PsiElement(identifier)('Int')
              PsiElement())(')')
            PsiWhiteSpace(' ')
            ParametersClause
              PsiElement(()('(')
              Parameter: j
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('j')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Int
                    CodeReferenceElement: Int
                      PsiElement(identifier)('Int')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Int
            CodeReferenceElement: Int
              PsiElement(identifier)('Int')
        PsiWhiteSpace('\n\n    ')
        ScFunctionDefinition: t
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('t')
          Parameters
            <empty list>
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          BlockExpression
            PsiElement({)('{')
            PsiWhiteSpace('\n        ')
            PsiComment(comment)('// var count = 0')
            PsiWhiteSpace('\n        ')
            UnderscoreSection
              MethodCall
                ReferenceExpression: foo
                  PsiElement(identifier)('foo')
                PsiWhiteSpace(' ')
                ArgumentList
                  BlockExpression
                    PsiElement({)('{')
                    PsiWhiteSpace('\n            ')
                    ScVariableDefinition: count
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(var)('var')
                      PsiWhiteSpace(' ')
                      ListOfPatterns
                        ReferencePattern: count
                          PsiElement(identifier)('count')
                      PsiWhiteSpace(' ')
                      PsiElement(=)('=')
                      PsiWhiteSpace(' ')
                      IntegerLiteral
                        PsiElement(integer)('0')
                    PsiWhiteSpace('\n            ')
                    ReferenceExpression: count
                      PsiElement(identifier)('count')
                    PsiWhiteSpace('\n        ')
                    PsiElement(})('}')
              PsiWhiteSpace(' ')
              PsiElement(_)('_')
            PsiWhiteSpace('\n    ')
            PsiElement(})('}')
        PsiWhiteSpace('\n\n')
        PsiElement(})('}')
