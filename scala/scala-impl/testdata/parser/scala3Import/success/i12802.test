import scala.quoted._

object Boo:
  def foo(using Quotes): Unit =
    import quotes.reflect._
    given Option[Symbol] = Some[Symbol](???)
  def bar(using Quotes): Unit =
    import quotes.reflect.Symbol
    given Option[Symbol] = Some[Symbol](???)
-----
ScalaFile
  ScImportStatement
    PsiElement(import)('import')
    PsiWhiteSpace(' ')
    ImportExpression
      CodeReferenceElement: scala.quoted
        CodeReferenceElement: scala
          PsiElement(identifier)('scala')
        PsiElement(.)('.')
        PsiElement(identifier)('quoted')
      PsiElement(.)('.')
      PsiElement(_)('_')
  PsiWhiteSpace('\n\n')
  ScObject: Boo
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Boo')
    ExtendsBlock
      ScTemplateBody
        PsiElement(:)(':')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: foo
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('foo')
          Parameters
            ParametersClause
              PsiElement(()('(')
              PsiElement(using)('using')
              PsiWhiteSpace(' ')
              Parameter: <anonymous>
                ParameterType
                  SimpleType: Quotes
                    CodeReferenceElement: Quotes
                      PsiElement(identifier)('Quotes')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Unit
            CodeReferenceElement: Unit
              PsiElement(identifier)('Unit')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          BlockExpression
            PsiWhiteSpace('\n    ')
            ScImportStatement
              PsiElement(import)('import')
              PsiWhiteSpace(' ')
              ImportExpression
                CodeReferenceElement: quotes.reflect
                  CodeReferenceElement: quotes
                    PsiElement(identifier)('quotes')
                  PsiElement(.)('.')
                  PsiElement(identifier)('reflect')
                PsiElement(.)('.')
                PsiElement(_)('_')
            PsiWhiteSpace('\n    ')
            ScGivenAliasDefinition: given_Option_Symbol
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(given)('given')
              PsiWhiteSpace(' ')
              ParametrizedType: Option[Symbol]
                SimpleType: Option
                  CodeReferenceElement: Option
                    PsiElement(identifier)('Option')
                TypeArgumentsList
                  PsiElement([)('[')
                  SimpleType: Symbol
                    CodeReferenceElement: Symbol
                      PsiElement(identifier)('Symbol')
                  PsiElement(])(']')
              Parameters
                <empty list>
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              MethodCall
                GenericCall
                  ReferenceExpression: Some
                    PsiElement(identifier)('Some')
                  TypeArgumentsList
                    PsiElement([)('[')
                    SimpleType: Symbol
                      CodeReferenceElement: Symbol
                        PsiElement(identifier)('Symbol')
                    PsiElement(])(']')
                ArgumentList
                  PsiElement(()('(')
                  ReferenceExpression: ???
                    PsiElement(identifier)('???')
                  PsiElement())(')')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: bar
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('bar')
          Parameters
            ParametersClause
              PsiElement(()('(')
              PsiElement(using)('using')
              PsiWhiteSpace(' ')
              Parameter: <anonymous>
                ParameterType
                  SimpleType: Quotes
                    CodeReferenceElement: Quotes
                      PsiElement(identifier)('Quotes')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Unit
            CodeReferenceElement: Unit
              PsiElement(identifier)('Unit')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          BlockExpression
            PsiWhiteSpace('\n    ')
            ScImportStatement
              PsiElement(import)('import')
              PsiWhiteSpace(' ')
              ImportExpression
                CodeReferenceElement: quotes.reflect.Symbol
                  CodeReferenceElement: quotes.reflect
                    CodeReferenceElement: quotes
                      PsiElement(identifier)('quotes')
                    PsiElement(.)('.')
                    PsiElement(identifier)('reflect')
                  PsiElement(.)('.')
                  PsiElement(identifier)('Symbol')
            PsiWhiteSpace('\n    ')
            ScGivenAliasDefinition: given_Option_Symbol
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(given)('given')
              PsiWhiteSpace(' ')
              ParametrizedType: Option[Symbol]
                SimpleType: Option
                  CodeReferenceElement: Option
                    PsiElement(identifier)('Option')
                TypeArgumentsList
                  PsiElement([)('[')
                  SimpleType: Symbol
                    CodeReferenceElement: Symbol
                      PsiElement(identifier)('Symbol')
                  PsiElement(])(']')
              Parameters
                <empty list>
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              MethodCall
                GenericCall
                  ReferenceExpression: Some
                    PsiElement(identifier)('Some')
                  TypeArgumentsList
                    PsiElement([)('[')
                    SimpleType: Symbol
                      CodeReferenceElement: Symbol
                        PsiElement(identifier)('Symbol')
                    PsiElement(])(']')
                ArgumentList
                  PsiElement(()('(')
                  ReferenceExpression: ???
                    PsiElement(identifier)('???')
                  PsiElement())(')')
