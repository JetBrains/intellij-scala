
/*
 * The block under qual$1 must be owned by it.
 * In the sample bug, the first default arg generates x$4,
 * the second default arg generates qual$1, hence the maximal
 * minimization.
 *
    <method> <triedcooking> def model: C.this.M = {
      val qual$1: C.this.M = scala.Option.apply[C.this.M]({
  val x$1: lang.this.String("foo") = "foo";
  val x$2: String = C.this.M.apply$default$2("foo");
  C.this.M.apply("foo")(x$2)
}).getOrElse[C.this.M]({
        val x$3: lang.this.String("bar") = "bar";
        val x$4: String = C.this.M.apply$default$2("bar");
        C.this.M.apply("bar")(x$4)
      });
      val x$5: lang.this.String("baz") = "baz";
      val x$6: String = qual$1.copy$default$2("baz");
      qual$1.copy("baz")(x$6)
    }
 */
class C {
  case class M(currentUser: String = "anon")(val message: String = "empty")
  val m = M("foo")()

  // reported
  //def model = Option(M("foo")()).getOrElse(M("bar")()).copy(currentUser = "")()

  // the bug
  def model = Option(m).getOrElse(M("bar")()).copy("baz")("empty")

  // style points for this version
  def modish = ((null: Option[M]) getOrElse new M()()).copy()("empty")

  // various simplifications are too simple
  case class N(currentUser: String = "anon")
  val n = N("fun")
  def nudel = Option(n).getOrElse(N()).copy()
}

object Test {
  def main(args: Array[String]): Unit = {
    val c = new C
    println(c.model.currentUser)
    println(c.model.message)
  }
}
/*
symbol value x$4$1 does not exist in badcopy.C.model
at scala.reflect.internal.SymbolTable.abort(SymbolTable.scala:45)
at scala.tools.nsc.Global.abort(Global.scala:202)
at scala.tools.nsc.backend.icode.GenICode$ICodePhase.liftedTree2$1(GenICode.scala:998)
at scala.tools.nsc.backend.icode.GenICode$ICodePhase.scala$tools$nsc$backend$icode$GenICode$ICodePhase$$genLoad(GenICode.scala:992)
*/

-----
ScalaFile
  ScClass: C
    PsiComment(BlockComment)('/*\n * The block under qual$1 must be owned by it.\n * In the sample bug, the first default arg generates x$4,\n * the second default arg generates qual$1, hence the maximal\n * minimization.\n *\n    <method> <triedcooking> def model: C.this.M = {\n      val qual$1: C.this.M = scala.Option.apply[C.this.M]({\n  val x$1: lang.this.String("foo") = "foo";\n  val x$2: String = C.this.M.apply$default$2("foo");\n  C.this.M.apply("foo")(x$2)\n}).getOrElse[C.this.M]({\n        val x$3: lang.this.String("bar") = "bar";\n        val x$4: String = C.this.M.apply$default$2("bar");\n        C.this.M.apply("bar")(x$4)\n      });\n      val x$5: lang.this.String("baz") = "baz";\n      val x$6: String = qual$1.copy$default$2("baz");\n      qual$1.copy("baz")(x$6)\n    }\n */')
    PsiWhiteSpace('\n')
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('C')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScClass: M
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(case)('case')
          PsiWhiteSpace(' ')
          PsiElement(class)('class')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('M')
          PrimaryConstructor
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            Parameters
              ParametersClause
                PsiElement(()('(')
                ClassParameter: currentUser
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(identifier)('currentUser')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    SimpleType: String
                      CodeReferenceElement: String
                        PsiElement(identifier)('String')
                  PsiWhiteSpace(' ')
                  PsiElement(=)('=')
                  PsiWhiteSpace(' ')
                  StringLiteral
                    PsiElement(string content)('"anon"')
                PsiElement())(')')
              ParametersClause
                PsiElement(()('(')
                ClassParameter: message
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(val)('val')
                  PsiWhiteSpace(' ')
                  PsiElement(identifier)('message')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    SimpleType: String
                      CodeReferenceElement: String
                        PsiElement(identifier)('String')
                  PsiWhiteSpace(' ')
                  PsiElement(=)('=')
                  PsiWhiteSpace(' ')
                  StringLiteral
                    PsiElement(string content)('"empty"')
                PsiElement())(')')
          ExtendsBlock
            <empty list>
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: m
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: m
              PsiElement(identifier)('m')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            MethodCall
              ReferenceExpression: M
                PsiElement(identifier)('M')
              ArgumentList
                PsiElement(()('(')
                StringLiteral
                  PsiElement(string content)('"foo"')
                PsiElement())(')')
            ArgumentList
              PsiElement(()('(')
              PsiElement())(')')
        PsiWhiteSpace('\n\n  ')
        PsiComment(comment)('// reported')
        PsiWhiteSpace('\n  ')
        PsiComment(comment)('//def model = Option(M("foo")()).getOrElse(M("bar")()).copy(currentUser = "")()')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: model
          PsiComment(comment)('// the bug')
          PsiWhiteSpace('\n  ')
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('model')
          Parameters
            <empty list>
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            MethodCall
              ReferenceExpression: Option(m).getOrElse(M("bar")()).copy
                MethodCall
                  ReferenceExpression: Option(m).getOrElse
                    MethodCall
                      ReferenceExpression: Option
                        PsiElement(identifier)('Option')
                      ArgumentList
                        PsiElement(()('(')
                        ReferenceExpression: m
                          PsiElement(identifier)('m')
                        PsiElement())(')')
                    PsiElement(.)('.')
                    PsiElement(identifier)('getOrElse')
                  ArgumentList
                    PsiElement(()('(')
                    MethodCall
                      MethodCall
                        ReferenceExpression: M
                          PsiElement(identifier)('M')
                        ArgumentList
                          PsiElement(()('(')
                          StringLiteral
                            PsiElement(string content)('"bar"')
                          PsiElement())(')')
                      ArgumentList
                        PsiElement(()('(')
                        PsiElement())(')')
                    PsiElement())(')')
                PsiElement(.)('.')
                PsiElement(identifier)('copy')
              ArgumentList
                PsiElement(()('(')
                StringLiteral
                  PsiElement(string content)('"baz"')
                PsiElement())(')')
            ArgumentList
              PsiElement(()('(')
              StringLiteral
                PsiElement(string content)('"empty"')
              PsiElement())(')')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: modish
          PsiComment(comment)('// style points for this version')
          PsiWhiteSpace('\n  ')
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('modish')
          Parameters
            <empty list>
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            MethodCall
              ReferenceExpression: ((null: Option[M]) getOrElse new M()()).copy
                ExpressionInParenthesis
                  PsiElement(()('(')
                  InfixExpression
                    ExpressionInParenthesis
                      PsiElement(()('(')
                      TypedExpression
                        NullLiteral
                          PsiElement(null)('null')
                        PsiElement(:)(':')
                        PsiWhiteSpace(' ')
                        ParametrizedType: Option[M]
                          SimpleType: Option
                            CodeReferenceElement: Option
                              PsiElement(identifier)('Option')
                          TypeArgumentsList
                            PsiElement([)('[')
                            SimpleType: M
                              CodeReferenceElement: M
                                PsiElement(identifier)('M')
                            PsiElement(])(']')
                      PsiElement())(')')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: getOrElse
                      PsiElement(identifier)('getOrElse')
                    PsiWhiteSpace(' ')
                    ScNewTemplateDefinition: <anonymous>
                      PsiElement(new)('new')
                      PsiWhiteSpace(' ')
                      ExtendsBlock
                        TemplateParents
                          ConstructorInvocation
                            SimpleType: M
                              CodeReferenceElement: M
                                PsiElement(identifier)('M')
                            ArgumentList
                              PsiElement(()('(')
                              PsiElement())(')')
                            ArgumentList
                              PsiElement(()('(')
                              PsiElement())(')')
                  PsiElement())(')')
                PsiElement(.)('.')
                PsiElement(identifier)('copy')
              ArgumentList
                PsiElement(()('(')
                PsiElement())(')')
            ArgumentList
              PsiElement(()('(')
              StringLiteral
                PsiElement(string content)('"empty"')
              PsiElement())(')')
        PsiWhiteSpace('\n\n  ')
        ScClass: N
          PsiComment(comment)('// various simplifications are too simple')
          PsiWhiteSpace('\n  ')
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(case)('case')
          PsiWhiteSpace(' ')
          PsiElement(class)('class')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('N')
          PrimaryConstructor
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            Parameters
              ParametersClause
                PsiElement(()('(')
                ClassParameter: currentUser
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(identifier)('currentUser')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    SimpleType: String
                      CodeReferenceElement: String
                        PsiElement(identifier)('String')
                  PsiWhiteSpace(' ')
                  PsiElement(=)('=')
                  PsiWhiteSpace(' ')
                  StringLiteral
                    PsiElement(string content)('"anon"')
                PsiElement())(')')
          ExtendsBlock
            <empty list>
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: n
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: n
              PsiElement(identifier)('n')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: N
              PsiElement(identifier)('N')
            ArgumentList
              PsiElement(()('(')
              StringLiteral
                PsiElement(string content)('"fun"')
              PsiElement())(')')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: nudel
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('nudel')
          Parameters
            <empty list>
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: Option(n).getOrElse(N()).copy
              MethodCall
                ReferenceExpression: Option(n).getOrElse
                  MethodCall
                    ReferenceExpression: Option
                      PsiElement(identifier)('Option')
                    ArgumentList
                      PsiElement(()('(')
                      ReferenceExpression: n
                        PsiElement(identifier)('n')
                      PsiElement())(')')
                  PsiElement(.)('.')
                  PsiElement(identifier)('getOrElse')
                ArgumentList
                  PsiElement(()('(')
                  MethodCall
                    ReferenceExpression: N
                      PsiElement(identifier)('N')
                    ArgumentList
                      PsiElement(()('(')
                      PsiElement())(')')
                  PsiElement())(')')
              PsiElement(.)('.')
              PsiElement(identifier)('copy')
            ArgumentList
              PsiElement(()('(')
              PsiElement())(')')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScObject: Test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: main
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('main')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: args
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('args')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  ParametrizedType: Array[String]
                    SimpleType: Array
                      CodeReferenceElement: Array
                        PsiElement(identifier)('Array')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: String
                        CodeReferenceElement: String
                          PsiElement(identifier)('String')
                      PsiElement(])(']')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Unit
            CodeReferenceElement: Unit
              PsiElement(identifier)('Unit')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          BlockExpression
            PsiElement({)('{')
            PsiWhiteSpace('\n    ')
            ScPatternDefinition: c
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              ListOfPatterns
                ReferencePattern: c
                  PsiElement(identifier)('c')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              ScNewTemplateDefinition: <anonymous>
                PsiElement(new)('new')
                PsiWhiteSpace(' ')
                ExtendsBlock
                  TemplateParents
                    ConstructorInvocation
                      SimpleType: C
                        CodeReferenceElement: C
                          PsiElement(identifier)('C')
            PsiWhiteSpace('\n    ')
            MethodCall
              ReferenceExpression: println
                PsiElement(identifier)('println')
              ArgumentList
                PsiElement(()('(')
                ReferenceExpression: c.model.currentUser
                  ReferenceExpression: c.model
                    ReferenceExpression: c
                      PsiElement(identifier)('c')
                    PsiElement(.)('.')
                    PsiElement(identifier)('model')
                  PsiElement(.)('.')
                  PsiElement(identifier)('currentUser')
                PsiElement())(')')
            PsiWhiteSpace('\n    ')
            MethodCall
              ReferenceExpression: println
                PsiElement(identifier)('println')
              ArgumentList
                PsiElement(()('(')
                ReferenceExpression: c.model.message
                  ReferenceExpression: c.model
                    ReferenceExpression: c
                      PsiElement(identifier)('c')
                    PsiElement(.)('.')
                    PsiElement(identifier)('model')
                  PsiElement(.)('.')
                  PsiElement(identifier)('message')
                PsiElement())(')')
            PsiWhiteSpace('\n  ')
            PsiElement(})('}')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n')
  PsiComment(BlockComment)('/*\nsymbol value x$4$1 does not exist in badcopy.C.model\nat scala.reflect.internal.SymbolTable.abort(SymbolTable.scala:45)\nat scala.tools.nsc.Global.abort(Global.scala:202)\nat scala.tools.nsc.backend.icode.GenICode$ICodePhase.liftedTree2$1(GenICode.scala:998)\nat scala.tools.nsc.backend.icode.GenICode$ICodePhase.scala$tools$nsc$backend$icode$GenICode$ICodePhase$$genLoad(GenICode.scala:992)\n*/')
