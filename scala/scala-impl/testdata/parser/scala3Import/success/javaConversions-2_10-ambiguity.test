import collection.{mutable, concurrent}
import scala.jdk.CollectionConverters.*
import java.util.concurrent.ConcurrentHashMap as CHM

object Bar {
  def assertType[T](t: T) = t
  val a = new CHM[String, String]().asScala += (("", ""))
  assertType[concurrent.Map[String, String]](a)
}
-----
ScalaFile
  ScImportStatement
    PsiElement(import)('import')
    PsiWhiteSpace(' ')
    ImportExpression
      CodeReferenceElement: collection
        PsiElement(identifier)('collection')
      PsiElement(.)('.')
      ImportSelectors
        PsiElement({)('{')
        ImportSelector
          CodeReferenceElement: mutable
            PsiElement(identifier)('mutable')
        PsiElement(,)(',')
        PsiWhiteSpace(' ')
        ImportSelector
          CodeReferenceElement: concurrent
            PsiElement(identifier)('concurrent')
        PsiElement(})('}')
  PsiWhiteSpace('\n')
  ScImportStatement
    PsiElement(import)('import')
    PsiWhiteSpace(' ')
    ImportExpression
      CodeReferenceElement: scala.jdk.CollectionConverters
        CodeReferenceElement: scala.jdk
          CodeReferenceElement: scala
            PsiElement(identifier)('scala')
          PsiElement(.)('.')
          PsiElement(identifier)('jdk')
        PsiElement(.)('.')
        PsiElement(identifier)('CollectionConverters')
      PsiElement(.)('.')
      PsiElement(*)('*')
  PsiWhiteSpace('\n')
  ScImportStatement
    PsiElement(import)('import')
    PsiWhiteSpace(' ')
    ImportExpression
      CodeReferenceElement: java.util.concurrent
        CodeReferenceElement: java.util
          CodeReferenceElement: java
            PsiElement(identifier)('java')
          PsiElement(.)('.')
          PsiElement(identifier)('util')
        PsiElement(.)('.')
        PsiElement(identifier)('concurrent')
      PsiElement(.)('.')
      ImportSelectors
        ImportSelector
          CodeReferenceElement: ConcurrentHashMap
            PsiElement(identifier)('ConcurrentHashMap')
          PsiWhiteSpace(' ')
          PsiElement(as)('as')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('CHM')
  PsiWhiteSpace('\n\n')
  ScObject: Bar
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Bar')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: assertType
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('assertType')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: T
              PsiElement(identifier)('T')
            PsiElement(])(']')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: t
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('t')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: T
                    CodeReferenceElement: T
                      PsiElement(identifier)('T')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: t
            PsiElement(identifier)('t')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: a
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: a
              PsiElement(identifier)('a')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          InfixExpression
            ReferenceExpression: new CHM[String, String]().asScala
              ScNewTemplateDefinition: <anonymous>
                PsiElement(new)('new')
                PsiWhiteSpace(' ')
                ExtendsBlock
                  TemplateParents
                    ConstructorInvocation
                      ParametrizedType: CHM[String, String]
                        SimpleType: CHM
                          CodeReferenceElement: CHM
                            PsiElement(identifier)('CHM')
                        TypeArgumentsList
                          PsiElement([)('[')
                          SimpleType: String
                            CodeReferenceElement: String
                              PsiElement(identifier)('String')
                          PsiElement(,)(',')
                          PsiWhiteSpace(' ')
                          SimpleType: String
                            CodeReferenceElement: String
                              PsiElement(identifier)('String')
                          PsiElement(])(']')
                      ArgumentList
                        PsiElement(()('(')
                        PsiElement())(')')
              PsiElement(.)('.')
              PsiElement(identifier)('asScala')
            PsiWhiteSpace(' ')
            ReferenceExpression: +=
              PsiElement(identifier)('+=')
            PsiWhiteSpace(' ')
            ExpressionInParenthesis
              PsiElement(()('(')
              Tuple
                PsiElement(()('(')
                StringLiteral
                  PsiElement(string content)('""')
                PsiElement(,)(',')
                PsiWhiteSpace(' ')
                StringLiteral
                  PsiElement(string content)('""')
                PsiElement())(')')
              PsiElement())(')')
        PsiWhiteSpace('\n  ')
        MethodCall
          GenericCall
            ReferenceExpression: assertType
              PsiElement(identifier)('assertType')
            TypeArgumentsList
              PsiElement([)('[')
              ParametrizedType: concurrent.Map[String, String]
                SimpleType: concurrent.Map
                  CodeReferenceElement: concurrent.Map
                    CodeReferenceElement: concurrent
                      PsiElement(identifier)('concurrent')
                    PsiElement(.)('.')
                    PsiElement(identifier)('Map')
                TypeArgumentsList
                  PsiElement([)('[')
                  SimpleType: String
                    CodeReferenceElement: String
                      PsiElement(identifier)('String')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  SimpleType: String
                    CodeReferenceElement: String
                      PsiElement(identifier)('String')
                  PsiElement(])(']')
              PsiElement(])(']')
          ArgumentList
            PsiElement(()('(')
            ReferenceExpression: a
              PsiElement(identifier)('a')
            PsiElement())(')')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
