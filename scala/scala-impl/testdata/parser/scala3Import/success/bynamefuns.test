object Test {

  type LF = (=> Int) => Int

  def f(x: => Int) = x * x

  val x: LF = f

  def g = 3

  f(11)
  x(g)
  x(11)

}
-----
ScalaFile
  ScObject: Test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n\n  ')
        ScTypeAliasDefinition: LF
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('LF')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          FunctionalType: (=> Int) => Int
            TypeInParenthesis: (=> Int)
              PsiElement(()('(')
              PsiElement(=>)('=>')
              PsiWhiteSpace(' ')
              SimpleType: Int
                CodeReferenceElement: Int
                  PsiElement(identifier)('Int')
              PsiElement())(')')
            PsiWhiteSpace(' ')
            PsiElement(=>)('=>')
            PsiWhiteSpace(' ')
            SimpleType: Int
              CodeReferenceElement: Int
                PsiElement(identifier)('Int')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: f
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('f')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: x
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  PsiElement(=>)('=>')
                  PsiWhiteSpace(' ')
                  SimpleType: Int
                    CodeReferenceElement: Int
                      PsiElement(identifier)('Int')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          InfixExpression
            ReferenceExpression: x
              PsiElement(identifier)('x')
            PsiWhiteSpace(' ')
            ReferenceExpression: *
              PsiElement(identifier)('*')
            PsiWhiteSpace(' ')
            ReferenceExpression: x
              PsiElement(identifier)('x')
        PsiWhiteSpace('\n\n  ')
        ScPatternDefinition: x
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: x
              PsiElement(identifier)('x')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: LF
            CodeReferenceElement: LF
              PsiElement(identifier)('LF')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: f
            PsiElement(identifier)('f')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: g
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('g')
          Parameters
            <empty list>
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          IntegerLiteral
            PsiElement(integer)('3')
        PsiWhiteSpace('\n\n  ')
        MethodCall
          ReferenceExpression: f
            PsiElement(identifier)('f')
          ArgumentList
            PsiElement(()('(')
            IntegerLiteral
              PsiElement(integer)('11')
            PsiElement())(')')
        PsiWhiteSpace('\n  ')
        MethodCall
          ReferenceExpression: x
            PsiElement(identifier)('x')
          ArgumentList
            PsiElement(()('(')
            ReferenceExpression: g
              PsiElement(identifier)('g')
            PsiElement())(')')
        PsiWhiteSpace('\n  ')
        MethodCall
          ReferenceExpression: x
            PsiElement(identifier)('x')
          ArgumentList
            PsiElement(()('(')
            IntegerLiteral
              PsiElement(integer)('11')
            PsiElement())(')')
        PsiWhiteSpace('\n\n')
        PsiElement(})('}')
