


extension (x: Int) inline def g (y: Int): Int = x + y
extension [S](f: S => Int) inline def f(s: String) = "test"
val z = 1.g(2)
def testStuff =  ((s: String) => 42).f("foo")

-----
ScalaFile
  Extension on Int
    PsiElement(extension)('extension')
    PsiWhiteSpace(' ')
    Parameters
      ParametersClause
        PsiElement(()('(')
        Parameter: x
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(identifier)('x')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParameterType
            SimpleType: Int
              CodeReferenceElement: Int
                PsiElement(identifier)('Int')
        PsiElement())(')')
    PsiWhiteSpace(' ')
    ScExtensionBody
      ScFunctionDefinition: g
        AnnotationsList
          <empty list>
        Modifiers
          PsiElement(inline)('inline')
        PsiWhiteSpace(' ')
        PsiElement(def)('def')
        PsiWhiteSpace(' ')
        PsiElement(identifier)('g')
        PsiWhiteSpace(' ')
        Parameters
          ParametersClause
            PsiElement(()('(')
            Parameter: y
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(identifier)('y')
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              ParameterType
                SimpleType: Int
                  CodeReferenceElement: Int
                    PsiElement(identifier)('Int')
            PsiElement())(')')
        PsiElement(:)(':')
        PsiWhiteSpace(' ')
        SimpleType: Int
          CodeReferenceElement: Int
            PsiElement(identifier)('Int')
        PsiWhiteSpace(' ')
        PsiElement(=)('=')
        PsiWhiteSpace(' ')
        InfixExpression
          ReferenceExpression: x
            PsiElement(identifier)('x')
          PsiWhiteSpace(' ')
          ReferenceExpression: +
            PsiElement(identifier)('+')
          PsiWhiteSpace(' ')
          ReferenceExpression: y
            PsiElement(identifier)('y')
  PsiWhiteSpace('\n')
  Extension on S => Int
    PsiElement(extension)('extension')
    PsiWhiteSpace(' ')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: S
        PsiElement(identifier)('S')
      PsiElement(])(']')
    Parameters
      ParametersClause
        PsiElement(()('(')
        Parameter: f
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(identifier)('f')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParameterType
            FunctionalType: S => Int
              SimpleType: S
                CodeReferenceElement: S
                  PsiElement(identifier)('S')
              PsiWhiteSpace(' ')
              PsiElement(=>)('=>')
              PsiWhiteSpace(' ')
              SimpleType: Int
                CodeReferenceElement: Int
                  PsiElement(identifier)('Int')
        PsiElement())(')')
    PsiWhiteSpace(' ')
    ScExtensionBody
      ScFunctionDefinition: f
        AnnotationsList
          <empty list>
        Modifiers
          PsiElement(inline)('inline')
        PsiWhiteSpace(' ')
        PsiElement(def)('def')
        PsiWhiteSpace(' ')
        PsiElement(identifier)('f')
        Parameters
          ParametersClause
            PsiElement(()('(')
            Parameter: s
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(identifier)('s')
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              ParameterType
                SimpleType: String
                  CodeReferenceElement: String
                    PsiElement(identifier)('String')
            PsiElement())(')')
        PsiWhiteSpace(' ')
        PsiElement(=)('=')
        PsiWhiteSpace(' ')
        StringLiteral
          PsiElement(string content)('"test"')
  PsiWhiteSpace('\n')
  ScPatternDefinition: z
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(val)('val')
    PsiWhiteSpace(' ')
    ListOfPatterns
      ReferencePattern: z
        PsiElement(identifier)('z')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    MethodCall
      ReferenceExpression: 1.g
        IntegerLiteral
          PsiElement(integer)('1')
        PsiElement(.)('.')
        PsiElement(identifier)('g')
      ArgumentList
        PsiElement(()('(')
        IntegerLiteral
          PsiElement(integer)('2')
        PsiElement())(')')
  PsiWhiteSpace('\n')
  ScFunctionDefinition: testStuff
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(def)('def')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('testStuff')
    Parameters
      <empty list>
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace('  ')
    MethodCall
      ReferenceExpression: ((s: String) => 42).f
        ExpressionInParenthesis
          PsiElement(()('(')
          FunctionExpression
            Parameters
              ParametersClause
                PsiElement(()('(')
                Parameter: s
                  AnnotationsList
                    <empty list>
                  PsiElement(identifier)('s')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    SimpleType: String
                      CodeReferenceElement: String
                        PsiElement(identifier)('String')
                PsiElement())(')')
            PsiWhiteSpace(' ')
            PsiElement(=>)('=>')
            PsiWhiteSpace(' ')
            IntegerLiteral
              PsiElement(integer)('42')
          PsiElement())(')')
        PsiElement(.)('.')
        PsiElement(identifier)('f')
      ArgumentList
        PsiElement(()('(')
        StringLiteral
          PsiElement(string content)('"foo"')
        PsiElement())(')')
