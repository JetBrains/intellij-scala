// Paths rooted in outer classes. Not sure to what degree we
// want to support them.
class Outer {
  type Bar
  object inner {
    type Foo
    def foo: Foo = ???
  }
  def bar: Bar = ???
}

object Main {
  val a = new Outer
  val b = new Outer
  def all = List(a.inner.foo, a.inner.foo)
    // The inferred type is [Outer#inner.Foo], but this cannot be written in source
  def bars: Outer # Bar = identity(a.bar)
}
-----
ScalaFile
  ScClass: Outer
    PsiComment(comment)('// Paths rooted in outer classes. Not sure to what degree we')
    PsiWhiteSpace('\n')
    PsiComment(comment)('// want to support them.')
    PsiWhiteSpace('\n')
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Outer')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScTypeAliasDeclaration: Bar
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Bar')
        PsiWhiteSpace('\n  ')
        ScObject: inner
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(object)('object')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('inner')
          PsiWhiteSpace(' ')
          ExtendsBlock
            ScTemplateBody
              PsiElement({)('{')
              PsiWhiteSpace('\n    ')
              ScTypeAliasDeclaration: Foo
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(type)('type')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('Foo')
              PsiWhiteSpace('\n    ')
              ScFunctionDefinition: foo
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(def)('def')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('foo')
                Parameters
                  <empty list>
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                SimpleType: Foo
                  CodeReferenceElement: Foo
                    PsiElement(identifier)('Foo')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                ReferenceExpression: ???
                  PsiElement(identifier)('???')
              PsiWhiteSpace('\n  ')
              PsiElement(})('}')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: bar
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('bar')
          Parameters
            <empty list>
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Bar
            CodeReferenceElement: Bar
              PsiElement(identifier)('Bar')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: ???
            PsiElement(identifier)('???')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScObject: Main
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Main')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: a
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: a
              PsiElement(identifier)('a')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ScNewTemplateDefinition: <anonymous>
            PsiElement(new)('new')
            PsiWhiteSpace(' ')
            ExtendsBlock
              TemplateParents
                ConstructorInvocation
                  SimpleType: Outer
                    CodeReferenceElement: Outer
                      PsiElement(identifier)('Outer')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: b
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: b
              PsiElement(identifier)('b')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ScNewTemplateDefinition: <anonymous>
            PsiElement(new)('new')
            PsiWhiteSpace(' ')
            ExtendsBlock
              TemplateParents
                ConstructorInvocation
                  SimpleType: Outer
                    CodeReferenceElement: Outer
                      PsiElement(identifier)('Outer')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: all
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('all')
          Parameters
            <empty list>
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: List
              PsiElement(identifier)('List')
            ArgumentList
              PsiElement(()('(')
              ReferenceExpression: a.inner.foo
                ReferenceExpression: a.inner
                  ReferenceExpression: a
                    PsiElement(identifier)('a')
                  PsiElement(.)('.')
                  PsiElement(identifier)('inner')
                PsiElement(.)('.')
                PsiElement(identifier)('foo')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              ReferenceExpression: a.inner.foo
                ReferenceExpression: a.inner
                  ReferenceExpression: a
                    PsiElement(identifier)('a')
                  PsiElement(.)('.')
                  PsiElement(identifier)('inner')
                PsiElement(.)('.')
                PsiElement(identifier)('foo')
              PsiElement())(')')
        PsiWhiteSpace('\n    ')
        ScFunctionDefinition: bars
          PsiComment(comment)('// The inferred type is [Outer#inner.Foo], but this cannot be written in source')
          PsiWhiteSpace('\n  ')
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('bars')
          Parameters
            <empty list>
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          TypeProjection: Outer # Bar
            SimpleType: Outer
              CodeReferenceElement: Outer
                PsiElement(identifier)('Outer')
            PsiWhiteSpace(' ')
            PsiElement(#)('#')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('Bar')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: identity
              PsiElement(identifier)('identity')
            ArgumentList
              PsiElement(()('(')
              ReferenceExpression: a.bar
                ReferenceExpression: a
                  PsiElement(identifier)('a')
                PsiElement(.)('.')
                PsiElement(identifier)('bar')
              PsiElement())(')')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
