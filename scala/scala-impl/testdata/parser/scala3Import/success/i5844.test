package p1 {
  trait A
  trait B[X, Y]{
    def m(): X
  }
  trait C[X] extends B[X, X & A]

  object O{
    def m(c: C[_]) = {
      val x = c.m()
    }
  }
}
package p2 {
  trait A
  trait B[X]{
    def m(): X
  }
  trait C[X] extends B[X with A]

  object O{
    def m(c: C[_]) = {
      val x: A = c.m()
    }
  }
}
-----
ScalaFile
  ScPackaging
    PsiElement(package)('package')
    PsiWhiteSpace(' ')
    CodeReferenceElement: p1
      PsiElement(identifier)('p1')
    PsiWhiteSpace(' ')
    PsiElement({)('{')
    PsiWhiteSpace('\n  ')
    ScTrait: A
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      PsiElement(trait)('trait')
      PsiWhiteSpace(' ')
      PsiElement(identifier)('A')
      ExtendsBlock
        <empty list>
    PsiWhiteSpace('\n  ')
    ScTrait: B
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      PsiElement(trait)('trait')
      PsiWhiteSpace(' ')
      PsiElement(identifier)('B')
      TypeParameterClause
        PsiElement([)('[')
        TypeParameter: X
          PsiElement(identifier)('X')
        PsiElement(,)(',')
        PsiWhiteSpace(' ')
        TypeParameter: Y
          PsiElement(identifier)('Y')
        PsiElement(])(']')
      ExtendsBlock
        ScTemplateBody
          PsiElement({)('{')
          PsiWhiteSpace('\n    ')
          ScFunctionDeclaration: m
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(def)('def')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('m')
            Parameters
              ParametersClause
                PsiElement(()('(')
                PsiElement())(')')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            SimpleType: X
              CodeReferenceElement: X
                PsiElement(identifier)('X')
          PsiWhiteSpace('\n  ')
          PsiElement(})('}')
    PsiWhiteSpace('\n  ')
    ScTrait: C
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      PsiElement(trait)('trait')
      PsiWhiteSpace(' ')
      PsiElement(identifier)('C')
      TypeParameterClause
        PsiElement([)('[')
        TypeParameter: X
          PsiElement(identifier)('X')
        PsiElement(])(']')
      PsiWhiteSpace(' ')
      ExtendsBlock
        PsiElement(extends)('extends')
        PsiWhiteSpace(' ')
        TemplateParents
          ConstructorInvocation
            ParametrizedType: B[X, X & A]
              SimpleType: B
                CodeReferenceElement: B
                  PsiElement(identifier)('B')
              TypeArgumentsList
                PsiElement([)('[')
                SimpleType: X
                  CodeReferenceElement: X
                    PsiElement(identifier)('X')
                PsiElement(,)(',')
                PsiWhiteSpace(' ')
                InfixType: X & A
                  SimpleType: X
                    CodeReferenceElement: X
                      PsiElement(identifier)('X')
                  PsiWhiteSpace(' ')
                  CodeReferenceElement: &
                    PsiElement(identifier)('&')
                  PsiWhiteSpace(' ')
                  SimpleType: A
                    CodeReferenceElement: A
                      PsiElement(identifier)('A')
                PsiElement(])(']')
    PsiWhiteSpace('\n\n  ')
    ScObject: O
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      PsiElement(object)('object')
      PsiWhiteSpace(' ')
      PsiElement(identifier)('O')
      ExtendsBlock
        ScTemplateBody
          PsiElement({)('{')
          PsiWhiteSpace('\n    ')
          ScFunctionDefinition: m
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(def)('def')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('m')
            Parameters
              ParametersClause
                PsiElement(()('(')
                Parameter: c
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(identifier)('c')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    ParametrizedType: C[_]
                      SimpleType: C
                        CodeReferenceElement: C
                          PsiElement(identifier)('C')
                      TypeArgumentsList
                        PsiElement([)('[')
                        WildcardType: _
                          PsiElement(_)('_')
                        PsiElement(])(']')
                PsiElement())(')')
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace(' ')
            BlockExpression
              PsiElement({)('{')
              PsiWhiteSpace('\n      ')
              ScPatternDefinition: x
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(val)('val')
                PsiWhiteSpace(' ')
                ListOfPatterns
                  ReferencePattern: x
                    PsiElement(identifier)('x')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                MethodCall
                  ReferenceExpression: c.m
                    ReferenceExpression: c
                      PsiElement(identifier)('c')
                    PsiElement(.)('.')
                    PsiElement(identifier)('m')
                  ArgumentList
                    PsiElement(()('(')
                    PsiElement())(')')
              PsiWhiteSpace('\n    ')
              PsiElement(})('}')
          PsiWhiteSpace('\n  ')
          PsiElement(})('}')
    PsiWhiteSpace('\n')
    PsiElement(})('}')
  PsiWhiteSpace('\n')
  ScPackaging
    PsiElement(package)('package')
    PsiWhiteSpace(' ')
    CodeReferenceElement: p2
      PsiElement(identifier)('p2')
    PsiWhiteSpace(' ')
    PsiElement({)('{')
    PsiWhiteSpace('\n  ')
    ScTrait: A
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      PsiElement(trait)('trait')
      PsiWhiteSpace(' ')
      PsiElement(identifier)('A')
      ExtendsBlock
        <empty list>
    PsiWhiteSpace('\n  ')
    ScTrait: B
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      PsiElement(trait)('trait')
      PsiWhiteSpace(' ')
      PsiElement(identifier)('B')
      TypeParameterClause
        PsiElement([)('[')
        TypeParameter: X
          PsiElement(identifier)('X')
        PsiElement(])(']')
      ExtendsBlock
        ScTemplateBody
          PsiElement({)('{')
          PsiWhiteSpace('\n    ')
          ScFunctionDeclaration: m
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(def)('def')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('m')
            Parameters
              ParametersClause
                PsiElement(()('(')
                PsiElement())(')')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            SimpleType: X
              CodeReferenceElement: X
                PsiElement(identifier)('X')
          PsiWhiteSpace('\n  ')
          PsiElement(})('}')
    PsiWhiteSpace('\n  ')
    ScTrait: C
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      PsiElement(trait)('trait')
      PsiWhiteSpace(' ')
      PsiElement(identifier)('C')
      TypeParameterClause
        PsiElement([)('[')
        TypeParameter: X
          PsiElement(identifier)('X')
        PsiElement(])(']')
      PsiWhiteSpace(' ')
      ExtendsBlock
        PsiElement(extends)('extends')
        PsiWhiteSpace(' ')
        TemplateParents
          ConstructorInvocation
            ParametrizedType: B[X with A]
              SimpleType: B
                CodeReferenceElement: B
                  PsiElement(identifier)('B')
              TypeArgumentsList
                PsiElement([)('[')
                CompoundType: X with A
                  SimpleType: X
                    CodeReferenceElement: X
                      PsiElement(identifier)('X')
                  PsiWhiteSpace(' ')
                  PsiElement(with)('with')
                  PsiWhiteSpace(' ')
                  SimpleType: A
                    CodeReferenceElement: A
                      PsiElement(identifier)('A')
                PsiElement(])(']')
    PsiWhiteSpace('\n\n  ')
    ScObject: O
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      PsiElement(object)('object')
      PsiWhiteSpace(' ')
      PsiElement(identifier)('O')
      ExtendsBlock
        ScTemplateBody
          PsiElement({)('{')
          PsiWhiteSpace('\n    ')
          ScFunctionDefinition: m
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(def)('def')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('m')
            Parameters
              ParametersClause
                PsiElement(()('(')
                Parameter: c
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(identifier)('c')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    ParametrizedType: C[_]
                      SimpleType: C
                        CodeReferenceElement: C
                          PsiElement(identifier)('C')
                      TypeArgumentsList
                        PsiElement([)('[')
                        WildcardType: _
                          PsiElement(_)('_')
                        PsiElement(])(']')
                PsiElement())(')')
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace(' ')
            BlockExpression
              PsiElement({)('{')
              PsiWhiteSpace('\n      ')
              ScPatternDefinition: x
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(val)('val')
                PsiWhiteSpace(' ')
                ListOfPatterns
                  ReferencePattern: x
                    PsiElement(identifier)('x')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                SimpleType: A
                  CodeReferenceElement: A
                    PsiElement(identifier)('A')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                MethodCall
                  ReferenceExpression: c.m
                    ReferenceExpression: c
                      PsiElement(identifier)('c')
                    PsiElement(.)('.')
                    PsiElement(identifier)('m')
                  ArgumentList
                    PsiElement(()('(')
                    PsiElement())(')')
              PsiWhiteSpace('\n    ')
              PsiElement(})('}')
          PsiWhiteSpace('\n  ')
          PsiElement(})('}')
    PsiWhiteSpace('\n')
    PsiElement(})('}')
