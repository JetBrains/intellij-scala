object OverloadedWithLong {
  def overloaded(x: Long): Any =
    x

  def overloaded(x: Any): Unit =
    ???
}

object Test {
  def main(args: Array[String]): Unit =
    import OverloadedWithLong.*

    val l: Any = 0 :: Nil
    val r = overloaded(l match {
      case x :: xs => 5
    })
    assert(r == 5L)
}
-----
ScalaFile
  ScObject: OverloadedWithLong
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('OverloadedWithLong')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: overloaded
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('overloaded')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: x
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Long
                    CodeReferenceElement: Long
                      PsiElement(identifier)('Long')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Any
            CodeReferenceElement: Any
              PsiElement(identifier)('Any')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace('\n    ')
          ReferenceExpression: x
            PsiElement(identifier)('x')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: overloaded
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('overloaded')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: x
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Any
                    CodeReferenceElement: Any
                      PsiElement(identifier)('Any')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Unit
            CodeReferenceElement: Unit
              PsiElement(identifier)('Unit')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace('\n    ')
          ReferenceExpression: ???
            PsiElement(identifier)('???')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScObject: Test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: main
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('main')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: args
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('args')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  ParametrizedType: Array[String]
                    SimpleType: Array
                      CodeReferenceElement: Array
                        PsiElement(identifier)('Array')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: String
                        CodeReferenceElement: String
                          PsiElement(identifier)('String')
                      PsiElement(])(']')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Unit
            CodeReferenceElement: Unit
              PsiElement(identifier)('Unit')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          BlockExpression
            PsiWhiteSpace('\n    ')
            ScImportStatement
              PsiElement(import)('import')
              PsiWhiteSpace(' ')
              ImportExpression
                CodeReferenceElement: OverloadedWithLong
                  PsiElement(identifier)('OverloadedWithLong')
                PsiElement(.)('.')
                PsiElement(*)('*')
            PsiWhiteSpace('\n\n    ')
            ScPatternDefinition: l
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              ListOfPatterns
                ReferencePattern: l
                  PsiElement(identifier)('l')
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              SimpleType: Any
                CodeReferenceElement: Any
                  PsiElement(identifier)('Any')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              InfixExpression
                IntegerLiteral
                  PsiElement(integer)('0')
                PsiWhiteSpace(' ')
                ReferenceExpression: ::
                  PsiElement(identifier)('::')
                PsiWhiteSpace(' ')
                ReferenceExpression: Nil
                  PsiElement(identifier)('Nil')
            PsiWhiteSpace('\n    ')
            ScPatternDefinition: r
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              ListOfPatterns
                ReferencePattern: r
                  PsiElement(identifier)('r')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              MethodCall
                ReferenceExpression: overloaded
                  PsiElement(identifier)('overloaded')
                ArgumentList
                  PsiElement(()('(')
                  MatchStatement
                    ReferenceExpression: l
                      PsiElement(identifier)('l')
                    PsiWhiteSpace(' ')
                    PsiElement(match)('match')
                    PsiWhiteSpace(' ')
                    PsiElement({)('{')
                    PsiWhiteSpace('\n      ')
                    CaseClauses
                      CaseClause
                        PsiElement(case)('case')
                        PsiWhiteSpace(' ')
                        InfixPattern
                          ReferencePattern: x
                            PsiElement(identifier)('x')
                          PsiWhiteSpace(' ')
                          CodeReferenceElement: ::
                            PsiElement(identifier)('::')
                          PsiWhiteSpace(' ')
                          ReferencePattern: xs
                            PsiElement(identifier)('xs')
                        PsiWhiteSpace(' ')
                        PsiElement(=>)('=>')
                        PsiWhiteSpace(' ')
                        BlockOfExpressions
                          IntegerLiteral
                            PsiElement(integer)('5')
                    PsiWhiteSpace('\n    ')
                    PsiElement(})('}')
                  PsiElement())(')')
            PsiWhiteSpace('\n    ')
            MethodCall
              ReferenceExpression: assert
                PsiElement(identifier)('assert')
              ArgumentList
                PsiElement(()('(')
                InfixExpression
                  ReferenceExpression: r
                    PsiElement(identifier)('r')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: ==
                    PsiElement(identifier)('==')
                  PsiWhiteSpace(' ')
                  LongLiteral
                    PsiElement(long)('5L')
                PsiElement())(')')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
