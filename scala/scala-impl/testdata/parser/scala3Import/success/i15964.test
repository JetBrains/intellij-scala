// scalac: -Werror
sealed trait T
class C extends T

class AClass
type AType = AClass {
  type TypeMember <: T
}

def list2Product(
  atype: AType,
  opt: atype.TypeMember
): Unit =
  opt match {
    case _: C => ()
  }
-----
ScalaFile
  ScTrait: T
    PsiComment(comment)('// scalac: -Werror')
    PsiWhiteSpace('\n')
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(sealed)('sealed')
    PsiWhiteSpace(' ')
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('T')
    ExtendsBlock
      <empty list>
  PsiWhiteSpace('\n')
  ScClass: C
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('C')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          SimpleType: T
            CodeReferenceElement: T
              PsiElement(identifier)('T')
  PsiWhiteSpace('\n\n')
  ScClass: AClass
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('AClass')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    ExtendsBlock
      <empty list>
  PsiWhiteSpace('\n')
  ScTypeAliasDefinition: AType
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(type)('type')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('AType')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    CompoundType: AClass {
  type TypeMember <: T
}
      SimpleType: AClass
        CodeReferenceElement: AClass
          PsiElement(identifier)('AClass')
      PsiWhiteSpace(' ')
      Refinement
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScTypeAliasDeclaration: TypeMember
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('TypeMember')
          PsiWhiteSpace(' ')
          PsiElement(<:)('<:')
          PsiWhiteSpace(' ')
          SimpleType: T
            CodeReferenceElement: T
              PsiElement(identifier)('T')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScFunctionDefinition: list2Product
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(def)('def')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('list2Product')
    Parameters
      ParametersClause
        PsiElement(()('(')
        PsiWhiteSpace('\n  ')
        Parameter: atype
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(identifier)('atype')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParameterType
            SimpleType: AType
              CodeReferenceElement: AType
                PsiElement(identifier)('AType')
        PsiElement(,)(',')
        PsiWhiteSpace('\n  ')
        Parameter: opt
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(identifier)('opt')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParameterType
            SimpleType: atype.TypeMember
              CodeReferenceElement: atype.TypeMember
                CodeReferenceElement: atype
                  PsiElement(identifier)('atype')
                PsiElement(.)('.')
                PsiElement(identifier)('TypeMember')
        PsiWhiteSpace('\n')
        PsiElement())(')')
    PsiElement(:)(':')
    PsiWhiteSpace(' ')
    SimpleType: Unit
      CodeReferenceElement: Unit
        PsiElement(identifier)('Unit')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace('\n  ')
    MatchStatement
      ReferenceExpression: opt
        PsiElement(identifier)('opt')
      PsiWhiteSpace(' ')
      PsiElement(match)('match')
      PsiWhiteSpace(' ')
      PsiElement({)('{')
      PsiWhiteSpace('\n    ')
      CaseClauses
        CaseClause
          PsiElement(case)('case')
          PsiWhiteSpace(' ')
          Scala3 TypedPattern
            WildcardPattern
              PsiElement(_)('_')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            TypePattern
              SimpleType: C
                CodeReferenceElement: C
                  PsiElement(identifier)('C')
          PsiWhiteSpace(' ')
          PsiElement(=>)('=>')
          PsiWhiteSpace(' ')
          BlockOfExpressions
            UnitExpression
              PsiElement(()('(')
              PsiElement())(')')
      PsiWhiteSpace('\n  ')
      PsiElement(})('}')
