/* Why does this code fail? b has type a.type, so the third
** declaration in S3 should be okay... The compiler writes instead:
**
** found   : S3.this.b.type (with underlying type S3)
** required: S3.this.a.type
**        val c: a.type = b;
**                        ^
** Without declaration 3, everything is fine.
*/
class S3() {
    val a = new S3();
    val b: a.type = a;
    val c: a.type = b;
}
-----
ScalaFile
  ScClass: S3
    PsiComment(BlockComment)('/* Why does this code fail? b has type a.type, so the third\n** declaration in S3 should be okay... The compiler writes instead:\n**\n** found   : S3.this.b.type (with underlying type S3)\n** required: S3.this.a.type\n**        val c: a.type = b;\n**                        ^\n** Without declaration 3, everything is fine.\n*/')
    PsiWhiteSpace('\n')
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('S3')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        ParametersClause
          PsiElement(()('(')
          PsiElement())(')')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n    ')
        ScPatternDefinition: a
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: a
              PsiElement(identifier)('a')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ScNewTemplateDefinition: <anonymous>
            PsiElement(new)('new')
            PsiWhiteSpace(' ')
            ExtendsBlock
              TemplateParents
                ConstructorInvocation
                  SimpleType: S3
                    CodeReferenceElement: S3
                      PsiElement(identifier)('S3')
                  ArgumentList
                    PsiElement(()('(')
                    PsiElement())(')')
        PsiElement(;)(';')
        PsiWhiteSpace('\n    ')
        ScPatternDefinition: b
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: b
              PsiElement(identifier)('b')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: a.type
            CodeReferenceElement: a
              PsiElement(identifier)('a')
            PsiElement(.)('.')
            PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: a
            PsiElement(identifier)('a')
        PsiElement(;)(';')
        PsiWhiteSpace('\n    ')
        ScPatternDefinition: c
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: c
              PsiElement(identifier)('c')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: a.type
            CodeReferenceElement: a
              PsiElement(identifier)('a')
            PsiElement(.)('.')
            PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: b
            PsiElement(identifier)('b')
        PsiElement(;)(';')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
