class Foo {
  def foo(x: Int) = {
    val a: x.type = x
    val b: Foo.type = Foo
    val c: Foo.Bar.type = Foo.Bar
    val d: 1 = 1
    val e: "abc" = "abc"
  }
}

object Foo {
  object Bar
}
-----
ScalaFile
  ScClass: Foo
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Foo')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: foo
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('foo')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: x
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Int
                    CodeReferenceElement: Int
                      PsiElement(identifier)('Int')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          BlockExpression
            PsiElement({)('{')
            PsiWhiteSpace('\n    ')
            ScPatternDefinition: a
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              ListOfPatterns
                ReferencePattern: a
                  PsiElement(identifier)('a')
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              SimpleType: x.type
                CodeReferenceElement: x
                  PsiElement(identifier)('x')
                PsiElement(.)('.')
                PsiElement(type)('type')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              ReferenceExpression: x
                PsiElement(identifier)('x')
            PsiWhiteSpace('\n    ')
            ScPatternDefinition: b
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              ListOfPatterns
                ReferencePattern: b
                  PsiElement(identifier)('b')
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              SimpleType: Foo.type
                CodeReferenceElement: Foo
                  PsiElement(identifier)('Foo')
                PsiElement(.)('.')
                PsiElement(type)('type')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              ReferenceExpression: Foo
                PsiElement(identifier)('Foo')
            PsiWhiteSpace('\n    ')
            ScPatternDefinition: c
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              ListOfPatterns
                ReferencePattern: c
                  PsiElement(identifier)('c')
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              SimpleType: Foo.Bar.type
                CodeReferenceElement: Foo.Bar
                  CodeReferenceElement: Foo
                    PsiElement(identifier)('Foo')
                  PsiElement(.)('.')
                  PsiElement(identifier)('Bar')
                PsiElement(.)('.')
                PsiElement(type)('type')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              ReferenceExpression: Foo.Bar
                ReferenceExpression: Foo
                  PsiElement(identifier)('Foo')
                PsiElement(.)('.')
                PsiElement(identifier)('Bar')
            PsiWhiteSpace('\n    ')
            ScPatternDefinition: d
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              ListOfPatterns
                ReferencePattern: d
                  PsiElement(identifier)('d')
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              LiteralType: 1
                IntegerLiteral
                  PsiElement(integer)('1')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              IntegerLiteral
                PsiElement(integer)('1')
            PsiWhiteSpace('\n    ')
            ScPatternDefinition: e
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              ListOfPatterns
                ReferencePattern: e
                  PsiElement(identifier)('e')
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              LiteralType: "abc"
                StringLiteral
                  PsiElement(string content)('"abc"')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              StringLiteral
                PsiElement(string content)('"abc"')
            PsiWhiteSpace('\n  ')
            PsiElement(})('}')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScObject: Foo
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Foo')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScObject: Bar
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(object)('object')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Bar')
          ExtendsBlock
            <empty list>
        PsiWhiteSpace('\n')
        PsiElement(})('}')
