package scala

package object meta {
  def apply(x: Int): Int = x * x
}

class Test {
  meta { 5 + 4  }

  scala.meta { 3 }

  scala.meta.`package` { 3 }

  // val m1 = meta         // error
  // val m2 = scala.meta   // error
  val m3 = scala.meta.`package`
  val m4 = meta.`package`
}
-----
ScalaFile
  ScPackaging
    PsiElement(package)('package')
    PsiWhiteSpace(' ')
    CodeReferenceElement: scala
      PsiElement(identifier)('scala')
    PsiWhiteSpace('\n\n')
    ScObject: meta
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      PsiElement(package)('package')
      PsiWhiteSpace(' ')
      PsiElement(object)('object')
      PsiWhiteSpace(' ')
      PsiElement(identifier)('meta')
      PsiWhiteSpace(' ')
      ExtendsBlock
        ScTemplateBody
          PsiElement({)('{')
          PsiWhiteSpace('\n  ')
          ScFunctionDefinition: apply
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(def)('def')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('apply')
            Parameters
              ParametersClause
                PsiElement(()('(')
                Parameter: x
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(identifier)('x')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    SimpleType: Int
                      CodeReferenceElement: Int
                        PsiElement(identifier)('Int')
                PsiElement())(')')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            SimpleType: Int
              CodeReferenceElement: Int
                PsiElement(identifier)('Int')
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace(' ')
            InfixExpression
              ReferenceExpression: x
                PsiElement(identifier)('x')
              PsiWhiteSpace(' ')
              ReferenceExpression: *
                PsiElement(identifier)('*')
              PsiWhiteSpace(' ')
              ReferenceExpression: x
                PsiElement(identifier)('x')
          PsiWhiteSpace('\n')
          PsiElement(})('}')
    PsiWhiteSpace('\n\n')
    ScClass: Test
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      PsiElement(class)('class')
      PsiWhiteSpace(' ')
      PsiElement(identifier)('Test')
      PrimaryConstructor
        AnnotationsList
          <empty list>
        Modifiers
          <empty list>
        Parameters
          <empty list>
      PsiWhiteSpace(' ')
      ExtendsBlock
        ScTemplateBody
          PsiElement({)('{')
          PsiWhiteSpace('\n  ')
          MethodCall
            ReferenceExpression: meta
              PsiElement(identifier)('meta')
            PsiWhiteSpace(' ')
            ArgumentList
              BlockExpression
                PsiElement({)('{')
                PsiWhiteSpace(' ')
                InfixExpression
                  IntegerLiteral
                    PsiElement(integer)('5')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: +
                    PsiElement(identifier)('+')
                  PsiWhiteSpace(' ')
                  IntegerLiteral
                    PsiElement(integer)('4')
                PsiWhiteSpace('  ')
                PsiElement(})('}')
          PsiWhiteSpace('\n\n  ')
          MethodCall
            ReferenceExpression: scala.meta
              ReferenceExpression: scala
                PsiElement(identifier)('scala')
              PsiElement(.)('.')
              PsiElement(identifier)('meta')
            PsiWhiteSpace(' ')
            ArgumentList
              BlockExpression
                PsiElement({)('{')
                PsiWhiteSpace(' ')
                IntegerLiteral
                  PsiElement(integer)('3')
                PsiWhiteSpace(' ')
                PsiElement(})('}')
          PsiWhiteSpace('\n\n  ')
          MethodCall
            ReferenceExpression: scala.meta.`package`
              ReferenceExpression: scala.meta
                ReferenceExpression: scala
                  PsiElement(identifier)('scala')
                PsiElement(.)('.')
                PsiElement(identifier)('meta')
              PsiElement(.)('.')
              PsiElement(identifier)('`package`')
            PsiWhiteSpace(' ')
            ArgumentList
              BlockExpression
                PsiElement({)('{')
                PsiWhiteSpace(' ')
                IntegerLiteral
                  PsiElement(integer)('3')
                PsiWhiteSpace(' ')
                PsiElement(})('}')
          PsiWhiteSpace('\n\n  ')
          ScPatternDefinition: m3
            PsiComment(comment)('// val m1 = meta         // error')
            PsiWhiteSpace('\n  ')
            PsiComment(comment)('// val m2 = scala.meta   // error')
            PsiWhiteSpace('\n  ')
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(val)('val')
            PsiWhiteSpace(' ')
            ListOfPatterns
              ReferencePattern: m3
                PsiElement(identifier)('m3')
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace(' ')
            ReferenceExpression: scala.meta.`package`
              ReferenceExpression: scala.meta
                ReferenceExpression: scala
                  PsiElement(identifier)('scala')
                PsiElement(.)('.')
                PsiElement(identifier)('meta')
              PsiElement(.)('.')
              PsiElement(identifier)('`package`')
          PsiWhiteSpace('\n  ')
          ScPatternDefinition: m4
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(val)('val')
            PsiWhiteSpace(' ')
            ListOfPatterns
              ReferencePattern: m4
                PsiElement(identifier)('m4')
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace(' ')
            ReferenceExpression: meta.`package`
              ReferenceExpression: meta
                PsiElement(identifier)('meta')
              PsiElement(.)('.')
              PsiElement(identifier)('`package`')
          PsiWhiteSpace('\n')
          PsiElement(})('}')
