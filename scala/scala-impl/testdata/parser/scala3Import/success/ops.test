object Test {

  val num = implicitly[Integral[Int]]
  val ops = num.mkOrderingOps
  ops(9) < 10

}
-----
ScalaFile
  ScObject: Test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n\n  ')
        ScPatternDefinition: num
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: num
              PsiElement(identifier)('num')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          GenericCall
            ReferenceExpression: implicitly
              PsiElement(identifier)('implicitly')
            TypeArgumentsList
              PsiElement([)('[')
              ParametrizedType: Integral[Int]
                SimpleType: Integral
                  CodeReferenceElement: Integral
                    PsiElement(identifier)('Integral')
                TypeArgumentsList
                  PsiElement([)('[')
                  SimpleType: Int
                    CodeReferenceElement: Int
                      PsiElement(identifier)('Int')
                  PsiElement(])(']')
              PsiElement(])(']')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: ops
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: ops
              PsiElement(identifier)('ops')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: num.mkOrderingOps
            ReferenceExpression: num
              PsiElement(identifier)('num')
            PsiElement(.)('.')
            PsiElement(identifier)('mkOrderingOps')
        PsiWhiteSpace('\n  ')
        InfixExpression
          MethodCall
            ReferenceExpression: ops
              PsiElement(identifier)('ops')
            ArgumentList
              PsiElement(()('(')
              IntegerLiteral
                PsiElement(integer)('9')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          ReferenceExpression: <
            PsiElement(identifier)('<')
          PsiWhiteSpace(' ')
          IntegerLiteral
            PsiElement(integer)('10')
        PsiWhiteSpace('\n\n')
        PsiElement(})('}')
