class Test {
  trait Foo[A <: Foo[A]]

  trait FooWrapper:
    self =>
    type A <: Foo[A]
    def doThing(foo: FooWrapper): FooWrapper { type A = self.A } = ???
  end FooWrapper

  val foos: scala.Seq[FooWrapper] = ???
  val newFoo = foos.foldLeft(??? : FooWrapper)((topFoo, foo) => topFoo.doThing(foo))
}
-----
ScalaFile
  ScClass: Test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScTrait: Foo
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(trait)('trait')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Foo')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: A
              PsiElement(identifier)('A')
              PsiWhiteSpace(' ')
              PsiElement(<:)('<:')
              PsiWhiteSpace(' ')
              ParametrizedType: Foo[A]
                SimpleType: Foo
                  CodeReferenceElement: Foo
                    PsiElement(identifier)('Foo')
                TypeArgumentsList
                  PsiElement([)('[')
                  SimpleType: A
                    CodeReferenceElement: A
                      PsiElement(identifier)('A')
                  PsiElement(])(']')
            PsiElement(])(']')
          ExtendsBlock
            <empty list>
        PsiWhiteSpace('\n\n  ')
        ScTrait: FooWrapper
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(trait)('trait')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('FooWrapper')
          ExtendsBlock
            ScTemplateBody
              PsiElement(:)(':')
              PsiWhiteSpace('\n    ')
              SelfType: self
                PsiElement(identifier)('self')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
              PsiWhiteSpace('\n    ')
              ScTypeAliasDeclaration: A
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(type)('type')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('A')
                PsiWhiteSpace(' ')
                PsiElement(<:)('<:')
                PsiWhiteSpace(' ')
                ParametrizedType: Foo[A]
                  SimpleType: Foo
                    CodeReferenceElement: Foo
                      PsiElement(identifier)('Foo')
                  TypeArgumentsList
                    PsiElement([)('[')
                    SimpleType: A
                      CodeReferenceElement: A
                        PsiElement(identifier)('A')
                    PsiElement(])(']')
              PsiWhiteSpace('\n    ')
              ScFunctionDefinition: doThing
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(def)('def')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('doThing')
                Parameters
                  ParametersClause
                    PsiElement(()('(')
                    Parameter: foo
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(identifier)('foo')
                      PsiElement(:)(':')
                      PsiWhiteSpace(' ')
                      ParameterType
                        SimpleType: FooWrapper
                          CodeReferenceElement: FooWrapper
                            PsiElement(identifier)('FooWrapper')
                    PsiElement())(')')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                CompoundType: FooWrapper { type A = self.A }
                  SimpleType: FooWrapper
                    CodeReferenceElement: FooWrapper
                      PsiElement(identifier)('FooWrapper')
                  PsiWhiteSpace(' ')
                  Refinement
                    PsiElement({)('{')
                    PsiWhiteSpace(' ')
                    ScTypeAliasDefinition: A
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(type)('type')
                      PsiWhiteSpace(' ')
                      PsiElement(identifier)('A')
                      PsiWhiteSpace(' ')
                      PsiElement(=)('=')
                      PsiWhiteSpace(' ')
                      SimpleType: self.A
                        CodeReferenceElement: self.A
                          CodeReferenceElement: self
                            PsiElement(identifier)('self')
                          PsiElement(.)('.')
                          PsiElement(identifier)('A')
                    PsiWhiteSpace(' ')
                    PsiElement(})('}')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                ReferenceExpression: ???
                  PsiElement(identifier)('???')
              PsiWhiteSpace('\n  ')
              End: FooWrapper
                PsiElement(end)('end')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('FooWrapper')
        PsiWhiteSpace('\n\n  ')
        ScPatternDefinition: foos
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: foos
              PsiElement(identifier)('foos')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: scala.Seq[FooWrapper]
            SimpleType: scala.Seq
              CodeReferenceElement: scala.Seq
                CodeReferenceElement: scala
                  PsiElement(identifier)('scala')
                PsiElement(.)('.')
                PsiElement(identifier)('Seq')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: FooWrapper
                CodeReferenceElement: FooWrapper
                  PsiElement(identifier)('FooWrapper')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: ???
            PsiElement(identifier)('???')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: newFoo
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: newFoo
              PsiElement(identifier)('newFoo')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            MethodCall
              ReferenceExpression: foos.foldLeft
                ReferenceExpression: foos
                  PsiElement(identifier)('foos')
                PsiElement(.)('.')
                PsiElement(identifier)('foldLeft')
              ArgumentList
                PsiElement(()('(')
                TypedExpression
                  ReferenceExpression: ???
                    PsiElement(identifier)('???')
                  PsiWhiteSpace(' ')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  SimpleType: FooWrapper
                    CodeReferenceElement: FooWrapper
                      PsiElement(identifier)('FooWrapper')
                PsiElement())(')')
            ArgumentList
              PsiElement(()('(')
              FunctionExpression
                Parameters
                  ParametersClause
                    PsiElement(()('(')
                    Parameter: topFoo
                      AnnotationsList
                        <empty list>
                      PsiElement(identifier)('topFoo')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    Parameter: foo
                      AnnotationsList
                        <empty list>
                      PsiElement(identifier)('foo')
                    PsiElement())(')')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                MethodCall
                  ReferenceExpression: topFoo.doThing
                    ReferenceExpression: topFoo
                      PsiElement(identifier)('topFoo')
                    PsiElement(.)('.')
                    PsiElement(identifier)('doThing')
                  ArgumentList
                    PsiElement(()('(')
                    ReferenceExpression: foo
                      PsiElement(identifier)('foo')
                    PsiElement())(')')
              PsiElement())(')')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
