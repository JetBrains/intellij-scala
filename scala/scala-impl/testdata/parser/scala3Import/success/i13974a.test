
object Test2:
  class Foo[+X]
  enum SUB[-S, +T]:
    case Refl[U]() extends SUB[U, U]
  def f[A, B, C](sub : A SUB (B,C)) =
    given Foo[A] = ???
    val x = summon[Foo[A]]
    sub match
      case SUB.Refl() =>
        val c: Foo[(B, C)] = summon[Foo[A]]
        summon[Foo[(B, C)]]
-----
ScalaFile
  ScObject: Test2
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test2')
    ExtendsBlock
      ScTemplateBody
        PsiElement(:)(':')
        PsiWhiteSpace('\n  ')
        ScClass: Foo
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(class)('class')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Foo')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: X
              PsiElement(identifier)('+')
              PsiElement(identifier)('X')
            PsiElement(])(']')
          PrimaryConstructor
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            Parameters
              <empty list>
          ExtendsBlock
            <empty list>
        PsiWhiteSpace('\n  ')
        ScEnum: SUB
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(enum)('enum')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('SUB')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: S
              PsiElement(identifier)('-')
              PsiElement(identifier)('S')
            PsiElement(,)(',')
            PsiWhiteSpace(' ')
            TypeParameter: T
              PsiElement(identifier)('+')
              PsiElement(identifier)('T')
            PsiElement(])(']')
          PrimaryConstructor
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            Parameters
              <empty list>
          ExtendsBlock
            ScTemplateBody
              PsiElement(:)(':')
              PsiWhiteSpace('\n    ')
              ScEnumCases: Refl
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                ScEnumClassCase: Refl
                  PsiElement(identifier)('Refl')
                  TypeParameterClause
                    PsiElement([)('[')
                    TypeParameter: U
                      PsiElement(identifier)('U')
                    PsiElement(])(']')
                  PrimaryConstructor
                    AnnotationsList
                      <empty list>
                    Modifiers
                      <empty list>
                    Parameters
                      ParametersClause
                        PsiElement(()('(')
                        PsiElement())(')')
                  PsiWhiteSpace(' ')
                  ExtendsBlock
                    PsiElement(extends)('extends')
                    PsiWhiteSpace(' ')
                    TemplateParents
                      ConstructorInvocation
                        ParametrizedType: SUB[U, U]
                          SimpleType: SUB
                            CodeReferenceElement: SUB
                              PsiElement(identifier)('SUB')
                          TypeArgumentsList
                            PsiElement([)('[')
                            SimpleType: U
                              CodeReferenceElement: U
                                PsiElement(identifier)('U')
                            PsiElement(,)(',')
                            PsiWhiteSpace(' ')
                            SimpleType: U
                              CodeReferenceElement: U
                                PsiElement(identifier)('U')
                            PsiElement(])(']')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: f
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('f')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: A
              PsiElement(identifier)('A')
            PsiElement(,)(',')
            PsiWhiteSpace(' ')
            TypeParameter: B
              PsiElement(identifier)('B')
            PsiElement(,)(',')
            PsiWhiteSpace(' ')
            TypeParameter: C
              PsiElement(identifier)('C')
            PsiElement(])(']')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: sub
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('sub')
                PsiWhiteSpace(' ')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  InfixType: A SUB (B,C)
                    SimpleType: A
                      CodeReferenceElement: A
                        PsiElement(identifier)('A')
                    PsiWhiteSpace(' ')
                    CodeReferenceElement: SUB
                      PsiElement(identifier)('SUB')
                    PsiWhiteSpace(' ')
                    TupleType: (B,C)
                      PsiElement(()('(')
                      TypesList
                        SimpleType: B
                          CodeReferenceElement: B
                            PsiElement(identifier)('B')
                        PsiElement(,)(',')
                        SimpleType: C
                          CodeReferenceElement: C
                            PsiElement(identifier)('C')
                      PsiElement())(')')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          BlockExpression
            PsiWhiteSpace('\n    ')
            ScGivenAliasDefinition: given_Foo_A
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(given)('given')
              PsiWhiteSpace(' ')
              ParametrizedType: Foo[A]
                SimpleType: Foo
                  CodeReferenceElement: Foo
                    PsiElement(identifier)('Foo')
                TypeArgumentsList
                  PsiElement([)('[')
                  SimpleType: A
                    CodeReferenceElement: A
                      PsiElement(identifier)('A')
                  PsiElement(])(']')
              Parameters
                <empty list>
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              ReferenceExpression: ???
                PsiElement(identifier)('???')
            PsiWhiteSpace('\n    ')
            ScPatternDefinition: x
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              ListOfPatterns
                ReferencePattern: x
                  PsiElement(identifier)('x')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              GenericCall
                ReferenceExpression: summon
                  PsiElement(identifier)('summon')
                TypeArgumentsList
                  PsiElement([)('[')
                  ParametrizedType: Foo[A]
                    SimpleType: Foo
                      CodeReferenceElement: Foo
                        PsiElement(identifier)('Foo')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: A
                        CodeReferenceElement: A
                          PsiElement(identifier)('A')
                      PsiElement(])(']')
                  PsiElement(])(']')
            PsiWhiteSpace('\n    ')
            MatchStatement
              ReferenceExpression: sub
                PsiElement(identifier)('sub')
              PsiWhiteSpace(' ')
              PsiElement(match)('match')
              PsiWhiteSpace('\n      ')
              CaseClauses
                CaseClause
                  PsiElement(case)('case')
                  PsiWhiteSpace(' ')
                  ConstructorPattern
                    CodeReferenceElement: SUB.Refl
                      CodeReferenceElement: SUB
                        PsiElement(identifier)('SUB')
                      PsiElement(.)('.')
                      PsiElement(identifier)('Refl')
                    Pattern Argument List
                      PsiElement(()('(')
                      PsiElement())(')')
                  PsiWhiteSpace(' ')
                  PsiElement(=>)('=>')
                  PsiWhiteSpace('\n        ')
                  BlockOfExpressions
                    ScPatternDefinition: c
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(val)('val')
                      PsiWhiteSpace(' ')
                      ListOfPatterns
                        ReferencePattern: c
                          PsiElement(identifier)('c')
                      PsiElement(:)(':')
                      PsiWhiteSpace(' ')
                      ParametrizedType: Foo[(B, C)]
                        SimpleType: Foo
                          CodeReferenceElement: Foo
                            PsiElement(identifier)('Foo')
                        TypeArgumentsList
                          PsiElement([)('[')
                          TupleType: (B, C)
                            PsiElement(()('(')
                            TypesList
                              SimpleType: B
                                CodeReferenceElement: B
                                  PsiElement(identifier)('B')
                              PsiElement(,)(',')
                              PsiWhiteSpace(' ')
                              SimpleType: C
                                CodeReferenceElement: C
                                  PsiElement(identifier)('C')
                            PsiElement())(')')
                          PsiElement(])(']')
                      PsiWhiteSpace(' ')
                      PsiElement(=)('=')
                      PsiWhiteSpace(' ')
                      GenericCall
                        ReferenceExpression: summon
                          PsiElement(identifier)('summon')
                        TypeArgumentsList
                          PsiElement([)('[')
                          ParametrizedType: Foo[A]
                            SimpleType: Foo
                              CodeReferenceElement: Foo
                                PsiElement(identifier)('Foo')
                            TypeArgumentsList
                              PsiElement([)('[')
                              SimpleType: A
                                CodeReferenceElement: A
                                  PsiElement(identifier)('A')
                              PsiElement(])(']')
                          PsiElement(])(']')
                    PsiWhiteSpace('\n        ')
                    GenericCall
                      ReferenceExpression: summon
                        PsiElement(identifier)('summon')
                      TypeArgumentsList
                        PsiElement([)('[')
                        ParametrizedType: Foo[(B, C)]
                          SimpleType: Foo
                            CodeReferenceElement: Foo
                              PsiElement(identifier)('Foo')
                          TypeArgumentsList
                            PsiElement([)('[')
                            TupleType: (B, C)
                              PsiElement(()('(')
                              TypesList
                                SimpleType: B
                                  CodeReferenceElement: B
                                    PsiElement(identifier)('B')
                                PsiElement(,)(',')
                                PsiWhiteSpace(' ')
                                SimpleType: C
                                  CodeReferenceElement: C
                                    PsiElement(identifier)('C')
                              PsiElement())(')')
                            PsiElement(])(']')
                        PsiElement(])(']')
