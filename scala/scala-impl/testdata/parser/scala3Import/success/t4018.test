trait M[V[_]]

class Cls[V[_]](c: M[V])

object Cls{
  def apply[V[_]](c: M[V]): Cls[V] = new Cls[V](c)
}

object test {
  val c: M[Option] = new M[Option] {}
  new Cls(c)         // does not infer.
  new Cls[Option](c) // okay
  Cls(c)             // okay
}

-----
ScalaFile
  ScTrait: M
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('M')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: V
        PsiElement(identifier)('V')
        TypeParameterClause
          PsiElement([)('[')
          TypeParameter: _
            PsiElement(_)('_')
          PsiElement(])(']')
      PsiElement(])(']')
    ExtendsBlock
      <empty list>
  PsiWhiteSpace('\n\n')
  ScClass: Cls
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Cls')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: V
        PsiElement(identifier)('V')
        TypeParameterClause
          PsiElement([)('[')
          TypeParameter: _
            PsiElement(_)('_')
          PsiElement(])(']')
      PsiElement(])(']')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        ParametersClause
          PsiElement(()('(')
          ClassParameter: c
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(identifier)('c')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            ParameterType
              ParametrizedType: M[V]
                SimpleType: M
                  CodeReferenceElement: M
                    PsiElement(identifier)('M')
                TypeArgumentsList
                  PsiElement([)('[')
                  SimpleType: V
                    CodeReferenceElement: V
                      PsiElement(identifier)('V')
                  PsiElement(])(']')
          PsiElement())(')')
    ExtendsBlock
      <empty list>
  PsiWhiteSpace('\n\n')
  ScObject: Cls
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Cls')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: apply
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('apply')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: V
              PsiElement(identifier)('V')
              TypeParameterClause
                PsiElement([)('[')
                TypeParameter: _
                  PsiElement(_)('_')
                PsiElement(])(']')
            PsiElement(])(']')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: c
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('c')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  ParametrizedType: M[V]
                    SimpleType: M
                      CodeReferenceElement: M
                        PsiElement(identifier)('M')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: V
                        CodeReferenceElement: V
                          PsiElement(identifier)('V')
                      PsiElement(])(']')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: Cls[V]
            SimpleType: Cls
              CodeReferenceElement: Cls
                PsiElement(identifier)('Cls')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: V
                CodeReferenceElement: V
                  PsiElement(identifier)('V')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ScNewTemplateDefinition: <anonymous>
            PsiElement(new)('new')
            PsiWhiteSpace(' ')
            ExtendsBlock
              TemplateParents
                ConstructorInvocation
                  ParametrizedType: Cls[V]
                    SimpleType: Cls
                      CodeReferenceElement: Cls
                        PsiElement(identifier)('Cls')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: V
                        CodeReferenceElement: V
                          PsiElement(identifier)('V')
                      PsiElement(])(']')
                  ArgumentList
                    PsiElement(()('(')
                    ReferenceExpression: c
                      PsiElement(identifier)('c')
                    PsiElement())(')')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScObject: test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('test')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: c
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: c
              PsiElement(identifier)('c')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: M[Option]
            SimpleType: M
              CodeReferenceElement: M
                PsiElement(identifier)('M')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: Option
                CodeReferenceElement: Option
                  PsiElement(identifier)('Option')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ScNewTemplateDefinition: <anonymous>
            PsiElement(new)('new')
            PsiWhiteSpace(' ')
            ExtendsBlock
              TemplateParents
                ConstructorInvocation
                  ParametrizedType: M[Option]
                    SimpleType: M
                      CodeReferenceElement: M
                        PsiElement(identifier)('M')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: Option
                        CodeReferenceElement: Option
                          PsiElement(identifier)('Option')
                      PsiElement(])(']')
              PsiWhiteSpace(' ')
              ScTemplateBody
                PsiElement({)('{')
                PsiElement(})('}')
        PsiWhiteSpace('\n  ')
        ScNewTemplateDefinition: <anonymous>
          PsiElement(new)('new')
          PsiWhiteSpace(' ')
          ExtendsBlock
            TemplateParents
              ConstructorInvocation
                SimpleType: Cls
                  CodeReferenceElement: Cls
                    PsiElement(identifier)('Cls')
                ArgumentList
                  PsiElement(()('(')
                  ReferenceExpression: c
                    PsiElement(identifier)('c')
                  PsiElement())(')')
        PsiWhiteSpace('         ')
        PsiComment(comment)('// does not infer.')
        PsiWhiteSpace('\n  ')
        ScNewTemplateDefinition: <anonymous>
          PsiElement(new)('new')
          PsiWhiteSpace(' ')
          ExtendsBlock
            TemplateParents
              ConstructorInvocation
                ParametrizedType: Cls[Option]
                  SimpleType: Cls
                    CodeReferenceElement: Cls
                      PsiElement(identifier)('Cls')
                  TypeArgumentsList
                    PsiElement([)('[')
                    SimpleType: Option
                      CodeReferenceElement: Option
                        PsiElement(identifier)('Option')
                    PsiElement(])(']')
                ArgumentList
                  PsiElement(()('(')
                  ReferenceExpression: c
                    PsiElement(identifier)('c')
                  PsiElement())(')')
        PsiWhiteSpace(' ')
        PsiComment(comment)('// okay')
        PsiWhiteSpace('\n  ')
        MethodCall
          ReferenceExpression: Cls
            PsiElement(identifier)('Cls')
          ArgumentList
            PsiElement(()('(')
            ReferenceExpression: c
              PsiElement(identifier)('c')
            PsiElement())(')')
        PsiWhiteSpace('             ')
        PsiComment(comment)('// okay')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
