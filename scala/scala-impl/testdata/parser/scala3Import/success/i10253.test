object test:
  def foo(qc: QC): Unit =
    object treeMap extends qc.reflect.TreeMap

trait QC:
  val reflect: Reflection
  trait Reflection:
    trait TreeMap:
      def transformTree: Unit = ???
-----
ScalaFile
  ScObject: test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('test')
    ExtendsBlock
      ScTemplateBody
        PsiElement(:)(':')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: foo
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('foo')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: qc
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('qc')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: QC
                    CodeReferenceElement: QC
                      PsiElement(identifier)('QC')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Unit
            CodeReferenceElement: Unit
              PsiElement(identifier)('Unit')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          BlockExpression
            PsiWhiteSpace('\n    ')
            ScObject: treeMap
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(object)('object')
              PsiWhiteSpace(' ')
              PsiElement(identifier)('treeMap')
              PsiWhiteSpace(' ')
              ExtendsBlock
                PsiElement(extends)('extends')
                PsiWhiteSpace(' ')
                TemplateParents
                  ConstructorInvocation
                    SimpleType: qc.reflect.TreeMap
                      CodeReferenceElement: qc.reflect.TreeMap
                        CodeReferenceElement: qc.reflect
                          CodeReferenceElement: qc
                            PsiElement(identifier)('qc')
                          PsiElement(.)('.')
                          PsiElement(identifier)('reflect')
                        PsiElement(.)('.')
                        PsiElement(identifier)('TreeMap')
  PsiWhiteSpace('\n\n')
  ScTrait: QC
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('QC')
    ExtendsBlock
      ScTemplateBody
        PsiElement(:)(':')
        PsiWhiteSpace('\n  ')
        ScValueDeclaration: reflect
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfIdentifiers
            Field identifier: reflect
              PsiElement(identifier)('reflect')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Reflection
            CodeReferenceElement: Reflection
              PsiElement(identifier)('Reflection')
        PsiWhiteSpace('\n  ')
        ScTrait: Reflection
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(trait)('trait')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Reflection')
          ExtendsBlock
            ScTemplateBody
              PsiElement(:)(':')
              PsiWhiteSpace('\n    ')
              ScTrait: TreeMap
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(trait)('trait')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('TreeMap')
                ExtendsBlock
                  ScTemplateBody
                    PsiElement(:)(':')
                    PsiWhiteSpace('\n      ')
                    ScFunctionDefinition: transformTree
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(def)('def')
                      PsiWhiteSpace(' ')
                      PsiElement(identifier)('transformTree')
                      Parameters
                        <empty list>
                      PsiElement(:)(':')
                      PsiWhiteSpace(' ')
                      SimpleType: Unit
                        CodeReferenceElement: Unit
                          PsiElement(identifier)('Unit')
                      PsiWhiteSpace(' ')
                      PsiElement(=)('=')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: ???
                        PsiElement(identifier)('???')
