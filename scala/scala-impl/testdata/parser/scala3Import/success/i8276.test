object NOTHING

inline given [A]: Conversion[NOTHING.type, Option[A]] = _ => None

def apply[A](p: Vector[A], o: Option[A] = NOTHING): Unit = ???

def test = apply[String](Vector.empty)
-----
ScalaFile
  ScObject: NOTHING
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('NOTHING')
    ExtendsBlock
      <empty list>
  PsiWhiteSpace('\n\n')
  ScGivenAliasDefinition: given_Conversion_NOTHING_type_Option
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(inline)('inline')
    PsiWhiteSpace(' ')
    PsiElement(given)('given')
    PsiWhiteSpace(' ')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: A
        PsiElement(identifier)('A')
      PsiElement(])(']')
    Parameters
      <empty list>
    PsiElement(:)(':')
    PsiWhiteSpace(' ')
    ParametrizedType: Conversion[NOTHING.type, Option[A]]
      SimpleType: Conversion
        CodeReferenceElement: Conversion
          PsiElement(identifier)('Conversion')
      TypeArgumentsList
        PsiElement([)('[')
        SimpleType: NOTHING.type
          CodeReferenceElement: NOTHING
            PsiElement(identifier)('NOTHING')
          PsiElement(.)('.')
          PsiElement(type)('type')
        PsiElement(,)(',')
        PsiWhiteSpace(' ')
        ParametrizedType: Option[A]
          SimpleType: Option
            CodeReferenceElement: Option
              PsiElement(identifier)('Option')
          TypeArgumentsList
            PsiElement([)('[')
            SimpleType: A
              CodeReferenceElement: A
                PsiElement(identifier)('A')
            PsiElement(])(']')
        PsiElement(])(']')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    FunctionExpression
      Parameters
        ParametersClause
          Parameter: _
            PsiElement(_)('_')
      PsiWhiteSpace(' ')
      PsiElement(=>)('=>')
      PsiWhiteSpace(' ')
      ReferenceExpression: None
        PsiElement(identifier)('None')
  PsiWhiteSpace('\n\n')
  ScFunctionDefinition: apply
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(def)('def')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('apply')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: A
        PsiElement(identifier)('A')
      PsiElement(])(']')
    Parameters
      ParametersClause
        PsiElement(()('(')
        Parameter: p
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(identifier)('p')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParameterType
            ParametrizedType: Vector[A]
              SimpleType: Vector
                CodeReferenceElement: Vector
                  PsiElement(identifier)('Vector')
              TypeArgumentsList
                PsiElement([)('[')
                SimpleType: A
                  CodeReferenceElement: A
                    PsiElement(identifier)('A')
                PsiElement(])(']')
        PsiElement(,)(',')
        PsiWhiteSpace(' ')
        Parameter: o
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(identifier)('o')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParameterType
            ParametrizedType: Option[A]
              SimpleType: Option
                CodeReferenceElement: Option
                  PsiElement(identifier)('Option')
              TypeArgumentsList
                PsiElement([)('[')
                SimpleType: A
                  CodeReferenceElement: A
                    PsiElement(identifier)('A')
                PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: NOTHING
            PsiElement(identifier)('NOTHING')
        PsiElement())(')')
    PsiElement(:)(':')
    PsiWhiteSpace(' ')
    SimpleType: Unit
      CodeReferenceElement: Unit
        PsiElement(identifier)('Unit')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    ReferenceExpression: ???
      PsiElement(identifier)('???')
  PsiWhiteSpace('\n\n')
  ScFunctionDefinition: test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(def)('def')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('test')
    Parameters
      <empty list>
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    MethodCall
      GenericCall
        ReferenceExpression: apply
          PsiElement(identifier)('apply')
        TypeArgumentsList
          PsiElement([)('[')
          SimpleType: String
            CodeReferenceElement: String
              PsiElement(identifier)('String')
          PsiElement(])(']')
      ArgumentList
        PsiElement(()('(')
        ReferenceExpression: Vector.empty
          ReferenceExpression: Vector
            PsiElement(identifier)('Vector')
          PsiElement(.)('.')
          PsiElement(identifier)('empty')
        PsiElement())(')')
