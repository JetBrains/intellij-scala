trait Rep[a] {
  def rep[m[x]]: m[a] // typedTypeApply must use asSeenFrom to adapt the return type
   // since rep is called on x: Rep[t]
   // a must become t
}

case class ShowBin[b](app: b => String)

object foo {
  def showBin[t](x: Rep[t], y: t): String = {
    val r: ShowBin[t] = x.rep[ShowBin]
    r.app(y)
  }
}
-----
ScalaFile
  ScTrait: Rep
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Rep')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: a
        PsiElement(identifier)('a')
      PsiElement(])(']')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDeclaration: rep
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('rep')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: m
              PsiElement(identifier)('m')
              TypeParameterClause
                PsiElement([)('[')
                TypeParameter: x
                  PsiElement(identifier)('x')
                PsiElement(])(']')
            PsiElement(])(']')
          Parameters
            <empty list>
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: m[a]
            SimpleType: m
              CodeReferenceElement: m
                PsiElement(identifier)('m')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: a
                CodeReferenceElement: a
                  PsiElement(identifier)('a')
              PsiElement(])(']')
        PsiWhiteSpace(' ')
        PsiComment(comment)('// typedTypeApply must use asSeenFrom to adapt the return type')
        PsiWhiteSpace('\n   ')
        PsiComment(comment)('// since rep is called on x: Rep[t]')
        PsiWhiteSpace('\n   ')
        PsiComment(comment)('// a must become t')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScClass: ShowBin
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(case)('case')
    PsiWhiteSpace(' ')
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('ShowBin')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: b
        PsiElement(identifier)('b')
      PsiElement(])(']')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        ParametersClause
          PsiElement(()('(')
          ClassParameter: app
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(identifier)('app')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            ParameterType
              FunctionalType: b => String
                SimpleType: b
                  CodeReferenceElement: b
                    PsiElement(identifier)('b')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                SimpleType: String
                  CodeReferenceElement: String
                    PsiElement(identifier)('String')
          PsiElement())(')')
    ExtendsBlock
      <empty list>
  PsiWhiteSpace('\n\n')
  ScObject: foo
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('foo')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: showBin
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('showBin')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: t
              PsiElement(identifier)('t')
            PsiElement(])(']')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: x
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  ParametrizedType: Rep[t]
                    SimpleType: Rep
                      CodeReferenceElement: Rep
                        PsiElement(identifier)('Rep')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: t
                        CodeReferenceElement: t
                          PsiElement(identifier)('t')
                      PsiElement(])(']')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              Parameter: y
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('y')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: t
                    CodeReferenceElement: t
                      PsiElement(identifier)('t')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: String
            CodeReferenceElement: String
              PsiElement(identifier)('String')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          BlockExpression
            PsiElement({)('{')
            PsiWhiteSpace('\n    ')
            ScPatternDefinition: r
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              ListOfPatterns
                ReferencePattern: r
                  PsiElement(identifier)('r')
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              ParametrizedType: ShowBin[t]
                SimpleType: ShowBin
                  CodeReferenceElement: ShowBin
                    PsiElement(identifier)('ShowBin')
                TypeArgumentsList
                  PsiElement([)('[')
                  SimpleType: t
                    CodeReferenceElement: t
                      PsiElement(identifier)('t')
                  PsiElement(])(']')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              GenericCall
                ReferenceExpression: x.rep
                  ReferenceExpression: x
                    PsiElement(identifier)('x')
                  PsiElement(.)('.')
                  PsiElement(identifier)('rep')
                TypeArgumentsList
                  PsiElement([)('[')
                  SimpleType: ShowBin
                    CodeReferenceElement: ShowBin
                      PsiElement(identifier)('ShowBin')
                  PsiElement(])(']')
            PsiWhiteSpace('\n    ')
            MethodCall
              ReferenceExpression: r.app
                ReferenceExpression: r
                  PsiElement(identifier)('r')
                PsiElement(.)('.')
                PsiElement(identifier)('app')
              ArgumentList
                PsiElement(()('(')
                ReferenceExpression: y
                  PsiElement(identifier)('y')
                PsiElement())(')')
            PsiWhiteSpace('\n  ')
            PsiElement(})('}')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
