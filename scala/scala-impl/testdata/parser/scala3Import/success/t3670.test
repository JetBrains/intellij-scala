class A {
  val n = {
        val z = {
            lazy val bb = 1
            bb
        }
        val a = {
            lazy val cc = 2
            cc
        }
        lazy val b = {
            lazy val dd = 3
            dd
        }
        z
    }
}

class B {
  locally {
    lazy val ms = "as"
    ms
  }
}

class C {
  val things = List("things")
  if (things.size < 100) {
    lazy val msg = "foo"
    msg
  }
}

class D {
  val things = List("things")
  if (things.size < 100) {
    if (things.size > 10) {
      lazy val msg = "foo"
      msg
    }
  }
}

-----
ScalaFile
  ScClass: A
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('A')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: n
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: n
              PsiElement(identifier)('n')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          BlockExpression
            PsiElement({)('{')
            PsiWhiteSpace('\n        ')
            ScPatternDefinition: z
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              ListOfPatterns
                ReferencePattern: z
                  PsiElement(identifier)('z')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              BlockExpression
                PsiElement({)('{')
                PsiWhiteSpace('\n            ')
                ScPatternDefinition: bb
                  AnnotationsList
                    <empty list>
                  Modifiers
                    PsiElement(lazy)('lazy')
                  PsiWhiteSpace(' ')
                  PsiElement(val)('val')
                  PsiWhiteSpace(' ')
                  ListOfPatterns
                    ReferencePattern: bb
                      PsiElement(identifier)('bb')
                  PsiWhiteSpace(' ')
                  PsiElement(=)('=')
                  PsiWhiteSpace(' ')
                  IntegerLiteral
                    PsiElement(integer)('1')
                PsiWhiteSpace('\n            ')
                ReferenceExpression: bb
                  PsiElement(identifier)('bb')
                PsiWhiteSpace('\n        ')
                PsiElement(})('}')
            PsiWhiteSpace('\n        ')
            ScPatternDefinition: a
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              ListOfPatterns
                ReferencePattern: a
                  PsiElement(identifier)('a')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              BlockExpression
                PsiElement({)('{')
                PsiWhiteSpace('\n            ')
                ScPatternDefinition: cc
                  AnnotationsList
                    <empty list>
                  Modifiers
                    PsiElement(lazy)('lazy')
                  PsiWhiteSpace(' ')
                  PsiElement(val)('val')
                  PsiWhiteSpace(' ')
                  ListOfPatterns
                    ReferencePattern: cc
                      PsiElement(identifier)('cc')
                  PsiWhiteSpace(' ')
                  PsiElement(=)('=')
                  PsiWhiteSpace(' ')
                  IntegerLiteral
                    PsiElement(integer)('2')
                PsiWhiteSpace('\n            ')
                ReferenceExpression: cc
                  PsiElement(identifier)('cc')
                PsiWhiteSpace('\n        ')
                PsiElement(})('}')
            PsiWhiteSpace('\n        ')
            ScPatternDefinition: b
              AnnotationsList
                <empty list>
              Modifiers
                PsiElement(lazy)('lazy')
              PsiWhiteSpace(' ')
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              ListOfPatterns
                ReferencePattern: b
                  PsiElement(identifier)('b')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              BlockExpression
                PsiElement({)('{')
                PsiWhiteSpace('\n            ')
                ScPatternDefinition: dd
                  AnnotationsList
                    <empty list>
                  Modifiers
                    PsiElement(lazy)('lazy')
                  PsiWhiteSpace(' ')
                  PsiElement(val)('val')
                  PsiWhiteSpace(' ')
                  ListOfPatterns
                    ReferencePattern: dd
                      PsiElement(identifier)('dd')
                  PsiWhiteSpace(' ')
                  PsiElement(=)('=')
                  PsiWhiteSpace(' ')
                  IntegerLiteral
                    PsiElement(integer)('3')
                PsiWhiteSpace('\n            ')
                ReferenceExpression: dd
                  PsiElement(identifier)('dd')
                PsiWhiteSpace('\n        ')
                PsiElement(})('}')
            PsiWhiteSpace('\n        ')
            ReferenceExpression: z
              PsiElement(identifier)('z')
            PsiWhiteSpace('\n    ')
            PsiElement(})('}')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScClass: B
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('B')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        MethodCall
          ReferenceExpression: locally
            PsiElement(identifier)('locally')
          PsiWhiteSpace(' ')
          ArgumentList
            BlockExpression
              PsiElement({)('{')
              PsiWhiteSpace('\n    ')
              ScPatternDefinition: ms
                AnnotationsList
                  <empty list>
                Modifiers
                  PsiElement(lazy)('lazy')
                PsiWhiteSpace(' ')
                PsiElement(val)('val')
                PsiWhiteSpace(' ')
                ListOfPatterns
                  ReferencePattern: ms
                    PsiElement(identifier)('ms')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                StringLiteral
                  PsiElement(string content)('"as"')
              PsiWhiteSpace('\n    ')
              ReferenceExpression: ms
                PsiElement(identifier)('ms')
              PsiWhiteSpace('\n  ')
              PsiElement(})('}')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScClass: C
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('C')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: things
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: things
              PsiElement(identifier)('things')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: List
              PsiElement(identifier)('List')
            ArgumentList
              PsiElement(()('(')
              StringLiteral
                PsiElement(string content)('"things"')
              PsiElement())(')')
        PsiWhiteSpace('\n  ')
        IfStatement
          PsiElement(if)('if')
          PsiWhiteSpace(' ')
          PsiElement(()('(')
          InfixExpression
            ReferenceExpression: things.size
              ReferenceExpression: things
                PsiElement(identifier)('things')
              PsiElement(.)('.')
              PsiElement(identifier)('size')
            PsiWhiteSpace(' ')
            ReferenceExpression: <
              PsiElement(identifier)('<')
            PsiWhiteSpace(' ')
            IntegerLiteral
              PsiElement(integer)('100')
          PsiElement())(')')
          PsiWhiteSpace(' ')
          BlockExpression
            PsiElement({)('{')
            PsiWhiteSpace('\n    ')
            ScPatternDefinition: msg
              AnnotationsList
                <empty list>
              Modifiers
                PsiElement(lazy)('lazy')
              PsiWhiteSpace(' ')
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              ListOfPatterns
                ReferencePattern: msg
                  PsiElement(identifier)('msg')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              StringLiteral
                PsiElement(string content)('"foo"')
            PsiWhiteSpace('\n    ')
            ReferenceExpression: msg
              PsiElement(identifier)('msg')
            PsiWhiteSpace('\n  ')
            PsiElement(})('}')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScClass: D
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('D')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: things
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: things
              PsiElement(identifier)('things')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: List
              PsiElement(identifier)('List')
            ArgumentList
              PsiElement(()('(')
              StringLiteral
                PsiElement(string content)('"things"')
              PsiElement())(')')
        PsiWhiteSpace('\n  ')
        IfStatement
          PsiElement(if)('if')
          PsiWhiteSpace(' ')
          PsiElement(()('(')
          InfixExpression
            ReferenceExpression: things.size
              ReferenceExpression: things
                PsiElement(identifier)('things')
              PsiElement(.)('.')
              PsiElement(identifier)('size')
            PsiWhiteSpace(' ')
            ReferenceExpression: <
              PsiElement(identifier)('<')
            PsiWhiteSpace(' ')
            IntegerLiteral
              PsiElement(integer)('100')
          PsiElement())(')')
          PsiWhiteSpace(' ')
          BlockExpression
            PsiElement({)('{')
            PsiWhiteSpace('\n    ')
            IfStatement
              PsiElement(if)('if')
              PsiWhiteSpace(' ')
              PsiElement(()('(')
              InfixExpression
                ReferenceExpression: things.size
                  ReferenceExpression: things
                    PsiElement(identifier)('things')
                  PsiElement(.)('.')
                  PsiElement(identifier)('size')
                PsiWhiteSpace(' ')
                ReferenceExpression: >
                  PsiElement(identifier)('>')
                PsiWhiteSpace(' ')
                IntegerLiteral
                  PsiElement(integer)('10')
              PsiElement())(')')
              PsiWhiteSpace(' ')
              BlockExpression
                PsiElement({)('{')
                PsiWhiteSpace('\n      ')
                ScPatternDefinition: msg
                  AnnotationsList
                    <empty list>
                  Modifiers
                    PsiElement(lazy)('lazy')
                  PsiWhiteSpace(' ')
                  PsiElement(val)('val')
                  PsiWhiteSpace(' ')
                  ListOfPatterns
                    ReferencePattern: msg
                      PsiElement(identifier)('msg')
                  PsiWhiteSpace(' ')
                  PsiElement(=)('=')
                  PsiWhiteSpace(' ')
                  StringLiteral
                    PsiElement(string content)('"foo"')
                PsiWhiteSpace('\n      ')
                ReferenceExpression: msg
                  PsiElement(identifier)('msg')
                PsiWhiteSpace('\n    ')
                PsiElement(})('}')
            PsiWhiteSpace('\n  ')
            PsiElement(})('}')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
