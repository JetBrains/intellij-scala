final class Baz private (val x: Int) extends AnyVal {
  def `unary_!_=`() : Baz = ??? // parses ok, but will not be usable
  def `unary_~_=`() : Baz = ??? // parses ok, but will not be usable
  def `unary_+_=`() : Baz = ??? // parses ok, but will not be usable
  def `unary_-_=`() : Baz = ??? // parses ok, but will not be usable
}
-----
ScalaFile
  ScClass: Baz
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(final)('final')
    PsiWhiteSpace(' ')
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Baz')
    PsiWhiteSpace(' ')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        AccessModifier
          PsiElement(private)('private')
      PsiWhiteSpace(' ')
      Parameters
        ParametersClause
          PsiElement(()('(')
          ClassParameter: x
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(val)('val')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('x')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            ParameterType
              SimpleType: Int
                CodeReferenceElement: Int
                  PsiElement(identifier)('Int')
          PsiElement())(')')
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          SimpleType: AnyVal
            CodeReferenceElement: AnyVal
              PsiElement(identifier)('AnyVal')
      PsiWhiteSpace(' ')
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: `unary_!_=`
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('`unary_!_=`')
          Parameters
            ParametersClause
              PsiElement(()('(')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Baz
            CodeReferenceElement: Baz
              PsiElement(identifier)('Baz')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: ???
            PsiElement(identifier)('???')
        PsiWhiteSpace(' ')
        PsiComment(comment)('// parses ok, but will not be usable')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: `unary_~_=`
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('`unary_~_=`')
          Parameters
            ParametersClause
              PsiElement(()('(')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Baz
            CodeReferenceElement: Baz
              PsiElement(identifier)('Baz')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: ???
            PsiElement(identifier)('???')
        PsiWhiteSpace(' ')
        PsiComment(comment)('// parses ok, but will not be usable')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: `unary_+_=`
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('`unary_+_=`')
          Parameters
            ParametersClause
              PsiElement(()('(')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Baz
            CodeReferenceElement: Baz
              PsiElement(identifier)('Baz')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: ???
            PsiElement(identifier)('???')
        PsiWhiteSpace(' ')
        PsiComment(comment)('// parses ok, but will not be usable')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: `unary_-_=`
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('`unary_-_=`')
          Parameters
            ParametersClause
              PsiElement(()('(')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Baz
            CodeReferenceElement: Baz
              PsiElement(identifier)('Baz')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: ???
            PsiElement(identifier)('???')
        PsiWhiteSpace(' ')
        PsiComment(comment)('// parses ok, but will not be usable')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
