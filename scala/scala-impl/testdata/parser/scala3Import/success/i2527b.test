class Base

object Test {
// OK
val widen = {
  class Inner extends Base
  val f: () => Inner = { () => new Inner }
  f()
}

// Crash
val leak = {
  class Inner extends Base
  val f: (() => Inner){ def apply(): Inner } = { () => new Inner }
  f()
}

}
-----
ScalaFile
  ScClass: Base
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Base')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    ExtendsBlock
      <empty list>
  PsiWhiteSpace('\n\n')
  ScObject: Test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n')
        ScPatternDefinition: widen
          PsiComment(comment)('// OK')
          PsiWhiteSpace('\n')
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: widen
              PsiElement(identifier)('widen')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          BlockExpression
            PsiElement({)('{')
            PsiWhiteSpace('\n  ')
            ScClass: Inner
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(class)('class')
              PsiWhiteSpace(' ')
              PsiElement(identifier)('Inner')
              PrimaryConstructor
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                Parameters
                  <empty list>
              PsiWhiteSpace(' ')
              ExtendsBlock
                PsiElement(extends)('extends')
                PsiWhiteSpace(' ')
                TemplateParents
                  ConstructorInvocation
                    SimpleType: Base
                      CodeReferenceElement: Base
                        PsiElement(identifier)('Base')
            PsiWhiteSpace('\n  ')
            ScPatternDefinition: f
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              ListOfPatterns
                ReferencePattern: f
                  PsiElement(identifier)('f')
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              FunctionalType: () => Inner
                TypeInParenthesis: ()
                  PsiElement(()('(')
                  PsiElement())(')')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                SimpleType: Inner
                  CodeReferenceElement: Inner
                    PsiElement(identifier)('Inner')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              BlockExpression
                PsiElement({)('{')
                PsiWhiteSpace(' ')
                FunctionExpression
                  Parameters
                    ParametersClause
                      PsiElement(()('(')
                      PsiElement())(')')
                  PsiWhiteSpace(' ')
                  PsiElement(=>)('=>')
                  PsiWhiteSpace(' ')
                  BlockOfExpressions
                    ScNewTemplateDefinition: <anonymous>
                      PsiElement(new)('new')
                      PsiWhiteSpace(' ')
                      ExtendsBlock
                        TemplateParents
                          ConstructorInvocation
                            SimpleType: Inner
                              CodeReferenceElement: Inner
                                PsiElement(identifier)('Inner')
                PsiWhiteSpace(' ')
                PsiElement(})('}')
            PsiWhiteSpace('\n  ')
            MethodCall
              ReferenceExpression: f
                PsiElement(identifier)('f')
              ArgumentList
                PsiElement(()('(')
                PsiElement())(')')
            PsiWhiteSpace('\n')
            PsiElement(})('}')
        PsiWhiteSpace('\n\n')
        ScPatternDefinition: leak
          PsiComment(comment)('// Crash')
          PsiWhiteSpace('\n')
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: leak
              PsiElement(identifier)('leak')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          BlockExpression
            PsiElement({)('{')
            PsiWhiteSpace('\n  ')
            ScClass: Inner
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(class)('class')
              PsiWhiteSpace(' ')
              PsiElement(identifier)('Inner')
              PrimaryConstructor
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                Parameters
                  <empty list>
              PsiWhiteSpace(' ')
              ExtendsBlock
                PsiElement(extends)('extends')
                PsiWhiteSpace(' ')
                TemplateParents
                  ConstructorInvocation
                    SimpleType: Base
                      CodeReferenceElement: Base
                        PsiElement(identifier)('Base')
            PsiWhiteSpace('\n  ')
            ScPatternDefinition: f
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              ListOfPatterns
                ReferencePattern: f
                  PsiElement(identifier)('f')
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              CompoundType: (() => Inner){ def apply(): Inner }
                TypeInParenthesis: (() => Inner)
                  PsiElement(()('(')
                  FunctionalType: () => Inner
                    TypeInParenthesis: ()
                      PsiElement(()('(')
                      PsiElement())(')')
                    PsiWhiteSpace(' ')
                    PsiElement(=>)('=>')
                    PsiWhiteSpace(' ')
                    SimpleType: Inner
                      CodeReferenceElement: Inner
                        PsiElement(identifier)('Inner')
                  PsiElement())(')')
                Refinement
                  PsiElement({)('{')
                  PsiWhiteSpace(' ')
                  ScFunctionDeclaration: apply
                    AnnotationsList
                      <empty list>
                    Modifiers
                      <empty list>
                    PsiElement(def)('def')
                    PsiWhiteSpace(' ')
                    PsiElement(identifier)('apply')
                    Parameters
                      ParametersClause
                        PsiElement(()('(')
                        PsiElement())(')')
                    PsiElement(:)(':')
                    PsiWhiteSpace(' ')
                    SimpleType: Inner
                      CodeReferenceElement: Inner
                        PsiElement(identifier)('Inner')
                  PsiWhiteSpace(' ')
                  PsiElement(})('}')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              BlockExpression
                PsiElement({)('{')
                PsiWhiteSpace(' ')
                FunctionExpression
                  Parameters
                    ParametersClause
                      PsiElement(()('(')
                      PsiElement())(')')
                  PsiWhiteSpace(' ')
                  PsiElement(=>)('=>')
                  PsiWhiteSpace(' ')
                  BlockOfExpressions
                    ScNewTemplateDefinition: <anonymous>
                      PsiElement(new)('new')
                      PsiWhiteSpace(' ')
                      ExtendsBlock
                        TemplateParents
                          ConstructorInvocation
                            SimpleType: Inner
                              CodeReferenceElement: Inner
                                PsiElement(identifier)('Inner')
                PsiWhiteSpace(' ')
                PsiElement(})('}')
            PsiWhiteSpace('\n  ')
            MethodCall
              ReferenceExpression: f
                PsiElement(identifier)('f')
              ArgumentList
                PsiElement(()('(')
                PsiElement())(')')
            PsiWhiteSpace('\n')
            PsiElement(})('}')
        PsiWhiteSpace('\n\n')
        PsiElement(})('}')
