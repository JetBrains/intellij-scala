object Test {
  abstract class AbstractIterator[A] extends Iterator[A] {
    override def padTo[B >: A](len: Int, elem: B): Iterator[B] = {
      val it = this
      new AbstractIterator[B] {
        private[this] var i = 0

        // This illustrates a tricky situation for joins
        // The RHS of `val b` has type `A | elem.type` where `elem: B`
        // If we widen `A` first in the join we get a RHS of `Any` and a subsequent
        // type error. The right thing to do is to widen `elem.type` to `B` first.
        def next(): B = {
          val b =
            if (it.hasNext) it.next()
            else if (i < len) elem
            else Iterator.empty.next()
          i += 1
          b
        }

        // Same problem, but without singleton types.
        // This one fails to compile in Scala 2.
        def f[C <: B](c: () => C): B = {
          val b =
            if (it.hasNext) it.next()
            else c()
          b
        }

        def hasNext: Boolean = it.hasNext || i < len
      }
    }
  }
}
-----
ScalaFile
  ScObject: Test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScClass: AbstractIterator
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(abstract)('abstract')
          PsiWhiteSpace(' ')
          PsiElement(class)('class')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('AbstractIterator')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: A
              PsiElement(identifier)('A')
            PsiElement(])(']')
          PrimaryConstructor
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            Parameters
              <empty list>
          PsiWhiteSpace(' ')
          ExtendsBlock
            PsiElement(extends)('extends')
            PsiWhiteSpace(' ')
            TemplateParents
              ConstructorInvocation
                ParametrizedType: Iterator[A]
                  SimpleType: Iterator
                    CodeReferenceElement: Iterator
                      PsiElement(identifier)('Iterator')
                  TypeArgumentsList
                    PsiElement([)('[')
                    SimpleType: A
                      CodeReferenceElement: A
                        PsiElement(identifier)('A')
                    PsiElement(])(']')
            PsiWhiteSpace(' ')
            ScTemplateBody
              PsiElement({)('{')
              PsiWhiteSpace('\n    ')
              ScFunctionDefinition: padTo
                AnnotationsList
                  <empty list>
                Modifiers
                  PsiElement(override)('override')
                PsiWhiteSpace(' ')
                PsiElement(def)('def')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('padTo')
                TypeParameterClause
                  PsiElement([)('[')
                  TypeParameter: B
                    PsiElement(identifier)('B')
                    PsiWhiteSpace(' ')
                    PsiElement(>:)('>:')
                    PsiWhiteSpace(' ')
                    SimpleType: A
                      CodeReferenceElement: A
                        PsiElement(identifier)('A')
                  PsiElement(])(']')
                Parameters
                  ParametersClause
                    PsiElement(()('(')
                    Parameter: len
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(identifier)('len')
                      PsiElement(:)(':')
                      PsiWhiteSpace(' ')
                      ParameterType
                        SimpleType: Int
                          CodeReferenceElement: Int
                            PsiElement(identifier)('Int')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    Parameter: elem
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(identifier)('elem')
                      PsiElement(:)(':')
                      PsiWhiteSpace(' ')
                      ParameterType
                        SimpleType: B
                          CodeReferenceElement: B
                            PsiElement(identifier)('B')
                    PsiElement())(')')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParametrizedType: Iterator[B]
                  SimpleType: Iterator
                    CodeReferenceElement: Iterator
                      PsiElement(identifier)('Iterator')
                  TypeArgumentsList
                    PsiElement([)('[')
                    SimpleType: B
                      CodeReferenceElement: B
                        PsiElement(identifier)('B')
                    PsiElement(])(']')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                BlockExpression
                  PsiElement({)('{')
                  PsiWhiteSpace('\n      ')
                  ScPatternDefinition: it
                    AnnotationsList
                      <empty list>
                    Modifiers
                      <empty list>
                    PsiElement(val)('val')
                    PsiWhiteSpace(' ')
                    ListOfPatterns
                      ReferencePattern: it
                        PsiElement(identifier)('it')
                    PsiWhiteSpace(' ')
                    PsiElement(=)('=')
                    PsiWhiteSpace(' ')
                    ThisReference
                      PsiElement(this)('this')
                  PsiWhiteSpace('\n      ')
                  ScNewTemplateDefinition: <anonymous>
                    PsiElement(new)('new')
                    PsiWhiteSpace(' ')
                    ExtendsBlock
                      TemplateParents
                        ConstructorInvocation
                          ParametrizedType: AbstractIterator[B]
                            SimpleType: AbstractIterator
                              CodeReferenceElement: AbstractIterator
                                PsiElement(identifier)('AbstractIterator')
                            TypeArgumentsList
                              PsiElement([)('[')
                              SimpleType: B
                                CodeReferenceElement: B
                                  PsiElement(identifier)('B')
                              PsiElement(])(']')
                      PsiWhiteSpace(' ')
                      ScTemplateBody
                        PsiElement({)('{')
                        PsiWhiteSpace('\n        ')
                        ScVariableDefinition: i
                          AnnotationsList
                            <empty list>
                          Modifiers
                            AccessModifier
                              PsiElement(private)('private')
                              PsiElement([)('[')
                              PsiElement(this)('this')
                              PsiElement(])(']')
                          PsiWhiteSpace(' ')
                          PsiElement(var)('var')
                          PsiWhiteSpace(' ')
                          ListOfPatterns
                            ReferencePattern: i
                              PsiElement(identifier)('i')
                          PsiWhiteSpace(' ')
                          PsiElement(=)('=')
                          PsiWhiteSpace(' ')
                          IntegerLiteral
                            PsiElement(integer)('0')
                        PsiWhiteSpace('\n\n        ')
                        ScFunctionDefinition: next
                          PsiComment(comment)('// This illustrates a tricky situation for joins')
                          PsiWhiteSpace('\n        ')
                          PsiComment(comment)('// The RHS of `val b` has type `A | elem.type` where `elem: B`')
                          PsiWhiteSpace('\n        ')
                          PsiComment(comment)('// If we widen `A` first in the join we get a RHS of `Any` and a subsequent')
                          PsiWhiteSpace('\n        ')
                          PsiComment(comment)('// type error. The right thing to do is to widen `elem.type` to `B` first.')
                          PsiWhiteSpace('\n        ')
                          AnnotationsList
                            <empty list>
                          Modifiers
                            <empty list>
                          PsiElement(def)('def')
                          PsiWhiteSpace(' ')
                          PsiElement(identifier)('next')
                          Parameters
                            ParametersClause
                              PsiElement(()('(')
                              PsiElement())(')')
                          PsiElement(:)(':')
                          PsiWhiteSpace(' ')
                          SimpleType: B
                            CodeReferenceElement: B
                              PsiElement(identifier)('B')
                          PsiWhiteSpace(' ')
                          PsiElement(=)('=')
                          PsiWhiteSpace(' ')
                          BlockExpression
                            PsiElement({)('{')
                            PsiWhiteSpace('\n          ')
                            ScPatternDefinition: b
                              AnnotationsList
                                <empty list>
                              Modifiers
                                <empty list>
                              PsiElement(val)('val')
                              PsiWhiteSpace(' ')
                              ListOfPatterns
                                ReferencePattern: b
                                  PsiElement(identifier)('b')
                              PsiWhiteSpace(' ')
                              PsiElement(=)('=')
                              PsiWhiteSpace('\n            ')
                              IfStatement
                                PsiElement(if)('if')
                                PsiWhiteSpace(' ')
                                PsiElement(()('(')
                                ReferenceExpression: it.hasNext
                                  ReferenceExpression: it
                                    PsiElement(identifier)('it')
                                  PsiElement(.)('.')
                                  PsiElement(identifier)('hasNext')
                                PsiElement())(')')
                                PsiWhiteSpace(' ')
                                MethodCall
                                  ReferenceExpression: it.next
                                    ReferenceExpression: it
                                      PsiElement(identifier)('it')
                                    PsiElement(.)('.')
                                    PsiElement(identifier)('next')
                                  ArgumentList
                                    PsiElement(()('(')
                                    PsiElement())(')')
                                PsiWhiteSpace('\n            ')
                                PsiElement(else)('else')
                                PsiWhiteSpace(' ')
                                IfStatement
                                  PsiElement(if)('if')
                                  PsiWhiteSpace(' ')
                                  PsiElement(()('(')
                                  InfixExpression
                                    ReferenceExpression: i
                                      PsiElement(identifier)('i')
                                    PsiWhiteSpace(' ')
                                    ReferenceExpression: <
                                      PsiElement(identifier)('<')
                                    PsiWhiteSpace(' ')
                                    ReferenceExpression: len
                                      PsiElement(identifier)('len')
                                  PsiElement())(')')
                                  PsiWhiteSpace(' ')
                                  ReferenceExpression: elem
                                    PsiElement(identifier)('elem')
                                  PsiWhiteSpace('\n            ')
                                  PsiElement(else)('else')
                                  PsiWhiteSpace(' ')
                                  MethodCall
                                    ReferenceExpression: Iterator.empty.next
                                      ReferenceExpression: Iterator.empty
                                        ReferenceExpression: Iterator
                                          PsiElement(identifier)('Iterator')
                                        PsiElement(.)('.')
                                        PsiElement(identifier)('empty')
                                      PsiElement(.)('.')
                                      PsiElement(identifier)('next')
                                    ArgumentList
                                      PsiElement(()('(')
                                      PsiElement())(')')
                            PsiWhiteSpace('\n          ')
                            InfixExpression
                              ReferenceExpression: i
                                PsiElement(identifier)('i')
                              PsiWhiteSpace(' ')
                              ReferenceExpression: +=
                                PsiElement(identifier)('+=')
                              PsiWhiteSpace(' ')
                              IntegerLiteral
                                PsiElement(integer)('1')
                            PsiWhiteSpace('\n          ')
                            ReferenceExpression: b
                              PsiElement(identifier)('b')
                            PsiWhiteSpace('\n        ')
                            PsiElement(})('}')
                        PsiWhiteSpace('\n\n        ')
                        ScFunctionDefinition: f
                          PsiComment(comment)('// Same problem, but without singleton types.')
                          PsiWhiteSpace('\n        ')
                          PsiComment(comment)('// This one fails to compile in Scala 2.')
                          PsiWhiteSpace('\n        ')
                          AnnotationsList
                            <empty list>
                          Modifiers
                            <empty list>
                          PsiElement(def)('def')
                          PsiWhiteSpace(' ')
                          PsiElement(identifier)('f')
                          TypeParameterClause
                            PsiElement([)('[')
                            TypeParameter: C
                              PsiElement(identifier)('C')
                              PsiWhiteSpace(' ')
                              PsiElement(<:)('<:')
                              PsiWhiteSpace(' ')
                              SimpleType: B
                                CodeReferenceElement: B
                                  PsiElement(identifier)('B')
                            PsiElement(])(']')
                          Parameters
                            ParametersClause
                              PsiElement(()('(')
                              Parameter: c
                                AnnotationsList
                                  <empty list>
                                Modifiers
                                  <empty list>
                                PsiElement(identifier)('c')
                                PsiElement(:)(':')
                                PsiWhiteSpace(' ')
                                ParameterType
                                  FunctionalType: () => C
                                    TypeInParenthesis: ()
                                      PsiElement(()('(')
                                      PsiElement())(')')
                                    PsiWhiteSpace(' ')
                                    PsiElement(=>)('=>')
                                    PsiWhiteSpace(' ')
                                    SimpleType: C
                                      CodeReferenceElement: C
                                        PsiElement(identifier)('C')
                              PsiElement())(')')
                          PsiElement(:)(':')
                          PsiWhiteSpace(' ')
                          SimpleType: B
                            CodeReferenceElement: B
                              PsiElement(identifier)('B')
                          PsiWhiteSpace(' ')
                          PsiElement(=)('=')
                          PsiWhiteSpace(' ')
                          BlockExpression
                            PsiElement({)('{')
                            PsiWhiteSpace('\n          ')
                            ScPatternDefinition: b
                              AnnotationsList
                                <empty list>
                              Modifiers
                                <empty list>
                              PsiElement(val)('val')
                              PsiWhiteSpace(' ')
                              ListOfPatterns
                                ReferencePattern: b
                                  PsiElement(identifier)('b')
                              PsiWhiteSpace(' ')
                              PsiElement(=)('=')
                              PsiWhiteSpace('\n            ')
                              IfStatement
                                PsiElement(if)('if')
                                PsiWhiteSpace(' ')
                                PsiElement(()('(')
                                ReferenceExpression: it.hasNext
                                  ReferenceExpression: it
                                    PsiElement(identifier)('it')
                                  PsiElement(.)('.')
                                  PsiElement(identifier)('hasNext')
                                PsiElement())(')')
                                PsiWhiteSpace(' ')
                                MethodCall
                                  ReferenceExpression: it.next
                                    ReferenceExpression: it
                                      PsiElement(identifier)('it')
                                    PsiElement(.)('.')
                                    PsiElement(identifier)('next')
                                  ArgumentList
                                    PsiElement(()('(')
                                    PsiElement())(')')
                                PsiWhiteSpace('\n            ')
                                PsiElement(else)('else')
                                PsiWhiteSpace(' ')
                                MethodCall
                                  ReferenceExpression: c
                                    PsiElement(identifier)('c')
                                  ArgumentList
                                    PsiElement(()('(')
                                    PsiElement())(')')
                            PsiWhiteSpace('\n          ')
                            ReferenceExpression: b
                              PsiElement(identifier)('b')
                            PsiWhiteSpace('\n        ')
                            PsiElement(})('}')
                        PsiWhiteSpace('\n\n        ')
                        ScFunctionDefinition: hasNext
                          AnnotationsList
                            <empty list>
                          Modifiers
                            <empty list>
                          PsiElement(def)('def')
                          PsiWhiteSpace(' ')
                          PsiElement(identifier)('hasNext')
                          Parameters
                            <empty list>
                          PsiElement(:)(':')
                          PsiWhiteSpace(' ')
                          SimpleType: Boolean
                            CodeReferenceElement: Boolean
                              PsiElement(identifier)('Boolean')
                          PsiWhiteSpace(' ')
                          PsiElement(=)('=')
                          PsiWhiteSpace(' ')
                          InfixExpression
                            ReferenceExpression: it.hasNext
                              ReferenceExpression: it
                                PsiElement(identifier)('it')
                              PsiElement(.)('.')
                              PsiElement(identifier)('hasNext')
                            PsiWhiteSpace(' ')
                            ReferenceExpression: ||
                              PsiElement(identifier)('||')
                            PsiWhiteSpace(' ')
                            InfixExpression
                              ReferenceExpression: i
                                PsiElement(identifier)('i')
                              PsiWhiteSpace(' ')
                              ReferenceExpression: <
                                PsiElement(identifier)('<')
                              PsiWhiteSpace(' ')
                              ReferenceExpression: len
                                PsiElement(identifier)('len')
                        PsiWhiteSpace('\n      ')
                        PsiElement(})('}')
                  PsiWhiteSpace('\n    ')
                  PsiElement(})('}')
              PsiWhiteSpace('\n  ')
              PsiElement(})('}')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
