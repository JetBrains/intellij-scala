object Test {
  def test0: Unit = {
    trait I {
      def foo: Any = null
    }
    val s: I = null
    s.foo
  }

  def test1: Unit = {
    // `s1` is used once as a value, several times as a type. This tests shows
    // that Ycheck is happy despite devalify inlining (and removing) `s1`.
    val s1: String = "singleton"
    val s2: s1.type = s1

    val t: Option[s1.type] = None

    println(t)
    println((s2: s1.type))
  }

  def test2: Unit = {
    class Foo {
      class Bar
    }

    val foo = new Foo
    val subFoo = foo
    // Inlining `subFoo` changes the type of `subFooBar` from `subFoo.Bar` to `foo.Bar`
    val subFooBar = new subFoo.Bar

    println(subFooBar)
  }

  def test3: Unit = {
    trait NumericRange {
      def mapRange: NumericRange = {
        val self = this
        new NumericRange {
          def underlyingRange: NumericRange = self
        }
      }
    }
  }
}
-----
ScalaFile
  ScObject: Test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: test0
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('test0')
          Parameters
            <empty list>
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Unit
            CodeReferenceElement: Unit
              PsiElement(identifier)('Unit')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          BlockExpression
            PsiElement({)('{')
            PsiWhiteSpace('\n    ')
            ScTrait: I
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(trait)('trait')
              PsiWhiteSpace(' ')
              PsiElement(identifier)('I')
              PsiWhiteSpace(' ')
              ExtendsBlock
                ScTemplateBody
                  PsiElement({)('{')
                  PsiWhiteSpace('\n      ')
                  ScFunctionDefinition: foo
                    AnnotationsList
                      <empty list>
                    Modifiers
                      <empty list>
                    PsiElement(def)('def')
                    PsiWhiteSpace(' ')
                    PsiElement(identifier)('foo')
                    Parameters
                      <empty list>
                    PsiElement(:)(':')
                    PsiWhiteSpace(' ')
                    SimpleType: Any
                      CodeReferenceElement: Any
                        PsiElement(identifier)('Any')
                    PsiWhiteSpace(' ')
                    PsiElement(=)('=')
                    PsiWhiteSpace(' ')
                    NullLiteral
                      PsiElement(null)('null')
                  PsiWhiteSpace('\n    ')
                  PsiElement(})('}')
            PsiWhiteSpace('\n    ')
            ScPatternDefinition: s
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              ListOfPatterns
                ReferencePattern: s
                  PsiElement(identifier)('s')
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              SimpleType: I
                CodeReferenceElement: I
                  PsiElement(identifier)('I')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              NullLiteral
                PsiElement(null)('null')
            PsiWhiteSpace('\n    ')
            ReferenceExpression: s.foo
              ReferenceExpression: s
                PsiElement(identifier)('s')
              PsiElement(.)('.')
              PsiElement(identifier)('foo')
            PsiWhiteSpace('\n  ')
            PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: test1
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('test1')
          Parameters
            <empty list>
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Unit
            CodeReferenceElement: Unit
              PsiElement(identifier)('Unit')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          BlockExpression
            PsiElement({)('{')
            PsiWhiteSpace('\n    ')
            ScPatternDefinition: s1
              PsiComment(comment)('// `s1` is used once as a value, several times as a type. This tests shows')
              PsiWhiteSpace('\n    ')
              PsiComment(comment)('// that Ycheck is happy despite devalify inlining (and removing) `s1`.')
              PsiWhiteSpace('\n    ')
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              ListOfPatterns
                ReferencePattern: s1
                  PsiElement(identifier)('s1')
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              SimpleType: String
                CodeReferenceElement: String
                  PsiElement(identifier)('String')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              StringLiteral
                PsiElement(string content)('"singleton"')
            PsiWhiteSpace('\n    ')
            ScPatternDefinition: s2
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              ListOfPatterns
                ReferencePattern: s2
                  PsiElement(identifier)('s2')
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              SimpleType: s1.type
                CodeReferenceElement: s1
                  PsiElement(identifier)('s1')
                PsiElement(.)('.')
                PsiElement(type)('type')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              ReferenceExpression: s1
                PsiElement(identifier)('s1')
            PsiWhiteSpace('\n\n    ')
            ScPatternDefinition: t
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              ListOfPatterns
                ReferencePattern: t
                  PsiElement(identifier)('t')
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              ParametrizedType: Option[s1.type]
                SimpleType: Option
                  CodeReferenceElement: Option
                    PsiElement(identifier)('Option')
                TypeArgumentsList
                  PsiElement([)('[')
                  SimpleType: s1.type
                    CodeReferenceElement: s1
                      PsiElement(identifier)('s1')
                    PsiElement(.)('.')
                    PsiElement(type)('type')
                  PsiElement(])(']')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              ReferenceExpression: None
                PsiElement(identifier)('None')
            PsiWhiteSpace('\n\n    ')
            MethodCall
              ReferenceExpression: println
                PsiElement(identifier)('println')
              ArgumentList
                PsiElement(()('(')
                ReferenceExpression: t
                  PsiElement(identifier)('t')
                PsiElement())(')')
            PsiWhiteSpace('\n    ')
            MethodCall
              ReferenceExpression: println
                PsiElement(identifier)('println')
              ArgumentList
                PsiElement(()('(')
                ExpressionInParenthesis
                  PsiElement(()('(')
                  TypedExpression
                    ReferenceExpression: s2
                      PsiElement(identifier)('s2')
                    PsiElement(:)(':')
                    PsiWhiteSpace(' ')
                    SimpleType: s1.type
                      CodeReferenceElement: s1
                        PsiElement(identifier)('s1')
                      PsiElement(.)('.')
                      PsiElement(type)('type')
                  PsiElement())(')')
                PsiElement())(')')
            PsiWhiteSpace('\n  ')
            PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: test2
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('test2')
          Parameters
            <empty list>
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Unit
            CodeReferenceElement: Unit
              PsiElement(identifier)('Unit')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          BlockExpression
            PsiElement({)('{')
            PsiWhiteSpace('\n    ')
            ScClass: Foo
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(class)('class')
              PsiWhiteSpace(' ')
              PsiElement(identifier)('Foo')
              PrimaryConstructor
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                Parameters
                  <empty list>
              PsiWhiteSpace(' ')
              ExtendsBlock
                ScTemplateBody
                  PsiElement({)('{')
                  PsiWhiteSpace('\n      ')
                  ScClass: Bar
                    AnnotationsList
                      <empty list>
                    Modifiers
                      <empty list>
                    PsiElement(class)('class')
                    PsiWhiteSpace(' ')
                    PsiElement(identifier)('Bar')
                    PrimaryConstructor
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      Parameters
                        <empty list>
                    ExtendsBlock
                      <empty list>
                  PsiWhiteSpace('\n    ')
                  PsiElement(})('}')
            PsiWhiteSpace('\n\n    ')
            ScPatternDefinition: foo
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              ListOfPatterns
                ReferencePattern: foo
                  PsiElement(identifier)('foo')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              ScNewTemplateDefinition: <anonymous>
                PsiElement(new)('new')
                PsiWhiteSpace(' ')
                ExtendsBlock
                  TemplateParents
                    ConstructorInvocation
                      SimpleType: Foo
                        CodeReferenceElement: Foo
                          PsiElement(identifier)('Foo')
            PsiWhiteSpace('\n    ')
            ScPatternDefinition: subFoo
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              ListOfPatterns
                ReferencePattern: subFoo
                  PsiElement(identifier)('subFoo')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              ReferenceExpression: foo
                PsiElement(identifier)('foo')
            PsiWhiteSpace('\n    ')
            ScPatternDefinition: subFooBar
              PsiComment(comment)('// Inlining `subFoo` changes the type of `subFooBar` from `subFoo.Bar` to `foo.Bar`')
              PsiWhiteSpace('\n    ')
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              ListOfPatterns
                ReferencePattern: subFooBar
                  PsiElement(identifier)('subFooBar')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              ScNewTemplateDefinition: <anonymous>
                PsiElement(new)('new')
                PsiWhiteSpace(' ')
                ExtendsBlock
                  TemplateParents
                    ConstructorInvocation
                      SimpleType: subFoo.Bar
                        CodeReferenceElement: subFoo.Bar
                          CodeReferenceElement: subFoo
                            PsiElement(identifier)('subFoo')
                          PsiElement(.)('.')
                          PsiElement(identifier)('Bar')
            PsiWhiteSpace('\n\n    ')
            MethodCall
              ReferenceExpression: println
                PsiElement(identifier)('println')
              ArgumentList
                PsiElement(()('(')
                ReferenceExpression: subFooBar
                  PsiElement(identifier)('subFooBar')
                PsiElement())(')')
            PsiWhiteSpace('\n  ')
            PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: test3
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('test3')
          Parameters
            <empty list>
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Unit
            CodeReferenceElement: Unit
              PsiElement(identifier)('Unit')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          BlockExpression
            PsiElement({)('{')
            PsiWhiteSpace('\n    ')
            ScTrait: NumericRange
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(trait)('trait')
              PsiWhiteSpace(' ')
              PsiElement(identifier)('NumericRange')
              PsiWhiteSpace(' ')
              ExtendsBlock
                ScTemplateBody
                  PsiElement({)('{')
                  PsiWhiteSpace('\n      ')
                  ScFunctionDefinition: mapRange
                    AnnotationsList
                      <empty list>
                    Modifiers
                      <empty list>
                    PsiElement(def)('def')
                    PsiWhiteSpace(' ')
                    PsiElement(identifier)('mapRange')
                    Parameters
                      <empty list>
                    PsiElement(:)(':')
                    PsiWhiteSpace(' ')
                    SimpleType: NumericRange
                      CodeReferenceElement: NumericRange
                        PsiElement(identifier)('NumericRange')
                    PsiWhiteSpace(' ')
                    PsiElement(=)('=')
                    PsiWhiteSpace(' ')
                    BlockExpression
                      PsiElement({)('{')
                      PsiWhiteSpace('\n        ')
                      ScPatternDefinition: self
                        AnnotationsList
                          <empty list>
                        Modifiers
                          <empty list>
                        PsiElement(val)('val')
                        PsiWhiteSpace(' ')
                        ListOfPatterns
                          ReferencePattern: self
                            PsiElement(identifier)('self')
                        PsiWhiteSpace(' ')
                        PsiElement(=)('=')
                        PsiWhiteSpace(' ')
                        ThisReference
                          PsiElement(this)('this')
                      PsiWhiteSpace('\n        ')
                      ScNewTemplateDefinition: <anonymous>
                        PsiElement(new)('new')
                        PsiWhiteSpace(' ')
                        ExtendsBlock
                          TemplateParents
                            ConstructorInvocation
                              SimpleType: NumericRange
                                CodeReferenceElement: NumericRange
                                  PsiElement(identifier)('NumericRange')
                          PsiWhiteSpace(' ')
                          ScTemplateBody
                            PsiElement({)('{')
                            PsiWhiteSpace('\n          ')
                            ScFunctionDefinition: underlyingRange
                              AnnotationsList
                                <empty list>
                              Modifiers
                                <empty list>
                              PsiElement(def)('def')
                              PsiWhiteSpace(' ')
                              PsiElement(identifier)('underlyingRange')
                              Parameters
                                <empty list>
                              PsiElement(:)(':')
                              PsiWhiteSpace(' ')
                              SimpleType: NumericRange
                                CodeReferenceElement: NumericRange
                                  PsiElement(identifier)('NumericRange')
                              PsiWhiteSpace(' ')
                              PsiElement(=)('=')
                              PsiWhiteSpace(' ')
                              ReferenceExpression: self
                                PsiElement(identifier)('self')
                            PsiWhiteSpace('\n        ')
                            PsiElement(})('}')
                      PsiWhiteSpace('\n      ')
                      PsiElement(})('}')
                  PsiWhiteSpace('\n    ')
                  PsiElement(})('}')
            PsiWhiteSpace('\n  ')
            PsiElement(})('}')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
