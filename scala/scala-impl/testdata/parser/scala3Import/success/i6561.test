trait Foo[V]
class Inv[A](a: A)

trait Bar[K <: Foo[V], V] {
  // ERROR: Type argument Foo[Inv[V]] does not conform to upper bound Foo[Inv[Inv[V]]]
  def test(): Bar[Foo[Inv[V]], Inv[V]]
}
-----
ScalaFile
  ScTrait: Foo
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Foo')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: V
        PsiElement(identifier)('V')
      PsiElement(])(']')
    ExtendsBlock
      <empty list>
  PsiWhiteSpace('\n')
  ScClass: Inv
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Inv')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: A
        PsiElement(identifier)('A')
      PsiElement(])(']')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        ParametersClause
          PsiElement(()('(')
          ClassParameter: a
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(identifier)('a')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            ParameterType
              SimpleType: A
                CodeReferenceElement: A
                  PsiElement(identifier)('A')
          PsiElement())(')')
    ExtendsBlock
      <empty list>
  PsiWhiteSpace('\n\n')
  ScTrait: Bar
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Bar')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: K
        PsiElement(identifier)('K')
        PsiWhiteSpace(' ')
        PsiElement(<:)('<:')
        PsiWhiteSpace(' ')
        ParametrizedType: Foo[V]
          SimpleType: Foo
            CodeReferenceElement: Foo
              PsiElement(identifier)('Foo')
          TypeArgumentsList
            PsiElement([)('[')
            SimpleType: V
              CodeReferenceElement: V
                PsiElement(identifier)('V')
            PsiElement(])(']')
      PsiElement(,)(',')
      PsiWhiteSpace(' ')
      TypeParameter: V
        PsiElement(identifier)('V')
      PsiElement(])(']')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDeclaration: test
          PsiComment(comment)('// ERROR: Type argument Foo[Inv[V]] does not conform to upper bound Foo[Inv[Inv[V]]]')
          PsiWhiteSpace('\n  ')
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('test')
          Parameters
            ParametersClause
              PsiElement(()('(')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: Bar[Foo[Inv[V]], Inv[V]]
            SimpleType: Bar
              CodeReferenceElement: Bar
                PsiElement(identifier)('Bar')
            TypeArgumentsList
              PsiElement([)('[')
              ParametrizedType: Foo[Inv[V]]
                SimpleType: Foo
                  CodeReferenceElement: Foo
                    PsiElement(identifier)('Foo')
                TypeArgumentsList
                  PsiElement([)('[')
                  ParametrizedType: Inv[V]
                    SimpleType: Inv
                      CodeReferenceElement: Inv
                        PsiElement(identifier)('Inv')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: V
                        CodeReferenceElement: V
                          PsiElement(identifier)('V')
                      PsiElement(])(']')
                  PsiElement(])(']')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              ParametrizedType: Inv[V]
                SimpleType: Inv
                  CodeReferenceElement: Inv
                    PsiElement(identifier)('Inv')
                TypeArgumentsList
                  PsiElement([)('[')
                  SimpleType: V
                    CodeReferenceElement: V
                      PsiElement(identifier)('V')
                  PsiElement(])(']')
              PsiElement(])(']')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
