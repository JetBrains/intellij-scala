trait D {
  trait Manifest {
    class Entry
  }

  val M: Manifest

  def m: M.Entry = ???
}

object D1 extends D {
  object M extends Manifest
}

object D2 extends D {
  val M: Manifest = ???
}

object Hello {

  def main(args: Array[String]): Unit = {
    // 2.10.3 - ok
    // 2.11.0-M7 - type mismatch; found : Seq[DB1.MANIFEST.Entry]
    // required: Seq[DB1.MANIFEST.Entry]
    val t1: D1.M.Entry = D1.m

    // 2.10.3 - ok
    // 2.11.0-M7 - ok
    val t2: D2.M.Entry = D2.m
  }
}
-----
ScalaFile
  ScTrait: D
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('D')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScTrait: Manifest
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(trait)('trait')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Manifest')
          PsiWhiteSpace(' ')
          ExtendsBlock
            ScTemplateBody
              PsiElement({)('{')
              PsiWhiteSpace('\n    ')
              ScClass: Entry
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(class)('class')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('Entry')
                PrimaryConstructor
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  Parameters
                    <empty list>
                ExtendsBlock
                  <empty list>
              PsiWhiteSpace('\n  ')
              PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        ScValueDeclaration: M
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfIdentifiers
            Field identifier: M
              PsiElement(identifier)('M')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Manifest
            CodeReferenceElement: Manifest
              PsiElement(identifier)('Manifest')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: m
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('m')
          Parameters
            <empty list>
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: M.Entry
            CodeReferenceElement: M.Entry
              CodeReferenceElement: M
                PsiElement(identifier)('M')
              PsiElement(.)('.')
              PsiElement(identifier)('Entry')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: ???
            PsiElement(identifier)('???')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScObject: D1
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('D1')
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          SimpleType: D
            CodeReferenceElement: D
              PsiElement(identifier)('D')
      PsiWhiteSpace(' ')
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScObject: M
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(object)('object')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('M')
          PsiWhiteSpace(' ')
          ExtendsBlock
            PsiElement(extends)('extends')
            PsiWhiteSpace(' ')
            TemplateParents
              ConstructorInvocation
                SimpleType: Manifest
                  CodeReferenceElement: Manifest
                    PsiElement(identifier)('Manifest')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScObject: D2
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('D2')
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          SimpleType: D
            CodeReferenceElement: D
              PsiElement(identifier)('D')
      PsiWhiteSpace(' ')
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: M
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: M
              PsiElement(identifier)('M')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Manifest
            CodeReferenceElement: Manifest
              PsiElement(identifier)('Manifest')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: ???
            PsiElement(identifier)('???')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScObject: Hello
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Hello')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: main
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('main')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: args
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('args')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  ParametrizedType: Array[String]
                    SimpleType: Array
                      CodeReferenceElement: Array
                        PsiElement(identifier)('Array')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: String
                        CodeReferenceElement: String
                          PsiElement(identifier)('String')
                      PsiElement(])(']')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Unit
            CodeReferenceElement: Unit
              PsiElement(identifier)('Unit')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          BlockExpression
            PsiElement({)('{')
            PsiWhiteSpace('\n    ')
            ScPatternDefinition: t1
              PsiComment(comment)('// 2.10.3 - ok')
              PsiWhiteSpace('\n    ')
              PsiComment(comment)('// 2.11.0-M7 - type mismatch; found : Seq[DB1.MANIFEST.Entry]')
              PsiWhiteSpace('\n    ')
              PsiComment(comment)('// required: Seq[DB1.MANIFEST.Entry]')
              PsiWhiteSpace('\n    ')
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              ListOfPatterns
                ReferencePattern: t1
                  PsiElement(identifier)('t1')
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              SimpleType: D1.M.Entry
                CodeReferenceElement: D1.M.Entry
                  CodeReferenceElement: D1.M
                    CodeReferenceElement: D1
                      PsiElement(identifier)('D1')
                    PsiElement(.)('.')
                    PsiElement(identifier)('M')
                  PsiElement(.)('.')
                  PsiElement(identifier)('Entry')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              ReferenceExpression: D1.m
                ReferenceExpression: D1
                  PsiElement(identifier)('D1')
                PsiElement(.)('.')
                PsiElement(identifier)('m')
            PsiWhiteSpace('\n\n    ')
            ScPatternDefinition: t2
              PsiComment(comment)('// 2.10.3 - ok')
              PsiWhiteSpace('\n    ')
              PsiComment(comment)('// 2.11.0-M7 - ok')
              PsiWhiteSpace('\n    ')
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              ListOfPatterns
                ReferencePattern: t2
                  PsiElement(identifier)('t2')
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              SimpleType: D2.M.Entry
                CodeReferenceElement: D2.M.Entry
                  CodeReferenceElement: D2.M
                    CodeReferenceElement: D2
                      PsiElement(identifier)('D2')
                    PsiElement(.)('.')
                    PsiElement(identifier)('M')
                  PsiElement(.)('.')
                  PsiElement(identifier)('Entry')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              ReferenceExpression: D2.m
                ReferenceExpression: D2
                  PsiElement(identifier)('D2')
                PsiElement(.)('.')
                PsiElement(identifier)('m')
            PsiWhiteSpace('\n  ')
            PsiElement(})('}')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
