object Test {

  case class Bar[A]()

  def meth[A](consumer: A => Unit, s: Bar[A]): Unit = {
    s match {
      case bar: Bar[a] => {
        meth(consumer, new Bar[a]) // ok with `meth[a]`
      }
    }
  }
}
-----
ScalaFile
  ScObject: Test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n\n  ')
        ScClass: Bar
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(case)('case')
          PsiWhiteSpace(' ')
          PsiElement(class)('class')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Bar')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: A
              PsiElement(identifier)('A')
            PsiElement(])(']')
          PrimaryConstructor
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            Parameters
              ParametersClause
                PsiElement(()('(')
                PsiElement())(')')
          ExtendsBlock
            <empty list>
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: meth
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('meth')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: A
              PsiElement(identifier)('A')
            PsiElement(])(']')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: consumer
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('consumer')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  FunctionalType: A => Unit
                    SimpleType: A
                      CodeReferenceElement: A
                        PsiElement(identifier)('A')
                    PsiWhiteSpace(' ')
                    PsiElement(=>)('=>')
                    PsiWhiteSpace(' ')
                    SimpleType: Unit
                      CodeReferenceElement: Unit
                        PsiElement(identifier)('Unit')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              Parameter: s
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('s')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  ParametrizedType: Bar[A]
                    SimpleType: Bar
                      CodeReferenceElement: Bar
                        PsiElement(identifier)('Bar')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: A
                        CodeReferenceElement: A
                          PsiElement(identifier)('A')
                      PsiElement(])(']')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Unit
            CodeReferenceElement: Unit
              PsiElement(identifier)('Unit')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          BlockExpression
            PsiElement({)('{')
            PsiWhiteSpace('\n    ')
            MatchStatement
              ReferenceExpression: s
                PsiElement(identifier)('s')
              PsiWhiteSpace(' ')
              PsiElement(match)('match')
              PsiWhiteSpace(' ')
              PsiElement({)('{')
              PsiWhiteSpace('\n      ')
              CaseClauses
                CaseClause
                  PsiElement(case)('case')
                  PsiWhiteSpace(' ')
                  Scala3 TypedPattern
                    ReferencePattern: bar
                      PsiElement(identifier)('bar')
                    PsiElement(:)(':')
                    PsiWhiteSpace(' ')
                    TypePattern
                      ParametrizedType: Bar[a]
                        SimpleType: Bar
                          CodeReferenceElement: Bar
                            PsiElement(identifier)('Bar')
                        TypeArgumentsList
                          PsiElement([)('[')
                          TypeVariable: a
                            PsiElement(identifier)('a')
                          PsiElement(])(']')
                  PsiWhiteSpace(' ')
                  PsiElement(=>)('=>')
                  PsiWhiteSpace(' ')
                  BlockOfExpressions
                    BlockExpression
                      PsiElement({)('{')
                      PsiWhiteSpace('\n        ')
                      MethodCall
                        ReferenceExpression: meth
                          PsiElement(identifier)('meth')
                        ArgumentList
                          PsiElement(()('(')
                          ReferenceExpression: consumer
                            PsiElement(identifier)('consumer')
                          PsiElement(,)(',')
                          PsiWhiteSpace(' ')
                          ScNewTemplateDefinition: <anonymous>
                            PsiElement(new)('new')
                            PsiWhiteSpace(' ')
                            ExtendsBlock
                              TemplateParents
                                ConstructorInvocation
                                  ParametrizedType: Bar[a]
                                    SimpleType: Bar
                                      CodeReferenceElement: Bar
                                        PsiElement(identifier)('Bar')
                                    TypeArgumentsList
                                      PsiElement([)('[')
                                      SimpleType: a
                                        CodeReferenceElement: a
                                          PsiElement(identifier)('a')
                                      PsiElement(])(']')
                          PsiElement())(')')
                      PsiWhiteSpace(' ')
                      PsiComment(comment)('// ok with `meth[a]`')
                      PsiWhiteSpace('\n      ')
                      PsiElement(})('}')
              PsiWhiteSpace('\n    ')
              PsiElement(})('}')
            PsiWhiteSpace('\n  ')
            PsiElement(})('}')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
