sealed abstract class CtorType
object CtorType {
  final class Props extends CtorType
  sealed trait Summoner { type CT <: CtorType }
  implicit def summonP: Summoner {type CT = Props} = ???
}

final case class Builder() {
  def build(using ctorType: CtorType.Summoner): Component[ctorType.CT] = ???
}

final class Component[CT <: CtorType]

object Test {

  def assertTypeOf[A](a: => A) = new TestDsl[A]
  class TestDsl[A] {
    def is[B](implicit ev: A =:= B): Unit = ()
  }

  type Expect = Component[CtorType.Props]

  assertTypeOf( Builder().build ).is[Expect] // error

  val x = Builder().build
  assertTypeOf(x).is[Expect] // ok
}
-----
ScalaFile
  ScClass: CtorType
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(sealed)('sealed')
      PsiWhiteSpace(' ')
      PsiElement(abstract)('abstract')
    PsiWhiteSpace(' ')
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('CtorType')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    ExtendsBlock
      <empty list>
  PsiWhiteSpace('\n')
  ScObject: CtorType
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('CtorType')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScClass: Props
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(final)('final')
          PsiWhiteSpace(' ')
          PsiElement(class)('class')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Props')
          PrimaryConstructor
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            Parameters
              <empty list>
          PsiWhiteSpace(' ')
          ExtendsBlock
            PsiElement(extends)('extends')
            PsiWhiteSpace(' ')
            TemplateParents
              ConstructorInvocation
                SimpleType: CtorType
                  CodeReferenceElement: CtorType
                    PsiElement(identifier)('CtorType')
        PsiWhiteSpace('\n  ')
        ScTrait: Summoner
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(sealed)('sealed')
          PsiWhiteSpace(' ')
          PsiElement(trait)('trait')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Summoner')
          PsiWhiteSpace(' ')
          ExtendsBlock
            ScTemplateBody
              PsiElement({)('{')
              PsiWhiteSpace(' ')
              ScTypeAliasDeclaration: CT
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(type)('type')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('CT')
                PsiWhiteSpace(' ')
                PsiElement(<:)('<:')
                PsiWhiteSpace(' ')
                SimpleType: CtorType
                  CodeReferenceElement: CtorType
                    PsiElement(identifier)('CtorType')
              PsiWhiteSpace(' ')
              PsiElement(})('}')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: summonP
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(implicit)('implicit')
          PsiWhiteSpace(' ')
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('summonP')
          Parameters
            <empty list>
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          CompoundType: Summoner {type CT = Props}
            SimpleType: Summoner
              CodeReferenceElement: Summoner
                PsiElement(identifier)('Summoner')
            PsiWhiteSpace(' ')
            Refinement
              PsiElement({)('{')
              ScTypeAliasDefinition: CT
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(type)('type')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('CT')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                SimpleType: Props
                  CodeReferenceElement: Props
                    PsiElement(identifier)('Props')
              PsiElement(})('}')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: ???
            PsiElement(identifier)('???')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScClass: Builder
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(final)('final')
      PsiWhiteSpace(' ')
      PsiElement(case)('case')
    PsiWhiteSpace(' ')
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Builder')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        ParametersClause
          PsiElement(()('(')
          PsiElement())(')')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: build
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('build')
          Parameters
            ParametersClause
              PsiElement(()('(')
              PsiElement(using)('using')
              PsiWhiteSpace(' ')
              Parameter: ctorType
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('ctorType')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: CtorType.Summoner
                    CodeReferenceElement: CtorType.Summoner
                      CodeReferenceElement: CtorType
                        PsiElement(identifier)('CtorType')
                      PsiElement(.)('.')
                      PsiElement(identifier)('Summoner')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: Component[ctorType.CT]
            SimpleType: Component
              CodeReferenceElement: Component
                PsiElement(identifier)('Component')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: ctorType.CT
                CodeReferenceElement: ctorType.CT
                  CodeReferenceElement: ctorType
                    PsiElement(identifier)('ctorType')
                  PsiElement(.)('.')
                  PsiElement(identifier)('CT')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: ???
            PsiElement(identifier)('???')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScClass: Component
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(final)('final')
    PsiWhiteSpace(' ')
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Component')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: CT
        PsiElement(identifier)('CT')
        PsiWhiteSpace(' ')
        PsiElement(<:)('<:')
        PsiWhiteSpace(' ')
        SimpleType: CtorType
          CodeReferenceElement: CtorType
            PsiElement(identifier)('CtorType')
      PsiElement(])(']')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    ExtendsBlock
      <empty list>
  PsiWhiteSpace('\n\n')
  ScObject: Test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: assertTypeOf
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('assertTypeOf')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: A
              PsiElement(identifier)('A')
            PsiElement(])(']')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: a
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('a')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  PsiElement(=>)('=>')
                  PsiWhiteSpace(' ')
                  SimpleType: A
                    CodeReferenceElement: A
                      PsiElement(identifier)('A')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ScNewTemplateDefinition: <anonymous>
            PsiElement(new)('new')
            PsiWhiteSpace(' ')
            ExtendsBlock
              TemplateParents
                ConstructorInvocation
                  ParametrizedType: TestDsl[A]
                    SimpleType: TestDsl
                      CodeReferenceElement: TestDsl
                        PsiElement(identifier)('TestDsl')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: A
                        CodeReferenceElement: A
                          PsiElement(identifier)('A')
                      PsiElement(])(']')
        PsiWhiteSpace('\n  ')
        ScClass: TestDsl
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(class)('class')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('TestDsl')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: A
              PsiElement(identifier)('A')
            PsiElement(])(']')
          PrimaryConstructor
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            Parameters
              <empty list>
          PsiWhiteSpace(' ')
          ExtendsBlock
            ScTemplateBody
              PsiElement({)('{')
              PsiWhiteSpace('\n    ')
              ScFunctionDefinition: is
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(def)('def')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('is')
                TypeParameterClause
                  PsiElement([)('[')
                  TypeParameter: B
                    PsiElement(identifier)('B')
                  PsiElement(])(']')
                Parameters
                  ParametersClause
                    PsiElement(()('(')
                    PsiElement(implicit)('implicit')
                    PsiWhiteSpace(' ')
                    Parameter: ev
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(identifier)('ev')
                      PsiElement(:)(':')
                      PsiWhiteSpace(' ')
                      ParameterType
                        InfixType: A =:= B
                          SimpleType: A
                            CodeReferenceElement: A
                              PsiElement(identifier)('A')
                          PsiWhiteSpace(' ')
                          CodeReferenceElement: =:=
                            PsiElement(identifier)('=:=')
                          PsiWhiteSpace(' ')
                          SimpleType: B
                            CodeReferenceElement: B
                              PsiElement(identifier)('B')
                    PsiElement())(')')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                SimpleType: Unit
                  CodeReferenceElement: Unit
                    PsiElement(identifier)('Unit')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                UnitExpression
                  PsiElement(()('(')
                  PsiElement())(')')
              PsiWhiteSpace('\n  ')
              PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        ScTypeAliasDefinition: Expect
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Expect')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ParametrizedType: Component[CtorType.Props]
            SimpleType: Component
              CodeReferenceElement: Component
                PsiElement(identifier)('Component')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: CtorType.Props
                CodeReferenceElement: CtorType.Props
                  CodeReferenceElement: CtorType
                    PsiElement(identifier)('CtorType')
                  PsiElement(.)('.')
                  PsiElement(identifier)('Props')
              PsiElement(])(']')
        PsiWhiteSpace('\n\n  ')
        GenericCall
          ReferenceExpression: assertTypeOf( Builder().build ).is
            MethodCall
              ReferenceExpression: assertTypeOf
                PsiElement(identifier)('assertTypeOf')
              ArgumentList
                PsiElement(()('(')
                PsiWhiteSpace(' ')
                ReferenceExpression: Builder().build
                  MethodCall
                    ReferenceExpression: Builder
                      PsiElement(identifier)('Builder')
                    ArgumentList
                      PsiElement(()('(')
                      PsiElement())(')')
                  PsiElement(.)('.')
                  PsiElement(identifier)('build')
                PsiWhiteSpace(' ')
                PsiElement())(')')
            PsiElement(.)('.')
            PsiElement(identifier)('is')
          TypeArgumentsList
            PsiElement([)('[')
            SimpleType: Expect
              CodeReferenceElement: Expect
                PsiElement(identifier)('Expect')
            PsiElement(])(']')
        PsiWhiteSpace(' ')
        PsiComment(comment)('// error')
        PsiWhiteSpace('\n\n  ')
        ScPatternDefinition: x
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: x
              PsiElement(identifier)('x')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: Builder().build
            MethodCall
              ReferenceExpression: Builder
                PsiElement(identifier)('Builder')
              ArgumentList
                PsiElement(()('(')
                PsiElement())(')')
            PsiElement(.)('.')
            PsiElement(identifier)('build')
        PsiWhiteSpace('\n  ')
        GenericCall
          ReferenceExpression: assertTypeOf(x).is
            MethodCall
              ReferenceExpression: assertTypeOf
                PsiElement(identifier)('assertTypeOf')
              ArgumentList
                PsiElement(()('(')
                ReferenceExpression: x
                  PsiElement(identifier)('x')
                PsiElement())(')')
            PsiElement(.)('.')
            PsiElement(identifier)('is')
          TypeArgumentsList
            PsiElement([)('[')
            SimpleType: Expect
              CodeReferenceElement: Expect
                PsiElement(identifier)('Expect')
            PsiElement(])(']')
        PsiWhiteSpace(' ')
        PsiComment(comment)('// ok')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
