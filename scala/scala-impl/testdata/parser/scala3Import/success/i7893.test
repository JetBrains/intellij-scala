object Test {
  val l1 = List(Predef.identity[Int](_))
  val lc1: List[Int => Int] = l1

  val l2 = List(Predef.identity[Int])
  val lc2: List[Int => Int] = l2
}
-----
ScalaFile
  ScObject: Test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: l1
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: l1
              PsiElement(identifier)('l1')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: List
              PsiElement(identifier)('List')
            ArgumentList
              PsiElement(()('(')
              MethodCall
                GenericCall
                  ReferenceExpression: Predef.identity
                    ReferenceExpression: Predef
                      PsiElement(identifier)('Predef')
                    PsiElement(.)('.')
                    PsiElement(identifier)('identity')
                  TypeArgumentsList
                    PsiElement([)('[')
                    SimpleType: Int
                      CodeReferenceElement: Int
                        PsiElement(identifier)('Int')
                    PsiElement(])(']')
                ArgumentList
                  PsiElement(()('(')
                  UnderscoreSection
                    PsiElement(_)('_')
                  PsiElement())(')')
              PsiElement())(')')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: lc1
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: lc1
              PsiElement(identifier)('lc1')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: List[Int => Int]
            SimpleType: List
              CodeReferenceElement: List
                PsiElement(identifier)('List')
            TypeArgumentsList
              PsiElement([)('[')
              FunctionalType: Int => Int
                SimpleType: Int
                  CodeReferenceElement: Int
                    PsiElement(identifier)('Int')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                SimpleType: Int
                  CodeReferenceElement: Int
                    PsiElement(identifier)('Int')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: l1
            PsiElement(identifier)('l1')
        PsiWhiteSpace('\n\n  ')
        ScPatternDefinition: l2
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: l2
              PsiElement(identifier)('l2')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: List
              PsiElement(identifier)('List')
            ArgumentList
              PsiElement(()('(')
              GenericCall
                ReferenceExpression: Predef.identity
                  ReferenceExpression: Predef
                    PsiElement(identifier)('Predef')
                  PsiElement(.)('.')
                  PsiElement(identifier)('identity')
                TypeArgumentsList
                  PsiElement([)('[')
                  SimpleType: Int
                    CodeReferenceElement: Int
                      PsiElement(identifier)('Int')
                  PsiElement(])(']')
              PsiElement())(')')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: lc2
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: lc2
              PsiElement(identifier)('lc2')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: List[Int => Int]
            SimpleType: List
              CodeReferenceElement: List
                PsiElement(identifier)('List')
            TypeArgumentsList
              PsiElement([)('[')
              FunctionalType: Int => Int
                SimpleType: Int
                  CodeReferenceElement: Int
                    PsiElement(identifier)('Int')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                SimpleType: Int
                  CodeReferenceElement: Int
                    PsiElement(identifier)('Int')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: l2
            PsiElement(identifier)('l2')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
