type RemoveFrom[R, A] = R match {
  case A & newType => newType
}

def removeOnePart[R, PartR, A](f: R => A, partR: PartR): RemoveFrom[R, PartR] => A = ???

trait A {}
trait B {}

val f: (A & B) => Int = ???
val f2 = removeOnePart(f, new A {})
-----
ScalaFile
  ScTypeAliasDefinition: RemoveFrom
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(type)('type')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('RemoveFrom')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: R
        PsiElement(identifier)('R')
      PsiElement(,)(',')
      PsiWhiteSpace(' ')
      TypeParameter: A
        PsiElement(identifier)('A')
      PsiElement(])(']')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    MatchType: R match {
  case A & newType => newType
}
      SimpleType: R
        CodeReferenceElement: R
          PsiElement(identifier)('R')
      PsiWhiteSpace(' ')
      PsiElement(match)('match')
      PsiWhiteSpace(' ')
      PsiElement({)('{')
      PsiWhiteSpace('\n  ')
      ScMatchTypeCasesImpl(match type cases)
        ScMatchTypeCaseImpl(match type case)
          PsiElement(case)('case')
          PsiWhiteSpace(' ')
          InfixType: A & newType
            SimpleType: A
              CodeReferenceElement: A
                PsiElement(identifier)('A')
            PsiWhiteSpace(' ')
            CodeReferenceElement: &
              PsiElement(identifier)('&')
            PsiWhiteSpace(' ')
            TypeVariable: newType
              PsiElement(identifier)('newType')
          PsiWhiteSpace(' ')
          PsiElement(=>)('=>')
          PsiWhiteSpace(' ')
          SimpleType: newType
            CodeReferenceElement: newType
              PsiElement(identifier)('newType')
      PsiWhiteSpace('\n')
      PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScFunctionDefinition: removeOnePart
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(def)('def')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('removeOnePart')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: R
        PsiElement(identifier)('R')
      PsiElement(,)(',')
      PsiWhiteSpace(' ')
      TypeParameter: PartR
        PsiElement(identifier)('PartR')
      PsiElement(,)(',')
      PsiWhiteSpace(' ')
      TypeParameter: A
        PsiElement(identifier)('A')
      PsiElement(])(']')
    Parameters
      ParametersClause
        PsiElement(()('(')
        Parameter: f
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(identifier)('f')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParameterType
            FunctionalType: R => A
              SimpleType: R
                CodeReferenceElement: R
                  PsiElement(identifier)('R')
              PsiWhiteSpace(' ')
              PsiElement(=>)('=>')
              PsiWhiteSpace(' ')
              SimpleType: A
                CodeReferenceElement: A
                  PsiElement(identifier)('A')
        PsiElement(,)(',')
        PsiWhiteSpace(' ')
        Parameter: partR
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(identifier)('partR')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParameterType
            SimpleType: PartR
              CodeReferenceElement: PartR
                PsiElement(identifier)('PartR')
        PsiElement())(')')
    PsiElement(:)(':')
    PsiWhiteSpace(' ')
    FunctionalType: RemoveFrom[R, PartR] => A
      ParametrizedType: RemoveFrom[R, PartR]
        SimpleType: RemoveFrom
          CodeReferenceElement: RemoveFrom
            PsiElement(identifier)('RemoveFrom')
        TypeArgumentsList
          PsiElement([)('[')
          SimpleType: R
            CodeReferenceElement: R
              PsiElement(identifier)('R')
          PsiElement(,)(',')
          PsiWhiteSpace(' ')
          SimpleType: PartR
            CodeReferenceElement: PartR
              PsiElement(identifier)('PartR')
          PsiElement(])(']')
      PsiWhiteSpace(' ')
      PsiElement(=>)('=>')
      PsiWhiteSpace(' ')
      SimpleType: A
        CodeReferenceElement: A
          PsiElement(identifier)('A')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    ReferenceExpression: ???
      PsiElement(identifier)('???')
  PsiWhiteSpace('\n\n')
  ScTrait: A
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('A')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiElement(})('}')
  PsiWhiteSpace('\n')
  ScTrait: B
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('B')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScPatternDefinition: f
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(val)('val')
    PsiWhiteSpace(' ')
    ListOfPatterns
      ReferencePattern: f
        PsiElement(identifier)('f')
    PsiElement(:)(':')
    PsiWhiteSpace(' ')
    FunctionalType: (A & B) => Int
      TypeInParenthesis: (A & B)
        PsiElement(()('(')
        InfixType: A & B
          SimpleType: A
            CodeReferenceElement: A
              PsiElement(identifier)('A')
          PsiWhiteSpace(' ')
          CodeReferenceElement: &
            PsiElement(identifier)('&')
          PsiWhiteSpace(' ')
          SimpleType: B
            CodeReferenceElement: B
              PsiElement(identifier)('B')
        PsiElement())(')')
      PsiWhiteSpace(' ')
      PsiElement(=>)('=>')
      PsiWhiteSpace(' ')
      SimpleType: Int
        CodeReferenceElement: Int
          PsiElement(identifier)('Int')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    ReferenceExpression: ???
      PsiElement(identifier)('???')
  PsiWhiteSpace('\n')
  ScPatternDefinition: f2
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(val)('val')
    PsiWhiteSpace(' ')
    ListOfPatterns
      ReferencePattern: f2
        PsiElement(identifier)('f2')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    MethodCall
      ReferenceExpression: removeOnePart
        PsiElement(identifier)('removeOnePart')
      ArgumentList
        PsiElement(()('(')
        ReferenceExpression: f
          PsiElement(identifier)('f')
        PsiElement(,)(',')
        PsiWhiteSpace(' ')
        ScNewTemplateDefinition: <anonymous>
          PsiElement(new)('new')
          PsiWhiteSpace(' ')
          ExtendsBlock
            TemplateParents
              ConstructorInvocation
                SimpleType: A
                  CodeReferenceElement: A
                    PsiElement(identifier)('A')
            PsiWhiteSpace(' ')
            ScTemplateBody
              PsiElement({)('{')
              PsiElement(})('}')
        PsiElement())(')')
