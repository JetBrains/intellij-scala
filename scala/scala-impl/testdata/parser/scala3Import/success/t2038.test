class Test {
  List(Some(classOf[java.lang.Integer]), Some(classOf[Int])).map {
    case Some(f: Class[_]) => f.cast(???)
  }
}
-----
ScalaFile
  ScClass: Test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        MethodCall
          ReferenceExpression: List(Some(classOf[java.lang.Integer]), Some(classOf[Int])).map
            MethodCall
              ReferenceExpression: List
                PsiElement(identifier)('List')
              ArgumentList
                PsiElement(()('(')
                MethodCall
                  ReferenceExpression: Some
                    PsiElement(identifier)('Some')
                  ArgumentList
                    PsiElement(()('(')
                    GenericCall
                      ReferenceExpression: classOf
                        PsiElement(identifier)('classOf')
                      TypeArgumentsList
                        PsiElement([)('[')
                        SimpleType: java.lang.Integer
                          CodeReferenceElement: java.lang.Integer
                            CodeReferenceElement: java.lang
                              CodeReferenceElement: java
                                PsiElement(identifier)('java')
                              PsiElement(.)('.')
                              PsiElement(identifier)('lang')
                            PsiElement(.)('.')
                            PsiElement(identifier)('Integer')
                        PsiElement(])(']')
                    PsiElement())(')')
                PsiElement(,)(',')
                PsiWhiteSpace(' ')
                MethodCall
                  ReferenceExpression: Some
                    PsiElement(identifier)('Some')
                  ArgumentList
                    PsiElement(()('(')
                    GenericCall
                      ReferenceExpression: classOf
                        PsiElement(identifier)('classOf')
                      TypeArgumentsList
                        PsiElement([)('[')
                        SimpleType: Int
                          CodeReferenceElement: Int
                            PsiElement(identifier)('Int')
                        PsiElement(])(']')
                    PsiElement())(')')
                PsiElement())(')')
            PsiElement(.)('.')
            PsiElement(identifier)('map')
          PsiWhiteSpace(' ')
          ArgumentList
            BlockExpression
              PsiElement({)('{')
              PsiWhiteSpace('\n    ')
              CaseClauses
                CaseClause
                  PsiElement(case)('case')
                  PsiWhiteSpace(' ')
                  ConstructorPattern
                    CodeReferenceElement: Some
                      PsiElement(identifier)('Some')
                    Pattern Argument List
                      PsiElement(()('(')
                      Scala3 TypedPattern
                        ReferencePattern: f
                          PsiElement(identifier)('f')
                        PsiElement(:)(':')
                        PsiWhiteSpace(' ')
                        TypePattern
                          ParametrizedType: Class[_]
                            SimpleType: Class
                              CodeReferenceElement: Class
                                PsiElement(identifier)('Class')
                            TypeArgumentsList
                              PsiElement([)('[')
                              TypeVariable: _
                                PsiElement(_)('_')
                              PsiElement(])(']')
                      PsiElement())(')')
                  PsiWhiteSpace(' ')
                  PsiElement(=>)('=>')
                  PsiWhiteSpace(' ')
                  BlockOfExpressions
                    MethodCall
                      ReferenceExpression: f.cast
                        ReferenceExpression: f
                          PsiElement(identifier)('f')
                        PsiElement(.)('.')
                        PsiElement(identifier)('cast')
                      ArgumentList
                        PsiElement(()('(')
                        ReferenceExpression: ???
                          PsiElement(identifier)('???')
                        PsiElement())(')')
              PsiWhiteSpace('\n  ')
              PsiElement(})('}')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
