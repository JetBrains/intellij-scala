object Test {
  trait Foo0 {
    type T0
  }

  object Foo0 {
    type Aux[T] = Foo0 {type T0 = T}
    implicit def apply[T](implicit v: ValueOf[T]): Aux[T] = new Foo0 {
      type T0 = T
    }
  }

  type Foo[T] = Foo0 { type T0 = T }
  val Foo = Foo0

  Foo[5]
  implicitly[Foo.Aux[5]]
  implicitly[Foo[5]]


  val three: 3 = 3
  type Three = three.type
  Foo[Three]
  implicitly[Foo.Aux[Three]]
  implicitly[Foo[Three]]

  final object bar
  type Bar = bar.type
  Foo[Bar]
  implicitly[Foo.Aux[Bar]]
  implicitly[Foo[Bar]]
}
-----
ScalaFile
  ScObject: Test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScTrait: Foo0
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(trait)('trait')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Foo0')
          PsiWhiteSpace(' ')
          ExtendsBlock
            ScTemplateBody
              PsiElement({)('{')
              PsiWhiteSpace('\n    ')
              ScTypeAliasDeclaration: T0
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(type)('type')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('T0')
              PsiWhiteSpace('\n  ')
              PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        ScObject: Foo0
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(object)('object')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Foo0')
          PsiWhiteSpace(' ')
          ExtendsBlock
            ScTemplateBody
              PsiElement({)('{')
              PsiWhiteSpace('\n    ')
              ScTypeAliasDefinition: Aux
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(type)('type')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('Aux')
                TypeParameterClause
                  PsiElement([)('[')
                  TypeParameter: T
                    PsiElement(identifier)('T')
                  PsiElement(])(']')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                CompoundType: Foo0 {type T0 = T}
                  SimpleType: Foo0
                    CodeReferenceElement: Foo0
                      PsiElement(identifier)('Foo0')
                  PsiWhiteSpace(' ')
                  Refinement
                    PsiElement({)('{')
                    ScTypeAliasDefinition: T0
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(type)('type')
                      PsiWhiteSpace(' ')
                      PsiElement(identifier)('T0')
                      PsiWhiteSpace(' ')
                      PsiElement(=)('=')
                      PsiWhiteSpace(' ')
                      SimpleType: T
                        CodeReferenceElement: T
                          PsiElement(identifier)('T')
                    PsiElement(})('}')
              PsiWhiteSpace('\n    ')
              ScFunctionDefinition: apply
                AnnotationsList
                  <empty list>
                Modifiers
                  PsiElement(implicit)('implicit')
                PsiWhiteSpace(' ')
                PsiElement(def)('def')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('apply')
                TypeParameterClause
                  PsiElement([)('[')
                  TypeParameter: T
                    PsiElement(identifier)('T')
                  PsiElement(])(']')
                Parameters
                  ParametersClause
                    PsiElement(()('(')
                    PsiElement(implicit)('implicit')
                    PsiWhiteSpace(' ')
                    Parameter: v
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(identifier)('v')
                      PsiElement(:)(':')
                      PsiWhiteSpace(' ')
                      ParameterType
                        ParametrizedType: ValueOf[T]
                          SimpleType: ValueOf
                            CodeReferenceElement: ValueOf
                              PsiElement(identifier)('ValueOf')
                          TypeArgumentsList
                            PsiElement([)('[')
                            SimpleType: T
                              CodeReferenceElement: T
                                PsiElement(identifier)('T')
                            PsiElement(])(']')
                    PsiElement())(')')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParametrizedType: Aux[T]
                  SimpleType: Aux
                    CodeReferenceElement: Aux
                      PsiElement(identifier)('Aux')
                  TypeArgumentsList
                    PsiElement([)('[')
                    SimpleType: T
                      CodeReferenceElement: T
                        PsiElement(identifier)('T')
                    PsiElement(])(']')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                ScNewTemplateDefinition: <anonymous>
                  PsiElement(new)('new')
                  PsiWhiteSpace(' ')
                  ExtendsBlock
                    TemplateParents
                      ConstructorInvocation
                        SimpleType: Foo0
                          CodeReferenceElement: Foo0
                            PsiElement(identifier)('Foo0')
                    PsiWhiteSpace(' ')
                    ScTemplateBody
                      PsiElement({)('{')
                      PsiWhiteSpace('\n      ')
                      ScTypeAliasDefinition: T0
                        AnnotationsList
                          <empty list>
                        Modifiers
                          <empty list>
                        PsiElement(type)('type')
                        PsiWhiteSpace(' ')
                        PsiElement(identifier)('T0')
                        PsiWhiteSpace(' ')
                        PsiElement(=)('=')
                        PsiWhiteSpace(' ')
                        SimpleType: T
                          CodeReferenceElement: T
                            PsiElement(identifier)('T')
                      PsiWhiteSpace('\n    ')
                      PsiElement(})('}')
              PsiWhiteSpace('\n  ')
              PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        ScTypeAliasDefinition: Foo
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Foo')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: T
              PsiElement(identifier)('T')
            PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          CompoundType: Foo0 { type T0 = T }
            SimpleType: Foo0
              CodeReferenceElement: Foo0
                PsiElement(identifier)('Foo0')
            PsiWhiteSpace(' ')
            Refinement
              PsiElement({)('{')
              PsiWhiteSpace(' ')
              ScTypeAliasDefinition: T0
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(type)('type')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('T0')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                SimpleType: T
                  CodeReferenceElement: T
                    PsiElement(identifier)('T')
              PsiWhiteSpace(' ')
              PsiElement(})('}')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: Foo
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: Foo
              PsiElement(identifier)('Foo')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: Foo0
            PsiElement(identifier)('Foo0')
        PsiWhiteSpace('\n\n  ')
        GenericCall
          ReferenceExpression: Foo
            PsiElement(identifier)('Foo')
          TypeArgumentsList
            PsiElement([)('[')
            LiteralType: 5
              IntegerLiteral
                PsiElement(integer)('5')
            PsiElement(])(']')
        PsiWhiteSpace('\n  ')
        GenericCall
          ReferenceExpression: implicitly
            PsiElement(identifier)('implicitly')
          TypeArgumentsList
            PsiElement([)('[')
            ParametrizedType: Foo.Aux[5]
              SimpleType: Foo.Aux
                CodeReferenceElement: Foo.Aux
                  CodeReferenceElement: Foo
                    PsiElement(identifier)('Foo')
                  PsiElement(.)('.')
                  PsiElement(identifier)('Aux')
              TypeArgumentsList
                PsiElement([)('[')
                LiteralType: 5
                  IntegerLiteral
                    PsiElement(integer)('5')
                PsiElement(])(']')
            PsiElement(])(']')
        PsiWhiteSpace('\n  ')
        GenericCall
          ReferenceExpression: implicitly
            PsiElement(identifier)('implicitly')
          TypeArgumentsList
            PsiElement([)('[')
            ParametrizedType: Foo[5]
              SimpleType: Foo
                CodeReferenceElement: Foo
                  PsiElement(identifier)('Foo')
              TypeArgumentsList
                PsiElement([)('[')
                LiteralType: 5
                  IntegerLiteral
                    PsiElement(integer)('5')
                PsiElement(])(']')
            PsiElement(])(']')
        PsiWhiteSpace('\n\n\n  ')
        ScPatternDefinition: three
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: three
              PsiElement(identifier)('three')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          LiteralType: 3
            IntegerLiteral
              PsiElement(integer)('3')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          IntegerLiteral
            PsiElement(integer)('3')
        PsiWhiteSpace('\n  ')
        ScTypeAliasDefinition: Three
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Three')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          SimpleType: three.type
            CodeReferenceElement: three
              PsiElement(identifier)('three')
            PsiElement(.)('.')
            PsiElement(type)('type')
        PsiWhiteSpace('\n  ')
        GenericCall
          ReferenceExpression: Foo
            PsiElement(identifier)('Foo')
          TypeArgumentsList
            PsiElement([)('[')
            SimpleType: Three
              CodeReferenceElement: Three
                PsiElement(identifier)('Three')
            PsiElement(])(']')
        PsiWhiteSpace('\n  ')
        GenericCall
          ReferenceExpression: implicitly
            PsiElement(identifier)('implicitly')
          TypeArgumentsList
            PsiElement([)('[')
            ParametrizedType: Foo.Aux[Three]
              SimpleType: Foo.Aux
                CodeReferenceElement: Foo.Aux
                  CodeReferenceElement: Foo
                    PsiElement(identifier)('Foo')
                  PsiElement(.)('.')
                  PsiElement(identifier)('Aux')
              TypeArgumentsList
                PsiElement([)('[')
                SimpleType: Three
                  CodeReferenceElement: Three
                    PsiElement(identifier)('Three')
                PsiElement(])(']')
            PsiElement(])(']')
        PsiWhiteSpace('\n  ')
        GenericCall
          ReferenceExpression: implicitly
            PsiElement(identifier)('implicitly')
          TypeArgumentsList
            PsiElement([)('[')
            ParametrizedType: Foo[Three]
              SimpleType: Foo
                CodeReferenceElement: Foo
                  PsiElement(identifier)('Foo')
              TypeArgumentsList
                PsiElement([)('[')
                SimpleType: Three
                  CodeReferenceElement: Three
                    PsiElement(identifier)('Three')
                PsiElement(])(']')
            PsiElement(])(']')
        PsiWhiteSpace('\n\n  ')
        ScObject: bar
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(final)('final')
          PsiWhiteSpace(' ')
          PsiElement(object)('object')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('bar')
          ExtendsBlock
            <empty list>
        PsiWhiteSpace('\n  ')
        ScTypeAliasDefinition: Bar
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Bar')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          SimpleType: bar.type
            CodeReferenceElement: bar
              PsiElement(identifier)('bar')
            PsiElement(.)('.')
            PsiElement(type)('type')
        PsiWhiteSpace('\n  ')
        GenericCall
          ReferenceExpression: Foo
            PsiElement(identifier)('Foo')
          TypeArgumentsList
            PsiElement([)('[')
            SimpleType: Bar
              CodeReferenceElement: Bar
                PsiElement(identifier)('Bar')
            PsiElement(])(']')
        PsiWhiteSpace('\n  ')
        GenericCall
          ReferenceExpression: implicitly
            PsiElement(identifier)('implicitly')
          TypeArgumentsList
            PsiElement([)('[')
            ParametrizedType: Foo.Aux[Bar]
              SimpleType: Foo.Aux
                CodeReferenceElement: Foo.Aux
                  CodeReferenceElement: Foo
                    PsiElement(identifier)('Foo')
                  PsiElement(.)('.')
                  PsiElement(identifier)('Aux')
              TypeArgumentsList
                PsiElement([)('[')
                SimpleType: Bar
                  CodeReferenceElement: Bar
                    PsiElement(identifier)('Bar')
                PsiElement(])(']')
            PsiElement(])(']')
        PsiWhiteSpace('\n  ')
        GenericCall
          ReferenceExpression: implicitly
            PsiElement(identifier)('implicitly')
          TypeArgumentsList
            PsiElement([)('[')
            ParametrizedType: Foo[Bar]
              SimpleType: Foo
                CodeReferenceElement: Foo
                  PsiElement(identifier)('Foo')
              TypeArgumentsList
                PsiElement([)('[')
                SimpleType: Bar
                  CodeReferenceElement: Bar
                    PsiElement(identifier)('Bar')
                PsiElement(])(']')
            PsiElement(])(']')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
