package autoParamTupling

object t1:
  val xs: List[(Int, Int)] = ???

  xs.map {
    case (x, y) => x + y
  }

  xs.map {
    (x, y) => x + y
  }

  xs.map(_ + _)

-----
ScalaFile
  ScPackaging
    PsiElement(package)('package')
    PsiWhiteSpace(' ')
    CodeReferenceElement: autoParamTupling
      PsiElement(identifier)('autoParamTupling')
    PsiWhiteSpace('\n\n')
    ScObject: t1
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      PsiElement(object)('object')
      PsiWhiteSpace(' ')
      PsiElement(identifier)('t1')
      ExtendsBlock
        ScTemplateBody
          PsiElement(:)(':')
          PsiWhiteSpace('\n  ')
          ScPatternDefinition: xs
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(val)('val')
            PsiWhiteSpace(' ')
            ListOfPatterns
              ReferencePattern: xs
                PsiElement(identifier)('xs')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            ParametrizedType: List[(Int, Int)]
              SimpleType: List
                CodeReferenceElement: List
                  PsiElement(identifier)('List')
              TypeArgumentsList
                PsiElement([)('[')
                TupleType: (Int, Int)
                  PsiElement(()('(')
                  TypesList
                    SimpleType: Int
                      CodeReferenceElement: Int
                        PsiElement(identifier)('Int')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    SimpleType: Int
                      CodeReferenceElement: Int
                        PsiElement(identifier)('Int')
                  PsiElement())(')')
                PsiElement(])(']')
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace(' ')
            ReferenceExpression: ???
              PsiElement(identifier)('???')
          PsiWhiteSpace('\n\n  ')
          MethodCall
            ReferenceExpression: xs.map
              ReferenceExpression: xs
                PsiElement(identifier)('xs')
              PsiElement(.)('.')
              PsiElement(identifier)('map')
            PsiWhiteSpace(' ')
            ArgumentList
              BlockExpression
                PsiElement({)('{')
                PsiWhiteSpace('\n    ')
                CaseClauses
                  CaseClause
                    PsiElement(case)('case')
                    PsiWhiteSpace(' ')
                    TuplePattern
                      PsiElement(()('(')
                      ArgumentPatterns
                        ReferencePattern: x
                          PsiElement(identifier)('x')
                        PsiElement(,)(',')
                        PsiWhiteSpace(' ')
                        ReferencePattern: y
                          PsiElement(identifier)('y')
                      PsiElement())(')')
                    PsiWhiteSpace(' ')
                    PsiElement(=>)('=>')
                    PsiWhiteSpace(' ')
                    BlockOfExpressions
                      InfixExpression
                        ReferenceExpression: x
                          PsiElement(identifier)('x')
                        PsiWhiteSpace(' ')
                        ReferenceExpression: +
                          PsiElement(identifier)('+')
                        PsiWhiteSpace(' ')
                        ReferenceExpression: y
                          PsiElement(identifier)('y')
                PsiWhiteSpace('\n  ')
                PsiElement(})('}')
          PsiWhiteSpace('\n\n  ')
          MethodCall
            ReferenceExpression: xs.map
              ReferenceExpression: xs
                PsiElement(identifier)('xs')
              PsiElement(.)('.')
              PsiElement(identifier)('map')
            PsiWhiteSpace(' ')
            ArgumentList
              BlockExpression
                PsiElement({)('{')
                PsiWhiteSpace('\n    ')
                FunctionExpression
                  Parameters
                    ParametersClause
                      PsiElement(()('(')
                      Parameter: x
                        AnnotationsList
                          <empty list>
                        PsiElement(identifier)('x')
                      PsiElement(,)(',')
                      PsiWhiteSpace(' ')
                      Parameter: y
                        AnnotationsList
                          <empty list>
                        PsiElement(identifier)('y')
                      PsiElement())(')')
                  PsiWhiteSpace(' ')
                  PsiElement(=>)('=>')
                  PsiWhiteSpace(' ')
                  BlockOfExpressions
                    InfixExpression
                      ReferenceExpression: x
                        PsiElement(identifier)('x')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: +
                        PsiElement(identifier)('+')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: y
                        PsiElement(identifier)('y')
                PsiWhiteSpace('\n  ')
                PsiElement(})('}')
          PsiWhiteSpace('\n\n  ')
          MethodCall
            ReferenceExpression: xs.map
              ReferenceExpression: xs
                PsiElement(identifier)('xs')
              PsiElement(.)('.')
              PsiElement(identifier)('map')
            ArgumentList
              PsiElement(()('(')
              InfixExpression
                UnderscoreSection
                  PsiElement(_)('_')
                PsiWhiteSpace(' ')
                ReferenceExpression: +
                  PsiElement(identifier)('+')
                PsiWhiteSpace(' ')
                UnderscoreSection
                  PsiElement(_)('_')
              PsiElement())(')')
