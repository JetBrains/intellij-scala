package test // bug #1215

class Async {
  def unapply(scrut: Any): Option[Any] = None
}

class Buffer {
  val Put = new Async
  //case class Put(x: Int)

  def joinPat(x: Any): Unit = {
    x match {
      case Put =>
      case Put(y) =>
        println("returning " + y)
    }
  }
}


object unapplyJoins extends App { // bug #1257

  class Sync {
    def apply(): Int = 42
    def unapply(scrut: Any): Boolean = false
  }

  class Buffer {
    object Get extends Sync

    val jp: PartialFunction[Any, Any] = {
      case Get() =>
    }
  }

  println((new Buffer).jp.isDefinedAt(42))
}
-----
ScalaFile
  ScPackaging
    PsiElement(package)('package')
    PsiWhiteSpace(' ')
    CodeReferenceElement: test
      PsiElement(identifier)('test')
    PsiWhiteSpace(' ')
    PsiComment(comment)('// bug #1215')
    PsiWhiteSpace('\n\n')
    ScClass: Async
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      PsiElement(class)('class')
      PsiWhiteSpace(' ')
      PsiElement(identifier)('Async')
      PrimaryConstructor
        AnnotationsList
          <empty list>
        Modifiers
          <empty list>
        Parameters
          <empty list>
      PsiWhiteSpace(' ')
      ExtendsBlock
        ScTemplateBody
          PsiElement({)('{')
          PsiWhiteSpace('\n  ')
          ScFunctionDefinition: unapply
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(def)('def')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('unapply')
            Parameters
              ParametersClause
                PsiElement(()('(')
                Parameter: scrut
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(identifier)('scrut')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    SimpleType: Any
                      CodeReferenceElement: Any
                        PsiElement(identifier)('Any')
                PsiElement())(')')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            ParametrizedType: Option[Any]
              SimpleType: Option
                CodeReferenceElement: Option
                  PsiElement(identifier)('Option')
              TypeArgumentsList
                PsiElement([)('[')
                SimpleType: Any
                  CodeReferenceElement: Any
                    PsiElement(identifier)('Any')
                PsiElement(])(']')
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace(' ')
            ReferenceExpression: None
              PsiElement(identifier)('None')
          PsiWhiteSpace('\n')
          PsiElement(})('}')
    PsiWhiteSpace('\n\n')
    ScClass: Buffer
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      PsiElement(class)('class')
      PsiWhiteSpace(' ')
      PsiElement(identifier)('Buffer')
      PrimaryConstructor
        AnnotationsList
          <empty list>
        Modifiers
          <empty list>
        Parameters
          <empty list>
      PsiWhiteSpace(' ')
      ExtendsBlock
        ScTemplateBody
          PsiElement({)('{')
          PsiWhiteSpace('\n  ')
          ScPatternDefinition: Put
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(val)('val')
            PsiWhiteSpace(' ')
            ListOfPatterns
              ReferencePattern: Put
                PsiElement(identifier)('Put')
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace(' ')
            ScNewTemplateDefinition: <anonymous>
              PsiElement(new)('new')
              PsiWhiteSpace(' ')
              ExtendsBlock
                TemplateParents
                  ConstructorInvocation
                    SimpleType: Async
                      CodeReferenceElement: Async
                        PsiElement(identifier)('Async')
          PsiWhiteSpace('\n  ')
          PsiComment(comment)('//case class Put(x: Int)')
          PsiWhiteSpace('\n\n  ')
          ScFunctionDefinition: joinPat
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(def)('def')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('joinPat')
            Parameters
              ParametersClause
                PsiElement(()('(')
                Parameter: x
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(identifier)('x')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    SimpleType: Any
                      CodeReferenceElement: Any
                        PsiElement(identifier)('Any')
                PsiElement())(')')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            SimpleType: Unit
              CodeReferenceElement: Unit
                PsiElement(identifier)('Unit')
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace(' ')
            BlockExpression
              PsiElement({)('{')
              PsiWhiteSpace('\n    ')
              MatchStatement
                ReferenceExpression: x
                  PsiElement(identifier)('x')
                PsiWhiteSpace(' ')
                PsiElement(match)('match')
                PsiWhiteSpace(' ')
                PsiElement({)('{')
                PsiWhiteSpace('\n      ')
                CaseClauses
                  CaseClause
                    PsiElement(case)('case')
                    PsiWhiteSpace(' ')
                    StableElementPattern
                      ReferenceExpression: Put
                        PsiElement(identifier)('Put')
                    PsiWhiteSpace(' ')
                    PsiElement(=>)('=>')
                    BlockOfExpressions
                      <empty list>
                  PsiWhiteSpace('\n      ')
                  CaseClause
                    PsiElement(case)('case')
                    PsiWhiteSpace(' ')
                    ConstructorPattern
                      CodeReferenceElement: Put
                        PsiElement(identifier)('Put')
                      Pattern Argument List
                        PsiElement(()('(')
                        ReferencePattern: y
                          PsiElement(identifier)('y')
                        PsiElement())(')')
                    PsiWhiteSpace(' ')
                    PsiElement(=>)('=>')
                    PsiWhiteSpace('\n        ')
                    BlockOfExpressions
                      MethodCall
                        ReferenceExpression: println
                          PsiElement(identifier)('println')
                        ArgumentList
                          PsiElement(()('(')
                          InfixExpression
                            StringLiteral
                              PsiElement(string content)('"returning "')
                            PsiWhiteSpace(' ')
                            ReferenceExpression: +
                              PsiElement(identifier)('+')
                            PsiWhiteSpace(' ')
                            ReferenceExpression: y
                              PsiElement(identifier)('y')
                          PsiElement())(')')
                PsiWhiteSpace('\n    ')
                PsiElement(})('}')
              PsiWhiteSpace('\n  ')
              PsiElement(})('}')
          PsiWhiteSpace('\n')
          PsiElement(})('}')
    PsiWhiteSpace('\n\n\n')
    ScObject: unapplyJoins
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      PsiElement(object)('object')
      PsiWhiteSpace(' ')
      PsiElement(identifier)('unapplyJoins')
      PsiWhiteSpace(' ')
      ExtendsBlock
        PsiElement(extends)('extends')
        PsiWhiteSpace(' ')
        TemplateParents
          ConstructorInvocation
            SimpleType: App
              CodeReferenceElement: App
                PsiElement(identifier)('App')
        PsiWhiteSpace(' ')
        ScTemplateBody
          PsiElement({)('{')
          PsiWhiteSpace(' ')
          PsiComment(comment)('// bug #1257')
          PsiWhiteSpace('\n\n  ')
          ScClass: Sync
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(class)('class')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('Sync')
            PrimaryConstructor
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              Parameters
                <empty list>
            PsiWhiteSpace(' ')
            ExtendsBlock
              ScTemplateBody
                PsiElement({)('{')
                PsiWhiteSpace('\n    ')
                ScFunctionDefinition: apply
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(def)('def')
                  PsiWhiteSpace(' ')
                  PsiElement(identifier)('apply')
                  Parameters
                    ParametersClause
                      PsiElement(()('(')
                      PsiElement())(')')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  SimpleType: Int
                    CodeReferenceElement: Int
                      PsiElement(identifier)('Int')
                  PsiWhiteSpace(' ')
                  PsiElement(=)('=')
                  PsiWhiteSpace(' ')
                  IntegerLiteral
                    PsiElement(integer)('42')
                PsiWhiteSpace('\n    ')
                ScFunctionDefinition: unapply
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(def)('def')
                  PsiWhiteSpace(' ')
                  PsiElement(identifier)('unapply')
                  Parameters
                    ParametersClause
                      PsiElement(()('(')
                      Parameter: scrut
                        AnnotationsList
                          <empty list>
                        Modifiers
                          <empty list>
                        PsiElement(identifier)('scrut')
                        PsiElement(:)(':')
                        PsiWhiteSpace(' ')
                        ParameterType
                          SimpleType: Any
                            CodeReferenceElement: Any
                              PsiElement(identifier)('Any')
                      PsiElement())(')')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  SimpleType: Boolean
                    CodeReferenceElement: Boolean
                      PsiElement(identifier)('Boolean')
                  PsiWhiteSpace(' ')
                  PsiElement(=)('=')
                  PsiWhiteSpace(' ')
                  BooleanLiteral
                    PsiElement(false)('false')
                PsiWhiteSpace('\n  ')
                PsiElement(})('}')
          PsiWhiteSpace('\n\n  ')
          ScClass: Buffer
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(class)('class')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('Buffer')
            PrimaryConstructor
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              Parameters
                <empty list>
            PsiWhiteSpace(' ')
            ExtendsBlock
              ScTemplateBody
                PsiElement({)('{')
                PsiWhiteSpace('\n    ')
                ScObject: Get
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(object)('object')
                  PsiWhiteSpace(' ')
                  PsiElement(identifier)('Get')
                  PsiWhiteSpace(' ')
                  ExtendsBlock
                    PsiElement(extends)('extends')
                    PsiWhiteSpace(' ')
                    TemplateParents
                      ConstructorInvocation
                        SimpleType: Sync
                          CodeReferenceElement: Sync
                            PsiElement(identifier)('Sync')
                PsiWhiteSpace('\n\n    ')
                ScPatternDefinition: jp
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(val)('val')
                  PsiWhiteSpace(' ')
                  ListOfPatterns
                    ReferencePattern: jp
                      PsiElement(identifier)('jp')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParametrizedType: PartialFunction[Any, Any]
                    SimpleType: PartialFunction
                      CodeReferenceElement: PartialFunction
                        PsiElement(identifier)('PartialFunction')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: Any
                        CodeReferenceElement: Any
                          PsiElement(identifier)('Any')
                      PsiElement(,)(',')
                      PsiWhiteSpace(' ')
                      SimpleType: Any
                        CodeReferenceElement: Any
                          PsiElement(identifier)('Any')
                      PsiElement(])(']')
                  PsiWhiteSpace(' ')
                  PsiElement(=)('=')
                  PsiWhiteSpace(' ')
                  BlockExpression
                    PsiElement({)('{')
                    PsiWhiteSpace('\n      ')
                    CaseClauses
                      CaseClause
                        PsiElement(case)('case')
                        PsiWhiteSpace(' ')
                        ConstructorPattern
                          CodeReferenceElement: Get
                            PsiElement(identifier)('Get')
                          Pattern Argument List
                            PsiElement(()('(')
                            PsiElement())(')')
                        PsiWhiteSpace(' ')
                        PsiElement(=>)('=>')
                        BlockOfExpressions
                          <empty list>
                    PsiWhiteSpace('\n    ')
                    PsiElement(})('}')
                PsiWhiteSpace('\n  ')
                PsiElement(})('}')
          PsiWhiteSpace('\n\n  ')
          MethodCall
            ReferenceExpression: println
              PsiElement(identifier)('println')
            ArgumentList
              PsiElement(()('(')
              MethodCall
                ReferenceExpression: (new Buffer).jp.isDefinedAt
                  ReferenceExpression: (new Buffer).jp
                    ExpressionInParenthesis
                      PsiElement(()('(')
                      ScNewTemplateDefinition: <anonymous>
                        PsiElement(new)('new')
                        PsiWhiteSpace(' ')
                        ExtendsBlock
                          TemplateParents
                            ConstructorInvocation
                              SimpleType: Buffer
                                CodeReferenceElement: Buffer
                                  PsiElement(identifier)('Buffer')
                      PsiElement())(')')
                    PsiElement(.)('.')
                    PsiElement(identifier)('jp')
                  PsiElement(.)('.')
                  PsiElement(identifier)('isDefinedAt')
                ArgumentList
                  PsiElement(()('(')
                  IntegerLiteral
                    PsiElement(integer)('42')
                  PsiElement())(')')
              PsiElement())(')')
          PsiWhiteSpace('\n')
          PsiElement(})('}')
