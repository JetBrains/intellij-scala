object Test {
  implicit def foo2bar(foo: Foo): Bar = foo.bar

  class Foo(val bar: Bar) {
    def testCoercion = {
      val a: this.type = this
      a.baz /* here, foo2bar is inferred  by the compiler, as expected */
    }
    // def testCoercionThis0 = baz
    // --> error: not found: value baz
    // PP: is that something we really want to work? Seems like sketchville.
    //
    // These work, so I moved this out of pending.
    def testCoercionThis1 = this.baz
    def testCoercionThis2 = (this: Foo).baz
  }

  class Bar { def baz = System.out.println("baz") }
}
-----
ScalaFile
  ScObject: Test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: foo2bar
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(implicit)('implicit')
          PsiWhiteSpace(' ')
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('foo2bar')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: foo
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('foo')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Foo
                    CodeReferenceElement: Foo
                      PsiElement(identifier)('Foo')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Bar
            CodeReferenceElement: Bar
              PsiElement(identifier)('Bar')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: foo.bar
            ReferenceExpression: foo
              PsiElement(identifier)('foo')
            PsiElement(.)('.')
            PsiElement(identifier)('bar')
        PsiWhiteSpace('\n\n  ')
        ScClass: Foo
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(class)('class')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Foo')
          PrimaryConstructor
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            Parameters
              ParametersClause
                PsiElement(()('(')
                ClassParameter: bar
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(val)('val')
                  PsiWhiteSpace(' ')
                  PsiElement(identifier)('bar')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    SimpleType: Bar
                      CodeReferenceElement: Bar
                        PsiElement(identifier)('Bar')
                PsiElement())(')')
          PsiWhiteSpace(' ')
          ExtendsBlock
            ScTemplateBody
              PsiElement({)('{')
              PsiWhiteSpace('\n    ')
              ScFunctionDefinition: testCoercion
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(def)('def')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('testCoercion')
                Parameters
                  <empty list>
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                BlockExpression
                  PsiElement({)('{')
                  PsiWhiteSpace('\n      ')
                  ScPatternDefinition: a
                    AnnotationsList
                      <empty list>
                    Modifiers
                      <empty list>
                    PsiElement(val)('val')
                    PsiWhiteSpace(' ')
                    ListOfPatterns
                      ReferencePattern: a
                        PsiElement(identifier)('a')
                    PsiElement(:)(':')
                    PsiWhiteSpace(' ')
                    SimpleType: this.type
                      ThisReference
                        PsiElement(this)('this')
                      PsiElement(.)('.')
                      PsiElement(type)('type')
                    PsiWhiteSpace(' ')
                    PsiElement(=)('=')
                    PsiWhiteSpace(' ')
                    ThisReference
                      PsiElement(this)('this')
                  PsiWhiteSpace('\n      ')
                  ReferenceExpression: a.baz
                    ReferenceExpression: a
                      PsiElement(identifier)('a')
                    PsiElement(.)('.')
                    PsiElement(identifier)('baz')
                  PsiWhiteSpace(' ')
                  PsiComment(BlockComment)('/* here, foo2bar is inferred  by the compiler, as expected */')
                  PsiWhiteSpace('\n    ')
                  PsiElement(})('}')
              PsiWhiteSpace('\n    ')
              ScFunctionDefinition: testCoercionThis1
                PsiComment(comment)('// def testCoercionThis0 = baz')
                PsiWhiteSpace('\n    ')
                PsiComment(comment)('// --> error: not found: value baz')
                PsiWhiteSpace('\n    ')
                PsiComment(comment)('// PP: is that something we really want to work? Seems like sketchville.')
                PsiWhiteSpace('\n    ')
                PsiComment(comment)('//')
                PsiWhiteSpace('\n    ')
                PsiComment(comment)('// These work, so I moved this out of pending.')
                PsiWhiteSpace('\n    ')
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(def)('def')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('testCoercionThis1')
                Parameters
                  <empty list>
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                ReferenceExpression: this.baz
                  ThisReference
                    PsiElement(this)('this')
                  PsiElement(.)('.')
                  PsiElement(identifier)('baz')
              PsiWhiteSpace('\n    ')
              ScFunctionDefinition: testCoercionThis2
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(def)('def')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('testCoercionThis2')
                Parameters
                  <empty list>
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                ReferenceExpression: (this: Foo).baz
                  ExpressionInParenthesis
                    PsiElement(()('(')
                    TypedExpression
                      ThisReference
                        PsiElement(this)('this')
                      PsiElement(:)(':')
                      PsiWhiteSpace(' ')
                      SimpleType: Foo
                        CodeReferenceElement: Foo
                          PsiElement(identifier)('Foo')
                    PsiElement())(')')
                  PsiElement(.)('.')
                  PsiElement(identifier)('baz')
              PsiWhiteSpace('\n  ')
              PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        ScClass: Bar
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(class)('class')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Bar')
          PrimaryConstructor
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            Parameters
              <empty list>
          PsiWhiteSpace(' ')
          ExtendsBlock
            ScTemplateBody
              PsiElement({)('{')
              PsiWhiteSpace(' ')
              ScFunctionDefinition: baz
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(def)('def')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('baz')
                Parameters
                  <empty list>
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                MethodCall
                  ReferenceExpression: System.out.println
                    ReferenceExpression: System.out
                      ReferenceExpression: System
                        PsiElement(identifier)('System')
                      PsiElement(.)('.')
                      PsiElement(identifier)('out')
                    PsiElement(.)('.')
                    PsiElement(identifier)('println')
                  ArgumentList
                    PsiElement(()('(')
                    StringLiteral
                      PsiElement(string content)('"baz"')
                    PsiElement())(')')
              PsiWhiteSpace(' ')
              PsiElement(})('}')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
