package value_class_override_no_spec

// There are two versions of this tests: one with and one without specialization.
// The bug was only exposed *without* specialization.
trait T extends Any {
  def x: Any
}

final class StringOps(val repr0: String) extends AnyVal with T {
  def x = ()
}
-----
ScalaFile
  ScPackaging
    PsiElement(package)('package')
    PsiWhiteSpace(' ')
    CodeReferenceElement: value_class_override_no_spec
      PsiElement(identifier)('value_class_override_no_spec')
    PsiWhiteSpace('\n\n')
    ScTrait: T
      PsiComment(comment)('// There are two versions of this tests: one with and one without specialization.')
      PsiWhiteSpace('\n')
      PsiComment(comment)('// The bug was only exposed *without* specialization.')
      PsiWhiteSpace('\n')
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      PsiElement(trait)('trait')
      PsiWhiteSpace(' ')
      PsiElement(identifier)('T')
      PsiWhiteSpace(' ')
      ExtendsBlock
        PsiElement(extends)('extends')
        PsiWhiteSpace(' ')
        TemplateParents
          ConstructorInvocation
            SimpleType: Any
              CodeReferenceElement: Any
                PsiElement(identifier)('Any')
        PsiWhiteSpace(' ')
        ScTemplateBody
          PsiElement({)('{')
          PsiWhiteSpace('\n  ')
          ScFunctionDeclaration: x
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(def)('def')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('x')
            Parameters
              <empty list>
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            SimpleType: Any
              CodeReferenceElement: Any
                PsiElement(identifier)('Any')
          PsiWhiteSpace('\n')
          PsiElement(})('}')
    PsiWhiteSpace('\n\n')
    ScClass: StringOps
      AnnotationsList
        <empty list>
      Modifiers
        PsiElement(final)('final')
      PsiWhiteSpace(' ')
      PsiElement(class)('class')
      PsiWhiteSpace(' ')
      PsiElement(identifier)('StringOps')
      PrimaryConstructor
        AnnotationsList
          <empty list>
        Modifiers
          <empty list>
        Parameters
          ParametersClause
            PsiElement(()('(')
            ClassParameter: repr0
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              PsiElement(identifier)('repr0')
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              ParameterType
                SimpleType: String
                  CodeReferenceElement: String
                    PsiElement(identifier)('String')
            PsiElement())(')')
      PsiWhiteSpace(' ')
      ExtendsBlock
        PsiElement(extends)('extends')
        PsiWhiteSpace(' ')
        TemplateParents
          ConstructorInvocation
            SimpleType: AnyVal
              CodeReferenceElement: AnyVal
                PsiElement(identifier)('AnyVal')
          PsiWhiteSpace(' ')
          PsiElement(with)('with')
          PsiWhiteSpace(' ')
          ConstructorInvocation
            SimpleType: T
              CodeReferenceElement: T
                PsiElement(identifier)('T')
        PsiWhiteSpace(' ')
        ScTemplateBody
          PsiElement({)('{')
          PsiWhiteSpace('\n  ')
          ScFunctionDefinition: x
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(def)('def')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('x')
            Parameters
              <empty list>
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace(' ')
            UnitExpression
              PsiElement(()('(')
              PsiElement())(')')
          PsiWhiteSpace('\n')
          PsiElement(})('}')
