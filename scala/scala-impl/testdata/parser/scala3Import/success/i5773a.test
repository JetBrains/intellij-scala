trait Semigroup[T] {
  extension (x: T) def combine(y: T): T
}
object Test {
  implicit val IntSemigroup: Semigroup[Int] = new {
    extension (x: Int) def combine(y: Int): Int = x + y
  }
  implicit def OptionSemigroup[T: Semigroup]: Semigroup[Option[T]] = new {
    extension (x: Option[T]) def combine(y: Option[T]): Option[T] = for {
      x0 <- x
      y0 <- y
    } yield x0.combine(y0)
  }
  1.combine(2)
  Some(1).combine(Some(2))
  Option(1) combine Option(2)
}
-----
ScalaFile
  ScTrait: Semigroup
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Semigroup')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: T
        PsiElement(identifier)('T')
      PsiElement(])(']')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        Extension on T
          PsiElement(extension)('extension')
          PsiWhiteSpace(' ')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: x
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: T
                    CodeReferenceElement: T
                      PsiElement(identifier)('T')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          ScExtensionBody
            ScFunctionDeclaration: combine
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(def)('def')
              PsiWhiteSpace(' ')
              PsiElement(identifier)('combine')
              Parameters
                ParametersClause
                  PsiElement(()('(')
                  Parameter: y
                    AnnotationsList
                      <empty list>
                    Modifiers
                      <empty list>
                    PsiElement(identifier)('y')
                    PsiElement(:)(':')
                    PsiWhiteSpace(' ')
                    ParameterType
                      SimpleType: T
                        CodeReferenceElement: T
                          PsiElement(identifier)('T')
                  PsiElement())(')')
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              SimpleType: T
                CodeReferenceElement: T
                  PsiElement(identifier)('T')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n')
  ScObject: Test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: IntSemigroup
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(implicit)('implicit')
          PsiWhiteSpace(' ')
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: IntSemigroup
              PsiElement(identifier)('IntSemigroup')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: Semigroup[Int]
            SimpleType: Semigroup
              CodeReferenceElement: Semigroup
                PsiElement(identifier)('Semigroup')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: Int
                CodeReferenceElement: Int
                  PsiElement(identifier)('Int')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ScNewTemplateDefinition: <anonymous>
            PsiElement(new)('new')
            PsiWhiteSpace(' ')
            ExtendsBlock
              ScTemplateBody
                PsiElement({)('{')
                PsiWhiteSpace('\n    ')
                Extension on Int
                  PsiElement(extension)('extension')
                  PsiWhiteSpace(' ')
                  Parameters
                    ParametersClause
                      PsiElement(()('(')
                      Parameter: x
                        AnnotationsList
                          <empty list>
                        Modifiers
                          <empty list>
                        PsiElement(identifier)('x')
                        PsiElement(:)(':')
                        PsiWhiteSpace(' ')
                        ParameterType
                          SimpleType: Int
                            CodeReferenceElement: Int
                              PsiElement(identifier)('Int')
                      PsiElement())(')')
                  PsiWhiteSpace(' ')
                  ScExtensionBody
                    ScFunctionDefinition: combine
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(def)('def')
                      PsiWhiteSpace(' ')
                      PsiElement(identifier)('combine')
                      Parameters
                        ParametersClause
                          PsiElement(()('(')
                          Parameter: y
                            AnnotationsList
                              <empty list>
                            Modifiers
                              <empty list>
                            PsiElement(identifier)('y')
                            PsiElement(:)(':')
                            PsiWhiteSpace(' ')
                            ParameterType
                              SimpleType: Int
                                CodeReferenceElement: Int
                                  PsiElement(identifier)('Int')
                          PsiElement())(')')
                      PsiElement(:)(':')
                      PsiWhiteSpace(' ')
                      SimpleType: Int
                        CodeReferenceElement: Int
                          PsiElement(identifier)('Int')
                      PsiWhiteSpace(' ')
                      PsiElement(=)('=')
                      PsiWhiteSpace(' ')
                      InfixExpression
                        ReferenceExpression: x
                          PsiElement(identifier)('x')
                        PsiWhiteSpace(' ')
                        ReferenceExpression: +
                          PsiElement(identifier)('+')
                        PsiWhiteSpace(' ')
                        ReferenceExpression: y
                          PsiElement(identifier)('y')
                PsiWhiteSpace('\n  ')
                PsiElement(})('}')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: OptionSemigroup
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(implicit)('implicit')
          PsiWhiteSpace(' ')
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('OptionSemigroup')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: T
              PsiElement(identifier)('T')
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              SimpleType: Semigroup
                CodeReferenceElement: Semigroup
                  PsiElement(identifier)('Semigroup')
            PsiElement(])(']')
          Parameters
            <empty list>
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: Semigroup[Option[T]]
            SimpleType: Semigroup
              CodeReferenceElement: Semigroup
                PsiElement(identifier)('Semigroup')
            TypeArgumentsList
              PsiElement([)('[')
              ParametrizedType: Option[T]
                SimpleType: Option
                  CodeReferenceElement: Option
                    PsiElement(identifier)('Option')
                TypeArgumentsList
                  PsiElement([)('[')
                  SimpleType: T
                    CodeReferenceElement: T
                      PsiElement(identifier)('T')
                  PsiElement(])(']')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ScNewTemplateDefinition: <anonymous>
            PsiElement(new)('new')
            PsiWhiteSpace(' ')
            ExtendsBlock
              ScTemplateBody
                PsiElement({)('{')
                PsiWhiteSpace('\n    ')
                Extension on Option[T]
                  PsiElement(extension)('extension')
                  PsiWhiteSpace(' ')
                  Parameters
                    ParametersClause
                      PsiElement(()('(')
                      Parameter: x
                        AnnotationsList
                          <empty list>
                        Modifiers
                          <empty list>
                        PsiElement(identifier)('x')
                        PsiElement(:)(':')
                        PsiWhiteSpace(' ')
                        ParameterType
                          ParametrizedType: Option[T]
                            SimpleType: Option
                              CodeReferenceElement: Option
                                PsiElement(identifier)('Option')
                            TypeArgumentsList
                              PsiElement([)('[')
                              SimpleType: T
                                CodeReferenceElement: T
                                  PsiElement(identifier)('T')
                              PsiElement(])(']')
                      PsiElement())(')')
                  PsiWhiteSpace(' ')
                  ScExtensionBody
                    ScFunctionDefinition: combine
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(def)('def')
                      PsiWhiteSpace(' ')
                      PsiElement(identifier)('combine')
                      Parameters
                        ParametersClause
                          PsiElement(()('(')
                          Parameter: y
                            AnnotationsList
                              <empty list>
                            Modifiers
                              <empty list>
                            PsiElement(identifier)('y')
                            PsiElement(:)(':')
                            PsiWhiteSpace(' ')
                            ParameterType
                              ParametrizedType: Option[T]
                                SimpleType: Option
                                  CodeReferenceElement: Option
                                    PsiElement(identifier)('Option')
                                TypeArgumentsList
                                  PsiElement([)('[')
                                  SimpleType: T
                                    CodeReferenceElement: T
                                      PsiElement(identifier)('T')
                                  PsiElement(])(']')
                          PsiElement())(')')
                      PsiElement(:)(':')
                      PsiWhiteSpace(' ')
                      ParametrizedType: Option[T]
                        SimpleType: Option
                          CodeReferenceElement: Option
                            PsiElement(identifier)('Option')
                        TypeArgumentsList
                          PsiElement([)('[')
                          SimpleType: T
                            CodeReferenceElement: T
                              PsiElement(identifier)('T')
                          PsiElement(])(']')
                      PsiWhiteSpace(' ')
                      PsiElement(=)('=')
                      PsiWhiteSpace(' ')
                      ForStatement
                        PsiElement(for)('for')
                        PsiWhiteSpace(' ')
                        PsiElement({)('{')
                        PsiWhiteSpace('\n      ')
                        Enumerators
                          Generator
                            ReferencePattern: x0
                              PsiElement(identifier)('x0')
                            PsiWhiteSpace(' ')
                            PsiElement(<-)('<-')
                            PsiWhiteSpace(' ')
                            ReferenceExpression: x
                              PsiElement(identifier)('x')
                          PsiWhiteSpace('\n      ')
                          Generator
                            ReferencePattern: y0
                              PsiElement(identifier)('y0')
                            PsiWhiteSpace(' ')
                            PsiElement(<-)('<-')
                            PsiWhiteSpace(' ')
                            ReferenceExpression: y
                              PsiElement(identifier)('y')
                        PsiWhiteSpace('\n    ')
                        PsiElement(})('}')
                        PsiWhiteSpace(' ')
                        PsiElement(yield)('yield')
                        PsiWhiteSpace(' ')
                        MethodCall
                          ReferenceExpression: x0.combine
                            ReferenceExpression: x0
                              PsiElement(identifier)('x0')
                            PsiElement(.)('.')
                            PsiElement(identifier)('combine')
                          ArgumentList
                            PsiElement(()('(')
                            ReferenceExpression: y0
                              PsiElement(identifier)('y0')
                            PsiElement())(')')
                PsiWhiteSpace('\n  ')
                PsiElement(})('}')
        PsiWhiteSpace('\n  ')
        MethodCall
          ReferenceExpression: 1.combine
            IntegerLiteral
              PsiElement(integer)('1')
            PsiElement(.)('.')
            PsiElement(identifier)('combine')
          ArgumentList
            PsiElement(()('(')
            IntegerLiteral
              PsiElement(integer)('2')
            PsiElement())(')')
        PsiWhiteSpace('\n  ')
        MethodCall
          ReferenceExpression: Some(1).combine
            MethodCall
              ReferenceExpression: Some
                PsiElement(identifier)('Some')
              ArgumentList
                PsiElement(()('(')
                IntegerLiteral
                  PsiElement(integer)('1')
                PsiElement())(')')
            PsiElement(.)('.')
            PsiElement(identifier)('combine')
          ArgumentList
            PsiElement(()('(')
            MethodCall
              ReferenceExpression: Some
                PsiElement(identifier)('Some')
              ArgumentList
                PsiElement(()('(')
                IntegerLiteral
                  PsiElement(integer)('2')
                PsiElement())(')')
            PsiElement())(')')
        PsiWhiteSpace('\n  ')
        InfixExpression
          MethodCall
            ReferenceExpression: Option
              PsiElement(identifier)('Option')
            ArgumentList
              PsiElement(()('(')
              IntegerLiteral
                PsiElement(integer)('1')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          ReferenceExpression: combine
            PsiElement(identifier)('combine')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: Option
              PsiElement(identifier)('Option')
            ArgumentList
              PsiElement(()('(')
              IntegerLiteral
                PsiElement(integer)('2')
              PsiElement())(')')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
