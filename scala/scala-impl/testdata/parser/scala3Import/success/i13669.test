trait MyExtensions:
  extension (lhs: Int) def bash: Unit = {}
object MyExtensions extends MyExtensions

export MyExtensions.*
val fails = 1.bash
-----
ScalaFile
  ScTrait: MyExtensions
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('MyExtensions')
    ExtendsBlock
      ScTemplateBody
        PsiElement(:)(':')
        PsiWhiteSpace('\n  ')
        Extension on Int
          PsiElement(extension)('extension')
          PsiWhiteSpace(' ')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: lhs
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('lhs')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Int
                    CodeReferenceElement: Int
                      PsiElement(identifier)('Int')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          ScExtensionBody
            ScFunctionDefinition: bash
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(def)('def')
              PsiWhiteSpace(' ')
              PsiElement(identifier)('bash')
              Parameters
                <empty list>
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              SimpleType: Unit
                CodeReferenceElement: Unit
                  PsiElement(identifier)('Unit')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              BlockExpression
                PsiElement({)('{')
                PsiElement(})('}')
  PsiWhiteSpace('\n')
  ScObject: MyExtensions
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('MyExtensions')
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          SimpleType: MyExtensions
            CodeReferenceElement: MyExtensions
              PsiElement(identifier)('MyExtensions')
  PsiWhiteSpace('\n\n')
  ScExportStatement
    PsiElement(export)('export')
    PsiWhiteSpace(' ')
    ImportExpression
      CodeReferenceElement: MyExtensions
        PsiElement(identifier)('MyExtensions')
      PsiElement(.)('.')
      PsiElement(*)('*')
  PsiWhiteSpace('\n')
  ScPatternDefinition: fails
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(val)('val')
    PsiWhiteSpace(' ')
    ListOfPatterns
      ReferencePattern: fails
        PsiElement(identifier)('fails')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    ReferenceExpression: 1.bash
      IntegerLiteral
        PsiElement(integer)('1')
      PsiElement(.)('.')
      PsiElement(identifier)('bash')
