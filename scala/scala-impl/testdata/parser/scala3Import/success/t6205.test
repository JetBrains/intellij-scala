// original code by reporter
class A[T]
class Test1 {
  def x(backing: Map[A[_], Any]) =
    for( (k: A[kt], v) <- backing)
      yield (k: A[kt])
}

// this tests same thing as above, but independent of library classes,
// earlier expansions eliminated as well as variance (everything's invariant)
case class Holder[A](a: A)
class Mapped[A] { def map[T](f: Holder[A] => T): Iterable[T] = ??? }
class Test2 {
  def works(backing: Mapped[A[_]]): Iterable[A[_]]
    = backing.map(x =>
         x match {case Holder(k: A[kt]) => (k: A[kt])}
      )
}
-----
ScalaFile
  ScClass: A
    PsiComment(comment)('// original code by reporter')
    PsiWhiteSpace('\n')
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('A')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: T
        PsiElement(identifier)('T')
      PsiElement(])(']')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    ExtendsBlock
      <empty list>
  PsiWhiteSpace('\n')
  ScClass: Test1
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test1')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: x
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('x')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: backing
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('backing')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  ParametrizedType: Map[A[_], Any]
                    SimpleType: Map
                      CodeReferenceElement: Map
                        PsiElement(identifier)('Map')
                    TypeArgumentsList
                      PsiElement([)('[')
                      ParametrizedType: A[_]
                        SimpleType: A
                          CodeReferenceElement: A
                            PsiElement(identifier)('A')
                        TypeArgumentsList
                          PsiElement([)('[')
                          WildcardType: _
                            PsiElement(_)('_')
                          PsiElement(])(']')
                      PsiElement(,)(',')
                      PsiWhiteSpace(' ')
                      SimpleType: Any
                        CodeReferenceElement: Any
                          PsiElement(identifier)('Any')
                      PsiElement(])(']')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace('\n    ')
          ForStatement
            PsiElement(for)('for')
            PsiElement(()('(')
            PsiWhiteSpace(' ')
            Enumerators
              Generator
                TuplePattern
                  PsiElement(()('(')
                  ArgumentPatterns
                    Scala3 TypedPattern
                      ReferencePattern: k
                        PsiElement(identifier)('k')
                      PsiElement(:)(':')
                      PsiWhiteSpace(' ')
                      TypePattern
                        ParametrizedType: A[kt]
                          SimpleType: A
                            CodeReferenceElement: A
                              PsiElement(identifier)('A')
                          TypeArgumentsList
                            PsiElement([)('[')
                            TypeVariable: kt
                              PsiElement(identifier)('kt')
                            PsiElement(])(']')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    ReferencePattern: v
                      PsiElement(identifier)('v')
                  PsiElement())(')')
                PsiWhiteSpace(' ')
                PsiElement(<-)('<-')
                PsiWhiteSpace(' ')
                ReferenceExpression: backing
                  PsiElement(identifier)('backing')
            PsiElement())(')')
            PsiWhiteSpace('\n      ')
            PsiElement(yield)('yield')
            PsiWhiteSpace(' ')
            ExpressionInParenthesis
              PsiElement(()('(')
              TypedExpression
                ReferenceExpression: k
                  PsiElement(identifier)('k')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParametrizedType: A[kt]
                  SimpleType: A
                    CodeReferenceElement: A
                      PsiElement(identifier)('A')
                  TypeArgumentsList
                    PsiElement([)('[')
                    SimpleType: kt
                      CodeReferenceElement: kt
                        PsiElement(identifier)('kt')
                    PsiElement(])(']')
              PsiElement())(')')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScClass: Holder
    PsiComment(comment)('// this tests same thing as above, but independent of library classes,')
    PsiWhiteSpace('\n')
    PsiComment(comment)('// earlier expansions eliminated as well as variance (everything's invariant)')
    PsiWhiteSpace('\n')
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(case)('case')
    PsiWhiteSpace(' ')
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Holder')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: A
        PsiElement(identifier)('A')
      PsiElement(])(']')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        ParametersClause
          PsiElement(()('(')
          ClassParameter: a
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(identifier)('a')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            ParameterType
              SimpleType: A
                CodeReferenceElement: A
                  PsiElement(identifier)('A')
          PsiElement())(')')
    ExtendsBlock
      <empty list>
  PsiWhiteSpace('\n')
  ScClass: Mapped
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Mapped')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: A
        PsiElement(identifier)('A')
      PsiElement(])(']')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace(' ')
        ScFunctionDefinition: map
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('map')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: T
              PsiElement(identifier)('T')
            PsiElement(])(']')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: f
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('f')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  FunctionalType: Holder[A] => T
                    ParametrizedType: Holder[A]
                      SimpleType: Holder
                        CodeReferenceElement: Holder
                          PsiElement(identifier)('Holder')
                      TypeArgumentsList
                        PsiElement([)('[')
                        SimpleType: A
                          CodeReferenceElement: A
                            PsiElement(identifier)('A')
                        PsiElement(])(']')
                    PsiWhiteSpace(' ')
                    PsiElement(=>)('=>')
                    PsiWhiteSpace(' ')
                    SimpleType: T
                      CodeReferenceElement: T
                        PsiElement(identifier)('T')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: Iterable[T]
            SimpleType: Iterable
              CodeReferenceElement: Iterable
                PsiElement(identifier)('Iterable')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: T
                CodeReferenceElement: T
                  PsiElement(identifier)('T')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: ???
            PsiElement(identifier)('???')
        PsiWhiteSpace(' ')
        PsiElement(})('}')
  PsiWhiteSpace('\n')
  ScClass: Test2
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test2')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: works
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('works')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: backing
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('backing')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  ParametrizedType: Mapped[A[_]]
                    SimpleType: Mapped
                      CodeReferenceElement: Mapped
                        PsiElement(identifier)('Mapped')
                    TypeArgumentsList
                      PsiElement([)('[')
                      ParametrizedType: A[_]
                        SimpleType: A
                          CodeReferenceElement: A
                            PsiElement(identifier)('A')
                        TypeArgumentsList
                          PsiElement([)('[')
                          WildcardType: _
                            PsiElement(_)('_')
                          PsiElement(])(']')
                      PsiElement(])(']')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: Iterable[A[_]]
            SimpleType: Iterable
              CodeReferenceElement: Iterable
                PsiElement(identifier)('Iterable')
            TypeArgumentsList
              PsiElement([)('[')
              ParametrizedType: A[_]
                SimpleType: A
                  CodeReferenceElement: A
                    PsiElement(identifier)('A')
                TypeArgumentsList
                  PsiElement([)('[')
                  WildcardType: _
                    PsiElement(_)('_')
                  PsiElement(])(']')
              PsiElement(])(']')
          PsiWhiteSpace('\n    ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: backing.map
              ReferenceExpression: backing
                PsiElement(identifier)('backing')
              PsiElement(.)('.')
              PsiElement(identifier)('map')
            ArgumentList
              PsiElement(()('(')
              FunctionExpression
                Parameters
                  ParametersClause
                    Parameter: x
                      PsiElement(identifier)('x')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace('\n         ')
                MatchStatement
                  ReferenceExpression: x
                    PsiElement(identifier)('x')
                  PsiWhiteSpace(' ')
                  PsiElement(match)('match')
                  PsiWhiteSpace(' ')
                  PsiElement({)('{')
                  CaseClauses
                    CaseClause
                      PsiElement(case)('case')
                      PsiWhiteSpace(' ')
                      ConstructorPattern
                        CodeReferenceElement: Holder
                          PsiElement(identifier)('Holder')
                        Pattern Argument List
                          PsiElement(()('(')
                          Scala3 TypedPattern
                            ReferencePattern: k
                              PsiElement(identifier)('k')
                            PsiElement(:)(':')
                            PsiWhiteSpace(' ')
                            TypePattern
                              ParametrizedType: A[kt]
                                SimpleType: A
                                  CodeReferenceElement: A
                                    PsiElement(identifier)('A')
                                TypeArgumentsList
                                  PsiElement([)('[')
                                  TypeVariable: kt
                                    PsiElement(identifier)('kt')
                                  PsiElement(])(']')
                          PsiElement())(')')
                      PsiWhiteSpace(' ')
                      PsiElement(=>)('=>')
                      PsiWhiteSpace(' ')
                      BlockOfExpressions
                        ExpressionInParenthesis
                          PsiElement(()('(')
                          TypedExpression
                            ReferenceExpression: k
                              PsiElement(identifier)('k')
                            PsiElement(:)(':')
                            PsiWhiteSpace(' ')
                            ParametrizedType: A[kt]
                              SimpleType: A
                                CodeReferenceElement: A
                                  PsiElement(identifier)('A')
                              TypeArgumentsList
                                PsiElement([)('[')
                                SimpleType: kt
                                  CodeReferenceElement: kt
                                    PsiElement(identifier)('kt')
                                PsiElement(])(']')
                          PsiElement())(')')
                  PsiElement(})('}')
              PsiWhiteSpace('\n      ')
              PsiElement())(')')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
