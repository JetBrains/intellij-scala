import language.postfixOps
object desugar {

  // variables
  var x: Int = 2
  var y = x * x
  val list = List(1, 2, 3)

  { var z: Int = y }

  def foo0(first: Int, second: Int = 2, third: Int = 3) = first + second
  def foo1(first: Int, second: Int = 2)(third: Int = 3) = first + second
  def foo2(first: Int)(second: Int = 2)(third: Int = 3) = first + second

  object caseClasses { self =>
    trait List[+T] {
      def head: T
      def tail: List[T]
    }

    case class Cons[+T](val head: T, val tail: List[T]) extends List[T]

    object Cons {
      def apply[T](head: T): Cons[T] = apply(head, Nil)
    }

    case object Nil extends List[Nothing] {
      def head = throw new Error()
      def tail = throw new Error()
    }
  }

  object patDefs {

    import caseClasses.*

    val xs: List[Int] = Cons(1, Cons(2, Nil))

    val Cons(y, ys) = xs
    val Cons(z, _) = xs
    val Cons(_, _) = xs

    val (cons: Cons[Int]) = xs

    val x1, y1, z1: Int = 1
  }

  object Binops {

    x :: y :: Nil

    val x :: y :: Nil = list

  }

  object fors {

    for (x <- List(1, 2, 3)) yield 2
    for (x <- List(1, 2, 3) if x % 2 == 0) yield x * x
    for (x <- List(1, 2, 3); y <- 0 to x) yield x * y
    for (x <- List(1, 2, 3); y <- 0 to x; if x + y % 2 == 0) yield x * y
    for (x <- List(1, 2, 3); y = x * x; if x + y % 2 == 0) yield x * y
    for (x <- List(1, 2, 3); y = x * x; z = x * y; u <- 0 to y) yield x * y * z * u

    for (x <- List(1, 2, 3)) println(x)
    for (x <- List(1, 2, 3) if x % 2 == 0) println(x * x)
    for (x <- List(1, 2, 3); y <- 0 to x) println(x * y)
    for (x <- List(1, 2, 3); y <- 0 to x; if x + y % 2 == 0) println(x * y)
    for (x <- List(1, 2, 3); y = x * x; if x + y % 2 == 0) println(x * y)
    for (x <- List(1, 2, 3); y = x * x; z = x * y; u <- 0 to y) println(x * y * z * u)
  }

  object misc {
    Symbol("hello")
    s"this is a $x + ${x + y} string"
    type ~[X, Y] = Tuple2[X, Y]
    val pair: Int ~ String = 1 -> "abc"
    def foo(xs: Int*) = xs.length
    foo(list*)
    (list length)
    - desugar.x
    def bar(x: => Int) = x
    (x + y) + 1
    while (x < 10) x += 1
    while ({ x -= 1 ; x > 0 }) ()
  }

}
-----
ScalaFile
  ScImportStatement
    PsiElement(import)('import')
    PsiWhiteSpace(' ')
    ImportExpression
      CodeReferenceElement: language.postfixOps
        CodeReferenceElement: language
          PsiElement(identifier)('language')
        PsiElement(.)('.')
        PsiElement(identifier)('postfixOps')
  PsiWhiteSpace('\n')
  ScObject: desugar
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('desugar')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n\n  ')
        ScVariableDefinition: x
          PsiComment(comment)('// variables')
          PsiWhiteSpace('\n  ')
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(var)('var')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: x
              PsiElement(identifier)('x')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Int
            CodeReferenceElement: Int
              PsiElement(identifier)('Int')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          IntegerLiteral
            PsiElement(integer)('2')
        PsiWhiteSpace('\n  ')
        ScVariableDefinition: y
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(var)('var')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: y
              PsiElement(identifier)('y')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          InfixExpression
            ReferenceExpression: x
              PsiElement(identifier)('x')
            PsiWhiteSpace(' ')
            ReferenceExpression: *
              PsiElement(identifier)('*')
            PsiWhiteSpace(' ')
            ReferenceExpression: x
              PsiElement(identifier)('x')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: list
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: list
              PsiElement(identifier)('list')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: List
              PsiElement(identifier)('List')
            ArgumentList
              PsiElement(()('(')
              IntegerLiteral
                PsiElement(integer)('1')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              IntegerLiteral
                PsiElement(integer)('2')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              IntegerLiteral
                PsiElement(integer)('3')
              PsiElement())(')')
        PsiWhiteSpace('\n\n  ')
        BlockExpression
          PsiElement({)('{')
          PsiWhiteSpace(' ')
          ScVariableDefinition: z
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(var)('var')
            PsiWhiteSpace(' ')
            ListOfPatterns
              ReferencePattern: z
                PsiElement(identifier)('z')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            SimpleType: Int
              CodeReferenceElement: Int
                PsiElement(identifier)('Int')
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace(' ')
            ReferenceExpression: y
              PsiElement(identifier)('y')
          PsiWhiteSpace(' ')
          PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: foo0
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('foo0')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: first
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('first')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Int
                    CodeReferenceElement: Int
                      PsiElement(identifier)('Int')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              Parameter: second
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('second')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Int
                    CodeReferenceElement: Int
                      PsiElement(identifier)('Int')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                IntegerLiteral
                  PsiElement(integer)('2')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              Parameter: third
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('third')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Int
                    CodeReferenceElement: Int
                      PsiElement(identifier)('Int')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                IntegerLiteral
                  PsiElement(integer)('3')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          InfixExpression
            ReferenceExpression: first
              PsiElement(identifier)('first')
            PsiWhiteSpace(' ')
            ReferenceExpression: +
              PsiElement(identifier)('+')
            PsiWhiteSpace(' ')
            ReferenceExpression: second
              PsiElement(identifier)('second')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: foo1
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('foo1')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: first
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('first')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Int
                    CodeReferenceElement: Int
                      PsiElement(identifier)('Int')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              Parameter: second
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('second')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Int
                    CodeReferenceElement: Int
                      PsiElement(identifier)('Int')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                IntegerLiteral
                  PsiElement(integer)('2')
              PsiElement())(')')
            ParametersClause
              PsiElement(()('(')
              Parameter: third
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('third')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Int
                    CodeReferenceElement: Int
                      PsiElement(identifier)('Int')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                IntegerLiteral
                  PsiElement(integer)('3')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          InfixExpression
            ReferenceExpression: first
              PsiElement(identifier)('first')
            PsiWhiteSpace(' ')
            ReferenceExpression: +
              PsiElement(identifier)('+')
            PsiWhiteSpace(' ')
            ReferenceExpression: second
              PsiElement(identifier)('second')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: foo2
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('foo2')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: first
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('first')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Int
                    CodeReferenceElement: Int
                      PsiElement(identifier)('Int')
              PsiElement())(')')
            ParametersClause
              PsiElement(()('(')
              Parameter: second
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('second')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Int
                    CodeReferenceElement: Int
                      PsiElement(identifier)('Int')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                IntegerLiteral
                  PsiElement(integer)('2')
              PsiElement())(')')
            ParametersClause
              PsiElement(()('(')
              Parameter: third
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('third')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Int
                    CodeReferenceElement: Int
                      PsiElement(identifier)('Int')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                IntegerLiteral
                  PsiElement(integer)('3')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          InfixExpression
            ReferenceExpression: first
              PsiElement(identifier)('first')
            PsiWhiteSpace(' ')
            ReferenceExpression: +
              PsiElement(identifier)('+')
            PsiWhiteSpace(' ')
            ReferenceExpression: second
              PsiElement(identifier)('second')
        PsiWhiteSpace('\n\n  ')
        ScObject: caseClasses
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(object)('object')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('caseClasses')
          PsiWhiteSpace(' ')
          ExtendsBlock
            ScTemplateBody
              PsiElement({)('{')
              PsiWhiteSpace(' ')
              SelfType: self
                PsiElement(identifier)('self')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
              PsiWhiteSpace('\n    ')
              ScTrait: List
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(trait)('trait')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('List')
                TypeParameterClause
                  PsiElement([)('[')
                  TypeParameter: T
                    PsiElement(identifier)('+')
                    PsiElement(identifier)('T')
                  PsiElement(])(']')
                PsiWhiteSpace(' ')
                ExtendsBlock
                  ScTemplateBody
                    PsiElement({)('{')
                    PsiWhiteSpace('\n      ')
                    ScFunctionDeclaration: head
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(def)('def')
                      PsiWhiteSpace(' ')
                      PsiElement(identifier)('head')
                      Parameters
                        <empty list>
                      PsiElement(:)(':')
                      PsiWhiteSpace(' ')
                      SimpleType: T
                        CodeReferenceElement: T
                          PsiElement(identifier)('T')
                    PsiWhiteSpace('\n      ')
                    ScFunctionDeclaration: tail
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(def)('def')
                      PsiWhiteSpace(' ')
                      PsiElement(identifier)('tail')
                      Parameters
                        <empty list>
                      PsiElement(:)(':')
                      PsiWhiteSpace(' ')
                      ParametrizedType: List[T]
                        SimpleType: List
                          CodeReferenceElement: List
                            PsiElement(identifier)('List')
                        TypeArgumentsList
                          PsiElement([)('[')
                          SimpleType: T
                            CodeReferenceElement: T
                              PsiElement(identifier)('T')
                          PsiElement(])(']')
                    PsiWhiteSpace('\n    ')
                    PsiElement(})('}')
              PsiWhiteSpace('\n\n    ')
              ScClass: Cons
                AnnotationsList
                  <empty list>
                Modifiers
                  PsiElement(case)('case')
                PsiWhiteSpace(' ')
                PsiElement(class)('class')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('Cons')
                TypeParameterClause
                  PsiElement([)('[')
                  TypeParameter: T
                    PsiElement(identifier)('+')
                    PsiElement(identifier)('T')
                  PsiElement(])(']')
                PrimaryConstructor
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  Parameters
                    ParametersClause
                      PsiElement(()('(')
                      ClassParameter: head
                        AnnotationsList
                          <empty list>
                        Modifiers
                          <empty list>
                        PsiElement(val)('val')
                        PsiWhiteSpace(' ')
                        PsiElement(identifier)('head')
                        PsiElement(:)(':')
                        PsiWhiteSpace(' ')
                        ParameterType
                          SimpleType: T
                            CodeReferenceElement: T
                              PsiElement(identifier)('T')
                      PsiElement(,)(',')
                      PsiWhiteSpace(' ')
                      ClassParameter: tail
                        AnnotationsList
                          <empty list>
                        Modifiers
                          <empty list>
                        PsiElement(val)('val')
                        PsiWhiteSpace(' ')
                        PsiElement(identifier)('tail')
                        PsiElement(:)(':')
                        PsiWhiteSpace(' ')
                        ParameterType
                          ParametrizedType: List[T]
                            SimpleType: List
                              CodeReferenceElement: List
                                PsiElement(identifier)('List')
                            TypeArgumentsList
                              PsiElement([)('[')
                              SimpleType: T
                                CodeReferenceElement: T
                                  PsiElement(identifier)('T')
                              PsiElement(])(']')
                      PsiElement())(')')
                PsiWhiteSpace(' ')
                ExtendsBlock
                  PsiElement(extends)('extends')
                  PsiWhiteSpace(' ')
                  TemplateParents
                    ConstructorInvocation
                      ParametrizedType: List[T]
                        SimpleType: List
                          CodeReferenceElement: List
                            PsiElement(identifier)('List')
                        TypeArgumentsList
                          PsiElement([)('[')
                          SimpleType: T
                            CodeReferenceElement: T
                              PsiElement(identifier)('T')
                          PsiElement(])(']')
              PsiWhiteSpace('\n\n    ')
              ScObject: Cons
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(object)('object')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('Cons')
                PsiWhiteSpace(' ')
                ExtendsBlock
                  ScTemplateBody
                    PsiElement({)('{')
                    PsiWhiteSpace('\n      ')
                    ScFunctionDefinition: apply
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(def)('def')
                      PsiWhiteSpace(' ')
                      PsiElement(identifier)('apply')
                      TypeParameterClause
                        PsiElement([)('[')
                        TypeParameter: T
                          PsiElement(identifier)('T')
                        PsiElement(])(']')
                      Parameters
                        ParametersClause
                          PsiElement(()('(')
                          Parameter: head
                            AnnotationsList
                              <empty list>
                            Modifiers
                              <empty list>
                            PsiElement(identifier)('head')
                            PsiElement(:)(':')
                            PsiWhiteSpace(' ')
                            ParameterType
                              SimpleType: T
                                CodeReferenceElement: T
                                  PsiElement(identifier)('T')
                          PsiElement())(')')
                      PsiElement(:)(':')
                      PsiWhiteSpace(' ')
                      ParametrizedType: Cons[T]
                        SimpleType: Cons
                          CodeReferenceElement: Cons
                            PsiElement(identifier)('Cons')
                        TypeArgumentsList
                          PsiElement([)('[')
                          SimpleType: T
                            CodeReferenceElement: T
                              PsiElement(identifier)('T')
                          PsiElement(])(']')
                      PsiWhiteSpace(' ')
                      PsiElement(=)('=')
                      PsiWhiteSpace(' ')
                      MethodCall
                        ReferenceExpression: apply
                          PsiElement(identifier)('apply')
                        ArgumentList
                          PsiElement(()('(')
                          ReferenceExpression: head
                            PsiElement(identifier)('head')
                          PsiElement(,)(',')
                          PsiWhiteSpace(' ')
                          ReferenceExpression: Nil
                            PsiElement(identifier)('Nil')
                          PsiElement())(')')
                    PsiWhiteSpace('\n    ')
                    PsiElement(})('}')
              PsiWhiteSpace('\n\n    ')
              ScObject: Nil
                AnnotationsList
                  <empty list>
                Modifiers
                  PsiElement(case)('case')
                PsiWhiteSpace(' ')
                PsiElement(object)('object')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('Nil')
                PsiWhiteSpace(' ')
                ExtendsBlock
                  PsiElement(extends)('extends')
                  PsiWhiteSpace(' ')
                  TemplateParents
                    ConstructorInvocation
                      ParametrizedType: List[Nothing]
                        SimpleType: List
                          CodeReferenceElement: List
                            PsiElement(identifier)('List')
                        TypeArgumentsList
                          PsiElement([)('[')
                          SimpleType: Nothing
                            CodeReferenceElement: Nothing
                              PsiElement(identifier)('Nothing')
                          PsiElement(])(']')
                  PsiWhiteSpace(' ')
                  ScTemplateBody
                    PsiElement({)('{')
                    PsiWhiteSpace('\n      ')
                    ScFunctionDefinition: head
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(def)('def')
                      PsiWhiteSpace(' ')
                      PsiElement(identifier)('head')
                      Parameters
                        <empty list>
                      PsiWhiteSpace(' ')
                      PsiElement(=)('=')
                      PsiWhiteSpace(' ')
                      ThrowStatement
                        PsiElement(throw)('throw')
                        PsiWhiteSpace(' ')
                        ScNewTemplateDefinition: <anonymous>
                          PsiElement(new)('new')
                          PsiWhiteSpace(' ')
                          ExtendsBlock
                            TemplateParents
                              ConstructorInvocation
                                SimpleType: Error
                                  CodeReferenceElement: Error
                                    PsiElement(identifier)('Error')
                                ArgumentList
                                  PsiElement(()('(')
                                  PsiElement())(')')
                    PsiWhiteSpace('\n      ')
                    ScFunctionDefinition: tail
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(def)('def')
                      PsiWhiteSpace(' ')
                      PsiElement(identifier)('tail')
                      Parameters
                        <empty list>
                      PsiWhiteSpace(' ')
                      PsiElement(=)('=')
                      PsiWhiteSpace(' ')
                      ThrowStatement
                        PsiElement(throw)('throw')
                        PsiWhiteSpace(' ')
                        ScNewTemplateDefinition: <anonymous>
                          PsiElement(new)('new')
                          PsiWhiteSpace(' ')
                          ExtendsBlock
                            TemplateParents
                              ConstructorInvocation
                                SimpleType: Error
                                  CodeReferenceElement: Error
                                    PsiElement(identifier)('Error')
                                ArgumentList
                                  PsiElement(()('(')
                                  PsiElement())(')')
                    PsiWhiteSpace('\n    ')
                    PsiElement(})('}')
              PsiWhiteSpace('\n  ')
              PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        ScObject: patDefs
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(object)('object')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('patDefs')
          PsiWhiteSpace(' ')
          ExtendsBlock
            ScTemplateBody
              PsiElement({)('{')
              PsiWhiteSpace('\n\n    ')
              ScImportStatement
                PsiElement(import)('import')
                PsiWhiteSpace(' ')
                ImportExpression
                  CodeReferenceElement: caseClasses
                    PsiElement(identifier)('caseClasses')
                  PsiElement(.)('.')
                  PsiElement(*)('*')
              PsiWhiteSpace('\n\n    ')
              ScPatternDefinition: xs
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(val)('val')
                PsiWhiteSpace(' ')
                ListOfPatterns
                  ReferencePattern: xs
                    PsiElement(identifier)('xs')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParametrizedType: List[Int]
                  SimpleType: List
                    CodeReferenceElement: List
                      PsiElement(identifier)('List')
                  TypeArgumentsList
                    PsiElement([)('[')
                    SimpleType: Int
                      CodeReferenceElement: Int
                        PsiElement(identifier)('Int')
                    PsiElement(])(']')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                MethodCall
                  ReferenceExpression: Cons
                    PsiElement(identifier)('Cons')
                  ArgumentList
                    PsiElement(()('(')
                    IntegerLiteral
                      PsiElement(integer)('1')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    MethodCall
                      ReferenceExpression: Cons
                        PsiElement(identifier)('Cons')
                      ArgumentList
                        PsiElement(()('(')
                        IntegerLiteral
                          PsiElement(integer)('2')
                        PsiElement(,)(',')
                        PsiWhiteSpace(' ')
                        ReferenceExpression: Nil
                          PsiElement(identifier)('Nil')
                        PsiElement())(')')
                    PsiElement())(')')
              PsiWhiteSpace('\n\n    ')
              ScPatternDefinition: y, ys
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(val)('val')
                PsiWhiteSpace(' ')
                ListOfPatterns
                  ConstructorPattern
                    CodeReferenceElement: Cons
                      PsiElement(identifier)('Cons')
                    Pattern Argument List
                      PsiElement(()('(')
                      ReferencePattern: y
                        PsiElement(identifier)('y')
                      PsiElement(,)(',')
                      PsiWhiteSpace(' ')
                      ReferencePattern: ys
                        PsiElement(identifier)('ys')
                      PsiElement())(')')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                ReferenceExpression: xs
                  PsiElement(identifier)('xs')
              PsiWhiteSpace('\n    ')
              ScPatternDefinition: z
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(val)('val')
                PsiWhiteSpace(' ')
                ListOfPatterns
                  ConstructorPattern
                    CodeReferenceElement: Cons
                      PsiElement(identifier)('Cons')
                    Pattern Argument List
                      PsiElement(()('(')
                      ReferencePattern: z
                        PsiElement(identifier)('z')
                      PsiElement(,)(',')
                      PsiWhiteSpace(' ')
                      WildcardPattern
                        PsiElement(_)('_')
                      PsiElement())(')')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                ReferenceExpression: xs
                  PsiElement(identifier)('xs')
              PsiWhiteSpace('\n    ')
              ScPatternDefinition
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(val)('val')
                PsiWhiteSpace(' ')
                ListOfPatterns
                  ConstructorPattern
                    CodeReferenceElement: Cons
                      PsiElement(identifier)('Cons')
                    Pattern Argument List
                      PsiElement(()('(')
                      WildcardPattern
                        PsiElement(_)('_')
                      PsiElement(,)(',')
                      PsiWhiteSpace(' ')
                      WildcardPattern
                        PsiElement(_)('_')
                      PsiElement())(')')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                ReferenceExpression: xs
                  PsiElement(identifier)('xs')
              PsiWhiteSpace('\n\n    ')
              ScPatternDefinition: cons
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(val)('val')
                PsiWhiteSpace(' ')
                ListOfPatterns
                  PatternInParenthesis
                    PsiElement(()('(')
                    Scala3 TypedPattern
                      ReferencePattern: cons
                        PsiElement(identifier)('cons')
                      PsiElement(:)(':')
                      PsiWhiteSpace(' ')
                      TypePattern
                        ParametrizedType: Cons[Int]
                          SimpleType: Cons
                            CodeReferenceElement: Cons
                              PsiElement(identifier)('Cons')
                          TypeArgumentsList
                            PsiElement([)('[')
                            SimpleType: Int
                              CodeReferenceElement: Int
                                PsiElement(identifier)('Int')
                            PsiElement(])(']')
                    PsiElement())(')')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                ReferenceExpression: xs
                  PsiElement(identifier)('xs')
              PsiWhiteSpace('\n\n    ')
              ScPatternDefinition: x1, y1, z1
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(val)('val')
                PsiWhiteSpace(' ')
                ListOfPatterns
                  ReferencePattern: x1
                    PsiElement(identifier)('x1')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  ReferencePattern: y1
                    PsiElement(identifier)('y1')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  ReferencePattern: z1
                    PsiElement(identifier)('z1')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                SimpleType: Int
                  CodeReferenceElement: Int
                    PsiElement(identifier)('Int')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                IntegerLiteral
                  PsiElement(integer)('1')
              PsiWhiteSpace('\n  ')
              PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        ScObject: Binops
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(object)('object')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Binops')
          PsiWhiteSpace(' ')
          ExtendsBlock
            ScTemplateBody
              PsiElement({)('{')
              PsiWhiteSpace('\n\n    ')
              InfixExpression
                ReferenceExpression: x
                  PsiElement(identifier)('x')
                PsiWhiteSpace(' ')
                ReferenceExpression: ::
                  PsiElement(identifier)('::')
                PsiWhiteSpace(' ')
                InfixExpression
                  ReferenceExpression: y
                    PsiElement(identifier)('y')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: ::
                    PsiElement(identifier)('::')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: Nil
                    PsiElement(identifier)('Nil')
              PsiWhiteSpace('\n\n    ')
              ScPatternDefinition: x, y
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(val)('val')
                PsiWhiteSpace(' ')
                ListOfPatterns
                  InfixPattern
                    ReferencePattern: x
                      PsiElement(identifier)('x')
                    PsiWhiteSpace(' ')
                    CodeReferenceElement: ::
                      PsiElement(identifier)('::')
                    PsiWhiteSpace(' ')
                    InfixPattern
                      ReferencePattern: y
                        PsiElement(identifier)('y')
                      PsiWhiteSpace(' ')
                      CodeReferenceElement: ::
                        PsiElement(identifier)('::')
                      PsiWhiteSpace(' ')
                      StableElementPattern
                        ReferenceExpression: Nil
                          PsiElement(identifier)('Nil')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                ReferenceExpression: list
                  PsiElement(identifier)('list')
              PsiWhiteSpace('\n\n  ')
              PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        ScObject: fors
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(object)('object')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('fors')
          PsiWhiteSpace(' ')
          ExtendsBlock
            ScTemplateBody
              PsiElement({)('{')
              PsiWhiteSpace('\n\n    ')
              ForStatement
                PsiElement(for)('for')
                PsiWhiteSpace(' ')
                PsiElement(()('(')
                Enumerators
                  Generator
                    ReferencePattern: x
                      PsiElement(identifier)('x')
                    PsiWhiteSpace(' ')
                    PsiElement(<-)('<-')
                    PsiWhiteSpace(' ')
                    MethodCall
                      ReferenceExpression: List
                        PsiElement(identifier)('List')
                      ArgumentList
                        PsiElement(()('(')
                        IntegerLiteral
                          PsiElement(integer)('1')
                        PsiElement(,)(',')
                        PsiWhiteSpace(' ')
                        IntegerLiteral
                          PsiElement(integer)('2')
                        PsiElement(,)(',')
                        PsiWhiteSpace(' ')
                        IntegerLiteral
                          PsiElement(integer)('3')
                        PsiElement())(')')
                PsiElement())(')')
                PsiWhiteSpace(' ')
                PsiElement(yield)('yield')
                PsiWhiteSpace(' ')
                IntegerLiteral
                  PsiElement(integer)('2')
              PsiWhiteSpace('\n    ')
              ForStatement
                PsiElement(for)('for')
                PsiWhiteSpace(' ')
                PsiElement(()('(')
                Enumerators
                  Generator
                    ReferencePattern: x
                      PsiElement(identifier)('x')
                    PsiWhiteSpace(' ')
                    PsiElement(<-)('<-')
                    PsiWhiteSpace(' ')
                    MethodCall
                      ReferenceExpression: List
                        PsiElement(identifier)('List')
                      ArgumentList
                        PsiElement(()('(')
                        IntegerLiteral
                          PsiElement(integer)('1')
                        PsiElement(,)(',')
                        PsiWhiteSpace(' ')
                        IntegerLiteral
                          PsiElement(integer)('2')
                        PsiElement(,)(',')
                        PsiWhiteSpace(' ')
                        IntegerLiteral
                          PsiElement(integer)('3')
                        PsiElement())(')')
                  PsiWhiteSpace(' ')
                  Guard
                    PsiElement(if)('if')
                    PsiWhiteSpace(' ')
                    InfixExpression
                      InfixExpression
                        ReferenceExpression: x
                          PsiElement(identifier)('x')
                        PsiWhiteSpace(' ')
                        ReferenceExpression: %
                          PsiElement(identifier)('%')
                        PsiWhiteSpace(' ')
                        IntegerLiteral
                          PsiElement(integer)('2')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: ==
                        PsiElement(identifier)('==')
                      PsiWhiteSpace(' ')
                      IntegerLiteral
                        PsiElement(integer)('0')
                PsiElement())(')')
                PsiWhiteSpace(' ')
                PsiElement(yield)('yield')
                PsiWhiteSpace(' ')
                InfixExpression
                  ReferenceExpression: x
                    PsiElement(identifier)('x')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: *
                    PsiElement(identifier)('*')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: x
                    PsiElement(identifier)('x')
              PsiWhiteSpace('\n    ')
              ForStatement
                PsiElement(for)('for')
                PsiWhiteSpace(' ')
                PsiElement(()('(')
                Enumerators
                  Generator
                    ReferencePattern: x
                      PsiElement(identifier)('x')
                    PsiWhiteSpace(' ')
                    PsiElement(<-)('<-')
                    PsiWhiteSpace(' ')
                    MethodCall
                      ReferenceExpression: List
                        PsiElement(identifier)('List')
                      ArgumentList
                        PsiElement(()('(')
                        IntegerLiteral
                          PsiElement(integer)('1')
                        PsiElement(,)(',')
                        PsiWhiteSpace(' ')
                        IntegerLiteral
                          PsiElement(integer)('2')
                        PsiElement(,)(',')
                        PsiWhiteSpace(' ')
                        IntegerLiteral
                          PsiElement(integer)('3')
                        PsiElement())(')')
                  PsiElement(;)(';')
                  PsiWhiteSpace(' ')
                  Generator
                    ReferencePattern: y
                      PsiElement(identifier)('y')
                    PsiWhiteSpace(' ')
                    PsiElement(<-)('<-')
                    PsiWhiteSpace(' ')
                    InfixExpression
                      IntegerLiteral
                        PsiElement(integer)('0')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: to
                        PsiElement(identifier)('to')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: x
                        PsiElement(identifier)('x')
                PsiElement())(')')
                PsiWhiteSpace(' ')
                PsiElement(yield)('yield')
                PsiWhiteSpace(' ')
                InfixExpression
                  ReferenceExpression: x
                    PsiElement(identifier)('x')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: *
                    PsiElement(identifier)('*')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: y
                    PsiElement(identifier)('y')
              PsiWhiteSpace('\n    ')
              ForStatement
                PsiElement(for)('for')
                PsiWhiteSpace(' ')
                PsiElement(()('(')
                Enumerators
                  Generator
                    ReferencePattern: x
                      PsiElement(identifier)('x')
                    PsiWhiteSpace(' ')
                    PsiElement(<-)('<-')
                    PsiWhiteSpace(' ')
                    MethodCall
                      ReferenceExpression: List
                        PsiElement(identifier)('List')
                      ArgumentList
                        PsiElement(()('(')
                        IntegerLiteral
                          PsiElement(integer)('1')
                        PsiElement(,)(',')
                        PsiWhiteSpace(' ')
                        IntegerLiteral
                          PsiElement(integer)('2')
                        PsiElement(,)(',')
                        PsiWhiteSpace(' ')
                        IntegerLiteral
                          PsiElement(integer)('3')
                        PsiElement())(')')
                  PsiElement(;)(';')
                  PsiWhiteSpace(' ')
                  Generator
                    ReferencePattern: y
                      PsiElement(identifier)('y')
                    PsiWhiteSpace(' ')
                    PsiElement(<-)('<-')
                    PsiWhiteSpace(' ')
                    InfixExpression
                      IntegerLiteral
                        PsiElement(integer)('0')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: to
                        PsiElement(identifier)('to')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: x
                        PsiElement(identifier)('x')
                  PsiElement(;)(';')
                  PsiWhiteSpace(' ')
                  Guard
                    PsiElement(if)('if')
                    PsiWhiteSpace(' ')
                    InfixExpression
                      InfixExpression
                        ReferenceExpression: x
                          PsiElement(identifier)('x')
                        PsiWhiteSpace(' ')
                        ReferenceExpression: +
                          PsiElement(identifier)('+')
                        PsiWhiteSpace(' ')
                        InfixExpression
                          ReferenceExpression: y
                            PsiElement(identifier)('y')
                          PsiWhiteSpace(' ')
                          ReferenceExpression: %
                            PsiElement(identifier)('%')
                          PsiWhiteSpace(' ')
                          IntegerLiteral
                            PsiElement(integer)('2')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: ==
                        PsiElement(identifier)('==')
                      PsiWhiteSpace(' ')
                      IntegerLiteral
                        PsiElement(integer)('0')
                PsiElement())(')')
                PsiWhiteSpace(' ')
                PsiElement(yield)('yield')
                PsiWhiteSpace(' ')
                InfixExpression
                  ReferenceExpression: x
                    PsiElement(identifier)('x')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: *
                    PsiElement(identifier)('*')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: y
                    PsiElement(identifier)('y')
              PsiWhiteSpace('\n    ')
              ForStatement
                PsiElement(for)('for')
                PsiWhiteSpace(' ')
                PsiElement(()('(')
                Enumerators
                  Generator
                    ReferencePattern: x
                      PsiElement(identifier)('x')
                    PsiWhiteSpace(' ')
                    PsiElement(<-)('<-')
                    PsiWhiteSpace(' ')
                    MethodCall
                      ReferenceExpression: List
                        PsiElement(identifier)('List')
                      ArgumentList
                        PsiElement(()('(')
                        IntegerLiteral
                          PsiElement(integer)('1')
                        PsiElement(,)(',')
                        PsiWhiteSpace(' ')
                        IntegerLiteral
                          PsiElement(integer)('2')
                        PsiElement(,)(',')
                        PsiWhiteSpace(' ')
                        IntegerLiteral
                          PsiElement(integer)('3')
                        PsiElement())(')')
                  PsiElement(;)(';')
                  PsiWhiteSpace(' ')
                  ForBinding
                    ReferencePattern: y
                      PsiElement(identifier)('y')
                    PsiWhiteSpace(' ')
                    PsiElement(=)('=')
                    PsiWhiteSpace(' ')
                    InfixExpression
                      ReferenceExpression: x
                        PsiElement(identifier)('x')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: *
                        PsiElement(identifier)('*')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: x
                        PsiElement(identifier)('x')
                  PsiElement(;)(';')
                  PsiWhiteSpace(' ')
                  Guard
                    PsiElement(if)('if')
                    PsiWhiteSpace(' ')
                    InfixExpression
                      InfixExpression
                        ReferenceExpression: x
                          PsiElement(identifier)('x')
                        PsiWhiteSpace(' ')
                        ReferenceExpression: +
                          PsiElement(identifier)('+')
                        PsiWhiteSpace(' ')
                        InfixExpression
                          ReferenceExpression: y
                            PsiElement(identifier)('y')
                          PsiWhiteSpace(' ')
                          ReferenceExpression: %
                            PsiElement(identifier)('%')
                          PsiWhiteSpace(' ')
                          IntegerLiteral
                            PsiElement(integer)('2')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: ==
                        PsiElement(identifier)('==')
                      PsiWhiteSpace(' ')
                      IntegerLiteral
                        PsiElement(integer)('0')
                PsiElement())(')')
                PsiWhiteSpace(' ')
                PsiElement(yield)('yield')
                PsiWhiteSpace(' ')
                InfixExpression
                  ReferenceExpression: x
                    PsiElement(identifier)('x')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: *
                    PsiElement(identifier)('*')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: y
                    PsiElement(identifier)('y')
              PsiWhiteSpace('\n    ')
              ForStatement
                PsiElement(for)('for')
                PsiWhiteSpace(' ')
                PsiElement(()('(')
                Enumerators
                  Generator
                    ReferencePattern: x
                      PsiElement(identifier)('x')
                    PsiWhiteSpace(' ')
                    PsiElement(<-)('<-')
                    PsiWhiteSpace(' ')
                    MethodCall
                      ReferenceExpression: List
                        PsiElement(identifier)('List')
                      ArgumentList
                        PsiElement(()('(')
                        IntegerLiteral
                          PsiElement(integer)('1')
                        PsiElement(,)(',')
                        PsiWhiteSpace(' ')
                        IntegerLiteral
                          PsiElement(integer)('2')
                        PsiElement(,)(',')
                        PsiWhiteSpace(' ')
                        IntegerLiteral
                          PsiElement(integer)('3')
                        PsiElement())(')')
                  PsiElement(;)(';')
                  PsiWhiteSpace(' ')
                  ForBinding
                    ReferencePattern: y
                      PsiElement(identifier)('y')
                    PsiWhiteSpace(' ')
                    PsiElement(=)('=')
                    PsiWhiteSpace(' ')
                    InfixExpression
                      ReferenceExpression: x
                        PsiElement(identifier)('x')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: *
                        PsiElement(identifier)('*')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: x
                        PsiElement(identifier)('x')
                  PsiElement(;)(';')
                  PsiWhiteSpace(' ')
                  ForBinding
                    ReferencePattern: z
                      PsiElement(identifier)('z')
                    PsiWhiteSpace(' ')
                    PsiElement(=)('=')
                    PsiWhiteSpace(' ')
                    InfixExpression
                      ReferenceExpression: x
                        PsiElement(identifier)('x')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: *
                        PsiElement(identifier)('*')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: y
                        PsiElement(identifier)('y')
                  PsiElement(;)(';')
                  PsiWhiteSpace(' ')
                  Generator
                    ReferencePattern: u
                      PsiElement(identifier)('u')
                    PsiWhiteSpace(' ')
                    PsiElement(<-)('<-')
                    PsiWhiteSpace(' ')
                    InfixExpression
                      IntegerLiteral
                        PsiElement(integer)('0')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: to
                        PsiElement(identifier)('to')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: y
                        PsiElement(identifier)('y')
                PsiElement())(')')
                PsiWhiteSpace(' ')
                PsiElement(yield)('yield')
                PsiWhiteSpace(' ')
                InfixExpression
                  InfixExpression
                    InfixExpression
                      ReferenceExpression: x
                        PsiElement(identifier)('x')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: *
                        PsiElement(identifier)('*')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: y
                        PsiElement(identifier)('y')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: *
                      PsiElement(identifier)('*')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: z
                      PsiElement(identifier)('z')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: *
                    PsiElement(identifier)('*')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: u
                    PsiElement(identifier)('u')
              PsiWhiteSpace('\n\n    ')
              ForStatement
                PsiElement(for)('for')
                PsiWhiteSpace(' ')
                PsiElement(()('(')
                Enumerators
                  Generator
                    ReferencePattern: x
                      PsiElement(identifier)('x')
                    PsiWhiteSpace(' ')
                    PsiElement(<-)('<-')
                    PsiWhiteSpace(' ')
                    MethodCall
                      ReferenceExpression: List
                        PsiElement(identifier)('List')
                      ArgumentList
                        PsiElement(()('(')
                        IntegerLiteral
                          PsiElement(integer)('1')
                        PsiElement(,)(',')
                        PsiWhiteSpace(' ')
                        IntegerLiteral
                          PsiElement(integer)('2')
                        PsiElement(,)(',')
                        PsiWhiteSpace(' ')
                        IntegerLiteral
                          PsiElement(integer)('3')
                        PsiElement())(')')
                PsiElement())(')')
                PsiWhiteSpace(' ')
                MethodCall
                  ReferenceExpression: println
                    PsiElement(identifier)('println')
                  ArgumentList
                    PsiElement(()('(')
                    ReferenceExpression: x
                      PsiElement(identifier)('x')
                    PsiElement())(')')
              PsiWhiteSpace('\n    ')
              ForStatement
                PsiElement(for)('for')
                PsiWhiteSpace(' ')
                PsiElement(()('(')
                Enumerators
                  Generator
                    ReferencePattern: x
                      PsiElement(identifier)('x')
                    PsiWhiteSpace(' ')
                    PsiElement(<-)('<-')
                    PsiWhiteSpace(' ')
                    MethodCall
                      ReferenceExpression: List
                        PsiElement(identifier)('List')
                      ArgumentList
                        PsiElement(()('(')
                        IntegerLiteral
                          PsiElement(integer)('1')
                        PsiElement(,)(',')
                        PsiWhiteSpace(' ')
                        IntegerLiteral
                          PsiElement(integer)('2')
                        PsiElement(,)(',')
                        PsiWhiteSpace(' ')
                        IntegerLiteral
                          PsiElement(integer)('3')
                        PsiElement())(')')
                  PsiWhiteSpace(' ')
                  Guard
                    PsiElement(if)('if')
                    PsiWhiteSpace(' ')
                    InfixExpression
                      InfixExpression
                        ReferenceExpression: x
                          PsiElement(identifier)('x')
                        PsiWhiteSpace(' ')
                        ReferenceExpression: %
                          PsiElement(identifier)('%')
                        PsiWhiteSpace(' ')
                        IntegerLiteral
                          PsiElement(integer)('2')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: ==
                        PsiElement(identifier)('==')
                      PsiWhiteSpace(' ')
                      IntegerLiteral
                        PsiElement(integer)('0')
                PsiElement())(')')
                PsiWhiteSpace(' ')
                MethodCall
                  ReferenceExpression: println
                    PsiElement(identifier)('println')
                  ArgumentList
                    PsiElement(()('(')
                    InfixExpression
                      ReferenceExpression: x
                        PsiElement(identifier)('x')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: *
                        PsiElement(identifier)('*')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: x
                        PsiElement(identifier)('x')
                    PsiElement())(')')
              PsiWhiteSpace('\n    ')
              ForStatement
                PsiElement(for)('for')
                PsiWhiteSpace(' ')
                PsiElement(()('(')
                Enumerators
                  Generator
                    ReferencePattern: x
                      PsiElement(identifier)('x')
                    PsiWhiteSpace(' ')
                    PsiElement(<-)('<-')
                    PsiWhiteSpace(' ')
                    MethodCall
                      ReferenceExpression: List
                        PsiElement(identifier)('List')
                      ArgumentList
                        PsiElement(()('(')
                        IntegerLiteral
                          PsiElement(integer)('1')
                        PsiElement(,)(',')
                        PsiWhiteSpace(' ')
                        IntegerLiteral
                          PsiElement(integer)('2')
                        PsiElement(,)(',')
                        PsiWhiteSpace(' ')
                        IntegerLiteral
                          PsiElement(integer)('3')
                        PsiElement())(')')
                  PsiElement(;)(';')
                  PsiWhiteSpace(' ')
                  Generator
                    ReferencePattern: y
                      PsiElement(identifier)('y')
                    PsiWhiteSpace(' ')
                    PsiElement(<-)('<-')
                    PsiWhiteSpace(' ')
                    InfixExpression
                      IntegerLiteral
                        PsiElement(integer)('0')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: to
                        PsiElement(identifier)('to')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: x
                        PsiElement(identifier)('x')
                PsiElement())(')')
                PsiWhiteSpace(' ')
                MethodCall
                  ReferenceExpression: println
                    PsiElement(identifier)('println')
                  ArgumentList
                    PsiElement(()('(')
                    InfixExpression
                      ReferenceExpression: x
                        PsiElement(identifier)('x')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: *
                        PsiElement(identifier)('*')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: y
                        PsiElement(identifier)('y')
                    PsiElement())(')')
              PsiWhiteSpace('\n    ')
              ForStatement
                PsiElement(for)('for')
                PsiWhiteSpace(' ')
                PsiElement(()('(')
                Enumerators
                  Generator
                    ReferencePattern: x
                      PsiElement(identifier)('x')
                    PsiWhiteSpace(' ')
                    PsiElement(<-)('<-')
                    PsiWhiteSpace(' ')
                    MethodCall
                      ReferenceExpression: List
                        PsiElement(identifier)('List')
                      ArgumentList
                        PsiElement(()('(')
                        IntegerLiteral
                          PsiElement(integer)('1')
                        PsiElement(,)(',')
                        PsiWhiteSpace(' ')
                        IntegerLiteral
                          PsiElement(integer)('2')
                        PsiElement(,)(',')
                        PsiWhiteSpace(' ')
                        IntegerLiteral
                          PsiElement(integer)('3')
                        PsiElement())(')')
                  PsiElement(;)(';')
                  PsiWhiteSpace(' ')
                  Generator
                    ReferencePattern: y
                      PsiElement(identifier)('y')
                    PsiWhiteSpace(' ')
                    PsiElement(<-)('<-')
                    PsiWhiteSpace(' ')
                    InfixExpression
                      IntegerLiteral
                        PsiElement(integer)('0')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: to
                        PsiElement(identifier)('to')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: x
                        PsiElement(identifier)('x')
                  PsiElement(;)(';')
                  PsiWhiteSpace(' ')
                  Guard
                    PsiElement(if)('if')
                    PsiWhiteSpace(' ')
                    InfixExpression
                      InfixExpression
                        ReferenceExpression: x
                          PsiElement(identifier)('x')
                        PsiWhiteSpace(' ')
                        ReferenceExpression: +
                          PsiElement(identifier)('+')
                        PsiWhiteSpace(' ')
                        InfixExpression
                          ReferenceExpression: y
                            PsiElement(identifier)('y')
                          PsiWhiteSpace(' ')
                          ReferenceExpression: %
                            PsiElement(identifier)('%')
                          PsiWhiteSpace(' ')
                          IntegerLiteral
                            PsiElement(integer)('2')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: ==
                        PsiElement(identifier)('==')
                      PsiWhiteSpace(' ')
                      IntegerLiteral
                        PsiElement(integer)('0')
                PsiElement())(')')
                PsiWhiteSpace(' ')
                MethodCall
                  ReferenceExpression: println
                    PsiElement(identifier)('println')
                  ArgumentList
                    PsiElement(()('(')
                    InfixExpression
                      ReferenceExpression: x
                        PsiElement(identifier)('x')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: *
                        PsiElement(identifier)('*')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: y
                        PsiElement(identifier)('y')
                    PsiElement())(')')
              PsiWhiteSpace('\n    ')
              ForStatement
                PsiElement(for)('for')
                PsiWhiteSpace(' ')
                PsiElement(()('(')
                Enumerators
                  Generator
                    ReferencePattern: x
                      PsiElement(identifier)('x')
                    PsiWhiteSpace(' ')
                    PsiElement(<-)('<-')
                    PsiWhiteSpace(' ')
                    MethodCall
                      ReferenceExpression: List
                        PsiElement(identifier)('List')
                      ArgumentList
                        PsiElement(()('(')
                        IntegerLiteral
                          PsiElement(integer)('1')
                        PsiElement(,)(',')
                        PsiWhiteSpace(' ')
                        IntegerLiteral
                          PsiElement(integer)('2')
                        PsiElement(,)(',')
                        PsiWhiteSpace(' ')
                        IntegerLiteral
                          PsiElement(integer)('3')
                        PsiElement())(')')
                  PsiElement(;)(';')
                  PsiWhiteSpace(' ')
                  ForBinding
                    ReferencePattern: y
                      PsiElement(identifier)('y')
                    PsiWhiteSpace(' ')
                    PsiElement(=)('=')
                    PsiWhiteSpace(' ')
                    InfixExpression
                      ReferenceExpression: x
                        PsiElement(identifier)('x')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: *
                        PsiElement(identifier)('*')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: x
                        PsiElement(identifier)('x')
                  PsiElement(;)(';')
                  PsiWhiteSpace(' ')
                  Guard
                    PsiElement(if)('if')
                    PsiWhiteSpace(' ')
                    InfixExpression
                      InfixExpression
                        ReferenceExpression: x
                          PsiElement(identifier)('x')
                        PsiWhiteSpace(' ')
                        ReferenceExpression: +
                          PsiElement(identifier)('+')
                        PsiWhiteSpace(' ')
                        InfixExpression
                          ReferenceExpression: y
                            PsiElement(identifier)('y')
                          PsiWhiteSpace(' ')
                          ReferenceExpression: %
                            PsiElement(identifier)('%')
                          PsiWhiteSpace(' ')
                          IntegerLiteral
                            PsiElement(integer)('2')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: ==
                        PsiElement(identifier)('==')
                      PsiWhiteSpace(' ')
                      IntegerLiteral
                        PsiElement(integer)('0')
                PsiElement())(')')
                PsiWhiteSpace(' ')
                MethodCall
                  ReferenceExpression: println
                    PsiElement(identifier)('println')
                  ArgumentList
                    PsiElement(()('(')
                    InfixExpression
                      ReferenceExpression: x
                        PsiElement(identifier)('x')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: *
                        PsiElement(identifier)('*')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: y
                        PsiElement(identifier)('y')
                    PsiElement())(')')
              PsiWhiteSpace('\n    ')
              ForStatement
                PsiElement(for)('for')
                PsiWhiteSpace(' ')
                PsiElement(()('(')
                Enumerators
                  Generator
                    ReferencePattern: x
                      PsiElement(identifier)('x')
                    PsiWhiteSpace(' ')
                    PsiElement(<-)('<-')
                    PsiWhiteSpace(' ')
                    MethodCall
                      ReferenceExpression: List
                        PsiElement(identifier)('List')
                      ArgumentList
                        PsiElement(()('(')
                        IntegerLiteral
                          PsiElement(integer)('1')
                        PsiElement(,)(',')
                        PsiWhiteSpace(' ')
                        IntegerLiteral
                          PsiElement(integer)('2')
                        PsiElement(,)(',')
                        PsiWhiteSpace(' ')
                        IntegerLiteral
                          PsiElement(integer)('3')
                        PsiElement())(')')
                  PsiElement(;)(';')
                  PsiWhiteSpace(' ')
                  ForBinding
                    ReferencePattern: y
                      PsiElement(identifier)('y')
                    PsiWhiteSpace(' ')
                    PsiElement(=)('=')
                    PsiWhiteSpace(' ')
                    InfixExpression
                      ReferenceExpression: x
                        PsiElement(identifier)('x')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: *
                        PsiElement(identifier)('*')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: x
                        PsiElement(identifier)('x')
                  PsiElement(;)(';')
                  PsiWhiteSpace(' ')
                  ForBinding
                    ReferencePattern: z
                      PsiElement(identifier)('z')
                    PsiWhiteSpace(' ')
                    PsiElement(=)('=')
                    PsiWhiteSpace(' ')
                    InfixExpression
                      ReferenceExpression: x
                        PsiElement(identifier)('x')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: *
                        PsiElement(identifier)('*')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: y
                        PsiElement(identifier)('y')
                  PsiElement(;)(';')
                  PsiWhiteSpace(' ')
                  Generator
                    ReferencePattern: u
                      PsiElement(identifier)('u')
                    PsiWhiteSpace(' ')
                    PsiElement(<-)('<-')
                    PsiWhiteSpace(' ')
                    InfixExpression
                      IntegerLiteral
                        PsiElement(integer)('0')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: to
                        PsiElement(identifier)('to')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: y
                        PsiElement(identifier)('y')
                PsiElement())(')')
                PsiWhiteSpace(' ')
                MethodCall
                  ReferenceExpression: println
                    PsiElement(identifier)('println')
                  ArgumentList
                    PsiElement(()('(')
                    InfixExpression
                      InfixExpression
                        InfixExpression
                          ReferenceExpression: x
                            PsiElement(identifier)('x')
                          PsiWhiteSpace(' ')
                          ReferenceExpression: *
                            PsiElement(identifier)('*')
                          PsiWhiteSpace(' ')
                          ReferenceExpression: y
                            PsiElement(identifier)('y')
                        PsiWhiteSpace(' ')
                        ReferenceExpression: *
                          PsiElement(identifier)('*')
                        PsiWhiteSpace(' ')
                        ReferenceExpression: z
                          PsiElement(identifier)('z')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: *
                        PsiElement(identifier)('*')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: u
                        PsiElement(identifier)('u')
                    PsiElement())(')')
              PsiWhiteSpace('\n  ')
              PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        ScObject: misc
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(object)('object')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('misc')
          PsiWhiteSpace(' ')
          ExtendsBlock
            ScTemplateBody
              PsiElement({)('{')
              PsiWhiteSpace('\n    ')
              MethodCall
                ReferenceExpression: Symbol
                  PsiElement(identifier)('Symbol')
                ArgumentList
                  PsiElement(()('(')
                  StringLiteral
                    PsiElement(string content)('"hello"')
                  PsiElement())(')')
              PsiWhiteSpace('\n    ')
              InterpolatedStringLiteral
                InterpolatedExpressionPrefix: s
                  PsiElement(interpolated string id)('s')
                PsiElement(interpolated string)('"this is a ')
                PsiElement(interpolated string injection)('$')
                ReferenceExpression: x
                  PsiElement(identifier)('x')
                PsiElement(interpolated string)(' + ')
                PsiElement(interpolated string injection)('$')
                BlockExpression
                  PsiElement({)('{')
                  InfixExpression
                    ReferenceExpression: x
                      PsiElement(identifier)('x')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: +
                      PsiElement(identifier)('+')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: y
                      PsiElement(identifier)('y')
                  PsiElement(})('}')
                PsiElement(interpolated string)(' string')
                PsiElement(interpolated string end)('"')
              PsiWhiteSpace('\n    ')
              ScTypeAliasDefinition: ~
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(type)('type')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('~')
                TypeParameterClause
                  PsiElement([)('[')
                  TypeParameter: X
                    PsiElement(identifier)('X')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  TypeParameter: Y
                    PsiElement(identifier)('Y')
                  PsiElement(])(']')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                ParametrizedType: Tuple2[X, Y]
                  SimpleType: Tuple2
                    CodeReferenceElement: Tuple2
                      PsiElement(identifier)('Tuple2')
                  TypeArgumentsList
                    PsiElement([)('[')
                    SimpleType: X
                      CodeReferenceElement: X
                        PsiElement(identifier)('X')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    SimpleType: Y
                      CodeReferenceElement: Y
                        PsiElement(identifier)('Y')
                    PsiElement(])(']')
              PsiWhiteSpace('\n    ')
              ScPatternDefinition: pair
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(val)('val')
                PsiWhiteSpace(' ')
                ListOfPatterns
                  ReferencePattern: pair
                    PsiElement(identifier)('pair')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                InfixType: Int ~ String
                  SimpleType: Int
                    CodeReferenceElement: Int
                      PsiElement(identifier)('Int')
                  PsiWhiteSpace(' ')
                  CodeReferenceElement: ~
                    PsiElement(identifier)('~')
                  PsiWhiteSpace(' ')
                  SimpleType: String
                    CodeReferenceElement: String
                      PsiElement(identifier)('String')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                InfixExpression
                  IntegerLiteral
                    PsiElement(integer)('1')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: ->
                    PsiElement(identifier)('->')
                  PsiWhiteSpace(' ')
                  StringLiteral
                    PsiElement(string content)('"abc"')
              PsiWhiteSpace('\n    ')
              ScFunctionDefinition: foo
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(def)('def')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('foo')
                Parameters
                  ParametersClause
                    PsiElement(()('(')
                    Parameter: xs
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(identifier)('xs')
                      PsiElement(:)(':')
                      PsiWhiteSpace(' ')
                      ParameterType
                        SimpleType: Int
                          CodeReferenceElement: Int
                            PsiElement(identifier)('Int')
                        PsiElement(identifier)('*')
                    PsiElement())(')')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                ReferenceExpression: xs.length
                  ReferenceExpression: xs
                    PsiElement(identifier)('xs')
                  PsiElement(.)('.')
                  PsiElement(identifier)('length')
              PsiWhiteSpace('\n    ')
              MethodCall
                ReferenceExpression: foo
                  PsiElement(identifier)('foo')
                ArgumentList
                  PsiElement(()('(')
                  TypedExpression
                    ReferenceExpression: list
                      PsiElement(identifier)('list')
                    SequenceArgumentType
                      PsiElement(identifier)('*')
                  PsiElement())(')')
              PsiWhiteSpace('\n    ')
              InfixExpression
                ExpressionInParenthesis
                  PsiElement(()('(')
                  PostfixExpression
                    ReferenceExpression: list
                      PsiElement(identifier)('list')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: length
                      PsiElement(identifier)('length')
                  PsiElement())(')')
                PsiWhiteSpace('\n    ')
                ReferenceExpression: -
                  PsiElement(identifier)('-')
                PsiWhiteSpace(' ')
                ReferenceExpression: desugar.x
                  ReferenceExpression: desugar
                    PsiElement(identifier)('desugar')
                  PsiElement(.)('.')
                  PsiElement(identifier)('x')
              PsiWhiteSpace('\n    ')
              ScFunctionDefinition: bar
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(def)('def')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('bar')
                Parameters
                  ParametersClause
                    PsiElement(()('(')
                    Parameter: x
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(identifier)('x')
                      PsiElement(:)(':')
                      PsiWhiteSpace(' ')
                      ParameterType
                        PsiElement(=>)('=>')
                        PsiWhiteSpace(' ')
                        SimpleType: Int
                          CodeReferenceElement: Int
                            PsiElement(identifier)('Int')
                    PsiElement())(')')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                ReferenceExpression: x
                  PsiElement(identifier)('x')
              PsiWhiteSpace('\n    ')
              InfixExpression
                ExpressionInParenthesis
                  PsiElement(()('(')
                  InfixExpression
                    ReferenceExpression: x
                      PsiElement(identifier)('x')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: +
                      PsiElement(identifier)('+')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: y
                      PsiElement(identifier)('y')
                  PsiElement())(')')
                PsiWhiteSpace(' ')
                ReferenceExpression: +
                  PsiElement(identifier)('+')
                PsiWhiteSpace(' ')
                IntegerLiteral
                  PsiElement(integer)('1')
              PsiWhiteSpace('\n    ')
              WhileStatement
                PsiElement(while)('while')
                PsiWhiteSpace(' ')
                PsiElement(()('(')
                InfixExpression
                  ReferenceExpression: x
                    PsiElement(identifier)('x')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: <
                    PsiElement(identifier)('<')
                  PsiWhiteSpace(' ')
                  IntegerLiteral
                    PsiElement(integer)('10')
                PsiElement())(')')
                PsiWhiteSpace(' ')
                InfixExpression
                  ReferenceExpression: x
                    PsiElement(identifier)('x')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: +=
                    PsiElement(identifier)('+=')
                  PsiWhiteSpace(' ')
                  IntegerLiteral
                    PsiElement(integer)('1')
              PsiWhiteSpace('\n    ')
              WhileStatement
                PsiElement(while)('while')
                PsiWhiteSpace(' ')
                PsiElement(()('(')
                BlockExpression
                  PsiElement({)('{')
                  PsiWhiteSpace(' ')
                  InfixExpression
                    ReferenceExpression: x
                      PsiElement(identifier)('x')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: -=
                      PsiElement(identifier)('-=')
                    PsiWhiteSpace(' ')
                    IntegerLiteral
                      PsiElement(integer)('1')
                  PsiWhiteSpace(' ')
                  PsiElement(;)(';')
                  PsiWhiteSpace(' ')
                  InfixExpression
                    ReferenceExpression: x
                      PsiElement(identifier)('x')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: >
                      PsiElement(identifier)('>')
                    PsiWhiteSpace(' ')
                    IntegerLiteral
                      PsiElement(integer)('0')
                  PsiWhiteSpace(' ')
                  PsiElement(})('}')
                PsiElement())(')')
                PsiWhiteSpace(' ')
                UnitExpression
                  PsiElement(()('(')
                  PsiElement())(')')
              PsiWhiteSpace('\n  ')
              PsiElement(})('}')
        PsiWhiteSpace('\n\n')
        PsiElement(})('}')
