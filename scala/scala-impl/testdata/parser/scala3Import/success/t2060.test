/* The problem here is that we cannot insert an implicit to
 * add a polymorphic method which is then instantiated to the
 * right type. When searching for the implicit in the `fails to compile
 * line':
 *
 *   val failure = 1.0 + new Op[Int]
 *
 * we reduce the problem to finding a function from Double to
 * {+: _ >: Op[Int] <: Any}, that is, a method which takes
 * an argument which is an Op[Int] or a supertype thereof.
 * Class Rich is not a subtype of this structural record, because
 * polymorphic method instantiation is not contained in subtyping.
 * That is: The method type [I](op : Op[I]): Op[I] is not a subtype
 * of (Op[Int]): Op[Int].
 * At present it is unclear whether this problem can be solved.
 */
object Test {
  class Op[I];
  class IntOp extends Op[Int];

  class Rich(x : Double) {
    def +       (op : IntOp): IntOp = op;
    def +    [I](op : Op[I]): Op[I] = op;
    def plus [I](op : Op[I]): Op[I] = op;
  }

  implicit def iToRich(x : Double): Test.Rich =
    new Rich(x);

  // fails to compile
  val x = 1.0 + new Op[Int]

  // works as expected --
  //   problem isn't in adding new "+"
  val a = 1.0 + new IntOp;

  // works as expected --
  //   problem isn't in binding type variable I
  val b = 1.0 plus new Op[Int];

  // works as expected --
  //   problem isn't in using Rich.+[I](op : Op[I])
  val c = iToRich(1.0) + new Op[Int];
}
-----
ScalaFile
  ScObject: Test
    PsiComment(BlockComment)('/* The problem here is that we cannot insert an implicit to\n * add a polymorphic method which is then instantiated to the\n * right type. When searching for the implicit in the `fails to compile\n * line':\n *\n *   val failure = 1.0 + new Op[Int]\n *\n * we reduce the problem to finding a function from Double to\n * {+: _ >: Op[Int] <: Any}, that is, a method which takes\n * an argument which is an Op[Int] or a supertype thereof.\n * Class Rich is not a subtype of this structural record, because\n * polymorphic method instantiation is not contained in subtyping.\n * That is: The method type [I](op : Op[I]): Op[I] is not a subtype\n * of (Op[Int]): Op[Int].\n * At present it is unclear whether this problem can be solved.\n */')
    PsiWhiteSpace('\n')
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScClass: Op
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(class)('class')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Op')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: I
              PsiElement(identifier)('I')
            PsiElement(])(']')
          PrimaryConstructor
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            Parameters
              <empty list>
          ExtendsBlock
            <empty list>
        PsiElement(;)(';')
        PsiWhiteSpace('\n  ')
        ScClass: IntOp
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(class)('class')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('IntOp')
          PrimaryConstructor
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            Parameters
              <empty list>
          PsiWhiteSpace(' ')
          ExtendsBlock
            PsiElement(extends)('extends')
            PsiWhiteSpace(' ')
            TemplateParents
              ConstructorInvocation
                ParametrizedType: Op[Int]
                  SimpleType: Op
                    CodeReferenceElement: Op
                      PsiElement(identifier)('Op')
                  TypeArgumentsList
                    PsiElement([)('[')
                    SimpleType: Int
                      CodeReferenceElement: Int
                        PsiElement(identifier)('Int')
                    PsiElement(])(']')
        PsiElement(;)(';')
        PsiWhiteSpace('\n\n  ')
        ScClass: Rich
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(class)('class')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Rich')
          PrimaryConstructor
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            Parameters
              ParametersClause
                PsiElement(()('(')
                ClassParameter: x
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(identifier)('x')
                  PsiWhiteSpace(' ')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    SimpleType: Double
                      CodeReferenceElement: Double
                        PsiElement(identifier)('Double')
                PsiElement())(')')
          PsiWhiteSpace(' ')
          ExtendsBlock
            ScTemplateBody
              PsiElement({)('{')
              PsiWhiteSpace('\n    ')
              ScFunctionDefinition: +
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(def)('def')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('+')
                PsiWhiteSpace('       ')
                Parameters
                  ParametersClause
                    PsiElement(()('(')
                    Parameter: op
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(identifier)('op')
                      PsiWhiteSpace(' ')
                      PsiElement(:)(':')
                      PsiWhiteSpace(' ')
                      ParameterType
                        SimpleType: IntOp
                          CodeReferenceElement: IntOp
                            PsiElement(identifier)('IntOp')
                    PsiElement())(')')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                SimpleType: IntOp
                  CodeReferenceElement: IntOp
                    PsiElement(identifier)('IntOp')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                ReferenceExpression: op
                  PsiElement(identifier)('op')
              PsiElement(;)(';')
              PsiWhiteSpace('\n    ')
              ScFunctionDefinition: +
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(def)('def')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('+')
                PsiWhiteSpace('    ')
                TypeParameterClause
                  PsiElement([)('[')
                  TypeParameter: I
                    PsiElement(identifier)('I')
                  PsiElement(])(']')
                Parameters
                  ParametersClause
                    PsiElement(()('(')
                    Parameter: op
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(identifier)('op')
                      PsiWhiteSpace(' ')
                      PsiElement(:)(':')
                      PsiWhiteSpace(' ')
                      ParameterType
                        ParametrizedType: Op[I]
                          SimpleType: Op
                            CodeReferenceElement: Op
                              PsiElement(identifier)('Op')
                          TypeArgumentsList
                            PsiElement([)('[')
                            SimpleType: I
                              CodeReferenceElement: I
                                PsiElement(identifier)('I')
                            PsiElement(])(']')
                    PsiElement())(')')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParametrizedType: Op[I]
                  SimpleType: Op
                    CodeReferenceElement: Op
                      PsiElement(identifier)('Op')
                  TypeArgumentsList
                    PsiElement([)('[')
                    SimpleType: I
                      CodeReferenceElement: I
                        PsiElement(identifier)('I')
                    PsiElement(])(']')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                ReferenceExpression: op
                  PsiElement(identifier)('op')
              PsiElement(;)(';')
              PsiWhiteSpace('\n    ')
              ScFunctionDefinition: plus
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(def)('def')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('plus')
                PsiWhiteSpace(' ')
                TypeParameterClause
                  PsiElement([)('[')
                  TypeParameter: I
                    PsiElement(identifier)('I')
                  PsiElement(])(']')
                Parameters
                  ParametersClause
                    PsiElement(()('(')
                    Parameter: op
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(identifier)('op')
                      PsiWhiteSpace(' ')
                      PsiElement(:)(':')
                      PsiWhiteSpace(' ')
                      ParameterType
                        ParametrizedType: Op[I]
                          SimpleType: Op
                            CodeReferenceElement: Op
                              PsiElement(identifier)('Op')
                          TypeArgumentsList
                            PsiElement([)('[')
                            SimpleType: I
                              CodeReferenceElement: I
                                PsiElement(identifier)('I')
                            PsiElement(])(']')
                    PsiElement())(')')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParametrizedType: Op[I]
                  SimpleType: Op
                    CodeReferenceElement: Op
                      PsiElement(identifier)('Op')
                  TypeArgumentsList
                    PsiElement([)('[')
                    SimpleType: I
                      CodeReferenceElement: I
                        PsiElement(identifier)('I')
                    PsiElement(])(']')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                ReferenceExpression: op
                  PsiElement(identifier)('op')
              PsiElement(;)(';')
              PsiWhiteSpace('\n  ')
              PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: iToRich
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(implicit)('implicit')
          PsiWhiteSpace(' ')
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('iToRich')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: x
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x')
                PsiWhiteSpace(' ')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Double
                    CodeReferenceElement: Double
                      PsiElement(identifier)('Double')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Test.Rich
            CodeReferenceElement: Test.Rich
              CodeReferenceElement: Test
                PsiElement(identifier)('Test')
              PsiElement(.)('.')
              PsiElement(identifier)('Rich')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          BlockExpression
            PsiWhiteSpace('\n    ')
            ScNewTemplateDefinition: <anonymous>
              PsiElement(new)('new')
              PsiWhiteSpace(' ')
              ExtendsBlock
                TemplateParents
                  ConstructorInvocation
                    SimpleType: Rich
                      CodeReferenceElement: Rich
                        PsiElement(identifier)('Rich')
                    ArgumentList
                      PsiElement(()('(')
                      ReferenceExpression: x
                        PsiElement(identifier)('x')
                      PsiElement())(')')
            PsiElement(;)(';')
        PsiWhiteSpace('\n\n  ')
        ScPatternDefinition: x
          PsiComment(comment)('// fails to compile')
          PsiWhiteSpace('\n  ')
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: x
              PsiElement(identifier)('x')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          InfixExpression
            DoubleLiteral
              PsiElement(double)('1.0')
            PsiWhiteSpace(' ')
            ReferenceExpression: +
              PsiElement(identifier)('+')
            PsiWhiteSpace(' ')
            ScNewTemplateDefinition: <anonymous>
              PsiElement(new)('new')
              PsiWhiteSpace(' ')
              ExtendsBlock
                TemplateParents
                  ConstructorInvocation
                    ParametrizedType: Op[Int]
                      SimpleType: Op
                        CodeReferenceElement: Op
                          PsiElement(identifier)('Op')
                      TypeArgumentsList
                        PsiElement([)('[')
                        SimpleType: Int
                          CodeReferenceElement: Int
                            PsiElement(identifier)('Int')
                        PsiElement(])(']')
        PsiWhiteSpace('\n\n  ')
        ScPatternDefinition: a
          PsiComment(comment)('// works as expected --')
          PsiWhiteSpace('\n  ')
          PsiComment(comment)('//   problem isn't in adding new "+"')
          PsiWhiteSpace('\n  ')
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: a
              PsiElement(identifier)('a')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          InfixExpression
            DoubleLiteral
              PsiElement(double)('1.0')
            PsiWhiteSpace(' ')
            ReferenceExpression: +
              PsiElement(identifier)('+')
            PsiWhiteSpace(' ')
            ScNewTemplateDefinition: <anonymous>
              PsiElement(new)('new')
              PsiWhiteSpace(' ')
              ExtendsBlock
                TemplateParents
                  ConstructorInvocation
                    SimpleType: IntOp
                      CodeReferenceElement: IntOp
                        PsiElement(identifier)('IntOp')
        PsiElement(;)(';')
        PsiWhiteSpace('\n\n  ')
        ScPatternDefinition: b
          PsiComment(comment)('// works as expected --')
          PsiWhiteSpace('\n  ')
          PsiComment(comment)('//   problem isn't in binding type variable I')
          PsiWhiteSpace('\n  ')
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: b
              PsiElement(identifier)('b')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          InfixExpression
            DoubleLiteral
              PsiElement(double)('1.0')
            PsiWhiteSpace(' ')
            ReferenceExpression: plus
              PsiElement(identifier)('plus')
            PsiWhiteSpace(' ')
            ScNewTemplateDefinition: <anonymous>
              PsiElement(new)('new')
              PsiWhiteSpace(' ')
              ExtendsBlock
                TemplateParents
                  ConstructorInvocation
                    ParametrizedType: Op[Int]
                      SimpleType: Op
                        CodeReferenceElement: Op
                          PsiElement(identifier)('Op')
                      TypeArgumentsList
                        PsiElement([)('[')
                        SimpleType: Int
                          CodeReferenceElement: Int
                            PsiElement(identifier)('Int')
                        PsiElement(])(']')
        PsiElement(;)(';')
        PsiWhiteSpace('\n\n  ')
        ScPatternDefinition: c
          PsiComment(comment)('// works as expected --')
          PsiWhiteSpace('\n  ')
          PsiComment(comment)('//   problem isn't in using Rich.+[I](op : Op[I])')
          PsiWhiteSpace('\n  ')
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: c
              PsiElement(identifier)('c')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          InfixExpression
            MethodCall
              ReferenceExpression: iToRich
                PsiElement(identifier)('iToRich')
              ArgumentList
                PsiElement(()('(')
                DoubleLiteral
                  PsiElement(double)('1.0')
                PsiElement())(')')
            PsiWhiteSpace(' ')
            ReferenceExpression: +
              PsiElement(identifier)('+')
            PsiWhiteSpace(' ')
            ScNewTemplateDefinition: <anonymous>
              PsiElement(new)('new')
              PsiWhiteSpace(' ')
              ExtendsBlock
                TemplateParents
                  ConstructorInvocation
                    ParametrizedType: Op[Int]
                      SimpleType: Op
                        CodeReferenceElement: Op
                          PsiElement(identifier)('Op')
                      TypeArgumentsList
                        PsiElement([)('[')
                        SimpleType: Int
                          CodeReferenceElement: Int
                            PsiElement(identifier)('Int')
                        PsiElement(])(']')
        PsiElement(;)(';')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
