import scala.language.strictEquality

case class MyClass[A](value: String)(val a: A) derives CanEqual

class Something {}
given CanEqual[Something, Something] = CanEqual.derived

val a = MyClass[Something]("some")(new Something())
val b = MyClass[Something]("some")(new Something())
val c = new Something()
val d = new Something()

def test1 = println(a == b)
def test2 = println(c == d)
-----
ScalaFile
  ScImportStatement
    PsiElement(import)('import')
    PsiWhiteSpace(' ')
    ImportExpression
      CodeReferenceElement: scala.language.strictEquality
        CodeReferenceElement: scala.language
          CodeReferenceElement: scala
            PsiElement(identifier)('scala')
          PsiElement(.)('.')
          PsiElement(identifier)('language')
        PsiElement(.)('.')
        PsiElement(identifier)('strictEquality')
  PsiWhiteSpace('\n\n')
  ScClass: MyClass
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(case)('case')
    PsiWhiteSpace(' ')
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('MyClass')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: A
        PsiElement(identifier)('A')
      PsiElement(])(']')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        ParametersClause
          PsiElement(()('(')
          ClassParameter: value
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(identifier)('value')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            ParameterType
              SimpleType: String
                CodeReferenceElement: String
                  PsiElement(identifier)('String')
          PsiElement())(')')
        ParametersClause
          PsiElement(()('(')
          ClassParameter: a
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(val)('val')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('a')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            ParameterType
              SimpleType: A
                CodeReferenceElement: A
                  PsiElement(identifier)('A')
          PsiElement())(')')
    PsiWhiteSpace(' ')
    ExtendsBlock
      DerivesClause
        PsiElement(derives)('derives')
        PsiWhiteSpace(' ')
        CodeReferenceElement: CanEqual
          PsiElement(identifier)('CanEqual')
  PsiWhiteSpace('\n\n')
  ScClass: Something
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Something')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiElement(})('}')
  PsiWhiteSpace('\n')
  ScGivenAliasDefinition: given_CanEqual_Something_Something
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(given)('given')
    PsiWhiteSpace(' ')
    ParametrizedType: CanEqual[Something, Something]
      SimpleType: CanEqual
        CodeReferenceElement: CanEqual
          PsiElement(identifier)('CanEqual')
      TypeArgumentsList
        PsiElement([)('[')
        SimpleType: Something
          CodeReferenceElement: Something
            PsiElement(identifier)('Something')
        PsiElement(,)(',')
        PsiWhiteSpace(' ')
        SimpleType: Something
          CodeReferenceElement: Something
            PsiElement(identifier)('Something')
        PsiElement(])(']')
    Parameters
      <empty list>
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    ReferenceExpression: CanEqual.derived
      ReferenceExpression: CanEqual
        PsiElement(identifier)('CanEqual')
      PsiElement(.)('.')
      PsiElement(identifier)('derived')
  PsiWhiteSpace('\n\n')
  ScPatternDefinition: a
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(val)('val')
    PsiWhiteSpace(' ')
    ListOfPatterns
      ReferencePattern: a
        PsiElement(identifier)('a')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    MethodCall
      MethodCall
        GenericCall
          ReferenceExpression: MyClass
            PsiElement(identifier)('MyClass')
          TypeArgumentsList
            PsiElement([)('[')
            SimpleType: Something
              CodeReferenceElement: Something
                PsiElement(identifier)('Something')
            PsiElement(])(']')
        ArgumentList
          PsiElement(()('(')
          StringLiteral
            PsiElement(string content)('"some"')
          PsiElement())(')')
      ArgumentList
        PsiElement(()('(')
        ScNewTemplateDefinition: <anonymous>
          PsiElement(new)('new')
          PsiWhiteSpace(' ')
          ExtendsBlock
            TemplateParents
              ConstructorInvocation
                SimpleType: Something
                  CodeReferenceElement: Something
                    PsiElement(identifier)('Something')
                ArgumentList
                  PsiElement(()('(')
                  PsiElement())(')')
        PsiElement())(')')
  PsiWhiteSpace('\n')
  ScPatternDefinition: b
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(val)('val')
    PsiWhiteSpace(' ')
    ListOfPatterns
      ReferencePattern: b
        PsiElement(identifier)('b')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    MethodCall
      MethodCall
        GenericCall
          ReferenceExpression: MyClass
            PsiElement(identifier)('MyClass')
          TypeArgumentsList
            PsiElement([)('[')
            SimpleType: Something
              CodeReferenceElement: Something
                PsiElement(identifier)('Something')
            PsiElement(])(']')
        ArgumentList
          PsiElement(()('(')
          StringLiteral
            PsiElement(string content)('"some"')
          PsiElement())(')')
      ArgumentList
        PsiElement(()('(')
        ScNewTemplateDefinition: <anonymous>
          PsiElement(new)('new')
          PsiWhiteSpace(' ')
          ExtendsBlock
            TemplateParents
              ConstructorInvocation
                SimpleType: Something
                  CodeReferenceElement: Something
                    PsiElement(identifier)('Something')
                ArgumentList
                  PsiElement(()('(')
                  PsiElement())(')')
        PsiElement())(')')
  PsiWhiteSpace('\n')
  ScPatternDefinition: c
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(val)('val')
    PsiWhiteSpace(' ')
    ListOfPatterns
      ReferencePattern: c
        PsiElement(identifier)('c')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    ScNewTemplateDefinition: <anonymous>
      PsiElement(new)('new')
      PsiWhiteSpace(' ')
      ExtendsBlock
        TemplateParents
          ConstructorInvocation
            SimpleType: Something
              CodeReferenceElement: Something
                PsiElement(identifier)('Something')
            ArgumentList
              PsiElement(()('(')
              PsiElement())(')')
  PsiWhiteSpace('\n')
  ScPatternDefinition: d
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(val)('val')
    PsiWhiteSpace(' ')
    ListOfPatterns
      ReferencePattern: d
        PsiElement(identifier)('d')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    ScNewTemplateDefinition: <anonymous>
      PsiElement(new)('new')
      PsiWhiteSpace(' ')
      ExtendsBlock
        TemplateParents
          ConstructorInvocation
            SimpleType: Something
              CodeReferenceElement: Something
                PsiElement(identifier)('Something')
            ArgumentList
              PsiElement(()('(')
              PsiElement())(')')
  PsiWhiteSpace('\n\n')
  ScFunctionDefinition: test1
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(def)('def')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('test1')
    Parameters
      <empty list>
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    MethodCall
      ReferenceExpression: println
        PsiElement(identifier)('println')
      ArgumentList
        PsiElement(()('(')
        InfixExpression
          ReferenceExpression: a
            PsiElement(identifier)('a')
          PsiWhiteSpace(' ')
          ReferenceExpression: ==
            PsiElement(identifier)('==')
          PsiWhiteSpace(' ')
          ReferenceExpression: b
            PsiElement(identifier)('b')
        PsiElement())(')')
  PsiWhiteSpace('\n')
  ScFunctionDefinition: test2
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(def)('def')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('test2')
    Parameters
      <empty list>
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    MethodCall
      ReferenceExpression: println
        PsiElement(identifier)('println')
      ArgumentList
        PsiElement(()('(')
        InfixExpression
          ReferenceExpression: c
            PsiElement(identifier)('c')
          PsiWhiteSpace(' ')
          ReferenceExpression: ==
            PsiElement(identifier)('==')
          PsiWhiteSpace(' ')
          ReferenceExpression: d
            PsiElement(identifier)('d')
        PsiElement())(')')
