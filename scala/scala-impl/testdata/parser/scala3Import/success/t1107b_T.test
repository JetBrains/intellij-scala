sealed trait Top
sealed trait Sub extends Top
trait C {
  private object P extends Sub
  def bob(): Class[_] = P.getClass
  def bob2() = O.d(P)
}
-----
ScalaFile
  ScTrait: Top
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(sealed)('sealed')
    PsiWhiteSpace(' ')
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Top')
    ExtendsBlock
      <empty list>
  PsiWhiteSpace('\n')
  ScTrait: Sub
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(sealed)('sealed')
    PsiWhiteSpace(' ')
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Sub')
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          SimpleType: Top
            CodeReferenceElement: Top
              PsiElement(identifier)('Top')
  PsiWhiteSpace('\n')
  ScTrait: C
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('C')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScObject: P
          AnnotationsList
            <empty list>
          Modifiers
            AccessModifier
              PsiElement(private)('private')
          PsiWhiteSpace(' ')
          PsiElement(object)('object')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('P')
          PsiWhiteSpace(' ')
          ExtendsBlock
            PsiElement(extends)('extends')
            PsiWhiteSpace(' ')
            TemplateParents
              ConstructorInvocation
                SimpleType: Sub
                  CodeReferenceElement: Sub
                    PsiElement(identifier)('Sub')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: bob
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('bob')
          Parameters
            ParametersClause
              PsiElement(()('(')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: Class[_]
            SimpleType: Class
              CodeReferenceElement: Class
                PsiElement(identifier)('Class')
            TypeArgumentsList
              PsiElement([)('[')
              WildcardType: _
                PsiElement(_)('_')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: P.getClass
            ReferenceExpression: P
              PsiElement(identifier)('P')
            PsiElement(.)('.')
            PsiElement(identifier)('getClass')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: bob2
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('bob2')
          Parameters
            ParametersClause
              PsiElement(()('(')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: O.d
              ReferenceExpression: O
                PsiElement(identifier)('O')
              PsiElement(.)('.')
              PsiElement(identifier)('d')
            ArgumentList
              PsiElement(()('(')
              ReferenceExpression: P
                PsiElement(identifier)('P')
              PsiElement())(')')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
