case class A();
case class B();

type M2[X <: A|B] = X match {
  case A => A
  case B => B
}

def f2(x: A|B): M2[x.type] = x match {
  case _: A => A()
  case _: B => B()
}

type M1[X <: A|B] = X match {
  case A => A
  case B => (x: A|B) => M2[x.type]
}

def f1(x: A|B): M1[x.type] = x match {
  case _: A => A()
  case _: B => (x: A|B) => f2(x)
}

case class More(); case class Stop();

sealed abstract class DSL
case class Fun[F <: More|Stop => DSL](cont: F) extends DSL
case class Nop() extends DSL

type Match2[X <: More|Stop] <: DSL = X match {
  case More => Fun[(y: More|Stop) => Match1[y.type]]
  case Stop => Nop
}
type Match1[X] <: DSL = X match {
  case More => Nop
  case Stop => Nop
}

def fun2(x: More|Stop): Match2[x.type] = x match {
  case _: More => Fun(fun1)  // error
  case _: Stop => Nop()
}

def fun1(y: More|Stop): Match1[y.type] = y match {
  case _: More => Nop()
  case _: Stop => Nop()
}
-----
ScalaFile
  ScClass: A
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(case)('case')
    PsiWhiteSpace(' ')
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('A')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        ParametersClause
          PsiElement(()('(')
          PsiElement())(')')
    ExtendsBlock
      <empty list>
  PsiElement(;)(';')
  PsiWhiteSpace('\n')
  ScClass: B
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(case)('case')
    PsiWhiteSpace(' ')
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('B')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        ParametersClause
          PsiElement(()('(')
          PsiElement())(')')
    ExtendsBlock
      <empty list>
  PsiElement(;)(';')
  PsiWhiteSpace('\n\n')
  ScTypeAliasDefinition: M2
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(type)('type')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('M2')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: X
        PsiElement(identifier)('X')
        PsiWhiteSpace(' ')
        PsiElement(<:)('<:')
        PsiWhiteSpace(' ')
        InfixType: A|B
          SimpleType: A
            CodeReferenceElement: A
              PsiElement(identifier)('A')
          CodeReferenceElement: |
            PsiElement(identifier)('|')
          SimpleType: B
            CodeReferenceElement: B
              PsiElement(identifier)('B')
      PsiElement(])(']')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    MatchType: X match {
  case A => A
  case B => B
}
      SimpleType: X
        CodeReferenceElement: X
          PsiElement(identifier)('X')
      PsiWhiteSpace(' ')
      PsiElement(match)('match')
      PsiWhiteSpace(' ')
      PsiElement({)('{')
      PsiWhiteSpace('\n  ')
      ScMatchTypeCasesImpl(match type cases)
        ScMatchTypeCaseImpl(match type case)
          PsiElement(case)('case')
          PsiWhiteSpace(' ')
          SimpleType: A
            CodeReferenceElement: A
              PsiElement(identifier)('A')
          PsiWhiteSpace(' ')
          PsiElement(=>)('=>')
          PsiWhiteSpace(' ')
          SimpleType: A
            CodeReferenceElement: A
              PsiElement(identifier)('A')
        PsiWhiteSpace('\n  ')
        ScMatchTypeCaseImpl(match type case)
          PsiElement(case)('case')
          PsiWhiteSpace(' ')
          SimpleType: B
            CodeReferenceElement: B
              PsiElement(identifier)('B')
          PsiWhiteSpace(' ')
          PsiElement(=>)('=>')
          PsiWhiteSpace(' ')
          SimpleType: B
            CodeReferenceElement: B
              PsiElement(identifier)('B')
      PsiWhiteSpace('\n')
      PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScFunctionDefinition: f2
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(def)('def')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('f2')
    Parameters
      ParametersClause
        PsiElement(()('(')
        Parameter: x
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(identifier)('x')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParameterType
            InfixType: A|B
              SimpleType: A
                CodeReferenceElement: A
                  PsiElement(identifier)('A')
              CodeReferenceElement: |
                PsiElement(identifier)('|')
              SimpleType: B
                CodeReferenceElement: B
                  PsiElement(identifier)('B')
        PsiElement())(')')
    PsiElement(:)(':')
    PsiWhiteSpace(' ')
    ParametrizedType: M2[x.type]
      SimpleType: M2
        CodeReferenceElement: M2
          PsiElement(identifier)('M2')
      TypeArgumentsList
        PsiElement([)('[')
        SimpleType: x.type
          CodeReferenceElement: x
            PsiElement(identifier)('x')
          PsiElement(.)('.')
          PsiElement(type)('type')
        PsiElement(])(']')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    MatchStatement
      ReferenceExpression: x
        PsiElement(identifier)('x')
      PsiWhiteSpace(' ')
      PsiElement(match)('match')
      PsiWhiteSpace(' ')
      PsiElement({)('{')
      PsiWhiteSpace('\n  ')
      CaseClauses
        CaseClause
          PsiElement(case)('case')
          PsiWhiteSpace(' ')
          Scala3 TypedPattern
            WildcardPattern
              PsiElement(_)('_')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            TypePattern
              SimpleType: A
                CodeReferenceElement: A
                  PsiElement(identifier)('A')
          PsiWhiteSpace(' ')
          PsiElement(=>)('=>')
          PsiWhiteSpace(' ')
          BlockOfExpressions
            MethodCall
              ReferenceExpression: A
                PsiElement(identifier)('A')
              ArgumentList
                PsiElement(()('(')
                PsiElement())(')')
        PsiWhiteSpace('\n  ')
        CaseClause
          PsiElement(case)('case')
          PsiWhiteSpace(' ')
          Scala3 TypedPattern
            WildcardPattern
              PsiElement(_)('_')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            TypePattern
              SimpleType: B
                CodeReferenceElement: B
                  PsiElement(identifier)('B')
          PsiWhiteSpace(' ')
          PsiElement(=>)('=>')
          PsiWhiteSpace(' ')
          BlockOfExpressions
            MethodCall
              ReferenceExpression: B
                PsiElement(identifier)('B')
              ArgumentList
                PsiElement(()('(')
                PsiElement())(')')
      PsiWhiteSpace('\n')
      PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScTypeAliasDefinition: M1
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(type)('type')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('M1')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: X
        PsiElement(identifier)('X')
        PsiWhiteSpace(' ')
        PsiElement(<:)('<:')
        PsiWhiteSpace(' ')
        InfixType: A|B
          SimpleType: A
            CodeReferenceElement: A
              PsiElement(identifier)('A')
          CodeReferenceElement: |
            PsiElement(identifier)('|')
          SimpleType: B
            CodeReferenceElement: B
              PsiElement(identifier)('B')
      PsiElement(])(']')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    MatchType: X match {
  case A => A
  case B => (x: A|B) => M2[x.type]
}
      SimpleType: X
        CodeReferenceElement: X
          PsiElement(identifier)('X')
      PsiWhiteSpace(' ')
      PsiElement(match)('match')
      PsiWhiteSpace(' ')
      PsiElement({)('{')
      PsiWhiteSpace('\n  ')
      ScMatchTypeCasesImpl(match type cases)
        ScMatchTypeCaseImpl(match type case)
          PsiElement(case)('case')
          PsiWhiteSpace(' ')
          SimpleType: A
            CodeReferenceElement: A
              PsiElement(identifier)('A')
          PsiWhiteSpace(' ')
          PsiElement(=>)('=>')
          PsiWhiteSpace(' ')
          SimpleType: A
            CodeReferenceElement: A
              PsiElement(identifier)('A')
        PsiWhiteSpace('\n  ')
        ScMatchTypeCaseImpl(match type case)
          PsiElement(case)('case')
          PsiWhiteSpace(' ')
          SimpleType: B
            CodeReferenceElement: B
              PsiElement(identifier)('B')
          PsiWhiteSpace(' ')
          PsiElement(=>)('=>')
          PsiWhiteSpace(' ')
          DependentFunctionType: (x: A|B) => M2[x.type]
            ParametersClause
              PsiElement(()('(')
              Parameter: x
                PsiElement(identifier)('x')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                InfixType: A|B
                  SimpleType: A
                    CodeReferenceElement: A
                      PsiElement(identifier)('A')
                  CodeReferenceElement: |
                    PsiElement(identifier)('|')
                  SimpleType: B
                    CodeReferenceElement: B
                      PsiElement(identifier)('B')
              PsiElement())(')')
            PsiWhiteSpace(' ')
            PsiElement(=>)('=>')
            PsiWhiteSpace(' ')
            ParametrizedType: M2[x.type]
              SimpleType: M2
                CodeReferenceElement: M2
                  PsiElement(identifier)('M2')
              TypeArgumentsList
                PsiElement([)('[')
                SimpleType: x.type
                  CodeReferenceElement: x
                    PsiElement(identifier)('x')
                  PsiElement(.)('.')
                  PsiElement(type)('type')
                PsiElement(])(']')
      PsiWhiteSpace('\n')
      PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScFunctionDefinition: f1
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(def)('def')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('f1')
    Parameters
      ParametersClause
        PsiElement(()('(')
        Parameter: x
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(identifier)('x')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParameterType
            InfixType: A|B
              SimpleType: A
                CodeReferenceElement: A
                  PsiElement(identifier)('A')
              CodeReferenceElement: |
                PsiElement(identifier)('|')
              SimpleType: B
                CodeReferenceElement: B
                  PsiElement(identifier)('B')
        PsiElement())(')')
    PsiElement(:)(':')
    PsiWhiteSpace(' ')
    ParametrizedType: M1[x.type]
      SimpleType: M1
        CodeReferenceElement: M1
          PsiElement(identifier)('M1')
      TypeArgumentsList
        PsiElement([)('[')
        SimpleType: x.type
          CodeReferenceElement: x
            PsiElement(identifier)('x')
          PsiElement(.)('.')
          PsiElement(type)('type')
        PsiElement(])(']')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    MatchStatement
      ReferenceExpression: x
        PsiElement(identifier)('x')
      PsiWhiteSpace(' ')
      PsiElement(match)('match')
      PsiWhiteSpace(' ')
      PsiElement({)('{')
      PsiWhiteSpace('\n  ')
      CaseClauses
        CaseClause
          PsiElement(case)('case')
          PsiWhiteSpace(' ')
          Scala3 TypedPattern
            WildcardPattern
              PsiElement(_)('_')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            TypePattern
              SimpleType: A
                CodeReferenceElement: A
                  PsiElement(identifier)('A')
          PsiWhiteSpace(' ')
          PsiElement(=>)('=>')
          PsiWhiteSpace(' ')
          BlockOfExpressions
            MethodCall
              ReferenceExpression: A
                PsiElement(identifier)('A')
              ArgumentList
                PsiElement(()('(')
                PsiElement())(')')
        PsiWhiteSpace('\n  ')
        CaseClause
          PsiElement(case)('case')
          PsiWhiteSpace(' ')
          Scala3 TypedPattern
            WildcardPattern
              PsiElement(_)('_')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            TypePattern
              SimpleType: B
                CodeReferenceElement: B
                  PsiElement(identifier)('B')
          PsiWhiteSpace(' ')
          PsiElement(=>)('=>')
          PsiWhiteSpace(' ')
          BlockOfExpressions
            FunctionExpression
              Parameters
                ParametersClause
                  PsiElement(()('(')
                  Parameter: x
                    AnnotationsList
                      <empty list>
                    PsiElement(identifier)('x')
                    PsiElement(:)(':')
                    PsiWhiteSpace(' ')
                    ParameterType
                      InfixType: A|B
                        SimpleType: A
                          CodeReferenceElement: A
                            PsiElement(identifier)('A')
                        CodeReferenceElement: |
                          PsiElement(identifier)('|')
                        SimpleType: B
                          CodeReferenceElement: B
                            PsiElement(identifier)('B')
                  PsiElement())(')')
              PsiWhiteSpace(' ')
              PsiElement(=>)('=>')
              PsiWhiteSpace(' ')
              BlockOfExpressions
                MethodCall
                  ReferenceExpression: f2
                    PsiElement(identifier)('f2')
                  ArgumentList
                    PsiElement(()('(')
                    ReferenceExpression: x
                      PsiElement(identifier)('x')
                    PsiElement())(')')
      PsiWhiteSpace('\n')
      PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScClass: More
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(case)('case')
    PsiWhiteSpace(' ')
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('More')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        ParametersClause
          PsiElement(()('(')
          PsiElement())(')')
    ExtendsBlock
      <empty list>
  PsiElement(;)(';')
  PsiWhiteSpace(' ')
  ScClass: Stop
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(case)('case')
    PsiWhiteSpace(' ')
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Stop')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        ParametersClause
          PsiElement(()('(')
          PsiElement())(')')
    ExtendsBlock
      <empty list>
  PsiElement(;)(';')
  PsiWhiteSpace('\n\n')
  ScClass: DSL
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(sealed)('sealed')
      PsiWhiteSpace(' ')
      PsiElement(abstract)('abstract')
    PsiWhiteSpace(' ')
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('DSL')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    ExtendsBlock
      <empty list>
  PsiWhiteSpace('\n')
  ScClass: Fun
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(case)('case')
    PsiWhiteSpace(' ')
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Fun')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: F
        PsiElement(identifier)('F')
        PsiWhiteSpace(' ')
        PsiElement(<:)('<:')
        PsiWhiteSpace(' ')
        FunctionalType: More|Stop => DSL
          InfixType: More|Stop
            SimpleType: More
              CodeReferenceElement: More
                PsiElement(identifier)('More')
            CodeReferenceElement: |
              PsiElement(identifier)('|')
            SimpleType: Stop
              CodeReferenceElement: Stop
                PsiElement(identifier)('Stop')
          PsiWhiteSpace(' ')
          PsiElement(=>)('=>')
          PsiWhiteSpace(' ')
          SimpleType: DSL
            CodeReferenceElement: DSL
              PsiElement(identifier)('DSL')
      PsiElement(])(']')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        ParametersClause
          PsiElement(()('(')
          ClassParameter: cont
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(identifier)('cont')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            ParameterType
              SimpleType: F
                CodeReferenceElement: F
                  PsiElement(identifier)('F')
          PsiElement())(')')
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          SimpleType: DSL
            CodeReferenceElement: DSL
              PsiElement(identifier)('DSL')
  PsiWhiteSpace('\n')
  ScClass: Nop
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(case)('case')
    PsiWhiteSpace(' ')
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Nop')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        ParametersClause
          PsiElement(()('(')
          PsiElement())(')')
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          SimpleType: DSL
            CodeReferenceElement: DSL
              PsiElement(identifier)('DSL')
  PsiWhiteSpace('\n\n')
  ScTypeAliasDefinition: Match2
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(type)('type')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Match2')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: X
        PsiElement(identifier)('X')
        PsiWhiteSpace(' ')
        PsiElement(<:)('<:')
        PsiWhiteSpace(' ')
        InfixType: More|Stop
          SimpleType: More
            CodeReferenceElement: More
              PsiElement(identifier)('More')
          CodeReferenceElement: |
            PsiElement(identifier)('|')
          SimpleType: Stop
            CodeReferenceElement: Stop
              PsiElement(identifier)('Stop')
      PsiElement(])(']')
    PsiWhiteSpace(' ')
    PsiElement(<:)('<:')
    PsiWhiteSpace(' ')
    SimpleType: DSL
      CodeReferenceElement: DSL
        PsiElement(identifier)('DSL')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    MatchType: X match {
  case More => Fun[(y: More|Stop) => Match1[y.type]]
  case Stop => Nop
}
      SimpleType: X
        CodeReferenceElement: X
          PsiElement(identifier)('X')
      PsiWhiteSpace(' ')
      PsiElement(match)('match')
      PsiWhiteSpace(' ')
      PsiElement({)('{')
      PsiWhiteSpace('\n  ')
      ScMatchTypeCasesImpl(match type cases)
        ScMatchTypeCaseImpl(match type case)
          PsiElement(case)('case')
          PsiWhiteSpace(' ')
          SimpleType: More
            CodeReferenceElement: More
              PsiElement(identifier)('More')
          PsiWhiteSpace(' ')
          PsiElement(=>)('=>')
          PsiWhiteSpace(' ')
          ParametrizedType: Fun[(y: More|Stop) => Match1[y.type]]
            SimpleType: Fun
              CodeReferenceElement: Fun
                PsiElement(identifier)('Fun')
            TypeArgumentsList
              PsiElement([)('[')
              DependentFunctionType: (y: More|Stop) => Match1[y.type]
                ParametersClause
                  PsiElement(()('(')
                  Parameter: y
                    PsiElement(identifier)('y')
                    PsiElement(:)(':')
                    PsiWhiteSpace(' ')
                    InfixType: More|Stop
                      SimpleType: More
                        CodeReferenceElement: More
                          PsiElement(identifier)('More')
                      CodeReferenceElement: |
                        PsiElement(identifier)('|')
                      SimpleType: Stop
                        CodeReferenceElement: Stop
                          PsiElement(identifier)('Stop')
                  PsiElement())(')')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                ParametrizedType: Match1[y.type]
                  SimpleType: Match1
                    CodeReferenceElement: Match1
                      PsiElement(identifier)('Match1')
                  TypeArgumentsList
                    PsiElement([)('[')
                    SimpleType: y.type
                      CodeReferenceElement: y
                        PsiElement(identifier)('y')
                      PsiElement(.)('.')
                      PsiElement(type)('type')
                    PsiElement(])(']')
              PsiElement(])(']')
        PsiWhiteSpace('\n  ')
        ScMatchTypeCaseImpl(match type case)
          PsiElement(case)('case')
          PsiWhiteSpace(' ')
          SimpleType: Stop
            CodeReferenceElement: Stop
              PsiElement(identifier)('Stop')
          PsiWhiteSpace(' ')
          PsiElement(=>)('=>')
          PsiWhiteSpace(' ')
          SimpleType: Nop
            CodeReferenceElement: Nop
              PsiElement(identifier)('Nop')
      PsiWhiteSpace('\n')
      PsiElement(})('}')
  PsiWhiteSpace('\n')
  ScTypeAliasDefinition: Match1
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(type)('type')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Match1')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: X
        PsiElement(identifier)('X')
      PsiElement(])(']')
    PsiWhiteSpace(' ')
    PsiElement(<:)('<:')
    PsiWhiteSpace(' ')
    SimpleType: DSL
      CodeReferenceElement: DSL
        PsiElement(identifier)('DSL')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    MatchType: X match {
  case More => Nop
  case Stop => Nop
}
      SimpleType: X
        CodeReferenceElement: X
          PsiElement(identifier)('X')
      PsiWhiteSpace(' ')
      PsiElement(match)('match')
      PsiWhiteSpace(' ')
      PsiElement({)('{')
      PsiWhiteSpace('\n  ')
      ScMatchTypeCasesImpl(match type cases)
        ScMatchTypeCaseImpl(match type case)
          PsiElement(case)('case')
          PsiWhiteSpace(' ')
          SimpleType: More
            CodeReferenceElement: More
              PsiElement(identifier)('More')
          PsiWhiteSpace(' ')
          PsiElement(=>)('=>')
          PsiWhiteSpace(' ')
          SimpleType: Nop
            CodeReferenceElement: Nop
              PsiElement(identifier)('Nop')
        PsiWhiteSpace('\n  ')
        ScMatchTypeCaseImpl(match type case)
          PsiElement(case)('case')
          PsiWhiteSpace(' ')
          SimpleType: Stop
            CodeReferenceElement: Stop
              PsiElement(identifier)('Stop')
          PsiWhiteSpace(' ')
          PsiElement(=>)('=>')
          PsiWhiteSpace(' ')
          SimpleType: Nop
            CodeReferenceElement: Nop
              PsiElement(identifier)('Nop')
      PsiWhiteSpace('\n')
      PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScFunctionDefinition: fun2
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(def)('def')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('fun2')
    Parameters
      ParametersClause
        PsiElement(()('(')
        Parameter: x
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(identifier)('x')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParameterType
            InfixType: More|Stop
              SimpleType: More
                CodeReferenceElement: More
                  PsiElement(identifier)('More')
              CodeReferenceElement: |
                PsiElement(identifier)('|')
              SimpleType: Stop
                CodeReferenceElement: Stop
                  PsiElement(identifier)('Stop')
        PsiElement())(')')
    PsiElement(:)(':')
    PsiWhiteSpace(' ')
    ParametrizedType: Match2[x.type]
      SimpleType: Match2
        CodeReferenceElement: Match2
          PsiElement(identifier)('Match2')
      TypeArgumentsList
        PsiElement([)('[')
        SimpleType: x.type
          CodeReferenceElement: x
            PsiElement(identifier)('x')
          PsiElement(.)('.')
          PsiElement(type)('type')
        PsiElement(])(']')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    MatchStatement
      ReferenceExpression: x
        PsiElement(identifier)('x')
      PsiWhiteSpace(' ')
      PsiElement(match)('match')
      PsiWhiteSpace(' ')
      PsiElement({)('{')
      PsiWhiteSpace('\n  ')
      CaseClauses
        CaseClause
          PsiElement(case)('case')
          PsiWhiteSpace(' ')
          Scala3 TypedPattern
            WildcardPattern
              PsiElement(_)('_')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            TypePattern
              SimpleType: More
                CodeReferenceElement: More
                  PsiElement(identifier)('More')
          PsiWhiteSpace(' ')
          PsiElement(=>)('=>')
          PsiWhiteSpace(' ')
          BlockOfExpressions
            MethodCall
              ReferenceExpression: Fun
                PsiElement(identifier)('Fun')
              ArgumentList
                PsiElement(()('(')
                ReferenceExpression: fun1
                  PsiElement(identifier)('fun1')
                PsiElement())(')')
        PsiWhiteSpace('  ')
        PsiComment(comment)('// error')
        PsiWhiteSpace('\n  ')
        CaseClause
          PsiElement(case)('case')
          PsiWhiteSpace(' ')
          Scala3 TypedPattern
            WildcardPattern
              PsiElement(_)('_')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            TypePattern
              SimpleType: Stop
                CodeReferenceElement: Stop
                  PsiElement(identifier)('Stop')
          PsiWhiteSpace(' ')
          PsiElement(=>)('=>')
          PsiWhiteSpace(' ')
          BlockOfExpressions
            MethodCall
              ReferenceExpression: Nop
                PsiElement(identifier)('Nop')
              ArgumentList
                PsiElement(()('(')
                PsiElement())(')')
      PsiWhiteSpace('\n')
      PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScFunctionDefinition: fun1
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(def)('def')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('fun1')
    Parameters
      ParametersClause
        PsiElement(()('(')
        Parameter: y
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(identifier)('y')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParameterType
            InfixType: More|Stop
              SimpleType: More
                CodeReferenceElement: More
                  PsiElement(identifier)('More')
              CodeReferenceElement: |
                PsiElement(identifier)('|')
              SimpleType: Stop
                CodeReferenceElement: Stop
                  PsiElement(identifier)('Stop')
        PsiElement())(')')
    PsiElement(:)(':')
    PsiWhiteSpace(' ')
    ParametrizedType: Match1[y.type]
      SimpleType: Match1
        CodeReferenceElement: Match1
          PsiElement(identifier)('Match1')
      TypeArgumentsList
        PsiElement([)('[')
        SimpleType: y.type
          CodeReferenceElement: y
            PsiElement(identifier)('y')
          PsiElement(.)('.')
          PsiElement(type)('type')
        PsiElement(])(']')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    MatchStatement
      ReferenceExpression: y
        PsiElement(identifier)('y')
      PsiWhiteSpace(' ')
      PsiElement(match)('match')
      PsiWhiteSpace(' ')
      PsiElement({)('{')
      PsiWhiteSpace('\n  ')
      CaseClauses
        CaseClause
          PsiElement(case)('case')
          PsiWhiteSpace(' ')
          Scala3 TypedPattern
            WildcardPattern
              PsiElement(_)('_')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            TypePattern
              SimpleType: More
                CodeReferenceElement: More
                  PsiElement(identifier)('More')
          PsiWhiteSpace(' ')
          PsiElement(=>)('=>')
          PsiWhiteSpace(' ')
          BlockOfExpressions
            MethodCall
              ReferenceExpression: Nop
                PsiElement(identifier)('Nop')
              ArgumentList
                PsiElement(()('(')
                PsiElement())(')')
        PsiWhiteSpace('\n  ')
        CaseClause
          PsiElement(case)('case')
          PsiWhiteSpace(' ')
          Scala3 TypedPattern
            WildcardPattern
              PsiElement(_)('_')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            TypePattern
              SimpleType: Stop
                CodeReferenceElement: Stop
                  PsiElement(identifier)('Stop')
          PsiWhiteSpace(' ')
          PsiElement(=>)('=>')
          PsiWhiteSpace(' ')
          BlockOfExpressions
            MethodCall
              ReferenceExpression: Nop
                PsiElement(identifier)('Nop')
              ArgumentList
                PsiElement(()('(')
                PsiElement())(')')
      PsiWhiteSpace('\n')
      PsiElement(})('}')
