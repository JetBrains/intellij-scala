import compiletime.*

class C:
  type X <: Tuple

def test: Unit =
  val a: C { type X = Tuple1[Any] } = ???
  f(a)

inline def f(c: C): Unit = {
  inline val size = constValue[Tuple.Size[c.X]]
  val n = size
  val m: Int = n
  ???
}
-----
ScalaFile
  ScImportStatement
    PsiElement(import)('import')
    PsiWhiteSpace(' ')
    ImportExpression
      CodeReferenceElement: compiletime
        PsiElement(identifier)('compiletime')
      PsiElement(.)('.')
      PsiElement(*)('*')
  PsiWhiteSpace('\n\n')
  ScClass: C
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('C')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    ExtendsBlock
      ScTemplateBody
        PsiElement(:)(':')
        PsiWhiteSpace('\n  ')
        ScTypeAliasDeclaration: X
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('X')
          PsiWhiteSpace(' ')
          PsiElement(<:)('<:')
          PsiWhiteSpace(' ')
          SimpleType: Tuple
            CodeReferenceElement: Tuple
              PsiElement(identifier)('Tuple')
  PsiWhiteSpace('\n\n')
  ScFunctionDefinition: test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(def)('def')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('test')
    Parameters
      <empty list>
    PsiElement(:)(':')
    PsiWhiteSpace(' ')
    SimpleType: Unit
      CodeReferenceElement: Unit
        PsiElement(identifier)('Unit')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    BlockExpression
      PsiWhiteSpace('\n  ')
      ScPatternDefinition: a
        AnnotationsList
          <empty list>
        Modifiers
          <empty list>
        PsiElement(val)('val')
        PsiWhiteSpace(' ')
        ListOfPatterns
          ReferencePattern: a
            PsiElement(identifier)('a')
        PsiElement(:)(':')
        PsiWhiteSpace(' ')
        CompoundType: C { type X = Tuple1[Any] }
          SimpleType: C
            CodeReferenceElement: C
              PsiElement(identifier)('C')
          PsiWhiteSpace(' ')
          Refinement
            PsiElement({)('{')
            PsiWhiteSpace(' ')
            ScTypeAliasDefinition: X
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(type)('type')
              PsiWhiteSpace(' ')
              PsiElement(identifier)('X')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              ParametrizedType: Tuple1[Any]
                SimpleType: Tuple1
                  CodeReferenceElement: Tuple1
                    PsiElement(identifier)('Tuple1')
                TypeArgumentsList
                  PsiElement([)('[')
                  SimpleType: Any
                    CodeReferenceElement: Any
                      PsiElement(identifier)('Any')
                  PsiElement(])(']')
            PsiWhiteSpace(' ')
            PsiElement(})('}')
        PsiWhiteSpace(' ')
        PsiElement(=)('=')
        PsiWhiteSpace(' ')
        ReferenceExpression: ???
          PsiElement(identifier)('???')
      PsiWhiteSpace('\n  ')
      MethodCall
        ReferenceExpression: f
          PsiElement(identifier)('f')
        ArgumentList
          PsiElement(()('(')
          ReferenceExpression: a
            PsiElement(identifier)('a')
          PsiElement())(')')
  PsiWhiteSpace('\n\n')
  ScFunctionDefinition: f
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(inline)('inline')
    PsiWhiteSpace(' ')
    PsiElement(def)('def')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('f')
    Parameters
      ParametersClause
        PsiElement(()('(')
        Parameter: c
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(identifier)('c')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParameterType
            SimpleType: C
              CodeReferenceElement: C
                PsiElement(identifier)('C')
        PsiElement())(')')
    PsiElement(:)(':')
    PsiWhiteSpace(' ')
    SimpleType: Unit
      CodeReferenceElement: Unit
        PsiElement(identifier)('Unit')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    BlockExpression
      PsiElement({)('{')
      PsiWhiteSpace('\n  ')
      ScPatternDefinition: size
        AnnotationsList
          <empty list>
        Modifiers
          PsiElement(inline)('inline')
        PsiWhiteSpace(' ')
        PsiElement(val)('val')
        PsiWhiteSpace(' ')
        ListOfPatterns
          ReferencePattern: size
            PsiElement(identifier)('size')
        PsiWhiteSpace(' ')
        PsiElement(=)('=')
        PsiWhiteSpace(' ')
        GenericCall
          ReferenceExpression: constValue
            PsiElement(identifier)('constValue')
          TypeArgumentsList
            PsiElement([)('[')
            ParametrizedType: Tuple.Size[c.X]
              SimpleType: Tuple.Size
                CodeReferenceElement: Tuple.Size
                  CodeReferenceElement: Tuple
                    PsiElement(identifier)('Tuple')
                  PsiElement(.)('.')
                  PsiElement(identifier)('Size')
              TypeArgumentsList
                PsiElement([)('[')
                SimpleType: c.X
                  CodeReferenceElement: c.X
                    CodeReferenceElement: c
                      PsiElement(identifier)('c')
                    PsiElement(.)('.')
                    PsiElement(identifier)('X')
                PsiElement(])(']')
            PsiElement(])(']')
      PsiWhiteSpace('\n  ')
      ScPatternDefinition: n
        AnnotationsList
          <empty list>
        Modifiers
          <empty list>
        PsiElement(val)('val')
        PsiWhiteSpace(' ')
        ListOfPatterns
          ReferencePattern: n
            PsiElement(identifier)('n')
        PsiWhiteSpace(' ')
        PsiElement(=)('=')
        PsiWhiteSpace(' ')
        ReferenceExpression: size
          PsiElement(identifier)('size')
      PsiWhiteSpace('\n  ')
      ScPatternDefinition: m
        AnnotationsList
          <empty list>
        Modifiers
          <empty list>
        PsiElement(val)('val')
        PsiWhiteSpace(' ')
        ListOfPatterns
          ReferencePattern: m
            PsiElement(identifier)('m')
        PsiElement(:)(':')
        PsiWhiteSpace(' ')
        SimpleType: Int
          CodeReferenceElement: Int
            PsiElement(identifier)('Int')
        PsiWhiteSpace(' ')
        PsiElement(=)('=')
        PsiWhiteSpace(' ')
        ReferenceExpression: n
          PsiElement(identifier)('n')
      PsiWhiteSpace('\n  ')
      ReferenceExpression: ???
        PsiElement(identifier)('???')
      PsiWhiteSpace('\n')
      PsiElement(})('}')
