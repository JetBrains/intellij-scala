import scala.annotation.targetName

trait Foo {
  @targetName("intersection")
  def *(other: Foo): Foo
}

@main def Test() = {
  val s: Foo = ???
  s * s
  s * s
  s * s
}
-----
ScalaFile
  ScImportStatement
    PsiElement(import)('import')
    PsiWhiteSpace(' ')
    ImportExpression
      CodeReferenceElement: scala.annotation.targetName
        CodeReferenceElement: scala.annotation
          CodeReferenceElement: scala
            PsiElement(identifier)('scala')
          PsiElement(.)('.')
          PsiElement(identifier)('annotation')
        PsiElement(.)('.')
        PsiElement(identifier)('targetName')
  PsiWhiteSpace('\n\n')
  ScTrait: Foo
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Foo')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDeclaration: *
          AnnotationsList
            Annotation
              PsiElement(@)('@')
              AnnotationExpression
                ConstructorInvocation
                  SimpleType: targetName
                    CodeReferenceElement: targetName
                      PsiElement(identifier)('targetName')
                  ArgumentList
                    PsiElement(()('(')
                    StringLiteral
                      PsiElement(string content)('"intersection"')
                    PsiElement())(')')
          Modifiers
            <empty list>
          PsiWhiteSpace('\n  ')
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('*')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: other
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('other')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Foo
                    CodeReferenceElement: Foo
                      PsiElement(identifier)('Foo')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Foo
            CodeReferenceElement: Foo
              PsiElement(identifier)('Foo')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScFunctionDefinition: Test
    AnnotationsList
      Annotation
        PsiElement(@)('@')
        AnnotationExpression
          ConstructorInvocation
            SimpleType: main
              CodeReferenceElement: main
                PsiElement(identifier)('main')
    Modifiers
      <empty list>
    PsiWhiteSpace(' ')
    PsiElement(def)('def')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test')
    Parameters
      ParametersClause
        PsiElement(()('(')
        PsiElement())(')')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    BlockExpression
      PsiElement({)('{')
      PsiWhiteSpace('\n  ')
      ScPatternDefinition: s
        AnnotationsList
          <empty list>
        Modifiers
          <empty list>
        PsiElement(val)('val')
        PsiWhiteSpace(' ')
        ListOfPatterns
          ReferencePattern: s
            PsiElement(identifier)('s')
        PsiElement(:)(':')
        PsiWhiteSpace(' ')
        SimpleType: Foo
          CodeReferenceElement: Foo
            PsiElement(identifier)('Foo')
        PsiWhiteSpace(' ')
        PsiElement(=)('=')
        PsiWhiteSpace(' ')
        ReferenceExpression: ???
          PsiElement(identifier)('???')
      PsiWhiteSpace('\n  ')
      InfixExpression
        ReferenceExpression: s
          PsiElement(identifier)('s')
        PsiWhiteSpace(' ')
        ReferenceExpression: *
          PsiElement(identifier)('*')
        PsiWhiteSpace(' ')
        ReferenceExpression: s
          PsiElement(identifier)('s')
      PsiWhiteSpace('\n  ')
      InfixExpression
        ReferenceExpression: s
          PsiElement(identifier)('s')
        PsiWhiteSpace(' ')
        ReferenceExpression: *
          PsiElement(identifier)('*')
        PsiWhiteSpace(' ')
        ReferenceExpression: s
          PsiElement(identifier)('s')
      PsiWhiteSpace('\n  ')
      InfixExpression
        ReferenceExpression: s
          PsiElement(identifier)('s')
        PsiWhiteSpace(' ')
        ReferenceExpression: *
          PsiElement(identifier)('*')
        PsiWhiteSpace(' ')
        ReferenceExpression: s
          PsiElement(identifier)('s')
      PsiWhiteSpace('\n')
      PsiElement(})('}')
