case class Foo[F[_]](f: {def f(x: F[Int]): Object})
case class Bar[F[_], G[_]](f: [B] => F[B] => G[B])
-----
ScalaFile
  ScClass: Foo
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(case)('case')
    PsiWhiteSpace(' ')
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Foo')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: F
        PsiElement(identifier)('F')
        TypeParameterClause
          PsiElement([)('[')
          TypeParameter: _
            PsiElement(_)('_')
          PsiElement(])(']')
      PsiElement(])(']')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        ParametersClause
          PsiElement(()('(')
          ClassParameter: f
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(identifier)('f')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            ParameterType
              CompoundType: {def f(x: F[Int]): Object}
                Refinement
                  PsiElement({)('{')
                  ScFunctionDeclaration: f
                    AnnotationsList
                      <empty list>
                    Modifiers
                      <empty list>
                    PsiElement(def)('def')
                    PsiWhiteSpace(' ')
                    PsiElement(identifier)('f')
                    Parameters
                      ParametersClause
                        PsiElement(()('(')
                        Parameter: x
                          AnnotationsList
                            <empty list>
                          Modifiers
                            <empty list>
                          PsiElement(identifier)('x')
                          PsiElement(:)(':')
                          PsiWhiteSpace(' ')
                          ParameterType
                            ParametrizedType: F[Int]
                              SimpleType: F
                                CodeReferenceElement: F
                                  PsiElement(identifier)('F')
                              TypeArgumentsList
                                PsiElement([)('[')
                                SimpleType: Int
                                  CodeReferenceElement: Int
                                    PsiElement(identifier)('Int')
                                PsiElement(])(']')
                        PsiElement())(')')
                    PsiElement(:)(':')
                    PsiWhiteSpace(' ')
                    SimpleType: Object
                      CodeReferenceElement: Object
                        PsiElement(identifier)('Object')
                  PsiElement(})('}')
          PsiElement())(')')
    ExtendsBlock
      <empty list>
  PsiWhiteSpace('\n')
  ScClass: Bar
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(case)('case')
    PsiWhiteSpace(' ')
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Bar')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: F
        PsiElement(identifier)('F')
        TypeParameterClause
          PsiElement([)('[')
          TypeParameter: _
            PsiElement(_)('_')
          PsiElement(])(']')
      PsiElement(,)(',')
      PsiWhiteSpace(' ')
      TypeParameter: G
        PsiElement(identifier)('G')
        TypeParameterClause
          PsiElement([)('[')
          TypeParameter: _
            PsiElement(_)('_')
          PsiElement(])(']')
      PsiElement(])(']')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        ParametersClause
          PsiElement(()('(')
          ClassParameter: f
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(identifier)('f')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            ParameterType
              PolymorhicFunctionType: [B] => F[B] => G[B]
                TypeParameterClause
                  PsiElement([)('[')
                  TypeParameter: B
                    PsiElement(identifier)('B')
                  PsiElement(])(']')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                FunctionalType: F[B] => G[B]
                  ParametrizedType: F[B]
                    SimpleType: F
                      CodeReferenceElement: F
                        PsiElement(identifier)('F')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: B
                        CodeReferenceElement: B
                          PsiElement(identifier)('B')
                      PsiElement(])(']')
                  PsiWhiteSpace(' ')
                  PsiElement(=>)('=>')
                  PsiWhiteSpace(' ')
                  ParametrizedType: G[B]
                    SimpleType: G
                      CodeReferenceElement: G
                        PsiElement(identifier)('G')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: B
                        CodeReferenceElement: B
                          PsiElement(identifier)('B')
                      PsiElement(])(']')
          PsiElement())(')')
    ExtendsBlock
      <empty list>
