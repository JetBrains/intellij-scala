object Test {

  trait C { type M; val m: M }

  type DF = (x: C) => x.M
  val depfun1: DF = (x: C) => x.m
  val c = new C { type M = Int; val m = 0 }
  val y = depfun1(c)
  val y1: Int = y

  def depmeth(x: C) = x.m
  val depfun2 = depmeth
  val depfun3: DF = depfun2

  val d: C = c
  val z = depfun3(d)
  val z1: d.M = z

  // Reproduced here because the one from Predef is lacking a parameter dependency of the return type `ev.type`
  inline final def implicitly[T](implicit ev: T): ev.type = ev

  type IDF = (x: C) ?=> x.M

  implicit val ic: C = ???

  val ifun: IDF = implicitly[C].m

  val u = ifun(using c)
  val u1: Int = u

  val v = ifun(using d)
  val v1: d.M = v
}
-----
ScalaFile
  ScObject: Test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n\n  ')
        ScTrait: C
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(trait)('trait')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('C')
          PsiWhiteSpace(' ')
          ExtendsBlock
            ScTemplateBody
              PsiElement({)('{')
              PsiWhiteSpace(' ')
              ScTypeAliasDeclaration: M
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(type)('type')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('M')
              PsiElement(;)(';')
              PsiWhiteSpace(' ')
              ScValueDeclaration: m
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(val)('val')
                PsiWhiteSpace(' ')
                ListOfIdentifiers
                  Field identifier: m
                    PsiElement(identifier)('m')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                SimpleType: M
                  CodeReferenceElement: M
                    PsiElement(identifier)('M')
              PsiWhiteSpace(' ')
              PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        ScTypeAliasDefinition: DF
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('DF')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          DependentFunctionType: (x: C) => x.M
            ParametersClause
              PsiElement(()('(')
              Parameter: x
                PsiElement(identifier)('x')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                SimpleType: C
                  CodeReferenceElement: C
                    PsiElement(identifier)('C')
              PsiElement())(')')
            PsiWhiteSpace(' ')
            PsiElement(=>)('=>')
            PsiWhiteSpace(' ')
            SimpleType: x.M
              CodeReferenceElement: x.M
                CodeReferenceElement: x
                  PsiElement(identifier)('x')
                PsiElement(.)('.')
                PsiElement(identifier)('M')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: depfun1
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: depfun1
              PsiElement(identifier)('depfun1')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: DF
            CodeReferenceElement: DF
              PsiElement(identifier)('DF')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          FunctionExpression
            Parameters
              ParametersClause
                PsiElement(()('(')
                Parameter: x
                  AnnotationsList
                    <empty list>
                  PsiElement(identifier)('x')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    SimpleType: C
                      CodeReferenceElement: C
                        PsiElement(identifier)('C')
                PsiElement())(')')
            PsiWhiteSpace(' ')
            PsiElement(=>)('=>')
            PsiWhiteSpace(' ')
            ReferenceExpression: x.m
              ReferenceExpression: x
                PsiElement(identifier)('x')
              PsiElement(.)('.')
              PsiElement(identifier)('m')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: c
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: c
              PsiElement(identifier)('c')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ScNewTemplateDefinition: <anonymous>
            PsiElement(new)('new')
            PsiWhiteSpace(' ')
            ExtendsBlock
              TemplateParents
                ConstructorInvocation
                  SimpleType: C
                    CodeReferenceElement: C
                      PsiElement(identifier)('C')
              PsiWhiteSpace(' ')
              ScTemplateBody
                PsiElement({)('{')
                PsiWhiteSpace(' ')
                ScTypeAliasDefinition: M
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(type)('type')
                  PsiWhiteSpace(' ')
                  PsiElement(identifier)('M')
                  PsiWhiteSpace(' ')
                  PsiElement(=)('=')
                  PsiWhiteSpace(' ')
                  SimpleType: Int
                    CodeReferenceElement: Int
                      PsiElement(identifier)('Int')
                PsiElement(;)(';')
                PsiWhiteSpace(' ')
                ScPatternDefinition: m
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(val)('val')
                  PsiWhiteSpace(' ')
                  ListOfPatterns
                    ReferencePattern: m
                      PsiElement(identifier)('m')
                  PsiWhiteSpace(' ')
                  PsiElement(=)('=')
                  PsiWhiteSpace(' ')
                  IntegerLiteral
                    PsiElement(integer)('0')
                PsiWhiteSpace(' ')
                PsiElement(})('}')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: y
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: y
              PsiElement(identifier)('y')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: depfun1
              PsiElement(identifier)('depfun1')
            ArgumentList
              PsiElement(()('(')
              ReferenceExpression: c
                PsiElement(identifier)('c')
              PsiElement())(')')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: y1
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: y1
              PsiElement(identifier)('y1')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Int
            CodeReferenceElement: Int
              PsiElement(identifier)('Int')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: y
            PsiElement(identifier)('y')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: depmeth
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('depmeth')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: x
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: C
                    CodeReferenceElement: C
                      PsiElement(identifier)('C')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: x.m
            ReferenceExpression: x
              PsiElement(identifier)('x')
            PsiElement(.)('.')
            PsiElement(identifier)('m')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: depfun2
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: depfun2
              PsiElement(identifier)('depfun2')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: depmeth
            PsiElement(identifier)('depmeth')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: depfun3
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: depfun3
              PsiElement(identifier)('depfun3')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: DF
            CodeReferenceElement: DF
              PsiElement(identifier)('DF')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: depfun2
            PsiElement(identifier)('depfun2')
        PsiWhiteSpace('\n\n  ')
        ScPatternDefinition: d
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: d
              PsiElement(identifier)('d')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: C
            CodeReferenceElement: C
              PsiElement(identifier)('C')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: c
            PsiElement(identifier)('c')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: z
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: z
              PsiElement(identifier)('z')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: depfun3
              PsiElement(identifier)('depfun3')
            ArgumentList
              PsiElement(()('(')
              ReferenceExpression: d
                PsiElement(identifier)('d')
              PsiElement())(')')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: z1
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: z1
              PsiElement(identifier)('z1')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: d.M
            CodeReferenceElement: d.M
              CodeReferenceElement: d
                PsiElement(identifier)('d')
              PsiElement(.)('.')
              PsiElement(identifier)('M')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: z
            PsiElement(identifier)('z')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: implicitly
          PsiComment(comment)('// Reproduced here because the one from Predef is lacking a parameter dependency of the return type `ev.type`')
          PsiWhiteSpace('\n  ')
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(inline)('inline')
            PsiWhiteSpace(' ')
            PsiElement(final)('final')
          PsiWhiteSpace(' ')
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('implicitly')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: T
              PsiElement(identifier)('T')
            PsiElement(])(']')
          Parameters
            ParametersClause
              PsiElement(()('(')
              PsiElement(implicit)('implicit')
              PsiWhiteSpace(' ')
              Parameter: ev
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('ev')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: T
                    CodeReferenceElement: T
                      PsiElement(identifier)('T')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: ev.type
            CodeReferenceElement: ev
              PsiElement(identifier)('ev')
            PsiElement(.)('.')
            PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: ev
            PsiElement(identifier)('ev')
        PsiWhiteSpace('\n\n  ')
        ScTypeAliasDefinition: IDF
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('IDF')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          DependentFunctionType: (x: C) ?=> x.M
            ParametersClause
              PsiElement(()('(')
              Parameter: x
                PsiElement(identifier)('x')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                SimpleType: C
                  CodeReferenceElement: C
                    PsiElement(identifier)('C')
              PsiElement())(')')
            PsiWhiteSpace(' ')
            PsiElement(?=>)('?=>')
            PsiWhiteSpace(' ')
            SimpleType: x.M
              CodeReferenceElement: x.M
                CodeReferenceElement: x
                  PsiElement(identifier)('x')
                PsiElement(.)('.')
                PsiElement(identifier)('M')
        PsiWhiteSpace('\n\n  ')
        ScPatternDefinition: ic
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(implicit)('implicit')
          PsiWhiteSpace(' ')
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: ic
              PsiElement(identifier)('ic')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: C
            CodeReferenceElement: C
              PsiElement(identifier)('C')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: ???
            PsiElement(identifier)('???')
        PsiWhiteSpace('\n\n  ')
        ScPatternDefinition: ifun
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: ifun
              PsiElement(identifier)('ifun')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: IDF
            CodeReferenceElement: IDF
              PsiElement(identifier)('IDF')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: implicitly[C].m
            GenericCall
              ReferenceExpression: implicitly
                PsiElement(identifier)('implicitly')
              TypeArgumentsList
                PsiElement([)('[')
                SimpleType: C
                  CodeReferenceElement: C
                    PsiElement(identifier)('C')
                PsiElement(])(']')
            PsiElement(.)('.')
            PsiElement(identifier)('m')
        PsiWhiteSpace('\n\n  ')
        ScPatternDefinition: u
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: u
              PsiElement(identifier)('u')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: ifun
              PsiElement(identifier)('ifun')
            ArgumentList
              PsiElement(()('(')
              PsiElement(using)('using')
              PsiWhiteSpace(' ')
              ReferenceExpression: c
                PsiElement(identifier)('c')
              PsiElement())(')')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: u1
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: u1
              PsiElement(identifier)('u1')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Int
            CodeReferenceElement: Int
              PsiElement(identifier)('Int')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: u
            PsiElement(identifier)('u')
        PsiWhiteSpace('\n\n  ')
        ScPatternDefinition: v
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: v
              PsiElement(identifier)('v')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: ifun
              PsiElement(identifier)('ifun')
            ArgumentList
              PsiElement(()('(')
              PsiElement(using)('using')
              PsiWhiteSpace(' ')
              ReferenceExpression: d
                PsiElement(identifier)('d')
              PsiElement())(')')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: v1
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: v1
              PsiElement(identifier)('v1')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: d.M
            CodeReferenceElement: d.M
              CodeReferenceElement: d
                PsiElement(identifier)('d')
              PsiElement(.)('.')
              PsiElement(identifier)('M')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: v
            PsiElement(identifier)('v')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
