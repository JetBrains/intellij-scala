trait IO[E] {
  def map[B](f: Any => B): IO[E] = ???
  def flatMap[C](f: Any => IO[C]): IO[E | C] = ???
}

class Test {
  def test: Unit = {
    val a: IO[Nothing] = ???

    val d = a.flatMap(y => a.flatMap(z => a.map(_ => z)))
  }
}
-----
ScalaFile
  ScTrait: IO
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('IO')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: E
        PsiElement(identifier)('E')
      PsiElement(])(']')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: map
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('map')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: B
              PsiElement(identifier)('B')
            PsiElement(])(']')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: f
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('f')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  FunctionalType: Any => B
                    SimpleType: Any
                      CodeReferenceElement: Any
                        PsiElement(identifier)('Any')
                    PsiWhiteSpace(' ')
                    PsiElement(=>)('=>')
                    PsiWhiteSpace(' ')
                    SimpleType: B
                      CodeReferenceElement: B
                        PsiElement(identifier)('B')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: IO[E]
            SimpleType: IO
              CodeReferenceElement: IO
                PsiElement(identifier)('IO')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: E
                CodeReferenceElement: E
                  PsiElement(identifier)('E')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: ???
            PsiElement(identifier)('???')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: flatMap
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('flatMap')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: C
              PsiElement(identifier)('C')
            PsiElement(])(']')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: f
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('f')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  FunctionalType: Any => IO[C]
                    SimpleType: Any
                      CodeReferenceElement: Any
                        PsiElement(identifier)('Any')
                    PsiWhiteSpace(' ')
                    PsiElement(=>)('=>')
                    PsiWhiteSpace(' ')
                    ParametrizedType: IO[C]
                      SimpleType: IO
                        CodeReferenceElement: IO
                          PsiElement(identifier)('IO')
                      TypeArgumentsList
                        PsiElement([)('[')
                        SimpleType: C
                          CodeReferenceElement: C
                            PsiElement(identifier)('C')
                        PsiElement(])(']')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: IO[E | C]
            SimpleType: IO
              CodeReferenceElement: IO
                PsiElement(identifier)('IO')
            TypeArgumentsList
              PsiElement([)('[')
              InfixType: E | C
                SimpleType: E
                  CodeReferenceElement: E
                    PsiElement(identifier)('E')
                PsiWhiteSpace(' ')
                CodeReferenceElement: |
                  PsiElement(identifier)('|')
                PsiWhiteSpace(' ')
                SimpleType: C
                  CodeReferenceElement: C
                    PsiElement(identifier)('C')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: ???
            PsiElement(identifier)('???')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScClass: Test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: test
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('test')
          Parameters
            <empty list>
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Unit
            CodeReferenceElement: Unit
              PsiElement(identifier)('Unit')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          BlockExpression
            PsiElement({)('{')
            PsiWhiteSpace('\n    ')
            ScPatternDefinition: a
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              ListOfPatterns
                ReferencePattern: a
                  PsiElement(identifier)('a')
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              ParametrizedType: IO[Nothing]
                SimpleType: IO
                  CodeReferenceElement: IO
                    PsiElement(identifier)('IO')
                TypeArgumentsList
                  PsiElement([)('[')
                  SimpleType: Nothing
                    CodeReferenceElement: Nothing
                      PsiElement(identifier)('Nothing')
                  PsiElement(])(']')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              ReferenceExpression: ???
                PsiElement(identifier)('???')
            PsiWhiteSpace('\n\n    ')
            ScPatternDefinition: d
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              ListOfPatterns
                ReferencePattern: d
                  PsiElement(identifier)('d')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              MethodCall
                ReferenceExpression: a.flatMap
                  ReferenceExpression: a
                    PsiElement(identifier)('a')
                  PsiElement(.)('.')
                  PsiElement(identifier)('flatMap')
                ArgumentList
                  PsiElement(()('(')
                  FunctionExpression
                    Parameters
                      ParametersClause
                        Parameter: y
                          PsiElement(identifier)('y')
                    PsiWhiteSpace(' ')
                    PsiElement(=>)('=>')
                    PsiWhiteSpace(' ')
                    MethodCall
                      ReferenceExpression: a.flatMap
                        ReferenceExpression: a
                          PsiElement(identifier)('a')
                        PsiElement(.)('.')
                        PsiElement(identifier)('flatMap')
                      ArgumentList
                        PsiElement(()('(')
                        FunctionExpression
                          Parameters
                            ParametersClause
                              Parameter: z
                                PsiElement(identifier)('z')
                          PsiWhiteSpace(' ')
                          PsiElement(=>)('=>')
                          PsiWhiteSpace(' ')
                          MethodCall
                            ReferenceExpression: a.map
                              ReferenceExpression: a
                                PsiElement(identifier)('a')
                              PsiElement(.)('.')
                              PsiElement(identifier)('map')
                            ArgumentList
                              PsiElement(()('(')
                              FunctionExpression
                                Parameters
                                  ParametersClause
                                    Parameter: _
                                      PsiElement(_)('_')
                                PsiWhiteSpace(' ')
                                PsiElement(=>)('=>')
                                PsiWhiteSpace(' ')
                                ReferenceExpression: z
                                  PsiElement(identifier)('z')
                              PsiElement())(')')
                        PsiElement())(')')
                  PsiElement())(')')
            PsiWhiteSpace('\n  ')
            PsiElement(})('}')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
