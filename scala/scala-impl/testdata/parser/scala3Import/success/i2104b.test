case class Pair[A, B](_1: A, _2: B)

trait Cons[+H, +T]

object Cons {
  def apply[H, T](h: H, t: T): Cons[H, T] = ???
  def unapply[H, T](t: Cons[H, T]): Option[Pair[H, T]] = ???
}

object Test {
  def main(args: Array[String]): Unit = {
    Cons(Option(1), None) match {
      case Cons(Some(i), None) =>
    }
  }
}
-----
ScalaFile
  ScClass: Pair
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(case)('case')
    PsiWhiteSpace(' ')
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Pair')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: A
        PsiElement(identifier)('A')
      PsiElement(,)(',')
      PsiWhiteSpace(' ')
      TypeParameter: B
        PsiElement(identifier)('B')
      PsiElement(])(']')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        ParametersClause
          PsiElement(()('(')
          ClassParameter: _1
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(identifier)('_1')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            ParameterType
              SimpleType: A
                CodeReferenceElement: A
                  PsiElement(identifier)('A')
          PsiElement(,)(',')
          PsiWhiteSpace(' ')
          ClassParameter: _2
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(identifier)('_2')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            ParameterType
              SimpleType: B
                CodeReferenceElement: B
                  PsiElement(identifier)('B')
          PsiElement())(')')
    ExtendsBlock
      <empty list>
  PsiWhiteSpace('\n\n')
  ScTrait: Cons
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Cons')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: H
        PsiElement(identifier)('+')
        PsiElement(identifier)('H')
      PsiElement(,)(',')
      PsiWhiteSpace(' ')
      TypeParameter: T
        PsiElement(identifier)('+')
        PsiElement(identifier)('T')
      PsiElement(])(']')
    ExtendsBlock
      <empty list>
  PsiWhiteSpace('\n\n')
  ScObject: Cons
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Cons')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: apply
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('apply')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: H
              PsiElement(identifier)('H')
            PsiElement(,)(',')
            PsiWhiteSpace(' ')
            TypeParameter: T
              PsiElement(identifier)('T')
            PsiElement(])(']')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: h
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('h')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: H
                    CodeReferenceElement: H
                      PsiElement(identifier)('H')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              Parameter: t
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('t')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: T
                    CodeReferenceElement: T
                      PsiElement(identifier)('T')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: Cons[H, T]
            SimpleType: Cons
              CodeReferenceElement: Cons
                PsiElement(identifier)('Cons')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: H
                CodeReferenceElement: H
                  PsiElement(identifier)('H')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              SimpleType: T
                CodeReferenceElement: T
                  PsiElement(identifier)('T')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: ???
            PsiElement(identifier)('???')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: unapply
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('unapply')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: H
              PsiElement(identifier)('H')
            PsiElement(,)(',')
            PsiWhiteSpace(' ')
            TypeParameter: T
              PsiElement(identifier)('T')
            PsiElement(])(']')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: t
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('t')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  ParametrizedType: Cons[H, T]
                    SimpleType: Cons
                      CodeReferenceElement: Cons
                        PsiElement(identifier)('Cons')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: H
                        CodeReferenceElement: H
                          PsiElement(identifier)('H')
                      PsiElement(,)(',')
                      PsiWhiteSpace(' ')
                      SimpleType: T
                        CodeReferenceElement: T
                          PsiElement(identifier)('T')
                      PsiElement(])(']')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: Option[Pair[H, T]]
            SimpleType: Option
              CodeReferenceElement: Option
                PsiElement(identifier)('Option')
            TypeArgumentsList
              PsiElement([)('[')
              ParametrizedType: Pair[H, T]
                SimpleType: Pair
                  CodeReferenceElement: Pair
                    PsiElement(identifier)('Pair')
                TypeArgumentsList
                  PsiElement([)('[')
                  SimpleType: H
                    CodeReferenceElement: H
                      PsiElement(identifier)('H')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  SimpleType: T
                    CodeReferenceElement: T
                      PsiElement(identifier)('T')
                  PsiElement(])(']')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: ???
            PsiElement(identifier)('???')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScObject: Test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: main
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('main')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: args
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('args')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  ParametrizedType: Array[String]
                    SimpleType: Array
                      CodeReferenceElement: Array
                        PsiElement(identifier)('Array')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: String
                        CodeReferenceElement: String
                          PsiElement(identifier)('String')
                      PsiElement(])(']')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Unit
            CodeReferenceElement: Unit
              PsiElement(identifier)('Unit')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          BlockExpression
            PsiElement({)('{')
            PsiWhiteSpace('\n    ')
            MatchStatement
              MethodCall
                ReferenceExpression: Cons
                  PsiElement(identifier)('Cons')
                ArgumentList
                  PsiElement(()('(')
                  MethodCall
                    ReferenceExpression: Option
                      PsiElement(identifier)('Option')
                    ArgumentList
                      PsiElement(()('(')
                      IntegerLiteral
                        PsiElement(integer)('1')
                      PsiElement())(')')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: None
                    PsiElement(identifier)('None')
                  PsiElement())(')')
              PsiWhiteSpace(' ')
              PsiElement(match)('match')
              PsiWhiteSpace(' ')
              PsiElement({)('{')
              PsiWhiteSpace('\n      ')
              CaseClauses
                CaseClause
                  PsiElement(case)('case')
                  PsiWhiteSpace(' ')
                  ConstructorPattern
                    CodeReferenceElement: Cons
                      PsiElement(identifier)('Cons')
                    Pattern Argument List
                      PsiElement(()('(')
                      ConstructorPattern
                        CodeReferenceElement: Some
                          PsiElement(identifier)('Some')
                        Pattern Argument List
                          PsiElement(()('(')
                          ReferencePattern: i
                            PsiElement(identifier)('i')
                          PsiElement())(')')
                      PsiElement(,)(',')
                      PsiWhiteSpace(' ')
                      StableElementPattern
                        ReferenceExpression: None
                          PsiElement(identifier)('None')
                      PsiElement())(')')
                  PsiWhiteSpace(' ')
                  PsiElement(=>)('=>')
                  BlockOfExpressions
                    <empty list>
              PsiWhiteSpace('\n    ')
              PsiElement(})('}')
            PsiWhiteSpace('\n  ')
            PsiElement(})('}')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
