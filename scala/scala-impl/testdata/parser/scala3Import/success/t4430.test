class Crash {
  def S(op: => Double) = 0
  def A(a: Int, b: Int) = 0

  val t = 0

  val q = A(
    b = S { val xxx = t ; 42 },
    a = 0
  )
}
-----
ScalaFile
  ScClass: Crash
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Crash')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: S
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('S')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: op
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('op')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  PsiElement(=>)('=>')
                  PsiWhiteSpace(' ')
                  SimpleType: Double
                    CodeReferenceElement: Double
                      PsiElement(identifier)('Double')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          IntegerLiteral
            PsiElement(integer)('0')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: A
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('A')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: a
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('a')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Int
                    CodeReferenceElement: Int
                      PsiElement(identifier)('Int')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              Parameter: b
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('b')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Int
                    CodeReferenceElement: Int
                      PsiElement(identifier)('Int')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          IntegerLiteral
            PsiElement(integer)('0')
        PsiWhiteSpace('\n\n  ')
        ScPatternDefinition: t
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: t
              PsiElement(identifier)('t')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          IntegerLiteral
            PsiElement(integer)('0')
        PsiWhiteSpace('\n\n  ')
        ScPatternDefinition: q
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: q
              PsiElement(identifier)('q')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: A
              PsiElement(identifier)('A')
            ArgumentList
              PsiElement(()('(')
              PsiWhiteSpace('\n    ')
              AssignStatement
                ReferenceExpression: b
                  PsiElement(identifier)('b')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                MethodCall
                  ReferenceExpression: S
                    PsiElement(identifier)('S')
                  PsiWhiteSpace(' ')
                  ArgumentList
                    BlockExpression
                      PsiElement({)('{')
                      PsiWhiteSpace(' ')
                      ScPatternDefinition: xxx
                        AnnotationsList
                          <empty list>
                        Modifiers
                          <empty list>
                        PsiElement(val)('val')
                        PsiWhiteSpace(' ')
                        ListOfPatterns
                          ReferencePattern: xxx
                            PsiElement(identifier)('xxx')
                        PsiWhiteSpace(' ')
                        PsiElement(=)('=')
                        PsiWhiteSpace(' ')
                        ReferenceExpression: t
                          PsiElement(identifier)('t')
                      PsiWhiteSpace(' ')
                      PsiElement(;)(';')
                      PsiWhiteSpace(' ')
                      IntegerLiteral
                        PsiElement(integer)('42')
                      PsiWhiteSpace(' ')
                      PsiElement(})('}')
              PsiElement(,)(',')
              PsiWhiteSpace('\n    ')
              AssignStatement
                ReferenceExpression: a
                  PsiElement(identifier)('a')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                IntegerLiteral
                  PsiElement(integer)('0')
              PsiWhiteSpace('\n  ')
              PsiElement())(')')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
