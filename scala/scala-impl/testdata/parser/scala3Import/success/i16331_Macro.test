import scala.quoted._
object Macro:
  transparent inline def macroDef[A](): Int = ${ macroDefImpl() }
  def macroDefImpl()(using q: Quotes): Expr[Int] = '{0}
-----
ScalaFile
  ScImportStatement
    PsiElement(import)('import')
    PsiWhiteSpace(' ')
    ImportExpression
      CodeReferenceElement: scala.quoted
        CodeReferenceElement: scala
          PsiElement(identifier)('scala')
        PsiElement(.)('.')
        PsiElement(identifier)('quoted')
      PsiElement(.)('.')
      PsiElement(_)('_')
  PsiWhiteSpace('\n')
  ScObject: Macro
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Macro')
    ExtendsBlock
      ScTemplateBody
        PsiElement(:)(':')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: macroDef
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(transparent)('transparent')
            PsiWhiteSpace(' ')
            PsiElement(inline)('inline')
          PsiWhiteSpace(' ')
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('macroDef')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: A
              PsiElement(identifier)('A')
            PsiElement(])(']')
          Parameters
            ParametersClause
              PsiElement(()('(')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Int
            CodeReferenceElement: Int
              PsiElement(identifier)('Int')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          SplicedBlock
            PsiElement($)('$')
            PsiElement({)('{')
            PsiWhiteSpace(' ')
            MethodCall
              ReferenceExpression: macroDefImpl
                PsiElement(identifier)('macroDefImpl')
              ArgumentList
                PsiElement(()('(')
                PsiElement())(')')
            PsiWhiteSpace(' ')
            PsiElement(})('}')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: macroDefImpl
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('macroDefImpl')
          Parameters
            ParametersClause
              PsiElement(()('(')
              PsiElement())(')')
            ParametersClause
              PsiElement(()('(')
              PsiElement(using)('using')
              PsiWhiteSpace(' ')
              Parameter: q
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('q')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Quotes
                    CodeReferenceElement: Quotes
                      PsiElement(identifier)('Quotes')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: Expr[Int]
            SimpleType: Expr
              CodeReferenceElement: Expr
                PsiElement(identifier)('Expr')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: Int
                CodeReferenceElement: Int
                  PsiElement(identifier)('Int')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          QuotedBlock
            PsiElement(')(''')
            PsiElement({)('{')
            IntegerLiteral
              PsiElement(integer)('0')
            PsiElement(})('}')
