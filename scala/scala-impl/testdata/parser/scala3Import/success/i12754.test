transparent inline def transform(inline a: Any): Any = inline a match {
  case x: Byte   => x
  case x: Short  => x
  case x: Int    => x
  case x: Long   => x
  case x: Float  => x
  case x: Double => x
  case _         => a
}

def test = {
  println(transform(0) < 5)
}
-----
ScalaFile
  ScFunctionDefinition: transform
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(transparent)('transparent')
      PsiWhiteSpace(' ')
      PsiElement(inline)('inline')
    PsiWhiteSpace(' ')
    PsiElement(def)('def')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('transform')
    Parameters
      ParametersClause
        PsiElement(()('(')
        Parameter: a
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(inline)('inline')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('a')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParameterType
            SimpleType: Any
              CodeReferenceElement: Any
                PsiElement(identifier)('Any')
        PsiElement())(')')
    PsiElement(:)(':')
    PsiWhiteSpace(' ')
    SimpleType: Any
      CodeReferenceElement: Any
        PsiElement(identifier)('Any')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    MatchStatement
      PsiElement(inline)('inline')
      PsiWhiteSpace(' ')
      ReferenceExpression: a
        PsiElement(identifier)('a')
      PsiWhiteSpace(' ')
      PsiElement(match)('match')
      PsiWhiteSpace(' ')
      PsiElement({)('{')
      PsiWhiteSpace('\n  ')
      CaseClauses
        CaseClause
          PsiElement(case)('case')
          PsiWhiteSpace(' ')
          Scala3 TypedPattern
            ReferencePattern: x
              PsiElement(identifier)('x')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            TypePattern
              SimpleType: Byte
                CodeReferenceElement: Byte
                  PsiElement(identifier)('Byte')
          PsiWhiteSpace('   ')
          PsiElement(=>)('=>')
          PsiWhiteSpace(' ')
          BlockOfExpressions
            ReferenceExpression: x
              PsiElement(identifier)('x')
        PsiWhiteSpace('\n  ')
        CaseClause
          PsiElement(case)('case')
          PsiWhiteSpace(' ')
          Scala3 TypedPattern
            ReferencePattern: x
              PsiElement(identifier)('x')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            TypePattern
              SimpleType: Short
                CodeReferenceElement: Short
                  PsiElement(identifier)('Short')
          PsiWhiteSpace('  ')
          PsiElement(=>)('=>')
          PsiWhiteSpace(' ')
          BlockOfExpressions
            ReferenceExpression: x
              PsiElement(identifier)('x')
        PsiWhiteSpace('\n  ')
        CaseClause
          PsiElement(case)('case')
          PsiWhiteSpace(' ')
          Scala3 TypedPattern
            ReferencePattern: x
              PsiElement(identifier)('x')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            TypePattern
              SimpleType: Int
                CodeReferenceElement: Int
                  PsiElement(identifier)('Int')
          PsiWhiteSpace('    ')
          PsiElement(=>)('=>')
          PsiWhiteSpace(' ')
          BlockOfExpressions
            ReferenceExpression: x
              PsiElement(identifier)('x')
        PsiWhiteSpace('\n  ')
        CaseClause
          PsiElement(case)('case')
          PsiWhiteSpace(' ')
          Scala3 TypedPattern
            ReferencePattern: x
              PsiElement(identifier)('x')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            TypePattern
              SimpleType: Long
                CodeReferenceElement: Long
                  PsiElement(identifier)('Long')
          PsiWhiteSpace('   ')
          PsiElement(=>)('=>')
          PsiWhiteSpace(' ')
          BlockOfExpressions
            ReferenceExpression: x
              PsiElement(identifier)('x')
        PsiWhiteSpace('\n  ')
        CaseClause
          PsiElement(case)('case')
          PsiWhiteSpace(' ')
          Scala3 TypedPattern
            ReferencePattern: x
              PsiElement(identifier)('x')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            TypePattern
              SimpleType: Float
                CodeReferenceElement: Float
                  PsiElement(identifier)('Float')
          PsiWhiteSpace('  ')
          PsiElement(=>)('=>')
          PsiWhiteSpace(' ')
          BlockOfExpressions
            ReferenceExpression: x
              PsiElement(identifier)('x')
        PsiWhiteSpace('\n  ')
        CaseClause
          PsiElement(case)('case')
          PsiWhiteSpace(' ')
          Scala3 TypedPattern
            ReferencePattern: x
              PsiElement(identifier)('x')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            TypePattern
              SimpleType: Double
                CodeReferenceElement: Double
                  PsiElement(identifier)('Double')
          PsiWhiteSpace(' ')
          PsiElement(=>)('=>')
          PsiWhiteSpace(' ')
          BlockOfExpressions
            ReferenceExpression: x
              PsiElement(identifier)('x')
        PsiWhiteSpace('\n  ')
        CaseClause
          PsiElement(case)('case')
          PsiWhiteSpace(' ')
          WildcardPattern
            PsiElement(_)('_')
          PsiWhiteSpace('         ')
          PsiElement(=>)('=>')
          PsiWhiteSpace(' ')
          BlockOfExpressions
            ReferenceExpression: a
              PsiElement(identifier)('a')
      PsiWhiteSpace('\n')
      PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScFunctionDefinition: test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(def)('def')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('test')
    Parameters
      <empty list>
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    BlockExpression
      PsiElement({)('{')
      PsiWhiteSpace('\n  ')
      MethodCall
        ReferenceExpression: println
          PsiElement(identifier)('println')
        ArgumentList
          PsiElement(()('(')
          InfixExpression
            MethodCall
              ReferenceExpression: transform
                PsiElement(identifier)('transform')
              ArgumentList
                PsiElement(()('(')
                IntegerLiteral
                  PsiElement(integer)('0')
                PsiElement())(')')
            PsiWhiteSpace(' ')
            ReferenceExpression: <
              PsiElement(identifier)('<')
            PsiWhiteSpace(' ')
            IntegerLiteral
              PsiElement(integer)('5')
          PsiElement())(')')
      PsiWhiteSpace('\n')
      PsiElement(})('}')
