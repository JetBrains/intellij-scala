// Test is pending because we have no good way to test it.
// We need to: Compile Fork.java, and then compile Test.scala
// with Fork.class on the classpath.
@Fork(jvmArgs = Array("I'm", "hot"))
class Test
-----
ScalaFile
  ScClass: Test
    PsiComment(comment)('// Test is pending because we have no good way to test it.')
    PsiWhiteSpace('\n')
    PsiComment(comment)('// We need to: Compile Fork.java, and then compile Test.scala')
    PsiWhiteSpace('\n')
    PsiComment(comment)('// with Fork.class on the classpath.')
    PsiWhiteSpace('\n')
    AnnotationsList
      Annotation
        PsiElement(@)('@')
        AnnotationExpression
          ConstructorInvocation
            SimpleType: Fork
              CodeReferenceElement: Fork
                PsiElement(identifier)('Fork')
            ArgumentList
              PsiElement(()('(')
              AssignStatement
                ReferenceExpression: jvmArgs
                  PsiElement(identifier)('jvmArgs')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                MethodCall
                  ReferenceExpression: Array
                    PsiElement(identifier)('Array')
                  ArgumentList
                    PsiElement(()('(')
                    StringLiteral
                      PsiElement(string content)('"I'm"')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    StringLiteral
                      PsiElement(string content)('"hot"')
                    PsiElement())(')')
              PsiElement())(')')
    Modifiers
      <empty list>
    PsiWhiteSpace('\n')
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    ExtendsBlock
      <empty list>
