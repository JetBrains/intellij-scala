import language.`3.3`

object Test1:
  val xs = List(1, 2, 3)
  val ys = xs.map: x =>
    x + 1
  val ys1 = List(1) map: x =>
    x + 1
  val x = ys.foldLeft(0): (x, y) =>
    x + y
  val y = ys.foldLeft(0): (x: Int, y: Int) =>
    val z = x + y
    z * z
  val a: Int = xs
    .map: x =>
      x * x
    .filter: (y: Int) =>
      y > 0
    (0)
  val e = xs.map:
      case 1 => 2
      case 2 => 3
      case x => x
    .filter:
      x => x > 0

  extension (xs: List[Int]) def foo(f: [X] => X => X) = ()

  val p = xs.foo:
    [X] => (x: X) => x

  val q = (x: String => String) => x

  val r = x < 0 && locally:
    y > 0

-----
ScalaFile
  ScImportStatement
    PsiElement(import)('import')
    PsiWhiteSpace(' ')
    ImportExpression
      CodeReferenceElement: language.`3.3`
        CodeReferenceElement: language
          PsiElement(identifier)('language')
        PsiElement(.)('.')
        PsiElement(identifier)('`3.3`')
  PsiWhiteSpace('\n\n')
  ScObject: Test1
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test1')
    ExtendsBlock
      ScTemplateBody
        PsiElement(:)(':')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: xs
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: xs
              PsiElement(identifier)('xs')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: List
              PsiElement(identifier)('List')
            ArgumentList
              PsiElement(()('(')
              IntegerLiteral
                PsiElement(integer)('1')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              IntegerLiteral
                PsiElement(integer)('2')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              IntegerLiteral
                PsiElement(integer)('3')
              PsiElement())(')')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: ys
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: ys
              PsiElement(identifier)('ys')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: xs.map
              ReferenceExpression: xs
                PsiElement(identifier)('xs')
              PsiElement(.)('.')
              PsiElement(identifier)('map')
            ArgumentList
              BlockExpression
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                FunctionExpression
                  Parameters
                    ParametersClause
                      Parameter: x
                        PsiElement(identifier)('x')
                  PsiWhiteSpace(' ')
                  PsiElement(=>)('=>')
                  PsiWhiteSpace('\n    ')
                  BlockOfExpressions
                    InfixExpression
                      ReferenceExpression: x
                        PsiElement(identifier)('x')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: +
                        PsiElement(identifier)('+')
                      PsiWhiteSpace(' ')
                      IntegerLiteral
                        PsiElement(integer)('1')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: ys1
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: ys1
              PsiElement(identifier)('ys1')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          InfixExpression
            MethodCall
              ReferenceExpression: List
                PsiElement(identifier)('List')
              ArgumentList
                PsiElement(()('(')
                IntegerLiteral
                  PsiElement(integer)('1')
                PsiElement())(')')
            PsiWhiteSpace(' ')
            ReferenceExpression: map
              PsiElement(identifier)('map')
            BlockExpression
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              FunctionExpression
                Parameters
                  ParametersClause
                    Parameter: x
                      PsiElement(identifier)('x')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace('\n    ')
                BlockOfExpressions
                  InfixExpression
                    ReferenceExpression: x
                      PsiElement(identifier)('x')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: +
                      PsiElement(identifier)('+')
                    PsiWhiteSpace(' ')
                    IntegerLiteral
                      PsiElement(integer)('1')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: x
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: x
              PsiElement(identifier)('x')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            MethodCall
              ReferenceExpression: ys.foldLeft
                ReferenceExpression: ys
                  PsiElement(identifier)('ys')
                PsiElement(.)('.')
                PsiElement(identifier)('foldLeft')
              ArgumentList
                PsiElement(()('(')
                IntegerLiteral
                  PsiElement(integer)('0')
                PsiElement())(')')
            ArgumentList
              BlockExpression
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                FunctionExpression
                  Parameters
                    ParametersClause
                      PsiElement(()('(')
                      Parameter: x
                        AnnotationsList
                          <empty list>
                        PsiElement(identifier)('x')
                      PsiElement(,)(',')
                      PsiWhiteSpace(' ')
                      Parameter: y
                        AnnotationsList
                          <empty list>
                        PsiElement(identifier)('y')
                      PsiElement())(')')
                  PsiWhiteSpace(' ')
                  PsiElement(=>)('=>')
                  PsiWhiteSpace('\n    ')
                  BlockOfExpressions
                    InfixExpression
                      ReferenceExpression: x
                        PsiElement(identifier)('x')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: +
                        PsiElement(identifier)('+')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: y
                        PsiElement(identifier)('y')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: y
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: y
              PsiElement(identifier)('y')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            MethodCall
              ReferenceExpression: ys.foldLeft
                ReferenceExpression: ys
                  PsiElement(identifier)('ys')
                PsiElement(.)('.')
                PsiElement(identifier)('foldLeft')
              ArgumentList
                PsiElement(()('(')
                IntegerLiteral
                  PsiElement(integer)('0')
                PsiElement())(')')
            ArgumentList
              BlockExpression
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                FunctionExpression
                  Parameters
                    ParametersClause
                      PsiElement(()('(')
                      Parameter: x
                        AnnotationsList
                          <empty list>
                        PsiElement(identifier)('x')
                        PsiElement(:)(':')
                        PsiWhiteSpace(' ')
                        ParameterType
                          SimpleType: Int
                            CodeReferenceElement: Int
                              PsiElement(identifier)('Int')
                      PsiElement(,)(',')
                      PsiWhiteSpace(' ')
                      Parameter: y
                        AnnotationsList
                          <empty list>
                        PsiElement(identifier)('y')
                        PsiElement(:)(':')
                        PsiWhiteSpace(' ')
                        ParameterType
                          SimpleType: Int
                            CodeReferenceElement: Int
                              PsiElement(identifier)('Int')
                      PsiElement())(')')
                  PsiWhiteSpace(' ')
                  PsiElement(=>)('=>')
                  PsiWhiteSpace('\n    ')
                  BlockOfExpressions
                    ScPatternDefinition: z
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(val)('val')
                      PsiWhiteSpace(' ')
                      ListOfPatterns
                        ReferencePattern: z
                          PsiElement(identifier)('z')
                      PsiWhiteSpace(' ')
                      PsiElement(=)('=')
                      PsiWhiteSpace(' ')
                      InfixExpression
                        ReferenceExpression: x
                          PsiElement(identifier)('x')
                        PsiWhiteSpace(' ')
                        ReferenceExpression: +
                          PsiElement(identifier)('+')
                        PsiWhiteSpace(' ')
                        ReferenceExpression: y
                          PsiElement(identifier)('y')
                    PsiWhiteSpace('\n    ')
                    InfixExpression
                      ReferenceExpression: z
                        PsiElement(identifier)('z')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: *
                        PsiElement(identifier)('*')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: z
                        PsiElement(identifier)('z')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: a
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: a
              PsiElement(identifier)('a')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Int
            CodeReferenceElement: Int
              PsiElement(identifier)('Int')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            MethodCall
              ReferenceExpression: xs
    .map: x =>
      x * x
    .filter
                MethodCall
                  ReferenceExpression: xs
    .map
                    ReferenceExpression: xs
                      PsiElement(identifier)('xs')
                    PsiWhiteSpace('\n    ')
                    PsiElement(.)('.')
                    PsiElement(identifier)('map')
                  ArgumentList
                    BlockExpression
                      PsiElement(:)(':')
                      PsiWhiteSpace(' ')
                      FunctionExpression
                        Parameters
                          ParametersClause
                            Parameter: x
                              PsiElement(identifier)('x')
                        PsiWhiteSpace(' ')
                        PsiElement(=>)('=>')
                        PsiWhiteSpace('\n      ')
                        BlockOfExpressions
                          InfixExpression
                            ReferenceExpression: x
                              PsiElement(identifier)('x')
                            PsiWhiteSpace(' ')
                            ReferenceExpression: *
                              PsiElement(identifier)('*')
                            PsiWhiteSpace(' ')
                            ReferenceExpression: x
                              PsiElement(identifier)('x')
                PsiWhiteSpace('\n    ')
                PsiElement(.)('.')
                PsiElement(identifier)('filter')
              ArgumentList
                BlockExpression
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  FunctionExpression
                    Parameters
                      ParametersClause
                        PsiElement(()('(')
                        Parameter: y
                          AnnotationsList
                            <empty list>
                          PsiElement(identifier)('y')
                          PsiElement(:)(':')
                          PsiWhiteSpace(' ')
                          ParameterType
                            SimpleType: Int
                              CodeReferenceElement: Int
                                PsiElement(identifier)('Int')
                        PsiElement())(')')
                    PsiWhiteSpace(' ')
                    PsiElement(=>)('=>')
                    PsiWhiteSpace('\n      ')
                    BlockOfExpressions
                      InfixExpression
                        ReferenceExpression: y
                          PsiElement(identifier)('y')
                        PsiWhiteSpace(' ')
                        ReferenceExpression: >
                          PsiElement(identifier)('>')
                        PsiWhiteSpace(' ')
                        IntegerLiteral
                          PsiElement(integer)('0')
            PsiWhiteSpace('\n    ')
            ArgumentList
              PsiElement(()('(')
              IntegerLiteral
                PsiElement(integer)('0')
              PsiElement())(')')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: e
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: e
              PsiElement(identifier)('e')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: xs.map:
      case 1 => 2
      case 2 => 3
      case x => x
    .filter
              MethodCall
                ReferenceExpression: xs.map
                  ReferenceExpression: xs
                    PsiElement(identifier)('xs')
                  PsiElement(.)('.')
                  PsiElement(identifier)('map')
                ArgumentList
                  BlockExpression
                    PsiElement(:)(':')
                    PsiWhiteSpace('\n      ')
                    CaseClauses
                      CaseClause
                        PsiElement(case)('case')
                        PsiWhiteSpace(' ')
                        LiteralPattern
                          IntegerLiteral
                            PsiElement(integer)('1')
                        PsiWhiteSpace(' ')
                        PsiElement(=>)('=>')
                        PsiWhiteSpace(' ')
                        BlockOfExpressions
                          IntegerLiteral
                            PsiElement(integer)('2')
                      PsiWhiteSpace('\n      ')
                      CaseClause
                        PsiElement(case)('case')
                        PsiWhiteSpace(' ')
                        LiteralPattern
                          IntegerLiteral
                            PsiElement(integer)('2')
                        PsiWhiteSpace(' ')
                        PsiElement(=>)('=>')
                        PsiWhiteSpace(' ')
                        BlockOfExpressions
                          IntegerLiteral
                            PsiElement(integer)('3')
                      PsiWhiteSpace('\n      ')
                      CaseClause
                        PsiElement(case)('case')
                        PsiWhiteSpace(' ')
                        ReferencePattern: x
                          PsiElement(identifier)('x')
                        PsiWhiteSpace(' ')
                        PsiElement(=>)('=>')
                        PsiWhiteSpace(' ')
                        BlockOfExpressions
                          ReferenceExpression: x
                            PsiElement(identifier)('x')
              PsiWhiteSpace('\n    ')
              PsiElement(.)('.')
              PsiElement(identifier)('filter')
            ArgumentList
              BlockExpression
                PsiElement(:)(':')
                PsiWhiteSpace('\n      ')
                FunctionExpression
                  Parameters
                    ParametersClause
                      Parameter: x
                        PsiElement(identifier)('x')
                  PsiWhiteSpace(' ')
                  PsiElement(=>)('=>')
                  PsiWhiteSpace(' ')
                  BlockOfExpressions
                    InfixExpression
                      ReferenceExpression: x
                        PsiElement(identifier)('x')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: >
                        PsiElement(identifier)('>')
                      PsiWhiteSpace(' ')
                      IntegerLiteral
                        PsiElement(integer)('0')
        PsiWhiteSpace('\n\n  ')
        Extension on List[Int]
          PsiElement(extension)('extension')
          PsiWhiteSpace(' ')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: xs
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('xs')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  ParametrizedType: List[Int]
                    SimpleType: List
                      CodeReferenceElement: List
                        PsiElement(identifier)('List')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: Int
                        CodeReferenceElement: Int
                          PsiElement(identifier)('Int')
                      PsiElement(])(']')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          ScExtensionBody
            ScFunctionDefinition: foo
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(def)('def')
              PsiWhiteSpace(' ')
              PsiElement(identifier)('foo')
              Parameters
                ParametersClause
                  PsiElement(()('(')
                  Parameter: f
                    AnnotationsList
                      <empty list>
                    Modifiers
                      <empty list>
                    PsiElement(identifier)('f')
                    PsiElement(:)(':')
                    PsiWhiteSpace(' ')
                    ParameterType
                      PolymorhicFunctionType: [X] => X => X
                        TypeParameterClause
                          PsiElement([)('[')
                          TypeParameter: X
                            PsiElement(identifier)('X')
                          PsiElement(])(']')
                        PsiWhiteSpace(' ')
                        PsiElement(=>)('=>')
                        PsiWhiteSpace(' ')
                        FunctionalType: X => X
                          SimpleType: X
                            CodeReferenceElement: X
                              PsiElement(identifier)('X')
                          PsiWhiteSpace(' ')
                          PsiElement(=>)('=>')
                          PsiWhiteSpace(' ')
                          SimpleType: X
                            CodeReferenceElement: X
                              PsiElement(identifier)('X')
                  PsiElement())(')')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              UnitExpression
                PsiElement(()('(')
                PsiElement())(')')
        PsiWhiteSpace('\n\n  ')
        ScPatternDefinition: p
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: p
              PsiElement(identifier)('p')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: xs.foo
              ReferenceExpression: xs
                PsiElement(identifier)('xs')
              PsiElement(.)('.')
              PsiElement(identifier)('foo')
            ArgumentList
              BlockExpression
                PsiElement(:)(':')
                PsiWhiteSpace('\n    ')
                PolyFunctionExpression
                  TypeParameterClause
                    PsiElement([)('[')
                    TypeParameter: X
                      PsiElement(identifier)('X')
                    PsiElement(])(']')
                  PsiWhiteSpace(' ')
                  PsiElement(=>)('=>')
                  PsiWhiteSpace(' ')
                  FunctionExpression
                    Parameters
                      ParametersClause
                        PsiElement(()('(')
                        Parameter: x
                          AnnotationsList
                            <empty list>
                          PsiElement(identifier)('x')
                          PsiElement(:)(':')
                          PsiWhiteSpace(' ')
                          ParameterType
                            SimpleType: X
                              CodeReferenceElement: X
                                PsiElement(identifier)('X')
                        PsiElement())(')')
                    PsiWhiteSpace(' ')
                    PsiElement(=>)('=>')
                    PsiWhiteSpace(' ')
                    BlockOfExpressions
                      ReferenceExpression: x
                        PsiElement(identifier)('x')
        PsiWhiteSpace('\n\n  ')
        ScPatternDefinition: q
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: q
              PsiElement(identifier)('q')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          FunctionExpression
            Parameters
              ParametersClause
                PsiElement(()('(')
                Parameter: x
                  AnnotationsList
                    <empty list>
                  PsiElement(identifier)('x')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    FunctionalType: String => String
                      SimpleType: String
                        CodeReferenceElement: String
                          PsiElement(identifier)('String')
                      PsiWhiteSpace(' ')
                      PsiElement(=>)('=>')
                      PsiWhiteSpace(' ')
                      SimpleType: String
                        CodeReferenceElement: String
                          PsiElement(identifier)('String')
                PsiElement())(')')
            PsiWhiteSpace(' ')
            PsiElement(=>)('=>')
            PsiWhiteSpace(' ')
            ReferenceExpression: x
              PsiElement(identifier)('x')
        PsiWhiteSpace('\n\n  ')
        ScPatternDefinition: r
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: r
              PsiElement(identifier)('r')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          InfixExpression
            InfixExpression
              ReferenceExpression: x
                PsiElement(identifier)('x')
              PsiWhiteSpace(' ')
              ReferenceExpression: <
                PsiElement(identifier)('<')
              PsiWhiteSpace(' ')
              IntegerLiteral
                PsiElement(integer)('0')
            PsiWhiteSpace(' ')
            ReferenceExpression: &&
              PsiElement(identifier)('&&')
            PsiWhiteSpace(' ')
            MethodCall
              ReferenceExpression: locally
                PsiElement(identifier)('locally')
              ArgumentList
                BlockExpression
                  PsiElement(:)(':')
                  PsiWhiteSpace('\n    ')
                  InfixExpression
                    ReferenceExpression: y
                      PsiElement(identifier)('y')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: >
                      PsiElement(identifier)('>')
                    PsiWhiteSpace(' ')
                    IntegerLiteral
                      PsiElement(integer)('0')
