abstract class Foo[T] {
  type Species
  def foo(s: Species): Nothing = ???
}

class Test {
def species[T] = {
  class FooT extends Foo[T] {
    type Species = FooT
  }
  new FooT()
}
}
-----
ScalaFile
  ScClass: Foo
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(abstract)('abstract')
    PsiWhiteSpace(' ')
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Foo')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: T
        PsiElement(identifier)('T')
      PsiElement(])(']')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScTypeAliasDeclaration: Species
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Species')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: foo
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('foo')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: s
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('s')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Species
                    CodeReferenceElement: Species
                      PsiElement(identifier)('Species')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Nothing
            CodeReferenceElement: Nothing
              PsiElement(identifier)('Nothing')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: ???
            PsiElement(identifier)('???')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScClass: Test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n')
        ScFunctionDefinition: species
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('species')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: T
              PsiElement(identifier)('T')
            PsiElement(])(']')
          Parameters
            <empty list>
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          BlockExpression
            PsiElement({)('{')
            PsiWhiteSpace('\n  ')
            ScClass: FooT
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(class)('class')
              PsiWhiteSpace(' ')
              PsiElement(identifier)('FooT')
              PrimaryConstructor
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                Parameters
                  <empty list>
              PsiWhiteSpace(' ')
              ExtendsBlock
                PsiElement(extends)('extends')
                PsiWhiteSpace(' ')
                TemplateParents
                  ConstructorInvocation
                    ParametrizedType: Foo[T]
                      SimpleType: Foo
                        CodeReferenceElement: Foo
                          PsiElement(identifier)('Foo')
                      TypeArgumentsList
                        PsiElement([)('[')
                        SimpleType: T
                          CodeReferenceElement: T
                            PsiElement(identifier)('T')
                        PsiElement(])(']')
                PsiWhiteSpace(' ')
                ScTemplateBody
                  PsiElement({)('{')
                  PsiWhiteSpace('\n    ')
                  ScTypeAliasDefinition: Species
                    AnnotationsList
                      <empty list>
                    Modifiers
                      <empty list>
                    PsiElement(type)('type')
                    PsiWhiteSpace(' ')
                    PsiElement(identifier)('Species')
                    PsiWhiteSpace(' ')
                    PsiElement(=)('=')
                    PsiWhiteSpace(' ')
                    SimpleType: FooT
                      CodeReferenceElement: FooT
                        PsiElement(identifier)('FooT')
                  PsiWhiteSpace('\n  ')
                  PsiElement(})('}')
            PsiWhiteSpace('\n  ')
            ScNewTemplateDefinition: <anonymous>
              PsiElement(new)('new')
              PsiWhiteSpace(' ')
              ExtendsBlock
                TemplateParents
                  ConstructorInvocation
                    SimpleType: FooT
                      CodeReferenceElement: FooT
                        PsiElement(identifier)('FooT')
                    ArgumentList
                      PsiElement(()('(')
                      PsiElement())(')')
            PsiWhiteSpace('\n')
            PsiElement(})('}')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
