trait T1
trait T2 extends T1

trait Expr[T] { val data: T = ??? }
case class Tag2() extends Expr[T2]

def flag: Boolean = ???

def foo[T](e: Expr[T]): T1 = e match {
  case Tag2() =>
      if flag then
        new T2 {}
      else
        e.data
}

-----
ScalaFile
  ScTrait: T1
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('T1')
    ExtendsBlock
      <empty list>
  PsiWhiteSpace('\n')
  ScTrait: T2
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('T2')
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          SimpleType: T1
            CodeReferenceElement: T1
              PsiElement(identifier)('T1')
  PsiWhiteSpace('\n\n')
  ScTrait: Expr
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Expr')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: T
        PsiElement(identifier)('T')
      PsiElement(])(']')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace(' ')
        ScPatternDefinition: data
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: data
              PsiElement(identifier)('data')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: T
            CodeReferenceElement: T
              PsiElement(identifier)('T')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: ???
            PsiElement(identifier)('???')
        PsiWhiteSpace(' ')
        PsiElement(})('}')
  PsiWhiteSpace('\n')
  ScClass: Tag2
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(case)('case')
    PsiWhiteSpace(' ')
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Tag2')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        ParametersClause
          PsiElement(()('(')
          PsiElement())(')')
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          ParametrizedType: Expr[T2]
            SimpleType: Expr
              CodeReferenceElement: Expr
                PsiElement(identifier)('Expr')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: T2
                CodeReferenceElement: T2
                  PsiElement(identifier)('T2')
              PsiElement(])(']')
  PsiWhiteSpace('\n\n')
  ScFunctionDefinition: flag
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(def)('def')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('flag')
    Parameters
      <empty list>
    PsiElement(:)(':')
    PsiWhiteSpace(' ')
    SimpleType: Boolean
      CodeReferenceElement: Boolean
        PsiElement(identifier)('Boolean')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    ReferenceExpression: ???
      PsiElement(identifier)('???')
  PsiWhiteSpace('\n\n')
  ScFunctionDefinition: foo
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(def)('def')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('foo')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: T
        PsiElement(identifier)('T')
      PsiElement(])(']')
    Parameters
      ParametersClause
        PsiElement(()('(')
        Parameter: e
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(identifier)('e')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParameterType
            ParametrizedType: Expr[T]
              SimpleType: Expr
                CodeReferenceElement: Expr
                  PsiElement(identifier)('Expr')
              TypeArgumentsList
                PsiElement([)('[')
                SimpleType: T
                  CodeReferenceElement: T
                    PsiElement(identifier)('T')
                PsiElement(])(']')
        PsiElement())(')')
    PsiElement(:)(':')
    PsiWhiteSpace(' ')
    SimpleType: T1
      CodeReferenceElement: T1
        PsiElement(identifier)('T1')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    MatchStatement
      ReferenceExpression: e
        PsiElement(identifier)('e')
      PsiWhiteSpace(' ')
      PsiElement(match)('match')
      PsiWhiteSpace(' ')
      PsiElement({)('{')
      PsiWhiteSpace('\n  ')
      CaseClauses
        CaseClause
          PsiElement(case)('case')
          PsiWhiteSpace(' ')
          ConstructorPattern
            CodeReferenceElement: Tag2
              PsiElement(identifier)('Tag2')
            Pattern Argument List
              PsiElement(()('(')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(=>)('=>')
          PsiWhiteSpace('\n      ')
          BlockOfExpressions
            IfStatement
              PsiElement(if)('if')
              PsiWhiteSpace(' ')
              ReferenceExpression: flag
                PsiElement(identifier)('flag')
              PsiWhiteSpace(' ')
              PsiElement(then)('then')
              PsiWhiteSpace('\n        ')
              ScNewTemplateDefinition: <anonymous>
                PsiElement(new)('new')
                PsiWhiteSpace(' ')
                ExtendsBlock
                  TemplateParents
                    ConstructorInvocation
                      SimpleType: T2
                        CodeReferenceElement: T2
                          PsiElement(identifier)('T2')
                  PsiWhiteSpace(' ')
                  ScTemplateBody
                    PsiElement({)('{')
                    PsiElement(})('}')
              PsiWhiteSpace('\n      ')
              PsiElement(else)('else')
              PsiWhiteSpace('\n        ')
              ReferenceExpression: e.data
                ReferenceExpression: e
                  PsiElement(identifier)('e')
                PsiElement(.)('.')
                PsiElement(identifier)('data')
      PsiWhiteSpace('\n')
      PsiElement(})('}')
