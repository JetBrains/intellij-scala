class Foo {
  def foo(x: Any): Unit = {
    x match {
      case y: Bar[_] =>
        y.value match {
          case value: Bar[_] => // here x is an instance of Bar[Bar[_]]
          case _ =>
        }
    }
  }
}

class Bar[T] {
  def value: T = ???
}
-----
ScalaFile
  ScClass: Foo
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Foo')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: foo
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('foo')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: x
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Any
                    CodeReferenceElement: Any
                      PsiElement(identifier)('Any')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Unit
            CodeReferenceElement: Unit
              PsiElement(identifier)('Unit')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          BlockExpression
            PsiElement({)('{')
            PsiWhiteSpace('\n    ')
            MatchStatement
              ReferenceExpression: x
                PsiElement(identifier)('x')
              PsiWhiteSpace(' ')
              PsiElement(match)('match')
              PsiWhiteSpace(' ')
              PsiElement({)('{')
              PsiWhiteSpace('\n      ')
              CaseClauses
                CaseClause
                  PsiElement(case)('case')
                  PsiWhiteSpace(' ')
                  Scala3 TypedPattern
                    ReferencePattern: y
                      PsiElement(identifier)('y')
                    PsiElement(:)(':')
                    PsiWhiteSpace(' ')
                    TypePattern
                      ParametrizedType: Bar[_]
                        SimpleType: Bar
                          CodeReferenceElement: Bar
                            PsiElement(identifier)('Bar')
                        TypeArgumentsList
                          PsiElement([)('[')
                          TypeVariable: _
                            PsiElement(_)('_')
                          PsiElement(])(']')
                  PsiWhiteSpace(' ')
                  PsiElement(=>)('=>')
                  PsiWhiteSpace('\n        ')
                  BlockOfExpressions
                    MatchStatement
                      ReferenceExpression: y.value
                        ReferenceExpression: y
                          PsiElement(identifier)('y')
                        PsiElement(.)('.')
                        PsiElement(identifier)('value')
                      PsiWhiteSpace(' ')
                      PsiElement(match)('match')
                      PsiWhiteSpace(' ')
                      PsiElement({)('{')
                      PsiWhiteSpace('\n          ')
                      CaseClauses
                        CaseClause
                          PsiElement(case)('case')
                          PsiWhiteSpace(' ')
                          Scala3 TypedPattern
                            ReferencePattern: value
                              PsiElement(identifier)('value')
                            PsiElement(:)(':')
                            PsiWhiteSpace(' ')
                            TypePattern
                              ParametrizedType: Bar[_]
                                SimpleType: Bar
                                  CodeReferenceElement: Bar
                                    PsiElement(identifier)('Bar')
                                TypeArgumentsList
                                  PsiElement([)('[')
                                  TypeVariable: _
                                    PsiElement(_)('_')
                                  PsiElement(])(']')
                          PsiWhiteSpace(' ')
                          PsiElement(=>)('=>')
                          BlockOfExpressions
                            <empty list>
                        PsiWhiteSpace(' ')
                        PsiComment(comment)('// here x is an instance of Bar[Bar[_]]')
                        PsiWhiteSpace('\n          ')
                        CaseClause
                          PsiElement(case)('case')
                          PsiWhiteSpace(' ')
                          WildcardPattern
                            PsiElement(_)('_')
                          PsiWhiteSpace(' ')
                          PsiElement(=>)('=>')
                          BlockOfExpressions
                            <empty list>
                      PsiWhiteSpace('\n        ')
                      PsiElement(})('}')
              PsiWhiteSpace('\n    ')
              PsiElement(})('}')
            PsiWhiteSpace('\n  ')
            PsiElement(})('}')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScClass: Bar
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Bar')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: T
        PsiElement(identifier)('T')
      PsiElement(])(']')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: value
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('value')
          Parameters
            <empty list>
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: T
            CodeReferenceElement: T
              PsiElement(identifier)('T')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: ???
            PsiElement(identifier)('???')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
