trait Foo:
   def foo: String ?=> Int =
     summon[String].length

trait Bar extends Foo:
   override def foo =
      super.foo

class Baz extends Bar

@main def Test =
  given String = "hello"
  assert(Baz().foo == 5)
-----
ScalaFile
  ScTrait: Foo
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Foo')
    ExtendsBlock
      ScTemplateBody
        PsiElement(:)(':')
        PsiWhiteSpace('\n   ')
        ScFunctionDefinition: foo
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('foo')
          Parameters
            <empty list>
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          FunctionalType: String ?=> Int
            SimpleType: String
              CodeReferenceElement: String
                PsiElement(identifier)('String')
            PsiWhiteSpace(' ')
            PsiElement(?=>)('?=>')
            PsiWhiteSpace(' ')
            SimpleType: Int
              CodeReferenceElement: Int
                PsiElement(identifier)('Int')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace('\n     ')
          ReferenceExpression: summon[String].length
            GenericCall
              ReferenceExpression: summon
                PsiElement(identifier)('summon')
              TypeArgumentsList
                PsiElement([)('[')
                SimpleType: String
                  CodeReferenceElement: String
                    PsiElement(identifier)('String')
                PsiElement(])(']')
            PsiElement(.)('.')
            PsiElement(identifier)('length')
  PsiWhiteSpace('\n\n')
  ScTrait: Bar
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Bar')
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          SimpleType: Foo
            CodeReferenceElement: Foo
              PsiElement(identifier)('Foo')
      ScTemplateBody
        PsiElement(:)(':')
        PsiWhiteSpace('\n   ')
        ScFunctionDefinition: foo
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(override)('override')
          PsiWhiteSpace(' ')
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('foo')
          Parameters
            <empty list>
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace('\n      ')
          ReferenceExpression: super.foo
            SuperReference
              PsiElement(super)('super')
            PsiElement(.)('.')
            PsiElement(identifier)('foo')
  PsiWhiteSpace('\n\n')
  ScClass: Baz
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Baz')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          SimpleType: Bar
            CodeReferenceElement: Bar
              PsiElement(identifier)('Bar')
  PsiWhiteSpace('\n\n')
  ScFunctionDefinition: Test
    AnnotationsList
      Annotation
        PsiElement(@)('@')
        AnnotationExpression
          ConstructorInvocation
            SimpleType: main
              CodeReferenceElement: main
                PsiElement(identifier)('main')
    Modifiers
      <empty list>
    PsiWhiteSpace(' ')
    PsiElement(def)('def')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test')
    Parameters
      <empty list>
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    BlockExpression
      PsiWhiteSpace('\n  ')
      ScGivenAliasDefinition: given_String
        AnnotationsList
          <empty list>
        Modifiers
          <empty list>
        PsiElement(given)('given')
        PsiWhiteSpace(' ')
        SimpleType: String
          CodeReferenceElement: String
            PsiElement(identifier)('String')
        Parameters
          <empty list>
        PsiWhiteSpace(' ')
        PsiElement(=)('=')
        PsiWhiteSpace(' ')
        StringLiteral
          PsiElement(string content)('"hello"')
      PsiWhiteSpace('\n  ')
      MethodCall
        ReferenceExpression: assert
          PsiElement(identifier)('assert')
        ArgumentList
          PsiElement(()('(')
          InfixExpression
            ReferenceExpression: Baz().foo
              MethodCall
                ReferenceExpression: Baz
                  PsiElement(identifier)('Baz')
                ArgumentList
                  PsiElement(()('(')
                  PsiElement())(')')
              PsiElement(.)('.')
              PsiElement(identifier)('foo')
            PsiWhiteSpace(' ')
            ReferenceExpression: ==
              PsiElement(identifier)('==')
            PsiWhiteSpace(' ')
            IntegerLiteral
              PsiElement(integer)('5')
          PsiElement())(')')
