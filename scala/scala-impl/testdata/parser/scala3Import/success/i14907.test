object Module {
  class Fun[N <: Int]()
  type Fill[N <: Int] = N match {
    case 0 => EmptyTuple
    case 1 => Any *: Fill[0]
  }
  extension[N <: Int] (f: Fun[N])
    def apply: Fill[N] => Any = ???

  Fun[1]()(???)
}
-----
ScalaFile
  ScObject: Module
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Module')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScClass: Fun
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(class)('class')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Fun')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: N
              PsiElement(identifier)('N')
              PsiWhiteSpace(' ')
              PsiElement(<:)('<:')
              PsiWhiteSpace(' ')
              SimpleType: Int
                CodeReferenceElement: Int
                  PsiElement(identifier)('Int')
            PsiElement(])(']')
          PrimaryConstructor
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            Parameters
              ParametersClause
                PsiElement(()('(')
                PsiElement())(')')
          ExtendsBlock
            <empty list>
        PsiWhiteSpace('\n  ')
        ScTypeAliasDefinition: Fill
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Fill')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: N
              PsiElement(identifier)('N')
              PsiWhiteSpace(' ')
              PsiElement(<:)('<:')
              PsiWhiteSpace(' ')
              SimpleType: Int
                CodeReferenceElement: Int
                  PsiElement(identifier)('Int')
            PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MatchType: N match {
    case 0 => EmptyTuple
    case 1 => Any *: Fill[0]
  }
            SimpleType: N
              CodeReferenceElement: N
                PsiElement(identifier)('N')
            PsiWhiteSpace(' ')
            PsiElement(match)('match')
            PsiWhiteSpace(' ')
            PsiElement({)('{')
            PsiWhiteSpace('\n    ')
            ScMatchTypeCasesImpl(match type cases)
              ScMatchTypeCaseImpl(match type case)
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                LiteralType: 0
                  IntegerLiteral
                    PsiElement(integer)('0')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                SimpleType: EmptyTuple
                  CodeReferenceElement: EmptyTuple
                    PsiElement(identifier)('EmptyTuple')
              PsiWhiteSpace('\n    ')
              ScMatchTypeCaseImpl(match type case)
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                LiteralType: 1
                  IntegerLiteral
                    PsiElement(integer)('1')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                InfixType: Any *: Fill[0]
                  SimpleType: Any
                    CodeReferenceElement: Any
                      PsiElement(identifier)('Any')
                  PsiWhiteSpace(' ')
                  CodeReferenceElement: *:
                    PsiElement(identifier)('*:')
                  PsiWhiteSpace(' ')
                  ParametrizedType: Fill[0]
                    SimpleType: Fill
                      CodeReferenceElement: Fill
                        PsiElement(identifier)('Fill')
                    TypeArgumentsList
                      PsiElement([)('[')
                      LiteralType: 0
                        IntegerLiteral
                          PsiElement(integer)('0')
                      PsiElement(])(']')
            PsiWhiteSpace('\n  ')
            PsiElement(})('}')
        PsiWhiteSpace('\n  ')
        Extension on Fun[N]
          PsiElement(extension)('extension')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: N
              PsiElement(identifier)('N')
              PsiWhiteSpace(' ')
              PsiElement(<:)('<:')
              PsiWhiteSpace(' ')
              SimpleType: Int
                CodeReferenceElement: Int
                  PsiElement(identifier)('Int')
            PsiElement(])(']')
          PsiWhiteSpace(' ')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: f
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('f')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  ParametrizedType: Fun[N]
                    SimpleType: Fun
                      CodeReferenceElement: Fun
                        PsiElement(identifier)('Fun')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: N
                        CodeReferenceElement: N
                          PsiElement(identifier)('N')
                      PsiElement(])(']')
              PsiElement())(')')
          PsiWhiteSpace('\n    ')
          ScExtensionBody
            ScFunctionDefinition: apply
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(def)('def')
              PsiWhiteSpace(' ')
              PsiElement(identifier)('apply')
              Parameters
                <empty list>
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              FunctionalType: Fill[N] => Any
                ParametrizedType: Fill[N]
                  SimpleType: Fill
                    CodeReferenceElement: Fill
                      PsiElement(identifier)('Fill')
                  TypeArgumentsList
                    PsiElement([)('[')
                    SimpleType: N
                      CodeReferenceElement: N
                        PsiElement(identifier)('N')
                    PsiElement(])(']')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                SimpleType: Any
                  CodeReferenceElement: Any
                    PsiElement(identifier)('Any')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              ReferenceExpression: ???
                PsiElement(identifier)('???')
        PsiWhiteSpace('\n\n  ')
        MethodCall
          MethodCall
            GenericCall
              ReferenceExpression: Fun
                PsiElement(identifier)('Fun')
              TypeArgumentsList
                PsiElement([)('[')
                LiteralType: 1
                  IntegerLiteral
                    PsiElement(integer)('1')
                PsiElement(])(']')
            ArgumentList
              PsiElement(()('(')
              PsiElement())(')')
          ArgumentList
            PsiElement(()('(')
            ReferenceExpression: ???
              PsiElement(identifier)('???')
            PsiElement())(')')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
