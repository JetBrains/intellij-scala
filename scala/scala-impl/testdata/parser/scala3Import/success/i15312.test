type F[t] =
  t match
    case {type A = Float} => Int
    case {type A = Int} => String

val a: F[{type A = Float}] = 10
val b: F[{type A = Int}] = "asd" // Found:("asd" : String) Required: F[Object{A = Int}]
-----
ScalaFile
  ScTypeAliasDefinition: F
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(type)('type')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('F')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: t
        PsiElement(identifier)('t')
      PsiElement(])(']')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace('\n  ')
    MatchType: t match
    case {type A = Float} => Int
    case {type A = Int} => String
      SimpleType: t
        CodeReferenceElement: t
          PsiElement(identifier)('t')
      PsiWhiteSpace(' ')
      PsiElement(match)('match')
      PsiWhiteSpace('\n    ')
      ScMatchTypeCasesImpl(match type cases)
        ScMatchTypeCaseImpl(match type case)
          PsiElement(case)('case')
          PsiWhiteSpace(' ')
          CompoundType: {type A = Float}
            Refinement
              PsiElement({)('{')
              ScTypeAliasDefinition: A
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(type)('type')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('A')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                SimpleType: Float
                  CodeReferenceElement: Float
                    PsiElement(identifier)('Float')
              PsiElement(})('}')
          PsiWhiteSpace(' ')
          PsiElement(=>)('=>')
          PsiWhiteSpace(' ')
          SimpleType: Int
            CodeReferenceElement: Int
              PsiElement(identifier)('Int')
        PsiWhiteSpace('\n    ')
        ScMatchTypeCaseImpl(match type case)
          PsiElement(case)('case')
          PsiWhiteSpace(' ')
          CompoundType: {type A = Int}
            Refinement
              PsiElement({)('{')
              ScTypeAliasDefinition: A
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(type)('type')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('A')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                SimpleType: Int
                  CodeReferenceElement: Int
                    PsiElement(identifier)('Int')
              PsiElement(})('}')
          PsiWhiteSpace(' ')
          PsiElement(=>)('=>')
          PsiWhiteSpace(' ')
          SimpleType: String
            CodeReferenceElement: String
              PsiElement(identifier)('String')
  PsiWhiteSpace('\n\n')
  ScPatternDefinition: a
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(val)('val')
    PsiWhiteSpace(' ')
    ListOfPatterns
      ReferencePattern: a
        PsiElement(identifier)('a')
    PsiElement(:)(':')
    PsiWhiteSpace(' ')
    ParametrizedType: F[{type A = Float}]
      SimpleType: F
        CodeReferenceElement: F
          PsiElement(identifier)('F')
      TypeArgumentsList
        PsiElement([)('[')
        CompoundType: {type A = Float}
          Refinement
            PsiElement({)('{')
            ScTypeAliasDefinition: A
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(type)('type')
              PsiWhiteSpace(' ')
              PsiElement(identifier)('A')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              SimpleType: Float
                CodeReferenceElement: Float
                  PsiElement(identifier)('Float')
            PsiElement(})('}')
        PsiElement(])(']')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    IntegerLiteral
      PsiElement(integer)('10')
  PsiWhiteSpace('\n')
  ScPatternDefinition: b
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(val)('val')
    PsiWhiteSpace(' ')
    ListOfPatterns
      ReferencePattern: b
        PsiElement(identifier)('b')
    PsiElement(:)(':')
    PsiWhiteSpace(' ')
    ParametrizedType: F[{type A = Int}]
      SimpleType: F
        CodeReferenceElement: F
          PsiElement(identifier)('F')
      TypeArgumentsList
        PsiElement([)('[')
        CompoundType: {type A = Int}
          Refinement
            PsiElement({)('{')
            ScTypeAliasDefinition: A
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(type)('type')
              PsiWhiteSpace(' ')
              PsiElement(identifier)('A')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              SimpleType: Int
                CodeReferenceElement: Int
                  PsiElement(identifier)('Int')
            PsiElement(})('}')
        PsiElement(])(']')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    StringLiteral
      PsiElement(string content)('"asd"')
  PsiWhiteSpace(' ')
  PsiComment(comment)('// Found:("asd" : String) Required: F[Object{A = Int}]')
