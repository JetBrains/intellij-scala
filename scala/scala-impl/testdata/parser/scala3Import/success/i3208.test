class Test {
  trait E
  trait Marker

  def test(es: List[E]): List[E] = es.collect { case e: Marker => e }
}
-----
ScalaFile
  ScClass: Test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScTrait: E
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(trait)('trait')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('E')
          ExtendsBlock
            <empty list>
        PsiWhiteSpace('\n  ')
        ScTrait: Marker
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(trait)('trait')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Marker')
          ExtendsBlock
            <empty list>
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: test
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('test')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: es
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('es')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  ParametrizedType: List[E]
                    SimpleType: List
                      CodeReferenceElement: List
                        PsiElement(identifier)('List')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: E
                        CodeReferenceElement: E
                          PsiElement(identifier)('E')
                      PsiElement(])(']')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: List[E]
            SimpleType: List
              CodeReferenceElement: List
                PsiElement(identifier)('List')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: E
                CodeReferenceElement: E
                  PsiElement(identifier)('E')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: es.collect
              ReferenceExpression: es
                PsiElement(identifier)('es')
              PsiElement(.)('.')
              PsiElement(identifier)('collect')
            PsiWhiteSpace(' ')
            ArgumentList
              BlockExpression
                PsiElement({)('{')
                PsiWhiteSpace(' ')
                CaseClauses
                  CaseClause
                    PsiElement(case)('case')
                    PsiWhiteSpace(' ')
                    Scala3 TypedPattern
                      ReferencePattern: e
                        PsiElement(identifier)('e')
                      PsiElement(:)(':')
                      PsiWhiteSpace(' ')
                      TypePattern
                        SimpleType: Marker
                          CodeReferenceElement: Marker
                            PsiElement(identifier)('Marker')
                    PsiWhiteSpace(' ')
                    PsiElement(=>)('=>')
                    PsiWhiteSpace(' ')
                    BlockOfExpressions
                      ReferenceExpression: e
                        PsiElement(identifier)('e')
                PsiWhiteSpace(' ')
                PsiElement(})('}')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
