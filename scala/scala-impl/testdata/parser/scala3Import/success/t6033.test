object Test extends App {
  val b = new java.math.BigInteger("123")
  val big1 = BigInt(b)
  val big2: BigInt = b
}
-----
ScalaFile
  ScObject: Test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test')
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          SimpleType: App
            CodeReferenceElement: App
              PsiElement(identifier)('App')
      PsiWhiteSpace(' ')
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: b
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: b
              PsiElement(identifier)('b')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ScNewTemplateDefinition: <anonymous>
            PsiElement(new)('new')
            PsiWhiteSpace(' ')
            ExtendsBlock
              TemplateParents
                ConstructorInvocation
                  SimpleType: java.math.BigInteger
                    CodeReferenceElement: java.math.BigInteger
                      CodeReferenceElement: java.math
                        CodeReferenceElement: java
                          PsiElement(identifier)('java')
                        PsiElement(.)('.')
                        PsiElement(identifier)('math')
                      PsiElement(.)('.')
                      PsiElement(identifier)('BigInteger')
                  ArgumentList
                    PsiElement(()('(')
                    StringLiteral
                      PsiElement(string content)('"123"')
                    PsiElement())(')')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: big1
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: big1
              PsiElement(identifier)('big1')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: BigInt
              PsiElement(identifier)('BigInt')
            ArgumentList
              PsiElement(()('(')
              ReferenceExpression: b
                PsiElement(identifier)('b')
              PsiElement())(')')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: big2
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: big2
              PsiElement(identifier)('big2')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: BigInt
            CodeReferenceElement: BigInt
              PsiElement(identifier)('BigInt')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: b
            PsiElement(identifier)('b')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
