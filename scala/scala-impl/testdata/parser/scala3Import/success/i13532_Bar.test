package testcode

import testcode.Foo

class Bar(f: Foo) {
	TestMacro.call()
}
-----
ScalaFile
  ScPackaging
    PsiElement(package)('package')
    PsiWhiteSpace(' ')
    CodeReferenceElement: testcode
      PsiElement(identifier)('testcode')
    PsiWhiteSpace('\n\n')
    ScImportStatement
      PsiElement(import)('import')
      PsiWhiteSpace(' ')
      ImportExpression
        CodeReferenceElement: testcode.Foo
          CodeReferenceElement: testcode
            PsiElement(identifier)('testcode')
          PsiElement(.)('.')
          PsiElement(identifier)('Foo')
    PsiWhiteSpace('\n\n')
    ScClass: Bar
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      PsiElement(class)('class')
      PsiWhiteSpace(' ')
      PsiElement(identifier)('Bar')
      PrimaryConstructor
        AnnotationsList
          <empty list>
        Modifiers
          <empty list>
        Parameters
          ParametersClause
            PsiElement(()('(')
            ClassParameter: f
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(identifier)('f')
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              ParameterType
                SimpleType: Foo
                  CodeReferenceElement: Foo
                    PsiElement(identifier)('Foo')
            PsiElement())(')')
      PsiWhiteSpace(' ')
      ExtendsBlock
        ScTemplateBody
          PsiElement({)('{')
          PsiWhiteSpace('\n\t')
          MethodCall
            ReferenceExpression: TestMacro.call
              ReferenceExpression: TestMacro
                PsiElement(identifier)('TestMacro')
              PsiElement(.)('.')
              PsiElement(identifier)('call')
            ArgumentList
              PsiElement(()('(')
              PsiElement())(')')
          PsiWhiteSpace('\n')
          PsiElement(})('}')
