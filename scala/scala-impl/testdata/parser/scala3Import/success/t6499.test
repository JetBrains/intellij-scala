object Test {
  Map(): Map[_, Int] with Map[_, Int]
}
-----
ScalaFile
  ScObject: Test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        TypedExpression
          MethodCall
            ReferenceExpression: Map
              PsiElement(identifier)('Map')
            ArgumentList
              PsiElement(()('(')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          CompoundType: Map[_, Int] with Map[_, Int]
            ParametrizedType: Map[_, Int]
              SimpleType: Map
                CodeReferenceElement: Map
                  PsiElement(identifier)('Map')
              TypeArgumentsList
                PsiElement([)('[')
                WildcardType: _
                  PsiElement(_)('_')
                PsiElement(,)(',')
                PsiWhiteSpace(' ')
                SimpleType: Int
                  CodeReferenceElement: Int
                    PsiElement(identifier)('Int')
                PsiElement(])(']')
            PsiWhiteSpace(' ')
            PsiElement(with)('with')
            PsiWhiteSpace(' ')
            ParametrizedType: Map[_, Int]
              SimpleType: Map
                CodeReferenceElement: Map
                  PsiElement(identifier)('Map')
              TypeArgumentsList
                PsiElement([)('[')
                WildcardType: _
                  PsiElement(_)('_')
                PsiElement(,)(',')
                PsiWhiteSpace(' ')
                SimpleType: Int
                  CodeReferenceElement: Int
                    PsiElement(identifier)('Int')
                PsiElement(])(']')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
