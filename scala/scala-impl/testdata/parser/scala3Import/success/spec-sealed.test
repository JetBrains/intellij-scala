sealed abstract class MyList[@specialized +A] {
  def head: A
  def tail: MyList[A]

  def ::[@specialized B >: A](x: B): MyList[B] =
    new Cons[B](x, this)
}

case object MyNil extends MyList[Nothing] {
  def head = sys.error("nil")
  def tail = sys.error("nil")
}

case class Cons[@specialized a](private val hd: a, tl: MyList[a]) extends MyList[a] {
  def head = hd
  def tail = tl
}

abstract class IntList extends MyList[Int]

object Main extends App {
  val xs = 1 :: 2 :: 3 :: MyNil
  println(xs)
}

/*
final class ConsI(hd1: Int, tl1: MyList[Int]) extends Cons[Int](hd1, tl1) {
  override val hd = hd1
  override val tl = tl1
}
*/
//class IntCons(_hd: Int, _tl: MyList[Int]) extends Cons[Int](_hd, _tl)
-----
ScalaFile
  ScClass: MyList
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(sealed)('sealed')
      PsiWhiteSpace(' ')
      PsiElement(abstract)('abstract')
    PsiWhiteSpace(' ')
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('MyList')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: A
        AnnotationsList
          Annotation
            PsiElement(@)('@')
            AnnotationExpression
              ConstructorInvocation
                SimpleType: specialized
                  CodeReferenceElement: specialized
                    PsiElement(identifier)('specialized')
        PsiWhiteSpace(' ')
        PsiElement(identifier)('+')
        PsiElement(identifier)('A')
      PsiElement(])(']')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDeclaration: head
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('head')
          Parameters
            <empty list>
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: A
            CodeReferenceElement: A
              PsiElement(identifier)('A')
        PsiWhiteSpace('\n  ')
        ScFunctionDeclaration: tail
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('tail')
          Parameters
            <empty list>
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: MyList[A]
            SimpleType: MyList
              CodeReferenceElement: MyList
                PsiElement(identifier)('MyList')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: A
                CodeReferenceElement: A
                  PsiElement(identifier)('A')
              PsiElement(])(']')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: ::
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('::')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: B
              AnnotationsList
                Annotation
                  PsiElement(@)('@')
                  AnnotationExpression
                    ConstructorInvocation
                      SimpleType: specialized
                        CodeReferenceElement: specialized
                          PsiElement(identifier)('specialized')
              PsiWhiteSpace(' ')
              PsiElement(identifier)('B')
              PsiWhiteSpace(' ')
              PsiElement(>:)('>:')
              PsiWhiteSpace(' ')
              SimpleType: A
                CodeReferenceElement: A
                  PsiElement(identifier)('A')
            PsiElement(])(']')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: x
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: B
                    CodeReferenceElement: B
                      PsiElement(identifier)('B')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: MyList[B]
            SimpleType: MyList
              CodeReferenceElement: MyList
                PsiElement(identifier)('MyList')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: B
                CodeReferenceElement: B
                  PsiElement(identifier)('B')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace('\n    ')
          ScNewTemplateDefinition: <anonymous>
            PsiElement(new)('new')
            PsiWhiteSpace(' ')
            ExtendsBlock
              TemplateParents
                ConstructorInvocation
                  ParametrizedType: Cons[B]
                    SimpleType: Cons
                      CodeReferenceElement: Cons
                        PsiElement(identifier)('Cons')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: B
                        CodeReferenceElement: B
                          PsiElement(identifier)('B')
                      PsiElement(])(']')
                  ArgumentList
                    PsiElement(()('(')
                    ReferenceExpression: x
                      PsiElement(identifier)('x')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    ThisReference
                      PsiElement(this)('this')
                    PsiElement())(')')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScObject: MyNil
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(case)('case')
    PsiWhiteSpace(' ')
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('MyNil')
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          ParametrizedType: MyList[Nothing]
            SimpleType: MyList
              CodeReferenceElement: MyList
                PsiElement(identifier)('MyList')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: Nothing
                CodeReferenceElement: Nothing
                  PsiElement(identifier)('Nothing')
              PsiElement(])(']')
      PsiWhiteSpace(' ')
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: head
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('head')
          Parameters
            <empty list>
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: sys.error
              ReferenceExpression: sys
                PsiElement(identifier)('sys')
              PsiElement(.)('.')
              PsiElement(identifier)('error')
            ArgumentList
              PsiElement(()('(')
              StringLiteral
                PsiElement(string content)('"nil"')
              PsiElement())(')')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: tail
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('tail')
          Parameters
            <empty list>
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: sys.error
              ReferenceExpression: sys
                PsiElement(identifier)('sys')
              PsiElement(.)('.')
              PsiElement(identifier)('error')
            ArgumentList
              PsiElement(()('(')
              StringLiteral
                PsiElement(string content)('"nil"')
              PsiElement())(')')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScClass: Cons
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(case)('case')
    PsiWhiteSpace(' ')
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Cons')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: a
        AnnotationsList
          Annotation
            PsiElement(@)('@')
            AnnotationExpression
              ConstructorInvocation
                SimpleType: specialized
                  CodeReferenceElement: specialized
                    PsiElement(identifier)('specialized')
        PsiWhiteSpace(' ')
        PsiElement(identifier)('a')
      PsiElement(])(']')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        ParametersClause
          PsiElement(()('(')
          ClassParameter: hd
            AnnotationsList
              <empty list>
            Modifiers
              AccessModifier
                PsiElement(private)('private')
            PsiWhiteSpace(' ')
            PsiElement(val)('val')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('hd')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            ParameterType
              SimpleType: a
                CodeReferenceElement: a
                  PsiElement(identifier)('a')
          PsiElement(,)(',')
          PsiWhiteSpace(' ')
          ClassParameter: tl
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(identifier)('tl')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            ParameterType
              ParametrizedType: MyList[a]
                SimpleType: MyList
                  CodeReferenceElement: MyList
                    PsiElement(identifier)('MyList')
                TypeArgumentsList
                  PsiElement([)('[')
                  SimpleType: a
                    CodeReferenceElement: a
                      PsiElement(identifier)('a')
                  PsiElement(])(']')
          PsiElement())(')')
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          ParametrizedType: MyList[a]
            SimpleType: MyList
              CodeReferenceElement: MyList
                PsiElement(identifier)('MyList')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: a
                CodeReferenceElement: a
                  PsiElement(identifier)('a')
              PsiElement(])(']')
      PsiWhiteSpace(' ')
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: head
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('head')
          Parameters
            <empty list>
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: hd
            PsiElement(identifier)('hd')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: tail
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('tail')
          Parameters
            <empty list>
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: tl
            PsiElement(identifier)('tl')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScClass: IntList
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(abstract)('abstract')
    PsiWhiteSpace(' ')
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('IntList')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          ParametrizedType: MyList[Int]
            SimpleType: MyList
              CodeReferenceElement: MyList
                PsiElement(identifier)('MyList')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: Int
                CodeReferenceElement: Int
                  PsiElement(identifier)('Int')
              PsiElement(])(']')
  PsiWhiteSpace('\n\n')
  ScObject: Main
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Main')
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          SimpleType: App
            CodeReferenceElement: App
              PsiElement(identifier)('App')
      PsiWhiteSpace(' ')
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: xs
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: xs
              PsiElement(identifier)('xs')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          InfixExpression
            IntegerLiteral
              PsiElement(integer)('1')
            PsiWhiteSpace(' ')
            ReferenceExpression: ::
              PsiElement(identifier)('::')
            PsiWhiteSpace(' ')
            InfixExpression
              IntegerLiteral
                PsiElement(integer)('2')
              PsiWhiteSpace(' ')
              ReferenceExpression: ::
                PsiElement(identifier)('::')
              PsiWhiteSpace(' ')
              InfixExpression
                IntegerLiteral
                  PsiElement(integer)('3')
                PsiWhiteSpace(' ')
                ReferenceExpression: ::
                  PsiElement(identifier)('::')
                PsiWhiteSpace(' ')
                ReferenceExpression: MyNil
                  PsiElement(identifier)('MyNil')
        PsiWhiteSpace('\n  ')
        MethodCall
          ReferenceExpression: println
            PsiElement(identifier)('println')
          ArgumentList
            PsiElement(()('(')
            ReferenceExpression: xs
              PsiElement(identifier)('xs')
            PsiElement())(')')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  PsiComment(BlockComment)('/*\nfinal class ConsI(hd1: Int, tl1: MyList[Int]) extends Cons[Int](hd1, tl1) {\n  override val hd = hd1\n  override val tl = tl1\n}\n*/')
  PsiWhiteSpace('\n')
  PsiComment(comment)('//class IntCons(_hd: Int, _tl: MyList[Int]) extends Cons[Int](_hd, _tl)')
