trait Foo:
  class Bar:
    private[Foo] opaque type Baz = Int

  def foo: Bar#Baz

-----
ScalaFile
  ScTrait: Foo
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Foo')
    ExtendsBlock
      ScTemplateBody
        PsiElement(:)(':')
        PsiWhiteSpace('\n  ')
        ScClass: Bar
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(class)('class')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Bar')
          PrimaryConstructor
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            Parameters
              <empty list>
          ExtendsBlock
            ScTemplateBody
              PsiElement(:)(':')
              PsiWhiteSpace('\n    ')
              ScTypeAliasDefinition: Baz
                AnnotationsList
                  <empty list>
                Modifiers
                  AccessModifier
                    PsiElement(private)('private')
                    PsiElement([)('[')
                    PsiElement(identifier)('Foo')
                    PsiElement(])(']')
                  PsiWhiteSpace(' ')
                  PsiElement(opaque)('opaque')
                PsiWhiteSpace(' ')
                PsiElement(type)('type')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('Baz')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                SimpleType: Int
                  CodeReferenceElement: Int
                    PsiElement(identifier)('Int')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDeclaration: foo
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('foo')
          Parameters
            <empty list>
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          TypeProjection: Bar#Baz
            SimpleType: Bar
              CodeReferenceElement: Bar
                PsiElement(identifier)('Bar')
            PsiElement(#)('#')
            PsiElement(identifier)('Baz')
