trait SeqOps[+A, +CC[_], +C]:   // scala.collection.SeqOps
  def reverse: C

extension[A, CC[B] <: SeqOps[B, CC, CC[B]]](ring: CC[A])
  def startAt(i: Int): CC[A] = ???
  def reflectAt(i: Int): CC[A] =
    startAt(i).reverse
-----
ScalaFile
  ScTrait: SeqOps
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('SeqOps')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: A
        PsiElement(identifier)('+')
        PsiElement(identifier)('A')
      PsiElement(,)(',')
      PsiWhiteSpace(' ')
      TypeParameter: CC
        PsiElement(identifier)('+')
        PsiElement(identifier)('CC')
        TypeParameterClause
          PsiElement([)('[')
          TypeParameter: _
            PsiElement(_)('_')
          PsiElement(])(']')
      PsiElement(,)(',')
      PsiWhiteSpace(' ')
      TypeParameter: C
        PsiElement(identifier)('+')
        PsiElement(identifier)('C')
      PsiElement(])(']')
    ExtendsBlock
      ScTemplateBody
        PsiElement(:)(':')
        PsiWhiteSpace('   ')
        PsiComment(comment)('// scala.collection.SeqOps')
        PsiWhiteSpace('\n  ')
        ScFunctionDeclaration: reverse
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('reverse')
          Parameters
            <empty list>
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: C
            CodeReferenceElement: C
              PsiElement(identifier)('C')
  PsiWhiteSpace('\n\n')
  Extension on CC[A]
    PsiElement(extension)('extension')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: A
        PsiElement(identifier)('A')
      PsiElement(,)(',')
      PsiWhiteSpace(' ')
      TypeParameter: CC
        PsiElement(identifier)('CC')
        TypeParameterClause
          PsiElement([)('[')
          TypeParameter: B
            PsiElement(identifier)('B')
          PsiElement(])(']')
        PsiWhiteSpace(' ')
        PsiElement(<:)('<:')
        PsiWhiteSpace(' ')
        ParametrizedType: SeqOps[B, CC, CC[B]]
          SimpleType: SeqOps
            CodeReferenceElement: SeqOps
              PsiElement(identifier)('SeqOps')
          TypeArgumentsList
            PsiElement([)('[')
            SimpleType: B
              CodeReferenceElement: B
                PsiElement(identifier)('B')
            PsiElement(,)(',')
            PsiWhiteSpace(' ')
            SimpleType: CC
              CodeReferenceElement: CC
                PsiElement(identifier)('CC')
            PsiElement(,)(',')
            PsiWhiteSpace(' ')
            ParametrizedType: CC[B]
              SimpleType: CC
                CodeReferenceElement: CC
                  PsiElement(identifier)('CC')
              TypeArgumentsList
                PsiElement([)('[')
                SimpleType: B
                  CodeReferenceElement: B
                    PsiElement(identifier)('B')
                PsiElement(])(']')
            PsiElement(])(']')
      PsiElement(])(']')
    Parameters
      ParametersClause
        PsiElement(()('(')
        Parameter: ring
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(identifier)('ring')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParameterType
            ParametrizedType: CC[A]
              SimpleType: CC
                CodeReferenceElement: CC
                  PsiElement(identifier)('CC')
              TypeArgumentsList
                PsiElement([)('[')
                SimpleType: A
                  CodeReferenceElement: A
                    PsiElement(identifier)('A')
                PsiElement(])(']')
        PsiElement())(')')
    PsiWhiteSpace('\n  ')
    ScExtensionBody
      ScFunctionDefinition: startAt
        AnnotationsList
          <empty list>
        Modifiers
          <empty list>
        PsiElement(def)('def')
        PsiWhiteSpace(' ')
        PsiElement(identifier)('startAt')
        Parameters
          ParametersClause
            PsiElement(()('(')
            Parameter: i
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(identifier)('i')
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              ParameterType
                SimpleType: Int
                  CodeReferenceElement: Int
                    PsiElement(identifier)('Int')
            PsiElement())(')')
        PsiElement(:)(':')
        PsiWhiteSpace(' ')
        ParametrizedType: CC[A]
          SimpleType: CC
            CodeReferenceElement: CC
              PsiElement(identifier)('CC')
          TypeArgumentsList
            PsiElement([)('[')
            SimpleType: A
              CodeReferenceElement: A
                PsiElement(identifier)('A')
            PsiElement(])(']')
        PsiWhiteSpace(' ')
        PsiElement(=)('=')
        PsiWhiteSpace(' ')
        ReferenceExpression: ???
          PsiElement(identifier)('???')
      PsiWhiteSpace('\n  ')
      ScFunctionDefinition: reflectAt
        AnnotationsList
          <empty list>
        Modifiers
          <empty list>
        PsiElement(def)('def')
        PsiWhiteSpace(' ')
        PsiElement(identifier)('reflectAt')
        Parameters
          ParametersClause
            PsiElement(()('(')
            Parameter: i
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(identifier)('i')
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              ParameterType
                SimpleType: Int
                  CodeReferenceElement: Int
                    PsiElement(identifier)('Int')
            PsiElement())(')')
        PsiElement(:)(':')
        PsiWhiteSpace(' ')
        ParametrizedType: CC[A]
          SimpleType: CC
            CodeReferenceElement: CC
              PsiElement(identifier)('CC')
          TypeArgumentsList
            PsiElement([)('[')
            SimpleType: A
              CodeReferenceElement: A
                PsiElement(identifier)('A')
            PsiElement(])(']')
        PsiWhiteSpace(' ')
        PsiElement(=)('=')
        PsiWhiteSpace('\n    ')
        ReferenceExpression: startAt(i).reverse
          MethodCall
            ReferenceExpression: startAt
              PsiElement(identifier)('startAt')
            ArgumentList
              PsiElement(()('(')
              ReferenceExpression: i
                PsiElement(identifier)('i')
              PsiElement())(')')
          PsiElement(.)('.')
          PsiElement(identifier)('reverse')
