trait M:
  type X
  object X:
    def foo(): X = ???

transparent inline def m(using m: M): m.type = m

def doSomething(body: M ?=> Unit) = body(using new M{})


def Test1 =
  given M = new M{}
  locally {
    import m.*
    val x: X = X.foo()
    println(x)
  }

def Test2 =

  doSomething {
    val x: m.X = m.X.foo()
    println(x)
  }
  // or with an import
  doSomething {
    import m._ // Concise and clear import of the same stable path `m`
    val x: X = X.foo()
    println(x)
  }
  // without this feature we would need an extra line in each call site
  doSomething {
    // not ideal
    val myM = m // or summon[M]
    import myM.*
    val x: X = X.foo()
    println(x)
  }
-----
ScalaFile
  ScTrait: M
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('M')
    ExtendsBlock
      ScTemplateBody
        PsiElement(:)(':')
        PsiWhiteSpace('\n  ')
        ScTypeAliasDeclaration: X
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('X')
        PsiWhiteSpace('\n  ')
        ScObject: X
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(object)('object')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('X')
          ExtendsBlock
            ScTemplateBody
              PsiElement(:)(':')
              PsiWhiteSpace('\n    ')
              ScFunctionDefinition: foo
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(def)('def')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('foo')
                Parameters
                  ParametersClause
                    PsiElement(()('(')
                    PsiElement())(')')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                SimpleType: X
                  CodeReferenceElement: X
                    PsiElement(identifier)('X')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                ReferenceExpression: ???
                  PsiElement(identifier)('???')
  PsiWhiteSpace('\n\n')
  ScFunctionDefinition: m
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(transparent)('transparent')
      PsiWhiteSpace(' ')
      PsiElement(inline)('inline')
    PsiWhiteSpace(' ')
    PsiElement(def)('def')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('m')
    Parameters
      ParametersClause
        PsiElement(()('(')
        PsiElement(using)('using')
        PsiWhiteSpace(' ')
        Parameter: m
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(identifier)('m')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParameterType
            SimpleType: M
              CodeReferenceElement: M
                PsiElement(identifier)('M')
        PsiElement())(')')
    PsiElement(:)(':')
    PsiWhiteSpace(' ')
    SimpleType: m.type
      CodeReferenceElement: m
        PsiElement(identifier)('m')
      PsiElement(.)('.')
      PsiElement(type)('type')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    ReferenceExpression: m
      PsiElement(identifier)('m')
  PsiWhiteSpace('\n\n')
  ScFunctionDefinition: doSomething
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(def)('def')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('doSomething')
    Parameters
      ParametersClause
        PsiElement(()('(')
        Parameter: body
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(identifier)('body')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParameterType
            FunctionalType: M ?=> Unit
              SimpleType: M
                CodeReferenceElement: M
                  PsiElement(identifier)('M')
              PsiWhiteSpace(' ')
              PsiElement(?=>)('?=>')
              PsiWhiteSpace(' ')
              SimpleType: Unit
                CodeReferenceElement: Unit
                  PsiElement(identifier)('Unit')
        PsiElement())(')')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    MethodCall
      ReferenceExpression: body
        PsiElement(identifier)('body')
      ArgumentList
        PsiElement(()('(')
        PsiElement(using)('using')
        PsiWhiteSpace(' ')
        ScNewTemplateDefinition: <anonymous>
          PsiElement(new)('new')
          PsiWhiteSpace(' ')
          ExtendsBlock
            TemplateParents
              ConstructorInvocation
                SimpleType: M
                  CodeReferenceElement: M
                    PsiElement(identifier)('M')
            ScTemplateBody
              PsiElement({)('{')
              PsiElement(})('}')
        PsiElement())(')')
  PsiWhiteSpace('\n\n\n')
  ScFunctionDefinition: Test1
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(def)('def')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test1')
    Parameters
      <empty list>
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    BlockExpression
      PsiWhiteSpace('\n  ')
      ScGivenAliasDefinition: given_M
        AnnotationsList
          <empty list>
        Modifiers
          <empty list>
        PsiElement(given)('given')
        PsiWhiteSpace(' ')
        SimpleType: M
          CodeReferenceElement: M
            PsiElement(identifier)('M')
        Parameters
          <empty list>
        PsiWhiteSpace(' ')
        PsiElement(=)('=')
        PsiWhiteSpace(' ')
        ScNewTemplateDefinition: <anonymous>
          PsiElement(new)('new')
          PsiWhiteSpace(' ')
          ExtendsBlock
            TemplateParents
              ConstructorInvocation
                SimpleType: M
                  CodeReferenceElement: M
                    PsiElement(identifier)('M')
            ScTemplateBody
              PsiElement({)('{')
              PsiElement(})('}')
      PsiWhiteSpace('\n  ')
      MethodCall
        ReferenceExpression: locally
          PsiElement(identifier)('locally')
        PsiWhiteSpace(' ')
        ArgumentList
          BlockExpression
            PsiElement({)('{')
            PsiWhiteSpace('\n    ')
            ScImportStatement
              PsiElement(import)('import')
              PsiWhiteSpace(' ')
              ImportExpression
                CodeReferenceElement: m
                  PsiElement(identifier)('m')
                PsiElement(.)('.')
                PsiElement(*)('*')
            PsiWhiteSpace('\n    ')
            ScPatternDefinition: x
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              ListOfPatterns
                ReferencePattern: x
                  PsiElement(identifier)('x')
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              SimpleType: X
                CodeReferenceElement: X
                  PsiElement(identifier)('X')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              MethodCall
                ReferenceExpression: X.foo
                  ReferenceExpression: X
                    PsiElement(identifier)('X')
                  PsiElement(.)('.')
                  PsiElement(identifier)('foo')
                ArgumentList
                  PsiElement(()('(')
                  PsiElement())(')')
            PsiWhiteSpace('\n    ')
            MethodCall
              ReferenceExpression: println
                PsiElement(identifier)('println')
              ArgumentList
                PsiElement(()('(')
                ReferenceExpression: x
                  PsiElement(identifier)('x')
                PsiElement())(')')
            PsiWhiteSpace('\n  ')
            PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScFunctionDefinition: Test2
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(def)('def')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test2')
    Parameters
      <empty list>
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    BlockExpression
      PsiWhiteSpace('\n\n  ')
      MethodCall
        ReferenceExpression: doSomething
          PsiElement(identifier)('doSomething')
        PsiWhiteSpace(' ')
        ArgumentList
          BlockExpression
            PsiElement({)('{')
            PsiWhiteSpace('\n    ')
            ScPatternDefinition: x
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              ListOfPatterns
                ReferencePattern: x
                  PsiElement(identifier)('x')
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              SimpleType: m.X
                CodeReferenceElement: m.X
                  CodeReferenceElement: m
                    PsiElement(identifier)('m')
                  PsiElement(.)('.')
                  PsiElement(identifier)('X')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              MethodCall
                ReferenceExpression: m.X.foo
                  ReferenceExpression: m.X
                    ReferenceExpression: m
                      PsiElement(identifier)('m')
                    PsiElement(.)('.')
                    PsiElement(identifier)('X')
                  PsiElement(.)('.')
                  PsiElement(identifier)('foo')
                ArgumentList
                  PsiElement(()('(')
                  PsiElement())(')')
            PsiWhiteSpace('\n    ')
            MethodCall
              ReferenceExpression: println
                PsiElement(identifier)('println')
              ArgumentList
                PsiElement(()('(')
                ReferenceExpression: x
                  PsiElement(identifier)('x')
                PsiElement())(')')
            PsiWhiteSpace('\n  ')
            PsiElement(})('}')
      PsiWhiteSpace('\n  ')
      PsiComment(comment)('// or with an import')
      PsiWhiteSpace('\n  ')
      MethodCall
        ReferenceExpression: doSomething
          PsiElement(identifier)('doSomething')
        PsiWhiteSpace(' ')
        ArgumentList
          BlockExpression
            PsiElement({)('{')
            PsiWhiteSpace('\n    ')
            ScImportStatement
              PsiElement(import)('import')
              PsiWhiteSpace(' ')
              ImportExpression
                CodeReferenceElement: m
                  PsiElement(identifier)('m')
                PsiElement(.)('.')
                PsiElement(_)('_')
            PsiWhiteSpace(' ')
            PsiComment(comment)('// Concise and clear import of the same stable path `m`')
            PsiWhiteSpace('\n    ')
            ScPatternDefinition: x
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              ListOfPatterns
                ReferencePattern: x
                  PsiElement(identifier)('x')
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              SimpleType: X
                CodeReferenceElement: X
                  PsiElement(identifier)('X')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              MethodCall
                ReferenceExpression: X.foo
                  ReferenceExpression: X
                    PsiElement(identifier)('X')
                  PsiElement(.)('.')
                  PsiElement(identifier)('foo')
                ArgumentList
                  PsiElement(()('(')
                  PsiElement())(')')
            PsiWhiteSpace('\n    ')
            MethodCall
              ReferenceExpression: println
                PsiElement(identifier)('println')
              ArgumentList
                PsiElement(()('(')
                ReferenceExpression: x
                  PsiElement(identifier)('x')
                PsiElement())(')')
            PsiWhiteSpace('\n  ')
            PsiElement(})('}')
      PsiWhiteSpace('\n  ')
      PsiComment(comment)('// without this feature we would need an extra line in each call site')
      PsiWhiteSpace('\n  ')
      MethodCall
        ReferenceExpression: doSomething
          PsiElement(identifier)('doSomething')
        PsiWhiteSpace(' ')
        ArgumentList
          BlockExpression
            PsiElement({)('{')
            PsiWhiteSpace('\n    ')
            ScPatternDefinition: myM
              PsiComment(comment)('// not ideal')
              PsiWhiteSpace('\n    ')
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              ListOfPatterns
                ReferencePattern: myM
                  PsiElement(identifier)('myM')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              ReferenceExpression: m
                PsiElement(identifier)('m')
            PsiWhiteSpace(' ')
            PsiComment(comment)('// or summon[M]')
            PsiWhiteSpace('\n    ')
            ScImportStatement
              PsiElement(import)('import')
              PsiWhiteSpace(' ')
              ImportExpression
                CodeReferenceElement: myM
                  PsiElement(identifier)('myM')
                PsiElement(.)('.')
                PsiElement(*)('*')
            PsiWhiteSpace('\n    ')
            ScPatternDefinition: x
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              ListOfPatterns
                ReferencePattern: x
                  PsiElement(identifier)('x')
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              SimpleType: X
                CodeReferenceElement: X
                  PsiElement(identifier)('X')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              MethodCall
                ReferenceExpression: X.foo
                  ReferenceExpression: X
                    PsiElement(identifier)('X')
                  PsiElement(.)('.')
                  PsiElement(identifier)('foo')
                ArgumentList
                  PsiElement(()('(')
                  PsiElement())(')')
            PsiWhiteSpace('\n    ')
            MethodCall
              ReferenceExpression: println
                PsiElement(identifier)('println')
              ArgumentList
                PsiElement(()('(')
                ReferenceExpression: x
                  PsiElement(identifier)('x')
                PsiElement())(')')
            PsiWhiteSpace('\n  ')
            PsiElement(})('}')
