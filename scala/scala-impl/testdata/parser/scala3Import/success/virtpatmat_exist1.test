import annotation.unchecked.uncheckedVariance as uV
import scala.collection.{IterableFactory, StrictOptimizedIterableOps, mutable}
import scala.collection.immutable.{ListMap, ListSet}
import scala.collection.mutable.{AbstractSet, HashMap, HashSet, Set, SetOps}

// Stub of HashSet, but not final, so we can extend from it (in Test below)
class HS[A]
  extends AbstractSet[A]
    with SetOps[A, HS, HS[A]]
    with StrictOptimizedIterableOps[A, HS, HS[A]]
    with collection.IterableFactoryDefaults[A, HS]
    with Serializable {
  override def iterableFactory: IterableFactory[HS] = ???
  def get(elem: A): Option[A] = ???
  def contains(elem: A): Boolean = ???
  def addOne(elem: A): HS.this.type = ???
  def clear(): Unit = ???
  def iterator: Iterator[A] = ???
  def subtractOne(elem: A): HS.this.type = ???
}

object Test {
  class HashMapCollision1[A, +B](var hash: Int, var kvs: ListMap[A, B @uV]) extends HashMap[A, B @uV]
  class HashSetCollision1[A](var hash: Int, var ks: ListSet[A]) extends HS[A]

  def splitArray[T](ad: Array[Iterable[T]]): Any =
    ad(0) match {
      case _: HashMapCollision1[_, _] | _: HashSetCollision1[_] => null
    }

    // without type ascription for the one in the body of the last flatmap of each alternative, type inference borks on the existentials
    // def splitArray[T >: Nothing <: Any](ad: Array[Iterable[T]]): Any = { import OptionMatching.*
    //   runOrElse(ad.apply(0))(((x1: Iterable[T]) => (
    //     or(((x4: Iterable[T]) => one(null)),
    //       guard(x1.isInstanceOf[Iterable[T] with Test.HashMapCollision1[_,_]], x1.asInstanceOf[Iterable[T] with Test.HashMapCollision1[_,_]]).flatMap(((x2: Iterable[T] with Test.HashMapCollision1[_,_]) => one(x2))),
    //       guard(x1.isInstanceOf[Test.HashSetCollision1[_]], x1.asInstanceOf[Iterable[T] with Test.HashSetCollision1[_]]).flatMap(((x3: Iterable[T] with Test.HashSetCollision1[_]) => one(x3)))): Option[Any]).orElse(
    //     (zero: Option[Any])))
    //   )
    // }

}

-----
ScalaFile
  ScImportStatement
    PsiElement(import)('import')
    PsiWhiteSpace(' ')
    ImportExpression
      CodeReferenceElement: annotation.unchecked
        CodeReferenceElement: annotation
          PsiElement(identifier)('annotation')
        PsiElement(.)('.')
        PsiElement(identifier)('unchecked')
      PsiElement(.)('.')
      ImportSelectors
        ImportSelector
          CodeReferenceElement: uncheckedVariance
            PsiElement(identifier)('uncheckedVariance')
          PsiWhiteSpace(' ')
          PsiElement(as)('as')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('uV')
  PsiWhiteSpace('\n')
  ScImportStatement
    PsiElement(import)('import')
    PsiWhiteSpace(' ')
    ImportExpression
      CodeReferenceElement: scala.collection
        CodeReferenceElement: scala
          PsiElement(identifier)('scala')
        PsiElement(.)('.')
        PsiElement(identifier)('collection')
      PsiElement(.)('.')
      ImportSelectors
        PsiElement({)('{')
        ImportSelector
          CodeReferenceElement: IterableFactory
            PsiElement(identifier)('IterableFactory')
        PsiElement(,)(',')
        PsiWhiteSpace(' ')
        ImportSelector
          CodeReferenceElement: StrictOptimizedIterableOps
            PsiElement(identifier)('StrictOptimizedIterableOps')
        PsiElement(,)(',')
        PsiWhiteSpace(' ')
        ImportSelector
          CodeReferenceElement: mutable
            PsiElement(identifier)('mutable')
        PsiElement(})('}')
  PsiWhiteSpace('\n')
  ScImportStatement
    PsiElement(import)('import')
    PsiWhiteSpace(' ')
    ImportExpression
      CodeReferenceElement: scala.collection.immutable
        CodeReferenceElement: scala.collection
          CodeReferenceElement: scala
            PsiElement(identifier)('scala')
          PsiElement(.)('.')
          PsiElement(identifier)('collection')
        PsiElement(.)('.')
        PsiElement(identifier)('immutable')
      PsiElement(.)('.')
      ImportSelectors
        PsiElement({)('{')
        ImportSelector
          CodeReferenceElement: ListMap
            PsiElement(identifier)('ListMap')
        PsiElement(,)(',')
        PsiWhiteSpace(' ')
        ImportSelector
          CodeReferenceElement: ListSet
            PsiElement(identifier)('ListSet')
        PsiElement(})('}')
  PsiWhiteSpace('\n')
  ScImportStatement
    PsiElement(import)('import')
    PsiWhiteSpace(' ')
    ImportExpression
      CodeReferenceElement: scala.collection.mutable
        CodeReferenceElement: scala.collection
          CodeReferenceElement: scala
            PsiElement(identifier)('scala')
          PsiElement(.)('.')
          PsiElement(identifier)('collection')
        PsiElement(.)('.')
        PsiElement(identifier)('mutable')
      PsiElement(.)('.')
      ImportSelectors
        PsiElement({)('{')
        ImportSelector
          CodeReferenceElement: AbstractSet
            PsiElement(identifier)('AbstractSet')
        PsiElement(,)(',')
        PsiWhiteSpace(' ')
        ImportSelector
          CodeReferenceElement: HashMap
            PsiElement(identifier)('HashMap')
        PsiElement(,)(',')
        PsiWhiteSpace(' ')
        ImportSelector
          CodeReferenceElement: HashSet
            PsiElement(identifier)('HashSet')
        PsiElement(,)(',')
        PsiWhiteSpace(' ')
        ImportSelector
          CodeReferenceElement: Set
            PsiElement(identifier)('Set')
        PsiElement(,)(',')
        PsiWhiteSpace(' ')
        ImportSelector
          CodeReferenceElement: SetOps
            PsiElement(identifier)('SetOps')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScClass: HS
    PsiComment(comment)('// Stub of HashSet, but not final, so we can extend from it (in Test below)')
    PsiWhiteSpace('\n')
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('HS')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: A
        PsiElement(identifier)('A')
      PsiElement(])(']')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    PsiWhiteSpace('\n  ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          ParametrizedType: AbstractSet[A]
            SimpleType: AbstractSet
              CodeReferenceElement: AbstractSet
                PsiElement(identifier)('AbstractSet')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: A
                CodeReferenceElement: A
                  PsiElement(identifier)('A')
              PsiElement(])(']')
        PsiWhiteSpace('\n    ')
        PsiElement(with)('with')
        PsiWhiteSpace(' ')
        ConstructorInvocation
          ParametrizedType: SetOps[A, HS, HS[A]]
            SimpleType: SetOps
              CodeReferenceElement: SetOps
                PsiElement(identifier)('SetOps')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: A
                CodeReferenceElement: A
                  PsiElement(identifier)('A')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              SimpleType: HS
                CodeReferenceElement: HS
                  PsiElement(identifier)('HS')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              ParametrizedType: HS[A]
                SimpleType: HS
                  CodeReferenceElement: HS
                    PsiElement(identifier)('HS')
                TypeArgumentsList
                  PsiElement([)('[')
                  SimpleType: A
                    CodeReferenceElement: A
                      PsiElement(identifier)('A')
                  PsiElement(])(']')
              PsiElement(])(']')
        PsiWhiteSpace('\n    ')
        PsiElement(with)('with')
        PsiWhiteSpace(' ')
        ConstructorInvocation
          ParametrizedType: StrictOptimizedIterableOps[A, HS, HS[A]]
            SimpleType: StrictOptimizedIterableOps
              CodeReferenceElement: StrictOptimizedIterableOps
                PsiElement(identifier)('StrictOptimizedIterableOps')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: A
                CodeReferenceElement: A
                  PsiElement(identifier)('A')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              SimpleType: HS
                CodeReferenceElement: HS
                  PsiElement(identifier)('HS')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              ParametrizedType: HS[A]
                SimpleType: HS
                  CodeReferenceElement: HS
                    PsiElement(identifier)('HS')
                TypeArgumentsList
                  PsiElement([)('[')
                  SimpleType: A
                    CodeReferenceElement: A
                      PsiElement(identifier)('A')
                  PsiElement(])(']')
              PsiElement(])(']')
        PsiWhiteSpace('\n    ')
        PsiElement(with)('with')
        PsiWhiteSpace(' ')
        ConstructorInvocation
          ParametrizedType: collection.IterableFactoryDefaults[A, HS]
            SimpleType: collection.IterableFactoryDefaults
              CodeReferenceElement: collection.IterableFactoryDefaults
                CodeReferenceElement: collection
                  PsiElement(identifier)('collection')
                PsiElement(.)('.')
                PsiElement(identifier)('IterableFactoryDefaults')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: A
                CodeReferenceElement: A
                  PsiElement(identifier)('A')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              SimpleType: HS
                CodeReferenceElement: HS
                  PsiElement(identifier)('HS')
              PsiElement(])(']')
        PsiWhiteSpace('\n    ')
        PsiElement(with)('with')
        PsiWhiteSpace(' ')
        ConstructorInvocation
          SimpleType: Serializable
            CodeReferenceElement: Serializable
              PsiElement(identifier)('Serializable')
      PsiWhiteSpace(' ')
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: iterableFactory
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(override)('override')
          PsiWhiteSpace(' ')
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('iterableFactory')
          Parameters
            <empty list>
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: IterableFactory[HS]
            SimpleType: IterableFactory
              CodeReferenceElement: IterableFactory
                PsiElement(identifier)('IterableFactory')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: HS
                CodeReferenceElement: HS
                  PsiElement(identifier)('HS')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: ???
            PsiElement(identifier)('???')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: get
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('get')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: elem
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('elem')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: A
                    CodeReferenceElement: A
                      PsiElement(identifier)('A')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: Option[A]
            SimpleType: Option
              CodeReferenceElement: Option
                PsiElement(identifier)('Option')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: A
                CodeReferenceElement: A
                  PsiElement(identifier)('A')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: ???
            PsiElement(identifier)('???')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: contains
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('contains')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: elem
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('elem')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: A
                    CodeReferenceElement: A
                      PsiElement(identifier)('A')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Boolean
            CodeReferenceElement: Boolean
              PsiElement(identifier)('Boolean')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: ???
            PsiElement(identifier)('???')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: addOne
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('addOne')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: elem
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('elem')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: A
                    CodeReferenceElement: A
                      PsiElement(identifier)('A')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: HS.this.type
            ThisReference
              CodeReferenceElement: HS
                PsiElement(identifier)('HS')
              PsiElement(.)('.')
              PsiElement(this)('this')
            PsiElement(.)('.')
            PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: ???
            PsiElement(identifier)('???')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: clear
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('clear')
          Parameters
            ParametersClause
              PsiElement(()('(')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Unit
            CodeReferenceElement: Unit
              PsiElement(identifier)('Unit')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: ???
            PsiElement(identifier)('???')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: iterator
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('iterator')
          Parameters
            <empty list>
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: Iterator[A]
            SimpleType: Iterator
              CodeReferenceElement: Iterator
                PsiElement(identifier)('Iterator')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: A
                CodeReferenceElement: A
                  PsiElement(identifier)('A')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: ???
            PsiElement(identifier)('???')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: subtractOne
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('subtractOne')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: elem
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('elem')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: A
                    CodeReferenceElement: A
                      PsiElement(identifier)('A')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: HS.this.type
            ThisReference
              CodeReferenceElement: HS
                PsiElement(identifier)('HS')
              PsiElement(.)('.')
              PsiElement(this)('this')
            PsiElement(.)('.')
            PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: ???
            PsiElement(identifier)('???')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScObject: Test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScClass: HashMapCollision1
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(class)('class')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('HashMapCollision1')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: A
              PsiElement(identifier)('A')
            PsiElement(,)(',')
            PsiWhiteSpace(' ')
            TypeParameter: B
              PsiElement(identifier)('+')
              PsiElement(identifier)('B')
            PsiElement(])(']')
          PrimaryConstructor
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            Parameters
              ParametersClause
                PsiElement(()('(')
                ClassParameter: hash
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(var)('var')
                  PsiWhiteSpace(' ')
                  PsiElement(identifier)('hash')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    SimpleType: Int
                      CodeReferenceElement: Int
                        PsiElement(identifier)('Int')
                PsiElement(,)(',')
                PsiWhiteSpace(' ')
                ClassParameter: kvs
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(var)('var')
                  PsiWhiteSpace(' ')
                  PsiElement(identifier)('kvs')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    ParametrizedType: ListMap[A, B @uV]
                      SimpleType: ListMap
                        CodeReferenceElement: ListMap
                          PsiElement(identifier)('ListMap')
                      TypeArgumentsList
                        PsiElement([)('[')
                        SimpleType: A
                          CodeReferenceElement: A
                            PsiElement(identifier)('A')
                        PsiElement(,)(',')
                        PsiWhiteSpace(' ')
                        TypeWithAnnotation: B @uV
                          SimpleType: B
                            CodeReferenceElement: B
                              PsiElement(identifier)('B')
                          PsiWhiteSpace(' ')
                          AnnotationsList
                            Annotation
                              PsiElement(@)('@')
                              AnnotationExpression
                                ConstructorInvocation
                                  SimpleType: uV
                                    CodeReferenceElement: uV
                                      PsiElement(identifier)('uV')
                        PsiElement(])(']')
                PsiElement())(')')
          PsiWhiteSpace(' ')
          ExtendsBlock
            PsiElement(extends)('extends')
            PsiWhiteSpace(' ')
            TemplateParents
              ConstructorInvocation
                ParametrizedType: HashMap[A, B @uV]
                  SimpleType: HashMap
                    CodeReferenceElement: HashMap
                      PsiElement(identifier)('HashMap')
                  TypeArgumentsList
                    PsiElement([)('[')
                    SimpleType: A
                      CodeReferenceElement: A
                        PsiElement(identifier)('A')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    TypeWithAnnotation: B @uV
                      SimpleType: B
                        CodeReferenceElement: B
                          PsiElement(identifier)('B')
                      PsiWhiteSpace(' ')
                      AnnotationsList
                        Annotation
                          PsiElement(@)('@')
                          AnnotationExpression
                            ConstructorInvocation
                              SimpleType: uV
                                CodeReferenceElement: uV
                                  PsiElement(identifier)('uV')
                    PsiElement(])(']')
        PsiWhiteSpace('\n  ')
        ScClass: HashSetCollision1
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(class)('class')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('HashSetCollision1')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: A
              PsiElement(identifier)('A')
            PsiElement(])(']')
          PrimaryConstructor
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            Parameters
              ParametersClause
                PsiElement(()('(')
                ClassParameter: hash
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(var)('var')
                  PsiWhiteSpace(' ')
                  PsiElement(identifier)('hash')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    SimpleType: Int
                      CodeReferenceElement: Int
                        PsiElement(identifier)('Int')
                PsiElement(,)(',')
                PsiWhiteSpace(' ')
                ClassParameter: ks
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(var)('var')
                  PsiWhiteSpace(' ')
                  PsiElement(identifier)('ks')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    ParametrizedType: ListSet[A]
                      SimpleType: ListSet
                        CodeReferenceElement: ListSet
                          PsiElement(identifier)('ListSet')
                      TypeArgumentsList
                        PsiElement([)('[')
                        SimpleType: A
                          CodeReferenceElement: A
                            PsiElement(identifier)('A')
                        PsiElement(])(']')
                PsiElement())(')')
          PsiWhiteSpace(' ')
          ExtendsBlock
            PsiElement(extends)('extends')
            PsiWhiteSpace(' ')
            TemplateParents
              ConstructorInvocation
                ParametrizedType: HS[A]
                  SimpleType: HS
                    CodeReferenceElement: HS
                      PsiElement(identifier)('HS')
                  TypeArgumentsList
                    PsiElement([)('[')
                    SimpleType: A
                      CodeReferenceElement: A
                        PsiElement(identifier)('A')
                    PsiElement(])(']')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: splitArray
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('splitArray')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: T
              PsiElement(identifier)('T')
            PsiElement(])(']')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: ad
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('ad')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  ParametrizedType: Array[Iterable[T]]
                    SimpleType: Array
                      CodeReferenceElement: Array
                        PsiElement(identifier)('Array')
                    TypeArgumentsList
                      PsiElement([)('[')
                      ParametrizedType: Iterable[T]
                        SimpleType: Iterable
                          CodeReferenceElement: Iterable
                            PsiElement(identifier)('Iterable')
                        TypeArgumentsList
                          PsiElement([)('[')
                          SimpleType: T
                            CodeReferenceElement: T
                              PsiElement(identifier)('T')
                          PsiElement(])(']')
                      PsiElement(])(']')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Any
            CodeReferenceElement: Any
              PsiElement(identifier)('Any')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace('\n    ')
          MatchStatement
            MethodCall
              ReferenceExpression: ad
                PsiElement(identifier)('ad')
              ArgumentList
                PsiElement(()('(')
                IntegerLiteral
                  PsiElement(integer)('0')
                PsiElement())(')')
            PsiWhiteSpace(' ')
            PsiElement(match)('match')
            PsiWhiteSpace(' ')
            PsiElement({)('{')
            PsiWhiteSpace('\n      ')
            CaseClauses
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                CompositePattern
                  Scala3 TypedPattern
                    WildcardPattern
                      PsiElement(_)('_')
                    PsiElement(:)(':')
                    PsiWhiteSpace(' ')
                    TypePattern
                      ParametrizedType: HashMapCollision1[_, _]
                        SimpleType: HashMapCollision1
                          CodeReferenceElement: HashMapCollision1
                            PsiElement(identifier)('HashMapCollision1')
                        TypeArgumentsList
                          PsiElement([)('[')
                          TypeVariable: _
                            PsiElement(_)('_')
                          PsiElement(,)(',')
                          PsiWhiteSpace(' ')
                          TypeVariable: _
                            PsiElement(_)('_')
                          PsiElement(])(']')
                  PsiWhiteSpace(' ')
                  PsiElement(identifier)('|')
                  PsiWhiteSpace(' ')
                  Scala3 TypedPattern
                    WildcardPattern
                      PsiElement(_)('_')
                    PsiElement(:)(':')
                    PsiWhiteSpace(' ')
                    TypePattern
                      ParametrizedType: HashSetCollision1[_]
                        SimpleType: HashSetCollision1
                          CodeReferenceElement: HashSetCollision1
                            PsiElement(identifier)('HashSetCollision1')
                        TypeArgumentsList
                          PsiElement([)('[')
                          TypeVariable: _
                            PsiElement(_)('_')
                          PsiElement(])(']')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                BlockOfExpressions
                  NullLiteral
                    PsiElement(null)('null')
            PsiWhiteSpace('\n    ')
            PsiElement(})('}')
        PsiWhiteSpace('\n\n    ')
        PsiComment(comment)('// without type ascription for the one in the body of the last flatmap of each alternative, type inference borks on the existentials')
        PsiWhiteSpace('\n    ')
        PsiComment(comment)('// def splitArray[T >: Nothing <: Any](ad: Array[Iterable[T]]): Any = { import OptionMatching.*')
        PsiWhiteSpace('\n    ')
        PsiComment(comment)('//   runOrElse(ad.apply(0))(((x1: Iterable[T]) => (')
        PsiWhiteSpace('\n    ')
        PsiComment(comment)('//     or(((x4: Iterable[T]) => one(null)),')
        PsiWhiteSpace('\n    ')
        PsiComment(comment)('//       guard(x1.isInstanceOf[Iterable[T] with Test.HashMapCollision1[_,_]], x1.asInstanceOf[Iterable[T] with Test.HashMapCollision1[_,_]]).flatMap(((x2: Iterable[T] with Test.HashMapCollision1[_,_]) => one(x2))),')
        PsiWhiteSpace('\n    ')
        PsiComment(comment)('//       guard(x1.isInstanceOf[Test.HashSetCollision1[_]], x1.asInstanceOf[Iterable[T] with Test.HashSetCollision1[_]]).flatMap(((x3: Iterable[T] with Test.HashSetCollision1[_]) => one(x3)))): Option[Any]).orElse(')
        PsiWhiteSpace('\n    ')
        PsiComment(comment)('//     (zero: Option[Any])))')
        PsiWhiteSpace('\n    ')
        PsiComment(comment)('//   )')
        PsiWhiteSpace('\n    ')
        PsiComment(comment)('// }')
        PsiWhiteSpace('\n\n')
        PsiElement(})('}')
