import scala.util.control.NonFatal

class Try[+T] {
  def transform[U](s: T => Try[U], f: Throwable => Try[U]): Try[U] =
    try this match {
      case Success(v) => s(v)
      case Failure(e) => f(e)
    } catch {
      case NonFatal(e) => Failure(e)
    }
}
final case class Success[+T](value: T) extends Try[T]
final case class Failure[+T](exception: Throwable) extends Try[T] {
  def get: T = throw exception
}
-----
ScalaFile
  ScImportStatement
    PsiElement(import)('import')
    PsiWhiteSpace(' ')
    ImportExpression
      CodeReferenceElement: scala.util.control.NonFatal
        CodeReferenceElement: scala.util.control
          CodeReferenceElement: scala.util
            CodeReferenceElement: scala
              PsiElement(identifier)('scala')
            PsiElement(.)('.')
            PsiElement(identifier)('util')
          PsiElement(.)('.')
          PsiElement(identifier)('control')
        PsiElement(.)('.')
        PsiElement(identifier)('NonFatal')
  PsiWhiteSpace('\n\n')
  ScClass: Try
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Try')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: T
        PsiElement(identifier)('+')
        PsiElement(identifier)('T')
      PsiElement(])(']')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: transform
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('transform')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: U
              PsiElement(identifier)('U')
            PsiElement(])(']')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: s
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('s')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  FunctionalType: T => Try[U]
                    SimpleType: T
                      CodeReferenceElement: T
                        PsiElement(identifier)('T')
                    PsiWhiteSpace(' ')
                    PsiElement(=>)('=>')
                    PsiWhiteSpace(' ')
                    ParametrizedType: Try[U]
                      SimpleType: Try
                        CodeReferenceElement: Try
                          PsiElement(identifier)('Try')
                      TypeArgumentsList
                        PsiElement([)('[')
                        SimpleType: U
                          CodeReferenceElement: U
                            PsiElement(identifier)('U')
                        PsiElement(])(']')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              Parameter: f
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('f')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  FunctionalType: Throwable => Try[U]
                    SimpleType: Throwable
                      CodeReferenceElement: Throwable
                        PsiElement(identifier)('Throwable')
                    PsiWhiteSpace(' ')
                    PsiElement(=>)('=>')
                    PsiWhiteSpace(' ')
                    ParametrizedType: Try[U]
                      SimpleType: Try
                        CodeReferenceElement: Try
                          PsiElement(identifier)('Try')
                      TypeArgumentsList
                        PsiElement([)('[')
                        SimpleType: U
                          CodeReferenceElement: U
                            PsiElement(identifier)('U')
                        PsiElement(])(']')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: Try[U]
            SimpleType: Try
              CodeReferenceElement: Try
                PsiElement(identifier)('Try')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: U
                CodeReferenceElement: U
                  PsiElement(identifier)('U')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace('\n    ')
          TryStatement
            PsiElement(try)('try')
            PsiWhiteSpace(' ')
            MatchStatement
              ThisReference
                PsiElement(this)('this')
              PsiWhiteSpace(' ')
              PsiElement(match)('match')
              PsiWhiteSpace(' ')
              PsiElement({)('{')
              PsiWhiteSpace('\n      ')
              CaseClauses
                CaseClause
                  PsiElement(case)('case')
                  PsiWhiteSpace(' ')
                  ConstructorPattern
                    CodeReferenceElement: Success
                      PsiElement(identifier)('Success')
                    Pattern Argument List
                      PsiElement(()('(')
                      ReferencePattern: v
                        PsiElement(identifier)('v')
                      PsiElement())(')')
                  PsiWhiteSpace(' ')
                  PsiElement(=>)('=>')
                  PsiWhiteSpace(' ')
                  BlockOfExpressions
                    MethodCall
                      ReferenceExpression: s
                        PsiElement(identifier)('s')
                      ArgumentList
                        PsiElement(()('(')
                        ReferenceExpression: v
                          PsiElement(identifier)('v')
                        PsiElement())(')')
                PsiWhiteSpace('\n      ')
                CaseClause
                  PsiElement(case)('case')
                  PsiWhiteSpace(' ')
                  ConstructorPattern
                    CodeReferenceElement: Failure
                      PsiElement(identifier)('Failure')
                    Pattern Argument List
                      PsiElement(()('(')
                      ReferencePattern: e
                        PsiElement(identifier)('e')
                      PsiElement())(')')
                  PsiWhiteSpace(' ')
                  PsiElement(=>)('=>')
                  PsiWhiteSpace(' ')
                  BlockOfExpressions
                    MethodCall
                      ReferenceExpression: f
                        PsiElement(identifier)('f')
                      ArgumentList
                        PsiElement(()('(')
                        ReferenceExpression: e
                          PsiElement(identifier)('e')
                        PsiElement())(')')
              PsiWhiteSpace('\n    ')
              PsiElement(})('}')
            PsiWhiteSpace(' ')
            CatchBlock
              PsiElement(catch)('catch')
              PsiWhiteSpace(' ')
              BlockExpression
                PsiElement({)('{')
                PsiWhiteSpace('\n      ')
                CaseClauses
                  CaseClause
                    PsiElement(case)('case')
                    PsiWhiteSpace(' ')
                    ConstructorPattern
                      CodeReferenceElement: NonFatal
                        PsiElement(identifier)('NonFatal')
                      Pattern Argument List
                        PsiElement(()('(')
                        ReferencePattern: e
                          PsiElement(identifier)('e')
                        PsiElement())(')')
                    PsiWhiteSpace(' ')
                    PsiElement(=>)('=>')
                    PsiWhiteSpace(' ')
                    BlockOfExpressions
                      MethodCall
                        ReferenceExpression: Failure
                          PsiElement(identifier)('Failure')
                        ArgumentList
                          PsiElement(()('(')
                          ReferenceExpression: e
                            PsiElement(identifier)('e')
                          PsiElement())(')')
                PsiWhiteSpace('\n    ')
                PsiElement(})('}')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n')
  ScClass: Success
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(final)('final')
      PsiWhiteSpace(' ')
      PsiElement(case)('case')
    PsiWhiteSpace(' ')
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Success')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: T
        PsiElement(identifier)('+')
        PsiElement(identifier)('T')
      PsiElement(])(']')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        ParametersClause
          PsiElement(()('(')
          ClassParameter: value
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(identifier)('value')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            ParameterType
              SimpleType: T
                CodeReferenceElement: T
                  PsiElement(identifier)('T')
          PsiElement())(')')
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          ParametrizedType: Try[T]
            SimpleType: Try
              CodeReferenceElement: Try
                PsiElement(identifier)('Try')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: T
                CodeReferenceElement: T
                  PsiElement(identifier)('T')
              PsiElement(])(']')
  PsiWhiteSpace('\n')
  ScClass: Failure
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(final)('final')
      PsiWhiteSpace(' ')
      PsiElement(case)('case')
    PsiWhiteSpace(' ')
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Failure')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: T
        PsiElement(identifier)('+')
        PsiElement(identifier)('T')
      PsiElement(])(']')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        ParametersClause
          PsiElement(()('(')
          ClassParameter: exception
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(identifier)('exception')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            ParameterType
              SimpleType: Throwable
                CodeReferenceElement: Throwable
                  PsiElement(identifier)('Throwable')
          PsiElement())(')')
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          ParametrizedType: Try[T]
            SimpleType: Try
              CodeReferenceElement: Try
                PsiElement(identifier)('Try')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: T
                CodeReferenceElement: T
                  PsiElement(identifier)('T')
              PsiElement(])(']')
      PsiWhiteSpace(' ')
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: get
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('get')
          Parameters
            <empty list>
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: T
            CodeReferenceElement: T
              PsiElement(identifier)('T')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ThrowStatement
            PsiElement(throw)('throw')
            PsiWhiteSpace(' ')
            ReferenceExpression: exception
              PsiElement(identifier)('exception')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
