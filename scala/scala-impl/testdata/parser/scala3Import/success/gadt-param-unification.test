trait Expr[T]
final class Lit[T] extends Expr[T]

def foo[X, T1 >: X, T2](m: Expr[T2]): T2 = m match {
  case _: Lit[T1] => ??? : X
}
-----
ScalaFile
  ScTrait: Expr
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Expr')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: T
        PsiElement(identifier)('T')
      PsiElement(])(']')
    ExtendsBlock
      <empty list>
  PsiWhiteSpace('\n')
  ScClass: Lit
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(final)('final')
    PsiWhiteSpace(' ')
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Lit')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: T
        PsiElement(identifier)('T')
      PsiElement(])(']')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          ParametrizedType: Expr[T]
            SimpleType: Expr
              CodeReferenceElement: Expr
                PsiElement(identifier)('Expr')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: T
                CodeReferenceElement: T
                  PsiElement(identifier)('T')
              PsiElement(])(']')
  PsiWhiteSpace('\n\n')
  ScFunctionDefinition: foo
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(def)('def')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('foo')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: X
        PsiElement(identifier)('X')
      PsiElement(,)(',')
      PsiWhiteSpace(' ')
      TypeParameter: T1
        PsiElement(identifier)('T1')
        PsiWhiteSpace(' ')
        PsiElement(>:)('>:')
        PsiWhiteSpace(' ')
        SimpleType: X
          CodeReferenceElement: X
            PsiElement(identifier)('X')
      PsiElement(,)(',')
      PsiWhiteSpace(' ')
      TypeParameter: T2
        PsiElement(identifier)('T2')
      PsiElement(])(']')
    Parameters
      ParametersClause
        PsiElement(()('(')
        Parameter: m
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(identifier)('m')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParameterType
            ParametrizedType: Expr[T2]
              SimpleType: Expr
                CodeReferenceElement: Expr
                  PsiElement(identifier)('Expr')
              TypeArgumentsList
                PsiElement([)('[')
                SimpleType: T2
                  CodeReferenceElement: T2
                    PsiElement(identifier)('T2')
                PsiElement(])(']')
        PsiElement())(')')
    PsiElement(:)(':')
    PsiWhiteSpace(' ')
    SimpleType: T2
      CodeReferenceElement: T2
        PsiElement(identifier)('T2')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    MatchStatement
      ReferenceExpression: m
        PsiElement(identifier)('m')
      PsiWhiteSpace(' ')
      PsiElement(match)('match')
      PsiWhiteSpace(' ')
      PsiElement({)('{')
      PsiWhiteSpace('\n  ')
      CaseClauses
        CaseClause
          PsiElement(case)('case')
          PsiWhiteSpace(' ')
          Scala3 TypedPattern
            WildcardPattern
              PsiElement(_)('_')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            TypePattern
              ParametrizedType: Lit[T1]
                SimpleType: Lit
                  CodeReferenceElement: Lit
                    PsiElement(identifier)('Lit')
                TypeArgumentsList
                  PsiElement([)('[')
                  SimpleType: T1
                    CodeReferenceElement: T1
                      PsiElement(identifier)('T1')
                  PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=>)('=>')
          PsiWhiteSpace(' ')
          BlockOfExpressions
            TypedExpression
              ReferenceExpression: ???
                PsiElement(identifier)('???')
              PsiWhiteSpace(' ')
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              SimpleType: X
                CodeReferenceElement: X
                  PsiElement(identifier)('X')
      PsiWhiteSpace('\n')
      PsiElement(})('}')
