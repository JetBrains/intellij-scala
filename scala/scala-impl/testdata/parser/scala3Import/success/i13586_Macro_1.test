import scala.quoted._

object Position {
  def withPosition[T](fun: Expr[Unit => T])(using quotes: Quotes, typeOfT: Type[T]): Expr[T] =
    '{${fun}.apply(null)}
}
-----
ScalaFile
  ScImportStatement
    PsiElement(import)('import')
    PsiWhiteSpace(' ')
    ImportExpression
      CodeReferenceElement: scala.quoted
        CodeReferenceElement: scala
          PsiElement(identifier)('scala')
        PsiElement(.)('.')
        PsiElement(identifier)('quoted')
      PsiElement(.)('.')
      PsiElement(_)('_')
  PsiWhiteSpace('\n\n')
  ScObject: Position
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Position')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: withPosition
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('withPosition')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: T
              PsiElement(identifier)('T')
            PsiElement(])(']')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: fun
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('fun')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  ParametrizedType: Expr[Unit => T]
                    SimpleType: Expr
                      CodeReferenceElement: Expr
                        PsiElement(identifier)('Expr')
                    TypeArgumentsList
                      PsiElement([)('[')
                      FunctionalType: Unit => T
                        SimpleType: Unit
                          CodeReferenceElement: Unit
                            PsiElement(identifier)('Unit')
                        PsiWhiteSpace(' ')
                        PsiElement(=>)('=>')
                        PsiWhiteSpace(' ')
                        SimpleType: T
                          CodeReferenceElement: T
                            PsiElement(identifier)('T')
                      PsiElement(])(']')
              PsiElement())(')')
            ParametersClause
              PsiElement(()('(')
              PsiElement(using)('using')
              PsiWhiteSpace(' ')
              Parameter: quotes
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('quotes')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Quotes
                    CodeReferenceElement: Quotes
                      PsiElement(identifier)('Quotes')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              Parameter: typeOfT
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('typeOfT')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  ParametrizedType: Type[T]
                    SimpleType: Type
                      CodeReferenceElement: Type
                        PsiElement(identifier)('Type')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: T
                        CodeReferenceElement: T
                          PsiElement(identifier)('T')
                      PsiElement(])(']')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: Expr[T]
            SimpleType: Expr
              CodeReferenceElement: Expr
                PsiElement(identifier)('Expr')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: T
                CodeReferenceElement: T
                  PsiElement(identifier)('T')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace('\n    ')
          QuotedBlock
            PsiElement(')(''')
            PsiElement({)('{')
            MethodCall
              ReferenceExpression: ${fun}.apply
                SplicedBlock
                  PsiElement($)('$')
                  PsiElement({)('{')
                  ReferenceExpression: fun
                    PsiElement(identifier)('fun')
                  PsiElement(})('}')
                PsiElement(.)('.')
                PsiElement(identifier)('apply')
              ArgumentList
                PsiElement(()('(')
                NullLiteral
                  PsiElement(null)('null')
                PsiElement())(')')
            PsiElement(})('}')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
