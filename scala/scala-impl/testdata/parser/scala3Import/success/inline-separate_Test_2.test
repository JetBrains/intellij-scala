import A.*
object Test extends App {
  class Foo(f: => Foo)
  transparent inline implicit def foo(implicit f: => Foo): Foo = new Foo(summon[Foo])
  def summonFoo(implicit ev: Foo): Foo = ev
  summonFoo
}
-----
ScalaFile
  ScImportStatement
    PsiElement(import)('import')
    PsiWhiteSpace(' ')
    ImportExpression
      CodeReferenceElement: A
        PsiElement(identifier)('A')
      PsiElement(.)('.')
      PsiElement(*)('*')
  PsiWhiteSpace('\n')
  ScObject: Test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test')
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          SimpleType: App
            CodeReferenceElement: App
              PsiElement(identifier)('App')
      PsiWhiteSpace(' ')
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScClass: Foo
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(class)('class')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Foo')
          PrimaryConstructor
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            Parameters
              ParametersClause
                PsiElement(()('(')
                ClassParameter: f
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(identifier)('f')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    PsiElement(=>)('=>')
                    PsiWhiteSpace(' ')
                    SimpleType: Foo
                      CodeReferenceElement: Foo
                        PsiElement(identifier)('Foo')
                PsiElement())(')')
          ExtendsBlock
            <empty list>
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: foo
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(transparent)('transparent')
            PsiWhiteSpace(' ')
            PsiElement(inline)('inline')
            PsiWhiteSpace(' ')
            PsiElement(implicit)('implicit')
          PsiWhiteSpace(' ')
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('foo')
          Parameters
            ParametersClause
              PsiElement(()('(')
              PsiElement(implicit)('implicit')
              PsiWhiteSpace(' ')
              Parameter: f
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('f')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  PsiElement(=>)('=>')
                  PsiWhiteSpace(' ')
                  SimpleType: Foo
                    CodeReferenceElement: Foo
                      PsiElement(identifier)('Foo')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Foo
            CodeReferenceElement: Foo
              PsiElement(identifier)('Foo')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ScNewTemplateDefinition: <anonymous>
            PsiElement(new)('new')
            PsiWhiteSpace(' ')
            ExtendsBlock
              TemplateParents
                ConstructorInvocation
                  SimpleType: Foo
                    CodeReferenceElement: Foo
                      PsiElement(identifier)('Foo')
                  ArgumentList
                    PsiElement(()('(')
                    GenericCall
                      ReferenceExpression: summon
                        PsiElement(identifier)('summon')
                      TypeArgumentsList
                        PsiElement([)('[')
                        SimpleType: Foo
                          CodeReferenceElement: Foo
                            PsiElement(identifier)('Foo')
                        PsiElement(])(']')
                    PsiElement())(')')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: summonFoo
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('summonFoo')
          Parameters
            ParametersClause
              PsiElement(()('(')
              PsiElement(implicit)('implicit')
              PsiWhiteSpace(' ')
              Parameter: ev
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('ev')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Foo
                    CodeReferenceElement: Foo
                      PsiElement(identifier)('Foo')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Foo
            CodeReferenceElement: Foo
              PsiElement(identifier)('Foo')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: ev
            PsiElement(identifier)('ev')
        PsiWhiteSpace('\n  ')
        ReferenceExpression: summonFoo
          PsiElement(identifier)('summonFoo')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
