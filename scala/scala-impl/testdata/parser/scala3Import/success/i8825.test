sealed trait Nat
case class Succ[N <: Nat](n: N) extends Nat
case object Zero extends Nat
type Zero = Zero.type
type One = Succ[Zero]

sealed trait HList
case class HCons[+H, +T <: HList](head: H, tail: T) extends HList
case object HNil extends HList
type HNil = HNil.type

trait Length[L <: HList] {
  type Out <: Nat
}
object Length {
  type Aux[L <: HList, Out0 <: Nat] = Length[L] { type Out = Out0 }
  def instance[L <: HList, Out0 <: Nat]: Aux[L, Out0] = new Length[L] { type Out = Out0 }

  given hnilLength: Aux[HNil, Zero] = instance
  given hconsLength[H, T <: HList] (using length: Length[T]): Aux[HCons[H, T], Succ[length.Out]] = instance // (*)
  //given hconsLength[H, T <: HList, N <: Nat] (using length: Aux[T, N]): Aux[HCons[H, T], Succ[N]] = instance // (**)
}

val test = summon[Length.Aux[HCons[Int, HNil], One]]
-----
ScalaFile
  ScTrait: Nat
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(sealed)('sealed')
    PsiWhiteSpace(' ')
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Nat')
    ExtendsBlock
      <empty list>
  PsiWhiteSpace('\n')
  ScClass: Succ
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(case)('case')
    PsiWhiteSpace(' ')
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Succ')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: N
        PsiElement(identifier)('N')
        PsiWhiteSpace(' ')
        PsiElement(<:)('<:')
        PsiWhiteSpace(' ')
        SimpleType: Nat
          CodeReferenceElement: Nat
            PsiElement(identifier)('Nat')
      PsiElement(])(']')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        ParametersClause
          PsiElement(()('(')
          ClassParameter: n
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(identifier)('n')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            ParameterType
              SimpleType: N
                CodeReferenceElement: N
                  PsiElement(identifier)('N')
          PsiElement())(')')
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          SimpleType: Nat
            CodeReferenceElement: Nat
              PsiElement(identifier)('Nat')
  PsiWhiteSpace('\n')
  ScObject: Zero
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(case)('case')
    PsiWhiteSpace(' ')
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Zero')
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          SimpleType: Nat
            CodeReferenceElement: Nat
              PsiElement(identifier)('Nat')
  PsiWhiteSpace('\n')
  ScTypeAliasDefinition: Zero
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(type)('type')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Zero')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    SimpleType: Zero.type
      CodeReferenceElement: Zero
        PsiElement(identifier)('Zero')
      PsiElement(.)('.')
      PsiElement(type)('type')
  PsiWhiteSpace('\n')
  ScTypeAliasDefinition: One
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(type)('type')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('One')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    ParametrizedType: Succ[Zero]
      SimpleType: Succ
        CodeReferenceElement: Succ
          PsiElement(identifier)('Succ')
      TypeArgumentsList
        PsiElement([)('[')
        SimpleType: Zero
          CodeReferenceElement: Zero
            PsiElement(identifier)('Zero')
        PsiElement(])(']')
  PsiWhiteSpace('\n\n')
  ScTrait: HList
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(sealed)('sealed')
    PsiWhiteSpace(' ')
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('HList')
    ExtendsBlock
      <empty list>
  PsiWhiteSpace('\n')
  ScClass: HCons
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(case)('case')
    PsiWhiteSpace(' ')
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('HCons')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: H
        PsiElement(identifier)('+')
        PsiElement(identifier)('H')
      PsiElement(,)(',')
      PsiWhiteSpace(' ')
      TypeParameter: T
        PsiElement(identifier)('+')
        PsiElement(identifier)('T')
        PsiWhiteSpace(' ')
        PsiElement(<:)('<:')
        PsiWhiteSpace(' ')
        SimpleType: HList
          CodeReferenceElement: HList
            PsiElement(identifier)('HList')
      PsiElement(])(']')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        ParametersClause
          PsiElement(()('(')
          ClassParameter: head
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(identifier)('head')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            ParameterType
              SimpleType: H
                CodeReferenceElement: H
                  PsiElement(identifier)('H')
          PsiElement(,)(',')
          PsiWhiteSpace(' ')
          ClassParameter: tail
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(identifier)('tail')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            ParameterType
              SimpleType: T
                CodeReferenceElement: T
                  PsiElement(identifier)('T')
          PsiElement())(')')
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          SimpleType: HList
            CodeReferenceElement: HList
              PsiElement(identifier)('HList')
  PsiWhiteSpace('\n')
  ScObject: HNil
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(case)('case')
    PsiWhiteSpace(' ')
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('HNil')
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          SimpleType: HList
            CodeReferenceElement: HList
              PsiElement(identifier)('HList')
  PsiWhiteSpace('\n')
  ScTypeAliasDefinition: HNil
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(type)('type')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('HNil')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    SimpleType: HNil.type
      CodeReferenceElement: HNil
        PsiElement(identifier)('HNil')
      PsiElement(.)('.')
      PsiElement(type)('type')
  PsiWhiteSpace('\n\n')
  ScTrait: Length
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Length')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: L
        PsiElement(identifier)('L')
        PsiWhiteSpace(' ')
        PsiElement(<:)('<:')
        PsiWhiteSpace(' ')
        SimpleType: HList
          CodeReferenceElement: HList
            PsiElement(identifier)('HList')
      PsiElement(])(']')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScTypeAliasDeclaration: Out
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Out')
          PsiWhiteSpace(' ')
          PsiElement(<:)('<:')
          PsiWhiteSpace(' ')
          SimpleType: Nat
            CodeReferenceElement: Nat
              PsiElement(identifier)('Nat')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n')
  ScObject: Length
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Length')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScTypeAliasDefinition: Aux
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Aux')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: L
              PsiElement(identifier)('L')
              PsiWhiteSpace(' ')
              PsiElement(<:)('<:')
              PsiWhiteSpace(' ')
              SimpleType: HList
                CodeReferenceElement: HList
                  PsiElement(identifier)('HList')
            PsiElement(,)(',')
            PsiWhiteSpace(' ')
            TypeParameter: Out0
              PsiElement(identifier)('Out0')
              PsiWhiteSpace(' ')
              PsiElement(<:)('<:')
              PsiWhiteSpace(' ')
              SimpleType: Nat
                CodeReferenceElement: Nat
                  PsiElement(identifier)('Nat')
            PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          CompoundType: Length[L] { type Out = Out0 }
            ParametrizedType: Length[L]
              SimpleType: Length
                CodeReferenceElement: Length
                  PsiElement(identifier)('Length')
              TypeArgumentsList
                PsiElement([)('[')
                SimpleType: L
                  CodeReferenceElement: L
                    PsiElement(identifier)('L')
                PsiElement(])(']')
            PsiWhiteSpace(' ')
            Refinement
              PsiElement({)('{')
              PsiWhiteSpace(' ')
              ScTypeAliasDefinition: Out
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(type)('type')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('Out')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                SimpleType: Out0
                  CodeReferenceElement: Out0
                    PsiElement(identifier)('Out0')
              PsiWhiteSpace(' ')
              PsiElement(})('}')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: instance
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('instance')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: L
              PsiElement(identifier)('L')
              PsiWhiteSpace(' ')
              PsiElement(<:)('<:')
              PsiWhiteSpace(' ')
              SimpleType: HList
                CodeReferenceElement: HList
                  PsiElement(identifier)('HList')
            PsiElement(,)(',')
            PsiWhiteSpace(' ')
            TypeParameter: Out0
              PsiElement(identifier)('Out0')
              PsiWhiteSpace(' ')
              PsiElement(<:)('<:')
              PsiWhiteSpace(' ')
              SimpleType: Nat
                CodeReferenceElement: Nat
                  PsiElement(identifier)('Nat')
            PsiElement(])(']')
          Parameters
            <empty list>
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: Aux[L, Out0]
            SimpleType: Aux
              CodeReferenceElement: Aux
                PsiElement(identifier)('Aux')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: L
                CodeReferenceElement: L
                  PsiElement(identifier)('L')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              SimpleType: Out0
                CodeReferenceElement: Out0
                  PsiElement(identifier)('Out0')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ScNewTemplateDefinition: <anonymous>
            PsiElement(new)('new')
            PsiWhiteSpace(' ')
            ExtendsBlock
              TemplateParents
                ConstructorInvocation
                  ParametrizedType: Length[L]
                    SimpleType: Length
                      CodeReferenceElement: Length
                        PsiElement(identifier)('Length')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: L
                        CodeReferenceElement: L
                          PsiElement(identifier)('L')
                      PsiElement(])(']')
              PsiWhiteSpace(' ')
              ScTemplateBody
                PsiElement({)('{')
                PsiWhiteSpace(' ')
                ScTypeAliasDefinition: Out
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(type)('type')
                  PsiWhiteSpace(' ')
                  PsiElement(identifier)('Out')
                  PsiWhiteSpace(' ')
                  PsiElement(=)('=')
                  PsiWhiteSpace(' ')
                  SimpleType: Out0
                    CodeReferenceElement: Out0
                      PsiElement(identifier)('Out0')
                PsiWhiteSpace(' ')
                PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        ScGivenAliasDefinition: hnilLength
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(given)('given')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('hnilLength')
          Parameters
            <empty list>
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: Aux[HNil, Zero]
            SimpleType: Aux
              CodeReferenceElement: Aux
                PsiElement(identifier)('Aux')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: HNil
                CodeReferenceElement: HNil
                  PsiElement(identifier)('HNil')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              SimpleType: Zero
                CodeReferenceElement: Zero
                  PsiElement(identifier)('Zero')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: instance
            PsiElement(identifier)('instance')
        PsiWhiteSpace('\n  ')
        ScGivenAliasDefinition: hconsLength
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(given)('given')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('hconsLength')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: H
              PsiElement(identifier)('H')
            PsiElement(,)(',')
            PsiWhiteSpace(' ')
            TypeParameter: T
              PsiElement(identifier)('T')
              PsiWhiteSpace(' ')
              PsiElement(<:)('<:')
              PsiWhiteSpace(' ')
              SimpleType: HList
                CodeReferenceElement: HList
                  PsiElement(identifier)('HList')
            PsiElement(])(']')
          PsiWhiteSpace(' ')
          Parameters
            ParametersClause
              PsiElement(()('(')
              PsiElement(using)('using')
              PsiWhiteSpace(' ')
              Parameter: length
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('length')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  ParametrizedType: Length[T]
                    SimpleType: Length
                      CodeReferenceElement: Length
                        PsiElement(identifier)('Length')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: T
                        CodeReferenceElement: T
                          PsiElement(identifier)('T')
                      PsiElement(])(']')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: Aux[HCons[H, T], Succ[length.Out]]
            SimpleType: Aux
              CodeReferenceElement: Aux
                PsiElement(identifier)('Aux')
            TypeArgumentsList
              PsiElement([)('[')
              ParametrizedType: HCons[H, T]
                SimpleType: HCons
                  CodeReferenceElement: HCons
                    PsiElement(identifier)('HCons')
                TypeArgumentsList
                  PsiElement([)('[')
                  SimpleType: H
                    CodeReferenceElement: H
                      PsiElement(identifier)('H')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  SimpleType: T
                    CodeReferenceElement: T
                      PsiElement(identifier)('T')
                  PsiElement(])(']')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              ParametrizedType: Succ[length.Out]
                SimpleType: Succ
                  CodeReferenceElement: Succ
                    PsiElement(identifier)('Succ')
                TypeArgumentsList
                  PsiElement([)('[')
                  SimpleType: length.Out
                    CodeReferenceElement: length.Out
                      CodeReferenceElement: length
                        PsiElement(identifier)('length')
                      PsiElement(.)('.')
                      PsiElement(identifier)('Out')
                  PsiElement(])(']')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: instance
            PsiElement(identifier)('instance')
        PsiWhiteSpace(' ')
        PsiComment(comment)('// (*)')
        PsiWhiteSpace('\n  ')
        PsiComment(comment)('//given hconsLength[H, T <: HList, N <: Nat] (using length: Aux[T, N]): Aux[HCons[H, T], Succ[N]] = instance // (**)')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScPatternDefinition: test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(val)('val')
    PsiWhiteSpace(' ')
    ListOfPatterns
      ReferencePattern: test
        PsiElement(identifier)('test')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    GenericCall
      ReferenceExpression: summon
        PsiElement(identifier)('summon')
      TypeArgumentsList
        PsiElement([)('[')
        ParametrizedType: Length.Aux[HCons[Int, HNil], One]
          SimpleType: Length.Aux
            CodeReferenceElement: Length.Aux
              CodeReferenceElement: Length
                PsiElement(identifier)('Length')
              PsiElement(.)('.')
              PsiElement(identifier)('Aux')
          TypeArgumentsList
            PsiElement([)('[')
            ParametrizedType: HCons[Int, HNil]
              SimpleType: HCons
                CodeReferenceElement: HCons
                  PsiElement(identifier)('HCons')
              TypeArgumentsList
                PsiElement([)('[')
                SimpleType: Int
                  CodeReferenceElement: Int
                    PsiElement(identifier)('Int')
                PsiElement(,)(',')
                PsiWhiteSpace(' ')
                SimpleType: HNil
                  CodeReferenceElement: HNil
                    PsiElement(identifier)('HNil')
                PsiElement(])(']')
            PsiElement(,)(',')
            PsiWhiteSpace(' ')
            SimpleType: One
              CodeReferenceElement: One
                PsiElement(identifier)('One')
            PsiElement(])(']')
        PsiElement(])(']')
