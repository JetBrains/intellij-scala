abstract class LIST[+T] {

  def isEmpty: Boolean
  def head: T
  def tail: LIST[T]

  def prepend [U >: T] (x: U): LIST[U] = new CONS(x, this)

  def map[U](f: T => U): LIST[U] = if (isEmpty) NIL else tail.map(f).prepend(f(head))

}

object NIL extends LIST[Nothing] {
  def isEmpty = true
  def head = throw new Error
  def tail = ???
}

class CONS[U](hd: U, tl: LIST[U]) extends LIST[U] {
  def isEmpty = false
  def head: U = hd
  def tail = tl
}

object Inferred {

  def foo[T](x: T): T = x

  val x = foo(1)

  val y = foo("abc")

  def bar[U](xs: LIST[U]): LIST[U] = xs

  val n = NIL

  val nn = bar(NIL)

  val ints: LIST[Int] = NIL prepend 1

  val ints1 = NIL prepend 1 prepend 2

  val a = if (1 == 0) NIL else ints

  val n2 = scala.collection.immutable.Nil

  val ss2: scala.collection.immutable.List[String] = "abc" :: n2

  val ss3 = "abc" :: n2

  def cl = ((x: Int) => x + 1)

  val ints2 = ints map (_ + 1)

  val ints3 = new CONS[Int](1, NIL)

  val ints4 = new CONS(1, NIL)
}
-----
ScalaFile
  ScClass: LIST
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(abstract)('abstract')
    PsiWhiteSpace(' ')
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('LIST')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: T
        PsiElement(identifier)('+')
        PsiElement(identifier)('T')
      PsiElement(])(']')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDeclaration: isEmpty
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('isEmpty')
          Parameters
            <empty list>
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Boolean
            CodeReferenceElement: Boolean
              PsiElement(identifier)('Boolean')
        PsiWhiteSpace('\n  ')
        ScFunctionDeclaration: head
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('head')
          Parameters
            <empty list>
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: T
            CodeReferenceElement: T
              PsiElement(identifier)('T')
        PsiWhiteSpace('\n  ')
        ScFunctionDeclaration: tail
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('tail')
          Parameters
            <empty list>
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: LIST[T]
            SimpleType: LIST
              CodeReferenceElement: LIST
                PsiElement(identifier)('LIST')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: T
                CodeReferenceElement: T
                  PsiElement(identifier)('T')
              PsiElement(])(']')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: prepend
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('prepend')
          PsiWhiteSpace(' ')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: U
              PsiElement(identifier)('U')
              PsiWhiteSpace(' ')
              PsiElement(>:)('>:')
              PsiWhiteSpace(' ')
              SimpleType: T
                CodeReferenceElement: T
                  PsiElement(identifier)('T')
            PsiElement(])(']')
          PsiWhiteSpace(' ')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: x
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: U
                    CodeReferenceElement: U
                      PsiElement(identifier)('U')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: LIST[U]
            SimpleType: LIST
              CodeReferenceElement: LIST
                PsiElement(identifier)('LIST')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: U
                CodeReferenceElement: U
                  PsiElement(identifier)('U')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ScNewTemplateDefinition: <anonymous>
            PsiElement(new)('new')
            PsiWhiteSpace(' ')
            ExtendsBlock
              TemplateParents
                ConstructorInvocation
                  SimpleType: CONS
                    CodeReferenceElement: CONS
                      PsiElement(identifier)('CONS')
                  ArgumentList
                    PsiElement(()('(')
                    ReferenceExpression: x
                      PsiElement(identifier)('x')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    ThisReference
                      PsiElement(this)('this')
                    PsiElement())(')')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: map
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('map')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: U
              PsiElement(identifier)('U')
            PsiElement(])(']')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: f
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('f')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  FunctionalType: T => U
                    SimpleType: T
                      CodeReferenceElement: T
                        PsiElement(identifier)('T')
                    PsiWhiteSpace(' ')
                    PsiElement(=>)('=>')
                    PsiWhiteSpace(' ')
                    SimpleType: U
                      CodeReferenceElement: U
                        PsiElement(identifier)('U')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: LIST[U]
            SimpleType: LIST
              CodeReferenceElement: LIST
                PsiElement(identifier)('LIST')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: U
                CodeReferenceElement: U
                  PsiElement(identifier)('U')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          IfStatement
            PsiElement(if)('if')
            PsiWhiteSpace(' ')
            PsiElement(()('(')
            ReferenceExpression: isEmpty
              PsiElement(identifier)('isEmpty')
            PsiElement())(')')
            PsiWhiteSpace(' ')
            ReferenceExpression: NIL
              PsiElement(identifier)('NIL')
            PsiWhiteSpace(' ')
            PsiElement(else)('else')
            PsiWhiteSpace(' ')
            MethodCall
              ReferenceExpression: tail.map(f).prepend
                MethodCall
                  ReferenceExpression: tail.map
                    ReferenceExpression: tail
                      PsiElement(identifier)('tail')
                    PsiElement(.)('.')
                    PsiElement(identifier)('map')
                  ArgumentList
                    PsiElement(()('(')
                    ReferenceExpression: f
                      PsiElement(identifier)('f')
                    PsiElement())(')')
                PsiElement(.)('.')
                PsiElement(identifier)('prepend')
              ArgumentList
                PsiElement(()('(')
                MethodCall
                  ReferenceExpression: f
                    PsiElement(identifier)('f')
                  ArgumentList
                    PsiElement(()('(')
                    ReferenceExpression: head
                      PsiElement(identifier)('head')
                    PsiElement())(')')
                PsiElement())(')')
        PsiWhiteSpace('\n\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScObject: NIL
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('NIL')
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          ParametrizedType: LIST[Nothing]
            SimpleType: LIST
              CodeReferenceElement: LIST
                PsiElement(identifier)('LIST')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: Nothing
                CodeReferenceElement: Nothing
                  PsiElement(identifier)('Nothing')
              PsiElement(])(']')
      PsiWhiteSpace(' ')
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: isEmpty
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('isEmpty')
          Parameters
            <empty list>
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          BooleanLiteral
            PsiElement(true)('true')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: head
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('head')
          Parameters
            <empty list>
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ThrowStatement
            PsiElement(throw)('throw')
            PsiWhiteSpace(' ')
            ScNewTemplateDefinition: <anonymous>
              PsiElement(new)('new')
              PsiWhiteSpace(' ')
              ExtendsBlock
                TemplateParents
                  ConstructorInvocation
                    SimpleType: Error
                      CodeReferenceElement: Error
                        PsiElement(identifier)('Error')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: tail
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('tail')
          Parameters
            <empty list>
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: ???
            PsiElement(identifier)('???')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScClass: CONS
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('CONS')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: U
        PsiElement(identifier)('U')
      PsiElement(])(']')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        ParametersClause
          PsiElement(()('(')
          ClassParameter: hd
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(identifier)('hd')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            ParameterType
              SimpleType: U
                CodeReferenceElement: U
                  PsiElement(identifier)('U')
          PsiElement(,)(',')
          PsiWhiteSpace(' ')
          ClassParameter: tl
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(identifier)('tl')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            ParameterType
              ParametrizedType: LIST[U]
                SimpleType: LIST
                  CodeReferenceElement: LIST
                    PsiElement(identifier)('LIST')
                TypeArgumentsList
                  PsiElement([)('[')
                  SimpleType: U
                    CodeReferenceElement: U
                      PsiElement(identifier)('U')
                  PsiElement(])(']')
          PsiElement())(')')
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          ParametrizedType: LIST[U]
            SimpleType: LIST
              CodeReferenceElement: LIST
                PsiElement(identifier)('LIST')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: U
                CodeReferenceElement: U
                  PsiElement(identifier)('U')
              PsiElement(])(']')
      PsiWhiteSpace(' ')
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: isEmpty
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('isEmpty')
          Parameters
            <empty list>
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          BooleanLiteral
            PsiElement(false)('false')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: head
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('head')
          Parameters
            <empty list>
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: U
            CodeReferenceElement: U
              PsiElement(identifier)('U')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: hd
            PsiElement(identifier)('hd')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: tail
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('tail')
          Parameters
            <empty list>
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: tl
            PsiElement(identifier)('tl')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScObject: Inferred
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Inferred')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: foo
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('foo')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: T
              PsiElement(identifier)('T')
            PsiElement(])(']')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: x
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: T
                    CodeReferenceElement: T
                      PsiElement(identifier)('T')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: T
            CodeReferenceElement: T
              PsiElement(identifier)('T')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: x
            PsiElement(identifier)('x')
        PsiWhiteSpace('\n\n  ')
        ScPatternDefinition: x
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: x
              PsiElement(identifier)('x')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: foo
              PsiElement(identifier)('foo')
            ArgumentList
              PsiElement(()('(')
              IntegerLiteral
                PsiElement(integer)('1')
              PsiElement())(')')
        PsiWhiteSpace('\n\n  ')
        ScPatternDefinition: y
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: y
              PsiElement(identifier)('y')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: foo
              PsiElement(identifier)('foo')
            ArgumentList
              PsiElement(()('(')
              StringLiteral
                PsiElement(string content)('"abc"')
              PsiElement())(')')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: bar
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('bar')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: U
              PsiElement(identifier)('U')
            PsiElement(])(']')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: xs
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('xs')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  ParametrizedType: LIST[U]
                    SimpleType: LIST
                      CodeReferenceElement: LIST
                        PsiElement(identifier)('LIST')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: U
                        CodeReferenceElement: U
                          PsiElement(identifier)('U')
                      PsiElement(])(']')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: LIST[U]
            SimpleType: LIST
              CodeReferenceElement: LIST
                PsiElement(identifier)('LIST')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: U
                CodeReferenceElement: U
                  PsiElement(identifier)('U')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: xs
            PsiElement(identifier)('xs')
        PsiWhiteSpace('\n\n  ')
        ScPatternDefinition: n
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: n
              PsiElement(identifier)('n')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: NIL
            PsiElement(identifier)('NIL')
        PsiWhiteSpace('\n\n  ')
        ScPatternDefinition: nn
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: nn
              PsiElement(identifier)('nn')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: bar
              PsiElement(identifier)('bar')
            ArgumentList
              PsiElement(()('(')
              ReferenceExpression: NIL
                PsiElement(identifier)('NIL')
              PsiElement())(')')
        PsiWhiteSpace('\n\n  ')
        ScPatternDefinition: ints
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: ints
              PsiElement(identifier)('ints')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: LIST[Int]
            SimpleType: LIST
              CodeReferenceElement: LIST
                PsiElement(identifier)('LIST')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: Int
                CodeReferenceElement: Int
                  PsiElement(identifier)('Int')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          InfixExpression
            ReferenceExpression: NIL
              PsiElement(identifier)('NIL')
            PsiWhiteSpace(' ')
            ReferenceExpression: prepend
              PsiElement(identifier)('prepend')
            PsiWhiteSpace(' ')
            IntegerLiteral
              PsiElement(integer)('1')
        PsiWhiteSpace('\n\n  ')
        ScPatternDefinition: ints1
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: ints1
              PsiElement(identifier)('ints1')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          InfixExpression
            InfixExpression
              ReferenceExpression: NIL
                PsiElement(identifier)('NIL')
              PsiWhiteSpace(' ')
              ReferenceExpression: prepend
                PsiElement(identifier)('prepend')
              PsiWhiteSpace(' ')
              IntegerLiteral
                PsiElement(integer)('1')
            PsiWhiteSpace(' ')
            ReferenceExpression: prepend
              PsiElement(identifier)('prepend')
            PsiWhiteSpace(' ')
            IntegerLiteral
              PsiElement(integer)('2')
        PsiWhiteSpace('\n\n  ')
        ScPatternDefinition: a
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: a
              PsiElement(identifier)('a')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          IfStatement
            PsiElement(if)('if')
            PsiWhiteSpace(' ')
            PsiElement(()('(')
            InfixExpression
              IntegerLiteral
                PsiElement(integer)('1')
              PsiWhiteSpace(' ')
              ReferenceExpression: ==
                PsiElement(identifier)('==')
              PsiWhiteSpace(' ')
              IntegerLiteral
                PsiElement(integer)('0')
            PsiElement())(')')
            PsiWhiteSpace(' ')
            ReferenceExpression: NIL
              PsiElement(identifier)('NIL')
            PsiWhiteSpace(' ')
            PsiElement(else)('else')
            PsiWhiteSpace(' ')
            ReferenceExpression: ints
              PsiElement(identifier)('ints')
        PsiWhiteSpace('\n\n  ')
        ScPatternDefinition: n2
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: n2
              PsiElement(identifier)('n2')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: scala.collection.immutable.Nil
            ReferenceExpression: scala.collection.immutable
              ReferenceExpression: scala.collection
                ReferenceExpression: scala
                  PsiElement(identifier)('scala')
                PsiElement(.)('.')
                PsiElement(identifier)('collection')
              PsiElement(.)('.')
              PsiElement(identifier)('immutable')
            PsiElement(.)('.')
            PsiElement(identifier)('Nil')
        PsiWhiteSpace('\n\n  ')
        ScPatternDefinition: ss2
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: ss2
              PsiElement(identifier)('ss2')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: scala.collection.immutable.List[String]
            SimpleType: scala.collection.immutable.List
              CodeReferenceElement: scala.collection.immutable.List
                CodeReferenceElement: scala.collection.immutable
                  CodeReferenceElement: scala.collection
                    CodeReferenceElement: scala
                      PsiElement(identifier)('scala')
                    PsiElement(.)('.')
                    PsiElement(identifier)('collection')
                  PsiElement(.)('.')
                  PsiElement(identifier)('immutable')
                PsiElement(.)('.')
                PsiElement(identifier)('List')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: String
                CodeReferenceElement: String
                  PsiElement(identifier)('String')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          InfixExpression
            StringLiteral
              PsiElement(string content)('"abc"')
            PsiWhiteSpace(' ')
            ReferenceExpression: ::
              PsiElement(identifier)('::')
            PsiWhiteSpace(' ')
            ReferenceExpression: n2
              PsiElement(identifier)('n2')
        PsiWhiteSpace('\n\n  ')
        ScPatternDefinition: ss3
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: ss3
              PsiElement(identifier)('ss3')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          InfixExpression
            StringLiteral
              PsiElement(string content)('"abc"')
            PsiWhiteSpace(' ')
            ReferenceExpression: ::
              PsiElement(identifier)('::')
            PsiWhiteSpace(' ')
            ReferenceExpression: n2
              PsiElement(identifier)('n2')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: cl
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('cl')
          Parameters
            <empty list>
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ExpressionInParenthesis
            PsiElement(()('(')
            FunctionExpression
              Parameters
                ParametersClause
                  PsiElement(()('(')
                  Parameter: x
                    AnnotationsList
                      <empty list>
                    PsiElement(identifier)('x')
                    PsiElement(:)(':')
                    PsiWhiteSpace(' ')
                    ParameterType
                      SimpleType: Int
                        CodeReferenceElement: Int
                          PsiElement(identifier)('Int')
                  PsiElement())(')')
              PsiWhiteSpace(' ')
              PsiElement(=>)('=>')
              PsiWhiteSpace(' ')
              InfixExpression
                ReferenceExpression: x
                  PsiElement(identifier)('x')
                PsiWhiteSpace(' ')
                ReferenceExpression: +
                  PsiElement(identifier)('+')
                PsiWhiteSpace(' ')
                IntegerLiteral
                  PsiElement(integer)('1')
            PsiElement())(')')
        PsiWhiteSpace('\n\n  ')
        ScPatternDefinition: ints2
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: ints2
              PsiElement(identifier)('ints2')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          InfixExpression
            ReferenceExpression: ints
              PsiElement(identifier)('ints')
            PsiWhiteSpace(' ')
            ReferenceExpression: map
              PsiElement(identifier)('map')
            PsiWhiteSpace(' ')
            ExpressionInParenthesis
              PsiElement(()('(')
              InfixExpression
                UnderscoreSection
                  PsiElement(_)('_')
                PsiWhiteSpace(' ')
                ReferenceExpression: +
                  PsiElement(identifier)('+')
                PsiWhiteSpace(' ')
                IntegerLiteral
                  PsiElement(integer)('1')
              PsiElement())(')')
        PsiWhiteSpace('\n\n  ')
        ScPatternDefinition: ints3
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: ints3
              PsiElement(identifier)('ints3')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ScNewTemplateDefinition: <anonymous>
            PsiElement(new)('new')
            PsiWhiteSpace(' ')
            ExtendsBlock
              TemplateParents
                ConstructorInvocation
                  ParametrizedType: CONS[Int]
                    SimpleType: CONS
                      CodeReferenceElement: CONS
                        PsiElement(identifier)('CONS')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: Int
                        CodeReferenceElement: Int
                          PsiElement(identifier)('Int')
                      PsiElement(])(']')
                  ArgumentList
                    PsiElement(()('(')
                    IntegerLiteral
                      PsiElement(integer)('1')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: NIL
                      PsiElement(identifier)('NIL')
                    PsiElement())(')')
        PsiWhiteSpace('\n\n  ')
        ScPatternDefinition: ints4
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: ints4
              PsiElement(identifier)('ints4')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ScNewTemplateDefinition: <anonymous>
            PsiElement(new)('new')
            PsiWhiteSpace(' ')
            ExtendsBlock
              TemplateParents
                ConstructorInvocation
                  SimpleType: CONS
                    CodeReferenceElement: CONS
                      PsiElement(identifier)('CONS')
                  ArgumentList
                    PsiElement(()('(')
                    IntegerLiteral
                      PsiElement(integer)('1')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: NIL
                      PsiElement(identifier)('NIL')
                    PsiElement())(')')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
