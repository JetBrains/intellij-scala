object Foo:
  inline def get = 0

object Bar:
  export Foo._

val v = Bar.get
-----
ScalaFile
  ScObject: Foo
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Foo')
    ExtendsBlock
      ScTemplateBody
        PsiElement(:)(':')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: get
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(inline)('inline')
          PsiWhiteSpace(' ')
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('get')
          Parameters
            <empty list>
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          IntegerLiteral
            PsiElement(integer)('0')
  PsiWhiteSpace('\n\n')
  ScObject: Bar
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Bar')
    ExtendsBlock
      ScTemplateBody
        PsiElement(:)(':')
        PsiWhiteSpace('\n  ')
        ScExportStatement
          PsiElement(export)('export')
          PsiWhiteSpace(' ')
          ImportExpression
            CodeReferenceElement: Foo
              PsiElement(identifier)('Foo')
            PsiElement(.)('.')
            PsiElement(_)('_')
  PsiWhiteSpace('\n\n')
  ScPatternDefinition: v
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(val)('val')
    PsiWhiteSpace(' ')
    ListOfPatterns
      ReferencePattern: v
        PsiElement(identifier)('v')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    ReferenceExpression: Bar.get
      ReferenceExpression: Bar
        PsiElement(identifier)('Bar')
      PsiElement(.)('.')
      PsiElement(identifier)('get')
