trait Wrapper[T] {
    type Out
  }

  type Func[T] =
    T match {
      case String => Long
      case Long   => Int
      case Int    => Float
      case Float => Double
      case Double => Unit
      case Unit => String
    }

  implicit def infer[A]: Wrapper[One[A]] { type Out = Func[A] } = ???

  trait One[A] {
    def use(implicit w: Wrapper[One[A]]): One[w.Out]
  }

  val x: One[Long] = null
  val _ = x.use.use.use.use.use.use.use
-----
ScalaFile
  ScTrait: Wrapper
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Wrapper')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: T
        PsiElement(identifier)('T')
      PsiElement(])(']')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n    ')
        ScTypeAliasDeclaration: Out
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Out')
        PsiWhiteSpace('\n  ')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n  ')
  ScTypeAliasDefinition: Func
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(type)('type')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Func')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: T
        PsiElement(identifier)('T')
      PsiElement(])(']')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace('\n    ')
    MatchType: T match {
      case String => Long
      case Long   => Int
      case Int    => Float
      case Float => Double
      case Double => Unit
      case Unit => String
    }
      SimpleType: T
        CodeReferenceElement: T
          PsiElement(identifier)('T')
      PsiWhiteSpace(' ')
      PsiElement(match)('match')
      PsiWhiteSpace(' ')
      PsiElement({)('{')
      PsiWhiteSpace('\n      ')
      ScMatchTypeCasesImpl(match type cases)
        ScMatchTypeCaseImpl(match type case)
          PsiElement(case)('case')
          PsiWhiteSpace(' ')
          SimpleType: String
            CodeReferenceElement: String
              PsiElement(identifier)('String')
          PsiWhiteSpace(' ')
          PsiElement(=>)('=>')
          PsiWhiteSpace(' ')
          SimpleType: Long
            CodeReferenceElement: Long
              PsiElement(identifier)('Long')
        PsiWhiteSpace('\n      ')
        ScMatchTypeCaseImpl(match type case)
          PsiElement(case)('case')
          PsiWhiteSpace(' ')
          SimpleType: Long
            CodeReferenceElement: Long
              PsiElement(identifier)('Long')
          PsiWhiteSpace('   ')
          PsiElement(=>)('=>')
          PsiWhiteSpace(' ')
          SimpleType: Int
            CodeReferenceElement: Int
              PsiElement(identifier)('Int')
        PsiWhiteSpace('\n      ')
        ScMatchTypeCaseImpl(match type case)
          PsiElement(case)('case')
          PsiWhiteSpace(' ')
          SimpleType: Int
            CodeReferenceElement: Int
              PsiElement(identifier)('Int')
          PsiWhiteSpace('    ')
          PsiElement(=>)('=>')
          PsiWhiteSpace(' ')
          SimpleType: Float
            CodeReferenceElement: Float
              PsiElement(identifier)('Float')
        PsiWhiteSpace('\n      ')
        ScMatchTypeCaseImpl(match type case)
          PsiElement(case)('case')
          PsiWhiteSpace(' ')
          SimpleType: Float
            CodeReferenceElement: Float
              PsiElement(identifier)('Float')
          PsiWhiteSpace(' ')
          PsiElement(=>)('=>')
          PsiWhiteSpace(' ')
          SimpleType: Double
            CodeReferenceElement: Double
              PsiElement(identifier)('Double')
        PsiWhiteSpace('\n      ')
        ScMatchTypeCaseImpl(match type case)
          PsiElement(case)('case')
          PsiWhiteSpace(' ')
          SimpleType: Double
            CodeReferenceElement: Double
              PsiElement(identifier)('Double')
          PsiWhiteSpace(' ')
          PsiElement(=>)('=>')
          PsiWhiteSpace(' ')
          SimpleType: Unit
            CodeReferenceElement: Unit
              PsiElement(identifier)('Unit')
        PsiWhiteSpace('\n      ')
        ScMatchTypeCaseImpl(match type case)
          PsiElement(case)('case')
          PsiWhiteSpace(' ')
          SimpleType: Unit
            CodeReferenceElement: Unit
              PsiElement(identifier)('Unit')
          PsiWhiteSpace(' ')
          PsiElement(=>)('=>')
          PsiWhiteSpace(' ')
          SimpleType: String
            CodeReferenceElement: String
              PsiElement(identifier)('String')
      PsiWhiteSpace('\n    ')
      PsiElement(})('}')
  PsiWhiteSpace('\n\n  ')
  ScFunctionDefinition: infer
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(implicit)('implicit')
    PsiWhiteSpace(' ')
    PsiElement(def)('def')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('infer')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: A
        PsiElement(identifier)('A')
      PsiElement(])(']')
    Parameters
      <empty list>
    PsiElement(:)(':')
    PsiWhiteSpace(' ')
    CompoundType: Wrapper[One[A]] { type Out = Func[A] }
      ParametrizedType: Wrapper[One[A]]
        SimpleType: Wrapper
          CodeReferenceElement: Wrapper
            PsiElement(identifier)('Wrapper')
        TypeArgumentsList
          PsiElement([)('[')
          ParametrizedType: One[A]
            SimpleType: One
              CodeReferenceElement: One
                PsiElement(identifier)('One')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: A
                CodeReferenceElement: A
                  PsiElement(identifier)('A')
              PsiElement(])(']')
          PsiElement(])(']')
      PsiWhiteSpace(' ')
      Refinement
        PsiElement({)('{')
        PsiWhiteSpace(' ')
        ScTypeAliasDefinition: Out
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Out')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ParametrizedType: Func[A]
            SimpleType: Func
              CodeReferenceElement: Func
                PsiElement(identifier)('Func')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: A
                CodeReferenceElement: A
                  PsiElement(identifier)('A')
              PsiElement(])(']')
        PsiWhiteSpace(' ')
        PsiElement(})('}')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    ReferenceExpression: ???
      PsiElement(identifier)('???')
  PsiWhiteSpace('\n\n  ')
  ScTrait: One
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('One')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: A
        PsiElement(identifier)('A')
      PsiElement(])(']')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n    ')
        ScFunctionDeclaration: use
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('use')
          Parameters
            ParametersClause
              PsiElement(()('(')
              PsiElement(implicit)('implicit')
              PsiWhiteSpace(' ')
              Parameter: w
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('w')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  ParametrizedType: Wrapper[One[A]]
                    SimpleType: Wrapper
                      CodeReferenceElement: Wrapper
                        PsiElement(identifier)('Wrapper')
                    TypeArgumentsList
                      PsiElement([)('[')
                      ParametrizedType: One[A]
                        SimpleType: One
                          CodeReferenceElement: One
                            PsiElement(identifier)('One')
                        TypeArgumentsList
                          PsiElement([)('[')
                          SimpleType: A
                            CodeReferenceElement: A
                              PsiElement(identifier)('A')
                          PsiElement(])(']')
                      PsiElement(])(']')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: One[w.Out]
            SimpleType: One
              CodeReferenceElement: One
                PsiElement(identifier)('One')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: w.Out
                CodeReferenceElement: w.Out
                  CodeReferenceElement: w
                    PsiElement(identifier)('w')
                  PsiElement(.)('.')
                  PsiElement(identifier)('Out')
              PsiElement(])(']')
        PsiWhiteSpace('\n  ')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n  ')
  ScPatternDefinition: x
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(val)('val')
    PsiWhiteSpace(' ')
    ListOfPatterns
      ReferencePattern: x
        PsiElement(identifier)('x')
    PsiElement(:)(':')
    PsiWhiteSpace(' ')
    ParametrizedType: One[Long]
      SimpleType: One
        CodeReferenceElement: One
          PsiElement(identifier)('One')
      TypeArgumentsList
        PsiElement([)('[')
        SimpleType: Long
          CodeReferenceElement: Long
            PsiElement(identifier)('Long')
        PsiElement(])(']')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    NullLiteral
      PsiElement(null)('null')
  PsiWhiteSpace('\n  ')
  ScPatternDefinition
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(val)('val')
    PsiWhiteSpace(' ')
    ListOfPatterns
      WildcardPattern
        PsiElement(_)('_')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    ReferenceExpression: x.use.use.use.use.use.use.use
      ReferenceExpression: x.use.use.use.use.use.use
        ReferenceExpression: x.use.use.use.use.use
          ReferenceExpression: x.use.use.use.use
            ReferenceExpression: x.use.use.use
              ReferenceExpression: x.use.use
                ReferenceExpression: x.use
                  ReferenceExpression: x
                    PsiElement(identifier)('x')
                  PsiElement(.)('.')
                  PsiElement(identifier)('use')
                PsiElement(.)('.')
                PsiElement(identifier)('use')
              PsiElement(.)('.')
              PsiElement(identifier)('use')
            PsiElement(.)('.')
            PsiElement(identifier)('use')
          PsiElement(.)('.')
          PsiElement(identifier)('use')
        PsiElement(.)('.')
        PsiElement(identifier)('use')
      PsiElement(.)('.')
      PsiElement(identifier)('use')
