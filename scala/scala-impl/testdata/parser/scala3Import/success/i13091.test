import annotation.experimental
@experimental class Foo
val foo = new Foo
-----
ScalaFile
  ScImportStatement
    PsiElement(import)('import')
    PsiWhiteSpace(' ')
    ImportExpression
      CodeReferenceElement: annotation.experimental
        CodeReferenceElement: annotation
          PsiElement(identifier)('annotation')
        PsiElement(.)('.')
        PsiElement(identifier)('experimental')
  PsiWhiteSpace('\n')
  ScClass: Foo
    AnnotationsList
      Annotation
        PsiElement(@)('@')
        AnnotationExpression
          ConstructorInvocation
            SimpleType: experimental
              CodeReferenceElement: experimental
                PsiElement(identifier)('experimental')
    Modifiers
      <empty list>
    PsiWhiteSpace(' ')
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Foo')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    ExtendsBlock
      <empty list>
  PsiWhiteSpace('\n')
  ScPatternDefinition: foo
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(val)('val')
    PsiWhiteSpace(' ')
    ListOfPatterns
      ReferencePattern: foo
        PsiElement(identifier)('foo')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    ScNewTemplateDefinition: <anonymous>
      PsiElement(new)('new')
      PsiWhiteSpace(' ')
      ExtendsBlock
        TemplateParents
          ConstructorInvocation
            SimpleType: Foo
              CodeReferenceElement: Foo
                PsiElement(identifier)('Foo')
