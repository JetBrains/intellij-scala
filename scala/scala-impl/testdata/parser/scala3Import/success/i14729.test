class Foo():
  def normal: Unit = println("normal")

extension (f: Foo)
  def ext: Unit = println("ext")

object Bar:
  def makeFoo[A]: Foo = Foo()
  def makeFoo[A](s: String): Foo = Foo()

def tests: Unit =
  Bar.makeFoo[Int].ext // error

  (Bar.makeFoo[Int]).ext // error

  val foo = Bar.makeFoo[Int]
  foo.ext // ok

  Bar.makeFoo[Int].normal // ok
-----
ScalaFile
  ScClass: Foo
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Foo')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        ParametersClause
          PsiElement(()('(')
          PsiElement())(')')
    ExtendsBlock
      ScTemplateBody
        PsiElement(:)(':')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: normal
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('normal')
          Parameters
            <empty list>
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Unit
            CodeReferenceElement: Unit
              PsiElement(identifier)('Unit')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: println
              PsiElement(identifier)('println')
            ArgumentList
              PsiElement(()('(')
              StringLiteral
                PsiElement(string content)('"normal"')
              PsiElement())(')')
  PsiWhiteSpace('\n\n')
  Extension on Foo
    PsiElement(extension)('extension')
    PsiWhiteSpace(' ')
    Parameters
      ParametersClause
        PsiElement(()('(')
        Parameter: f
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(identifier)('f')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParameterType
            SimpleType: Foo
              CodeReferenceElement: Foo
                PsiElement(identifier)('Foo')
        PsiElement())(')')
    PsiWhiteSpace('\n  ')
    ScExtensionBody
      ScFunctionDefinition: ext
        AnnotationsList
          <empty list>
        Modifiers
          <empty list>
        PsiElement(def)('def')
        PsiWhiteSpace(' ')
        PsiElement(identifier)('ext')
        Parameters
          <empty list>
        PsiElement(:)(':')
        PsiWhiteSpace(' ')
        SimpleType: Unit
          CodeReferenceElement: Unit
            PsiElement(identifier)('Unit')
        PsiWhiteSpace(' ')
        PsiElement(=)('=')
        PsiWhiteSpace(' ')
        MethodCall
          ReferenceExpression: println
            PsiElement(identifier)('println')
          ArgumentList
            PsiElement(()('(')
            StringLiteral
              PsiElement(string content)('"ext"')
            PsiElement())(')')
  PsiWhiteSpace('\n\n')
  ScObject: Bar
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Bar')
    ExtendsBlock
      ScTemplateBody
        PsiElement(:)(':')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: makeFoo
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('makeFoo')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: A
              PsiElement(identifier)('A')
            PsiElement(])(']')
          Parameters
            <empty list>
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Foo
            CodeReferenceElement: Foo
              PsiElement(identifier)('Foo')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: Foo
              PsiElement(identifier)('Foo')
            ArgumentList
              PsiElement(()('(')
              PsiElement())(')')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: makeFoo
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('makeFoo')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: A
              PsiElement(identifier)('A')
            PsiElement(])(']')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: s
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('s')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: String
                    CodeReferenceElement: String
                      PsiElement(identifier)('String')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Foo
            CodeReferenceElement: Foo
              PsiElement(identifier)('Foo')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: Foo
              PsiElement(identifier)('Foo')
            ArgumentList
              PsiElement(()('(')
              PsiElement())(')')
  PsiWhiteSpace('\n\n')
  ScFunctionDefinition: tests
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(def)('def')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('tests')
    Parameters
      <empty list>
    PsiElement(:)(':')
    PsiWhiteSpace(' ')
    SimpleType: Unit
      CodeReferenceElement: Unit
        PsiElement(identifier)('Unit')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    BlockExpression
      PsiWhiteSpace('\n  ')
      ReferenceExpression: Bar.makeFoo[Int].ext
        GenericCall
          ReferenceExpression: Bar.makeFoo
            ReferenceExpression: Bar
              PsiElement(identifier)('Bar')
            PsiElement(.)('.')
            PsiElement(identifier)('makeFoo')
          TypeArgumentsList
            PsiElement([)('[')
            SimpleType: Int
              CodeReferenceElement: Int
                PsiElement(identifier)('Int')
            PsiElement(])(']')
        PsiElement(.)('.')
        PsiElement(identifier)('ext')
      PsiWhiteSpace(' ')
      PsiComment(comment)('// error')
      PsiWhiteSpace('\n\n  ')
      ReferenceExpression: (Bar.makeFoo[Int]).ext
        ExpressionInParenthesis
          PsiElement(()('(')
          GenericCall
            ReferenceExpression: Bar.makeFoo
              ReferenceExpression: Bar
                PsiElement(identifier)('Bar')
              PsiElement(.)('.')
              PsiElement(identifier)('makeFoo')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: Int
                CodeReferenceElement: Int
                  PsiElement(identifier)('Int')
              PsiElement(])(']')
          PsiElement())(')')
        PsiElement(.)('.')
        PsiElement(identifier)('ext')
      PsiWhiteSpace(' ')
      PsiComment(comment)('// error')
      PsiWhiteSpace('\n\n  ')
      ScPatternDefinition: foo
        AnnotationsList
          <empty list>
        Modifiers
          <empty list>
        PsiElement(val)('val')
        PsiWhiteSpace(' ')
        ListOfPatterns
          ReferencePattern: foo
            PsiElement(identifier)('foo')
        PsiWhiteSpace(' ')
        PsiElement(=)('=')
        PsiWhiteSpace(' ')
        GenericCall
          ReferenceExpression: Bar.makeFoo
            ReferenceExpression: Bar
              PsiElement(identifier)('Bar')
            PsiElement(.)('.')
            PsiElement(identifier)('makeFoo')
          TypeArgumentsList
            PsiElement([)('[')
            SimpleType: Int
              CodeReferenceElement: Int
                PsiElement(identifier)('Int')
            PsiElement(])(']')
      PsiWhiteSpace('\n  ')
      ReferenceExpression: foo.ext
        ReferenceExpression: foo
          PsiElement(identifier)('foo')
        PsiElement(.)('.')
        PsiElement(identifier)('ext')
      PsiWhiteSpace(' ')
      PsiComment(comment)('// ok')
      PsiWhiteSpace('\n\n  ')
      ReferenceExpression: Bar.makeFoo[Int].normal
        GenericCall
          ReferenceExpression: Bar.makeFoo
            ReferenceExpression: Bar
              PsiElement(identifier)('Bar')
            PsiElement(.)('.')
            PsiElement(identifier)('makeFoo')
          TypeArgumentsList
            PsiElement([)('[')
            SimpleType: Int
              CodeReferenceElement: Int
                PsiElement(identifier)('Int')
            PsiElement(])(']')
        PsiElement(.)('.')
        PsiElement(identifier)('normal')
  PsiWhiteSpace(' ')
  PsiComment(comment)('// ok')
