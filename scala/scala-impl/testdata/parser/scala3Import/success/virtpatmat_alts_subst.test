case class Foo(s: String) {
  def appliedType(tycon: Any) =
    tycon match {
        case Foo(sym @ ("NothingClass" | "AnyClass")) => println(sym)
    }
}
-----
ScalaFile
  ScClass: Foo
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(case)('case')
    PsiWhiteSpace(' ')
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Foo')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        ParametersClause
          PsiElement(()('(')
          ClassParameter: s
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(identifier)('s')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            ParameterType
              SimpleType: String
                CodeReferenceElement: String
                  PsiElement(identifier)('String')
          PsiElement())(')')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: appliedType
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('appliedType')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: tycon
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('tycon')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Any
                    CodeReferenceElement: Any
                      PsiElement(identifier)('Any')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace('\n    ')
          MatchStatement
            ReferenceExpression: tycon
              PsiElement(identifier)('tycon')
            PsiWhiteSpace(' ')
            PsiElement(match)('match')
            PsiWhiteSpace(' ')
            PsiElement({)('{')
            PsiWhiteSpace('\n        ')
            CaseClauses
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                ConstructorPattern
                  CodeReferenceElement: Foo
                    PsiElement(identifier)('Foo')
                  Pattern Argument List
                    PsiElement(()('(')
                    NamingPattern: sym
                      PsiElement(identifier)('sym')
                      PsiWhiteSpace(' ')
                      PsiElement(@)('@')
                      PsiWhiteSpace(' ')
                      PatternInParenthesis
                        PsiElement(()('(')
                        CompositePattern
                          LiteralPattern
                            StringLiteral
                              PsiElement(string content)('"NothingClass"')
                          PsiWhiteSpace(' ')
                          PsiElement(identifier)('|')
                          PsiWhiteSpace(' ')
                          LiteralPattern
                            StringLiteral
                              PsiElement(string content)('"AnyClass"')
                        PsiElement())(')')
                    PsiElement())(')')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                BlockOfExpressions
                  MethodCall
                    ReferenceExpression: println
                      PsiElement(identifier)('println')
                    ArgumentList
                      PsiElement(()('(')
                      ReferenceExpression: sym
                        PsiElement(identifier)('sym')
                      PsiElement())(')')
            PsiWhiteSpace('\n    ')
            PsiElement(})('}')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
