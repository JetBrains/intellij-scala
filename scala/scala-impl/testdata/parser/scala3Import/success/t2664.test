package pkg1 {
    class C {
        private[pkg1] def foo: Int = 1
    }

    trait T extends C {
        private[pkg1] abstract override def foo = super.foo + 1
    }
}
-----
ScalaFile
  ScPackaging
    PsiElement(package)('package')
    PsiWhiteSpace(' ')
    CodeReferenceElement: pkg1
      PsiElement(identifier)('pkg1')
    PsiWhiteSpace(' ')
    PsiElement({)('{')
    PsiWhiteSpace('\n    ')
    ScClass: C
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      PsiElement(class)('class')
      PsiWhiteSpace(' ')
      PsiElement(identifier)('C')
      PrimaryConstructor
        AnnotationsList
          <empty list>
        Modifiers
          <empty list>
        Parameters
          <empty list>
      PsiWhiteSpace(' ')
      ExtendsBlock
        ScTemplateBody
          PsiElement({)('{')
          PsiWhiteSpace('\n        ')
          ScFunctionDefinition: foo
            AnnotationsList
              <empty list>
            Modifiers
              AccessModifier
                PsiElement(private)('private')
                PsiElement([)('[')
                PsiElement(identifier)('pkg1')
                PsiElement(])(']')
            PsiWhiteSpace(' ')
            PsiElement(def)('def')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('foo')
            Parameters
              <empty list>
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            SimpleType: Int
              CodeReferenceElement: Int
                PsiElement(identifier)('Int')
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace(' ')
            IntegerLiteral
              PsiElement(integer)('1')
          PsiWhiteSpace('\n    ')
          PsiElement(})('}')
    PsiWhiteSpace('\n\n    ')
    ScTrait: T
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      PsiElement(trait)('trait')
      PsiWhiteSpace(' ')
      PsiElement(identifier)('T')
      PsiWhiteSpace(' ')
      ExtendsBlock
        PsiElement(extends)('extends')
        PsiWhiteSpace(' ')
        TemplateParents
          ConstructorInvocation
            SimpleType: C
              CodeReferenceElement: C
                PsiElement(identifier)('C')
        PsiWhiteSpace(' ')
        ScTemplateBody
          PsiElement({)('{')
          PsiWhiteSpace('\n        ')
          ScFunctionDefinition: foo
            AnnotationsList
              <empty list>
            Modifiers
              AccessModifier
                PsiElement(private)('private')
                PsiElement([)('[')
                PsiElement(identifier)('pkg1')
                PsiElement(])(']')
              PsiWhiteSpace(' ')
              PsiElement(abstract)('abstract')
              PsiWhiteSpace(' ')
              PsiElement(override)('override')
            PsiWhiteSpace(' ')
            PsiElement(def)('def')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('foo')
            Parameters
              <empty list>
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace(' ')
            InfixExpression
              ReferenceExpression: super.foo
                SuperReference
                  PsiElement(super)('super')
                PsiElement(.)('.')
                PsiElement(identifier)('foo')
              PsiWhiteSpace(' ')
              ReferenceExpression: +
                PsiElement(identifier)('+')
              PsiWhiteSpace(' ')
              IntegerLiteral
                PsiElement(integer)('1')
          PsiWhiteSpace('\n    ')
          PsiElement(})('}')
    PsiWhiteSpace('\n')
    PsiElement(})('}')
