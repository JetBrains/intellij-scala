case object X

object Test {
  val Alias = X

  val x: X.type = Alias

  type Alias = X.type
  val a: Alias = Alias
}
-----
ScalaFile
  ScObject: X
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(case)('case')
    PsiWhiteSpace(' ')
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('X')
    ExtendsBlock
      <empty list>
  PsiWhiteSpace('\n\n')
  ScObject: Test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: Alias
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: Alias
              PsiElement(identifier)('Alias')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: X
            PsiElement(identifier)('X')
        PsiWhiteSpace('\n\n  ')
        ScPatternDefinition: x
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: x
              PsiElement(identifier)('x')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: X.type
            CodeReferenceElement: X
              PsiElement(identifier)('X')
            PsiElement(.)('.')
            PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: Alias
            PsiElement(identifier)('Alias')
        PsiWhiteSpace('\n\n  ')
        ScTypeAliasDefinition: Alias
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Alias')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          SimpleType: X.type
            CodeReferenceElement: X
              PsiElement(identifier)('X')
            PsiElement(.)('.')
            PsiElement(type)('type')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: a
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: a
              PsiElement(identifier)('a')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Alias
            CodeReferenceElement: Alias
              PsiElement(identifier)('Alias')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: Alias
            PsiElement(identifier)('Alias')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
