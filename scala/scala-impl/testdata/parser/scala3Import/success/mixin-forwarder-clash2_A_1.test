// This test case was supposed to fail when mixin forwarders were generated before erasure,
// but didn't due to separate compilation unlike mixin-forwarder-clash1,
// it's not supposed to fail anymore since the forwarders generated after erasure do not clash,
// the comments are preserved for posterity.

class Foo

trait One[X] {
  def concat(suffix: Int): X = ???
}

trait Two[Y <: Foo] {
  def concat[Dummy](suffix: Int): Y = ???
}

class Bar1 extends One[Foo]
// Because mixin forwarders are generated before erasure, we get:
//  override def concat(suffix: Int): Foo
-----
ScalaFile
  PsiComment(comment)('// This test case was supposed to fail when mixin forwarders were generated before erasure,')
  PsiWhiteSpace('\n')
  PsiComment(comment)('// but didn't due to separate compilation unlike mixin-forwarder-clash1,')
  PsiWhiteSpace('\n')
  PsiComment(comment)('// it's not supposed to fail anymore since the forwarders generated after erasure do not clash,')
  PsiWhiteSpace('\n')
  PsiComment(comment)('// the comments are preserved for posterity.')
  PsiWhiteSpace('\n\n')
  ScClass: Foo
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Foo')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    ExtendsBlock
      <empty list>
  PsiWhiteSpace('\n\n')
  ScTrait: One
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('One')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: X
        PsiElement(identifier)('X')
      PsiElement(])(']')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: concat
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('concat')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: suffix
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('suffix')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Int
                    CodeReferenceElement: Int
                      PsiElement(identifier)('Int')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: X
            CodeReferenceElement: X
              PsiElement(identifier)('X')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: ???
            PsiElement(identifier)('???')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScTrait: Two
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Two')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: Y
        PsiElement(identifier)('Y')
        PsiWhiteSpace(' ')
        PsiElement(<:)('<:')
        PsiWhiteSpace(' ')
        SimpleType: Foo
          CodeReferenceElement: Foo
            PsiElement(identifier)('Foo')
      PsiElement(])(']')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: concat
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('concat')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: Dummy
              PsiElement(identifier)('Dummy')
            PsiElement(])(']')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: suffix
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('suffix')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Int
                    CodeReferenceElement: Int
                      PsiElement(identifier)('Int')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Y
            CodeReferenceElement: Y
              PsiElement(identifier)('Y')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: ???
            PsiElement(identifier)('???')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScClass: Bar1
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Bar1')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          ParametrizedType: One[Foo]
            SimpleType: One
              CodeReferenceElement: One
                PsiElement(identifier)('One')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: Foo
                CodeReferenceElement: Foo
                  PsiElement(identifier)('Foo')
              PsiElement(])(']')
  PsiWhiteSpace('\n')
  PsiComment(comment)('// Because mixin forwarders are generated before erasure, we get:')
  PsiWhiteSpace('\n')
  PsiComment(comment)('//  override def concat(suffix: Int): Foo')
