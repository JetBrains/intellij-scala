object PostConditions:
  opaque type WrappedResult[T] = T

  def result[T](using r: WrappedResult[T]): T = r

  extension [T](x: T) def ensuring (condition: WrappedResult[T] ?=> Boolean): T =
    given WrappedResult[T] = x
    assert(condition)
    x

object Test:
  import PostConditions.{ensuring, result}
  val s = List(1, 2, 3).sum.ensuring(result == 6)
-----
ScalaFile
  ScObject: PostConditions
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('PostConditions')
    ExtendsBlock
      ScTemplateBody
        PsiElement(:)(':')
        PsiWhiteSpace('\n  ')
        ScTypeAliasDefinition: WrappedResult
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(opaque)('opaque')
          PsiWhiteSpace(' ')
          PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('WrappedResult')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: T
              PsiElement(identifier)('T')
            PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          SimpleType: T
            CodeReferenceElement: T
              PsiElement(identifier)('T')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: result
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('result')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: T
              PsiElement(identifier)('T')
            PsiElement(])(']')
          Parameters
            ParametersClause
              PsiElement(()('(')
              PsiElement(using)('using')
              PsiWhiteSpace(' ')
              Parameter: r
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('r')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  ParametrizedType: WrappedResult[T]
                    SimpleType: WrappedResult
                      CodeReferenceElement: WrappedResult
                        PsiElement(identifier)('WrappedResult')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: T
                        CodeReferenceElement: T
                          PsiElement(identifier)('T')
                      PsiElement(])(']')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: T
            CodeReferenceElement: T
              PsiElement(identifier)('T')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: r
            PsiElement(identifier)('r')
        PsiWhiteSpace('\n\n  ')
        Extension on T
          PsiElement(extension)('extension')
          PsiWhiteSpace(' ')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: T
              PsiElement(identifier)('T')
            PsiElement(])(']')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: x
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: T
                    CodeReferenceElement: T
                      PsiElement(identifier)('T')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          ScExtensionBody
            ScFunctionDefinition: ensuring
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(def)('def')
              PsiWhiteSpace(' ')
              PsiElement(identifier)('ensuring')
              PsiWhiteSpace(' ')
              Parameters
                ParametersClause
                  PsiElement(()('(')
                  Parameter: condition
                    AnnotationsList
                      <empty list>
                    Modifiers
                      <empty list>
                    PsiElement(identifier)('condition')
                    PsiElement(:)(':')
                    PsiWhiteSpace(' ')
                    ParameterType
                      FunctionalType: WrappedResult[T] ?=> Boolean
                        ParametrizedType: WrappedResult[T]
                          SimpleType: WrappedResult
                            CodeReferenceElement: WrappedResult
                              PsiElement(identifier)('WrappedResult')
                          TypeArgumentsList
                            PsiElement([)('[')
                            SimpleType: T
                              CodeReferenceElement: T
                                PsiElement(identifier)('T')
                            PsiElement(])(']')
                        PsiWhiteSpace(' ')
                        PsiElement(?=>)('?=>')
                        PsiWhiteSpace(' ')
                        SimpleType: Boolean
                          CodeReferenceElement: Boolean
                            PsiElement(identifier)('Boolean')
                  PsiElement())(')')
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              SimpleType: T
                CodeReferenceElement: T
                  PsiElement(identifier)('T')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              BlockExpression
                PsiWhiteSpace('\n    ')
                ScGivenAliasDefinition: given_WrappedResult_T
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(given)('given')
                  PsiWhiteSpace(' ')
                  ParametrizedType: WrappedResult[T]
                    SimpleType: WrappedResult
                      CodeReferenceElement: WrappedResult
                        PsiElement(identifier)('WrappedResult')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: T
                        CodeReferenceElement: T
                          PsiElement(identifier)('T')
                      PsiElement(])(']')
                  Parameters
                    <empty list>
                  PsiWhiteSpace(' ')
                  PsiElement(=)('=')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: x
                    PsiElement(identifier)('x')
                PsiWhiteSpace('\n    ')
                MethodCall
                  ReferenceExpression: assert
                    PsiElement(identifier)('assert')
                  ArgumentList
                    PsiElement(()('(')
                    ReferenceExpression: condition
                      PsiElement(identifier)('condition')
                    PsiElement())(')')
                PsiWhiteSpace('\n    ')
                ReferenceExpression: x
                  PsiElement(identifier)('x')
  PsiWhiteSpace('\n\n')
  ScObject: Test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test')
    ExtendsBlock
      ScTemplateBody
        PsiElement(:)(':')
        PsiWhiteSpace('\n  ')
        ScImportStatement
          PsiElement(import)('import')
          PsiWhiteSpace(' ')
          ImportExpression
            CodeReferenceElement: PostConditions
              PsiElement(identifier)('PostConditions')
            PsiElement(.)('.')
            ImportSelectors
              PsiElement({)('{')
              ImportSelector
                CodeReferenceElement: ensuring
                  PsiElement(identifier)('ensuring')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              ImportSelector
                CodeReferenceElement: result
                  PsiElement(identifier)('result')
              PsiElement(})('}')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: s
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: s
              PsiElement(identifier)('s')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: List(1, 2, 3).sum.ensuring
              ReferenceExpression: List(1, 2, 3).sum
                MethodCall
                  ReferenceExpression: List
                    PsiElement(identifier)('List')
                  ArgumentList
                    PsiElement(()('(')
                    IntegerLiteral
                      PsiElement(integer)('1')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    IntegerLiteral
                      PsiElement(integer)('2')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    IntegerLiteral
                      PsiElement(integer)('3')
                    PsiElement())(')')
                PsiElement(.)('.')
                PsiElement(identifier)('sum')
              PsiElement(.)('.')
              PsiElement(identifier)('ensuring')
            ArgumentList
              PsiElement(()('(')
              InfixExpression
                ReferenceExpression: result
                  PsiElement(identifier)('result')
                PsiWhiteSpace(' ')
                ReferenceExpression: ==
                  PsiElement(identifier)('==')
                PsiWhiteSpace(' ')
                IntegerLiteral
                  PsiElement(integer)('6')
              PsiElement())(')')
