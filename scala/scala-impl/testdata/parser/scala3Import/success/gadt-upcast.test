trait TagA[A]
trait TagB[B]
trait TagC[C]
trait TriTag[A, B, C] extends TagA[A] with TagB[B] with TagC[C]
class IntStrCharTag extends TagA[Int] with TagB[String] with TagC[Char]

def get[A, B, C]: TriTag[A, B, C] => (A, B, C) = {
 case _: IntStrCharTag => (0, "zero", '0')
}

object GadtUpcast extends App {
  val ret = get(new IntStrCharTag with TriTag[Int, String, Char])
  println(ret)
}
-----
ScalaFile
  ScTrait: TagA
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('TagA')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: A
        PsiElement(identifier)('A')
      PsiElement(])(']')
    ExtendsBlock
      <empty list>
  PsiWhiteSpace('\n')
  ScTrait: TagB
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('TagB')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: B
        PsiElement(identifier)('B')
      PsiElement(])(']')
    ExtendsBlock
      <empty list>
  PsiWhiteSpace('\n')
  ScTrait: TagC
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('TagC')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: C
        PsiElement(identifier)('C')
      PsiElement(])(']')
    ExtendsBlock
      <empty list>
  PsiWhiteSpace('\n')
  ScTrait: TriTag
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('TriTag')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: A
        PsiElement(identifier)('A')
      PsiElement(,)(',')
      PsiWhiteSpace(' ')
      TypeParameter: B
        PsiElement(identifier)('B')
      PsiElement(,)(',')
      PsiWhiteSpace(' ')
      TypeParameter: C
        PsiElement(identifier)('C')
      PsiElement(])(']')
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          ParametrizedType: TagA[A]
            SimpleType: TagA
              CodeReferenceElement: TagA
                PsiElement(identifier)('TagA')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: A
                CodeReferenceElement: A
                  PsiElement(identifier)('A')
              PsiElement(])(']')
        PsiWhiteSpace(' ')
        PsiElement(with)('with')
        PsiWhiteSpace(' ')
        ConstructorInvocation
          ParametrizedType: TagB[B]
            SimpleType: TagB
              CodeReferenceElement: TagB
                PsiElement(identifier)('TagB')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: B
                CodeReferenceElement: B
                  PsiElement(identifier)('B')
              PsiElement(])(']')
        PsiWhiteSpace(' ')
        PsiElement(with)('with')
        PsiWhiteSpace(' ')
        ConstructorInvocation
          ParametrizedType: TagC[C]
            SimpleType: TagC
              CodeReferenceElement: TagC
                PsiElement(identifier)('TagC')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: C
                CodeReferenceElement: C
                  PsiElement(identifier)('C')
              PsiElement(])(']')
  PsiWhiteSpace('\n')
  ScClass: IntStrCharTag
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('IntStrCharTag')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          ParametrizedType: TagA[Int]
            SimpleType: TagA
              CodeReferenceElement: TagA
                PsiElement(identifier)('TagA')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: Int
                CodeReferenceElement: Int
                  PsiElement(identifier)('Int')
              PsiElement(])(']')
        PsiWhiteSpace(' ')
        PsiElement(with)('with')
        PsiWhiteSpace(' ')
        ConstructorInvocation
          ParametrizedType: TagB[String]
            SimpleType: TagB
              CodeReferenceElement: TagB
                PsiElement(identifier)('TagB')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: String
                CodeReferenceElement: String
                  PsiElement(identifier)('String')
              PsiElement(])(']')
        PsiWhiteSpace(' ')
        PsiElement(with)('with')
        PsiWhiteSpace(' ')
        ConstructorInvocation
          ParametrizedType: TagC[Char]
            SimpleType: TagC
              CodeReferenceElement: TagC
                PsiElement(identifier)('TagC')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: Char
                CodeReferenceElement: Char
                  PsiElement(identifier)('Char')
              PsiElement(])(']')
  PsiWhiteSpace('\n\n')
  ScFunctionDefinition: get
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(def)('def')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('get')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: A
        PsiElement(identifier)('A')
      PsiElement(,)(',')
      PsiWhiteSpace(' ')
      TypeParameter: B
        PsiElement(identifier)('B')
      PsiElement(,)(',')
      PsiWhiteSpace(' ')
      TypeParameter: C
        PsiElement(identifier)('C')
      PsiElement(])(']')
    Parameters
      <empty list>
    PsiElement(:)(':')
    PsiWhiteSpace(' ')
    FunctionalType: TriTag[A, B, C] => (A, B, C)
      ParametrizedType: TriTag[A, B, C]
        SimpleType: TriTag
          CodeReferenceElement: TriTag
            PsiElement(identifier)('TriTag')
        TypeArgumentsList
          PsiElement([)('[')
          SimpleType: A
            CodeReferenceElement: A
              PsiElement(identifier)('A')
          PsiElement(,)(',')
          PsiWhiteSpace(' ')
          SimpleType: B
            CodeReferenceElement: B
              PsiElement(identifier)('B')
          PsiElement(,)(',')
          PsiWhiteSpace(' ')
          SimpleType: C
            CodeReferenceElement: C
              PsiElement(identifier)('C')
          PsiElement(])(']')
      PsiWhiteSpace(' ')
      PsiElement(=>)('=>')
      PsiWhiteSpace(' ')
      TupleType: (A, B, C)
        PsiElement(()('(')
        TypesList
          SimpleType: A
            CodeReferenceElement: A
              PsiElement(identifier)('A')
          PsiElement(,)(',')
          PsiWhiteSpace(' ')
          SimpleType: B
            CodeReferenceElement: B
              PsiElement(identifier)('B')
          PsiElement(,)(',')
          PsiWhiteSpace(' ')
          SimpleType: C
            CodeReferenceElement: C
              PsiElement(identifier)('C')
        PsiElement())(')')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    BlockExpression
      PsiElement({)('{')
      PsiWhiteSpace('\n ')
      CaseClauses
        CaseClause
          PsiElement(case)('case')
          PsiWhiteSpace(' ')
          Scala3 TypedPattern
            WildcardPattern
              PsiElement(_)('_')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            TypePattern
              SimpleType: IntStrCharTag
                CodeReferenceElement: IntStrCharTag
                  PsiElement(identifier)('IntStrCharTag')
          PsiWhiteSpace(' ')
          PsiElement(=>)('=>')
          PsiWhiteSpace(' ')
          BlockOfExpressions
            Tuple
              PsiElement(()('(')
              IntegerLiteral
                PsiElement(integer)('0')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              StringLiteral
                PsiElement(string content)('"zero"')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              CharLiteral
                PsiElement(Character)(''0'')
              PsiElement())(')')
      PsiWhiteSpace('\n')
      PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScObject: GadtUpcast
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('GadtUpcast')
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          SimpleType: App
            CodeReferenceElement: App
              PsiElement(identifier)('App')
      PsiWhiteSpace(' ')
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: ret
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: ret
              PsiElement(identifier)('ret')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: get
              PsiElement(identifier)('get')
            ArgumentList
              PsiElement(()('(')
              ScNewTemplateDefinition: <anonymous>
                PsiElement(new)('new')
                PsiWhiteSpace(' ')
                ExtendsBlock
                  TemplateParents
                    ConstructorInvocation
                      SimpleType: IntStrCharTag
                        CodeReferenceElement: IntStrCharTag
                          PsiElement(identifier)('IntStrCharTag')
                    PsiWhiteSpace(' ')
                    PsiElement(with)('with')
                    PsiWhiteSpace(' ')
                    ConstructorInvocation
                      ParametrizedType: TriTag[Int, String, Char]
                        SimpleType: TriTag
                          CodeReferenceElement: TriTag
                            PsiElement(identifier)('TriTag')
                        TypeArgumentsList
                          PsiElement([)('[')
                          SimpleType: Int
                            CodeReferenceElement: Int
                              PsiElement(identifier)('Int')
                          PsiElement(,)(',')
                          PsiWhiteSpace(' ')
                          SimpleType: String
                            CodeReferenceElement: String
                              PsiElement(identifier)('String')
                          PsiElement(,)(',')
                          PsiWhiteSpace(' ')
                          SimpleType: Char
                            CodeReferenceElement: Char
                              PsiElement(identifier)('Char')
                          PsiElement(])(']')
              PsiElement())(')')
        PsiWhiteSpace('\n  ')
        MethodCall
          ReferenceExpression: println
            PsiElement(identifier)('println')
          ArgumentList
            PsiElement(()('(')
            ReferenceExpression: ret
              PsiElement(identifier)('ret')
            PsiElement())(')')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
