trait First {type Out}
given First with {type Out = 123}

trait Second {type Out}
transparent inline given (using f: First): Second = new Second {type Out = f.Out}

val s = summon[Second]
val x = summon[s.Out =:= 123]
-----
ScalaFile
  ScTrait: First
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('First')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        ScTypeAliasDeclaration: Out
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Out')
        PsiElement(})('}')
  PsiWhiteSpace('\n')
  ScGivenDefinition: given_First
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(given)('given')
    PsiWhiteSpace(' ')
    ExtendsBlock
      TemplateParents
        ConstructorInvocation
          SimpleType: First
            CodeReferenceElement: First
              PsiElement(identifier)('First')
      PsiWhiteSpace(' ')
      PsiElement(with)('with')
      PsiWhiteSpace(' ')
      ScTemplateBody
        PsiElement({)('{')
        ScTypeAliasDefinition: Out
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Out')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          LiteralType: 123
            IntegerLiteral
              PsiElement(integer)('123')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScTrait: Second
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Second')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        ScTypeAliasDeclaration: Out
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Out')
        PsiElement(})('}')
  PsiWhiteSpace('\n')
  ScGivenAliasDefinition: given_Second
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(transparent)('transparent')
      PsiWhiteSpace(' ')
      PsiElement(inline)('inline')
    PsiWhiteSpace(' ')
    PsiElement(given)('given')
    PsiWhiteSpace(' ')
    Parameters
      ParametersClause
        PsiElement(()('(')
        PsiElement(using)('using')
        PsiWhiteSpace(' ')
        Parameter: f
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(identifier)('f')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParameterType
            SimpleType: First
              CodeReferenceElement: First
                PsiElement(identifier)('First')
        PsiElement())(')')
    PsiElement(:)(':')
    PsiWhiteSpace(' ')
    SimpleType: Second
      CodeReferenceElement: Second
        PsiElement(identifier)('Second')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    ScNewTemplateDefinition: <anonymous>
      PsiElement(new)('new')
      PsiWhiteSpace(' ')
      ExtendsBlock
        TemplateParents
          ConstructorInvocation
            SimpleType: Second
              CodeReferenceElement: Second
                PsiElement(identifier)('Second')
        PsiWhiteSpace(' ')
        ScTemplateBody
          PsiElement({)('{')
          ScTypeAliasDefinition: Out
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(type)('type')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('Out')
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace(' ')
            SimpleType: f.Out
              CodeReferenceElement: f.Out
                CodeReferenceElement: f
                  PsiElement(identifier)('f')
                PsiElement(.)('.')
                PsiElement(identifier)('Out')
          PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScPatternDefinition: s
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(val)('val')
    PsiWhiteSpace(' ')
    ListOfPatterns
      ReferencePattern: s
        PsiElement(identifier)('s')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    GenericCall
      ReferenceExpression: summon
        PsiElement(identifier)('summon')
      TypeArgumentsList
        PsiElement([)('[')
        SimpleType: Second
          CodeReferenceElement: Second
            PsiElement(identifier)('Second')
        PsiElement(])(']')
  PsiWhiteSpace('\n')
  ScPatternDefinition: x
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(val)('val')
    PsiWhiteSpace(' ')
    ListOfPatterns
      ReferencePattern: x
        PsiElement(identifier)('x')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    GenericCall
      ReferenceExpression: summon
        PsiElement(identifier)('summon')
      TypeArgumentsList
        PsiElement([)('[')
        InfixType: s.Out =:= 123
          SimpleType: s.Out
            CodeReferenceElement: s.Out
              CodeReferenceElement: s
                PsiElement(identifier)('s')
              PsiElement(.)('.')
              PsiElement(identifier)('Out')
          PsiWhiteSpace(' ')
          CodeReferenceElement: =:=
            PsiElement(identifier)('=:=')
          PsiWhiteSpace(' ')
          LiteralType: 123
            IntegerLiteral
              PsiElement(integer)('123')
        PsiElement(])(']')
