object LeftOrRight {
  def unapply[A](value: Either[A, A]): Option[A] = value match {
    case scala.Left(x) => Some(x)
    case scala.Right(x) => Some(x)
  }
}

object Test {
  (Left((0, 0)): Either[(Int, Int), (Int, Int)]) match {
    case LeftOrRight(pair @ (a, b)) => a // false -Xlint warning: "extractor pattern binds a single value to a Product2 of type (Int, Int)"
  }

  (Left((0, 0)): Either[(Int, Int), (Int, Int)]) match {
    case LeftOrRight((a, b)) => a // false -Xlint warning: "extractor pattern binds a single value to a Product2 of type (Int, Int)"
  }

  (Left((0, 0)): Either[(Int, Int), (Int, Int)]) match {
    case LeftOrRight(a, b) => a // false -Xlint warning: "extractor pattern binds a single value to a Product2 of type (Int, Int)"
  }
}
-----
ScalaFile
  ScObject: LeftOrRight
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('LeftOrRight')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: unapply
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('unapply')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: A
              PsiElement(identifier)('A')
            PsiElement(])(']')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: value
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('value')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  ParametrizedType: Either[A, A]
                    SimpleType: Either
                      CodeReferenceElement: Either
                        PsiElement(identifier)('Either')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: A
                        CodeReferenceElement: A
                          PsiElement(identifier)('A')
                      PsiElement(,)(',')
                      PsiWhiteSpace(' ')
                      SimpleType: A
                        CodeReferenceElement: A
                          PsiElement(identifier)('A')
                      PsiElement(])(']')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: Option[A]
            SimpleType: Option
              CodeReferenceElement: Option
                PsiElement(identifier)('Option')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: A
                CodeReferenceElement: A
                  PsiElement(identifier)('A')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MatchStatement
            ReferenceExpression: value
              PsiElement(identifier)('value')
            PsiWhiteSpace(' ')
            PsiElement(match)('match')
            PsiWhiteSpace(' ')
            PsiElement({)('{')
            PsiWhiteSpace('\n    ')
            CaseClauses
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                ConstructorPattern
                  CodeReferenceElement: scala.Left
                    CodeReferenceElement: scala
                      PsiElement(identifier)('scala')
                    PsiElement(.)('.')
                    PsiElement(identifier)('Left')
                  Pattern Argument List
                    PsiElement(()('(')
                    ReferencePattern: x
                      PsiElement(identifier)('x')
                    PsiElement())(')')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                BlockOfExpressions
                  MethodCall
                    ReferenceExpression: Some
                      PsiElement(identifier)('Some')
                    ArgumentList
                      PsiElement(()('(')
                      ReferenceExpression: x
                        PsiElement(identifier)('x')
                      PsiElement())(')')
              PsiWhiteSpace('\n    ')
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                ConstructorPattern
                  CodeReferenceElement: scala.Right
                    CodeReferenceElement: scala
                      PsiElement(identifier)('scala')
                    PsiElement(.)('.')
                    PsiElement(identifier)('Right')
                  Pattern Argument List
                    PsiElement(()('(')
                    ReferencePattern: x
                      PsiElement(identifier)('x')
                    PsiElement())(')')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                BlockOfExpressions
                  MethodCall
                    ReferenceExpression: Some
                      PsiElement(identifier)('Some')
                    ArgumentList
                      PsiElement(()('(')
                      ReferenceExpression: x
                        PsiElement(identifier)('x')
                      PsiElement())(')')
            PsiWhiteSpace('\n  ')
            PsiElement(})('}')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScObject: Test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        MatchStatement
          ExpressionInParenthesis
            PsiElement(()('(')
            TypedExpression
              MethodCall
                ReferenceExpression: Left
                  PsiElement(identifier)('Left')
                ArgumentList
                  PsiElement(()('(')
                  Tuple
                    PsiElement(()('(')
                    IntegerLiteral
                      PsiElement(integer)('0')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    IntegerLiteral
                      PsiElement(integer)('0')
                    PsiElement())(')')
                  PsiElement())(')')
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              ParametrizedType: Either[(Int, Int), (Int, Int)]
                SimpleType: Either
                  CodeReferenceElement: Either
                    PsiElement(identifier)('Either')
                TypeArgumentsList
                  PsiElement([)('[')
                  TupleType: (Int, Int)
                    PsiElement(()('(')
                    TypesList
                      SimpleType: Int
                        CodeReferenceElement: Int
                          PsiElement(identifier)('Int')
                      PsiElement(,)(',')
                      PsiWhiteSpace(' ')
                      SimpleType: Int
                        CodeReferenceElement: Int
                          PsiElement(identifier)('Int')
                    PsiElement())(')')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  TupleType: (Int, Int)
                    PsiElement(()('(')
                    TypesList
                      SimpleType: Int
                        CodeReferenceElement: Int
                          PsiElement(identifier)('Int')
                      PsiElement(,)(',')
                      PsiWhiteSpace(' ')
                      SimpleType: Int
                        CodeReferenceElement: Int
                          PsiElement(identifier)('Int')
                    PsiElement())(')')
                  PsiElement(])(']')
            PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(match)('match')
          PsiWhiteSpace(' ')
          PsiElement({)('{')
          PsiWhiteSpace('\n    ')
          CaseClauses
            CaseClause
              PsiElement(case)('case')
              PsiWhiteSpace(' ')
              ConstructorPattern
                CodeReferenceElement: LeftOrRight
                  PsiElement(identifier)('LeftOrRight')
                Pattern Argument List
                  PsiElement(()('(')
                  NamingPattern: pair
                    PsiElement(identifier)('pair')
                    PsiWhiteSpace(' ')
                    PsiElement(@)('@')
                    PsiWhiteSpace(' ')
                    TuplePattern
                      PsiElement(()('(')
                      ArgumentPatterns
                        ReferencePattern: a
                          PsiElement(identifier)('a')
                        PsiElement(,)(',')
                        PsiWhiteSpace(' ')
                        ReferencePattern: b
                          PsiElement(identifier)('b')
                      PsiElement())(')')
                  PsiElement())(')')
              PsiWhiteSpace(' ')
              PsiElement(=>)('=>')
              PsiWhiteSpace(' ')
              BlockOfExpressions
                ReferenceExpression: a
                  PsiElement(identifier)('a')
          PsiWhiteSpace(' ')
          PsiComment(comment)('// false -Xlint warning: "extractor pattern binds a single value to a Product2 of type (Int, Int)"')
          PsiWhiteSpace('\n  ')
          PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        MatchStatement
          ExpressionInParenthesis
            PsiElement(()('(')
            TypedExpression
              MethodCall
                ReferenceExpression: Left
                  PsiElement(identifier)('Left')
                ArgumentList
                  PsiElement(()('(')
                  Tuple
                    PsiElement(()('(')
                    IntegerLiteral
                      PsiElement(integer)('0')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    IntegerLiteral
                      PsiElement(integer)('0')
                    PsiElement())(')')
                  PsiElement())(')')
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              ParametrizedType: Either[(Int, Int), (Int, Int)]
                SimpleType: Either
                  CodeReferenceElement: Either
                    PsiElement(identifier)('Either')
                TypeArgumentsList
                  PsiElement([)('[')
                  TupleType: (Int, Int)
                    PsiElement(()('(')
                    TypesList
                      SimpleType: Int
                        CodeReferenceElement: Int
                          PsiElement(identifier)('Int')
                      PsiElement(,)(',')
                      PsiWhiteSpace(' ')
                      SimpleType: Int
                        CodeReferenceElement: Int
                          PsiElement(identifier)('Int')
                    PsiElement())(')')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  TupleType: (Int, Int)
                    PsiElement(()('(')
                    TypesList
                      SimpleType: Int
                        CodeReferenceElement: Int
                          PsiElement(identifier)('Int')
                      PsiElement(,)(',')
                      PsiWhiteSpace(' ')
                      SimpleType: Int
                        CodeReferenceElement: Int
                          PsiElement(identifier)('Int')
                    PsiElement())(')')
                  PsiElement(])(']')
            PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(match)('match')
          PsiWhiteSpace(' ')
          PsiElement({)('{')
          PsiWhiteSpace('\n    ')
          CaseClauses
            CaseClause
              PsiElement(case)('case')
              PsiWhiteSpace(' ')
              ConstructorPattern
                CodeReferenceElement: LeftOrRight
                  PsiElement(identifier)('LeftOrRight')
                Pattern Argument List
                  PsiElement(()('(')
                  TuplePattern
                    PsiElement(()('(')
                    ArgumentPatterns
                      ReferencePattern: a
                        PsiElement(identifier)('a')
                      PsiElement(,)(',')
                      PsiWhiteSpace(' ')
                      ReferencePattern: b
                        PsiElement(identifier)('b')
                    PsiElement())(')')
                  PsiElement())(')')
              PsiWhiteSpace(' ')
              PsiElement(=>)('=>')
              PsiWhiteSpace(' ')
              BlockOfExpressions
                ReferenceExpression: a
                  PsiElement(identifier)('a')
          PsiWhiteSpace(' ')
          PsiComment(comment)('// false -Xlint warning: "extractor pattern binds a single value to a Product2 of type (Int, Int)"')
          PsiWhiteSpace('\n  ')
          PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        MatchStatement
          ExpressionInParenthesis
            PsiElement(()('(')
            TypedExpression
              MethodCall
                ReferenceExpression: Left
                  PsiElement(identifier)('Left')
                ArgumentList
                  PsiElement(()('(')
                  Tuple
                    PsiElement(()('(')
                    IntegerLiteral
                      PsiElement(integer)('0')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    IntegerLiteral
                      PsiElement(integer)('0')
                    PsiElement())(')')
                  PsiElement())(')')
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              ParametrizedType: Either[(Int, Int), (Int, Int)]
                SimpleType: Either
                  CodeReferenceElement: Either
                    PsiElement(identifier)('Either')
                TypeArgumentsList
                  PsiElement([)('[')
                  TupleType: (Int, Int)
                    PsiElement(()('(')
                    TypesList
                      SimpleType: Int
                        CodeReferenceElement: Int
                          PsiElement(identifier)('Int')
                      PsiElement(,)(',')
                      PsiWhiteSpace(' ')
                      SimpleType: Int
                        CodeReferenceElement: Int
                          PsiElement(identifier)('Int')
                    PsiElement())(')')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  TupleType: (Int, Int)
                    PsiElement(()('(')
                    TypesList
                      SimpleType: Int
                        CodeReferenceElement: Int
                          PsiElement(identifier)('Int')
                      PsiElement(,)(',')
                      PsiWhiteSpace(' ')
                      SimpleType: Int
                        CodeReferenceElement: Int
                          PsiElement(identifier)('Int')
                    PsiElement())(')')
                  PsiElement(])(']')
            PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(match)('match')
          PsiWhiteSpace(' ')
          PsiElement({)('{')
          PsiWhiteSpace('\n    ')
          CaseClauses
            CaseClause
              PsiElement(case)('case')
              PsiWhiteSpace(' ')
              ConstructorPattern
                CodeReferenceElement: LeftOrRight
                  PsiElement(identifier)('LeftOrRight')
                Pattern Argument List
                  PsiElement(()('(')
                  ReferencePattern: a
                    PsiElement(identifier)('a')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  ReferencePattern: b
                    PsiElement(identifier)('b')
                  PsiElement())(')')
              PsiWhiteSpace(' ')
              PsiElement(=>)('=>')
              PsiWhiteSpace(' ')
              BlockOfExpressions
                ReferenceExpression: a
                  PsiElement(identifier)('a')
          PsiWhiteSpace(' ')
          PsiComment(comment)('// false -Xlint warning: "extractor pattern binds a single value to a Product2 of type (Int, Int)"')
          PsiWhiteSpace('\n  ')
          PsiElement(})('}')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
