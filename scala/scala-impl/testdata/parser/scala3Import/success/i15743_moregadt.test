enum SUB[-A, +B]:
  case Refl[C]() extends SUB[C, C]
import SUB._

type <:<[A, B] = SUB[A, B]

def foo[A, T](ev: T <:< Tuple) = ev.match { case Refl() =>
  val t1: Int *: T = ???
  val t2: Int = t1.head  // works

  val t3: A *: T = ???
  val t4: A = t3.head    // boom

  val t5: Tuple.Head[Int *: T] = 0  // boom
  val t6: Tuple.Head[A *: T] = t4  // boom
}
-----
ScalaFile
  ScEnum: SUB
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(enum)('enum')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('SUB')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: A
        PsiElement(identifier)('-')
        PsiElement(identifier)('A')
      PsiElement(,)(',')
      PsiWhiteSpace(' ')
      TypeParameter: B
        PsiElement(identifier)('+')
        PsiElement(identifier)('B')
      PsiElement(])(']')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    ExtendsBlock
      ScTemplateBody
        PsiElement(:)(':')
        PsiWhiteSpace('\n  ')
        ScEnumCases: Refl
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(case)('case')
          PsiWhiteSpace(' ')
          ScEnumClassCase: Refl
            PsiElement(identifier)('Refl')
            TypeParameterClause
              PsiElement([)('[')
              TypeParameter: C
                PsiElement(identifier)('C')
              PsiElement(])(']')
            PrimaryConstructor
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              Parameters
                ParametersClause
                  PsiElement(()('(')
                  PsiElement())(')')
            PsiWhiteSpace(' ')
            ExtendsBlock
              PsiElement(extends)('extends')
              PsiWhiteSpace(' ')
              TemplateParents
                ConstructorInvocation
                  ParametrizedType: SUB[C, C]
                    SimpleType: SUB
                      CodeReferenceElement: SUB
                        PsiElement(identifier)('SUB')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: C
                        CodeReferenceElement: C
                          PsiElement(identifier)('C')
                      PsiElement(,)(',')
                      PsiWhiteSpace(' ')
                      SimpleType: C
                        CodeReferenceElement: C
                          PsiElement(identifier)('C')
                      PsiElement(])(']')
  PsiWhiteSpace('\n')
  ScImportStatement
    PsiElement(import)('import')
    PsiWhiteSpace(' ')
    ImportExpression
      CodeReferenceElement: SUB
        PsiElement(identifier)('SUB')
      PsiElement(.)('.')
      PsiElement(_)('_')
  PsiWhiteSpace('\n\n')
  ScTypeAliasDefinition: <:<
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(type)('type')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('<:<')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: A
        PsiElement(identifier)('A')
      PsiElement(,)(',')
      PsiWhiteSpace(' ')
      TypeParameter: B
        PsiElement(identifier)('B')
      PsiElement(])(']')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    ParametrizedType: SUB[A, B]
      SimpleType: SUB
        CodeReferenceElement: SUB
          PsiElement(identifier)('SUB')
      TypeArgumentsList
        PsiElement([)('[')
        SimpleType: A
          CodeReferenceElement: A
            PsiElement(identifier)('A')
        PsiElement(,)(',')
        PsiWhiteSpace(' ')
        SimpleType: B
          CodeReferenceElement: B
            PsiElement(identifier)('B')
        PsiElement(])(']')
  PsiWhiteSpace('\n\n')
  ScFunctionDefinition: foo
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(def)('def')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('foo')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: A
        PsiElement(identifier)('A')
      PsiElement(,)(',')
      PsiWhiteSpace(' ')
      TypeParameter: T
        PsiElement(identifier)('T')
      PsiElement(])(']')
    Parameters
      ParametersClause
        PsiElement(()('(')
        Parameter: ev
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(identifier)('ev')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParameterType
            InfixType: T <:< Tuple
              SimpleType: T
                CodeReferenceElement: T
                  PsiElement(identifier)('T')
              PsiWhiteSpace(' ')
              CodeReferenceElement: <:<
                PsiElement(identifier)('<:<')
              PsiWhiteSpace(' ')
              SimpleType: Tuple
                CodeReferenceElement: Tuple
                  PsiElement(identifier)('Tuple')
        PsiElement())(')')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    MatchStatement
      ReferenceExpression: ev
        PsiElement(identifier)('ev')
      PsiElement(.)('.')
      PsiElement(match)('match')
      PsiWhiteSpace(' ')
      PsiElement({)('{')
      PsiWhiteSpace(' ')
      CaseClauses
        CaseClause
          PsiElement(case)('case')
          PsiWhiteSpace(' ')
          ConstructorPattern
            CodeReferenceElement: Refl
              PsiElement(identifier)('Refl')
            Pattern Argument List
              PsiElement(()('(')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(=>)('=>')
          PsiWhiteSpace('\n  ')
          BlockOfExpressions
            ScPatternDefinition: t1
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              ListOfPatterns
                ReferencePattern: t1
                  PsiElement(identifier)('t1')
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              InfixType: Int *: T
                SimpleType: Int
                  CodeReferenceElement: Int
                    PsiElement(identifier)('Int')
                PsiWhiteSpace(' ')
                CodeReferenceElement: *:
                  PsiElement(identifier)('*:')
                PsiWhiteSpace(' ')
                SimpleType: T
                  CodeReferenceElement: T
                    PsiElement(identifier)('T')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              ReferenceExpression: ???
                PsiElement(identifier)('???')
            PsiWhiteSpace('\n  ')
            ScPatternDefinition: t2
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              ListOfPatterns
                ReferencePattern: t2
                  PsiElement(identifier)('t2')
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              SimpleType: Int
                CodeReferenceElement: Int
                  PsiElement(identifier)('Int')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              ReferenceExpression: t1.head
                ReferenceExpression: t1
                  PsiElement(identifier)('t1')
                PsiElement(.)('.')
                PsiElement(identifier)('head')
            PsiWhiteSpace('  ')
            PsiComment(comment)('// works')
            PsiWhiteSpace('\n\n  ')
            ScPatternDefinition: t3
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              ListOfPatterns
                ReferencePattern: t3
                  PsiElement(identifier)('t3')
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              InfixType: A *: T
                SimpleType: A
                  CodeReferenceElement: A
                    PsiElement(identifier)('A')
                PsiWhiteSpace(' ')
                CodeReferenceElement: *:
                  PsiElement(identifier)('*:')
                PsiWhiteSpace(' ')
                SimpleType: T
                  CodeReferenceElement: T
                    PsiElement(identifier)('T')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              ReferenceExpression: ???
                PsiElement(identifier)('???')
            PsiWhiteSpace('\n  ')
            ScPatternDefinition: t4
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              ListOfPatterns
                ReferencePattern: t4
                  PsiElement(identifier)('t4')
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              SimpleType: A
                CodeReferenceElement: A
                  PsiElement(identifier)('A')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              ReferenceExpression: t3.head
                ReferenceExpression: t3
                  PsiElement(identifier)('t3')
                PsiElement(.)('.')
                PsiElement(identifier)('head')
            PsiWhiteSpace('    ')
            PsiComment(comment)('// boom')
            PsiWhiteSpace('\n\n  ')
            ScPatternDefinition: t5
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              ListOfPatterns
                ReferencePattern: t5
                  PsiElement(identifier)('t5')
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              ParametrizedType: Tuple.Head[Int *: T]
                SimpleType: Tuple.Head
                  CodeReferenceElement: Tuple.Head
                    CodeReferenceElement: Tuple
                      PsiElement(identifier)('Tuple')
                    PsiElement(.)('.')
                    PsiElement(identifier)('Head')
                TypeArgumentsList
                  PsiElement([)('[')
                  InfixType: Int *: T
                    SimpleType: Int
                      CodeReferenceElement: Int
                        PsiElement(identifier)('Int')
                    PsiWhiteSpace(' ')
                    CodeReferenceElement: *:
                      PsiElement(identifier)('*:')
                    PsiWhiteSpace(' ')
                    SimpleType: T
                      CodeReferenceElement: T
                        PsiElement(identifier)('T')
                  PsiElement(])(']')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              IntegerLiteral
                PsiElement(integer)('0')
            PsiWhiteSpace('  ')
            PsiComment(comment)('// boom')
            PsiWhiteSpace('\n  ')
            ScPatternDefinition: t6
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              ListOfPatterns
                ReferencePattern: t6
                  PsiElement(identifier)('t6')
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              ParametrizedType: Tuple.Head[A *: T]
                SimpleType: Tuple.Head
                  CodeReferenceElement: Tuple.Head
                    CodeReferenceElement: Tuple
                      PsiElement(identifier)('Tuple')
                    PsiElement(.)('.')
                    PsiElement(identifier)('Head')
                TypeArgumentsList
                  PsiElement([)('[')
                  InfixType: A *: T
                    SimpleType: A
                      CodeReferenceElement: A
                        PsiElement(identifier)('A')
                    PsiWhiteSpace(' ')
                    CodeReferenceElement: *:
                      PsiElement(identifier)('*:')
                    PsiWhiteSpace(' ')
                    SimpleType: T
                      CodeReferenceElement: T
                        PsiElement(identifier)('T')
                  PsiElement(])(']')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              ReferenceExpression: t4
                PsiElement(identifier)('t4')
      PsiWhiteSpace('  ')
      PsiComment(comment)('// boom')
      PsiWhiteSpace('\n')
      PsiElement(})('}')
