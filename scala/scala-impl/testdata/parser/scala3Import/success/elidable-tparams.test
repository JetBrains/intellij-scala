import annotation.*
import elidable.*

class ElidableCrashTest {
  trait My

  @elidable(MINIMUM) def foo[a >: My <: My]: scala.Unit = ()

  foo[My] // crash
}
-----
ScalaFile
  ScImportStatement
    PsiElement(import)('import')
    PsiWhiteSpace(' ')
    ImportExpression
      CodeReferenceElement: annotation
        PsiElement(identifier)('annotation')
      PsiElement(.)('.')
      PsiElement(*)('*')
  PsiWhiteSpace('\n')
  ScImportStatement
    PsiElement(import)('import')
    PsiWhiteSpace(' ')
    ImportExpression
      CodeReferenceElement: elidable
        PsiElement(identifier)('elidable')
      PsiElement(.)('.')
      PsiElement(*)('*')
  PsiWhiteSpace('\n\n')
  ScClass: ElidableCrashTest
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('ElidableCrashTest')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScTrait: My
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(trait)('trait')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('My')
          ExtendsBlock
            <empty list>
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: foo
          AnnotationsList
            Annotation
              PsiElement(@)('@')
              AnnotationExpression
                ConstructorInvocation
                  SimpleType: elidable
                    CodeReferenceElement: elidable
                      PsiElement(identifier)('elidable')
                  ArgumentList
                    PsiElement(()('(')
                    ReferenceExpression: MINIMUM
                      PsiElement(identifier)('MINIMUM')
                    PsiElement())(')')
          Modifiers
            <empty list>
          PsiWhiteSpace(' ')
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('foo')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: a
              PsiElement(identifier)('a')
              PsiWhiteSpace(' ')
              PsiElement(>:)('>:')
              PsiWhiteSpace(' ')
              SimpleType: My
                CodeReferenceElement: My
                  PsiElement(identifier)('My')
              PsiWhiteSpace(' ')
              PsiElement(<:)('<:')
              PsiWhiteSpace(' ')
              SimpleType: My
                CodeReferenceElement: My
                  PsiElement(identifier)('My')
            PsiElement(])(']')
          Parameters
            <empty list>
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: scala.Unit
            CodeReferenceElement: scala.Unit
              CodeReferenceElement: scala
                PsiElement(identifier)('scala')
              PsiElement(.)('.')
              PsiElement(identifier)('Unit')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          UnitExpression
            PsiElement(()('(')
            PsiElement())(')')
        PsiWhiteSpace('\n\n  ')
        GenericCall
          ReferenceExpression: foo
            PsiElement(identifier)('foo')
          TypeArgumentsList
            PsiElement([)('[')
            SimpleType: My
              CodeReferenceElement: My
                PsiElement(identifier)('My')
            PsiElement(])(']')
        PsiWhiteSpace(' ')
        PsiComment(comment)('// crash')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
