object Repeated {
  val list = List(1, 2, 3)

  list match {
    case List(_, _, _, _ @ _*)  =>   0  // error: only allowed in Scala2 mode
    case List(_, _, _*)         =>   1  // error: only allowed in Scala2 mode
    case List(_, _*)            =>   2
    case Nil                    =>   3
  }
}
-----
ScalaFile
  ScObject: Repeated
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Repeated')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: list
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: list
              PsiElement(identifier)('list')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: List
              PsiElement(identifier)('List')
            ArgumentList
              PsiElement(()('(')
              IntegerLiteral
                PsiElement(integer)('1')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              IntegerLiteral
                PsiElement(integer)('2')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              IntegerLiteral
                PsiElement(integer)('3')
              PsiElement())(')')
        PsiWhiteSpace('\n\n  ')
        MatchStatement
          ReferenceExpression: list
            PsiElement(identifier)('list')
          PsiWhiteSpace(' ')
          PsiElement(match)('match')
          PsiWhiteSpace(' ')
          PsiElement({)('{')
          PsiWhiteSpace('\n    ')
          CaseClauses
            CaseClause
              PsiElement(case)('case')
              PsiWhiteSpace(' ')
              ConstructorPattern
                CodeReferenceElement: List
                  PsiElement(identifier)('List')
                Pattern Argument List
                  PsiElement(()('(')
                  WildcardPattern
                    PsiElement(_)('_')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  WildcardPattern
                    PsiElement(_)('_')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  WildcardPattern
                    PsiElement(_)('_')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  NamingPattern: _
                    PsiElement(_)('_')
                    PsiWhiteSpace(' ')
                    PsiElement(@)('@')
                    PsiWhiteSpace(' ')
                    SequenceWildcardPattern: _
                      PsiElement(_)('_')
                      PsiElement(identifier)('*')
                  PsiElement())(')')
              PsiWhiteSpace('  ')
              PsiElement(=>)('=>')
              PsiWhiteSpace('   ')
              BlockOfExpressions
                IntegerLiteral
                  PsiElement(integer)('0')
            PsiWhiteSpace('  ')
            PsiComment(comment)('// error: only allowed in Scala2 mode')
            PsiWhiteSpace('\n    ')
            CaseClause
              PsiElement(case)('case')
              PsiWhiteSpace(' ')
              ConstructorPattern
                CodeReferenceElement: List
                  PsiElement(identifier)('List')
                Pattern Argument List
                  PsiElement(()('(')
                  WildcardPattern
                    PsiElement(_)('_')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  WildcardPattern
                    PsiElement(_)('_')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  SequenceWildcardPattern: _
                    PsiElement(_)('_')
                    PsiElement(identifier)('*')
                  PsiElement())(')')
              PsiWhiteSpace('         ')
              PsiElement(=>)('=>')
              PsiWhiteSpace('   ')
              BlockOfExpressions
                IntegerLiteral
                  PsiElement(integer)('1')
            PsiWhiteSpace('  ')
            PsiComment(comment)('// error: only allowed in Scala2 mode')
            PsiWhiteSpace('\n    ')
            CaseClause
              PsiElement(case)('case')
              PsiWhiteSpace(' ')
              ConstructorPattern
                CodeReferenceElement: List
                  PsiElement(identifier)('List')
                Pattern Argument List
                  PsiElement(()('(')
                  WildcardPattern
                    PsiElement(_)('_')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  SequenceWildcardPattern: _
                    PsiElement(_)('_')
                    PsiElement(identifier)('*')
                  PsiElement())(')')
              PsiWhiteSpace('            ')
              PsiElement(=>)('=>')
              PsiWhiteSpace('   ')
              BlockOfExpressions
                IntegerLiteral
                  PsiElement(integer)('2')
            PsiWhiteSpace('\n    ')
            CaseClause
              PsiElement(case)('case')
              PsiWhiteSpace(' ')
              StableElementPattern
                ReferenceExpression: Nil
                  PsiElement(identifier)('Nil')
              PsiWhiteSpace('                    ')
              PsiElement(=>)('=>')
              PsiWhiteSpace('   ')
              BlockOfExpressions
                IntegerLiteral
                  PsiElement(integer)('3')
          PsiWhiteSpace('\n  ')
          PsiElement(})('}')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
