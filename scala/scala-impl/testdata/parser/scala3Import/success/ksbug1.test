object test {
  type z[a, b] = a => b
  def f : z[Int, Int] = (i => i + 1)
}
-----
ScalaFile
  ScObject: test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('test')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScTypeAliasDefinition: z
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('z')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: a
              PsiElement(identifier)('a')
            PsiElement(,)(',')
            PsiWhiteSpace(' ')
            TypeParameter: b
              PsiElement(identifier)('b')
            PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          FunctionalType: a => b
            SimpleType: a
              CodeReferenceElement: a
                PsiElement(identifier)('a')
            PsiWhiteSpace(' ')
            PsiElement(=>)('=>')
            PsiWhiteSpace(' ')
            SimpleType: b
              CodeReferenceElement: b
                PsiElement(identifier)('b')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: f
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('f')
          Parameters
            <empty list>
          PsiWhiteSpace(' ')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: z[Int, Int]
            SimpleType: z
              CodeReferenceElement: z
                PsiElement(identifier)('z')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: Int
                CodeReferenceElement: Int
                  PsiElement(identifier)('Int')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              SimpleType: Int
                CodeReferenceElement: Int
                  PsiElement(identifier)('Int')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ExpressionInParenthesis
            PsiElement(()('(')
            FunctionExpression
              Parameters
                ParametersClause
                  Parameter: i
                    PsiElement(identifier)('i')
              PsiWhiteSpace(' ')
              PsiElement(=>)('=>')
              PsiWhiteSpace(' ')
              InfixExpression
                ReferenceExpression: i
                  PsiElement(identifier)('i')
                PsiWhiteSpace(' ')
                ReferenceExpression: +
                  PsiElement(identifier)('+')
                PsiWhiteSpace(' ')
                IntegerLiteral
                  PsiElement(integer)('1')
            PsiElement())(')')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
