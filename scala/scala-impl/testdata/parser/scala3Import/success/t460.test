object Bug460 {
  def testFun(x : Int, y : Int) = x + y
  val fn = testFun _

  fn(1, 2) // Ok
  (testFun(_, _))(1, 2) // Ok
  (testFun _).apply(1, 2)
  (testFun _)(1, 2) // Error! (but no longer)
}
-----
ScalaFile
  ScObject: Bug460
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Bug460')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: testFun
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('testFun')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: x
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x')
                PsiWhiteSpace(' ')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Int
                    CodeReferenceElement: Int
                      PsiElement(identifier)('Int')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              Parameter: y
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('y')
                PsiWhiteSpace(' ')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Int
                    CodeReferenceElement: Int
                      PsiElement(identifier)('Int')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          InfixExpression
            ReferenceExpression: x
              PsiElement(identifier)('x')
            PsiWhiteSpace(' ')
            ReferenceExpression: +
              PsiElement(identifier)('+')
            PsiWhiteSpace(' ')
            ReferenceExpression: y
              PsiElement(identifier)('y')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: fn
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: fn
              PsiElement(identifier)('fn')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          UnderscoreSection
            ReferenceExpression: testFun
              PsiElement(identifier)('testFun')
            PsiWhiteSpace(' ')
            PsiElement(_)('_')
        PsiWhiteSpace('\n\n  ')
        MethodCall
          ReferenceExpression: fn
            PsiElement(identifier)('fn')
          ArgumentList
            PsiElement(()('(')
            IntegerLiteral
              PsiElement(integer)('1')
            PsiElement(,)(',')
            PsiWhiteSpace(' ')
            IntegerLiteral
              PsiElement(integer)('2')
            PsiElement())(')')
        PsiWhiteSpace(' ')
        PsiComment(comment)('// Ok')
        PsiWhiteSpace('\n  ')
        MethodCall
          ExpressionInParenthesis
            PsiElement(()('(')
            MethodCall
              ReferenceExpression: testFun
                PsiElement(identifier)('testFun')
              ArgumentList
                PsiElement(()('(')
                UnderscoreSection
                  PsiElement(_)('_')
                PsiElement(,)(',')
                PsiWhiteSpace(' ')
                UnderscoreSection
                  PsiElement(_)('_')
                PsiElement())(')')
            PsiElement())(')')
          ArgumentList
            PsiElement(()('(')
            IntegerLiteral
              PsiElement(integer)('1')
            PsiElement(,)(',')
            PsiWhiteSpace(' ')
            IntegerLiteral
              PsiElement(integer)('2')
            PsiElement())(')')
        PsiWhiteSpace(' ')
        PsiComment(comment)('// Ok')
        PsiWhiteSpace('\n  ')
        MethodCall
          ReferenceExpression: (testFun _).apply
            ExpressionInParenthesis
              PsiElement(()('(')
              UnderscoreSection
                ReferenceExpression: testFun
                  PsiElement(identifier)('testFun')
                PsiWhiteSpace(' ')
                PsiElement(_)('_')
              PsiElement())(')')
            PsiElement(.)('.')
            PsiElement(identifier)('apply')
          ArgumentList
            PsiElement(()('(')
            IntegerLiteral
              PsiElement(integer)('1')
            PsiElement(,)(',')
            PsiWhiteSpace(' ')
            IntegerLiteral
              PsiElement(integer)('2')
            PsiElement())(')')
        PsiWhiteSpace('\n  ')
        MethodCall
          ExpressionInParenthesis
            PsiElement(()('(')
            UnderscoreSection
              ReferenceExpression: testFun
                PsiElement(identifier)('testFun')
              PsiWhiteSpace(' ')
              PsiElement(_)('_')
            PsiElement())(')')
          ArgumentList
            PsiElement(()('(')
            IntegerLiteral
              PsiElement(integer)('1')
            PsiElement(,)(',')
            PsiWhiteSpace(' ')
            IntegerLiteral
              PsiElement(integer)('2')
            PsiElement())(')')
        PsiWhiteSpace(' ')
        PsiComment(comment)('// Error! (but no longer)')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
