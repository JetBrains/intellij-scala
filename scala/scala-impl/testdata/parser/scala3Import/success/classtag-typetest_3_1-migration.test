import scala.language.`future-migration`
import scala.reflect.ClassTag

def f3_1m[T: ClassTag](x: Any): Unit =
  x match
    case _: T =>
-----
ScalaFile
  ScImportStatement
    PsiElement(import)('import')
    PsiWhiteSpace(' ')
    ImportExpression
      CodeReferenceElement: scala.language.`future-migration`
        CodeReferenceElement: scala.language
          CodeReferenceElement: scala
            PsiElement(identifier)('scala')
          PsiElement(.)('.')
          PsiElement(identifier)('language')
        PsiElement(.)('.')
        PsiElement(identifier)('`future-migration`')
  PsiWhiteSpace('\n')
  ScImportStatement
    PsiElement(import)('import')
    PsiWhiteSpace(' ')
    ImportExpression
      CodeReferenceElement: scala.reflect.ClassTag
        CodeReferenceElement: scala.reflect
          CodeReferenceElement: scala
            PsiElement(identifier)('scala')
          PsiElement(.)('.')
          PsiElement(identifier)('reflect')
        PsiElement(.)('.')
        PsiElement(identifier)('ClassTag')
  PsiWhiteSpace('\n\n')
  ScFunctionDefinition: f3_1m
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(def)('def')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('f3_1m')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: T
        PsiElement(identifier)('T')
        PsiElement(:)(':')
        PsiWhiteSpace(' ')
        SimpleType: ClassTag
          CodeReferenceElement: ClassTag
            PsiElement(identifier)('ClassTag')
      PsiElement(])(']')
    Parameters
      ParametersClause
        PsiElement(()('(')
        Parameter: x
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(identifier)('x')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParameterType
            SimpleType: Any
              CodeReferenceElement: Any
                PsiElement(identifier)('Any')
        PsiElement())(')')
    PsiElement(:)(':')
    PsiWhiteSpace(' ')
    SimpleType: Unit
      CodeReferenceElement: Unit
        PsiElement(identifier)('Unit')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace('\n  ')
    MatchStatement
      ReferenceExpression: x
        PsiElement(identifier)('x')
      PsiWhiteSpace(' ')
      PsiElement(match)('match')
      PsiWhiteSpace('\n    ')
      CaseClauses
        CaseClause
          PsiElement(case)('case')
          PsiWhiteSpace(' ')
          Scala3 TypedPattern
            WildcardPattern
              PsiElement(_)('_')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            TypePattern
              SimpleType: T
                CodeReferenceElement: T
                  PsiElement(identifier)('T')
          PsiWhiteSpace(' ')
          PsiElement(=>)('=>')
          BlockOfExpressions
            <empty list>
