sealed abstract class N
trait Z extends N
trait S[P] extends N

object Test {
  type T[X] <: N =
    X match {
      case Z => Z
      case S[p] => T[p]
    }
}
-----
ScalaFile
  ScClass: N
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(sealed)('sealed')
      PsiWhiteSpace(' ')
      PsiElement(abstract)('abstract')
    PsiWhiteSpace(' ')
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('N')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    ExtendsBlock
      <empty list>
  PsiWhiteSpace('\n')
  ScTrait: Z
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Z')
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          SimpleType: N
            CodeReferenceElement: N
              PsiElement(identifier)('N')
  PsiWhiteSpace('\n')
  ScTrait: S
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('S')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: P
        PsiElement(identifier)('P')
      PsiElement(])(']')
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          SimpleType: N
            CodeReferenceElement: N
              PsiElement(identifier)('N')
  PsiWhiteSpace('\n\n')
  ScObject: Test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScTypeAliasDefinition: T
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('T')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: X
              PsiElement(identifier)('X')
            PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(<:)('<:')
          PsiWhiteSpace(' ')
          SimpleType: N
            CodeReferenceElement: N
              PsiElement(identifier)('N')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace('\n    ')
          MatchType: X match {
      case Z => Z
      case S[p] => T[p]
    }
            SimpleType: X
              CodeReferenceElement: X
                PsiElement(identifier)('X')
            PsiWhiteSpace(' ')
            PsiElement(match)('match')
            PsiWhiteSpace(' ')
            PsiElement({)('{')
            PsiWhiteSpace('\n      ')
            ScMatchTypeCasesImpl(match type cases)
              ScMatchTypeCaseImpl(match type case)
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                SimpleType: Z
                  CodeReferenceElement: Z
                    PsiElement(identifier)('Z')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                SimpleType: Z
                  CodeReferenceElement: Z
                    PsiElement(identifier)('Z')
              PsiWhiteSpace('\n      ')
              ScMatchTypeCaseImpl(match type case)
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                ParametrizedType: S[p]
                  SimpleType: S
                    CodeReferenceElement: S
                      PsiElement(identifier)('S')
                  TypeArgumentsList
                    PsiElement([)('[')
                    TypeVariable: p
                      PsiElement(identifier)('p')
                    PsiElement(])(']')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                ParametrizedType: T[p]
                  SimpleType: T
                    CodeReferenceElement: T
                      PsiElement(identifier)('T')
                  TypeArgumentsList
                    PsiElement([)('[')
                    SimpleType: p
                      CodeReferenceElement: p
                        PsiElement(identifier)('p')
                    PsiElement(])(']')
            PsiWhiteSpace('\n    ')
            PsiElement(})('}')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
