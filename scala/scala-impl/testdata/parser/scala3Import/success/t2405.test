object A { implicit val x: Int = 1 }

// Problem as stated in the ticket.
object Test1 {
    import A.x as y
    implicitly[Int]
}

// Testing for the absence of shadowing #1.
object Test2 {
    import A.x as y
    val x = 2
    implicitly[Int]
}

// Testing for the absence of shadowing #2.
object Test3 {
    {
        import A.x as y
        def x: Int = 0
        implicitly[Int]
    }
}
-----
ScalaFile
  ScObject: A
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('A')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace(' ')
        ScPatternDefinition: x
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(implicit)('implicit')
          PsiWhiteSpace(' ')
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: x
              PsiElement(identifier)('x')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Int
            CodeReferenceElement: Int
              PsiElement(identifier)('Int')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          IntegerLiteral
            PsiElement(integer)('1')
        PsiWhiteSpace(' ')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScObject: Test1
    PsiComment(comment)('// Problem as stated in the ticket.')
    PsiWhiteSpace('\n')
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test1')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n    ')
        ScImportStatement
          PsiElement(import)('import')
          PsiWhiteSpace(' ')
          ImportExpression
            CodeReferenceElement: A
              PsiElement(identifier)('A')
            PsiElement(.)('.')
            ImportSelectors
              ImportSelector
                CodeReferenceElement: x
                  PsiElement(identifier)('x')
                PsiWhiteSpace(' ')
                PsiElement(as)('as')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('y')
        PsiWhiteSpace('\n    ')
        GenericCall
          ReferenceExpression: implicitly
            PsiElement(identifier)('implicitly')
          TypeArgumentsList
            PsiElement([)('[')
            SimpleType: Int
              CodeReferenceElement: Int
                PsiElement(identifier)('Int')
            PsiElement(])(']')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScObject: Test2
    PsiComment(comment)('// Testing for the absence of shadowing #1.')
    PsiWhiteSpace('\n')
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test2')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n    ')
        ScImportStatement
          PsiElement(import)('import')
          PsiWhiteSpace(' ')
          ImportExpression
            CodeReferenceElement: A
              PsiElement(identifier)('A')
            PsiElement(.)('.')
            ImportSelectors
              ImportSelector
                CodeReferenceElement: x
                  PsiElement(identifier)('x')
                PsiWhiteSpace(' ')
                PsiElement(as)('as')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('y')
        PsiWhiteSpace('\n    ')
        ScPatternDefinition: x
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: x
              PsiElement(identifier)('x')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          IntegerLiteral
            PsiElement(integer)('2')
        PsiWhiteSpace('\n    ')
        GenericCall
          ReferenceExpression: implicitly
            PsiElement(identifier)('implicitly')
          TypeArgumentsList
            PsiElement([)('[')
            SimpleType: Int
              CodeReferenceElement: Int
                PsiElement(identifier)('Int')
            PsiElement(])(']')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScObject: Test3
    PsiComment(comment)('// Testing for the absence of shadowing #2.')
    PsiWhiteSpace('\n')
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test3')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n    ')
        BlockExpression
          PsiElement({)('{')
          PsiWhiteSpace('\n        ')
          ScImportStatement
            PsiElement(import)('import')
            PsiWhiteSpace(' ')
            ImportExpression
              CodeReferenceElement: A
                PsiElement(identifier)('A')
              PsiElement(.)('.')
              ImportSelectors
                ImportSelector
                  CodeReferenceElement: x
                    PsiElement(identifier)('x')
                  PsiWhiteSpace(' ')
                  PsiElement(as)('as')
                  PsiWhiteSpace(' ')
                  PsiElement(identifier)('y')
          PsiWhiteSpace('\n        ')
          ScFunctionDefinition: x
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(def)('def')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('x')
            Parameters
              <empty list>
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            SimpleType: Int
              CodeReferenceElement: Int
                PsiElement(identifier)('Int')
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace(' ')
            IntegerLiteral
              PsiElement(integer)('0')
          PsiWhiteSpace('\n        ')
          GenericCall
            ReferenceExpression: implicitly
              PsiElement(identifier)('implicitly')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: Int
                CodeReferenceElement: Int
                  PsiElement(identifier)('Int')
              PsiElement(])(']')
          PsiWhiteSpace('\n    ')
          PsiElement(})('}')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
