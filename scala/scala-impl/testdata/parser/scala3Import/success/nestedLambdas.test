class Test {

  type T = [X] =>> [Y] =>> (X, Y)

  type A[X] = [Y] =>> (X, Y)

  type B[X] = (X, X)

  val x: T[Int][Boolean] = ???

  val y: A[Int][Boolean] = x

  def f[X <: [Y] =>> T[Int][Y]] = ???

  f[A[Int]]

  def g[X <: [Y] =>> [Z] =>> T[Y][Z]] = ???

  g[A]

}
-----
ScalaFile
  ScClass: Test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n\n  ')
        ScTypeAliasDefinition: T
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('T')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          TypeLambda: [X] =>> [Y] =>> (X, Y)
            TypeParameterClause
              PsiElement([)('[')
              TypeParameter: X
                PsiElement(identifier)('X')
              PsiElement(])(']')
            PsiWhiteSpace(' ')
            PsiElement(=>>)('=>>')
            PsiWhiteSpace(' ')
            TypeLambda: [Y] =>> (X, Y)
              TypeParameterClause
                PsiElement([)('[')
                TypeParameter: Y
                  PsiElement(identifier)('Y')
                PsiElement(])(']')
              PsiWhiteSpace(' ')
              PsiElement(=>>)('=>>')
              PsiWhiteSpace(' ')
              TupleType: (X, Y)
                PsiElement(()('(')
                TypesList
                  SimpleType: X
                    CodeReferenceElement: X
                      PsiElement(identifier)('X')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  SimpleType: Y
                    CodeReferenceElement: Y
                      PsiElement(identifier)('Y')
                PsiElement())(')')
        PsiWhiteSpace('\n\n  ')
        ScTypeAliasDefinition: A
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('A')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: X
              PsiElement(identifier)('X')
            PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          TypeLambda: [Y] =>> (X, Y)
            TypeParameterClause
              PsiElement([)('[')
              TypeParameter: Y
                PsiElement(identifier)('Y')
              PsiElement(])(']')
            PsiWhiteSpace(' ')
            PsiElement(=>>)('=>>')
            PsiWhiteSpace(' ')
            TupleType: (X, Y)
              PsiElement(()('(')
              TypesList
                SimpleType: X
                  CodeReferenceElement: X
                    PsiElement(identifier)('X')
                PsiElement(,)(',')
                PsiWhiteSpace(' ')
                SimpleType: Y
                  CodeReferenceElement: Y
                    PsiElement(identifier)('Y')
              PsiElement())(')')
        PsiWhiteSpace('\n\n  ')
        ScTypeAliasDefinition: B
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('B')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: X
              PsiElement(identifier)('X')
            PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          TupleType: (X, X)
            PsiElement(()('(')
            TypesList
              SimpleType: X
                CodeReferenceElement: X
                  PsiElement(identifier)('X')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              SimpleType: X
                CodeReferenceElement: X
                  PsiElement(identifier)('X')
            PsiElement())(')')
        PsiWhiteSpace('\n\n  ')
        ScPatternDefinition: x
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: x
              PsiElement(identifier)('x')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: T[Int][Boolean]
            ParametrizedType: T[Int]
              SimpleType: T
                CodeReferenceElement: T
                  PsiElement(identifier)('T')
              TypeArgumentsList
                PsiElement([)('[')
                SimpleType: Int
                  CodeReferenceElement: Int
                    PsiElement(identifier)('Int')
                PsiElement(])(']')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: Boolean
                CodeReferenceElement: Boolean
                  PsiElement(identifier)('Boolean')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: ???
            PsiElement(identifier)('???')
        PsiWhiteSpace('\n\n  ')
        ScPatternDefinition: y
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: y
              PsiElement(identifier)('y')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: A[Int][Boolean]
            ParametrizedType: A[Int]
              SimpleType: A
                CodeReferenceElement: A
                  PsiElement(identifier)('A')
              TypeArgumentsList
                PsiElement([)('[')
                SimpleType: Int
                  CodeReferenceElement: Int
                    PsiElement(identifier)('Int')
                PsiElement(])(']')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: Boolean
                CodeReferenceElement: Boolean
                  PsiElement(identifier)('Boolean')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: x
            PsiElement(identifier)('x')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: f
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('f')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: X
              PsiElement(identifier)('X')
              PsiWhiteSpace(' ')
              PsiElement(<:)('<:')
              PsiWhiteSpace(' ')
              TypeLambda: [Y] =>> T[Int][Y]
                TypeParameterClause
                  PsiElement([)('[')
                  TypeParameter: Y
                    PsiElement(identifier)('Y')
                  PsiElement(])(']')
                PsiWhiteSpace(' ')
                PsiElement(=>>)('=>>')
                PsiWhiteSpace(' ')
                ParametrizedType: T[Int][Y]
                  ParametrizedType: T[Int]
                    SimpleType: T
                      CodeReferenceElement: T
                        PsiElement(identifier)('T')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: Int
                        CodeReferenceElement: Int
                          PsiElement(identifier)('Int')
                      PsiElement(])(']')
                  TypeArgumentsList
                    PsiElement([)('[')
                    SimpleType: Y
                      CodeReferenceElement: Y
                        PsiElement(identifier)('Y')
                    PsiElement(])(']')
            PsiElement(])(']')
          Parameters
            <empty list>
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: ???
            PsiElement(identifier)('???')
        PsiWhiteSpace('\n\n  ')
        GenericCall
          ReferenceExpression: f
            PsiElement(identifier)('f')
          TypeArgumentsList
            PsiElement([)('[')
            ParametrizedType: A[Int]
              SimpleType: A
                CodeReferenceElement: A
                  PsiElement(identifier)('A')
              TypeArgumentsList
                PsiElement([)('[')
                SimpleType: Int
                  CodeReferenceElement: Int
                    PsiElement(identifier)('Int')
                PsiElement(])(']')
            PsiElement(])(']')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: g
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('g')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: X
              PsiElement(identifier)('X')
              PsiWhiteSpace(' ')
              PsiElement(<:)('<:')
              PsiWhiteSpace(' ')
              TypeLambda: [Y] =>> [Z] =>> T[Y][Z]
                TypeParameterClause
                  PsiElement([)('[')
                  TypeParameter: Y
                    PsiElement(identifier)('Y')
                  PsiElement(])(']')
                PsiWhiteSpace(' ')
                PsiElement(=>>)('=>>')
                PsiWhiteSpace(' ')
                TypeLambda: [Z] =>> T[Y][Z]
                  TypeParameterClause
                    PsiElement([)('[')
                    TypeParameter: Z
                      PsiElement(identifier)('Z')
                    PsiElement(])(']')
                  PsiWhiteSpace(' ')
                  PsiElement(=>>)('=>>')
                  PsiWhiteSpace(' ')
                  ParametrizedType: T[Y][Z]
                    ParametrizedType: T[Y]
                      SimpleType: T
                        CodeReferenceElement: T
                          PsiElement(identifier)('T')
                      TypeArgumentsList
                        PsiElement([)('[')
                        SimpleType: Y
                          CodeReferenceElement: Y
                            PsiElement(identifier)('Y')
                        PsiElement(])(']')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: Z
                        CodeReferenceElement: Z
                          PsiElement(identifier)('Z')
                      PsiElement(])(']')
            PsiElement(])(']')
          Parameters
            <empty list>
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: ???
            PsiElement(identifier)('???')
        PsiWhiteSpace('\n\n  ')
        GenericCall
          ReferenceExpression: g
            PsiElement(identifier)('g')
          TypeArgumentsList
            PsiElement([)('[')
            SimpleType: A
              CodeReferenceElement: A
                PsiElement(identifier)('A')
            PsiElement(])(']')
        PsiWhiteSpace('\n\n')
        PsiElement(})('}')
