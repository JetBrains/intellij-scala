object HelloWorld {
  def whileLoop: Int = {
    var i = 0
    var acc = 0
    while (i < 3) {
      var `i'` = 0
      while (`i'` < 4) {
        acc += (i * `i'`)
        `i'` += 1
      }
      i += 1
    }
    acc
  }

  def main(args: Array[String]): Unit = {
    println(s"hello world: ${whileLoop}")
  }
}
-----
ScalaFile
  ScObject: HelloWorld
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('HelloWorld')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: whileLoop
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('whileLoop')
          Parameters
            <empty list>
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Int
            CodeReferenceElement: Int
              PsiElement(identifier)('Int')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          BlockExpression
            PsiElement({)('{')
            PsiWhiteSpace('\n    ')
            ScVariableDefinition: i
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(var)('var')
              PsiWhiteSpace(' ')
              ListOfPatterns
                ReferencePattern: i
                  PsiElement(identifier)('i')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              IntegerLiteral
                PsiElement(integer)('0')
            PsiWhiteSpace('\n    ')
            ScVariableDefinition: acc
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(var)('var')
              PsiWhiteSpace(' ')
              ListOfPatterns
                ReferencePattern: acc
                  PsiElement(identifier)('acc')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              IntegerLiteral
                PsiElement(integer)('0')
            PsiWhiteSpace('\n    ')
            WhileStatement
              PsiElement(while)('while')
              PsiWhiteSpace(' ')
              PsiElement(()('(')
              InfixExpression
                ReferenceExpression: i
                  PsiElement(identifier)('i')
                PsiWhiteSpace(' ')
                ReferenceExpression: <
                  PsiElement(identifier)('<')
                PsiWhiteSpace(' ')
                IntegerLiteral
                  PsiElement(integer)('3')
              PsiElement())(')')
              PsiWhiteSpace(' ')
              BlockExpression
                PsiElement({)('{')
                PsiWhiteSpace('\n      ')
                ScVariableDefinition: `i'`
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(var)('var')
                  PsiWhiteSpace(' ')
                  ListOfPatterns
                    ReferencePattern: `i'`
                      PsiElement(identifier)('`i'`')
                  PsiWhiteSpace(' ')
                  PsiElement(=)('=')
                  PsiWhiteSpace(' ')
                  IntegerLiteral
                    PsiElement(integer)('0')
                PsiWhiteSpace('\n      ')
                WhileStatement
                  PsiElement(while)('while')
                  PsiWhiteSpace(' ')
                  PsiElement(()('(')
                  InfixExpression
                    ReferenceExpression: `i'`
                      PsiElement(identifier)('`i'`')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: <
                      PsiElement(identifier)('<')
                    PsiWhiteSpace(' ')
                    IntegerLiteral
                      PsiElement(integer)('4')
                  PsiElement())(')')
                  PsiWhiteSpace(' ')
                  BlockExpression
                    PsiElement({)('{')
                    PsiWhiteSpace('\n        ')
                    InfixExpression
                      ReferenceExpression: acc
                        PsiElement(identifier)('acc')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: +=
                        PsiElement(identifier)('+=')
                      PsiWhiteSpace(' ')
                      ExpressionInParenthesis
                        PsiElement(()('(')
                        InfixExpression
                          ReferenceExpression: i
                            PsiElement(identifier)('i')
                          PsiWhiteSpace(' ')
                          ReferenceExpression: *
                            PsiElement(identifier)('*')
                          PsiWhiteSpace(' ')
                          ReferenceExpression: `i'`
                            PsiElement(identifier)('`i'`')
                        PsiElement())(')')
                    PsiWhiteSpace('\n        ')
                    InfixExpression
                      ReferenceExpression: `i'`
                        PsiElement(identifier)('`i'`')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: +=
                        PsiElement(identifier)('+=')
                      PsiWhiteSpace(' ')
                      IntegerLiteral
                        PsiElement(integer)('1')
                    PsiWhiteSpace('\n      ')
                    PsiElement(})('}')
                PsiWhiteSpace('\n      ')
                InfixExpression
                  ReferenceExpression: i
                    PsiElement(identifier)('i')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: +=
                    PsiElement(identifier)('+=')
                  PsiWhiteSpace(' ')
                  IntegerLiteral
                    PsiElement(integer)('1')
                PsiWhiteSpace('\n    ')
                PsiElement(})('}')
            PsiWhiteSpace('\n    ')
            ReferenceExpression: acc
              PsiElement(identifier)('acc')
            PsiWhiteSpace('\n  ')
            PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: main
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('main')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: args
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('args')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  ParametrizedType: Array[String]
                    SimpleType: Array
                      CodeReferenceElement: Array
                        PsiElement(identifier)('Array')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: String
                        CodeReferenceElement: String
                          PsiElement(identifier)('String')
                      PsiElement(])(']')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Unit
            CodeReferenceElement: Unit
              PsiElement(identifier)('Unit')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          BlockExpression
            PsiElement({)('{')
            PsiWhiteSpace('\n    ')
            MethodCall
              ReferenceExpression: println
                PsiElement(identifier)('println')
              ArgumentList
                PsiElement(()('(')
                InterpolatedStringLiteral
                  InterpolatedExpressionPrefix: s
                    PsiElement(interpolated string id)('s')
                  PsiElement(interpolated string)('"hello world: ')
                  PsiElement(interpolated string injection)('$')
                  BlockExpression
                    PsiElement({)('{')
                    ReferenceExpression: whileLoop
                      PsiElement(identifier)('whileLoop')
                    PsiElement(})('}')
                  PsiElement(interpolated string end)('"')
                PsiElement())(')')
            PsiWhiteSpace('\n  ')
            PsiElement(})('}')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
