class Inv[M]

class Module:
  type X
  type Y
  type M = Module {
    type X = Module.this.X
    type Y = Module.this.Y
  }
  def expose = new Inv[M]
  def test                  = this match { case m => m.expose }
  // was: leak: `(m : Module)` in `m.expose: Inv[? <: Module { X = m.X }]`
  def res: Inv[_ <: Module] = this match { case m => m.expose }
-----
ScalaFile
  ScClass: Inv
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Inv')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: M
        PsiElement(identifier)('M')
      PsiElement(])(']')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    ExtendsBlock
      <empty list>
  PsiWhiteSpace('\n\n')
  ScClass: Module
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Module')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    ExtendsBlock
      ScTemplateBody
        PsiElement(:)(':')
        PsiWhiteSpace('\n  ')
        ScTypeAliasDeclaration: X
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('X')
        PsiWhiteSpace('\n  ')
        ScTypeAliasDeclaration: Y
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Y')
        PsiWhiteSpace('\n  ')
        ScTypeAliasDefinition: M
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('M')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          CompoundType: Module {
    type X = Module.this.X
    type Y = Module.this.Y
  }
            SimpleType: Module
              CodeReferenceElement: Module
                PsiElement(identifier)('Module')
            PsiWhiteSpace(' ')
            Refinement
              PsiElement({)('{')
              PsiWhiteSpace('\n    ')
              ScTypeAliasDefinition: X
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(type)('type')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('X')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                SimpleType: Module.this.X
                  CodeReferenceElement: Module.this.X
                    ThisReference
                      CodeReferenceElement: Module
                        PsiElement(identifier)('Module')
                      PsiElement(.)('.')
                      PsiElement(this)('this')
                    PsiElement(.)('.')
                    PsiElement(identifier)('X')
              PsiWhiteSpace('\n    ')
              ScTypeAliasDefinition: Y
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(type)('type')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('Y')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                SimpleType: Module.this.Y
                  CodeReferenceElement: Module.this.Y
                    ThisReference
                      CodeReferenceElement: Module
                        PsiElement(identifier)('Module')
                      PsiElement(.)('.')
                      PsiElement(this)('this')
                    PsiElement(.)('.')
                    PsiElement(identifier)('Y')
              PsiWhiteSpace('\n  ')
              PsiElement(})('}')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: expose
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('expose')
          Parameters
            <empty list>
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ScNewTemplateDefinition: <anonymous>
            PsiElement(new)('new')
            PsiWhiteSpace(' ')
            ExtendsBlock
              TemplateParents
                ConstructorInvocation
                  ParametrizedType: Inv[M]
                    SimpleType: Inv
                      CodeReferenceElement: Inv
                        PsiElement(identifier)('Inv')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: M
                        CodeReferenceElement: M
                          PsiElement(identifier)('M')
                      PsiElement(])(']')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: test
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('test')
          Parameters
            <empty list>
          PsiWhiteSpace('                  ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MatchStatement
            ThisReference
              PsiElement(this)('this')
            PsiWhiteSpace(' ')
            PsiElement(match)('match')
            PsiWhiteSpace(' ')
            PsiElement({)('{')
            PsiWhiteSpace(' ')
            CaseClauses
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                ReferencePattern: m
                  PsiElement(identifier)('m')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                BlockOfExpressions
                  ReferenceExpression: m.expose
                    ReferenceExpression: m
                      PsiElement(identifier)('m')
                    PsiElement(.)('.')
                    PsiElement(identifier)('expose')
            PsiWhiteSpace(' ')
            PsiElement(})('}')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: res
          PsiComment(comment)('// was: leak: `(m : Module)` in `m.expose: Inv[? <: Module { X = m.X }]`')
          PsiWhiteSpace('\n  ')
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('res')
          Parameters
            <empty list>
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: Inv[_ <: Module]
            SimpleType: Inv
              CodeReferenceElement: Inv
                PsiElement(identifier)('Inv')
            TypeArgumentsList
              PsiElement([)('[')
              WildcardType: _ <: Module
                PsiElement(_)('_')
                PsiWhiteSpace(' ')
                PsiElement(<:)('<:')
                PsiWhiteSpace(' ')
                SimpleType: Module
                  CodeReferenceElement: Module
                    PsiElement(identifier)('Module')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MatchStatement
            ThisReference
              PsiElement(this)('this')
            PsiWhiteSpace(' ')
            PsiElement(match)('match')
            PsiWhiteSpace(' ')
            PsiElement({)('{')
            PsiWhiteSpace(' ')
            CaseClauses
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                ReferencePattern: m
                  PsiElement(identifier)('m')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                BlockOfExpressions
                  ReferenceExpression: m.expose
                    ReferenceExpression: m
                      PsiElement(identifier)('m')
                    PsiElement(.)('.')
                    PsiElement(identifier)('expose')
            PsiWhiteSpace(' ')
            PsiElement(})('}')
