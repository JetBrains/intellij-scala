trait A
trait B
trait C

def fancy(using a: A, b: B, c: C) = "Fancy!"
def foo(implicit a: A, b: B, c: C) = "foo"

given A() with B

given ops: A() with B()
-----
ScalaFile
  ScTrait: A
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('A')
    ExtendsBlock
      <empty list>
  PsiWhiteSpace('\n')
  ScTrait: B
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('B')
    ExtendsBlock
      <empty list>
  PsiWhiteSpace('\n')
  ScTrait: C
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('C')
    ExtendsBlock
      <empty list>
  PsiWhiteSpace('\n\n')
  ScFunctionDefinition: fancy
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(def)('def')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('fancy')
    Parameters
      ParametersClause
        PsiElement(()('(')
        PsiElement(using)('using')
        PsiWhiteSpace(' ')
        Parameter: a
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(identifier)('a')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParameterType
            SimpleType: A
              CodeReferenceElement: A
                PsiElement(identifier)('A')
        PsiElement(,)(',')
        PsiWhiteSpace(' ')
        Parameter: b
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(identifier)('b')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParameterType
            SimpleType: B
              CodeReferenceElement: B
                PsiElement(identifier)('B')
        PsiElement(,)(',')
        PsiWhiteSpace(' ')
        Parameter: c
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(identifier)('c')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParameterType
            SimpleType: C
              CodeReferenceElement: C
                PsiElement(identifier)('C')
        PsiElement())(')')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    StringLiteral
      PsiElement(string content)('"Fancy!"')
  PsiWhiteSpace('\n')
  ScFunctionDefinition: foo
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(def)('def')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('foo')
    Parameters
      ParametersClause
        PsiElement(()('(')
        PsiElement(implicit)('implicit')
        PsiWhiteSpace(' ')
        Parameter: a
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(identifier)('a')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParameterType
            SimpleType: A
              CodeReferenceElement: A
                PsiElement(identifier)('A')
        PsiElement(,)(',')
        PsiWhiteSpace(' ')
        Parameter: b
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(identifier)('b')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParameterType
            SimpleType: B
              CodeReferenceElement: B
                PsiElement(identifier)('B')
        PsiElement(,)(',')
        PsiWhiteSpace(' ')
        Parameter: c
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(identifier)('c')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParameterType
            SimpleType: C
              CodeReferenceElement: C
                PsiElement(identifier)('C')
        PsiElement())(')')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    StringLiteral
      PsiElement(string content)('"foo"')
  PsiWhiteSpace('\n\n')
  ScGivenDefinition: given_A_B
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(given)('given')
    PsiWhiteSpace(' ')
    ExtendsBlock
      TemplateParents
        ConstructorInvocation
          SimpleType: A
            CodeReferenceElement: A
              PsiElement(identifier)('A')
          ArgumentList
            PsiElement(()('(')
            PsiElement())(')')
        PsiWhiteSpace(' ')
        PsiElement(with)('with')
        PsiWhiteSpace(' ')
        ConstructorInvocation
          SimpleType: B
            CodeReferenceElement: B
              PsiElement(identifier)('B')
  PsiWhiteSpace('\n\n')
  ScGivenDefinition: ops
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(given)('given')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('ops')
    Parameters
      <empty list>
    PsiElement(:)(':')
    PsiWhiteSpace(' ')
    ExtendsBlock
      TemplateParents
        ConstructorInvocation
          SimpleType: A
            CodeReferenceElement: A
              PsiElement(identifier)('A')
          ArgumentList
            PsiElement(()('(')
            PsiElement())(')')
        PsiWhiteSpace(' ')
        PsiElement(with)('with')
        PsiWhiteSpace(' ')
        ConstructorInvocation
          SimpleType: B
            CodeReferenceElement: B
              PsiElement(identifier)('B')
          ArgumentList
            PsiElement(()('(')
            PsiElement())(')')
