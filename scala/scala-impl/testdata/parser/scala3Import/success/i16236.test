trait A

def consume[T](t: T): Unit = ()

def fails(p: (Double & A) | Null): Unit = consume(p) // was: assertion failed: <notype> & A

def switchedOrder(p: (A & Double) | Null): Unit = consume(p) // ok
def nonPrimitive(p: (String & A) | Null): Unit = consume(p) // ok
def notNull(p: (Double & A)): Unit = consume(p) // ok
-----
ScalaFile
  ScTrait: A
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('A')
    ExtendsBlock
      <empty list>
  PsiWhiteSpace('\n\n')
  ScFunctionDefinition: consume
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(def)('def')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('consume')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: T
        PsiElement(identifier)('T')
      PsiElement(])(']')
    Parameters
      ParametersClause
        PsiElement(()('(')
        Parameter: t
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(identifier)('t')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParameterType
            SimpleType: T
              CodeReferenceElement: T
                PsiElement(identifier)('T')
        PsiElement())(')')
    PsiElement(:)(':')
    PsiWhiteSpace(' ')
    SimpleType: Unit
      CodeReferenceElement: Unit
        PsiElement(identifier)('Unit')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    UnitExpression
      PsiElement(()('(')
      PsiElement())(')')
  PsiWhiteSpace('\n\n')
  ScFunctionDefinition: fails
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(def)('def')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('fails')
    Parameters
      ParametersClause
        PsiElement(()('(')
        Parameter: p
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(identifier)('p')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParameterType
            InfixType: (Double & A) | Null
              TypeInParenthesis: (Double & A)
                PsiElement(()('(')
                InfixType: Double & A
                  SimpleType: Double
                    CodeReferenceElement: Double
                      PsiElement(identifier)('Double')
                  PsiWhiteSpace(' ')
                  CodeReferenceElement: &
                    PsiElement(identifier)('&')
                  PsiWhiteSpace(' ')
                  SimpleType: A
                    CodeReferenceElement: A
                      PsiElement(identifier)('A')
                PsiElement())(')')
              PsiWhiteSpace(' ')
              CodeReferenceElement: |
                PsiElement(identifier)('|')
              PsiWhiteSpace(' ')
              SimpleType: Null
                CodeReferenceElement: Null
                  PsiElement(identifier)('Null')
        PsiElement())(')')
    PsiElement(:)(':')
    PsiWhiteSpace(' ')
    SimpleType: Unit
      CodeReferenceElement: Unit
        PsiElement(identifier)('Unit')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    MethodCall
      ReferenceExpression: consume
        PsiElement(identifier)('consume')
      ArgumentList
        PsiElement(()('(')
        ReferenceExpression: p
          PsiElement(identifier)('p')
        PsiElement())(')')
  PsiWhiteSpace(' ')
  PsiComment(comment)('// was: assertion failed: <notype> & A')
  PsiWhiteSpace('\n\n')
  ScFunctionDefinition: switchedOrder
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(def)('def')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('switchedOrder')
    Parameters
      ParametersClause
        PsiElement(()('(')
        Parameter: p
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(identifier)('p')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParameterType
            InfixType: (A & Double) | Null
              TypeInParenthesis: (A & Double)
                PsiElement(()('(')
                InfixType: A & Double
                  SimpleType: A
                    CodeReferenceElement: A
                      PsiElement(identifier)('A')
                  PsiWhiteSpace(' ')
                  CodeReferenceElement: &
                    PsiElement(identifier)('&')
                  PsiWhiteSpace(' ')
                  SimpleType: Double
                    CodeReferenceElement: Double
                      PsiElement(identifier)('Double')
                PsiElement())(')')
              PsiWhiteSpace(' ')
              CodeReferenceElement: |
                PsiElement(identifier)('|')
              PsiWhiteSpace(' ')
              SimpleType: Null
                CodeReferenceElement: Null
                  PsiElement(identifier)('Null')
        PsiElement())(')')
    PsiElement(:)(':')
    PsiWhiteSpace(' ')
    SimpleType: Unit
      CodeReferenceElement: Unit
        PsiElement(identifier)('Unit')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    MethodCall
      ReferenceExpression: consume
        PsiElement(identifier)('consume')
      ArgumentList
        PsiElement(()('(')
        ReferenceExpression: p
          PsiElement(identifier)('p')
        PsiElement())(')')
  PsiWhiteSpace(' ')
  PsiComment(comment)('// ok')
  PsiWhiteSpace('\n')
  ScFunctionDefinition: nonPrimitive
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(def)('def')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('nonPrimitive')
    Parameters
      ParametersClause
        PsiElement(()('(')
        Parameter: p
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(identifier)('p')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParameterType
            InfixType: (String & A) | Null
              TypeInParenthesis: (String & A)
                PsiElement(()('(')
                InfixType: String & A
                  SimpleType: String
                    CodeReferenceElement: String
                      PsiElement(identifier)('String')
                  PsiWhiteSpace(' ')
                  CodeReferenceElement: &
                    PsiElement(identifier)('&')
                  PsiWhiteSpace(' ')
                  SimpleType: A
                    CodeReferenceElement: A
                      PsiElement(identifier)('A')
                PsiElement())(')')
              PsiWhiteSpace(' ')
              CodeReferenceElement: |
                PsiElement(identifier)('|')
              PsiWhiteSpace(' ')
              SimpleType: Null
                CodeReferenceElement: Null
                  PsiElement(identifier)('Null')
        PsiElement())(')')
    PsiElement(:)(':')
    PsiWhiteSpace(' ')
    SimpleType: Unit
      CodeReferenceElement: Unit
        PsiElement(identifier)('Unit')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    MethodCall
      ReferenceExpression: consume
        PsiElement(identifier)('consume')
      ArgumentList
        PsiElement(()('(')
        ReferenceExpression: p
          PsiElement(identifier)('p')
        PsiElement())(')')
  PsiWhiteSpace(' ')
  PsiComment(comment)('// ok')
  PsiWhiteSpace('\n')
  ScFunctionDefinition: notNull
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(def)('def')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('notNull')
    Parameters
      ParametersClause
        PsiElement(()('(')
        Parameter: p
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(identifier)('p')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParameterType
            TypeInParenthesis: (Double & A)
              PsiElement(()('(')
              InfixType: Double & A
                SimpleType: Double
                  CodeReferenceElement: Double
                    PsiElement(identifier)('Double')
                PsiWhiteSpace(' ')
                CodeReferenceElement: &
                  PsiElement(identifier)('&')
                PsiWhiteSpace(' ')
                SimpleType: A
                  CodeReferenceElement: A
                    PsiElement(identifier)('A')
              PsiElement())(')')
        PsiElement())(')')
    PsiElement(:)(':')
    PsiWhiteSpace(' ')
    SimpleType: Unit
      CodeReferenceElement: Unit
        PsiElement(identifier)('Unit')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    MethodCall
      ReferenceExpression: consume
        PsiElement(identifier)('consume')
      ArgumentList
        PsiElement(()('(')
        ReferenceExpression: p
          PsiElement(identifier)('p')
        PsiElement())(')')
  PsiWhiteSpace(' ')
  PsiComment(comment)('// ok')
