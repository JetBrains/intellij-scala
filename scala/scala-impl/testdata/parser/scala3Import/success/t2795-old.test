package t1

trait Element[T] {
}

trait Config {
  type T <: Element[T]
  implicit val m: scala.reflect.ClassManifest[T]
  // XXX Following works fine:
  // type T <: Element[_]
}

trait Transform { self: Config =>
  def processBlock(block: Array[T]): Unit = {
    var X = new Array[T](1)
  }
}
-----
ScalaFile
  ScPackaging
    PsiElement(package)('package')
    PsiWhiteSpace(' ')
    CodeReferenceElement: t1
      PsiElement(identifier)('t1')
    PsiWhiteSpace('\n\n')
    ScTrait: Element
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      PsiElement(trait)('trait')
      PsiWhiteSpace(' ')
      PsiElement(identifier)('Element')
      TypeParameterClause
        PsiElement([)('[')
        TypeParameter: T
          PsiElement(identifier)('T')
        PsiElement(])(']')
      PsiWhiteSpace(' ')
      ExtendsBlock
        ScTemplateBody
          PsiElement({)('{')
          PsiWhiteSpace('\n')
          PsiElement(})('}')
    PsiWhiteSpace('\n\n')
    ScTrait: Config
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      PsiElement(trait)('trait')
      PsiWhiteSpace(' ')
      PsiElement(identifier)('Config')
      PsiWhiteSpace(' ')
      ExtendsBlock
        ScTemplateBody
          PsiElement({)('{')
          PsiWhiteSpace('\n  ')
          ScTypeAliasDeclaration: T
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(type)('type')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('T')
            PsiWhiteSpace(' ')
            PsiElement(<:)('<:')
            PsiWhiteSpace(' ')
            ParametrizedType: Element[T]
              SimpleType: Element
                CodeReferenceElement: Element
                  PsiElement(identifier)('Element')
              TypeArgumentsList
                PsiElement([)('[')
                SimpleType: T
                  CodeReferenceElement: T
                    PsiElement(identifier)('T')
                PsiElement(])(']')
          PsiWhiteSpace('\n  ')
          ScValueDeclaration: m
            AnnotationsList
              <empty list>
            Modifiers
              PsiElement(implicit)('implicit')
            PsiWhiteSpace(' ')
            PsiElement(val)('val')
            PsiWhiteSpace(' ')
            ListOfIdentifiers
              Field identifier: m
                PsiElement(identifier)('m')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            ParametrizedType: scala.reflect.ClassManifest[T]
              SimpleType: scala.reflect.ClassManifest
                CodeReferenceElement: scala.reflect.ClassManifest
                  CodeReferenceElement: scala.reflect
                    CodeReferenceElement: scala
                      PsiElement(identifier)('scala')
                    PsiElement(.)('.')
                    PsiElement(identifier)('reflect')
                  PsiElement(.)('.')
                  PsiElement(identifier)('ClassManifest')
              TypeArgumentsList
                PsiElement([)('[')
                SimpleType: T
                  CodeReferenceElement: T
                    PsiElement(identifier)('T')
                PsiElement(])(']')
          PsiWhiteSpace('\n  ')
          PsiComment(comment)('// XXX Following works fine:')
          PsiWhiteSpace('\n  ')
          PsiComment(comment)('// type T <: Element[_]')
          PsiWhiteSpace('\n')
          PsiElement(})('}')
    PsiWhiteSpace('\n\n')
    ScTrait: Transform
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      PsiElement(trait)('trait')
      PsiWhiteSpace(' ')
      PsiElement(identifier)('Transform')
      PsiWhiteSpace(' ')
      ExtendsBlock
        ScTemplateBody
          PsiElement({)('{')
          PsiWhiteSpace(' ')
          SelfType: self
            PsiElement(identifier)('self')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            SimpleType: Config
              CodeReferenceElement: Config
                PsiElement(identifier)('Config')
            PsiWhiteSpace(' ')
            PsiElement(=>)('=>')
          PsiWhiteSpace('\n  ')
          ScFunctionDefinition: processBlock
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(def)('def')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('processBlock')
            Parameters
              ParametersClause
                PsiElement(()('(')
                Parameter: block
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(identifier)('block')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    ParametrizedType: Array[T]
                      SimpleType: Array
                        CodeReferenceElement: Array
                          PsiElement(identifier)('Array')
                      TypeArgumentsList
                        PsiElement([)('[')
                        SimpleType: T
                          CodeReferenceElement: T
                            PsiElement(identifier)('T')
                        PsiElement(])(']')
                PsiElement())(')')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            SimpleType: Unit
              CodeReferenceElement: Unit
                PsiElement(identifier)('Unit')
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace(' ')
            BlockExpression
              PsiElement({)('{')
              PsiWhiteSpace('\n    ')
              ScVariableDefinition: X
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(var)('var')
                PsiWhiteSpace(' ')
                ListOfPatterns
                  ReferencePattern: X
                    PsiElement(identifier)('X')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                ScNewTemplateDefinition: <anonymous>
                  PsiElement(new)('new')
                  PsiWhiteSpace(' ')
                  ExtendsBlock
                    TemplateParents
                      ConstructorInvocation
                        ParametrizedType: Array[T]
                          SimpleType: Array
                            CodeReferenceElement: Array
                              PsiElement(identifier)('Array')
                          TypeArgumentsList
                            PsiElement([)('[')
                            SimpleType: T
                              CodeReferenceElement: T
                                PsiElement(identifier)('T')
                            PsiElement(])(']')
                        ArgumentList
                          PsiElement(()('(')
                          IntegerLiteral
                            PsiElement(integer)('1')
                          PsiElement())(')')
              PsiWhiteSpace('\n  ')
              PsiElement(})('}')
          PsiWhiteSpace('\n')
          PsiElement(})('}')
