class Test {
  def combine = this match {
    case that if that eq this => this // just return this
    case that: Test2 =>
      println(that)
      this
    case _ => sys.error("meh")
  }
}

class Test2 extends Test
-----
ScalaFile
  ScClass: Test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: combine
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('combine')
          Parameters
            <empty list>
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MatchStatement
            ThisReference
              PsiElement(this)('this')
            PsiWhiteSpace(' ')
            PsiElement(match)('match')
            PsiWhiteSpace(' ')
            PsiElement({)('{')
            PsiWhiteSpace('\n    ')
            CaseClauses
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                ReferencePattern: that
                  PsiElement(identifier)('that')
                PsiWhiteSpace(' ')
                Guard
                  PsiElement(if)('if')
                  PsiWhiteSpace(' ')
                  InfixExpression
                    ReferenceExpression: that
                      PsiElement(identifier)('that')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: eq
                      PsiElement(identifier)('eq')
                    PsiWhiteSpace(' ')
                    ThisReference
                      PsiElement(this)('this')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                BlockOfExpressions
                  ThisReference
                    PsiElement(this)('this')
              PsiWhiteSpace(' ')
              PsiComment(comment)('// just return this')
              PsiWhiteSpace('\n    ')
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                Scala3 TypedPattern
                  ReferencePattern: that
                    PsiElement(identifier)('that')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  TypePattern
                    SimpleType: Test2
                      CodeReferenceElement: Test2
                        PsiElement(identifier)('Test2')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace('\n      ')
                BlockOfExpressions
                  MethodCall
                    ReferenceExpression: println
                      PsiElement(identifier)('println')
                    ArgumentList
                      PsiElement(()('(')
                      ReferenceExpression: that
                        PsiElement(identifier)('that')
                      PsiElement())(')')
                  PsiWhiteSpace('\n      ')
                  ThisReference
                    PsiElement(this)('this')
              PsiWhiteSpace('\n    ')
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                WildcardPattern
                  PsiElement(_)('_')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                BlockOfExpressions
                  MethodCall
                    ReferenceExpression: sys.error
                      ReferenceExpression: sys
                        PsiElement(identifier)('sys')
                      PsiElement(.)('.')
                      PsiElement(identifier)('error')
                    ArgumentList
                      PsiElement(()('(')
                      StringLiteral
                        PsiElement(string content)('"meh"')
                      PsiElement())(')')
            PsiWhiteSpace('\n  ')
            PsiElement(})('}')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScClass: Test2
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test2')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          SimpleType: Test
            CodeReferenceElement: Test
              PsiElement(identifier)('Test')
