class ParseResult[+T]
case class Success[+T](t: T) extends ParseResult[T]

abstract class Nonterminal[Output] {

  type SubNonterminal = Nonterminal[_ <: Output]

  def parse: ParseResult[Output]

  def parse1(nts: List[SubNonterminal]): ParseResult[Output] =
    nts match {
      case nt::nts => nt.parse match { case Success(so) => Success(so) }
      case Nil => throw new Error
    }
}
-----
ScalaFile
  ScClass: ParseResult
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('ParseResult')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: T
        PsiElement(identifier)('+')
        PsiElement(identifier)('T')
      PsiElement(])(']')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    ExtendsBlock
      <empty list>
  PsiWhiteSpace('\n')
  ScClass: Success
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(case)('case')
    PsiWhiteSpace(' ')
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Success')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: T
        PsiElement(identifier)('+')
        PsiElement(identifier)('T')
      PsiElement(])(']')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        ParametersClause
          PsiElement(()('(')
          ClassParameter: t
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(identifier)('t')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            ParameterType
              SimpleType: T
                CodeReferenceElement: T
                  PsiElement(identifier)('T')
          PsiElement())(')')
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          ParametrizedType: ParseResult[T]
            SimpleType: ParseResult
              CodeReferenceElement: ParseResult
                PsiElement(identifier)('ParseResult')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: T
                CodeReferenceElement: T
                  PsiElement(identifier)('T')
              PsiElement(])(']')
  PsiWhiteSpace('\n\n')
  ScClass: Nonterminal
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(abstract)('abstract')
    PsiWhiteSpace(' ')
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Nonterminal')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: Output
        PsiElement(identifier)('Output')
      PsiElement(])(']')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n\n  ')
        ScTypeAliasDefinition: SubNonterminal
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('SubNonterminal')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ParametrizedType: Nonterminal[_ <: Output]
            SimpleType: Nonterminal
              CodeReferenceElement: Nonterminal
                PsiElement(identifier)('Nonterminal')
            TypeArgumentsList
              PsiElement([)('[')
              WildcardType: _ <: Output
                PsiElement(_)('_')
                PsiWhiteSpace(' ')
                PsiElement(<:)('<:')
                PsiWhiteSpace(' ')
                SimpleType: Output
                  CodeReferenceElement: Output
                    PsiElement(identifier)('Output')
              PsiElement(])(']')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDeclaration: parse
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('parse')
          Parameters
            <empty list>
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: ParseResult[Output]
            SimpleType: ParseResult
              CodeReferenceElement: ParseResult
                PsiElement(identifier)('ParseResult')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: Output
                CodeReferenceElement: Output
                  PsiElement(identifier)('Output')
              PsiElement(])(']')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: parse1
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('parse1')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: nts
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('nts')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  ParametrizedType: List[SubNonterminal]
                    SimpleType: List
                      CodeReferenceElement: List
                        PsiElement(identifier)('List')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: SubNonterminal
                        CodeReferenceElement: SubNonterminal
                          PsiElement(identifier)('SubNonterminal')
                      PsiElement(])(']')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: ParseResult[Output]
            SimpleType: ParseResult
              CodeReferenceElement: ParseResult
                PsiElement(identifier)('ParseResult')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: Output
                CodeReferenceElement: Output
                  PsiElement(identifier)('Output')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace('\n    ')
          MatchStatement
            ReferenceExpression: nts
              PsiElement(identifier)('nts')
            PsiWhiteSpace(' ')
            PsiElement(match)('match')
            PsiWhiteSpace(' ')
            PsiElement({)('{')
            PsiWhiteSpace('\n      ')
            CaseClauses
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                InfixPattern
                  ReferencePattern: nt
                    PsiElement(identifier)('nt')
                  CodeReferenceElement: ::
                    PsiElement(identifier)('::')
                  ReferencePattern: nts
                    PsiElement(identifier)('nts')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                BlockOfExpressions
                  MatchStatement
                    ReferenceExpression: nt.parse
                      ReferenceExpression: nt
                        PsiElement(identifier)('nt')
                      PsiElement(.)('.')
                      PsiElement(identifier)('parse')
                    PsiWhiteSpace(' ')
                    PsiElement(match)('match')
                    PsiWhiteSpace(' ')
                    PsiElement({)('{')
                    PsiWhiteSpace(' ')
                    CaseClauses
                      CaseClause
                        PsiElement(case)('case')
                        PsiWhiteSpace(' ')
                        ConstructorPattern
                          CodeReferenceElement: Success
                            PsiElement(identifier)('Success')
                          Pattern Argument List
                            PsiElement(()('(')
                            ReferencePattern: so
                              PsiElement(identifier)('so')
                            PsiElement())(')')
                        PsiWhiteSpace(' ')
                        PsiElement(=>)('=>')
                        PsiWhiteSpace(' ')
                        BlockOfExpressions
                          MethodCall
                            ReferenceExpression: Success
                              PsiElement(identifier)('Success')
                            ArgumentList
                              PsiElement(()('(')
                              ReferenceExpression: so
                                PsiElement(identifier)('so')
                              PsiElement())(')')
                    PsiWhiteSpace(' ')
                    PsiElement(})('}')
              PsiWhiteSpace('\n      ')
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                StableElementPattern
                  ReferenceExpression: Nil
                    PsiElement(identifier)('Nil')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                BlockOfExpressions
                  ThrowStatement
                    PsiElement(throw)('throw')
                    PsiWhiteSpace(' ')
                    ScNewTemplateDefinition: <anonymous>
                      PsiElement(new)('new')
                      PsiWhiteSpace(' ')
                      ExtendsBlock
                        TemplateParents
                          ConstructorInvocation
                            SimpleType: Error
                              CodeReferenceElement: Error
                                PsiElement(identifier)('Error')
            PsiWhiteSpace('\n    ')
            PsiElement(})('}')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
