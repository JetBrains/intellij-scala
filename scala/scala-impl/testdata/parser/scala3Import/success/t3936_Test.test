package pack
trait Test {
  val b: BlockingQueue[Nothing]
}
-----
ScalaFile
  ScPackaging
    PsiElement(package)('package')
    PsiWhiteSpace(' ')
    CodeReferenceElement: pack
      PsiElement(identifier)('pack')
    PsiWhiteSpace('\n')
    ScTrait: Test
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      PsiElement(trait)('trait')
      PsiWhiteSpace(' ')
      PsiElement(identifier)('Test')
      PsiWhiteSpace(' ')
      ExtendsBlock
        ScTemplateBody
          PsiElement({)('{')
          PsiWhiteSpace('\n  ')
          ScValueDeclaration: b
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(val)('val')
            PsiWhiteSpace(' ')
            ListOfIdentifiers
              Field identifier: b
                PsiElement(identifier)('b')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            ParametrizedType: BlockingQueue[Nothing]
              SimpleType: BlockingQueue
                CodeReferenceElement: BlockingQueue
                  PsiElement(identifier)('BlockingQueue')
              TypeArgumentsList
                PsiElement([)('[')
                SimpleType: Nothing
                  CodeReferenceElement: Nothing
                    PsiElement(identifier)('Nothing')
                PsiElement(])(']')
          PsiWhiteSpace('\n')
          PsiElement(})('}')
