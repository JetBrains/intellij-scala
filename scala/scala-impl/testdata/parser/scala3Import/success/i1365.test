import scala.collection.mutable.ArrayBuffer

trait Message[M]
class Script[S] extends ArrayBuffer[Message[S]] with Message[S]

class Test[A] {
  def f(cmd: Message[A]): Unit = cmd match {
    case s: Script[_] => s.iterator.foreach(x => f(x))
  }
  def g(cmd: Message[A]): Unit = cmd match {
    case s: Script[z] => s.iterator.foreach(x => g(x))
  }
}
-----
ScalaFile
  ScImportStatement
    PsiElement(import)('import')
    PsiWhiteSpace(' ')
    ImportExpression
      CodeReferenceElement: scala.collection.mutable.ArrayBuffer
        CodeReferenceElement: scala.collection.mutable
          CodeReferenceElement: scala.collection
            CodeReferenceElement: scala
              PsiElement(identifier)('scala')
            PsiElement(.)('.')
            PsiElement(identifier)('collection')
          PsiElement(.)('.')
          PsiElement(identifier)('mutable')
        PsiElement(.)('.')
        PsiElement(identifier)('ArrayBuffer')
  PsiWhiteSpace('\n\n')
  ScTrait: Message
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Message')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: M
        PsiElement(identifier)('M')
      PsiElement(])(']')
    ExtendsBlock
      <empty list>
  PsiWhiteSpace('\n')
  ScClass: Script
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Script')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: S
        PsiElement(identifier)('S')
      PsiElement(])(']')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          ParametrizedType: ArrayBuffer[Message[S]]
            SimpleType: ArrayBuffer
              CodeReferenceElement: ArrayBuffer
                PsiElement(identifier)('ArrayBuffer')
            TypeArgumentsList
              PsiElement([)('[')
              ParametrizedType: Message[S]
                SimpleType: Message
                  CodeReferenceElement: Message
                    PsiElement(identifier)('Message')
                TypeArgumentsList
                  PsiElement([)('[')
                  SimpleType: S
                    CodeReferenceElement: S
                      PsiElement(identifier)('S')
                  PsiElement(])(']')
              PsiElement(])(']')
        PsiWhiteSpace(' ')
        PsiElement(with)('with')
        PsiWhiteSpace(' ')
        ConstructorInvocation
          ParametrizedType: Message[S]
            SimpleType: Message
              CodeReferenceElement: Message
                PsiElement(identifier)('Message')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: S
                CodeReferenceElement: S
                  PsiElement(identifier)('S')
              PsiElement(])(']')
  PsiWhiteSpace('\n\n')
  ScClass: Test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: A
        PsiElement(identifier)('A')
      PsiElement(])(']')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: f
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('f')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: cmd
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('cmd')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  ParametrizedType: Message[A]
                    SimpleType: Message
                      CodeReferenceElement: Message
                        PsiElement(identifier)('Message')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: A
                        CodeReferenceElement: A
                          PsiElement(identifier)('A')
                      PsiElement(])(']')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Unit
            CodeReferenceElement: Unit
              PsiElement(identifier)('Unit')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MatchStatement
            ReferenceExpression: cmd
              PsiElement(identifier)('cmd')
            PsiWhiteSpace(' ')
            PsiElement(match)('match')
            PsiWhiteSpace(' ')
            PsiElement({)('{')
            PsiWhiteSpace('\n    ')
            CaseClauses
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                Scala3 TypedPattern
                  ReferencePattern: s
                    PsiElement(identifier)('s')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  TypePattern
                    ParametrizedType: Script[_]
                      SimpleType: Script
                        CodeReferenceElement: Script
                          PsiElement(identifier)('Script')
                      TypeArgumentsList
                        PsiElement([)('[')
                        TypeVariable: _
                          PsiElement(_)('_')
                        PsiElement(])(']')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                BlockOfExpressions
                  MethodCall
                    ReferenceExpression: s.iterator.foreach
                      ReferenceExpression: s.iterator
                        ReferenceExpression: s
                          PsiElement(identifier)('s')
                        PsiElement(.)('.')
                        PsiElement(identifier)('iterator')
                      PsiElement(.)('.')
                      PsiElement(identifier)('foreach')
                    ArgumentList
                      PsiElement(()('(')
                      FunctionExpression
                        Parameters
                          ParametersClause
                            Parameter: x
                              PsiElement(identifier)('x')
                        PsiWhiteSpace(' ')
                        PsiElement(=>)('=>')
                        PsiWhiteSpace(' ')
                        MethodCall
                          ReferenceExpression: f
                            PsiElement(identifier)('f')
                          ArgumentList
                            PsiElement(()('(')
                            ReferenceExpression: x
                              PsiElement(identifier)('x')
                            PsiElement())(')')
                      PsiElement())(')')
            PsiWhiteSpace('\n  ')
            PsiElement(})('}')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: g
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('g')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: cmd
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('cmd')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  ParametrizedType: Message[A]
                    SimpleType: Message
                      CodeReferenceElement: Message
                        PsiElement(identifier)('Message')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: A
                        CodeReferenceElement: A
                          PsiElement(identifier)('A')
                      PsiElement(])(']')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Unit
            CodeReferenceElement: Unit
              PsiElement(identifier)('Unit')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MatchStatement
            ReferenceExpression: cmd
              PsiElement(identifier)('cmd')
            PsiWhiteSpace(' ')
            PsiElement(match)('match')
            PsiWhiteSpace(' ')
            PsiElement({)('{')
            PsiWhiteSpace('\n    ')
            CaseClauses
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                Scala3 TypedPattern
                  ReferencePattern: s
                    PsiElement(identifier)('s')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  TypePattern
                    ParametrizedType: Script[z]
                      SimpleType: Script
                        CodeReferenceElement: Script
                          PsiElement(identifier)('Script')
                      TypeArgumentsList
                        PsiElement([)('[')
                        TypeVariable: z
                          PsiElement(identifier)('z')
                        PsiElement(])(']')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                BlockOfExpressions
                  MethodCall
                    ReferenceExpression: s.iterator.foreach
                      ReferenceExpression: s.iterator
                        ReferenceExpression: s
                          PsiElement(identifier)('s')
                        PsiElement(.)('.')
                        PsiElement(identifier)('iterator')
                      PsiElement(.)('.')
                      PsiElement(identifier)('foreach')
                    ArgumentList
                      PsiElement(()('(')
                      FunctionExpression
                        Parameters
                          ParametersClause
                            Parameter: x
                              PsiElement(identifier)('x')
                        PsiWhiteSpace(' ')
                        PsiElement(=>)('=>')
                        PsiWhiteSpace(' ')
                        MethodCall
                          ReferenceExpression: g
                            PsiElement(identifier)('g')
                          ArgumentList
                            PsiElement(()('(')
                            ReferenceExpression: x
                              PsiElement(identifier)('x')
                            PsiElement())(')')
                      PsiElement())(')')
            PsiWhiteSpace('\n  ')
            PsiElement(})('}')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
