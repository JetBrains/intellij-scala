// The test which this should perform but does not
// is that f1 is recognized as irrefutable and f2 is not
// This can be recognized via the generated classes:
//
// A$$anonfun$f1$1.class
// A$$anonfun$f2$1.class
// A$$anonfun$f2$2.class
//
// The extra one in $f2$ is the filter.
//
// !!! Marking with exclamation points so maybe someday
// this test will be finished.
class A {
  case class Foo[T](x: T)

  def f1(xs: List[Foo[Int]]) = {
    for (Foo(x: Int) <- xs) yield x
  }
  def f2(xs: List[Foo[Any]]) = {
    for (Foo(x: Int) <- xs) yield x
  }
}
-----
ScalaFile
  ScClass: A
    PsiComment(comment)('// The test which this should perform but does not')
    PsiWhiteSpace('\n')
    PsiComment(comment)('// is that f1 is recognized as irrefutable and f2 is not')
    PsiWhiteSpace('\n')
    PsiComment(comment)('// This can be recognized via the generated classes:')
    PsiWhiteSpace('\n')
    PsiComment(comment)('//')
    PsiWhiteSpace('\n')
    PsiComment(comment)('// A$$anonfun$f1$1.class')
    PsiWhiteSpace('\n')
    PsiComment(comment)('// A$$anonfun$f2$1.class')
    PsiWhiteSpace('\n')
    PsiComment(comment)('// A$$anonfun$f2$2.class')
    PsiWhiteSpace('\n')
    PsiComment(comment)('//')
    PsiWhiteSpace('\n')
    PsiComment(comment)('// The extra one in $f2$ is the filter.')
    PsiWhiteSpace('\n')
    PsiComment(comment)('//')
    PsiWhiteSpace('\n')
    PsiComment(comment)('// !!! Marking with exclamation points so maybe someday')
    PsiWhiteSpace('\n')
    PsiComment(comment)('// this test will be finished.')
    PsiWhiteSpace('\n')
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('A')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScClass: Foo
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(case)('case')
          PsiWhiteSpace(' ')
          PsiElement(class)('class')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Foo')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: T
              PsiElement(identifier)('T')
            PsiElement(])(']')
          PrimaryConstructor
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            Parameters
              ParametersClause
                PsiElement(()('(')
                ClassParameter: x
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(identifier)('x')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    SimpleType: T
                      CodeReferenceElement: T
                        PsiElement(identifier)('T')
                PsiElement())(')')
          ExtendsBlock
            <empty list>
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: f1
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('f1')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: xs
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('xs')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  ParametrizedType: List[Foo[Int]]
                    SimpleType: List
                      CodeReferenceElement: List
                        PsiElement(identifier)('List')
                    TypeArgumentsList
                      PsiElement([)('[')
                      ParametrizedType: Foo[Int]
                        SimpleType: Foo
                          CodeReferenceElement: Foo
                            PsiElement(identifier)('Foo')
                        TypeArgumentsList
                          PsiElement([)('[')
                          SimpleType: Int
                            CodeReferenceElement: Int
                              PsiElement(identifier)('Int')
                          PsiElement(])(']')
                      PsiElement(])(']')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          BlockExpression
            PsiElement({)('{')
            PsiWhiteSpace('\n    ')
            ForStatement
              PsiElement(for)('for')
              PsiWhiteSpace(' ')
              PsiElement(()('(')
              Enumerators
                Generator
                  ConstructorPattern
                    CodeReferenceElement: Foo
                      PsiElement(identifier)('Foo')
                    Pattern Argument List
                      PsiElement(()('(')
                      Scala3 TypedPattern
                        ReferencePattern: x
                          PsiElement(identifier)('x')
                        PsiElement(:)(':')
                        PsiWhiteSpace(' ')
                        TypePattern
                          SimpleType: Int
                            CodeReferenceElement: Int
                              PsiElement(identifier)('Int')
                      PsiElement())(')')
                  PsiWhiteSpace(' ')
                  PsiElement(<-)('<-')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: xs
                    PsiElement(identifier)('xs')
              PsiElement())(')')
              PsiWhiteSpace(' ')
              PsiElement(yield)('yield')
              PsiWhiteSpace(' ')
              ReferenceExpression: x
                PsiElement(identifier)('x')
            PsiWhiteSpace('\n  ')
            PsiElement(})('}')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: f2
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('f2')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: xs
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('xs')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  ParametrizedType: List[Foo[Any]]
                    SimpleType: List
                      CodeReferenceElement: List
                        PsiElement(identifier)('List')
                    TypeArgumentsList
                      PsiElement([)('[')
                      ParametrizedType: Foo[Any]
                        SimpleType: Foo
                          CodeReferenceElement: Foo
                            PsiElement(identifier)('Foo')
                        TypeArgumentsList
                          PsiElement([)('[')
                          SimpleType: Any
                            CodeReferenceElement: Any
                              PsiElement(identifier)('Any')
                          PsiElement(])(']')
                      PsiElement(])(']')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          BlockExpression
            PsiElement({)('{')
            PsiWhiteSpace('\n    ')
            ForStatement
              PsiElement(for)('for')
              PsiWhiteSpace(' ')
              PsiElement(()('(')
              Enumerators
                Generator
                  ConstructorPattern
                    CodeReferenceElement: Foo
                      PsiElement(identifier)('Foo')
                    Pattern Argument List
                      PsiElement(()('(')
                      Scala3 TypedPattern
                        ReferencePattern: x
                          PsiElement(identifier)('x')
                        PsiElement(:)(':')
                        PsiWhiteSpace(' ')
                        TypePattern
                          SimpleType: Int
                            CodeReferenceElement: Int
                              PsiElement(identifier)('Int')
                      PsiElement())(')')
                  PsiWhiteSpace(' ')
                  PsiElement(<-)('<-')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: xs
                    PsiElement(identifier)('xs')
              PsiElement())(')')
              PsiWhiteSpace(' ')
              PsiElement(yield)('yield')
              PsiWhiteSpace(' ')
              ReferenceExpression: x
                PsiElement(identifier)('x')
            PsiWhiteSpace('\n  ')
            PsiElement(})('}')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
