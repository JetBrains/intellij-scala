def g(x: => Any): Any = x

val a: PartialFunction[Any => Any, Any] = (f => g(f(0)) match { case v => v })    // was an error, now OK
-----
ScalaFile
  ScFunctionDefinition: g
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(def)('def')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('g')
    Parameters
      ParametersClause
        PsiElement(()('(')
        Parameter: x
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(identifier)('x')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParameterType
            PsiElement(=>)('=>')
            PsiWhiteSpace(' ')
            SimpleType: Any
              CodeReferenceElement: Any
                PsiElement(identifier)('Any')
        PsiElement())(')')
    PsiElement(:)(':')
    PsiWhiteSpace(' ')
    SimpleType: Any
      CodeReferenceElement: Any
        PsiElement(identifier)('Any')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    ReferenceExpression: x
      PsiElement(identifier)('x')
  PsiWhiteSpace('\n\n')
  ScPatternDefinition: a
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(val)('val')
    PsiWhiteSpace(' ')
    ListOfPatterns
      ReferencePattern: a
        PsiElement(identifier)('a')
    PsiElement(:)(':')
    PsiWhiteSpace(' ')
    ParametrizedType: PartialFunction[Any => Any, Any]
      SimpleType: PartialFunction
        CodeReferenceElement: PartialFunction
          PsiElement(identifier)('PartialFunction')
      TypeArgumentsList
        PsiElement([)('[')
        FunctionalType: Any => Any
          SimpleType: Any
            CodeReferenceElement: Any
              PsiElement(identifier)('Any')
          PsiWhiteSpace(' ')
          PsiElement(=>)('=>')
          PsiWhiteSpace(' ')
          SimpleType: Any
            CodeReferenceElement: Any
              PsiElement(identifier)('Any')
        PsiElement(,)(',')
        PsiWhiteSpace(' ')
        SimpleType: Any
          CodeReferenceElement: Any
            PsiElement(identifier)('Any')
        PsiElement(])(']')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    ExpressionInParenthesis
      PsiElement(()('(')
      FunctionExpression
        Parameters
          ParametersClause
            Parameter: f
              PsiElement(identifier)('f')
        PsiWhiteSpace(' ')
        PsiElement(=>)('=>')
        PsiWhiteSpace(' ')
        MatchStatement
          MethodCall
            ReferenceExpression: g
              PsiElement(identifier)('g')
            ArgumentList
              PsiElement(()('(')
              MethodCall
                ReferenceExpression: f
                  PsiElement(identifier)('f')
                ArgumentList
                  PsiElement(()('(')
                  IntegerLiteral
                    PsiElement(integer)('0')
                  PsiElement())(')')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(match)('match')
          PsiWhiteSpace(' ')
          PsiElement({)('{')
          PsiWhiteSpace(' ')
          CaseClauses
            CaseClause
              PsiElement(case)('case')
              PsiWhiteSpace(' ')
              ReferencePattern: v
                PsiElement(identifier)('v')
              PsiWhiteSpace(' ')
              PsiElement(=>)('=>')
              PsiWhiteSpace(' ')
              BlockOfExpressions
                ReferenceExpression: v
                  PsiElement(identifier)('v')
          PsiWhiteSpace(' ')
          PsiElement(})('}')
      PsiElement())(')')
  PsiWhiteSpace('    ')
  PsiComment(comment)('// was an error, now OK')
