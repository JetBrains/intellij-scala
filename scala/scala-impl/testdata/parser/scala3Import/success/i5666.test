// This file should still compile if Config.LogPrendingSubtypesthreshold is set to 9.
sealed trait HList
trait HNil extends HList
trait HCons[+H, +T] extends HList

trait Concat[L1, L2] { type Out }
object Concat {
  implicit def i0[L]:
    Concat[HNil, L] { type Out = L } = null

  implicit def i1[H, T, L, O]
    (implicit c: Concat[T, L] { type Out = O }):
      Concat[HCons[H, T], L] { type Out = HCons[H, O] } = null
}

object Test {
  type L1 = HCons[Unit, HNil]

  implicitly[Concat[L1, L1]]
}
-----
ScalaFile
  ScTrait: HList
    PsiComment(comment)('// This file should still compile if Config.LogPrendingSubtypesthreshold is set to 9.')
    PsiWhiteSpace('\n')
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(sealed)('sealed')
    PsiWhiteSpace(' ')
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('HList')
    ExtendsBlock
      <empty list>
  PsiWhiteSpace('\n')
  ScTrait: HNil
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('HNil')
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          SimpleType: HList
            CodeReferenceElement: HList
              PsiElement(identifier)('HList')
  PsiWhiteSpace('\n')
  ScTrait: HCons
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('HCons')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: H
        PsiElement(identifier)('+')
        PsiElement(identifier)('H')
      PsiElement(,)(',')
      PsiWhiteSpace(' ')
      TypeParameter: T
        PsiElement(identifier)('+')
        PsiElement(identifier)('T')
      PsiElement(])(']')
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          SimpleType: HList
            CodeReferenceElement: HList
              PsiElement(identifier)('HList')
  PsiWhiteSpace('\n\n')
  ScTrait: Concat
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Concat')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: L1
        PsiElement(identifier)('L1')
      PsiElement(,)(',')
      PsiWhiteSpace(' ')
      TypeParameter: L2
        PsiElement(identifier)('L2')
      PsiElement(])(']')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace(' ')
        ScTypeAliasDeclaration: Out
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Out')
        PsiWhiteSpace(' ')
        PsiElement(})('}')
  PsiWhiteSpace('\n')
  ScObject: Concat
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Concat')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: i0
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(implicit)('implicit')
          PsiWhiteSpace(' ')
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('i0')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: L
              PsiElement(identifier)('L')
            PsiElement(])(']')
          Parameters
            <empty list>
          PsiElement(:)(':')
          PsiWhiteSpace('\n    ')
          CompoundType: Concat[HNil, L] { type Out = L }
            ParametrizedType: Concat[HNil, L]
              SimpleType: Concat
                CodeReferenceElement: Concat
                  PsiElement(identifier)('Concat')
              TypeArgumentsList
                PsiElement([)('[')
                SimpleType: HNil
                  CodeReferenceElement: HNil
                    PsiElement(identifier)('HNil')
                PsiElement(,)(',')
                PsiWhiteSpace(' ')
                SimpleType: L
                  CodeReferenceElement: L
                    PsiElement(identifier)('L')
                PsiElement(])(']')
            PsiWhiteSpace(' ')
            Refinement
              PsiElement({)('{')
              PsiWhiteSpace(' ')
              ScTypeAliasDefinition: Out
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(type)('type')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('Out')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                SimpleType: L
                  CodeReferenceElement: L
                    PsiElement(identifier)('L')
              PsiWhiteSpace(' ')
              PsiElement(})('}')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          NullLiteral
            PsiElement(null)('null')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: i1
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(implicit)('implicit')
          PsiWhiteSpace(' ')
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('i1')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: H
              PsiElement(identifier)('H')
            PsiElement(,)(',')
            PsiWhiteSpace(' ')
            TypeParameter: T
              PsiElement(identifier)('T')
            PsiElement(,)(',')
            PsiWhiteSpace(' ')
            TypeParameter: L
              PsiElement(identifier)('L')
            PsiElement(,)(',')
            PsiWhiteSpace(' ')
            TypeParameter: O
              PsiElement(identifier)('O')
            PsiElement(])(']')
          PsiWhiteSpace('\n    ')
          Parameters
            ParametersClause
              PsiElement(()('(')
              PsiElement(implicit)('implicit')
              PsiWhiteSpace(' ')
              Parameter: c
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('c')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  CompoundType: Concat[T, L] { type Out = O }
                    ParametrizedType: Concat[T, L]
                      SimpleType: Concat
                        CodeReferenceElement: Concat
                          PsiElement(identifier)('Concat')
                      TypeArgumentsList
                        PsiElement([)('[')
                        SimpleType: T
                          CodeReferenceElement: T
                            PsiElement(identifier)('T')
                        PsiElement(,)(',')
                        PsiWhiteSpace(' ')
                        SimpleType: L
                          CodeReferenceElement: L
                            PsiElement(identifier)('L')
                        PsiElement(])(']')
                    PsiWhiteSpace(' ')
                    Refinement
                      PsiElement({)('{')
                      PsiWhiteSpace(' ')
                      ScTypeAliasDefinition: Out
                        AnnotationsList
                          <empty list>
                        Modifiers
                          <empty list>
                        PsiElement(type)('type')
                        PsiWhiteSpace(' ')
                        PsiElement(identifier)('Out')
                        PsiWhiteSpace(' ')
                        PsiElement(=)('=')
                        PsiWhiteSpace(' ')
                        SimpleType: O
                          CodeReferenceElement: O
                            PsiElement(identifier)('O')
                      PsiWhiteSpace(' ')
                      PsiElement(})('}')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace('\n      ')
          CompoundType: Concat[HCons[H, T], L] { type Out = HCons[H, O] }
            ParametrizedType: Concat[HCons[H, T], L]
              SimpleType: Concat
                CodeReferenceElement: Concat
                  PsiElement(identifier)('Concat')
              TypeArgumentsList
                PsiElement([)('[')
                ParametrizedType: HCons[H, T]
                  SimpleType: HCons
                    CodeReferenceElement: HCons
                      PsiElement(identifier)('HCons')
                  TypeArgumentsList
                    PsiElement([)('[')
                    SimpleType: H
                      CodeReferenceElement: H
                        PsiElement(identifier)('H')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    SimpleType: T
                      CodeReferenceElement: T
                        PsiElement(identifier)('T')
                    PsiElement(])(']')
                PsiElement(,)(',')
                PsiWhiteSpace(' ')
                SimpleType: L
                  CodeReferenceElement: L
                    PsiElement(identifier)('L')
                PsiElement(])(']')
            PsiWhiteSpace(' ')
            Refinement
              PsiElement({)('{')
              PsiWhiteSpace(' ')
              ScTypeAliasDefinition: Out
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(type)('type')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('Out')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                ParametrizedType: HCons[H, O]
                  SimpleType: HCons
                    CodeReferenceElement: HCons
                      PsiElement(identifier)('HCons')
                  TypeArgumentsList
                    PsiElement([)('[')
                    SimpleType: H
                      CodeReferenceElement: H
                        PsiElement(identifier)('H')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    SimpleType: O
                      CodeReferenceElement: O
                        PsiElement(identifier)('O')
                    PsiElement(])(']')
              PsiWhiteSpace(' ')
              PsiElement(})('}')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          NullLiteral
            PsiElement(null)('null')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScObject: Test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScTypeAliasDefinition: L1
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('L1')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ParametrizedType: HCons[Unit, HNil]
            SimpleType: HCons
              CodeReferenceElement: HCons
                PsiElement(identifier)('HCons')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: Unit
                CodeReferenceElement: Unit
                  PsiElement(identifier)('Unit')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              SimpleType: HNil
                CodeReferenceElement: HNil
                  PsiElement(identifier)('HNil')
              PsiElement(])(']')
        PsiWhiteSpace('\n\n  ')
        GenericCall
          ReferenceExpression: implicitly
            PsiElement(identifier)('implicitly')
          TypeArgumentsList
            PsiElement([)('[')
            ParametrizedType: Concat[L1, L1]
              SimpleType: Concat
                CodeReferenceElement: Concat
                  PsiElement(identifier)('Concat')
              TypeArgumentsList
                PsiElement([)('[')
                SimpleType: L1
                  CodeReferenceElement: L1
                    PsiElement(identifier)('L1')
                PsiElement(,)(',')
                PsiWhiteSpace(' ')
                SimpleType: L1
                  CodeReferenceElement: L1
                    PsiElement(identifier)('L1')
                PsiElement(])(']')
            PsiElement(])(']')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
