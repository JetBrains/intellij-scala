import scala.compiletime.summonInline

type A
given A = ???

inline def summon1: A = summonInline[A]
transparent inline def summon2: A = summonInline[A]

def test1 = summon1
def test2 = summon2
-----
ScalaFile
  ScImportStatement
    PsiElement(import)('import')
    PsiWhiteSpace(' ')
    ImportExpression
      CodeReferenceElement: scala.compiletime.summonInline
        CodeReferenceElement: scala.compiletime
          CodeReferenceElement: scala
            PsiElement(identifier)('scala')
          PsiElement(.)('.')
          PsiElement(identifier)('compiletime')
        PsiElement(.)('.')
        PsiElement(identifier)('summonInline')
  PsiWhiteSpace('\n\n')
  ScTypeAliasDeclaration: A
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(type)('type')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('A')
  PsiWhiteSpace('\n')
  ScGivenAliasDefinition: given_A
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(given)('given')
    PsiWhiteSpace(' ')
    SimpleType: A
      CodeReferenceElement: A
        PsiElement(identifier)('A')
    Parameters
      <empty list>
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    ReferenceExpression: ???
      PsiElement(identifier)('???')
  PsiWhiteSpace('\n\n')
  ScFunctionDefinition: summon1
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(inline)('inline')
    PsiWhiteSpace(' ')
    PsiElement(def)('def')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('summon1')
    Parameters
      <empty list>
    PsiElement(:)(':')
    PsiWhiteSpace(' ')
    SimpleType: A
      CodeReferenceElement: A
        PsiElement(identifier)('A')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    GenericCall
      ReferenceExpression: summonInline
        PsiElement(identifier)('summonInline')
      TypeArgumentsList
        PsiElement([)('[')
        SimpleType: A
          CodeReferenceElement: A
            PsiElement(identifier)('A')
        PsiElement(])(']')
  PsiWhiteSpace('\n')
  ScFunctionDefinition: summon2
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(transparent)('transparent')
      PsiWhiteSpace(' ')
      PsiElement(inline)('inline')
    PsiWhiteSpace(' ')
    PsiElement(def)('def')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('summon2')
    Parameters
      <empty list>
    PsiElement(:)(':')
    PsiWhiteSpace(' ')
    SimpleType: A
      CodeReferenceElement: A
        PsiElement(identifier)('A')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    GenericCall
      ReferenceExpression: summonInline
        PsiElement(identifier)('summonInline')
      TypeArgumentsList
        PsiElement([)('[')
        SimpleType: A
          CodeReferenceElement: A
            PsiElement(identifier)('A')
        PsiElement(])(']')
  PsiWhiteSpace('\n\n')
  ScFunctionDefinition: test1
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(def)('def')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('test1')
    Parameters
      <empty list>
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    ReferenceExpression: summon1
      PsiElement(identifier)('summon1')
  PsiWhiteSpace('\n')
  ScFunctionDefinition: test2
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(def)('def')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('test2')
    Parameters
      <empty list>
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    ReferenceExpression: summon2
      PsiElement(identifier)('summon2')
