import scala.reflect.Selectable.reflectiveSelectable

object Test {
  def main(args: Array[String]): Unit = {
    def fCompareToBoolean(x: { def compareTo(y: java.lang.Boolean): Int }, y: Boolean): Int =
      x.compareTo(y)
    assert(fCompareToBoolean(false, true) < 0)
  }
}
-----
ScalaFile
  ScImportStatement
    PsiElement(import)('import')
    PsiWhiteSpace(' ')
    ImportExpression
      CodeReferenceElement: scala.reflect.Selectable.reflectiveSelectable
        CodeReferenceElement: scala.reflect.Selectable
          CodeReferenceElement: scala.reflect
            CodeReferenceElement: scala
              PsiElement(identifier)('scala')
            PsiElement(.)('.')
            PsiElement(identifier)('reflect')
          PsiElement(.)('.')
          PsiElement(identifier)('Selectable')
        PsiElement(.)('.')
        PsiElement(identifier)('reflectiveSelectable')
  PsiWhiteSpace('\n\n')
  ScObject: Test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: main
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('main')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: args
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('args')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  ParametrizedType: Array[String]
                    SimpleType: Array
                      CodeReferenceElement: Array
                        PsiElement(identifier)('Array')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: String
                        CodeReferenceElement: String
                          PsiElement(identifier)('String')
                      PsiElement(])(']')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Unit
            CodeReferenceElement: Unit
              PsiElement(identifier)('Unit')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          BlockExpression
            PsiElement({)('{')
            PsiWhiteSpace('\n    ')
            ScFunctionDefinition: fCompareToBoolean
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(def)('def')
              PsiWhiteSpace(' ')
              PsiElement(identifier)('fCompareToBoolean')
              Parameters
                ParametersClause
                  PsiElement(()('(')
                  Parameter: x
                    AnnotationsList
                      <empty list>
                    Modifiers
                      <empty list>
                    PsiElement(identifier)('x')
                    PsiElement(:)(':')
                    PsiWhiteSpace(' ')
                    ParameterType
                      CompoundType: { def compareTo(y: java.lang.Boolean): Int }
                        Refinement
                          PsiElement({)('{')
                          PsiWhiteSpace(' ')
                          ScFunctionDeclaration: compareTo
                            AnnotationsList
                              <empty list>
                            Modifiers
                              <empty list>
                            PsiElement(def)('def')
                            PsiWhiteSpace(' ')
                            PsiElement(identifier)('compareTo')
                            Parameters
                              ParametersClause
                                PsiElement(()('(')
                                Parameter: y
                                  AnnotationsList
                                    <empty list>
                                  Modifiers
                                    <empty list>
                                  PsiElement(identifier)('y')
                                  PsiElement(:)(':')
                                  PsiWhiteSpace(' ')
                                  ParameterType
                                    SimpleType: java.lang.Boolean
                                      CodeReferenceElement: java.lang.Boolean
                                        CodeReferenceElement: java.lang
                                          CodeReferenceElement: java
                                            PsiElement(identifier)('java')
                                          PsiElement(.)('.')
                                          PsiElement(identifier)('lang')
                                        PsiElement(.)('.')
                                        PsiElement(identifier)('Boolean')
                                PsiElement())(')')
                            PsiElement(:)(':')
                            PsiWhiteSpace(' ')
                            SimpleType: Int
                              CodeReferenceElement: Int
                                PsiElement(identifier)('Int')
                          PsiWhiteSpace(' ')
                          PsiElement(})('}')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  Parameter: y
                    AnnotationsList
                      <empty list>
                    Modifiers
                      <empty list>
                    PsiElement(identifier)('y')
                    PsiElement(:)(':')
                    PsiWhiteSpace(' ')
                    ParameterType
                      SimpleType: Boolean
                        CodeReferenceElement: Boolean
                          PsiElement(identifier)('Boolean')
                  PsiElement())(')')
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              SimpleType: Int
                CodeReferenceElement: Int
                  PsiElement(identifier)('Int')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace('\n      ')
              MethodCall
                ReferenceExpression: x.compareTo
                  ReferenceExpression: x
                    PsiElement(identifier)('x')
                  PsiElement(.)('.')
                  PsiElement(identifier)('compareTo')
                ArgumentList
                  PsiElement(()('(')
                  ReferenceExpression: y
                    PsiElement(identifier)('y')
                  PsiElement())(')')
            PsiWhiteSpace('\n    ')
            MethodCall
              ReferenceExpression: assert
                PsiElement(identifier)('assert')
              ArgumentList
                PsiElement(()('(')
                InfixExpression
                  MethodCall
                    ReferenceExpression: fCompareToBoolean
                      PsiElement(identifier)('fCompareToBoolean')
                    ArgumentList
                      PsiElement(()('(')
                      BooleanLiteral
                        PsiElement(false)('false')
                      PsiElement(,)(',')
                      PsiWhiteSpace(' ')
                      BooleanLiteral
                        PsiElement(true)('true')
                      PsiElement())(')')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: <
                    PsiElement(identifier)('<')
                  PsiWhiteSpace(' ')
                  IntegerLiteral
                    PsiElement(integer)('0')
                PsiElement())(')')
            PsiWhiteSpace('\n  ')
            PsiElement(})('}')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
