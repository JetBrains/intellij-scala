
def fst0[A, B[_]](a: A)(b: B[a.type]): a.type = a

def fst[A, B[_]]: (a: A) => (b: B[a.type]) => a.type =
  (a: A) => (b: B[a.type]) => a

def snd[A, B[_]]: (a: A) => () => (b: B[a.type]) => b.type =
  (a: A) => () => (b: B[a.type]) => b

def fst1[A, B[_]]: (a: A) => (b: B[a.type]) => a.type = fst0

def test1[A, B[_]]: (a: A) => () => (b: B[a.type]) => Any =
  snd[A, B]

def test2[A, B[_]]: (a: A) => (b: B[a.type]) => A = fst[A, B]

class AA
class BB[T]

def test3: (a: AA) => (b: BB[a.type]) => BB[?] =
  (a: AA) => (b: BB[a.type]) => b

trait RelaxedSelectable extends Selectable.WithoutPreciseParameterTypes:
  def applyDynamic(name: String, paramTypes: Class[_]*)(args: Any*): Any = ???

class Sink[A] extends RelaxedSelectable {
  def put(x: A): Unit = {}
}
val a = new Sink[String]
val b: RelaxedSelectable { def put(x: String): Unit } = a
val _ = b.put("")
-----
ScalaFile
  ScFunctionDefinition: fst0
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(def)('def')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('fst0')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: A
        PsiElement(identifier)('A')
      PsiElement(,)(',')
      PsiWhiteSpace(' ')
      TypeParameter: B
        PsiElement(identifier)('B')
        TypeParameterClause
          PsiElement([)('[')
          TypeParameter: _
            PsiElement(_)('_')
          PsiElement(])(']')
      PsiElement(])(']')
    Parameters
      ParametersClause
        PsiElement(()('(')
        Parameter: a
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(identifier)('a')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParameterType
            SimpleType: A
              CodeReferenceElement: A
                PsiElement(identifier)('A')
        PsiElement())(')')
      ParametersClause
        PsiElement(()('(')
        Parameter: b
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(identifier)('b')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParameterType
            ParametrizedType: B[a.type]
              SimpleType: B
                CodeReferenceElement: B
                  PsiElement(identifier)('B')
              TypeArgumentsList
                PsiElement([)('[')
                SimpleType: a.type
                  CodeReferenceElement: a
                    PsiElement(identifier)('a')
                  PsiElement(.)('.')
                  PsiElement(type)('type')
                PsiElement(])(']')
        PsiElement())(')')
    PsiElement(:)(':')
    PsiWhiteSpace(' ')
    SimpleType: a.type
      CodeReferenceElement: a
        PsiElement(identifier)('a')
      PsiElement(.)('.')
      PsiElement(type)('type')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    ReferenceExpression: a
      PsiElement(identifier)('a')
  PsiWhiteSpace('\n\n')
  ScFunctionDefinition: fst
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(def)('def')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('fst')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: A
        PsiElement(identifier)('A')
      PsiElement(,)(',')
      PsiWhiteSpace(' ')
      TypeParameter: B
        PsiElement(identifier)('B')
        TypeParameterClause
          PsiElement([)('[')
          TypeParameter: _
            PsiElement(_)('_')
          PsiElement(])(']')
      PsiElement(])(']')
    Parameters
      <empty list>
    PsiElement(:)(':')
    PsiWhiteSpace(' ')
    DependentFunctionType: (a: A) => (b: B[a.type]) => a.type
      ParametersClause
        PsiElement(()('(')
        Parameter: a
          PsiElement(identifier)('a')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: A
            CodeReferenceElement: A
              PsiElement(identifier)('A')
        PsiElement())(')')
      PsiWhiteSpace(' ')
      PsiElement(=>)('=>')
      PsiWhiteSpace(' ')
      DependentFunctionType: (b: B[a.type]) => a.type
        ParametersClause
          PsiElement(()('(')
          Parameter: b
            PsiElement(identifier)('b')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            ParametrizedType: B[a.type]
              SimpleType: B
                CodeReferenceElement: B
                  PsiElement(identifier)('B')
              TypeArgumentsList
                PsiElement([)('[')
                SimpleType: a.type
                  CodeReferenceElement: a
                    PsiElement(identifier)('a')
                  PsiElement(.)('.')
                  PsiElement(type)('type')
                PsiElement(])(']')
          PsiElement())(')')
        PsiWhiteSpace(' ')
        PsiElement(=>)('=>')
        PsiWhiteSpace(' ')
        SimpleType: a.type
          CodeReferenceElement: a
            PsiElement(identifier)('a')
          PsiElement(.)('.')
          PsiElement(type)('type')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace('\n  ')
    FunctionExpression
      Parameters
        ParametersClause
          PsiElement(()('(')
          Parameter: a
            AnnotationsList
              <empty list>
            PsiElement(identifier)('a')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            ParameterType
              SimpleType: A
                CodeReferenceElement: A
                  PsiElement(identifier)('A')
          PsiElement())(')')
      PsiWhiteSpace(' ')
      PsiElement(=>)('=>')
      PsiWhiteSpace(' ')
      FunctionExpression
        Parameters
          ParametersClause
            PsiElement(()('(')
            Parameter: b
              AnnotationsList
                <empty list>
              PsiElement(identifier)('b')
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              ParameterType
                ParametrizedType: B[a.type]
                  SimpleType: B
                    CodeReferenceElement: B
                      PsiElement(identifier)('B')
                  TypeArgumentsList
                    PsiElement([)('[')
                    SimpleType: a.type
                      CodeReferenceElement: a
                        PsiElement(identifier)('a')
                      PsiElement(.)('.')
                      PsiElement(type)('type')
                    PsiElement(])(']')
            PsiElement())(')')
        PsiWhiteSpace(' ')
        PsiElement(=>)('=>')
        PsiWhiteSpace(' ')
        ReferenceExpression: a
          PsiElement(identifier)('a')
  PsiWhiteSpace('\n\n')
  ScFunctionDefinition: snd
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(def)('def')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('snd')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: A
        PsiElement(identifier)('A')
      PsiElement(,)(',')
      PsiWhiteSpace(' ')
      TypeParameter: B
        PsiElement(identifier)('B')
        TypeParameterClause
          PsiElement([)('[')
          TypeParameter: _
            PsiElement(_)('_')
          PsiElement(])(']')
      PsiElement(])(']')
    Parameters
      <empty list>
    PsiElement(:)(':')
    PsiWhiteSpace(' ')
    DependentFunctionType: (a: A) => () => (b: B[a.type]) => b.type
      ParametersClause
        PsiElement(()('(')
        Parameter: a
          PsiElement(identifier)('a')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: A
            CodeReferenceElement: A
              PsiElement(identifier)('A')
        PsiElement())(')')
      PsiWhiteSpace(' ')
      PsiElement(=>)('=>')
      PsiWhiteSpace(' ')
      FunctionalType: () => (b: B[a.type]) => b.type
        TypeInParenthesis: ()
          PsiElement(()('(')
          PsiElement())(')')
        PsiWhiteSpace(' ')
        PsiElement(=>)('=>')
        PsiWhiteSpace(' ')
        DependentFunctionType: (b: B[a.type]) => b.type
          ParametersClause
            PsiElement(()('(')
            Parameter: b
              PsiElement(identifier)('b')
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              ParametrizedType: B[a.type]
                SimpleType: B
                  CodeReferenceElement: B
                    PsiElement(identifier)('B')
                TypeArgumentsList
                  PsiElement([)('[')
                  SimpleType: a.type
                    CodeReferenceElement: a
                      PsiElement(identifier)('a')
                    PsiElement(.)('.')
                    PsiElement(type)('type')
                  PsiElement(])(']')
            PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(=>)('=>')
          PsiWhiteSpace(' ')
          SimpleType: b.type
            CodeReferenceElement: b
              PsiElement(identifier)('b')
            PsiElement(.)('.')
            PsiElement(type)('type')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace('\n  ')
    FunctionExpression
      Parameters
        ParametersClause
          PsiElement(()('(')
          Parameter: a
            AnnotationsList
              <empty list>
            PsiElement(identifier)('a')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            ParameterType
              SimpleType: A
                CodeReferenceElement: A
                  PsiElement(identifier)('A')
          PsiElement())(')')
      PsiWhiteSpace(' ')
      PsiElement(=>)('=>')
      PsiWhiteSpace(' ')
      FunctionExpression
        Parameters
          ParametersClause
            PsiElement(()('(')
            PsiElement())(')')
        PsiWhiteSpace(' ')
        PsiElement(=>)('=>')
        PsiWhiteSpace(' ')
        FunctionExpression
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: b
                AnnotationsList
                  <empty list>
                PsiElement(identifier)('b')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  ParametrizedType: B[a.type]
                    SimpleType: B
                      CodeReferenceElement: B
                        PsiElement(identifier)('B')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: a.type
                        CodeReferenceElement: a
                          PsiElement(identifier)('a')
                        PsiElement(.)('.')
                        PsiElement(type)('type')
                      PsiElement(])(']')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(=>)('=>')
          PsiWhiteSpace(' ')
          ReferenceExpression: b
            PsiElement(identifier)('b')
  PsiWhiteSpace('\n\n')
  ScFunctionDefinition: fst1
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(def)('def')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('fst1')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: A
        PsiElement(identifier)('A')
      PsiElement(,)(',')
      PsiWhiteSpace(' ')
      TypeParameter: B
        PsiElement(identifier)('B')
        TypeParameterClause
          PsiElement([)('[')
          TypeParameter: _
            PsiElement(_)('_')
          PsiElement(])(']')
      PsiElement(])(']')
    Parameters
      <empty list>
    PsiElement(:)(':')
    PsiWhiteSpace(' ')
    DependentFunctionType: (a: A) => (b: B[a.type]) => a.type
      ParametersClause
        PsiElement(()('(')
        Parameter: a
          PsiElement(identifier)('a')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: A
            CodeReferenceElement: A
              PsiElement(identifier)('A')
        PsiElement())(')')
      PsiWhiteSpace(' ')
      PsiElement(=>)('=>')
      PsiWhiteSpace(' ')
      DependentFunctionType: (b: B[a.type]) => a.type
        ParametersClause
          PsiElement(()('(')
          Parameter: b
            PsiElement(identifier)('b')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            ParametrizedType: B[a.type]
              SimpleType: B
                CodeReferenceElement: B
                  PsiElement(identifier)('B')
              TypeArgumentsList
                PsiElement([)('[')
                SimpleType: a.type
                  CodeReferenceElement: a
                    PsiElement(identifier)('a')
                  PsiElement(.)('.')
                  PsiElement(type)('type')
                PsiElement(])(']')
          PsiElement())(')')
        PsiWhiteSpace(' ')
        PsiElement(=>)('=>')
        PsiWhiteSpace(' ')
        SimpleType: a.type
          CodeReferenceElement: a
            PsiElement(identifier)('a')
          PsiElement(.)('.')
          PsiElement(type)('type')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    ReferenceExpression: fst0
      PsiElement(identifier)('fst0')
  PsiWhiteSpace('\n\n')
  ScFunctionDefinition: test1
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(def)('def')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('test1')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: A
        PsiElement(identifier)('A')
      PsiElement(,)(',')
      PsiWhiteSpace(' ')
      TypeParameter: B
        PsiElement(identifier)('B')
        TypeParameterClause
          PsiElement([)('[')
          TypeParameter: _
            PsiElement(_)('_')
          PsiElement(])(']')
      PsiElement(])(']')
    Parameters
      <empty list>
    PsiElement(:)(':')
    PsiWhiteSpace(' ')
    DependentFunctionType: (a: A) => () => (b: B[a.type]) => Any
      ParametersClause
        PsiElement(()('(')
        Parameter: a
          PsiElement(identifier)('a')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: A
            CodeReferenceElement: A
              PsiElement(identifier)('A')
        PsiElement())(')')
      PsiWhiteSpace(' ')
      PsiElement(=>)('=>')
      PsiWhiteSpace(' ')
      FunctionalType: () => (b: B[a.type]) => Any
        TypeInParenthesis: ()
          PsiElement(()('(')
          PsiElement())(')')
        PsiWhiteSpace(' ')
        PsiElement(=>)('=>')
        PsiWhiteSpace(' ')
        DependentFunctionType: (b: B[a.type]) => Any
          ParametersClause
            PsiElement(()('(')
            Parameter: b
              PsiElement(identifier)('b')
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              ParametrizedType: B[a.type]
                SimpleType: B
                  CodeReferenceElement: B
                    PsiElement(identifier)('B')
                TypeArgumentsList
                  PsiElement([)('[')
                  SimpleType: a.type
                    CodeReferenceElement: a
                      PsiElement(identifier)('a')
                    PsiElement(.)('.')
                    PsiElement(type)('type')
                  PsiElement(])(']')
            PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(=>)('=>')
          PsiWhiteSpace(' ')
          SimpleType: Any
            CodeReferenceElement: Any
              PsiElement(identifier)('Any')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace('\n  ')
    GenericCall
      ReferenceExpression: snd
        PsiElement(identifier)('snd')
      TypeArgumentsList
        PsiElement([)('[')
        SimpleType: A
          CodeReferenceElement: A
            PsiElement(identifier)('A')
        PsiElement(,)(',')
        PsiWhiteSpace(' ')
        SimpleType: B
          CodeReferenceElement: B
            PsiElement(identifier)('B')
        PsiElement(])(']')
  PsiWhiteSpace('\n\n')
  ScFunctionDefinition: test2
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(def)('def')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('test2')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: A
        PsiElement(identifier)('A')
      PsiElement(,)(',')
      PsiWhiteSpace(' ')
      TypeParameter: B
        PsiElement(identifier)('B')
        TypeParameterClause
          PsiElement([)('[')
          TypeParameter: _
            PsiElement(_)('_')
          PsiElement(])(']')
      PsiElement(])(']')
    Parameters
      <empty list>
    PsiElement(:)(':')
    PsiWhiteSpace(' ')
    DependentFunctionType: (a: A) => (b: B[a.type]) => A
      ParametersClause
        PsiElement(()('(')
        Parameter: a
          PsiElement(identifier)('a')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: A
            CodeReferenceElement: A
              PsiElement(identifier)('A')
        PsiElement())(')')
      PsiWhiteSpace(' ')
      PsiElement(=>)('=>')
      PsiWhiteSpace(' ')
      DependentFunctionType: (b: B[a.type]) => A
        ParametersClause
          PsiElement(()('(')
          Parameter: b
            PsiElement(identifier)('b')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            ParametrizedType: B[a.type]
              SimpleType: B
                CodeReferenceElement: B
                  PsiElement(identifier)('B')
              TypeArgumentsList
                PsiElement([)('[')
                SimpleType: a.type
                  CodeReferenceElement: a
                    PsiElement(identifier)('a')
                  PsiElement(.)('.')
                  PsiElement(type)('type')
                PsiElement(])(']')
          PsiElement())(')')
        PsiWhiteSpace(' ')
        PsiElement(=>)('=>')
        PsiWhiteSpace(' ')
        SimpleType: A
          CodeReferenceElement: A
            PsiElement(identifier)('A')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    GenericCall
      ReferenceExpression: fst
        PsiElement(identifier)('fst')
      TypeArgumentsList
        PsiElement([)('[')
        SimpleType: A
          CodeReferenceElement: A
            PsiElement(identifier)('A')
        PsiElement(,)(',')
        PsiWhiteSpace(' ')
        SimpleType: B
          CodeReferenceElement: B
            PsiElement(identifier)('B')
        PsiElement(])(']')
  PsiWhiteSpace('\n\n')
  ScClass: AA
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('AA')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    ExtendsBlock
      <empty list>
  PsiWhiteSpace('\n')
  ScClass: BB
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('BB')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: T
        PsiElement(identifier)('T')
      PsiElement(])(']')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    ExtendsBlock
      <empty list>
  PsiWhiteSpace('\n\n')
  ScFunctionDefinition: test3
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(def)('def')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('test3')
    Parameters
      <empty list>
    PsiElement(:)(':')
    PsiWhiteSpace(' ')
    DependentFunctionType: (a: AA) => (b: BB[a.type]) => BB[?]
      ParametersClause
        PsiElement(()('(')
        Parameter: a
          PsiElement(identifier)('a')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: AA
            CodeReferenceElement: AA
              PsiElement(identifier)('AA')
        PsiElement())(')')
      PsiWhiteSpace(' ')
      PsiElement(=>)('=>')
      PsiWhiteSpace(' ')
      DependentFunctionType: (b: BB[a.type]) => BB[?]
        ParametersClause
          PsiElement(()('(')
          Parameter: b
            PsiElement(identifier)('b')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            ParametrizedType: BB[a.type]
              SimpleType: BB
                CodeReferenceElement: BB
                  PsiElement(identifier)('BB')
              TypeArgumentsList
                PsiElement([)('[')
                SimpleType: a.type
                  CodeReferenceElement: a
                    PsiElement(identifier)('a')
                  PsiElement(.)('.')
                  PsiElement(type)('type')
                PsiElement(])(']')
          PsiElement())(')')
        PsiWhiteSpace(' ')
        PsiElement(=>)('=>')
        PsiWhiteSpace(' ')
        ParametrizedType: BB[?]
          SimpleType: BB
            CodeReferenceElement: BB
              PsiElement(identifier)('BB')
          TypeArgumentsList
            PsiElement([)('[')
            WildcardType: ?
              PsiElement(?)('?')
            PsiElement(])(']')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace('\n  ')
    FunctionExpression
      Parameters
        ParametersClause
          PsiElement(()('(')
          Parameter: a
            AnnotationsList
              <empty list>
            PsiElement(identifier)('a')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            ParameterType
              SimpleType: AA
                CodeReferenceElement: AA
                  PsiElement(identifier)('AA')
          PsiElement())(')')
      PsiWhiteSpace(' ')
      PsiElement(=>)('=>')
      PsiWhiteSpace(' ')
      FunctionExpression
        Parameters
          ParametersClause
            PsiElement(()('(')
            Parameter: b
              AnnotationsList
                <empty list>
              PsiElement(identifier)('b')
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              ParameterType
                ParametrizedType: BB[a.type]
                  SimpleType: BB
                    CodeReferenceElement: BB
                      PsiElement(identifier)('BB')
                  TypeArgumentsList
                    PsiElement([)('[')
                    SimpleType: a.type
                      CodeReferenceElement: a
                        PsiElement(identifier)('a')
                      PsiElement(.)('.')
                      PsiElement(type)('type')
                    PsiElement(])(']')
            PsiElement())(')')
        PsiWhiteSpace(' ')
        PsiElement(=>)('=>')
        PsiWhiteSpace(' ')
        ReferenceExpression: b
          PsiElement(identifier)('b')
  PsiWhiteSpace('\n\n')
  ScTrait: RelaxedSelectable
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('RelaxedSelectable')
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          SimpleType: Selectable.WithoutPreciseParameterTypes
            CodeReferenceElement: Selectable.WithoutPreciseParameterTypes
              CodeReferenceElement: Selectable
                PsiElement(identifier)('Selectable')
              PsiElement(.)('.')
              PsiElement(identifier)('WithoutPreciseParameterTypes')
      ScTemplateBody
        PsiElement(:)(':')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: applyDynamic
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('applyDynamic')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: name
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('name')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: String
                    CodeReferenceElement: String
                      PsiElement(identifier)('String')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              Parameter: paramTypes
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('paramTypes')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  ParametrizedType: Class[_]
                    SimpleType: Class
                      CodeReferenceElement: Class
                        PsiElement(identifier)('Class')
                    TypeArgumentsList
                      PsiElement([)('[')
                      WildcardType: _
                        PsiElement(_)('_')
                      PsiElement(])(']')
                  PsiElement(identifier)('*')
              PsiElement())(')')
            ParametersClause
              PsiElement(()('(')
              Parameter: args
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('args')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Any
                    CodeReferenceElement: Any
                      PsiElement(identifier)('Any')
                  PsiElement(identifier)('*')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Any
            CodeReferenceElement: Any
              PsiElement(identifier)('Any')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: ???
            PsiElement(identifier)('???')
  PsiWhiteSpace('\n\n')
  ScClass: Sink
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Sink')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: A
        PsiElement(identifier)('A')
      PsiElement(])(']')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          SimpleType: RelaxedSelectable
            CodeReferenceElement: RelaxedSelectable
              PsiElement(identifier)('RelaxedSelectable')
      PsiWhiteSpace(' ')
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: put
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('put')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: x
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: A
                    CodeReferenceElement: A
                      PsiElement(identifier)('A')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Unit
            CodeReferenceElement: Unit
              PsiElement(identifier)('Unit')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          BlockExpression
            PsiElement({)('{')
            PsiElement(})('}')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n')
  ScPatternDefinition: a
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(val)('val')
    PsiWhiteSpace(' ')
    ListOfPatterns
      ReferencePattern: a
        PsiElement(identifier)('a')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    ScNewTemplateDefinition: <anonymous>
      PsiElement(new)('new')
      PsiWhiteSpace(' ')
      ExtendsBlock
        TemplateParents
          ConstructorInvocation
            ParametrizedType: Sink[String]
              SimpleType: Sink
                CodeReferenceElement: Sink
                  PsiElement(identifier)('Sink')
              TypeArgumentsList
                PsiElement([)('[')
                SimpleType: String
                  CodeReferenceElement: String
                    PsiElement(identifier)('String')
                PsiElement(])(']')
  PsiWhiteSpace('\n')
  ScPatternDefinition: b
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(val)('val')
    PsiWhiteSpace(' ')
    ListOfPatterns
      ReferencePattern: b
        PsiElement(identifier)('b')
    PsiElement(:)(':')
    PsiWhiteSpace(' ')
    CompoundType: RelaxedSelectable { def put(x: String): Unit }
      SimpleType: RelaxedSelectable
        CodeReferenceElement: RelaxedSelectable
          PsiElement(identifier)('RelaxedSelectable')
      PsiWhiteSpace(' ')
      Refinement
        PsiElement({)('{')
        PsiWhiteSpace(' ')
        ScFunctionDeclaration: put
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('put')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: x
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: String
                    CodeReferenceElement: String
                      PsiElement(identifier)('String')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Unit
            CodeReferenceElement: Unit
              PsiElement(identifier)('Unit')
        PsiWhiteSpace(' ')
        PsiElement(})('}')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    ReferenceExpression: a
      PsiElement(identifier)('a')
  PsiWhiteSpace('\n')
  ScPatternDefinition
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(val)('val')
    PsiWhiteSpace(' ')
    ListOfPatterns
      WildcardPattern
        PsiElement(_)('_')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    MethodCall
      ReferenceExpression: b.put
        ReferenceExpression: b
          PsiElement(identifier)('b')
        PsiElement(.)('.')
        PsiElement(identifier)('put')
      ArgumentList
        PsiElement(()('(')
        StringLiteral
          PsiElement(string content)('""')
        PsiElement())(')')
