// scalac: -Werror
class Proj { type State = String }

sealed trait ProjState:
  val a: Proj
  val b: a.State

object ProjState:
  def unapply(pj: ProjState): Some[(pj.a.type, pj.b.type)] = Some((pj.a, pj.b))

def test(pj: ProjState) = pj match
  case ProjState(p, s) =>
-----
ScalaFile
  ScClass: Proj
    PsiComment(comment)('// scalac: -Werror')
    PsiWhiteSpace('\n')
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Proj')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace(' ')
        ScTypeAliasDefinition: State
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('State')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          SimpleType: String
            CodeReferenceElement: String
              PsiElement(identifier)('String')
        PsiWhiteSpace(' ')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScTrait: ProjState
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(sealed)('sealed')
    PsiWhiteSpace(' ')
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('ProjState')
    ExtendsBlock
      ScTemplateBody
        PsiElement(:)(':')
        PsiWhiteSpace('\n  ')
        ScValueDeclaration: a
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfIdentifiers
            Field identifier: a
              PsiElement(identifier)('a')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Proj
            CodeReferenceElement: Proj
              PsiElement(identifier)('Proj')
        PsiWhiteSpace('\n  ')
        ScValueDeclaration: b
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfIdentifiers
            Field identifier: b
              PsiElement(identifier)('b')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: a.State
            CodeReferenceElement: a.State
              CodeReferenceElement: a
                PsiElement(identifier)('a')
              PsiElement(.)('.')
              PsiElement(identifier)('State')
  PsiWhiteSpace('\n\n')
  ScObject: ProjState
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('ProjState')
    ExtendsBlock
      ScTemplateBody
        PsiElement(:)(':')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: unapply
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('unapply')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: pj
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('pj')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: ProjState
                    CodeReferenceElement: ProjState
                      PsiElement(identifier)('ProjState')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: Some[(pj.a.type, pj.b.type)]
            SimpleType: Some
              CodeReferenceElement: Some
                PsiElement(identifier)('Some')
            TypeArgumentsList
              PsiElement([)('[')
              TupleType: (pj.a.type, pj.b.type)
                PsiElement(()('(')
                TypesList
                  SimpleType: pj.a.type
                    CodeReferenceElement: pj.a
                      CodeReferenceElement: pj
                        PsiElement(identifier)('pj')
                      PsiElement(.)('.')
                      PsiElement(identifier)('a')
                    PsiElement(.)('.')
                    PsiElement(type)('type')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  SimpleType: pj.b.type
                    CodeReferenceElement: pj.b
                      CodeReferenceElement: pj
                        PsiElement(identifier)('pj')
                      PsiElement(.)('.')
                      PsiElement(identifier)('b')
                    PsiElement(.)('.')
                    PsiElement(type)('type')
                PsiElement())(')')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: Some
              PsiElement(identifier)('Some')
            ArgumentList
              PsiElement(()('(')
              Tuple
                PsiElement(()('(')
                ReferenceExpression: pj.a
                  ReferenceExpression: pj
                    PsiElement(identifier)('pj')
                  PsiElement(.)('.')
                  PsiElement(identifier)('a')
                PsiElement(,)(',')
                PsiWhiteSpace(' ')
                ReferenceExpression: pj.b
                  ReferenceExpression: pj
                    PsiElement(identifier)('pj')
                  PsiElement(.)('.')
                  PsiElement(identifier)('b')
                PsiElement())(')')
              PsiElement())(')')
  PsiWhiteSpace('\n\n')
  ScFunctionDefinition: test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(def)('def')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('test')
    Parameters
      ParametersClause
        PsiElement(()('(')
        Parameter: pj
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(identifier)('pj')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParameterType
            SimpleType: ProjState
              CodeReferenceElement: ProjState
                PsiElement(identifier)('ProjState')
        PsiElement())(')')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    MatchStatement
      ReferenceExpression: pj
        PsiElement(identifier)('pj')
      PsiWhiteSpace(' ')
      PsiElement(match)('match')
      PsiWhiteSpace('\n  ')
      CaseClauses
        CaseClause
          PsiElement(case)('case')
          PsiWhiteSpace(' ')
          ConstructorPattern
            CodeReferenceElement: ProjState
              PsiElement(identifier)('ProjState')
            Pattern Argument List
              PsiElement(()('(')
              ReferencePattern: p
                PsiElement(identifier)('p')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              ReferencePattern: s
                PsiElement(identifier)('s')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(=>)('=>')
          BlockOfExpressions
            <empty list>
