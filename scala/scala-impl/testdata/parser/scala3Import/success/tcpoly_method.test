trait Iterable[m[+x], +t] {
  def flatMap[resColl[+x] <: Iterable[resColl, x], s](f: t => resColl[s]): resColl[s]

  def foo[a[x]] = "a"
  val x = foo[List]
}
-----
ScalaFile
  ScTrait: Iterable
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Iterable')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: m
        PsiElement(identifier)('m')
        TypeParameterClause
          PsiElement([)('[')
          TypeParameter: x
            PsiElement(identifier)('+')
            PsiElement(identifier)('x')
          PsiElement(])(']')
      PsiElement(,)(',')
      PsiWhiteSpace(' ')
      TypeParameter: t
        PsiElement(identifier)('+')
        PsiElement(identifier)('t')
      PsiElement(])(']')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDeclaration: flatMap
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('flatMap')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: resColl
              PsiElement(identifier)('resColl')
              TypeParameterClause
                PsiElement([)('[')
                TypeParameter: x
                  PsiElement(identifier)('+')
                  PsiElement(identifier)('x')
                PsiElement(])(']')
              PsiWhiteSpace(' ')
              PsiElement(<:)('<:')
              PsiWhiteSpace(' ')
              ParametrizedType: Iterable[resColl, x]
                SimpleType: Iterable
                  CodeReferenceElement: Iterable
                    PsiElement(identifier)('Iterable')
                TypeArgumentsList
                  PsiElement([)('[')
                  SimpleType: resColl
                    CodeReferenceElement: resColl
                      PsiElement(identifier)('resColl')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  SimpleType: x
                    CodeReferenceElement: x
                      PsiElement(identifier)('x')
                  PsiElement(])(']')
            PsiElement(,)(',')
            PsiWhiteSpace(' ')
            TypeParameter: s
              PsiElement(identifier)('s')
            PsiElement(])(']')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: f
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('f')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  FunctionalType: t => resColl[s]
                    SimpleType: t
                      CodeReferenceElement: t
                        PsiElement(identifier)('t')
                    PsiWhiteSpace(' ')
                    PsiElement(=>)('=>')
                    PsiWhiteSpace(' ')
                    ParametrizedType: resColl[s]
                      SimpleType: resColl
                        CodeReferenceElement: resColl
                          PsiElement(identifier)('resColl')
                      TypeArgumentsList
                        PsiElement([)('[')
                        SimpleType: s
                          CodeReferenceElement: s
                            PsiElement(identifier)('s')
                        PsiElement(])(']')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: resColl[s]
            SimpleType: resColl
              CodeReferenceElement: resColl
                PsiElement(identifier)('resColl')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: s
                CodeReferenceElement: s
                  PsiElement(identifier)('s')
              PsiElement(])(']')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: foo
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('foo')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: a
              PsiElement(identifier)('a')
              TypeParameterClause
                PsiElement([)('[')
                TypeParameter: x
                  PsiElement(identifier)('x')
                PsiElement(])(']')
            PsiElement(])(']')
          Parameters
            <empty list>
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          StringLiteral
            PsiElement(string content)('"a"')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: x
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: x
              PsiElement(identifier)('x')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          GenericCall
            ReferenceExpression: foo
              PsiElement(identifier)('foo')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: List
                CodeReferenceElement: List
                  PsiElement(identifier)('List')
              PsiElement(])(']')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
