object Foo:
  def unapply(n: Int)(using x: DummyImplicit)(using y: Int): Option[Int] = ???

def test =
  given Int = 3
  1 match
    case Foo(_) =>
-----
ScalaFile
  ScObject: Foo
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Foo')
    ExtendsBlock
      ScTemplateBody
        PsiElement(:)(':')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: unapply
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('unapply')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: n
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('n')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Int
                    CodeReferenceElement: Int
                      PsiElement(identifier)('Int')
              PsiElement())(')')
            ParametersClause
              PsiElement(()('(')
              PsiElement(using)('using')
              PsiWhiteSpace(' ')
              Parameter: x
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: DummyImplicit
                    CodeReferenceElement: DummyImplicit
                      PsiElement(identifier)('DummyImplicit')
              PsiElement())(')')
            ParametersClause
              PsiElement(()('(')
              PsiElement(using)('using')
              PsiWhiteSpace(' ')
              Parameter: y
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('y')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Int
                    CodeReferenceElement: Int
                      PsiElement(identifier)('Int')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: Option[Int]
            SimpleType: Option
              CodeReferenceElement: Option
                PsiElement(identifier)('Option')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: Int
                CodeReferenceElement: Int
                  PsiElement(identifier)('Int')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: ???
            PsiElement(identifier)('???')
  PsiWhiteSpace('\n\n')
  ScFunctionDefinition: test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(def)('def')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('test')
    Parameters
      <empty list>
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    BlockExpression
      PsiWhiteSpace('\n  ')
      ScGivenAliasDefinition: given_Int
        AnnotationsList
          <empty list>
        Modifiers
          <empty list>
        PsiElement(given)('given')
        PsiWhiteSpace(' ')
        SimpleType: Int
          CodeReferenceElement: Int
            PsiElement(identifier)('Int')
        Parameters
          <empty list>
        PsiWhiteSpace(' ')
        PsiElement(=)('=')
        PsiWhiteSpace(' ')
        IntegerLiteral
          PsiElement(integer)('3')
      PsiWhiteSpace('\n  ')
      MatchStatement
        IntegerLiteral
          PsiElement(integer)('1')
        PsiWhiteSpace(' ')
        PsiElement(match)('match')
        PsiWhiteSpace('\n    ')
        CaseClauses
          CaseClause
            PsiElement(case)('case')
            PsiWhiteSpace(' ')
            ConstructorPattern
              CodeReferenceElement: Foo
                PsiElement(identifier)('Foo')
              Pattern Argument List
                PsiElement(()('(')
                WildcardPattern
                  PsiElement(_)('_')
                PsiElement())(')')
            PsiWhiteSpace(' ')
            PsiElement(=>)('=>')
            BlockOfExpressions
              <empty list>
