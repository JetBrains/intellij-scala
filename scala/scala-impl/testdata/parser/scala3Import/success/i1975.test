object Test {
  val X = Seq(1, 2)

  for (X <- Seq(3, 4)) yield println(X)
}
-----
ScalaFile
  ScObject: Test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: X
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: X
              PsiElement(identifier)('X')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: Seq
              PsiElement(identifier)('Seq')
            ArgumentList
              PsiElement(()('(')
              IntegerLiteral
                PsiElement(integer)('1')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              IntegerLiteral
                PsiElement(integer)('2')
              PsiElement())(')')
        PsiWhiteSpace('\n\n  ')
        ForStatement
          PsiElement(for)('for')
          PsiWhiteSpace(' ')
          PsiElement(()('(')
          Enumerators
            Generator
              StableElementPattern
                ReferenceExpression: X
                  PsiElement(identifier)('X')
              PsiWhiteSpace(' ')
              PsiElement(<-)('<-')
              PsiWhiteSpace(' ')
              MethodCall
                ReferenceExpression: Seq
                  PsiElement(identifier)('Seq')
                ArgumentList
                  PsiElement(()('(')
                  IntegerLiteral
                    PsiElement(integer)('3')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  IntegerLiteral
                    PsiElement(integer)('4')
                  PsiElement())(')')
          PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(yield)('yield')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: println
              PsiElement(identifier)('println')
            ArgumentList
              PsiElement(()('(')
              ReferenceExpression: X
                PsiElement(identifier)('X')
              PsiElement())(')')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
