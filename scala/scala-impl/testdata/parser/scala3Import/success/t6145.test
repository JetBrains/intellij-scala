object Test {
  // the existential causes a cast and the cast makes searchClass not be in tail position
  // can we get rid of the useless cast?
  @annotation.tailrec
  final def searchClass: Class[_] = {
    "packageName" match {
      case _ =>
        searchClass
    }
  }
}
-----
ScalaFile
  ScObject: Test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: searchClass
          PsiComment(comment)('// the existential causes a cast and the cast makes searchClass not be in tail position')
          PsiWhiteSpace('\n  ')
          PsiComment(comment)('// can we get rid of the useless cast?')
          PsiWhiteSpace('\n  ')
          AnnotationsList
            Annotation
              PsiElement(@)('@')
              AnnotationExpression
                ConstructorInvocation
                  SimpleType: annotation.tailrec
                    CodeReferenceElement: annotation.tailrec
                      CodeReferenceElement: annotation
                        PsiElement(identifier)('annotation')
                      PsiElement(.)('.')
                      PsiElement(identifier)('tailrec')
          PsiWhiteSpace('\n  ')
          Modifiers
            PsiElement(final)('final')
          PsiWhiteSpace(' ')
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('searchClass')
          Parameters
            <empty list>
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: Class[_]
            SimpleType: Class
              CodeReferenceElement: Class
                PsiElement(identifier)('Class')
            TypeArgumentsList
              PsiElement([)('[')
              WildcardType: _
                PsiElement(_)('_')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          BlockExpression
            PsiElement({)('{')
            PsiWhiteSpace('\n    ')
            MatchStatement
              StringLiteral
                PsiElement(string content)('"packageName"')
              PsiWhiteSpace(' ')
              PsiElement(match)('match')
              PsiWhiteSpace(' ')
              PsiElement({)('{')
              PsiWhiteSpace('\n      ')
              CaseClauses
                CaseClause
                  PsiElement(case)('case')
                  PsiWhiteSpace(' ')
                  WildcardPattern
                    PsiElement(_)('_')
                  PsiWhiteSpace(' ')
                  PsiElement(=>)('=>')
                  PsiWhiteSpace('\n        ')
                  BlockOfExpressions
                    ReferenceExpression: searchClass
                      PsiElement(identifier)('searchClass')
              PsiWhiteSpace('\n    ')
              PsiElement(})('}')
            PsiWhiteSpace('\n  ')
            PsiElement(})('}')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
