class A[m[+x]] {
 def str: m[Object] = sys.error("foo")
}

class B[m[+x]] extends A[m] {
 override def str: m[String]  = sys.error("foo")
}
-----
ScalaFile
  ScClass: A
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('A')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: m
        PsiElement(identifier)('m')
        TypeParameterClause
          PsiElement([)('[')
          TypeParameter: x
            PsiElement(identifier)('+')
            PsiElement(identifier)('x')
          PsiElement(])(']')
      PsiElement(])(']')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n ')
        ScFunctionDefinition: str
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('str')
          Parameters
            <empty list>
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: m[Object]
            SimpleType: m
              CodeReferenceElement: m
                PsiElement(identifier)('m')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: Object
                CodeReferenceElement: Object
                  PsiElement(identifier)('Object')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: sys.error
              ReferenceExpression: sys
                PsiElement(identifier)('sys')
              PsiElement(.)('.')
              PsiElement(identifier)('error')
            ArgumentList
              PsiElement(()('(')
              StringLiteral
                PsiElement(string content)('"foo"')
              PsiElement())(')')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScClass: B
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('B')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: m
        PsiElement(identifier)('m')
        TypeParameterClause
          PsiElement([)('[')
          TypeParameter: x
            PsiElement(identifier)('+')
            PsiElement(identifier)('x')
          PsiElement(])(']')
      PsiElement(])(']')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          ParametrizedType: A[m]
            SimpleType: A
              CodeReferenceElement: A
                PsiElement(identifier)('A')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: m
                CodeReferenceElement: m
                  PsiElement(identifier)('m')
              PsiElement(])(']')
      PsiWhiteSpace(' ')
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n ')
        ScFunctionDefinition: str
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(override)('override')
          PsiWhiteSpace(' ')
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('str')
          Parameters
            <empty list>
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: m[String]
            SimpleType: m
              CodeReferenceElement: m
                PsiElement(identifier)('m')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: String
                CodeReferenceElement: String
                  PsiElement(identifier)('String')
              PsiElement(])(']')
          PsiWhiteSpace('  ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: sys.error
              ReferenceExpression: sys
                PsiElement(identifier)('sys')
              PsiElement(.)('.')
              PsiElement(identifier)('error')
            ArgumentList
              PsiElement(()('(')
              StringLiteral
                PsiElement(string content)('"foo"')
              PsiElement())(')')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
