class Foo[@specialized T] {
  var v: T = compiletime.uninitialized

  def foo(x: T): T = x

  println("abc")

  class Bar[@specialized U] {
    def bar(x: U): T = v
//    def barInt(x: Int): T = bar(x.asInstanceOf[U])
  }
}

class Test {
  def test: Unit = {
    val a = new Foo[Int]
    val b = new a.Bar[Int]
    a.foo(10)
    b.bar(11)
  }
}

/*
abstract class Foo[@specialized T] {
  def foo(x: T): T
  def foo$Int(x: Int): Int

  abstract class Bar[@specialized U] {
    def bar(x: U): T
    def bar$Int(x: Int): T
  }
  abstract class Bar$Int extends Bar[Int] {
    def bar(x: Int): T = bar$Int(x)
    def bar$Int(x: Int): T
  }
}

abstract class Foo$Int extends Foo[Int] {
  def foo(x: Int): Int = foo$Int(x)
  def foo$Int(x: Int): Int

  abstract class Bar[@specialized U] {
    def bar(x: U): Int
    def bar$Int(x: Int): Int
  }
  abstract class Bar$Int extends Bar[Int] {
    def bar(x: Int): Int = bar$Int(x)
    def bar$Int(x: Int): Int
  }
}
*/
-----
ScalaFile
  ScClass: Foo
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Foo')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: T
        AnnotationsList
          Annotation
            PsiElement(@)('@')
            AnnotationExpression
              ConstructorInvocation
                SimpleType: specialized
                  CodeReferenceElement: specialized
                    PsiElement(identifier)('specialized')
        PsiWhiteSpace(' ')
        PsiElement(identifier)('T')
      PsiElement(])(']')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScVariableDefinition: v
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(var)('var')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: v
              PsiElement(identifier)('v')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: T
            CodeReferenceElement: T
              PsiElement(identifier)('T')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: compiletime.uninitialized
            ReferenceExpression: compiletime
              PsiElement(identifier)('compiletime')
            PsiElement(.)('.')
            PsiElement(identifier)('uninitialized')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: foo
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('foo')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: x
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: T
                    CodeReferenceElement: T
                      PsiElement(identifier)('T')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: T
            CodeReferenceElement: T
              PsiElement(identifier)('T')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: x
            PsiElement(identifier)('x')
        PsiWhiteSpace('\n\n  ')
        MethodCall
          ReferenceExpression: println
            PsiElement(identifier)('println')
          ArgumentList
            PsiElement(()('(')
            StringLiteral
              PsiElement(string content)('"abc"')
            PsiElement())(')')
        PsiWhiteSpace('\n\n  ')
        ScClass: Bar
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(class)('class')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Bar')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: U
              AnnotationsList
                Annotation
                  PsiElement(@)('@')
                  AnnotationExpression
                    ConstructorInvocation
                      SimpleType: specialized
                        CodeReferenceElement: specialized
                          PsiElement(identifier)('specialized')
              PsiWhiteSpace(' ')
              PsiElement(identifier)('U')
            PsiElement(])(']')
          PrimaryConstructor
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            Parameters
              <empty list>
          PsiWhiteSpace(' ')
          ExtendsBlock
            ScTemplateBody
              PsiElement({)('{')
              PsiWhiteSpace('\n    ')
              ScFunctionDefinition: bar
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(def)('def')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('bar')
                Parameters
                  ParametersClause
                    PsiElement(()('(')
                    Parameter: x
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(identifier)('x')
                      PsiElement(:)(':')
                      PsiWhiteSpace(' ')
                      ParameterType
                        SimpleType: U
                          CodeReferenceElement: U
                            PsiElement(identifier)('U')
                    PsiElement())(')')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                SimpleType: T
                  CodeReferenceElement: T
                    PsiElement(identifier)('T')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                ReferenceExpression: v
                  PsiElement(identifier)('v')
              PsiWhiteSpace('\n')
              PsiComment(comment)('//    def barInt(x: Int): T = bar(x.asInstanceOf[U])')
              PsiWhiteSpace('\n  ')
              PsiElement(})('}')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScClass: Test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: test
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('test')
          Parameters
            <empty list>
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Unit
            CodeReferenceElement: Unit
              PsiElement(identifier)('Unit')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          BlockExpression
            PsiElement({)('{')
            PsiWhiteSpace('\n    ')
            ScPatternDefinition: a
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              ListOfPatterns
                ReferencePattern: a
                  PsiElement(identifier)('a')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              ScNewTemplateDefinition: <anonymous>
                PsiElement(new)('new')
                PsiWhiteSpace(' ')
                ExtendsBlock
                  TemplateParents
                    ConstructorInvocation
                      ParametrizedType: Foo[Int]
                        SimpleType: Foo
                          CodeReferenceElement: Foo
                            PsiElement(identifier)('Foo')
                        TypeArgumentsList
                          PsiElement([)('[')
                          SimpleType: Int
                            CodeReferenceElement: Int
                              PsiElement(identifier)('Int')
                          PsiElement(])(']')
            PsiWhiteSpace('\n    ')
            ScPatternDefinition: b
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              ListOfPatterns
                ReferencePattern: b
                  PsiElement(identifier)('b')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              ScNewTemplateDefinition: <anonymous>
                PsiElement(new)('new')
                PsiWhiteSpace(' ')
                ExtendsBlock
                  TemplateParents
                    ConstructorInvocation
                      ParametrizedType: a.Bar[Int]
                        SimpleType: a.Bar
                          CodeReferenceElement: a.Bar
                            CodeReferenceElement: a
                              PsiElement(identifier)('a')
                            PsiElement(.)('.')
                            PsiElement(identifier)('Bar')
                        TypeArgumentsList
                          PsiElement([)('[')
                          SimpleType: Int
                            CodeReferenceElement: Int
                              PsiElement(identifier)('Int')
                          PsiElement(])(']')
            PsiWhiteSpace('\n    ')
            MethodCall
              ReferenceExpression: a.foo
                ReferenceExpression: a
                  PsiElement(identifier)('a')
                PsiElement(.)('.')
                PsiElement(identifier)('foo')
              ArgumentList
                PsiElement(()('(')
                IntegerLiteral
                  PsiElement(integer)('10')
                PsiElement())(')')
            PsiWhiteSpace('\n    ')
            MethodCall
              ReferenceExpression: b.bar
                ReferenceExpression: b
                  PsiElement(identifier)('b')
                PsiElement(.)('.')
                PsiElement(identifier)('bar')
              ArgumentList
                PsiElement(()('(')
                IntegerLiteral
                  PsiElement(integer)('11')
                PsiElement())(')')
            PsiWhiteSpace('\n  ')
            PsiElement(})('}')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  PsiComment(BlockComment)('/*\nabstract class Foo[@specialized T] {\n  def foo(x: T): T\n  def foo$Int(x: Int): Int\n\n  abstract class Bar[@specialized U] {\n    def bar(x: U): T\n    def bar$Int(x: Int): T\n  }\n  abstract class Bar$Int extends Bar[Int] {\n    def bar(x: Int): T = bar$Int(x)\n    def bar$Int(x: Int): T\n  }\n}\n\nabstract class Foo$Int extends Foo[Int] {\n  def foo(x: Int): Int = foo$Int(x)\n  def foo$Int(x: Int): Int\n\n  abstract class Bar[@specialized U] {\n    def bar(x: U): Int\n    def bar$Int(x: Int): Int\n  }\n  abstract class Bar$Int extends Bar[Int] {\n    def bar(x: Int): Int = bar$Int(x)\n    def bar$Int(x: Int): Int\n  }\n}\n*/')
