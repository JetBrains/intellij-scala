class Type
class Symbol
case class PolyType(tps: List[Symbol], res: Type) extends Type
class OtherType extends Type

// case class NullaryMethodType(tp: Type) extends Type

object NullaryMethodType {
  def apply(resTpe: Type): Type = PolyType(List(), resTpe)
  def unapply(tp: Type): Option[(Type)] = None
}

object Test {
  def TEST(tp: Type): String =
    tp match {
      case PolyType(ps1, PolyType(ps2, res @ PolyType(a, b))) => "1" + tp // couldn't find a simpler version that still crashes
      case NullaryMethodType(meh) => "2" + meh
    }
}
-----
ScalaFile
  ScClass: Type
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Type')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    ExtendsBlock
      <empty list>
  PsiWhiteSpace('\n')
  ScClass: Symbol
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Symbol')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    ExtendsBlock
      <empty list>
  PsiWhiteSpace('\n')
  ScClass: PolyType
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(case)('case')
    PsiWhiteSpace(' ')
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('PolyType')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        ParametersClause
          PsiElement(()('(')
          ClassParameter: tps
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(identifier)('tps')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            ParameterType
              ParametrizedType: List[Symbol]
                SimpleType: List
                  CodeReferenceElement: List
                    PsiElement(identifier)('List')
                TypeArgumentsList
                  PsiElement([)('[')
                  SimpleType: Symbol
                    CodeReferenceElement: Symbol
                      PsiElement(identifier)('Symbol')
                  PsiElement(])(']')
          PsiElement(,)(',')
          PsiWhiteSpace(' ')
          ClassParameter: res
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(identifier)('res')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            ParameterType
              SimpleType: Type
                CodeReferenceElement: Type
                  PsiElement(identifier)('Type')
          PsiElement())(')')
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          SimpleType: Type
            CodeReferenceElement: Type
              PsiElement(identifier)('Type')
  PsiWhiteSpace('\n')
  ScClass: OtherType
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('OtherType')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          SimpleType: Type
            CodeReferenceElement: Type
              PsiElement(identifier)('Type')
  PsiWhiteSpace('\n\n')
  PsiComment(comment)('// case class NullaryMethodType(tp: Type) extends Type')
  PsiWhiteSpace('\n\n')
  ScObject: NullaryMethodType
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('NullaryMethodType')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: apply
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('apply')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: resTpe
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('resTpe')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Type
                    CodeReferenceElement: Type
                      PsiElement(identifier)('Type')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Type
            CodeReferenceElement: Type
              PsiElement(identifier)('Type')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: PolyType
              PsiElement(identifier)('PolyType')
            ArgumentList
              PsiElement(()('(')
              MethodCall
                ReferenceExpression: List
                  PsiElement(identifier)('List')
                ArgumentList
                  PsiElement(()('(')
                  PsiElement())(')')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              ReferenceExpression: resTpe
                PsiElement(identifier)('resTpe')
              PsiElement())(')')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: unapply
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('unapply')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: tp
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('tp')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Type
                    CodeReferenceElement: Type
                      PsiElement(identifier)('Type')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: Option[(Type)]
            SimpleType: Option
              CodeReferenceElement: Option
                PsiElement(identifier)('Option')
            TypeArgumentsList
              PsiElement([)('[')
              TypeInParenthesis: (Type)
                PsiElement(()('(')
                SimpleType: Type
                  CodeReferenceElement: Type
                    PsiElement(identifier)('Type')
                PsiElement())(')')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: None
            PsiElement(identifier)('None')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScObject: Test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: TEST
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('TEST')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: tp
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('tp')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Type
                    CodeReferenceElement: Type
                      PsiElement(identifier)('Type')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: String
            CodeReferenceElement: String
              PsiElement(identifier)('String')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace('\n    ')
          MatchStatement
            ReferenceExpression: tp
              PsiElement(identifier)('tp')
            PsiWhiteSpace(' ')
            PsiElement(match)('match')
            PsiWhiteSpace(' ')
            PsiElement({)('{')
            PsiWhiteSpace('\n      ')
            CaseClauses
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                ConstructorPattern
                  CodeReferenceElement: PolyType
                    PsiElement(identifier)('PolyType')
                  Pattern Argument List
                    PsiElement(()('(')
                    ReferencePattern: ps1
                      PsiElement(identifier)('ps1')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    ConstructorPattern
                      CodeReferenceElement: PolyType
                        PsiElement(identifier)('PolyType')
                      Pattern Argument List
                        PsiElement(()('(')
                        ReferencePattern: ps2
                          PsiElement(identifier)('ps2')
                        PsiElement(,)(',')
                        PsiWhiteSpace(' ')
                        NamingPattern: res
                          PsiElement(identifier)('res')
                          PsiWhiteSpace(' ')
                          PsiElement(@)('@')
                          PsiWhiteSpace(' ')
                          ConstructorPattern
                            CodeReferenceElement: PolyType
                              PsiElement(identifier)('PolyType')
                            Pattern Argument List
                              PsiElement(()('(')
                              ReferencePattern: a
                                PsiElement(identifier)('a')
                              PsiElement(,)(',')
                              PsiWhiteSpace(' ')
                              ReferencePattern: b
                                PsiElement(identifier)('b')
                              PsiElement())(')')
                        PsiElement())(')')
                    PsiElement())(')')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                BlockOfExpressions
                  InfixExpression
                    StringLiteral
                      PsiElement(string content)('"1"')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: +
                      PsiElement(identifier)('+')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: tp
                      PsiElement(identifier)('tp')
              PsiWhiteSpace(' ')
              PsiComment(comment)('// couldn't find a simpler version that still crashes')
              PsiWhiteSpace('\n      ')
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                ConstructorPattern
                  CodeReferenceElement: NullaryMethodType
                    PsiElement(identifier)('NullaryMethodType')
                  Pattern Argument List
                    PsiElement(()('(')
                    ReferencePattern: meh
                      PsiElement(identifier)('meh')
                    PsiElement())(')')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                BlockOfExpressions
                  InfixExpression
                    StringLiteral
                      PsiElement(string content)('"2"')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: +
                      PsiElement(identifier)('+')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: meh
                      PsiElement(identifier)('meh')
            PsiWhiteSpace('\n    ')
            PsiElement(})('}')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
