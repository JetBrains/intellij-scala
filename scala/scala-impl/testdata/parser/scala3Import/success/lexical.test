// #2081
class RichInt(n: Int) {
  def days = 1000*60*60*24*n
}

object Test extends App {
  implicit def RichInt(n: Int): RichInt = new RichInt(n)
  println(10.days)
}
-----
ScalaFile
  ScClass: RichInt
    PsiComment(comment)('// #2081')
    PsiWhiteSpace('\n')
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('RichInt')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        ParametersClause
          PsiElement(()('(')
          ClassParameter: n
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(identifier)('n')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            ParameterType
              SimpleType: Int
                CodeReferenceElement: Int
                  PsiElement(identifier)('Int')
          PsiElement())(')')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: days
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('days')
          Parameters
            <empty list>
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          InfixExpression
            InfixExpression
              InfixExpression
                InfixExpression
                  IntegerLiteral
                    PsiElement(integer)('1000')
                  ReferenceExpression: *
                    PsiElement(identifier)('*')
                  IntegerLiteral
                    PsiElement(integer)('60')
                ReferenceExpression: *
                  PsiElement(identifier)('*')
                IntegerLiteral
                  PsiElement(integer)('60')
              ReferenceExpression: *
                PsiElement(identifier)('*')
              IntegerLiteral
                PsiElement(integer)('24')
            ReferenceExpression: *
              PsiElement(identifier)('*')
            ReferenceExpression: n
              PsiElement(identifier)('n')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScObject: Test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test')
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          SimpleType: App
            CodeReferenceElement: App
              PsiElement(identifier)('App')
      PsiWhiteSpace(' ')
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: RichInt
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(implicit)('implicit')
          PsiWhiteSpace(' ')
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('RichInt')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: n
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('n')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Int
                    CodeReferenceElement: Int
                      PsiElement(identifier)('Int')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: RichInt
            CodeReferenceElement: RichInt
              PsiElement(identifier)('RichInt')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ScNewTemplateDefinition: <anonymous>
            PsiElement(new)('new')
            PsiWhiteSpace(' ')
            ExtendsBlock
              TemplateParents
                ConstructorInvocation
                  SimpleType: RichInt
                    CodeReferenceElement: RichInt
                      PsiElement(identifier)('RichInt')
                  ArgumentList
                    PsiElement(()('(')
                    ReferenceExpression: n
                      PsiElement(identifier)('n')
                    PsiElement())(')')
        PsiWhiteSpace('\n  ')
        MethodCall
          ReferenceExpression: println
            PsiElement(identifier)('println')
          ArgumentList
            PsiElement(()('(')
            ReferenceExpression: 10.days
              IntegerLiteral
                PsiElement(integer)('10')
              PsiElement(.)('.')
              PsiElement(identifier)('days')
            PsiElement())(')')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
