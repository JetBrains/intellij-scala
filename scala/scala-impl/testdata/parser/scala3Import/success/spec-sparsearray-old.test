import scala.reflect.ClassManifest
import scala.collection.{MapFactory, mutable}
class SparseArray[@specialized(Int) T:ClassManifest] extends collection.mutable.Map[Int,T] with collection.mutable.MapOps[Int,T,collection.mutable.Map,SparseArray[T]] {
  override def get(x: Int) = {
    val ind = findOffset(x)
    if(ind < 0) None else Some(sys.error("ignore"))
  }

  /**
   * Returns the offset into index and data for the requested vector
   * index.  If the requested index is not found, the return value is
   * negative and can be converted into an insertion point with -(rv+1).
   */
  private def findOffset(i : Int) : Int = {
    sys.error("impl doesn't matter")
  }

  def addOne(elem: (Int, T)): SparseArray.this.type = ???
  def iterator: Iterator[(Int, T)] = ???
  def subtractOne(elem: Int): SparseArray.this.type = ???

  override protected[this] def fromSpecific(coll: IterableOnce[(Int, T)]): SparseArray[T] = ???
  override protected[this] def newSpecificBuilder: mutable.Builder[(Int, T), SparseArray[T]] = ???
  override def empty: SparseArray[T] = ???
}
-----
ScalaFile
  ScImportStatement
    PsiElement(import)('import')
    PsiWhiteSpace(' ')
    ImportExpression
      CodeReferenceElement: scala.reflect.ClassManifest
        CodeReferenceElement: scala.reflect
          CodeReferenceElement: scala
            PsiElement(identifier)('scala')
          PsiElement(.)('.')
          PsiElement(identifier)('reflect')
        PsiElement(.)('.')
        PsiElement(identifier)('ClassManifest')
  PsiWhiteSpace('\n')
  ScImportStatement
    PsiElement(import)('import')
    PsiWhiteSpace(' ')
    ImportExpression
      CodeReferenceElement: scala.collection
        CodeReferenceElement: scala
          PsiElement(identifier)('scala')
        PsiElement(.)('.')
        PsiElement(identifier)('collection')
      PsiElement(.)('.')
      ImportSelectors
        PsiElement({)('{')
        ImportSelector
          CodeReferenceElement: MapFactory
            PsiElement(identifier)('MapFactory')
        PsiElement(,)(',')
        PsiWhiteSpace(' ')
        ImportSelector
          CodeReferenceElement: mutable
            PsiElement(identifier)('mutable')
        PsiElement(})('}')
  PsiWhiteSpace('\n')
  ScClass: SparseArray
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('SparseArray')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: T
        AnnotationsList
          Annotation
            PsiElement(@)('@')
            AnnotationExpression
              ConstructorInvocation
                SimpleType: specialized
                  CodeReferenceElement: specialized
                    PsiElement(identifier)('specialized')
                ArgumentList
                  PsiElement(()('(')
                  ReferenceExpression: Int
                    PsiElement(identifier)('Int')
                  PsiElement())(')')
        PsiWhiteSpace(' ')
        PsiElement(identifier)('T')
        PsiElement(:)(':')
        SimpleType: ClassManifest
          CodeReferenceElement: ClassManifest
            PsiElement(identifier)('ClassManifest')
      PsiElement(])(']')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          ParametrizedType: collection.mutable.Map[Int,T]
            SimpleType: collection.mutable.Map
              CodeReferenceElement: collection.mutable.Map
                CodeReferenceElement: collection.mutable
                  CodeReferenceElement: collection
                    PsiElement(identifier)('collection')
                  PsiElement(.)('.')
                  PsiElement(identifier)('mutable')
                PsiElement(.)('.')
                PsiElement(identifier)('Map')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: Int
                CodeReferenceElement: Int
                  PsiElement(identifier)('Int')
              PsiElement(,)(',')
              SimpleType: T
                CodeReferenceElement: T
                  PsiElement(identifier)('T')
              PsiElement(])(']')
        PsiWhiteSpace(' ')
        PsiElement(with)('with')
        PsiWhiteSpace(' ')
        ConstructorInvocation
          ParametrizedType: collection.mutable.MapOps[Int,T,collection.mutable.Map,SparseArray[T]]
            SimpleType: collection.mutable.MapOps
              CodeReferenceElement: collection.mutable.MapOps
                CodeReferenceElement: collection.mutable
                  CodeReferenceElement: collection
                    PsiElement(identifier)('collection')
                  PsiElement(.)('.')
                  PsiElement(identifier)('mutable')
                PsiElement(.)('.')
                PsiElement(identifier)('MapOps')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: Int
                CodeReferenceElement: Int
                  PsiElement(identifier)('Int')
              PsiElement(,)(',')
              SimpleType: T
                CodeReferenceElement: T
                  PsiElement(identifier)('T')
              PsiElement(,)(',')
              SimpleType: collection.mutable.Map
                CodeReferenceElement: collection.mutable.Map
                  CodeReferenceElement: collection.mutable
                    CodeReferenceElement: collection
                      PsiElement(identifier)('collection')
                    PsiElement(.)('.')
                    PsiElement(identifier)('mutable')
                  PsiElement(.)('.')
                  PsiElement(identifier)('Map')
              PsiElement(,)(',')
              ParametrizedType: SparseArray[T]
                SimpleType: SparseArray
                  CodeReferenceElement: SparseArray
                    PsiElement(identifier)('SparseArray')
                TypeArgumentsList
                  PsiElement([)('[')
                  SimpleType: T
                    CodeReferenceElement: T
                      PsiElement(identifier)('T')
                  PsiElement(])(']')
              PsiElement(])(']')
      PsiWhiteSpace(' ')
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: get
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(override)('override')
          PsiWhiteSpace(' ')
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('get')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: x
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Int
                    CodeReferenceElement: Int
                      PsiElement(identifier)('Int')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          BlockExpression
            PsiElement({)('{')
            PsiWhiteSpace('\n    ')
            ScPatternDefinition: ind
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              ListOfPatterns
                ReferencePattern: ind
                  PsiElement(identifier)('ind')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              MethodCall
                ReferenceExpression: findOffset
                  PsiElement(identifier)('findOffset')
                ArgumentList
                  PsiElement(()('(')
                  ReferenceExpression: x
                    PsiElement(identifier)('x')
                  PsiElement())(')')
            PsiWhiteSpace('\n    ')
            IfStatement
              PsiElement(if)('if')
              PsiElement(()('(')
              InfixExpression
                ReferenceExpression: ind
                  PsiElement(identifier)('ind')
                PsiWhiteSpace(' ')
                ReferenceExpression: <
                  PsiElement(identifier)('<')
                PsiWhiteSpace(' ')
                IntegerLiteral
                  PsiElement(integer)('0')
              PsiElement())(')')
              PsiWhiteSpace(' ')
              ReferenceExpression: None
                PsiElement(identifier)('None')
              PsiWhiteSpace(' ')
              PsiElement(else)('else')
              PsiWhiteSpace(' ')
              MethodCall
                ReferenceExpression: Some
                  PsiElement(identifier)('Some')
                ArgumentList
                  PsiElement(()('(')
                  MethodCall
                    ReferenceExpression: sys.error
                      ReferenceExpression: sys
                        PsiElement(identifier)('sys')
                      PsiElement(.)('.')
                      PsiElement(identifier)('error')
                    ArgumentList
                      PsiElement(()('(')
                      StringLiteral
                        PsiElement(string content)('"ignore"')
                      PsiElement())(')')
                  PsiElement())(')')
            PsiWhiteSpace('\n  ')
            PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: findOffset
          DocComment
            ScPsiDocToken(DOC_COMMENT_START)('/**')
            ScPsiDocToken(DOC_WHITESPACE)('\n   ')
            ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
            ScDocParagraph
              ScPsiDocToken(DOC_WHITESPACE)(' ')
              ScPsiDocToken(DOC_COMMENT_DATA)('Returns the offset into index and data for the requested vector')
              ScPsiDocToken(DOC_WHITESPACE)('\n   ')
              ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
              ScPsiDocToken(DOC_WHITESPACE)(' ')
              ScPsiDocToken(DOC_COMMENT_DATA)('index.  If the requested index is not found, the return value is')
              ScPsiDocToken(DOC_WHITESPACE)('\n   ')
              ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
              ScPsiDocToken(DOC_WHITESPACE)(' ')
              ScPsiDocToken(DOC_COMMENT_DATA)('negative and can be converted into an insertion point with -(rv+1).')
              ScPsiDocToken(DOC_WHITESPACE)('\n   ')
            ScPsiDocToken(DOC_COMMENT_END)('*/')
          PsiWhiteSpace('\n  ')
          AnnotationsList
            <empty list>
          Modifiers
            AccessModifier
              PsiElement(private)('private')
          PsiWhiteSpace(' ')
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('findOffset')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: i
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('i')
                PsiWhiteSpace(' ')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Int
                    CodeReferenceElement: Int
                      PsiElement(identifier)('Int')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Int
            CodeReferenceElement: Int
              PsiElement(identifier)('Int')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          BlockExpression
            PsiElement({)('{')
            PsiWhiteSpace('\n    ')
            MethodCall
              ReferenceExpression: sys.error
                ReferenceExpression: sys
                  PsiElement(identifier)('sys')
                PsiElement(.)('.')
                PsiElement(identifier)('error')
              ArgumentList
                PsiElement(()('(')
                StringLiteral
                  PsiElement(string content)('"impl doesn't matter"')
                PsiElement())(')')
            PsiWhiteSpace('\n  ')
            PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: addOne
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('addOne')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: elem
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('elem')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  TupleType: (Int, T)
                    PsiElement(()('(')
                    TypesList
                      SimpleType: Int
                        CodeReferenceElement: Int
                          PsiElement(identifier)('Int')
                      PsiElement(,)(',')
                      PsiWhiteSpace(' ')
                      SimpleType: T
                        CodeReferenceElement: T
                          PsiElement(identifier)('T')
                    PsiElement())(')')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: SparseArray.this.type
            ThisReference
              CodeReferenceElement: SparseArray
                PsiElement(identifier)('SparseArray')
              PsiElement(.)('.')
              PsiElement(this)('this')
            PsiElement(.)('.')
            PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: ???
            PsiElement(identifier)('???')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: iterator
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('iterator')
          Parameters
            <empty list>
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: Iterator[(Int, T)]
            SimpleType: Iterator
              CodeReferenceElement: Iterator
                PsiElement(identifier)('Iterator')
            TypeArgumentsList
              PsiElement([)('[')
              TupleType: (Int, T)
                PsiElement(()('(')
                TypesList
                  SimpleType: Int
                    CodeReferenceElement: Int
                      PsiElement(identifier)('Int')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  SimpleType: T
                    CodeReferenceElement: T
                      PsiElement(identifier)('T')
                PsiElement())(')')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: ???
            PsiElement(identifier)('???')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: subtractOne
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('subtractOne')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: elem
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('elem')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Int
                    CodeReferenceElement: Int
                      PsiElement(identifier)('Int')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: SparseArray.this.type
            ThisReference
              CodeReferenceElement: SparseArray
                PsiElement(identifier)('SparseArray')
              PsiElement(.)('.')
              PsiElement(this)('this')
            PsiElement(.)('.')
            PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: ???
            PsiElement(identifier)('???')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: fromSpecific
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(override)('override')
            PsiWhiteSpace(' ')
            AccessModifier
              PsiElement(protected)('protected')
              PsiElement([)('[')
              PsiElement(this)('this')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('fromSpecific')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: coll
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('coll')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  ParametrizedType: IterableOnce[(Int, T)]
                    SimpleType: IterableOnce
                      CodeReferenceElement: IterableOnce
                        PsiElement(identifier)('IterableOnce')
                    TypeArgumentsList
                      PsiElement([)('[')
                      TupleType: (Int, T)
                        PsiElement(()('(')
                        TypesList
                          SimpleType: Int
                            CodeReferenceElement: Int
                              PsiElement(identifier)('Int')
                          PsiElement(,)(',')
                          PsiWhiteSpace(' ')
                          SimpleType: T
                            CodeReferenceElement: T
                              PsiElement(identifier)('T')
                        PsiElement())(')')
                      PsiElement(])(']')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: SparseArray[T]
            SimpleType: SparseArray
              CodeReferenceElement: SparseArray
                PsiElement(identifier)('SparseArray')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: T
                CodeReferenceElement: T
                  PsiElement(identifier)('T')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: ???
            PsiElement(identifier)('???')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: newSpecificBuilder
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(override)('override')
            PsiWhiteSpace(' ')
            AccessModifier
              PsiElement(protected)('protected')
              PsiElement([)('[')
              PsiElement(this)('this')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('newSpecificBuilder')
          Parameters
            <empty list>
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: mutable.Builder[(Int, T), SparseArray[T]]
            SimpleType: mutable.Builder
              CodeReferenceElement: mutable.Builder
                CodeReferenceElement: mutable
                  PsiElement(identifier)('mutable')
                PsiElement(.)('.')
                PsiElement(identifier)('Builder')
            TypeArgumentsList
              PsiElement([)('[')
              TupleType: (Int, T)
                PsiElement(()('(')
                TypesList
                  SimpleType: Int
                    CodeReferenceElement: Int
                      PsiElement(identifier)('Int')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  SimpleType: T
                    CodeReferenceElement: T
                      PsiElement(identifier)('T')
                PsiElement())(')')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              ParametrizedType: SparseArray[T]
                SimpleType: SparseArray
                  CodeReferenceElement: SparseArray
                    PsiElement(identifier)('SparseArray')
                TypeArgumentsList
                  PsiElement([)('[')
                  SimpleType: T
                    CodeReferenceElement: T
                      PsiElement(identifier)('T')
                  PsiElement(])(']')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: ???
            PsiElement(identifier)('???')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: empty
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(override)('override')
          PsiWhiteSpace(' ')
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('empty')
          Parameters
            <empty list>
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: SparseArray[T]
            SimpleType: SparseArray
              CodeReferenceElement: SparseArray
                PsiElement(identifier)('SparseArray')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: T
                CodeReferenceElement: T
                  PsiElement(identifier)('T')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: ???
            PsiElement(identifier)('???')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
