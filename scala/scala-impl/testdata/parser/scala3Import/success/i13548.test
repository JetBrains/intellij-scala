// scalac: -Werror
sealed abstract class Foo[N, A]
final case class Bar[B](foo: Foo[B, B]) extends Foo[B, B]
class Test:
  def pmat[P, C](scr: Foo[P, C]): C = scr match
    case Bar(foo) => pmat(foo)
-----
ScalaFile
  ScClass: Foo
    PsiComment(comment)('// scalac: -Werror')
    PsiWhiteSpace('\n')
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(sealed)('sealed')
      PsiWhiteSpace(' ')
      PsiElement(abstract)('abstract')
    PsiWhiteSpace(' ')
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Foo')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: N
        PsiElement(identifier)('N')
      PsiElement(,)(',')
      PsiWhiteSpace(' ')
      TypeParameter: A
        PsiElement(identifier)('A')
      PsiElement(])(']')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    ExtendsBlock
      <empty list>
  PsiWhiteSpace('\n')
  ScClass: Bar
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(final)('final')
      PsiWhiteSpace(' ')
      PsiElement(case)('case')
    PsiWhiteSpace(' ')
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Bar')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: B
        PsiElement(identifier)('B')
      PsiElement(])(']')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        ParametersClause
          PsiElement(()('(')
          ClassParameter: foo
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(identifier)('foo')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            ParameterType
              ParametrizedType: Foo[B, B]
                SimpleType: Foo
                  CodeReferenceElement: Foo
                    PsiElement(identifier)('Foo')
                TypeArgumentsList
                  PsiElement([)('[')
                  SimpleType: B
                    CodeReferenceElement: B
                      PsiElement(identifier)('B')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  SimpleType: B
                    CodeReferenceElement: B
                      PsiElement(identifier)('B')
                  PsiElement(])(']')
          PsiElement())(')')
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          ParametrizedType: Foo[B, B]
            SimpleType: Foo
              CodeReferenceElement: Foo
                PsiElement(identifier)('Foo')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: B
                CodeReferenceElement: B
                  PsiElement(identifier)('B')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              SimpleType: B
                CodeReferenceElement: B
                  PsiElement(identifier)('B')
              PsiElement(])(']')
  PsiWhiteSpace('\n')
  ScClass: Test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    ExtendsBlock
      ScTemplateBody
        PsiElement(:)(':')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: pmat
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('pmat')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: P
              PsiElement(identifier)('P')
            PsiElement(,)(',')
            PsiWhiteSpace(' ')
            TypeParameter: C
              PsiElement(identifier)('C')
            PsiElement(])(']')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: scr
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('scr')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  ParametrizedType: Foo[P, C]
                    SimpleType: Foo
                      CodeReferenceElement: Foo
                        PsiElement(identifier)('Foo')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: P
                        CodeReferenceElement: P
                          PsiElement(identifier)('P')
                      PsiElement(,)(',')
                      PsiWhiteSpace(' ')
                      SimpleType: C
                        CodeReferenceElement: C
                          PsiElement(identifier)('C')
                      PsiElement(])(']')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: C
            CodeReferenceElement: C
              PsiElement(identifier)('C')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MatchStatement
            ReferenceExpression: scr
              PsiElement(identifier)('scr')
            PsiWhiteSpace(' ')
            PsiElement(match)('match')
            PsiWhiteSpace('\n    ')
            CaseClauses
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                ConstructorPattern
                  CodeReferenceElement: Bar
                    PsiElement(identifier)('Bar')
                  Pattern Argument List
                    PsiElement(()('(')
                    ReferencePattern: foo
                      PsiElement(identifier)('foo')
                    PsiElement())(')')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                BlockOfExpressions
                  MethodCall
                    ReferenceExpression: pmat
                      PsiElement(identifier)('pmat')
                    ArgumentList
                      PsiElement(()('(')
                      ReferenceExpression: foo
                        PsiElement(identifier)('foo')
                      PsiElement())(')')
