trait BS[T, S <: BS[T, S]]
trait IS extends BS[Int, IS]

sealed trait BSElem[T, S <: BS[_, S]]
  // old error: Type argument S does not conform to upper bound BS[Any, LazyRef(S)]

object BSElem {
  implicit val intStreamShape: BSElem[Int, IS] = ???
}
class Ops[A] {
  def asJavaSeqStream[S <: BS[_, S]](implicit s: BSElem[A, S]): S = ???
    // old error: Type argument S does not conform to upper bound BS[Any, LazyRef(S)]
}
-----
ScalaFile
  ScTrait: BS
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('BS')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: T
        PsiElement(identifier)('T')
      PsiElement(,)(',')
      PsiWhiteSpace(' ')
      TypeParameter: S
        PsiElement(identifier)('S')
        PsiWhiteSpace(' ')
        PsiElement(<:)('<:')
        PsiWhiteSpace(' ')
        ParametrizedType: BS[T, S]
          SimpleType: BS
            CodeReferenceElement: BS
              PsiElement(identifier)('BS')
          TypeArgumentsList
            PsiElement([)('[')
            SimpleType: T
              CodeReferenceElement: T
                PsiElement(identifier)('T')
            PsiElement(,)(',')
            PsiWhiteSpace(' ')
            SimpleType: S
              CodeReferenceElement: S
                PsiElement(identifier)('S')
            PsiElement(])(']')
      PsiElement(])(']')
    ExtendsBlock
      <empty list>
  PsiWhiteSpace('\n')
  ScTrait: IS
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('IS')
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          ParametrizedType: BS[Int, IS]
            SimpleType: BS
              CodeReferenceElement: BS
                PsiElement(identifier)('BS')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: Int
                CodeReferenceElement: Int
                  PsiElement(identifier)('Int')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              SimpleType: IS
                CodeReferenceElement: IS
                  PsiElement(identifier)('IS')
              PsiElement(])(']')
  PsiWhiteSpace('\n\n')
  ScTrait: BSElem
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(sealed)('sealed')
    PsiWhiteSpace(' ')
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('BSElem')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: T
        PsiElement(identifier)('T')
      PsiElement(,)(',')
      PsiWhiteSpace(' ')
      TypeParameter: S
        PsiElement(identifier)('S')
        PsiWhiteSpace(' ')
        PsiElement(<:)('<:')
        PsiWhiteSpace(' ')
        ParametrizedType: BS[_, S]
          SimpleType: BS
            CodeReferenceElement: BS
              PsiElement(identifier)('BS')
          TypeArgumentsList
            PsiElement([)('[')
            WildcardType: _
              PsiElement(_)('_')
            PsiElement(,)(',')
            PsiWhiteSpace(' ')
            SimpleType: S
              CodeReferenceElement: S
                PsiElement(identifier)('S')
            PsiElement(])(']')
      PsiElement(])(']')
    ExtendsBlock
      <empty list>
  PsiWhiteSpace('\n  ')
  PsiComment(comment)('// old error: Type argument S does not conform to upper bound BS[Any, LazyRef(S)]')
  PsiWhiteSpace('\n\n')
  ScObject: BSElem
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('BSElem')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: intStreamShape
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(implicit)('implicit')
          PsiWhiteSpace(' ')
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: intStreamShape
              PsiElement(identifier)('intStreamShape')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: BSElem[Int, IS]
            SimpleType: BSElem
              CodeReferenceElement: BSElem
                PsiElement(identifier)('BSElem')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: Int
                CodeReferenceElement: Int
                  PsiElement(identifier)('Int')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              SimpleType: IS
                CodeReferenceElement: IS
                  PsiElement(identifier)('IS')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: ???
            PsiElement(identifier)('???')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n')
  ScClass: Ops
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Ops')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: A
        PsiElement(identifier)('A')
      PsiElement(])(']')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: asJavaSeqStream
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('asJavaSeqStream')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: S
              PsiElement(identifier)('S')
              PsiWhiteSpace(' ')
              PsiElement(<:)('<:')
              PsiWhiteSpace(' ')
              ParametrizedType: BS[_, S]
                SimpleType: BS
                  CodeReferenceElement: BS
                    PsiElement(identifier)('BS')
                TypeArgumentsList
                  PsiElement([)('[')
                  WildcardType: _
                    PsiElement(_)('_')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  SimpleType: S
                    CodeReferenceElement: S
                      PsiElement(identifier)('S')
                  PsiElement(])(']')
            PsiElement(])(']')
          Parameters
            ParametersClause
              PsiElement(()('(')
              PsiElement(implicit)('implicit')
              PsiWhiteSpace(' ')
              Parameter: s
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('s')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  ParametrizedType: BSElem[A, S]
                    SimpleType: BSElem
                      CodeReferenceElement: BSElem
                        PsiElement(identifier)('BSElem')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: A
                        CodeReferenceElement: A
                          PsiElement(identifier)('A')
                      PsiElement(,)(',')
                      PsiWhiteSpace(' ')
                      SimpleType: S
                        CodeReferenceElement: S
                          PsiElement(identifier)('S')
                      PsiElement(])(']')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: S
            CodeReferenceElement: S
              PsiElement(identifier)('S')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: ???
            PsiElement(identifier)('???')
        PsiWhiteSpace('\n    ')
        PsiComment(comment)('// old error: Type argument S does not conform to upper bound BS[Any, LazyRef(S)]')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
