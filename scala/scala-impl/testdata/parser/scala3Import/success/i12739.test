object X {

  class CA[A]
  type C = CA[_]
  val c: C = ???
  def f[A](r: CA[A]) = ()
  def g(): CA[_] = CA()
  def h(): C = ???

  // works
  f(c)

  // works
  val x = c.asInstanceOf[C]
  f(x)

  // was: error
  f(c.asInstanceOf[C])

  // works, error in Scala 2
  f(c.asInstanceOf[c.type])

  f(c.asInstanceOf[CA[_]])
  f(g())
  f(h())
}
-----
ScalaFile
  ScObject: X
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('X')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n\n  ')
        ScClass: CA
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(class)('class')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('CA')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: A
              PsiElement(identifier)('A')
            PsiElement(])(']')
          PrimaryConstructor
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            Parameters
              <empty list>
          ExtendsBlock
            <empty list>
        PsiWhiteSpace('\n  ')
        ScTypeAliasDefinition: C
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('C')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ParametrizedType: CA[_]
            SimpleType: CA
              CodeReferenceElement: CA
                PsiElement(identifier)('CA')
            TypeArgumentsList
              PsiElement([)('[')
              WildcardType: _
                PsiElement(_)('_')
              PsiElement(])(']')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: c
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: c
              PsiElement(identifier)('c')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: C
            CodeReferenceElement: C
              PsiElement(identifier)('C')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: ???
            PsiElement(identifier)('???')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: f
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('f')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: A
              PsiElement(identifier)('A')
            PsiElement(])(']')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: r
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('r')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  ParametrizedType: CA[A]
                    SimpleType: CA
                      CodeReferenceElement: CA
                        PsiElement(identifier)('CA')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: A
                        CodeReferenceElement: A
                          PsiElement(identifier)('A')
                      PsiElement(])(']')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          UnitExpression
            PsiElement(()('(')
            PsiElement())(')')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: g
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('g')
          Parameters
            ParametersClause
              PsiElement(()('(')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: CA[_]
            SimpleType: CA
              CodeReferenceElement: CA
                PsiElement(identifier)('CA')
            TypeArgumentsList
              PsiElement([)('[')
              WildcardType: _
                PsiElement(_)('_')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: CA
              PsiElement(identifier)('CA')
            ArgumentList
              PsiElement(()('(')
              PsiElement())(')')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: h
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('h')
          Parameters
            ParametersClause
              PsiElement(()('(')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: C
            CodeReferenceElement: C
              PsiElement(identifier)('C')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: ???
            PsiElement(identifier)('???')
        PsiWhiteSpace('\n\n  ')
        PsiComment(comment)('// works')
        PsiWhiteSpace('\n  ')
        MethodCall
          ReferenceExpression: f
            PsiElement(identifier)('f')
          ArgumentList
            PsiElement(()('(')
            ReferenceExpression: c
              PsiElement(identifier)('c')
            PsiElement())(')')
        PsiWhiteSpace('\n\n  ')
        ScPatternDefinition: x
          PsiComment(comment)('// works')
          PsiWhiteSpace('\n  ')
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: x
              PsiElement(identifier)('x')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          GenericCall
            ReferenceExpression: c.asInstanceOf
              ReferenceExpression: c
                PsiElement(identifier)('c')
              PsiElement(.)('.')
              PsiElement(identifier)('asInstanceOf')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: C
                CodeReferenceElement: C
                  PsiElement(identifier)('C')
              PsiElement(])(']')
        PsiWhiteSpace('\n  ')
        MethodCall
          ReferenceExpression: f
            PsiElement(identifier)('f')
          ArgumentList
            PsiElement(()('(')
            ReferenceExpression: x
              PsiElement(identifier)('x')
            PsiElement())(')')
        PsiWhiteSpace('\n\n  ')
        PsiComment(comment)('// was: error')
        PsiWhiteSpace('\n  ')
        MethodCall
          ReferenceExpression: f
            PsiElement(identifier)('f')
          ArgumentList
            PsiElement(()('(')
            GenericCall
              ReferenceExpression: c.asInstanceOf
                ReferenceExpression: c
                  PsiElement(identifier)('c')
                PsiElement(.)('.')
                PsiElement(identifier)('asInstanceOf')
              TypeArgumentsList
                PsiElement([)('[')
                SimpleType: C
                  CodeReferenceElement: C
                    PsiElement(identifier)('C')
                PsiElement(])(']')
            PsiElement())(')')
        PsiWhiteSpace('\n\n  ')
        PsiComment(comment)('// works, error in Scala 2')
        PsiWhiteSpace('\n  ')
        MethodCall
          ReferenceExpression: f
            PsiElement(identifier)('f')
          ArgumentList
            PsiElement(()('(')
            GenericCall
              ReferenceExpression: c.asInstanceOf
                ReferenceExpression: c
                  PsiElement(identifier)('c')
                PsiElement(.)('.')
                PsiElement(identifier)('asInstanceOf')
              TypeArgumentsList
                PsiElement([)('[')
                SimpleType: c.type
                  CodeReferenceElement: c
                    PsiElement(identifier)('c')
                  PsiElement(.)('.')
                  PsiElement(type)('type')
                PsiElement(])(']')
            PsiElement())(')')
        PsiWhiteSpace('\n\n  ')
        MethodCall
          ReferenceExpression: f
            PsiElement(identifier)('f')
          ArgumentList
            PsiElement(()('(')
            GenericCall
              ReferenceExpression: c.asInstanceOf
                ReferenceExpression: c
                  PsiElement(identifier)('c')
                PsiElement(.)('.')
                PsiElement(identifier)('asInstanceOf')
              TypeArgumentsList
                PsiElement([)('[')
                ParametrizedType: CA[_]
                  SimpleType: CA
                    CodeReferenceElement: CA
                      PsiElement(identifier)('CA')
                  TypeArgumentsList
                    PsiElement([)('[')
                    WildcardType: _
                      PsiElement(_)('_')
                    PsiElement(])(']')
                PsiElement(])(']')
            PsiElement())(')')
        PsiWhiteSpace('\n  ')
        MethodCall
          ReferenceExpression: f
            PsiElement(identifier)('f')
          ArgumentList
            PsiElement(()('(')
            MethodCall
              ReferenceExpression: g
                PsiElement(identifier)('g')
              ArgumentList
                PsiElement(()('(')
                PsiElement())(')')
            PsiElement())(')')
        PsiWhiteSpace('\n  ')
        MethodCall
          ReferenceExpression: f
            PsiElement(identifier)('f')
          ArgumentList
            PsiElement(()('(')
            MethodCall
              ReferenceExpression: h
                PsiElement(identifier)('h')
              ArgumentList
                PsiElement(()('(')
                PsiElement())(')')
            PsiElement())(')')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
