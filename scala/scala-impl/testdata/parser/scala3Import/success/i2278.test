object Fluent {
  trait Foo[C[_]] {
    def meth1[T]() : C[T]
  }
  trait CC[T]

  type Context[Alg[x[_]] <: Foo[x], E] = Alg[CC] ?=> CC[E]

  def meth1[T]() : Context[Foo, T] = {
    implicitly[Foo[CC]].meth1()
  }
}
-----
ScalaFile
  ScObject: Fluent
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Fluent')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScTrait: Foo
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(trait)('trait')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Foo')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: C
              PsiElement(identifier)('C')
              TypeParameterClause
                PsiElement([)('[')
                TypeParameter: _
                  PsiElement(_)('_')
                PsiElement(])(']')
            PsiElement(])(']')
          PsiWhiteSpace(' ')
          ExtendsBlock
            ScTemplateBody
              PsiElement({)('{')
              PsiWhiteSpace('\n    ')
              ScFunctionDeclaration: meth1
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(def)('def')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('meth1')
                TypeParameterClause
                  PsiElement([)('[')
                  TypeParameter: T
                    PsiElement(identifier)('T')
                  PsiElement(])(']')
                Parameters
                  ParametersClause
                    PsiElement(()('(')
                    PsiElement())(')')
                PsiWhiteSpace(' ')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParametrizedType: C[T]
                  SimpleType: C
                    CodeReferenceElement: C
                      PsiElement(identifier)('C')
                  TypeArgumentsList
                    PsiElement([)('[')
                    SimpleType: T
                      CodeReferenceElement: T
                        PsiElement(identifier)('T')
                    PsiElement(])(']')
              PsiWhiteSpace('\n  ')
              PsiElement(})('}')
        PsiWhiteSpace('\n  ')
        ScTrait: CC
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(trait)('trait')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('CC')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: T
              PsiElement(identifier)('T')
            PsiElement(])(']')
          ExtendsBlock
            <empty list>
        PsiWhiteSpace('\n\n  ')
        ScTypeAliasDefinition: Context
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Context')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: Alg
              PsiElement(identifier)('Alg')
              TypeParameterClause
                PsiElement([)('[')
                TypeParameter: x
                  PsiElement(identifier)('x')
                  TypeParameterClause
                    PsiElement([)('[')
                    TypeParameter: _
                      PsiElement(_)('_')
                    PsiElement(])(']')
                PsiElement(])(']')
              PsiWhiteSpace(' ')
              PsiElement(<:)('<:')
              PsiWhiteSpace(' ')
              ParametrizedType: Foo[x]
                SimpleType: Foo
                  CodeReferenceElement: Foo
                    PsiElement(identifier)('Foo')
                TypeArgumentsList
                  PsiElement([)('[')
                  SimpleType: x
                    CodeReferenceElement: x
                      PsiElement(identifier)('x')
                  PsiElement(])(']')
            PsiElement(,)(',')
            PsiWhiteSpace(' ')
            TypeParameter: E
              PsiElement(identifier)('E')
            PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          FunctionalType: Alg[CC] ?=> CC[E]
            ParametrizedType: Alg[CC]
              SimpleType: Alg
                CodeReferenceElement: Alg
                  PsiElement(identifier)('Alg')
              TypeArgumentsList
                PsiElement([)('[')
                SimpleType: CC
                  CodeReferenceElement: CC
                    PsiElement(identifier)('CC')
                PsiElement(])(']')
            PsiWhiteSpace(' ')
            PsiElement(?=>)('?=>')
            PsiWhiteSpace(' ')
            ParametrizedType: CC[E]
              SimpleType: CC
                CodeReferenceElement: CC
                  PsiElement(identifier)('CC')
              TypeArgumentsList
                PsiElement([)('[')
                SimpleType: E
                  CodeReferenceElement: E
                    PsiElement(identifier)('E')
                PsiElement(])(']')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: meth1
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('meth1')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: T
              PsiElement(identifier)('T')
            PsiElement(])(']')
          Parameters
            ParametersClause
              PsiElement(()('(')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: Context[Foo, T]
            SimpleType: Context
              CodeReferenceElement: Context
                PsiElement(identifier)('Context')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: Foo
                CodeReferenceElement: Foo
                  PsiElement(identifier)('Foo')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              SimpleType: T
                CodeReferenceElement: T
                  PsiElement(identifier)('T')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          BlockExpression
            PsiElement({)('{')
            PsiWhiteSpace('\n    ')
            MethodCall
              ReferenceExpression: implicitly[Foo[CC]].meth1
                GenericCall
                  ReferenceExpression: implicitly
                    PsiElement(identifier)('implicitly')
                  TypeArgumentsList
                    PsiElement([)('[')
                    ParametrizedType: Foo[CC]
                      SimpleType: Foo
                        CodeReferenceElement: Foo
                          PsiElement(identifier)('Foo')
                      TypeArgumentsList
                        PsiElement([)('[')
                        SimpleType: CC
                          CodeReferenceElement: CC
                            PsiElement(identifier)('CC')
                        PsiElement(])(']')
                    PsiElement(])(']')
                PsiElement(.)('.')
                PsiElement(identifier)('meth1')
              ArgumentList
                PsiElement(()('(')
                PsiElement())(')')
            PsiWhiteSpace('\n  ')
            PsiElement(})('}')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
