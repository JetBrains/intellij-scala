object Main extends App {

  val xs = 1 :: 2 :: 3 :: 4 :: 5 :: Nil

  println(xs)
}
-----
ScalaFile
  ScObject: Main
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Main')
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          SimpleType: App
            CodeReferenceElement: App
              PsiElement(identifier)('App')
      PsiWhiteSpace(' ')
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n\n  ')
        ScPatternDefinition: xs
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: xs
              PsiElement(identifier)('xs')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          InfixExpression
            IntegerLiteral
              PsiElement(integer)('1')
            PsiWhiteSpace(' ')
            ReferenceExpression: ::
              PsiElement(identifier)('::')
            PsiWhiteSpace(' ')
            InfixExpression
              IntegerLiteral
                PsiElement(integer)('2')
              PsiWhiteSpace(' ')
              ReferenceExpression: ::
                PsiElement(identifier)('::')
              PsiWhiteSpace(' ')
              InfixExpression
                IntegerLiteral
                  PsiElement(integer)('3')
                PsiWhiteSpace(' ')
                ReferenceExpression: ::
                  PsiElement(identifier)('::')
                PsiWhiteSpace(' ')
                InfixExpression
                  IntegerLiteral
                    PsiElement(integer)('4')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: ::
                    PsiElement(identifier)('::')
                  PsiWhiteSpace(' ')
                  InfixExpression
                    IntegerLiteral
                      PsiElement(integer)('5')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: ::
                      PsiElement(identifier)('::')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: Nil
                      PsiElement(identifier)('Nil')
        PsiWhiteSpace('\n\n  ')
        MethodCall
          ReferenceExpression: println
            PsiElement(identifier)('println')
          ArgumentList
            PsiElement(()('(')
            ReferenceExpression: xs
              PsiElement(identifier)('xs')
            PsiElement())(')')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
