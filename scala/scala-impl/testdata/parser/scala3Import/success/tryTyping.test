object tryTyping{
  def foo: Int = {
    try{???; 1}
    catch {
      case e: Exception => 2
    }
  }

  def foo2: Int = {
    val a2: (Throwable => Int) = _ match {case _ => 2}
    try{???; 1}
    catch a2
  }

  def foo3: Int = {
    val a3: (Int => Throwable => Int) = (b: Int) => _ match {case _ => b}
    try{???; 1}
    catch a3(3)
  }
}
-----
ScalaFile
  ScObject: tryTyping
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('tryTyping')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: foo
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('foo')
          Parameters
            <empty list>
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Int
            CodeReferenceElement: Int
              PsiElement(identifier)('Int')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          BlockExpression
            PsiElement({)('{')
            PsiWhiteSpace('\n    ')
            TryStatement
              PsiElement(try)('try')
              BlockExpression
                PsiElement({)('{')
                ReferenceExpression: ???
                  PsiElement(identifier)('???')
                PsiElement(;)(';')
                PsiWhiteSpace(' ')
                IntegerLiteral
                  PsiElement(integer)('1')
                PsiElement(})('}')
              PsiWhiteSpace('\n    ')
              CatchBlock
                PsiElement(catch)('catch')
                PsiWhiteSpace(' ')
                BlockExpression
                  PsiElement({)('{')
                  PsiWhiteSpace('\n      ')
                  CaseClauses
                    CaseClause
                      PsiElement(case)('case')
                      PsiWhiteSpace(' ')
                      Scala3 TypedPattern
                        ReferencePattern: e
                          PsiElement(identifier)('e')
                        PsiElement(:)(':')
                        PsiWhiteSpace(' ')
                        TypePattern
                          SimpleType: Exception
                            CodeReferenceElement: Exception
                              PsiElement(identifier)('Exception')
                      PsiWhiteSpace(' ')
                      PsiElement(=>)('=>')
                      PsiWhiteSpace(' ')
                      BlockOfExpressions
                        IntegerLiteral
                          PsiElement(integer)('2')
                  PsiWhiteSpace('\n    ')
                  PsiElement(})('}')
            PsiWhiteSpace('\n  ')
            PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: foo2
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('foo2')
          Parameters
            <empty list>
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Int
            CodeReferenceElement: Int
              PsiElement(identifier)('Int')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          BlockExpression
            PsiElement({)('{')
            PsiWhiteSpace('\n    ')
            ScPatternDefinition: a2
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              ListOfPatterns
                ReferencePattern: a2
                  PsiElement(identifier)('a2')
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              TypeInParenthesis: (Throwable => Int)
                PsiElement(()('(')
                FunctionalType: Throwable => Int
                  SimpleType: Throwable
                    CodeReferenceElement: Throwable
                      PsiElement(identifier)('Throwable')
                  PsiWhiteSpace(' ')
                  PsiElement(=>)('=>')
                  PsiWhiteSpace(' ')
                  SimpleType: Int
                    CodeReferenceElement: Int
                      PsiElement(identifier)('Int')
                PsiElement())(')')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              MatchStatement
                UnderscoreSection
                  PsiElement(_)('_')
                PsiWhiteSpace(' ')
                PsiElement(match)('match')
                PsiWhiteSpace(' ')
                PsiElement({)('{')
                CaseClauses
                  CaseClause
                    PsiElement(case)('case')
                    PsiWhiteSpace(' ')
                    WildcardPattern
                      PsiElement(_)('_')
                    PsiWhiteSpace(' ')
                    PsiElement(=>)('=>')
                    PsiWhiteSpace(' ')
                    BlockOfExpressions
                      IntegerLiteral
                        PsiElement(integer)('2')
                PsiElement(})('}')
            PsiWhiteSpace('\n    ')
            TryStatement
              PsiElement(try)('try')
              BlockExpression
                PsiElement({)('{')
                ReferenceExpression: ???
                  PsiElement(identifier)('???')
                PsiElement(;)(';')
                PsiWhiteSpace(' ')
                IntegerLiteral
                  PsiElement(integer)('1')
                PsiElement(})('}')
              PsiWhiteSpace('\n    ')
              CatchBlock
                PsiElement(catch)('catch')
                PsiWhiteSpace(' ')
                ReferenceExpression: a2
                  PsiElement(identifier)('a2')
            PsiWhiteSpace('\n  ')
            PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: foo3
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('foo3')
          Parameters
            <empty list>
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Int
            CodeReferenceElement: Int
              PsiElement(identifier)('Int')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          BlockExpression
            PsiElement({)('{')
            PsiWhiteSpace('\n    ')
            ScPatternDefinition: a3
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              ListOfPatterns
                ReferencePattern: a3
                  PsiElement(identifier)('a3')
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              TypeInParenthesis: (Int => Throwable => Int)
                PsiElement(()('(')
                FunctionalType: Int => Throwable => Int
                  SimpleType: Int
                    CodeReferenceElement: Int
                      PsiElement(identifier)('Int')
                  PsiWhiteSpace(' ')
                  PsiElement(=>)('=>')
                  PsiWhiteSpace(' ')
                  FunctionalType: Throwable => Int
                    SimpleType: Throwable
                      CodeReferenceElement: Throwable
                        PsiElement(identifier)('Throwable')
                    PsiWhiteSpace(' ')
                    PsiElement(=>)('=>')
                    PsiWhiteSpace(' ')
                    SimpleType: Int
                      CodeReferenceElement: Int
                        PsiElement(identifier)('Int')
                PsiElement())(')')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              FunctionExpression
                Parameters
                  ParametersClause
                    PsiElement(()('(')
                    Parameter: b
                      AnnotationsList
                        <empty list>
                      PsiElement(identifier)('b')
                      PsiElement(:)(':')
                      PsiWhiteSpace(' ')
                      ParameterType
                        SimpleType: Int
                          CodeReferenceElement: Int
                            PsiElement(identifier)('Int')
                    PsiElement())(')')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                MatchStatement
                  UnderscoreSection
                    PsiElement(_)('_')
                  PsiWhiteSpace(' ')
                  PsiElement(match)('match')
                  PsiWhiteSpace(' ')
                  PsiElement({)('{')
                  CaseClauses
                    CaseClause
                      PsiElement(case)('case')
                      PsiWhiteSpace(' ')
                      WildcardPattern
                        PsiElement(_)('_')
                      PsiWhiteSpace(' ')
                      PsiElement(=>)('=>')
                      PsiWhiteSpace(' ')
                      BlockOfExpressions
                        ReferenceExpression: b
                          PsiElement(identifier)('b')
                  PsiElement(})('}')
            PsiWhiteSpace('\n    ')
            TryStatement
              PsiElement(try)('try')
              BlockExpression
                PsiElement({)('{')
                ReferenceExpression: ???
                  PsiElement(identifier)('???')
                PsiElement(;)(';')
                PsiWhiteSpace(' ')
                IntegerLiteral
                  PsiElement(integer)('1')
                PsiElement(})('}')
              PsiWhiteSpace('\n    ')
              CatchBlock
                PsiElement(catch)('catch')
                PsiWhiteSpace(' ')
                MethodCall
                  ReferenceExpression: a3
                    PsiElement(identifier)('a3')
                  ArgumentList
                    PsiElement(()('(')
                    IntegerLiteral
                      PsiElement(integer)('3')
                    PsiElement())(')')
            PsiWhiteSpace('\n  ')
            PsiElement(})('}')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
