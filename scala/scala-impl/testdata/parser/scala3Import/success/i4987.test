object Foo {

  class Expr[T]

  abstract class Liftable[T] {
    def toExpr(x: T): Expr[T]
  }

  implicit class LiftExprOps[T](val x: T) extends AnyVal {
    def toExpr(implicit ev: Liftable[T]): Expr[T] = ev.toExpr(x)
  }

  implicit def NilIsLiftable: Liftable[Nil.type] = ???

  Nil.toExpr(NilIsLiftable)
  (Nil.toExpr: Expr[Nil.type])
  Nil.toExpr
}
-----
ScalaFile
  ScObject: Foo
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Foo')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n\n  ')
        ScClass: Expr
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(class)('class')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Expr')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: T
              PsiElement(identifier)('T')
            PsiElement(])(']')
          PrimaryConstructor
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            Parameters
              <empty list>
          ExtendsBlock
            <empty list>
        PsiWhiteSpace('\n\n  ')
        ScClass: Liftable
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(abstract)('abstract')
          PsiWhiteSpace(' ')
          PsiElement(class)('class')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Liftable')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: T
              PsiElement(identifier)('T')
            PsiElement(])(']')
          PrimaryConstructor
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            Parameters
              <empty list>
          PsiWhiteSpace(' ')
          ExtendsBlock
            ScTemplateBody
              PsiElement({)('{')
              PsiWhiteSpace('\n    ')
              ScFunctionDeclaration: toExpr
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(def)('def')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('toExpr')
                Parameters
                  ParametersClause
                    PsiElement(()('(')
                    Parameter: x
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(identifier)('x')
                      PsiElement(:)(':')
                      PsiWhiteSpace(' ')
                      ParameterType
                        SimpleType: T
                          CodeReferenceElement: T
                            PsiElement(identifier)('T')
                    PsiElement())(')')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParametrizedType: Expr[T]
                  SimpleType: Expr
                    CodeReferenceElement: Expr
                      PsiElement(identifier)('Expr')
                  TypeArgumentsList
                    PsiElement([)('[')
                    SimpleType: T
                      CodeReferenceElement: T
                        PsiElement(identifier)('T')
                    PsiElement(])(']')
              PsiWhiteSpace('\n  ')
              PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        ScClass: LiftExprOps
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(implicit)('implicit')
          PsiWhiteSpace(' ')
          PsiElement(class)('class')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('LiftExprOps')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: T
              PsiElement(identifier)('T')
            PsiElement(])(']')
          PrimaryConstructor
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            Parameters
              ParametersClause
                PsiElement(()('(')
                ClassParameter: x
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(val)('val')
                  PsiWhiteSpace(' ')
                  PsiElement(identifier)('x')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    SimpleType: T
                      CodeReferenceElement: T
                        PsiElement(identifier)('T')
                PsiElement())(')')
          PsiWhiteSpace(' ')
          ExtendsBlock
            PsiElement(extends)('extends')
            PsiWhiteSpace(' ')
            TemplateParents
              ConstructorInvocation
                SimpleType: AnyVal
                  CodeReferenceElement: AnyVal
                    PsiElement(identifier)('AnyVal')
            PsiWhiteSpace(' ')
            ScTemplateBody
              PsiElement({)('{')
              PsiWhiteSpace('\n    ')
              ScFunctionDefinition: toExpr
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(def)('def')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('toExpr')
                Parameters
                  ParametersClause
                    PsiElement(()('(')
                    PsiElement(implicit)('implicit')
                    PsiWhiteSpace(' ')
                    Parameter: ev
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(identifier)('ev')
                      PsiElement(:)(':')
                      PsiWhiteSpace(' ')
                      ParameterType
                        ParametrizedType: Liftable[T]
                          SimpleType: Liftable
                            CodeReferenceElement: Liftable
                              PsiElement(identifier)('Liftable')
                          TypeArgumentsList
                            PsiElement([)('[')
                            SimpleType: T
                              CodeReferenceElement: T
                                PsiElement(identifier)('T')
                            PsiElement(])(']')
                    PsiElement())(')')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParametrizedType: Expr[T]
                  SimpleType: Expr
                    CodeReferenceElement: Expr
                      PsiElement(identifier)('Expr')
                  TypeArgumentsList
                    PsiElement([)('[')
                    SimpleType: T
                      CodeReferenceElement: T
                        PsiElement(identifier)('T')
                    PsiElement(])(']')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                MethodCall
                  ReferenceExpression: ev.toExpr
                    ReferenceExpression: ev
                      PsiElement(identifier)('ev')
                    PsiElement(.)('.')
                    PsiElement(identifier)('toExpr')
                  ArgumentList
                    PsiElement(()('(')
                    ReferenceExpression: x
                      PsiElement(identifier)('x')
                    PsiElement())(')')
              PsiWhiteSpace('\n  ')
              PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: NilIsLiftable
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(implicit)('implicit')
          PsiWhiteSpace(' ')
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('NilIsLiftable')
          Parameters
            <empty list>
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: Liftable[Nil.type]
            SimpleType: Liftable
              CodeReferenceElement: Liftable
                PsiElement(identifier)('Liftable')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: Nil.type
                CodeReferenceElement: Nil
                  PsiElement(identifier)('Nil')
                PsiElement(.)('.')
                PsiElement(type)('type')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: ???
            PsiElement(identifier)('???')
        PsiWhiteSpace('\n\n  ')
        MethodCall
          ReferenceExpression: Nil.toExpr
            ReferenceExpression: Nil
              PsiElement(identifier)('Nil')
            PsiElement(.)('.')
            PsiElement(identifier)('toExpr')
          ArgumentList
            PsiElement(()('(')
            ReferenceExpression: NilIsLiftable
              PsiElement(identifier)('NilIsLiftable')
            PsiElement())(')')
        PsiWhiteSpace('\n  ')
        ExpressionInParenthesis
          PsiElement(()('(')
          TypedExpression
            ReferenceExpression: Nil.toExpr
              ReferenceExpression: Nil
                PsiElement(identifier)('Nil')
              PsiElement(.)('.')
              PsiElement(identifier)('toExpr')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            ParametrizedType: Expr[Nil.type]
              SimpleType: Expr
                CodeReferenceElement: Expr
                  PsiElement(identifier)('Expr')
              TypeArgumentsList
                PsiElement([)('[')
                SimpleType: Nil.type
                  CodeReferenceElement: Nil
                    PsiElement(identifier)('Nil')
                  PsiElement(.)('.')
                  PsiElement(type)('type')
                PsiElement(])(']')
          PsiElement())(')')
        PsiWhiteSpace('\n  ')
        ReferenceExpression: Nil.toExpr
          ReferenceExpression: Nil
            PsiElement(identifier)('Nil')
          PsiElement(.)('.')
          PsiElement(identifier)('toExpr')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
