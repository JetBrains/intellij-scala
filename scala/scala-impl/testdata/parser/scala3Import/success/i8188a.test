object Test {
  extension (tree: String) {
    def show(using DummyImplicit): String = ???
    def show(color: Boolean)(using DummyImplicit): String = ???
  }

  val a: String = "foo".show
  val b: String = "foo".show(true)
  val c: Any = "foo".show
  val d: Any = "foo".show(true)
}
-----
ScalaFile
  ScObject: Test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        Extension on String
          PsiElement(extension)('extension')
          PsiWhiteSpace(' ')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: tree
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('tree')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: String
                    CodeReferenceElement: String
                      PsiElement(identifier)('String')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          ScExtensionBody
            PsiElement({)('{')
            PsiWhiteSpace('\n    ')
            ScFunctionDefinition: show
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(def)('def')
              PsiWhiteSpace(' ')
              PsiElement(identifier)('show')
              Parameters
                ParametersClause
                  PsiElement(()('(')
                  PsiElement(using)('using')
                  PsiWhiteSpace(' ')
                  Parameter: <anonymous>
                    ParameterType
                      SimpleType: DummyImplicit
                        CodeReferenceElement: DummyImplicit
                          PsiElement(identifier)('DummyImplicit')
                  PsiElement())(')')
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              SimpleType: String
                CodeReferenceElement: String
                  PsiElement(identifier)('String')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              ReferenceExpression: ???
                PsiElement(identifier)('???')
            PsiWhiteSpace('\n    ')
            ScFunctionDefinition: show
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(def)('def')
              PsiWhiteSpace(' ')
              PsiElement(identifier)('show')
              Parameters
                ParametersClause
                  PsiElement(()('(')
                  Parameter: color
                    AnnotationsList
                      <empty list>
                    Modifiers
                      <empty list>
                    PsiElement(identifier)('color')
                    PsiElement(:)(':')
                    PsiWhiteSpace(' ')
                    ParameterType
                      SimpleType: Boolean
                        CodeReferenceElement: Boolean
                          PsiElement(identifier)('Boolean')
                  PsiElement())(')')
                ParametersClause
                  PsiElement(()('(')
                  PsiElement(using)('using')
                  PsiWhiteSpace(' ')
                  Parameter: <anonymous>
                    ParameterType
                      SimpleType: DummyImplicit
                        CodeReferenceElement: DummyImplicit
                          PsiElement(identifier)('DummyImplicit')
                  PsiElement())(')')
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              SimpleType: String
                CodeReferenceElement: String
                  PsiElement(identifier)('String')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              ReferenceExpression: ???
                PsiElement(identifier)('???')
            PsiWhiteSpace('\n  ')
            PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        ScPatternDefinition: a
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: a
              PsiElement(identifier)('a')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: String
            CodeReferenceElement: String
              PsiElement(identifier)('String')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: "foo".show
            StringLiteral
              PsiElement(string content)('"foo"')
            PsiElement(.)('.')
            PsiElement(identifier)('show')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: b
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: b
              PsiElement(identifier)('b')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: String
            CodeReferenceElement: String
              PsiElement(identifier)('String')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: "foo".show
              StringLiteral
                PsiElement(string content)('"foo"')
              PsiElement(.)('.')
              PsiElement(identifier)('show')
            ArgumentList
              PsiElement(()('(')
              BooleanLiteral
                PsiElement(true)('true')
              PsiElement())(')')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: c
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: c
              PsiElement(identifier)('c')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Any
            CodeReferenceElement: Any
              PsiElement(identifier)('Any')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: "foo".show
            StringLiteral
              PsiElement(string content)('"foo"')
            PsiElement(.)('.')
            PsiElement(identifier)('show')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: d
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: d
              PsiElement(identifier)('d')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Any
            CodeReferenceElement: Any
              PsiElement(identifier)('Any')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: "foo".show
              StringLiteral
                PsiElement(string content)('"foo"')
              PsiElement(.)('.')
              PsiElement(identifier)('show')
            ArgumentList
              PsiElement(()('(')
              BooleanLiteral
                PsiElement(true)('true')
              PsiElement())(')')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
