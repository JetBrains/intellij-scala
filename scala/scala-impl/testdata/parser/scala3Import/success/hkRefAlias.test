class Bar
class X
class Y extends X

object Test {
  type G[X] = Bar { type R = X }

  implicitly[G[_] =:= (Bar { type R })]
  implicitly[G[_ >: Y <: X] =:= (Bar { type R >: Y <: X })]
}
-----
ScalaFile
  ScClass: Bar
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Bar')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    ExtendsBlock
      <empty list>
  PsiWhiteSpace('\n')
  ScClass: X
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('X')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    ExtendsBlock
      <empty list>
  PsiWhiteSpace('\n')
  ScClass: Y
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Y')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          SimpleType: X
            CodeReferenceElement: X
              PsiElement(identifier)('X')
  PsiWhiteSpace('\n\n')
  ScObject: Test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScTypeAliasDefinition: G
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('G')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: X
              PsiElement(identifier)('X')
            PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          CompoundType: Bar { type R = X }
            SimpleType: Bar
              CodeReferenceElement: Bar
                PsiElement(identifier)('Bar')
            PsiWhiteSpace(' ')
            Refinement
              PsiElement({)('{')
              PsiWhiteSpace(' ')
              ScTypeAliasDefinition: R
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(type)('type')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('R')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                SimpleType: X
                  CodeReferenceElement: X
                    PsiElement(identifier)('X')
              PsiWhiteSpace(' ')
              PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        GenericCall
          ReferenceExpression: implicitly
            PsiElement(identifier)('implicitly')
          TypeArgumentsList
            PsiElement([)('[')
            InfixType: G[_] =:= (Bar { type R })
              ParametrizedType: G[_]
                SimpleType: G
                  CodeReferenceElement: G
                    PsiElement(identifier)('G')
                TypeArgumentsList
                  PsiElement([)('[')
                  WildcardType: _
                    PsiElement(_)('_')
                  PsiElement(])(']')
              PsiWhiteSpace(' ')
              CodeReferenceElement: =:=
                PsiElement(identifier)('=:=')
              PsiWhiteSpace(' ')
              TypeInParenthesis: (Bar { type R })
                PsiElement(()('(')
                CompoundType: Bar { type R }
                  SimpleType: Bar
                    CodeReferenceElement: Bar
                      PsiElement(identifier)('Bar')
                  PsiWhiteSpace(' ')
                  Refinement
                    PsiElement({)('{')
                    PsiWhiteSpace(' ')
                    ScTypeAliasDeclaration: R
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(type)('type')
                      PsiWhiteSpace(' ')
                      PsiElement(identifier)('R')
                    PsiWhiteSpace(' ')
                    PsiElement(})('}')
                PsiElement())(')')
            PsiElement(])(']')
        PsiWhiteSpace('\n  ')
        GenericCall
          ReferenceExpression: implicitly
            PsiElement(identifier)('implicitly')
          TypeArgumentsList
            PsiElement([)('[')
            InfixType: G[_ >: Y <: X] =:= (Bar { type R >: Y <: X })
              ParametrizedType: G[_ >: Y <: X]
                SimpleType: G
                  CodeReferenceElement: G
                    PsiElement(identifier)('G')
                TypeArgumentsList
                  PsiElement([)('[')
                  WildcardType: _ >: Y <: X
                    PsiElement(_)('_')
                    PsiWhiteSpace(' ')
                    PsiElement(>:)('>:')
                    PsiWhiteSpace(' ')
                    SimpleType: Y
                      CodeReferenceElement: Y
                        PsiElement(identifier)('Y')
                    PsiWhiteSpace(' ')
                    PsiElement(<:)('<:')
                    PsiWhiteSpace(' ')
                    SimpleType: X
                      CodeReferenceElement: X
                        PsiElement(identifier)('X')
                  PsiElement(])(']')
              PsiWhiteSpace(' ')
              CodeReferenceElement: =:=
                PsiElement(identifier)('=:=')
              PsiWhiteSpace(' ')
              TypeInParenthesis: (Bar { type R >: Y <: X })
                PsiElement(()('(')
                CompoundType: Bar { type R >: Y <: X }
                  SimpleType: Bar
                    CodeReferenceElement: Bar
                      PsiElement(identifier)('Bar')
                  PsiWhiteSpace(' ')
                  Refinement
                    PsiElement({)('{')
                    PsiWhiteSpace(' ')
                    ScTypeAliasDeclaration: R
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(type)('type')
                      PsiWhiteSpace(' ')
                      PsiElement(identifier)('R')
                      PsiWhiteSpace(' ')
                      PsiElement(>:)('>:')
                      PsiWhiteSpace(' ')
                      SimpleType: Y
                        CodeReferenceElement: Y
                          PsiElement(identifier)('Y')
                      PsiWhiteSpace(' ')
                      PsiElement(<:)('<:')
                      PsiWhiteSpace(' ')
                      SimpleType: X
                        CodeReferenceElement: X
                          PsiElement(identifier)('X')
                    PsiWhiteSpace(' ')
                    PsiElement(})('}')
                PsiElement())(')')
            PsiElement(])(']')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
