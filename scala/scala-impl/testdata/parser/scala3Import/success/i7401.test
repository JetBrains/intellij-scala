object Test {
  extension (a: Int) {
    def foo(i: Int): Unit = ()
    def foo: Unit = ()
  }
  val x: Int = 5
  x.foo(4)
  x.foo
  Test.foo(x)(4)
  foo(x)
}
-----
ScalaFile
  ScObject: Test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        Extension on Int
          PsiElement(extension)('extension')
          PsiWhiteSpace(' ')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: a
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('a')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Int
                    CodeReferenceElement: Int
                      PsiElement(identifier)('Int')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          ScExtensionBody
            PsiElement({)('{')
            PsiWhiteSpace('\n    ')
            ScFunctionDefinition: foo
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(def)('def')
              PsiWhiteSpace(' ')
              PsiElement(identifier)('foo')
              Parameters
                ParametersClause
                  PsiElement(()('(')
                  Parameter: i
                    AnnotationsList
                      <empty list>
                    Modifiers
                      <empty list>
                    PsiElement(identifier)('i')
                    PsiElement(:)(':')
                    PsiWhiteSpace(' ')
                    ParameterType
                      SimpleType: Int
                        CodeReferenceElement: Int
                          PsiElement(identifier)('Int')
                  PsiElement())(')')
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              SimpleType: Unit
                CodeReferenceElement: Unit
                  PsiElement(identifier)('Unit')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              UnitExpression
                PsiElement(()('(')
                PsiElement())(')')
            PsiWhiteSpace('\n    ')
            ScFunctionDefinition: foo
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(def)('def')
              PsiWhiteSpace(' ')
              PsiElement(identifier)('foo')
              Parameters
                <empty list>
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              SimpleType: Unit
                CodeReferenceElement: Unit
                  PsiElement(identifier)('Unit')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              UnitExpression
                PsiElement(()('(')
                PsiElement())(')')
            PsiWhiteSpace('\n  ')
            PsiElement(})('}')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: x
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: x
              PsiElement(identifier)('x')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Int
            CodeReferenceElement: Int
              PsiElement(identifier)('Int')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          IntegerLiteral
            PsiElement(integer)('5')
        PsiWhiteSpace('\n  ')
        MethodCall
          ReferenceExpression: x.foo
            ReferenceExpression: x
              PsiElement(identifier)('x')
            PsiElement(.)('.')
            PsiElement(identifier)('foo')
          ArgumentList
            PsiElement(()('(')
            IntegerLiteral
              PsiElement(integer)('4')
            PsiElement())(')')
        PsiWhiteSpace('\n  ')
        ReferenceExpression: x.foo
          ReferenceExpression: x
            PsiElement(identifier)('x')
          PsiElement(.)('.')
          PsiElement(identifier)('foo')
        PsiWhiteSpace('\n  ')
        MethodCall
          MethodCall
            ReferenceExpression: Test.foo
              ReferenceExpression: Test
                PsiElement(identifier)('Test')
              PsiElement(.)('.')
              PsiElement(identifier)('foo')
            ArgumentList
              PsiElement(()('(')
              ReferenceExpression: x
                PsiElement(identifier)('x')
              PsiElement())(')')
          ArgumentList
            PsiElement(()('(')
            IntegerLiteral
              PsiElement(integer)('4')
            PsiElement())(')')
        PsiWhiteSpace('\n  ')
        MethodCall
          ReferenceExpression: foo
            PsiElement(identifier)('foo')
          ArgumentList
            PsiElement(()('(')
            ReferenceExpression: x
              PsiElement(identifier)('x')
            PsiElement())(')')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
