trait Semigroup[A] {
  extension (x: A) def combine(y: A): A
}
given Semigroup[Int] = ???
given [A, B](using Semigroup[A], Semigroup[B]): Semigroup[(A, B)]  = ???
object Test extends App {
  ((1, 1)) combine ((2, 2)) // doesn't compile
  ((1, 1): (Int, Int)) combine (2, 2) // compiles
  //the error that compiler spat out was "value combine is not a member of ((Int, Int)) => (Int, Int)". what's
}
-----
ScalaFile
  ScTrait: Semigroup
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Semigroup')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: A
        PsiElement(identifier)('A')
      PsiElement(])(']')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        Extension on A
          PsiElement(extension)('extension')
          PsiWhiteSpace(' ')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: x
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: A
                    CodeReferenceElement: A
                      PsiElement(identifier)('A')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          ScExtensionBody
            ScFunctionDeclaration: combine
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(def)('def')
              PsiWhiteSpace(' ')
              PsiElement(identifier)('combine')
              Parameters
                ParametersClause
                  PsiElement(()('(')
                  Parameter: y
                    AnnotationsList
                      <empty list>
                    Modifiers
                      <empty list>
                    PsiElement(identifier)('y')
                    PsiElement(:)(':')
                    PsiWhiteSpace(' ')
                    ParameterType
                      SimpleType: A
                        CodeReferenceElement: A
                          PsiElement(identifier)('A')
                  PsiElement())(')')
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              SimpleType: A
                CodeReferenceElement: A
                  PsiElement(identifier)('A')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n')
  ScGivenAliasDefinition: given_Semigroup_Int
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(given)('given')
    PsiWhiteSpace(' ')
    ParametrizedType: Semigroup[Int]
      SimpleType: Semigroup
        CodeReferenceElement: Semigroup
          PsiElement(identifier)('Semigroup')
      TypeArgumentsList
        PsiElement([)('[')
        SimpleType: Int
          CodeReferenceElement: Int
            PsiElement(identifier)('Int')
        PsiElement(])(']')
    Parameters
      <empty list>
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    ReferenceExpression: ???
      PsiElement(identifier)('???')
  PsiWhiteSpace('\n')
  ScGivenAliasDefinition: given_Semigroup_A_B
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(given)('given')
    PsiWhiteSpace(' ')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: A
        PsiElement(identifier)('A')
      PsiElement(,)(',')
      PsiWhiteSpace(' ')
      TypeParameter: B
        PsiElement(identifier)('B')
      PsiElement(])(']')
    Parameters
      ParametersClause
        PsiElement(()('(')
        PsiElement(using)('using')
        PsiWhiteSpace(' ')
        Parameter: <anonymous>
          ParameterType
            ParametrizedType: Semigroup[A]
              SimpleType: Semigroup
                CodeReferenceElement: Semigroup
                  PsiElement(identifier)('Semigroup')
              TypeArgumentsList
                PsiElement([)('[')
                SimpleType: A
                  CodeReferenceElement: A
                    PsiElement(identifier)('A')
                PsiElement(])(']')
        PsiElement(,)(',')
        PsiWhiteSpace(' ')
        Parameter: <anonymous>
          ParameterType
            ParametrizedType: Semigroup[B]
              SimpleType: Semigroup
                CodeReferenceElement: Semigroup
                  PsiElement(identifier)('Semigroup')
              TypeArgumentsList
                PsiElement([)('[')
                SimpleType: B
                  CodeReferenceElement: B
                    PsiElement(identifier)('B')
                PsiElement(])(']')
        PsiElement())(')')
    PsiElement(:)(':')
    PsiWhiteSpace(' ')
    ParametrizedType: Semigroup[(A, B)]
      SimpleType: Semigroup
        CodeReferenceElement: Semigroup
          PsiElement(identifier)('Semigroup')
      TypeArgumentsList
        PsiElement([)('[')
        TupleType: (A, B)
          PsiElement(()('(')
          TypesList
            SimpleType: A
              CodeReferenceElement: A
                PsiElement(identifier)('A')
            PsiElement(,)(',')
            PsiWhiteSpace(' ')
            SimpleType: B
              CodeReferenceElement: B
                PsiElement(identifier)('B')
          PsiElement())(')')
        PsiElement(])(']')
    PsiWhiteSpace('  ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    ReferenceExpression: ???
      PsiElement(identifier)('???')
  PsiWhiteSpace('\n')
  ScObject: Test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test')
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          SimpleType: App
            CodeReferenceElement: App
              PsiElement(identifier)('App')
      PsiWhiteSpace(' ')
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        InfixExpression
          ExpressionInParenthesis
            PsiElement(()('(')
            Tuple
              PsiElement(()('(')
              IntegerLiteral
                PsiElement(integer)('1')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              IntegerLiteral
                PsiElement(integer)('1')
              PsiElement())(')')
            PsiElement())(')')
          PsiWhiteSpace(' ')
          ReferenceExpression: combine
            PsiElement(identifier)('combine')
          PsiWhiteSpace(' ')
          ExpressionInParenthesis
            PsiElement(()('(')
            Tuple
              PsiElement(()('(')
              IntegerLiteral
                PsiElement(integer)('2')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              IntegerLiteral
                PsiElement(integer)('2')
              PsiElement())(')')
            PsiElement())(')')
        PsiWhiteSpace(' ')
        PsiComment(comment)('// doesn't compile')
        PsiWhiteSpace('\n  ')
        InfixExpression
          ExpressionInParenthesis
            PsiElement(()('(')
            TypedExpression
              Tuple
                PsiElement(()('(')
                IntegerLiteral
                  PsiElement(integer)('1')
                PsiElement(,)(',')
                PsiWhiteSpace(' ')
                IntegerLiteral
                  PsiElement(integer)('1')
                PsiElement())(')')
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              TupleType: (Int, Int)
                PsiElement(()('(')
                TypesList
                  SimpleType: Int
                    CodeReferenceElement: Int
                      PsiElement(identifier)('Int')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  SimpleType: Int
                    CodeReferenceElement: Int
                      PsiElement(identifier)('Int')
                PsiElement())(')')
            PsiElement())(')')
          PsiWhiteSpace(' ')
          ReferenceExpression: combine
            PsiElement(identifier)('combine')
          PsiWhiteSpace(' ')
          Tuple
            PsiElement(()('(')
            IntegerLiteral
              PsiElement(integer)('2')
            PsiElement(,)(',')
            PsiWhiteSpace(' ')
            IntegerLiteral
              PsiElement(integer)('2')
            PsiElement())(')')
        PsiWhiteSpace(' ')
        PsiComment(comment)('// compiles')
        PsiWhiteSpace('\n  ')
        PsiComment(comment)('//the error that compiler spat out was "value combine is not a member of ((Int, Int)) => (Int, Int)". what's')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
