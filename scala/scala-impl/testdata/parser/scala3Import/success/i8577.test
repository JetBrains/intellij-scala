package i8577

type A; given A: A = ???;
type B; given B: B = ???;
type C; given C: C = ???;
type D; given D: D = ???;
type E; given E: E = ???;
type F; given F: F = ???;


object Macro:
  opaque type StrCtx = StringContext
  def apply(ctx: StringContext): StrCtx = ctx
  def unapply(ctx: StrCtx): Option[StringContext] = Some(ctx)

def main: Unit =
  extension (ctx: StringContext) def mac: Macro.StrCtx = Macro(ctx)
  extension [T] (using A)(inline ctx: Macro.StrCtx)(using B) inline def unapplySeq[U](using C)(inline input: T)(using D)(using F): Option[Seq[T]] = ???

  (??? : Int) match
    case mac"${x}" => 1
-----
ScalaFile
  ScPackaging
    PsiElement(package)('package')
    PsiWhiteSpace(' ')
    CodeReferenceElement: i8577
      PsiElement(identifier)('i8577')
    PsiWhiteSpace('\n\n')
    ScTypeAliasDeclaration: A
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      PsiElement(type)('type')
      PsiWhiteSpace(' ')
      PsiElement(identifier)('A')
    PsiElement(;)(';')
    PsiWhiteSpace(' ')
    ScGivenAliasDefinition: A
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      PsiElement(given)('given')
      PsiWhiteSpace(' ')
      PsiElement(identifier)('A')
      Parameters
        <empty list>
      PsiElement(:)(':')
      PsiWhiteSpace(' ')
      SimpleType: A
        CodeReferenceElement: A
          PsiElement(identifier)('A')
      PsiWhiteSpace(' ')
      PsiElement(=)('=')
      PsiWhiteSpace(' ')
      ReferenceExpression: ???
        PsiElement(identifier)('???')
    PsiElement(;)(';')
    PsiWhiteSpace('\n')
    ScTypeAliasDeclaration: B
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      PsiElement(type)('type')
      PsiWhiteSpace(' ')
      PsiElement(identifier)('B')
    PsiElement(;)(';')
    PsiWhiteSpace(' ')
    ScGivenAliasDefinition: B
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      PsiElement(given)('given')
      PsiWhiteSpace(' ')
      PsiElement(identifier)('B')
      Parameters
        <empty list>
      PsiElement(:)(':')
      PsiWhiteSpace(' ')
      SimpleType: B
        CodeReferenceElement: B
          PsiElement(identifier)('B')
      PsiWhiteSpace(' ')
      PsiElement(=)('=')
      PsiWhiteSpace(' ')
      ReferenceExpression: ???
        PsiElement(identifier)('???')
    PsiElement(;)(';')
    PsiWhiteSpace('\n')
    ScTypeAliasDeclaration: C
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      PsiElement(type)('type')
      PsiWhiteSpace(' ')
      PsiElement(identifier)('C')
    PsiElement(;)(';')
    PsiWhiteSpace(' ')
    ScGivenAliasDefinition: C
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      PsiElement(given)('given')
      PsiWhiteSpace(' ')
      PsiElement(identifier)('C')
      Parameters
        <empty list>
      PsiElement(:)(':')
      PsiWhiteSpace(' ')
      SimpleType: C
        CodeReferenceElement: C
          PsiElement(identifier)('C')
      PsiWhiteSpace(' ')
      PsiElement(=)('=')
      PsiWhiteSpace(' ')
      ReferenceExpression: ???
        PsiElement(identifier)('???')
    PsiElement(;)(';')
    PsiWhiteSpace('\n')
    ScTypeAliasDeclaration: D
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      PsiElement(type)('type')
      PsiWhiteSpace(' ')
      PsiElement(identifier)('D')
    PsiElement(;)(';')
    PsiWhiteSpace(' ')
    ScGivenAliasDefinition: D
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      PsiElement(given)('given')
      PsiWhiteSpace(' ')
      PsiElement(identifier)('D')
      Parameters
        <empty list>
      PsiElement(:)(':')
      PsiWhiteSpace(' ')
      SimpleType: D
        CodeReferenceElement: D
          PsiElement(identifier)('D')
      PsiWhiteSpace(' ')
      PsiElement(=)('=')
      PsiWhiteSpace(' ')
      ReferenceExpression: ???
        PsiElement(identifier)('???')
    PsiElement(;)(';')
    PsiWhiteSpace('\n')
    ScTypeAliasDeclaration: E
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      PsiElement(type)('type')
      PsiWhiteSpace(' ')
      PsiElement(identifier)('E')
    PsiElement(;)(';')
    PsiWhiteSpace(' ')
    ScGivenAliasDefinition: E
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      PsiElement(given)('given')
      PsiWhiteSpace(' ')
      PsiElement(identifier)('E')
      Parameters
        <empty list>
      PsiElement(:)(':')
      PsiWhiteSpace(' ')
      SimpleType: E
        CodeReferenceElement: E
          PsiElement(identifier)('E')
      PsiWhiteSpace(' ')
      PsiElement(=)('=')
      PsiWhiteSpace(' ')
      ReferenceExpression: ???
        PsiElement(identifier)('???')
    PsiElement(;)(';')
    PsiWhiteSpace('\n')
    ScTypeAliasDeclaration: F
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      PsiElement(type)('type')
      PsiWhiteSpace(' ')
      PsiElement(identifier)('F')
    PsiElement(;)(';')
    PsiWhiteSpace(' ')
    ScGivenAliasDefinition: F
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      PsiElement(given)('given')
      PsiWhiteSpace(' ')
      PsiElement(identifier)('F')
      Parameters
        <empty list>
      PsiElement(:)(':')
      PsiWhiteSpace(' ')
      SimpleType: F
        CodeReferenceElement: F
          PsiElement(identifier)('F')
      PsiWhiteSpace(' ')
      PsiElement(=)('=')
      PsiWhiteSpace(' ')
      ReferenceExpression: ???
        PsiElement(identifier)('???')
    PsiElement(;)(';')
    PsiWhiteSpace('\n\n\n')
    ScObject: Macro
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      PsiElement(object)('object')
      PsiWhiteSpace(' ')
      PsiElement(identifier)('Macro')
      ExtendsBlock
        ScTemplateBody
          PsiElement(:)(':')
          PsiWhiteSpace('\n  ')
          ScTypeAliasDefinition: StrCtx
            AnnotationsList
              <empty list>
            Modifiers
              PsiElement(opaque)('opaque')
            PsiWhiteSpace(' ')
            PsiElement(type)('type')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('StrCtx')
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace(' ')
            SimpleType: StringContext
              CodeReferenceElement: StringContext
                PsiElement(identifier)('StringContext')
          PsiWhiteSpace('\n  ')
          ScFunctionDefinition: apply
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(def)('def')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('apply')
            Parameters
              ParametersClause
                PsiElement(()('(')
                Parameter: ctx
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(identifier)('ctx')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    SimpleType: StringContext
                      CodeReferenceElement: StringContext
                        PsiElement(identifier)('StringContext')
                PsiElement())(')')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            SimpleType: StrCtx
              CodeReferenceElement: StrCtx
                PsiElement(identifier)('StrCtx')
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace(' ')
            ReferenceExpression: ctx
              PsiElement(identifier)('ctx')
          PsiWhiteSpace('\n  ')
          ScFunctionDefinition: unapply
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(def)('def')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('unapply')
            Parameters
              ParametersClause
                PsiElement(()('(')
                Parameter: ctx
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(identifier)('ctx')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    SimpleType: StrCtx
                      CodeReferenceElement: StrCtx
                        PsiElement(identifier)('StrCtx')
                PsiElement())(')')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            ParametrizedType: Option[StringContext]
              SimpleType: Option
                CodeReferenceElement: Option
                  PsiElement(identifier)('Option')
              TypeArgumentsList
                PsiElement([)('[')
                SimpleType: StringContext
                  CodeReferenceElement: StringContext
                    PsiElement(identifier)('StringContext')
                PsiElement(])(']')
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace(' ')
            MethodCall
              ReferenceExpression: Some
                PsiElement(identifier)('Some')
              ArgumentList
                PsiElement(()('(')
                ReferenceExpression: ctx
                  PsiElement(identifier)('ctx')
                PsiElement())(')')
    PsiWhiteSpace('\n\n')
    ScFunctionDefinition: main
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      PsiElement(def)('def')
      PsiWhiteSpace(' ')
      PsiElement(identifier)('main')
      Parameters
        <empty list>
      PsiElement(:)(':')
      PsiWhiteSpace(' ')
      SimpleType: Unit
        CodeReferenceElement: Unit
          PsiElement(identifier)('Unit')
      PsiWhiteSpace(' ')
      PsiElement(=)('=')
      BlockExpression
        PsiWhiteSpace('\n  ')
        Extension on StringContext
          PsiElement(extension)('extension')
          PsiWhiteSpace(' ')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: ctx
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('ctx')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: StringContext
                    CodeReferenceElement: StringContext
                      PsiElement(identifier)('StringContext')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          ScExtensionBody
            ScFunctionDefinition: mac
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(def)('def')
              PsiWhiteSpace(' ')
              PsiElement(identifier)('mac')
              Parameters
                <empty list>
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              SimpleType: Macro.StrCtx
                CodeReferenceElement: Macro.StrCtx
                  CodeReferenceElement: Macro
                    PsiElement(identifier)('Macro')
                  PsiElement(.)('.')
                  PsiElement(identifier)('StrCtx')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              MethodCall
                ReferenceExpression: Macro
                  PsiElement(identifier)('Macro')
                ArgumentList
                  PsiElement(()('(')
                  ReferenceExpression: ctx
                    PsiElement(identifier)('ctx')
                  PsiElement())(')')
        PsiWhiteSpace('\n  ')
        Extension on Macro.StrCtx
          PsiElement(extension)('extension')
          PsiWhiteSpace(' ')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: T
              PsiElement(identifier)('T')
            PsiElement(])(']')
          PsiWhiteSpace(' ')
          Parameters
            ParametersClause
              PsiElement(()('(')
              PsiElement(using)('using')
              PsiWhiteSpace(' ')
              Parameter: <anonymous>
                ParameterType
                  SimpleType: A
                    CodeReferenceElement: A
                      PsiElement(identifier)('A')
              PsiElement())(')')
            ParametersClause
              PsiElement(()('(')
              Parameter: ctx
                AnnotationsList
                  <empty list>
                Modifiers
                  PsiElement(inline)('inline')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('ctx')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Macro.StrCtx
                    CodeReferenceElement: Macro.StrCtx
                      CodeReferenceElement: Macro
                        PsiElement(identifier)('Macro')
                      PsiElement(.)('.')
                      PsiElement(identifier)('StrCtx')
              PsiElement())(')')
            ParametersClause
              PsiElement(()('(')
              PsiElement(using)('using')
              PsiWhiteSpace(' ')
              Parameter: <anonymous>
                ParameterType
                  SimpleType: B
                    CodeReferenceElement: B
                      PsiElement(identifier)('B')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          ScExtensionBody
            ScFunctionDefinition: unapplySeq
              AnnotationsList
                <empty list>
              Modifiers
                PsiElement(inline)('inline')
              PsiWhiteSpace(' ')
              PsiElement(def)('def')
              PsiWhiteSpace(' ')
              PsiElement(identifier)('unapplySeq')
              TypeParameterClause
                PsiElement([)('[')
                TypeParameter: U
                  PsiElement(identifier)('U')
                PsiElement(])(']')
              Parameters
                ParametersClause
                  PsiElement(()('(')
                  PsiElement(using)('using')
                  PsiWhiteSpace(' ')
                  Parameter: <anonymous>
                    ParameterType
                      SimpleType: C
                        CodeReferenceElement: C
                          PsiElement(identifier)('C')
                  PsiElement())(')')
                ParametersClause
                  PsiElement(()('(')
                  Parameter: input
                    AnnotationsList
                      <empty list>
                    Modifiers
                      PsiElement(inline)('inline')
                    PsiWhiteSpace(' ')
                    PsiElement(identifier)('input')
                    PsiElement(:)(':')
                    PsiWhiteSpace(' ')
                    ParameterType
                      SimpleType: T
                        CodeReferenceElement: T
                          PsiElement(identifier)('T')
                  PsiElement())(')')
                ParametersClause
                  PsiElement(()('(')
                  PsiElement(using)('using')
                  PsiWhiteSpace(' ')
                  Parameter: <anonymous>
                    ParameterType
                      SimpleType: D
                        CodeReferenceElement: D
                          PsiElement(identifier)('D')
                  PsiElement())(')')
                ParametersClause
                  PsiElement(()('(')
                  PsiElement(using)('using')
                  PsiWhiteSpace(' ')
                  Parameter: <anonymous>
                    ParameterType
                      SimpleType: F
                        CodeReferenceElement: F
                          PsiElement(identifier)('F')
                  PsiElement())(')')
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              ParametrizedType: Option[Seq[T]]
                SimpleType: Option
                  CodeReferenceElement: Option
                    PsiElement(identifier)('Option')
                TypeArgumentsList
                  PsiElement([)('[')
                  ParametrizedType: Seq[T]
                    SimpleType: Seq
                      CodeReferenceElement: Seq
                        PsiElement(identifier)('Seq')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: T
                        CodeReferenceElement: T
                          PsiElement(identifier)('T')
                      PsiElement(])(']')
                  PsiElement(])(']')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              ReferenceExpression: ???
                PsiElement(identifier)('???')
        PsiWhiteSpace('\n\n  ')
        MatchStatement
          ExpressionInParenthesis
            PsiElement(()('(')
            TypedExpression
              ReferenceExpression: ???
                PsiElement(identifier)('???')
              PsiWhiteSpace(' ')
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              SimpleType: Int
                CodeReferenceElement: Int
                  PsiElement(identifier)('Int')
            PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(match)('match')
          PsiWhiteSpace('\n    ')
          CaseClauses
            CaseClause
              PsiElement(case)('case')
              PsiWhiteSpace(' ')
              InterpolationPattern
                CodeReferenceElement (string interpolator): mac
                  PsiElement(interpolated string id)('mac')
                Pattern Argument List
                  PsiElement(interpolated string)('"')
                  PsiElement(interpolated string injection)('$')
                  PsiElement({)('{')
                  ReferencePattern: x
                    PsiElement(identifier)('x')
                  PsiElement(})('}')
                PsiElement(interpolated string end)('"')
              PsiWhiteSpace(' ')
              PsiElement(=>)('=>')
              PsiWhiteSpace(' ')
              BlockOfExpressions
                IntegerLiteral
                  PsiElement(integer)('1')
