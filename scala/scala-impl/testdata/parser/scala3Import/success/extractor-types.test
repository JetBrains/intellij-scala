package p1 {
  object Ex  { def unapply(p: Any): Option[_ <: Int] = null }
  object Foo { val Ex(_) = null }
}
// a.scala:2: error: error during expansion of this match (this is a scalac bug).
// The underlying error was: type mismatch;
//  found   : Some[_$1(in value x$1)] where type _$1(in value x$1)
//  required: Some[_$1(in method unapply)]
// object Foo { val Ex(_) = null }
//                    ^
// one error found

package p2 {
  trait Other {
    class Quux
    object Baz { def unapply(x: Any): Option[Quux] = None }
  }
  trait Reifiers {
    def f(): Unit = {
      val u2: Other = null
      (null: Any) match { case u2.Baz(x) => println(x) } //: u2.Quux) }
      // The underlying error was: type mismatch;
      //  found   : Other#Quux
      //  required: u2.Quux
      //     x match { case u2.Baz(x) => println(x: u2.Quux) }
      //       ^
      // one error found
    }
  }
}
-----
ScalaFile
  ScPackaging
    PsiElement(package)('package')
    PsiWhiteSpace(' ')
    CodeReferenceElement: p1
      PsiElement(identifier)('p1')
    PsiWhiteSpace(' ')
    PsiElement({)('{')
    PsiWhiteSpace('\n  ')
    ScObject: Ex
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      PsiElement(object)('object')
      PsiWhiteSpace(' ')
      PsiElement(identifier)('Ex')
      PsiWhiteSpace('  ')
      ExtendsBlock
        ScTemplateBody
          PsiElement({)('{')
          PsiWhiteSpace(' ')
          ScFunctionDefinition: unapply
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(def)('def')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('unapply')
            Parameters
              ParametersClause
                PsiElement(()('(')
                Parameter: p
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(identifier)('p')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    SimpleType: Any
                      CodeReferenceElement: Any
                        PsiElement(identifier)('Any')
                PsiElement())(')')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            ParametrizedType: Option[_ <: Int]
              SimpleType: Option
                CodeReferenceElement: Option
                  PsiElement(identifier)('Option')
              TypeArgumentsList
                PsiElement([)('[')
                WildcardType: _ <: Int
                  PsiElement(_)('_')
                  PsiWhiteSpace(' ')
                  PsiElement(<:)('<:')
                  PsiWhiteSpace(' ')
                  SimpleType: Int
                    CodeReferenceElement: Int
                      PsiElement(identifier)('Int')
                PsiElement(])(']')
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace(' ')
            NullLiteral
              PsiElement(null)('null')
          PsiWhiteSpace(' ')
          PsiElement(})('}')
    PsiWhiteSpace('\n  ')
    ScObject: Foo
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      PsiElement(object)('object')
      PsiWhiteSpace(' ')
      PsiElement(identifier)('Foo')
      PsiWhiteSpace(' ')
      ExtendsBlock
        ScTemplateBody
          PsiElement({)('{')
          PsiWhiteSpace(' ')
          ScPatternDefinition
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(val)('val')
            PsiWhiteSpace(' ')
            ListOfPatterns
              ConstructorPattern
                CodeReferenceElement: Ex
                  PsiElement(identifier)('Ex')
                Pattern Argument List
                  PsiElement(()('(')
                  WildcardPattern
                    PsiElement(_)('_')
                  PsiElement())(')')
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace(' ')
            NullLiteral
              PsiElement(null)('null')
          PsiWhiteSpace(' ')
          PsiElement(})('}')
    PsiWhiteSpace('\n')
    PsiElement(})('}')
  PsiWhiteSpace('\n')
  PsiComment(comment)('// a.scala:2: error: error during expansion of this match (this is a scalac bug).')
  PsiWhiteSpace('\n')
  PsiComment(comment)('// The underlying error was: type mismatch;')
  PsiWhiteSpace('\n')
  PsiComment(comment)('//  found   : Some[_$1(in value x$1)] where type _$1(in value x$1)')
  PsiWhiteSpace('\n')
  PsiComment(comment)('//  required: Some[_$1(in method unapply)]')
  PsiWhiteSpace('\n')
  PsiComment(comment)('// object Foo { val Ex(_) = null }')
  PsiWhiteSpace('\n')
  PsiComment(comment)('//                    ^')
  PsiWhiteSpace('\n')
  PsiComment(comment)('// one error found')
  PsiWhiteSpace('\n\n')
  ScPackaging
    PsiElement(package)('package')
    PsiWhiteSpace(' ')
    CodeReferenceElement: p2
      PsiElement(identifier)('p2')
    PsiWhiteSpace(' ')
    PsiElement({)('{')
    PsiWhiteSpace('\n  ')
    ScTrait: Other
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      PsiElement(trait)('trait')
      PsiWhiteSpace(' ')
      PsiElement(identifier)('Other')
      PsiWhiteSpace(' ')
      ExtendsBlock
        ScTemplateBody
          PsiElement({)('{')
          PsiWhiteSpace('\n    ')
          ScClass: Quux
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(class)('class')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('Quux')
            PrimaryConstructor
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              Parameters
                <empty list>
            ExtendsBlock
              <empty list>
          PsiWhiteSpace('\n    ')
          ScObject: Baz
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(object)('object')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('Baz')
            PsiWhiteSpace(' ')
            ExtendsBlock
              ScTemplateBody
                PsiElement({)('{')
                PsiWhiteSpace(' ')
                ScFunctionDefinition: unapply
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(def)('def')
                  PsiWhiteSpace(' ')
                  PsiElement(identifier)('unapply')
                  Parameters
                    ParametersClause
                      PsiElement(()('(')
                      Parameter: x
                        AnnotationsList
                          <empty list>
                        Modifiers
                          <empty list>
                        PsiElement(identifier)('x')
                        PsiElement(:)(':')
                        PsiWhiteSpace(' ')
                        ParameterType
                          SimpleType: Any
                            CodeReferenceElement: Any
                              PsiElement(identifier)('Any')
                      PsiElement())(')')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParametrizedType: Option[Quux]
                    SimpleType: Option
                      CodeReferenceElement: Option
                        PsiElement(identifier)('Option')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: Quux
                        CodeReferenceElement: Quux
                          PsiElement(identifier)('Quux')
                      PsiElement(])(']')
                  PsiWhiteSpace(' ')
                  PsiElement(=)('=')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: None
                    PsiElement(identifier)('None')
                PsiWhiteSpace(' ')
                PsiElement(})('}')
          PsiWhiteSpace('\n  ')
          PsiElement(})('}')
    PsiWhiteSpace('\n  ')
    ScTrait: Reifiers
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      PsiElement(trait)('trait')
      PsiWhiteSpace(' ')
      PsiElement(identifier)('Reifiers')
      PsiWhiteSpace(' ')
      ExtendsBlock
        ScTemplateBody
          PsiElement({)('{')
          PsiWhiteSpace('\n    ')
          ScFunctionDefinition: f
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(def)('def')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('f')
            Parameters
              ParametersClause
                PsiElement(()('(')
                PsiElement())(')')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            SimpleType: Unit
              CodeReferenceElement: Unit
                PsiElement(identifier)('Unit')
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace(' ')
            BlockExpression
              PsiElement({)('{')
              PsiWhiteSpace('\n      ')
              ScPatternDefinition: u2
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(val)('val')
                PsiWhiteSpace(' ')
                ListOfPatterns
                  ReferencePattern: u2
                    PsiElement(identifier)('u2')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                SimpleType: Other
                  CodeReferenceElement: Other
                    PsiElement(identifier)('Other')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                NullLiteral
                  PsiElement(null)('null')
              PsiWhiteSpace('\n      ')
              MatchStatement
                ExpressionInParenthesis
                  PsiElement(()('(')
                  TypedExpression
                    NullLiteral
                      PsiElement(null)('null')
                    PsiElement(:)(':')
                    PsiWhiteSpace(' ')
                    SimpleType: Any
                      CodeReferenceElement: Any
                        PsiElement(identifier)('Any')
                  PsiElement())(')')
                PsiWhiteSpace(' ')
                PsiElement(match)('match')
                PsiWhiteSpace(' ')
                PsiElement({)('{')
                PsiWhiteSpace(' ')
                CaseClauses
                  CaseClause
                    PsiElement(case)('case')
                    PsiWhiteSpace(' ')
                    ConstructorPattern
                      CodeReferenceElement: u2.Baz
                        CodeReferenceElement: u2
                          PsiElement(identifier)('u2')
                        PsiElement(.)('.')
                        PsiElement(identifier)('Baz')
                      Pattern Argument List
                        PsiElement(()('(')
                        ReferencePattern: x
                          PsiElement(identifier)('x')
                        PsiElement())(')')
                    PsiWhiteSpace(' ')
                    PsiElement(=>)('=>')
                    PsiWhiteSpace(' ')
                    BlockOfExpressions
                      MethodCall
                        ReferenceExpression: println
                          PsiElement(identifier)('println')
                        ArgumentList
                          PsiElement(()('(')
                          ReferenceExpression: x
                            PsiElement(identifier)('x')
                          PsiElement())(')')
                PsiWhiteSpace(' ')
                PsiElement(})('}')
              PsiWhiteSpace(' ')
              PsiComment(comment)('//: u2.Quux) }')
              PsiWhiteSpace('\n      ')
              PsiComment(comment)('// The underlying error was: type mismatch;')
              PsiWhiteSpace('\n      ')
              PsiComment(comment)('//  found   : Other#Quux')
              PsiWhiteSpace('\n      ')
              PsiComment(comment)('//  required: u2.Quux')
              PsiWhiteSpace('\n      ')
              PsiComment(comment)('//     x match { case u2.Baz(x) => println(x: u2.Quux) }')
              PsiWhiteSpace('\n      ')
              PsiComment(comment)('//       ^')
              PsiWhiteSpace('\n      ')
              PsiComment(comment)('// one error found')
              PsiWhiteSpace('\n    ')
              PsiElement(})('}')
          PsiWhiteSpace('\n  ')
          PsiElement(})('}')
    PsiWhiteSpace('\n')
    PsiElement(})('}')
