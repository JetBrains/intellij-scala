import annotation.StaticAnnotation
import collection.mutable

/** MainAnnotation provides the functionality for a compiler-generated main class.
 *  It links a compiler-generated main method (call it compiler-main) to a user
 *  written main method (user-main).
 *  The protocol of calls from compiler-main is as follows:
 *
 *    - create a `command` with the command line arguments,
 *    - for each parameter of user-main, a call to `command.argGetter`,
 *      or `command.argsGetter` if is a final varargs parameter,
 *    - a call to `command.run` with the closure of user-main applied to all arguments.
 */
trait MainAnnotation extends StaticAnnotation:

  /** The class used for argument string parsing. E.g. `scala.util.CommandLineParser.FromString`,
   *  but could be something else
   */
  type ArgumentParser[T]

  /** The required result type of the main function */
  type MainResultType

  /** A new command with arguments from `args` */
  def command(args: Array[String]): Command

  /** A class representing a command to run */
  abstract class Command:

    /** The getter for the next argument of type `T` */
    def argGetter[T](argName: String, fromString: ArgumentParser[T], defaultValue: Option[T] = None): () => T

    /** The getter for a final varargs argument of type `T*` */
    def argsGetter[T](argName: String, fromString: ArgumentParser[T]): () => Seq[T]

    /** Run `program` if all arguments are valid,
     *  or print usage information and/or error messages.
     */
    def run(program: => MainResultType, progName: String, docComment: String): Unit
  end Command
end MainAnnotation

//Sample main class, can be freely implemented:

class main extends MainAnnotation:

  type ArgumentParser[T] = util.CommandLineParser.FromString[T]
  type MainResultType = Any

  def command(args: Array[String]): Command = new Command:

    /** A buffer of demanded argument names, plus
     *   "?"  if it has a default
     *   "*"  if it is a vararg
     *   ""   otherwise
     */
    private var argInfos = new mutable.ListBuffer[(String, String)]

    /** A buffer for all errors */
    private var errors = new mutable.ListBuffer[String]

    /** Issue an error, and return an uncallable getter */
    private def error(msg: String): () => Nothing =
      errors += msg
      () => throw new AssertionError("trying to get invalid argument")

    /** The next argument index */
    private var argIdx: Int = 0

    private def argAt(idx: Int): Option[String] =
      if idx < args.length then Some(args(idx)) else None

    private def nextPositionalArg(): Option[String] =
      while argIdx < args.length && args(argIdx).startsWith("--") do argIdx += 2
      val result = argAt(argIdx)
      argIdx += 1
      result

    private def convert[T](argName: String, arg: String, p: ArgumentParser[T]): () => T =
      p.fromStringOption(arg) match
        case Some(t) => () => t
        case None => error(s"invalid argument for $argName: $arg")

    def argGetter[T](argName: String, p: ArgumentParser[T], defaultValue: Option[T] = None): () => T =
      argInfos += ((argName, if defaultValue.isDefined then "?" else ""))
      val idx = args.indexOf(s"--$argName")
      val argOpt = if idx >= 0 then argAt(idx + 1) else nextPositionalArg()
      argOpt match
        case Some(arg) => convert(argName, arg, p)
        case None => defaultValue match
          case Some(t) => () => t
          case None => error(s"missing argument for $argName")

    def argsGetter[T](argName: String, p: ArgumentParser[T]): () => Seq[T] =
      argInfos += ((argName, "*"))
      def remainingArgGetters(): List[() => T] = nextPositionalArg() match
        case Some(arg) => convert(arg, argName, p) :: remainingArgGetters()
        case None => Nil
      val getters = remainingArgGetters()
      () => getters.map(_())

    def run(f: => MainResultType, progName: String, docComment: String): Unit =
      def usage(): Unit =
        println(s"Usage: $progName ${argInfos.map(_ + _).mkString(" ")}")

      def explain(): Unit =
        if docComment.nonEmpty then println(docComment)  // todo: process & format doc comment

      def flagUnused(): Unit = nextPositionalArg() match
        case Some(arg) =>
          error(s"unused argument: $arg")
          flagUnused()
        case None =>
          for
            arg <- args
            if arg.startsWith("--") && !argInfos.map(_._1).contains(arg.drop(2))
          do
            error(s"unknown argument name: $arg")
      end flagUnused

      if args.isEmpty || args.contains("--help") then
        usage()
        explain()
      else
        flagUnused()
        if errors.nonEmpty then
          for msg <- errors do println(s"Error: $msg")
          usage()
        else f match
          case n: Int if n < 0 => System.exit(-n)
          case _ =>
    end run
  end command
end main

// Sample main method

object myProgram:

  /** Adds two numbers */
  @main def add(num: Int, inc: Int = 1): Unit =
    println(s"$num + $inc = ${num + inc}")

end myProgram

//  Compiler generated code:

object add extends main:
  def main(args: Array[String]) =
    val cmd = command(args)
    val arg1 = cmd.argGetter[Int]("num", summon[ArgumentParser[Int]])
    val arg2 = cmd.argGetter[Int]("inc", summon[ArgumentParser[Int]], Some(1))
    cmd.run(myProgram.add(arg1(), arg2()), "add", "Adds two numbers")
end add

/** --- Some scenarios +

> java add 2 3
2 + 3 = 5
> java add 4
4 + 1 = 5
> java add --num 10 --inc -2
10 + -2 = 8
> java add --num 10
10 + 1 = 11
> java add --help
Usage: add num inc?
Adds two numbers
> java add
Usage: add num inc?
Adds two numbers
> java add 1 2 3 4
Error: unused argument: 3
Error: unused argument: 4
Usage: add num inc?
> java add -n 1 -i 10
Error: invalid argument for num: -n
Error: unused argument: -i
Error: unused argument: 10
Usage: add num inc?
> java add --n 1 --i 10
Error: missing argument for num
Error: unknown argument name: --n
Error: unknown argument name: --i
Usage: add num inc?
> java add true 10
Error: invalid argument for num: true
Usage: add num inc?
> java add true false
Error: invalid argument for num: true
Error: invalid argument for inc: false
Usage: add num inc?
> java add true false 10
Error: invalid argument for num: true
Error: invalid argument for inc: false
Error: unused argument: 10
Usage: add num inc?
> java add --inc 10 --num 20
20 + 10 = 30
> java add binary 10 01
Error: invalid argument for num: binary
Error: unused argument: 01
Usage: add num inc?

*/
-----
ScalaFile
  ScImportStatement
    PsiElement(import)('import')
    PsiWhiteSpace(' ')
    ImportExpression
      CodeReferenceElement: annotation.StaticAnnotation
        CodeReferenceElement: annotation
          PsiElement(identifier)('annotation')
        PsiElement(.)('.')
        PsiElement(identifier)('StaticAnnotation')
  PsiWhiteSpace('\n')
  ScImportStatement
    PsiElement(import)('import')
    PsiWhiteSpace(' ')
    ImportExpression
      CodeReferenceElement: collection.mutable
        CodeReferenceElement: collection
          PsiElement(identifier)('collection')
        PsiElement(.)('.')
        PsiElement(identifier)('mutable')
  PsiWhiteSpace('\n\n')
  ScTrait: MainAnnotation
    DocComment
      ScPsiDocToken(DOC_COMMENT_START)('/**')
      ScDocParagraph
        ScPsiDocToken(DOC_WHITESPACE)(' ')
        ScPsiDocToken(DOC_COMMENT_DATA)('MainAnnotation provides the functionality for a compiler-generated main class.')
        ScPsiDocToken(DOC_WHITESPACE)('\n ')
        ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
        ScPsiDocToken(DOC_WHITESPACE)('  ')
        ScPsiDocToken(DOC_COMMENT_DATA)('It links a compiler-generated main method (call it compiler-main) to a user')
        ScPsiDocToken(DOC_WHITESPACE)('\n ')
        ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
        ScPsiDocToken(DOC_WHITESPACE)('  ')
        ScPsiDocToken(DOC_COMMENT_DATA)('written main method (user-main).')
        ScPsiDocToken(DOC_WHITESPACE)('\n ')
        ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
        ScPsiDocToken(DOC_WHITESPACE)('  ')
        ScPsiDocToken(DOC_COMMENT_DATA)('The protocol of calls from compiler-main is as follows:')
        ScPsiDocToken(DOC_WHITESPACE)('\n ')
        ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
        ScPsiDocToken(DOC_WHITESPACE)('\n ')
        ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
      ScDocList
        ScPsiDocToken(DOC_WHITESPACE)('    ')
        ScDocListItem
          ScPsiDocToken(DOC_LIST_ITEM_HEAD)('-')
          ScPsiDocToken(DOC_WHITESPACE)(' ')
          ScPsiDocToken(DOC_COMMENT_DATA)('create a ')
          DocSyntaxElement 8
            ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
            ScPsiDocToken(DOC_COMMENT_DATA)('command')
            ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
          ScPsiDocToken(DOC_COMMENT_DATA)(' with the command line arguments,')
          ScPsiDocToken(DOC_WHITESPACE)('\n ')
          ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
        ScPsiDocToken(DOC_WHITESPACE)('    ')
        ScDocListItem
          ScPsiDocToken(DOC_LIST_ITEM_HEAD)('-')
          ScPsiDocToken(DOC_WHITESPACE)(' ')
          ScPsiDocToken(DOC_COMMENT_DATA)('for each parameter of user-main, a call to ')
          DocSyntaxElement 8
            ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
            ScPsiDocToken(DOC_COMMENT_DATA)('command.argGetter')
            ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
          ScPsiDocToken(DOC_COMMENT_DATA)(',')
          ScPsiDocToken(DOC_WHITESPACE)('\n ')
          ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
          ScPsiDocToken(DOC_WHITESPACE)('      ')
          ScPsiDocToken(DOC_COMMENT_DATA)('or ')
          DocSyntaxElement 8
            ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
            ScPsiDocToken(DOC_COMMENT_DATA)('command.argsGetter')
            ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
          ScPsiDocToken(DOC_COMMENT_DATA)(' if is a final varargs parameter,')
          ScPsiDocToken(DOC_WHITESPACE)('\n ')
          ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
        ScPsiDocToken(DOC_WHITESPACE)('    ')
        ScDocListItem
          ScPsiDocToken(DOC_LIST_ITEM_HEAD)('-')
          ScPsiDocToken(DOC_WHITESPACE)(' ')
          ScPsiDocToken(DOC_COMMENT_DATA)('a call to ')
          DocSyntaxElement 8
            ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
            ScPsiDocToken(DOC_COMMENT_DATA)('command.run')
            ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
          ScPsiDocToken(DOC_COMMENT_DATA)(' with the closure of user-main applied to all arguments.')
          ScPsiDocToken(DOC_WHITESPACE)('\n ')
      ScPsiDocToken(DOC_COMMENT_END)('*/')
    PsiWhiteSpace('\n')
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('MainAnnotation')
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          SimpleType: StaticAnnotation
            CodeReferenceElement: StaticAnnotation
              PsiElement(identifier)('StaticAnnotation')
      ScTemplateBody
        PsiElement(:)(':')
        PsiWhiteSpace('\n\n  ')
        ScTypeAliasDeclaration: ArgumentParser
          DocComment
            ScPsiDocToken(DOC_COMMENT_START)('/**')
            ScDocParagraph
              ScPsiDocToken(DOC_WHITESPACE)(' ')
              ScPsiDocToken(DOC_COMMENT_DATA)('The class used for argument string parsing. E.g. ')
              DocSyntaxElement 8
                ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                ScPsiDocToken(DOC_COMMENT_DATA)('scala.util.CommandLineParser.FromString')
                ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
              ScPsiDocToken(DOC_COMMENT_DATA)(',')
              ScPsiDocToken(DOC_WHITESPACE)('\n   ')
              ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
              ScPsiDocToken(DOC_WHITESPACE)('  ')
              ScPsiDocToken(DOC_COMMENT_DATA)('but could be something else')
              ScPsiDocToken(DOC_WHITESPACE)('\n   ')
            ScPsiDocToken(DOC_COMMENT_END)('*/')
          PsiWhiteSpace('\n  ')
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('ArgumentParser')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: T
              PsiElement(identifier)('T')
            PsiElement(])(']')
        PsiWhiteSpace('\n\n  ')
        ScTypeAliasDeclaration: MainResultType
          DocComment
            ScPsiDocToken(DOC_COMMENT_START)('/**')
            ScDocParagraph
              ScPsiDocToken(DOC_WHITESPACE)(' ')
              ScPsiDocToken(DOC_COMMENT_DATA)('The required result type of the main function')
              ScPsiDocToken(DOC_WHITESPACE)(' ')
            ScPsiDocToken(DOC_COMMENT_END)('*/')
          PsiWhiteSpace('\n  ')
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('MainResultType')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDeclaration: command
          DocComment
            ScPsiDocToken(DOC_COMMENT_START)('/**')
            ScDocParagraph
              ScPsiDocToken(DOC_WHITESPACE)(' ')
              ScPsiDocToken(DOC_COMMENT_DATA)('A new command with arguments from ')
              DocSyntaxElement 8
                ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                ScPsiDocToken(DOC_COMMENT_DATA)('args')
                ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
              ScPsiDocToken(DOC_WHITESPACE)(' ')
            ScPsiDocToken(DOC_COMMENT_END)('*/')
          PsiWhiteSpace('\n  ')
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('command')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: args
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('args')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  ParametrizedType: Array[String]
                    SimpleType: Array
                      CodeReferenceElement: Array
                        PsiElement(identifier)('Array')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: String
                        CodeReferenceElement: String
                          PsiElement(identifier)('String')
                      PsiElement(])(']')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Command
            CodeReferenceElement: Command
              PsiElement(identifier)('Command')
        PsiWhiteSpace('\n\n  ')
        ScClass: Command
          DocComment
            ScPsiDocToken(DOC_COMMENT_START)('/**')
            ScDocParagraph
              ScPsiDocToken(DOC_WHITESPACE)(' ')
              ScPsiDocToken(DOC_COMMENT_DATA)('A class representing a command to run')
              ScPsiDocToken(DOC_WHITESPACE)(' ')
            ScPsiDocToken(DOC_COMMENT_END)('*/')
          PsiWhiteSpace('\n  ')
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(abstract)('abstract')
          PsiWhiteSpace(' ')
          PsiElement(class)('class')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Command')
          PrimaryConstructor
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            Parameters
              <empty list>
          ExtendsBlock
            ScTemplateBody
              PsiElement(:)(':')
              PsiWhiteSpace('\n\n    ')
              ScFunctionDeclaration: argGetter
                DocComment
                  ScPsiDocToken(DOC_COMMENT_START)('/**')
                  ScDocParagraph
                    ScPsiDocToken(DOC_WHITESPACE)(' ')
                    ScPsiDocToken(DOC_COMMENT_DATA)('The getter for the next argument of type ')
                    DocSyntaxElement 8
                      ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                      ScPsiDocToken(DOC_COMMENT_DATA)('T')
                      ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                    ScPsiDocToken(DOC_WHITESPACE)(' ')
                  ScPsiDocToken(DOC_COMMENT_END)('*/')
                PsiWhiteSpace('\n    ')
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(def)('def')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('argGetter')
                TypeParameterClause
                  PsiElement([)('[')
                  TypeParameter: T
                    PsiElement(identifier)('T')
                  PsiElement(])(']')
                Parameters
                  ParametersClause
                    PsiElement(()('(')
                    Parameter: argName
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(identifier)('argName')
                      PsiElement(:)(':')
                      PsiWhiteSpace(' ')
                      ParameterType
                        SimpleType: String
                          CodeReferenceElement: String
                            PsiElement(identifier)('String')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    Parameter: fromString
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(identifier)('fromString')
                      PsiElement(:)(':')
                      PsiWhiteSpace(' ')
                      ParameterType
                        ParametrizedType: ArgumentParser[T]
                          SimpleType: ArgumentParser
                            CodeReferenceElement: ArgumentParser
                              PsiElement(identifier)('ArgumentParser')
                          TypeArgumentsList
                            PsiElement([)('[')
                            SimpleType: T
                              CodeReferenceElement: T
                                PsiElement(identifier)('T')
                            PsiElement(])(']')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    Parameter: defaultValue
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(identifier)('defaultValue')
                      PsiElement(:)(':')
                      PsiWhiteSpace(' ')
                      ParameterType
                        ParametrizedType: Option[T]
                          SimpleType: Option
                            CodeReferenceElement: Option
                              PsiElement(identifier)('Option')
                          TypeArgumentsList
                            PsiElement([)('[')
                            SimpleType: T
                              CodeReferenceElement: T
                                PsiElement(identifier)('T')
                            PsiElement(])(']')
                      PsiWhiteSpace(' ')
                      PsiElement(=)('=')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: None
                        PsiElement(identifier)('None')
                    PsiElement())(')')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                FunctionalType: () => T
                  TypeInParenthesis: ()
                    PsiElement(()('(')
                    PsiElement())(')')
                  PsiWhiteSpace(' ')
                  PsiElement(=>)('=>')
                  PsiWhiteSpace(' ')
                  SimpleType: T
                    CodeReferenceElement: T
                      PsiElement(identifier)('T')
              PsiWhiteSpace('\n\n    ')
              ScFunctionDeclaration: argsGetter
                DocComment
                  ScPsiDocToken(DOC_COMMENT_START)('/**')
                  ScDocParagraph
                    ScPsiDocToken(DOC_WHITESPACE)(' ')
                    ScPsiDocToken(DOC_COMMENT_DATA)('The getter for a final varargs argument of type ')
                    DocSyntaxElement 8
                      ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                      ScPsiDocToken(DOC_COMMENT_DATA)('T*')
                      ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                    ScPsiDocToken(DOC_WHITESPACE)(' ')
                  ScPsiDocToken(DOC_COMMENT_END)('*/')
                PsiWhiteSpace('\n    ')
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(def)('def')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('argsGetter')
                TypeParameterClause
                  PsiElement([)('[')
                  TypeParameter: T
                    PsiElement(identifier)('T')
                  PsiElement(])(']')
                Parameters
                  ParametersClause
                    PsiElement(()('(')
                    Parameter: argName
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(identifier)('argName')
                      PsiElement(:)(':')
                      PsiWhiteSpace(' ')
                      ParameterType
                        SimpleType: String
                          CodeReferenceElement: String
                            PsiElement(identifier)('String')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    Parameter: fromString
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(identifier)('fromString')
                      PsiElement(:)(':')
                      PsiWhiteSpace(' ')
                      ParameterType
                        ParametrizedType: ArgumentParser[T]
                          SimpleType: ArgumentParser
                            CodeReferenceElement: ArgumentParser
                              PsiElement(identifier)('ArgumentParser')
                          TypeArgumentsList
                            PsiElement([)('[')
                            SimpleType: T
                              CodeReferenceElement: T
                                PsiElement(identifier)('T')
                            PsiElement(])(']')
                    PsiElement())(')')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                FunctionalType: () => Seq[T]
                  TypeInParenthesis: ()
                    PsiElement(()('(')
                    PsiElement())(')')
                  PsiWhiteSpace(' ')
                  PsiElement(=>)('=>')
                  PsiWhiteSpace(' ')
                  ParametrizedType: Seq[T]
                    SimpleType: Seq
                      CodeReferenceElement: Seq
                        PsiElement(identifier)('Seq')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: T
                        CodeReferenceElement: T
                          PsiElement(identifier)('T')
                      PsiElement(])(']')
              PsiWhiteSpace('\n\n    ')
              ScFunctionDeclaration: run
                DocComment
                  ScPsiDocToken(DOC_COMMENT_START)('/**')
                  ScDocParagraph
                    ScPsiDocToken(DOC_WHITESPACE)(' ')
                    ScPsiDocToken(DOC_COMMENT_DATA)('Run ')
                    DocSyntaxElement 8
                      ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                      ScPsiDocToken(DOC_COMMENT_DATA)('program')
                      ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                    ScPsiDocToken(DOC_COMMENT_DATA)(' if all arguments are valid,')
                    ScPsiDocToken(DOC_WHITESPACE)('\n     ')
                    ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
                    ScPsiDocToken(DOC_WHITESPACE)('  ')
                    ScPsiDocToken(DOC_COMMENT_DATA)('or print usage information and/or error messages.')
                    ScPsiDocToken(DOC_WHITESPACE)('\n     ')
                  ScPsiDocToken(DOC_COMMENT_END)('*/')
                PsiWhiteSpace('\n    ')
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(def)('def')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('run')
                Parameters
                  ParametersClause
                    PsiElement(()('(')
                    Parameter: program
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(identifier)('program')
                      PsiElement(:)(':')
                      PsiWhiteSpace(' ')
                      ParameterType
                        PsiElement(=>)('=>')
                        PsiWhiteSpace(' ')
                        SimpleType: MainResultType
                          CodeReferenceElement: MainResultType
                            PsiElement(identifier)('MainResultType')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    Parameter: progName
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(identifier)('progName')
                      PsiElement(:)(':')
                      PsiWhiteSpace(' ')
                      ParameterType
                        SimpleType: String
                          CodeReferenceElement: String
                            PsiElement(identifier)('String')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    Parameter: docComment
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(identifier)('docComment')
                      PsiElement(:)(':')
                      PsiWhiteSpace(' ')
                      ParameterType
                        SimpleType: String
                          CodeReferenceElement: String
                            PsiElement(identifier)('String')
                    PsiElement())(')')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                SimpleType: Unit
                  CodeReferenceElement: Unit
                    PsiElement(identifier)('Unit')
              PsiWhiteSpace('\n  ')
              End: Command
                PsiElement(end)('end')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('Command')
        PsiWhiteSpace('\n')
        End: MainAnnotation
          PsiElement(end)('end')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('MainAnnotation')
  PsiWhiteSpace('\n\n')
  PsiComment(comment)('//Sample main class, can be freely implemented:')
  PsiWhiteSpace('\n\n')
  ScClass: main
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('main')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          SimpleType: MainAnnotation
            CodeReferenceElement: MainAnnotation
              PsiElement(identifier)('MainAnnotation')
      ScTemplateBody
        PsiElement(:)(':')
        PsiWhiteSpace('\n\n  ')
        ScTypeAliasDefinition: ArgumentParser
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('ArgumentParser')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: T
              PsiElement(identifier)('T')
            PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ParametrizedType: util.CommandLineParser.FromString[T]
            SimpleType: util.CommandLineParser.FromString
              CodeReferenceElement: util.CommandLineParser.FromString
                CodeReferenceElement: util.CommandLineParser
                  CodeReferenceElement: util
                    PsiElement(identifier)('util')
                  PsiElement(.)('.')
                  PsiElement(identifier)('CommandLineParser')
                PsiElement(.)('.')
                PsiElement(identifier)('FromString')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: T
                CodeReferenceElement: T
                  PsiElement(identifier)('T')
              PsiElement(])(']')
        PsiWhiteSpace('\n  ')
        ScTypeAliasDefinition: MainResultType
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('MainResultType')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          SimpleType: Any
            CodeReferenceElement: Any
              PsiElement(identifier)('Any')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: command
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('command')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: args
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('args')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  ParametrizedType: Array[String]
                    SimpleType: Array
                      CodeReferenceElement: Array
                        PsiElement(identifier)('Array')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: String
                        CodeReferenceElement: String
                          PsiElement(identifier)('String')
                      PsiElement(])(']')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Command
            CodeReferenceElement: Command
              PsiElement(identifier)('Command')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ScNewTemplateDefinition: <anonymous>
            PsiElement(new)('new')
            PsiWhiteSpace(' ')
            ExtendsBlock
              TemplateParents
                ConstructorInvocation
                  SimpleType: Command
                    CodeReferenceElement: Command
                      PsiElement(identifier)('Command')
              ScTemplateBody
                PsiElement(:)(':')
                PsiWhiteSpace('\n\n    ')
                ScVariableDefinition: argInfos
                  DocComment
                    ScPsiDocToken(DOC_COMMENT_START)('/**')
                    ScDocParagraph
                      ScPsiDocToken(DOC_WHITESPACE)(' ')
                      ScPsiDocToken(DOC_COMMENT_DATA)('A buffer of demanded argument names, plus')
                      ScPsiDocToken(DOC_WHITESPACE)('\n     ')
                      ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
                      ScPsiDocToken(DOC_WHITESPACE)('   ')
                      ScPsiDocToken(DOC_COMMENT_DATA)('"?"  if it has a default')
                      ScPsiDocToken(DOC_WHITESPACE)('\n     ')
                      ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
                      ScPsiDocToken(DOC_WHITESPACE)('   ')
                      ScPsiDocToken(DOC_COMMENT_DATA)('"*"  if it is a vararg')
                      ScPsiDocToken(DOC_WHITESPACE)('\n     ')
                      ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
                      ScPsiDocToken(DOC_WHITESPACE)('   ')
                      ScPsiDocToken(DOC_COMMENT_DATA)('""   otherwise')
                      ScPsiDocToken(DOC_WHITESPACE)('\n     ')
                    ScPsiDocToken(DOC_COMMENT_END)('*/')
                  PsiWhiteSpace('\n    ')
                  AnnotationsList
                    <empty list>
                  Modifiers
                    AccessModifier
                      PsiElement(private)('private')
                  PsiWhiteSpace(' ')
                  PsiElement(var)('var')
                  PsiWhiteSpace(' ')
                  ListOfPatterns
                    ReferencePattern: argInfos
                      PsiElement(identifier)('argInfos')
                  PsiWhiteSpace(' ')
                  PsiElement(=)('=')
                  PsiWhiteSpace(' ')
                  ScNewTemplateDefinition: <anonymous>
                    PsiElement(new)('new')
                    PsiWhiteSpace(' ')
                    ExtendsBlock
                      TemplateParents
                        ConstructorInvocation
                          ParametrizedType: mutable.ListBuffer[(String, String)]
                            SimpleType: mutable.ListBuffer
                              CodeReferenceElement: mutable.ListBuffer
                                CodeReferenceElement: mutable
                                  PsiElement(identifier)('mutable')
                                PsiElement(.)('.')
                                PsiElement(identifier)('ListBuffer')
                            TypeArgumentsList
                              PsiElement([)('[')
                              TupleType: (String, String)
                                PsiElement(()('(')
                                TypesList
                                  SimpleType: String
                                    CodeReferenceElement: String
                                      PsiElement(identifier)('String')
                                  PsiElement(,)(',')
                                  PsiWhiteSpace(' ')
                                  SimpleType: String
                                    CodeReferenceElement: String
                                      PsiElement(identifier)('String')
                                PsiElement())(')')
                              PsiElement(])(']')
                PsiWhiteSpace('\n\n    ')
                ScVariableDefinition: errors
                  DocComment
                    ScPsiDocToken(DOC_COMMENT_START)('/**')
                    ScDocParagraph
                      ScPsiDocToken(DOC_WHITESPACE)(' ')
                      ScPsiDocToken(DOC_COMMENT_DATA)('A buffer for all errors')
                      ScPsiDocToken(DOC_WHITESPACE)(' ')
                    ScPsiDocToken(DOC_COMMENT_END)('*/')
                  PsiWhiteSpace('\n    ')
                  AnnotationsList
                    <empty list>
                  Modifiers
                    AccessModifier
                      PsiElement(private)('private')
                  PsiWhiteSpace(' ')
                  PsiElement(var)('var')
                  PsiWhiteSpace(' ')
                  ListOfPatterns
                    ReferencePattern: errors
                      PsiElement(identifier)('errors')
                  PsiWhiteSpace(' ')
                  PsiElement(=)('=')
                  PsiWhiteSpace(' ')
                  ScNewTemplateDefinition: <anonymous>
                    PsiElement(new)('new')
                    PsiWhiteSpace(' ')
                    ExtendsBlock
                      TemplateParents
                        ConstructorInvocation
                          ParametrizedType: mutable.ListBuffer[String]
                            SimpleType: mutable.ListBuffer
                              CodeReferenceElement: mutable.ListBuffer
                                CodeReferenceElement: mutable
                                  PsiElement(identifier)('mutable')
                                PsiElement(.)('.')
                                PsiElement(identifier)('ListBuffer')
                            TypeArgumentsList
                              PsiElement([)('[')
                              SimpleType: String
                                CodeReferenceElement: String
                                  PsiElement(identifier)('String')
                              PsiElement(])(']')
                PsiWhiteSpace('\n\n    ')
                ScFunctionDefinition: error
                  DocComment
                    ScPsiDocToken(DOC_COMMENT_START)('/**')
                    ScDocParagraph
                      ScPsiDocToken(DOC_WHITESPACE)(' ')
                      ScPsiDocToken(DOC_COMMENT_DATA)('Issue an error, and return an uncallable getter')
                      ScPsiDocToken(DOC_WHITESPACE)(' ')
                    ScPsiDocToken(DOC_COMMENT_END)('*/')
                  PsiWhiteSpace('\n    ')
                  AnnotationsList
                    <empty list>
                  Modifiers
                    AccessModifier
                      PsiElement(private)('private')
                  PsiWhiteSpace(' ')
                  PsiElement(def)('def')
                  PsiWhiteSpace(' ')
                  PsiElement(identifier)('error')
                  Parameters
                    ParametersClause
                      PsiElement(()('(')
                      Parameter: msg
                        AnnotationsList
                          <empty list>
                        Modifiers
                          <empty list>
                        PsiElement(identifier)('msg')
                        PsiElement(:)(':')
                        PsiWhiteSpace(' ')
                        ParameterType
                          SimpleType: String
                            CodeReferenceElement: String
                              PsiElement(identifier)('String')
                      PsiElement())(')')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  FunctionalType: () => Nothing
                    TypeInParenthesis: ()
                      PsiElement(()('(')
                      PsiElement())(')')
                    PsiWhiteSpace(' ')
                    PsiElement(=>)('=>')
                    PsiWhiteSpace(' ')
                    SimpleType: Nothing
                      CodeReferenceElement: Nothing
                        PsiElement(identifier)('Nothing')
                  PsiWhiteSpace(' ')
                  PsiElement(=)('=')
                  BlockExpression
                    PsiWhiteSpace('\n      ')
                    InfixExpression
                      ReferenceExpression: errors
                        PsiElement(identifier)('errors')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: +=
                        PsiElement(identifier)('+=')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: msg
                        PsiElement(identifier)('msg')
                    PsiWhiteSpace('\n      ')
                    FunctionExpression
                      Parameters
                        ParametersClause
                          PsiElement(()('(')
                          PsiElement())(')')
                      PsiWhiteSpace(' ')
                      PsiElement(=>)('=>')
                      PsiWhiteSpace(' ')
                      BlockOfExpressions
                        ThrowStatement
                          PsiElement(throw)('throw')
                          PsiWhiteSpace(' ')
                          ScNewTemplateDefinition: <anonymous>
                            PsiElement(new)('new')
                            PsiWhiteSpace(' ')
                            ExtendsBlock
                              TemplateParents
                                ConstructorInvocation
                                  SimpleType: AssertionError
                                    CodeReferenceElement: AssertionError
                                      PsiElement(identifier)('AssertionError')
                                  ArgumentList
                                    PsiElement(()('(')
                                    StringLiteral
                                      PsiElement(string content)('"trying to get invalid argument"')
                                    PsiElement())(')')
                PsiWhiteSpace('\n\n    ')
                ScVariableDefinition: argIdx
                  DocComment
                    ScPsiDocToken(DOC_COMMENT_START)('/**')
                    ScDocParagraph
                      ScPsiDocToken(DOC_WHITESPACE)(' ')
                      ScPsiDocToken(DOC_COMMENT_DATA)('The next argument index')
                      ScPsiDocToken(DOC_WHITESPACE)(' ')
                    ScPsiDocToken(DOC_COMMENT_END)('*/')
                  PsiWhiteSpace('\n    ')
                  AnnotationsList
                    <empty list>
                  Modifiers
                    AccessModifier
                      PsiElement(private)('private')
                  PsiWhiteSpace(' ')
                  PsiElement(var)('var')
                  PsiWhiteSpace(' ')
                  ListOfPatterns
                    ReferencePattern: argIdx
                      PsiElement(identifier)('argIdx')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  SimpleType: Int
                    CodeReferenceElement: Int
                      PsiElement(identifier)('Int')
                  PsiWhiteSpace(' ')
                  PsiElement(=)('=')
                  PsiWhiteSpace(' ')
                  IntegerLiteral
                    PsiElement(integer)('0')
                PsiWhiteSpace('\n\n    ')
                ScFunctionDefinition: argAt
                  AnnotationsList
                    <empty list>
                  Modifiers
                    AccessModifier
                      PsiElement(private)('private')
                  PsiWhiteSpace(' ')
                  PsiElement(def)('def')
                  PsiWhiteSpace(' ')
                  PsiElement(identifier)('argAt')
                  Parameters
                    ParametersClause
                      PsiElement(()('(')
                      Parameter: idx
                        AnnotationsList
                          <empty list>
                        Modifiers
                          <empty list>
                        PsiElement(identifier)('idx')
                        PsiElement(:)(':')
                        PsiWhiteSpace(' ')
                        ParameterType
                          SimpleType: Int
                            CodeReferenceElement: Int
                              PsiElement(identifier)('Int')
                      PsiElement())(')')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParametrizedType: Option[String]
                    SimpleType: Option
                      CodeReferenceElement: Option
                        PsiElement(identifier)('Option')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: String
                        CodeReferenceElement: String
                          PsiElement(identifier)('String')
                      PsiElement(])(']')
                  PsiWhiteSpace(' ')
                  PsiElement(=)('=')
                  PsiWhiteSpace('\n      ')
                  IfStatement
                    PsiElement(if)('if')
                    PsiWhiteSpace(' ')
                    InfixExpression
                      ReferenceExpression: idx
                        PsiElement(identifier)('idx')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: <
                        PsiElement(identifier)('<')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: args.length
                        ReferenceExpression: args
                          PsiElement(identifier)('args')
                        PsiElement(.)('.')
                        PsiElement(identifier)('length')
                    PsiWhiteSpace(' ')
                    PsiElement(then)('then')
                    PsiWhiteSpace(' ')
                    MethodCall
                      ReferenceExpression: Some
                        PsiElement(identifier)('Some')
                      ArgumentList
                        PsiElement(()('(')
                        MethodCall
                          ReferenceExpression: args
                            PsiElement(identifier)('args')
                          ArgumentList
                            PsiElement(()('(')
                            ReferenceExpression: idx
                              PsiElement(identifier)('idx')
                            PsiElement())(')')
                        PsiElement())(')')
                    PsiWhiteSpace(' ')
                    PsiElement(else)('else')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: None
                      PsiElement(identifier)('None')
                PsiWhiteSpace('\n\n    ')
                ScFunctionDefinition: nextPositionalArg
                  AnnotationsList
                    <empty list>
                  Modifiers
                    AccessModifier
                      PsiElement(private)('private')
                  PsiWhiteSpace(' ')
                  PsiElement(def)('def')
                  PsiWhiteSpace(' ')
                  PsiElement(identifier)('nextPositionalArg')
                  Parameters
                    ParametersClause
                      PsiElement(()('(')
                      PsiElement())(')')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParametrizedType: Option[String]
                    SimpleType: Option
                      CodeReferenceElement: Option
                        PsiElement(identifier)('Option')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: String
                        CodeReferenceElement: String
                          PsiElement(identifier)('String')
                      PsiElement(])(']')
                  PsiWhiteSpace(' ')
                  PsiElement(=)('=')
                  BlockExpression
                    PsiWhiteSpace('\n      ')
                    WhileStatement
                      PsiElement(while)('while')
                      PsiWhiteSpace(' ')
                      InfixExpression
                        InfixExpression
                          ReferenceExpression: argIdx
                            PsiElement(identifier)('argIdx')
                          PsiWhiteSpace(' ')
                          ReferenceExpression: <
                            PsiElement(identifier)('<')
                          PsiWhiteSpace(' ')
                          ReferenceExpression: args.length
                            ReferenceExpression: args
                              PsiElement(identifier)('args')
                            PsiElement(.)('.')
                            PsiElement(identifier)('length')
                        PsiWhiteSpace(' ')
                        ReferenceExpression: &&
                          PsiElement(identifier)('&&')
                        PsiWhiteSpace(' ')
                        MethodCall
                          ReferenceExpression: args(argIdx).startsWith
                            MethodCall
                              ReferenceExpression: args
                                PsiElement(identifier)('args')
                              ArgumentList
                                PsiElement(()('(')
                                ReferenceExpression: argIdx
                                  PsiElement(identifier)('argIdx')
                                PsiElement())(')')
                            PsiElement(.)('.')
                            PsiElement(identifier)('startsWith')
                          ArgumentList
                            PsiElement(()('(')
                            StringLiteral
                              PsiElement(string content)('"--"')
                            PsiElement())(')')
                      PsiWhiteSpace(' ')
                      PsiElement(do)('do')
                      PsiWhiteSpace(' ')
                      InfixExpression
                        ReferenceExpression: argIdx
                          PsiElement(identifier)('argIdx')
                        PsiWhiteSpace(' ')
                        ReferenceExpression: +=
                          PsiElement(identifier)('+=')
                        PsiWhiteSpace(' ')
                        IntegerLiteral
                          PsiElement(integer)('2')
                    PsiWhiteSpace('\n      ')
                    ScPatternDefinition: result
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(val)('val')
                      PsiWhiteSpace(' ')
                      ListOfPatterns
                        ReferencePattern: result
                          PsiElement(identifier)('result')
                      PsiWhiteSpace(' ')
                      PsiElement(=)('=')
                      PsiWhiteSpace(' ')
                      MethodCall
                        ReferenceExpression: argAt
                          PsiElement(identifier)('argAt')
                        ArgumentList
                          PsiElement(()('(')
                          ReferenceExpression: argIdx
                            PsiElement(identifier)('argIdx')
                          PsiElement())(')')
                    PsiWhiteSpace('\n      ')
                    InfixExpression
                      ReferenceExpression: argIdx
                        PsiElement(identifier)('argIdx')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: +=
                        PsiElement(identifier)('+=')
                      PsiWhiteSpace(' ')
                      IntegerLiteral
                        PsiElement(integer)('1')
                    PsiWhiteSpace('\n      ')
                    ReferenceExpression: result
                      PsiElement(identifier)('result')
                PsiWhiteSpace('\n\n    ')
                ScFunctionDefinition: convert
                  AnnotationsList
                    <empty list>
                  Modifiers
                    AccessModifier
                      PsiElement(private)('private')
                  PsiWhiteSpace(' ')
                  PsiElement(def)('def')
                  PsiWhiteSpace(' ')
                  PsiElement(identifier)('convert')
                  TypeParameterClause
                    PsiElement([)('[')
                    TypeParameter: T
                      PsiElement(identifier)('T')
                    PsiElement(])(']')
                  Parameters
                    ParametersClause
                      PsiElement(()('(')
                      Parameter: argName
                        AnnotationsList
                          <empty list>
                        Modifiers
                          <empty list>
                        PsiElement(identifier)('argName')
                        PsiElement(:)(':')
                        PsiWhiteSpace(' ')
                        ParameterType
                          SimpleType: String
                            CodeReferenceElement: String
                              PsiElement(identifier)('String')
                      PsiElement(,)(',')
                      PsiWhiteSpace(' ')
                      Parameter: arg
                        AnnotationsList
                          <empty list>
                        Modifiers
                          <empty list>
                        PsiElement(identifier)('arg')
                        PsiElement(:)(':')
                        PsiWhiteSpace(' ')
                        ParameterType
                          SimpleType: String
                            CodeReferenceElement: String
                              PsiElement(identifier)('String')
                      PsiElement(,)(',')
                      PsiWhiteSpace(' ')
                      Parameter: p
                        AnnotationsList
                          <empty list>
                        Modifiers
                          <empty list>
                        PsiElement(identifier)('p')
                        PsiElement(:)(':')
                        PsiWhiteSpace(' ')
                        ParameterType
                          ParametrizedType: ArgumentParser[T]
                            SimpleType: ArgumentParser
                              CodeReferenceElement: ArgumentParser
                                PsiElement(identifier)('ArgumentParser')
                            TypeArgumentsList
                              PsiElement([)('[')
                              SimpleType: T
                                CodeReferenceElement: T
                                  PsiElement(identifier)('T')
                              PsiElement(])(']')
                      PsiElement())(')')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  FunctionalType: () => T
                    TypeInParenthesis: ()
                      PsiElement(()('(')
                      PsiElement())(')')
                    PsiWhiteSpace(' ')
                    PsiElement(=>)('=>')
                    PsiWhiteSpace(' ')
                    SimpleType: T
                      CodeReferenceElement: T
                        PsiElement(identifier)('T')
                  PsiWhiteSpace(' ')
                  PsiElement(=)('=')
                  PsiWhiteSpace('\n      ')
                  MatchStatement
                    MethodCall
                      ReferenceExpression: p.fromStringOption
                        ReferenceExpression: p
                          PsiElement(identifier)('p')
                        PsiElement(.)('.')
                        PsiElement(identifier)('fromStringOption')
                      ArgumentList
                        PsiElement(()('(')
                        ReferenceExpression: arg
                          PsiElement(identifier)('arg')
                        PsiElement())(')')
                    PsiWhiteSpace(' ')
                    PsiElement(match)('match')
                    PsiWhiteSpace('\n        ')
                    CaseClauses
                      CaseClause
                        PsiElement(case)('case')
                        PsiWhiteSpace(' ')
                        ConstructorPattern
                          CodeReferenceElement: Some
                            PsiElement(identifier)('Some')
                          Pattern Argument List
                            PsiElement(()('(')
                            ReferencePattern: t
                              PsiElement(identifier)('t')
                            PsiElement())(')')
                        PsiWhiteSpace(' ')
                        PsiElement(=>)('=>')
                        PsiWhiteSpace(' ')
                        BlockOfExpressions
                          FunctionExpression
                            Parameters
                              ParametersClause
                                PsiElement(()('(')
                                PsiElement())(')')
                            PsiWhiteSpace(' ')
                            PsiElement(=>)('=>')
                            PsiWhiteSpace(' ')
                            BlockOfExpressions
                              ReferenceExpression: t
                                PsiElement(identifier)('t')
                      PsiWhiteSpace('\n        ')
                      CaseClause
                        PsiElement(case)('case')
                        PsiWhiteSpace(' ')
                        StableElementPattern
                          ReferenceExpression: None
                            PsiElement(identifier)('None')
                        PsiWhiteSpace(' ')
                        PsiElement(=>)('=>')
                        PsiWhiteSpace(' ')
                        BlockOfExpressions
                          MethodCall
                            ReferenceExpression: error
                              PsiElement(identifier)('error')
                            ArgumentList
                              PsiElement(()('(')
                              InterpolatedStringLiteral
                                InterpolatedExpressionPrefix: s
                                  PsiElement(interpolated string id)('s')
                                PsiElement(interpolated string)('"invalid argument for ')
                                PsiElement(interpolated string injection)('$')
                                ReferenceExpression: argName
                                  PsiElement(identifier)('argName')
                                PsiElement(interpolated string)(': ')
                                PsiElement(interpolated string injection)('$')
                                ReferenceExpression: arg
                                  PsiElement(identifier)('arg')
                                PsiElement(interpolated string end)('"')
                              PsiElement())(')')
                PsiWhiteSpace('\n\n    ')
                ScFunctionDefinition: argGetter
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(def)('def')
                  PsiWhiteSpace(' ')
                  PsiElement(identifier)('argGetter')
                  TypeParameterClause
                    PsiElement([)('[')
                    TypeParameter: T
                      PsiElement(identifier)('T')
                    PsiElement(])(']')
                  Parameters
                    ParametersClause
                      PsiElement(()('(')
                      Parameter: argName
                        AnnotationsList
                          <empty list>
                        Modifiers
                          <empty list>
                        PsiElement(identifier)('argName')
                        PsiElement(:)(':')
                        PsiWhiteSpace(' ')
                        ParameterType
                          SimpleType: String
                            CodeReferenceElement: String
                              PsiElement(identifier)('String')
                      PsiElement(,)(',')
                      PsiWhiteSpace(' ')
                      Parameter: p
                        AnnotationsList
                          <empty list>
                        Modifiers
                          <empty list>
                        PsiElement(identifier)('p')
                        PsiElement(:)(':')
                        PsiWhiteSpace(' ')
                        ParameterType
                          ParametrizedType: ArgumentParser[T]
                            SimpleType: ArgumentParser
                              CodeReferenceElement: ArgumentParser
                                PsiElement(identifier)('ArgumentParser')
                            TypeArgumentsList
                              PsiElement([)('[')
                              SimpleType: T
                                CodeReferenceElement: T
                                  PsiElement(identifier)('T')
                              PsiElement(])(']')
                      PsiElement(,)(',')
                      PsiWhiteSpace(' ')
                      Parameter: defaultValue
                        AnnotationsList
                          <empty list>
                        Modifiers
                          <empty list>
                        PsiElement(identifier)('defaultValue')
                        PsiElement(:)(':')
                        PsiWhiteSpace(' ')
                        ParameterType
                          ParametrizedType: Option[T]
                            SimpleType: Option
                              CodeReferenceElement: Option
                                PsiElement(identifier)('Option')
                            TypeArgumentsList
                              PsiElement([)('[')
                              SimpleType: T
                                CodeReferenceElement: T
                                  PsiElement(identifier)('T')
                              PsiElement(])(']')
                        PsiWhiteSpace(' ')
                        PsiElement(=)('=')
                        PsiWhiteSpace(' ')
                        ReferenceExpression: None
                          PsiElement(identifier)('None')
                      PsiElement())(')')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  FunctionalType: () => T
                    TypeInParenthesis: ()
                      PsiElement(()('(')
                      PsiElement())(')')
                    PsiWhiteSpace(' ')
                    PsiElement(=>)('=>')
                    PsiWhiteSpace(' ')
                    SimpleType: T
                      CodeReferenceElement: T
                        PsiElement(identifier)('T')
                  PsiWhiteSpace(' ')
                  PsiElement(=)('=')
                  BlockExpression
                    PsiWhiteSpace('\n      ')
                    InfixExpression
                      ReferenceExpression: argInfos
                        PsiElement(identifier)('argInfos')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: +=
                        PsiElement(identifier)('+=')
                      PsiWhiteSpace(' ')
                      ExpressionInParenthesis
                        PsiElement(()('(')
                        Tuple
                          PsiElement(()('(')
                          ReferenceExpression: argName
                            PsiElement(identifier)('argName')
                          PsiElement(,)(',')
                          PsiWhiteSpace(' ')
                          IfStatement
                            PsiElement(if)('if')
                            PsiWhiteSpace(' ')
                            ReferenceExpression: defaultValue.isDefined
                              ReferenceExpression: defaultValue
                                PsiElement(identifier)('defaultValue')
                              PsiElement(.)('.')
                              PsiElement(identifier)('isDefined')
                            PsiWhiteSpace(' ')
                            PsiElement(then)('then')
                            PsiWhiteSpace(' ')
                            StringLiteral
                              PsiElement(string content)('"?"')
                            PsiWhiteSpace(' ')
                            PsiElement(else)('else')
                            PsiWhiteSpace(' ')
                            StringLiteral
                              PsiElement(string content)('""')
                          PsiElement())(')')
                        PsiElement())(')')
                    PsiWhiteSpace('\n      ')
                    ScPatternDefinition: idx
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(val)('val')
                      PsiWhiteSpace(' ')
                      ListOfPatterns
                        ReferencePattern: idx
                          PsiElement(identifier)('idx')
                      PsiWhiteSpace(' ')
                      PsiElement(=)('=')
                      PsiWhiteSpace(' ')
                      MethodCall
                        ReferenceExpression: args.indexOf
                          ReferenceExpression: args
                            PsiElement(identifier)('args')
                          PsiElement(.)('.')
                          PsiElement(identifier)('indexOf')
                        ArgumentList
                          PsiElement(()('(')
                          InterpolatedStringLiteral
                            InterpolatedExpressionPrefix: s
                              PsiElement(interpolated string id)('s')
                            PsiElement(interpolated string)('"--')
                            PsiElement(interpolated string injection)('$')
                            ReferenceExpression: argName
                              PsiElement(identifier)('argName')
                            PsiElement(interpolated string end)('"')
                          PsiElement())(')')
                    PsiWhiteSpace('\n      ')
                    ScPatternDefinition: argOpt
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(val)('val')
                      PsiWhiteSpace(' ')
                      ListOfPatterns
                        ReferencePattern: argOpt
                          PsiElement(identifier)('argOpt')
                      PsiWhiteSpace(' ')
                      PsiElement(=)('=')
                      PsiWhiteSpace(' ')
                      IfStatement
                        PsiElement(if)('if')
                        PsiWhiteSpace(' ')
                        InfixExpression
                          ReferenceExpression: idx
                            PsiElement(identifier)('idx')
                          PsiWhiteSpace(' ')
                          ReferenceExpression: >=
                            PsiElement(identifier)('>=')
                          PsiWhiteSpace(' ')
                          IntegerLiteral
                            PsiElement(integer)('0')
                        PsiWhiteSpace(' ')
                        PsiElement(then)('then')
                        PsiWhiteSpace(' ')
                        MethodCall
                          ReferenceExpression: argAt
                            PsiElement(identifier)('argAt')
                          ArgumentList
                            PsiElement(()('(')
                            InfixExpression
                              ReferenceExpression: idx
                                PsiElement(identifier)('idx')
                              PsiWhiteSpace(' ')
                              ReferenceExpression: +
                                PsiElement(identifier)('+')
                              PsiWhiteSpace(' ')
                              IntegerLiteral
                                PsiElement(integer)('1')
                            PsiElement())(')')
                        PsiWhiteSpace(' ')
                        PsiElement(else)('else')
                        PsiWhiteSpace(' ')
                        MethodCall
                          ReferenceExpression: nextPositionalArg
                            PsiElement(identifier)('nextPositionalArg')
                          ArgumentList
                            PsiElement(()('(')
                            PsiElement())(')')
                    PsiWhiteSpace('\n      ')
                    MatchStatement
                      ReferenceExpression: argOpt
                        PsiElement(identifier)('argOpt')
                      PsiWhiteSpace(' ')
                      PsiElement(match)('match')
                      PsiWhiteSpace('\n        ')
                      CaseClauses
                        CaseClause
                          PsiElement(case)('case')
                          PsiWhiteSpace(' ')
                          ConstructorPattern
                            CodeReferenceElement: Some
                              PsiElement(identifier)('Some')
                            Pattern Argument List
                              PsiElement(()('(')
                              ReferencePattern: arg
                                PsiElement(identifier)('arg')
                              PsiElement())(')')
                          PsiWhiteSpace(' ')
                          PsiElement(=>)('=>')
                          PsiWhiteSpace(' ')
                          BlockOfExpressions
                            MethodCall
                              ReferenceExpression: convert
                                PsiElement(identifier)('convert')
                              ArgumentList
                                PsiElement(()('(')
                                ReferenceExpression: argName
                                  PsiElement(identifier)('argName')
                                PsiElement(,)(',')
                                PsiWhiteSpace(' ')
                                ReferenceExpression: arg
                                  PsiElement(identifier)('arg')
                                PsiElement(,)(',')
                                PsiWhiteSpace(' ')
                                ReferenceExpression: p
                                  PsiElement(identifier)('p')
                                PsiElement())(')')
                        PsiWhiteSpace('\n        ')
                        CaseClause
                          PsiElement(case)('case')
                          PsiWhiteSpace(' ')
                          StableElementPattern
                            ReferenceExpression: None
                              PsiElement(identifier)('None')
                          PsiWhiteSpace(' ')
                          PsiElement(=>)('=>')
                          PsiWhiteSpace(' ')
                          BlockOfExpressions
                            MatchStatement
                              ReferenceExpression: defaultValue
                                PsiElement(identifier)('defaultValue')
                              PsiWhiteSpace(' ')
                              PsiElement(match)('match')
                              PsiWhiteSpace('\n          ')
                              CaseClauses
                                CaseClause
                                  PsiElement(case)('case')
                                  PsiWhiteSpace(' ')
                                  ConstructorPattern
                                    CodeReferenceElement: Some
                                      PsiElement(identifier)('Some')
                                    Pattern Argument List
                                      PsiElement(()('(')
                                      ReferencePattern: t
                                        PsiElement(identifier)('t')
                                      PsiElement())(')')
                                  PsiWhiteSpace(' ')
                                  PsiElement(=>)('=>')
                                  PsiWhiteSpace(' ')
                                  BlockOfExpressions
                                    FunctionExpression
                                      Parameters
                                        ParametersClause
                                          PsiElement(()('(')
                                          PsiElement())(')')
                                      PsiWhiteSpace(' ')
                                      PsiElement(=>)('=>')
                                      PsiWhiteSpace(' ')
                                      BlockOfExpressions
                                        ReferenceExpression: t
                                          PsiElement(identifier)('t')
                                PsiWhiteSpace('\n          ')
                                CaseClause
                                  PsiElement(case)('case')
                                  PsiWhiteSpace(' ')
                                  StableElementPattern
                                    ReferenceExpression: None
                                      PsiElement(identifier)('None')
                                  PsiWhiteSpace(' ')
                                  PsiElement(=>)('=>')
                                  PsiWhiteSpace(' ')
                                  BlockOfExpressions
                                    MethodCall
                                      ReferenceExpression: error
                                        PsiElement(identifier)('error')
                                      ArgumentList
                                        PsiElement(()('(')
                                        InterpolatedStringLiteral
                                          InterpolatedExpressionPrefix: s
                                            PsiElement(interpolated string id)('s')
                                          PsiElement(interpolated string)('"missing argument for ')
                                          PsiElement(interpolated string injection)('$')
                                          ReferenceExpression: argName
                                            PsiElement(identifier)('argName')
                                          PsiElement(interpolated string end)('"')
                                        PsiElement())(')')
                PsiWhiteSpace('\n\n    ')
                ScFunctionDefinition: argsGetter
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(def)('def')
                  PsiWhiteSpace(' ')
                  PsiElement(identifier)('argsGetter')
                  TypeParameterClause
                    PsiElement([)('[')
                    TypeParameter: T
                      PsiElement(identifier)('T')
                    PsiElement(])(']')
                  Parameters
                    ParametersClause
                      PsiElement(()('(')
                      Parameter: argName
                        AnnotationsList
                          <empty list>
                        Modifiers
                          <empty list>
                        PsiElement(identifier)('argName')
                        PsiElement(:)(':')
                        PsiWhiteSpace(' ')
                        ParameterType
                          SimpleType: String
                            CodeReferenceElement: String
                              PsiElement(identifier)('String')
                      PsiElement(,)(',')
                      PsiWhiteSpace(' ')
                      Parameter: p
                        AnnotationsList
                          <empty list>
                        Modifiers
                          <empty list>
                        PsiElement(identifier)('p')
                        PsiElement(:)(':')
                        PsiWhiteSpace(' ')
                        ParameterType
                          ParametrizedType: ArgumentParser[T]
                            SimpleType: ArgumentParser
                              CodeReferenceElement: ArgumentParser
                                PsiElement(identifier)('ArgumentParser')
                            TypeArgumentsList
                              PsiElement([)('[')
                              SimpleType: T
                                CodeReferenceElement: T
                                  PsiElement(identifier)('T')
                              PsiElement(])(']')
                      PsiElement())(')')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  FunctionalType: () => Seq[T]
                    TypeInParenthesis: ()
                      PsiElement(()('(')
                      PsiElement())(')')
                    PsiWhiteSpace(' ')
                    PsiElement(=>)('=>')
                    PsiWhiteSpace(' ')
                    ParametrizedType: Seq[T]
                      SimpleType: Seq
                        CodeReferenceElement: Seq
                          PsiElement(identifier)('Seq')
                      TypeArgumentsList
                        PsiElement([)('[')
                        SimpleType: T
                          CodeReferenceElement: T
                            PsiElement(identifier)('T')
                        PsiElement(])(']')
                  PsiWhiteSpace(' ')
                  PsiElement(=)('=')
                  BlockExpression
                    PsiWhiteSpace('\n      ')
                    InfixExpression
                      ReferenceExpression: argInfos
                        PsiElement(identifier)('argInfos')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: +=
                        PsiElement(identifier)('+=')
                      PsiWhiteSpace(' ')
                      ExpressionInParenthesis
                        PsiElement(()('(')
                        Tuple
                          PsiElement(()('(')
                          ReferenceExpression: argName
                            PsiElement(identifier)('argName')
                          PsiElement(,)(',')
                          PsiWhiteSpace(' ')
                          StringLiteral
                            PsiElement(string content)('"*"')
                          PsiElement())(')')
                        PsiElement())(')')
                    PsiWhiteSpace('\n      ')
                    ScFunctionDefinition: remainingArgGetters
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(def)('def')
                      PsiWhiteSpace(' ')
                      PsiElement(identifier)('remainingArgGetters')
                      Parameters
                        ParametersClause
                          PsiElement(()('(')
                          PsiElement())(')')
                      PsiElement(:)(':')
                      PsiWhiteSpace(' ')
                      ParametrizedType: List[() => T]
                        SimpleType: List
                          CodeReferenceElement: List
                            PsiElement(identifier)('List')
                        TypeArgumentsList
                          PsiElement([)('[')
                          FunctionalType: () => T
                            TypeInParenthesis: ()
                              PsiElement(()('(')
                              PsiElement())(')')
                            PsiWhiteSpace(' ')
                            PsiElement(=>)('=>')
                            PsiWhiteSpace(' ')
                            SimpleType: T
                              CodeReferenceElement: T
                                PsiElement(identifier)('T')
                          PsiElement(])(']')
                      PsiWhiteSpace(' ')
                      PsiElement(=)('=')
                      PsiWhiteSpace(' ')
                      MatchStatement
                        MethodCall
                          ReferenceExpression: nextPositionalArg
                            PsiElement(identifier)('nextPositionalArg')
                          ArgumentList
                            PsiElement(()('(')
                            PsiElement())(')')
                        PsiWhiteSpace(' ')
                        PsiElement(match)('match')
                        PsiWhiteSpace('\n        ')
                        CaseClauses
                          CaseClause
                            PsiElement(case)('case')
                            PsiWhiteSpace(' ')
                            ConstructorPattern
                              CodeReferenceElement: Some
                                PsiElement(identifier)('Some')
                              Pattern Argument List
                                PsiElement(()('(')
                                ReferencePattern: arg
                                  PsiElement(identifier)('arg')
                                PsiElement())(')')
                            PsiWhiteSpace(' ')
                            PsiElement(=>)('=>')
                            PsiWhiteSpace(' ')
                            BlockOfExpressions
                              InfixExpression
                                MethodCall
                                  ReferenceExpression: convert
                                    PsiElement(identifier)('convert')
                                  ArgumentList
                                    PsiElement(()('(')
                                    ReferenceExpression: arg
                                      PsiElement(identifier)('arg')
                                    PsiElement(,)(',')
                                    PsiWhiteSpace(' ')
                                    ReferenceExpression: argName
                                      PsiElement(identifier)('argName')
                                    PsiElement(,)(',')
                                    PsiWhiteSpace(' ')
                                    ReferenceExpression: p
                                      PsiElement(identifier)('p')
                                    PsiElement())(')')
                                PsiWhiteSpace(' ')
                                ReferenceExpression: ::
                                  PsiElement(identifier)('::')
                                PsiWhiteSpace(' ')
                                MethodCall
                                  ReferenceExpression: remainingArgGetters
                                    PsiElement(identifier)('remainingArgGetters')
                                  ArgumentList
                                    PsiElement(()('(')
                                    PsiElement())(')')
                          PsiWhiteSpace('\n        ')
                          CaseClause
                            PsiElement(case)('case')
                            PsiWhiteSpace(' ')
                            StableElementPattern
                              ReferenceExpression: None
                                PsiElement(identifier)('None')
                            PsiWhiteSpace(' ')
                            PsiElement(=>)('=>')
                            PsiWhiteSpace(' ')
                            BlockOfExpressions
                              ReferenceExpression: Nil
                                PsiElement(identifier)('Nil')
                    PsiWhiteSpace('\n      ')
                    ScPatternDefinition: getters
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(val)('val')
                      PsiWhiteSpace(' ')
                      ListOfPatterns
                        ReferencePattern: getters
                          PsiElement(identifier)('getters')
                      PsiWhiteSpace(' ')
                      PsiElement(=)('=')
                      PsiWhiteSpace(' ')
                      MethodCall
                        ReferenceExpression: remainingArgGetters
                          PsiElement(identifier)('remainingArgGetters')
                        ArgumentList
                          PsiElement(()('(')
                          PsiElement())(')')
                    PsiWhiteSpace('\n      ')
                    FunctionExpression
                      Parameters
                        ParametersClause
                          PsiElement(()('(')
                          PsiElement())(')')
                      PsiWhiteSpace(' ')
                      PsiElement(=>)('=>')
                      PsiWhiteSpace(' ')
                      BlockOfExpressions
                        MethodCall
                          ReferenceExpression: getters.map
                            ReferenceExpression: getters
                              PsiElement(identifier)('getters')
                            PsiElement(.)('.')
                            PsiElement(identifier)('map')
                          ArgumentList
                            PsiElement(()('(')
                            MethodCall
                              UnderscoreSection
                                PsiElement(_)('_')
                              ArgumentList
                                PsiElement(()('(')
                                PsiElement())(')')
                            PsiElement())(')')
                PsiWhiteSpace('\n\n    ')
                ScFunctionDefinition: run
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(def)('def')
                  PsiWhiteSpace(' ')
                  PsiElement(identifier)('run')
                  Parameters
                    ParametersClause
                      PsiElement(()('(')
                      Parameter: f
                        AnnotationsList
                          <empty list>
                        Modifiers
                          <empty list>
                        PsiElement(identifier)('f')
                        PsiElement(:)(':')
                        PsiWhiteSpace(' ')
                        ParameterType
                          PsiElement(=>)('=>')
                          PsiWhiteSpace(' ')
                          SimpleType: MainResultType
                            CodeReferenceElement: MainResultType
                              PsiElement(identifier)('MainResultType')
                      PsiElement(,)(',')
                      PsiWhiteSpace(' ')
                      Parameter: progName
                        AnnotationsList
                          <empty list>
                        Modifiers
                          <empty list>
                        PsiElement(identifier)('progName')
                        PsiElement(:)(':')
                        PsiWhiteSpace(' ')
                        ParameterType
                          SimpleType: String
                            CodeReferenceElement: String
                              PsiElement(identifier)('String')
                      PsiElement(,)(',')
                      PsiWhiteSpace(' ')
                      Parameter: docComment
                        AnnotationsList
                          <empty list>
                        Modifiers
                          <empty list>
                        PsiElement(identifier)('docComment')
                        PsiElement(:)(':')
                        PsiWhiteSpace(' ')
                        ParameterType
                          SimpleType: String
                            CodeReferenceElement: String
                              PsiElement(identifier)('String')
                      PsiElement())(')')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  SimpleType: Unit
                    CodeReferenceElement: Unit
                      PsiElement(identifier)('Unit')
                  PsiWhiteSpace(' ')
                  PsiElement(=)('=')
                  BlockExpression
                    PsiWhiteSpace('\n      ')
                    ScFunctionDefinition: usage
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(def)('def')
                      PsiWhiteSpace(' ')
                      PsiElement(identifier)('usage')
                      Parameters
                        ParametersClause
                          PsiElement(()('(')
                          PsiElement())(')')
                      PsiElement(:)(':')
                      PsiWhiteSpace(' ')
                      SimpleType: Unit
                        CodeReferenceElement: Unit
                          PsiElement(identifier)('Unit')
                      PsiWhiteSpace(' ')
                      PsiElement(=)('=')
                      PsiWhiteSpace('\n        ')
                      MethodCall
                        ReferenceExpression: println
                          PsiElement(identifier)('println')
                        ArgumentList
                          PsiElement(()('(')
                          InterpolatedStringLiteral
                            InterpolatedExpressionPrefix: s
                              PsiElement(interpolated string id)('s')
                            PsiElement(interpolated string)('"Usage: ')
                            PsiElement(interpolated string injection)('$')
                            ReferenceExpression: progName
                              PsiElement(identifier)('progName')
                            PsiElement(interpolated string)(' ')
                            PsiElement(interpolated string injection)('$')
                            BlockExpression
                              PsiElement({)('{')
                              MethodCall
                                ReferenceExpression: argInfos.map(_ + _).mkString
                                  MethodCall
                                    ReferenceExpression: argInfos.map
                                      ReferenceExpression: argInfos
                                        PsiElement(identifier)('argInfos')
                                      PsiElement(.)('.')
                                      PsiElement(identifier)('map')
                                    ArgumentList
                                      PsiElement(()('(')
                                      InfixExpression
                                        UnderscoreSection
                                          PsiElement(_)('_')
                                        PsiWhiteSpace(' ')
                                        ReferenceExpression: +
                                          PsiElement(identifier)('+')
                                        PsiWhiteSpace(' ')
                                        UnderscoreSection
                                          PsiElement(_)('_')
                                      PsiElement())(')')
                                  PsiElement(.)('.')
                                  PsiElement(identifier)('mkString')
                                ArgumentList
                                  PsiElement(()('(')
                                  StringLiteral
                                    PsiElement(string content)('" "')
                                  PsiElement())(')')
                              PsiElement(})('}')
                            PsiElement(interpolated string end)('"')
                          PsiElement())(')')
                    PsiWhiteSpace('\n\n      ')
                    ScFunctionDefinition: explain
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(def)('def')
                      PsiWhiteSpace(' ')
                      PsiElement(identifier)('explain')
                      Parameters
                        ParametersClause
                          PsiElement(()('(')
                          PsiElement())(')')
                      PsiElement(:)(':')
                      PsiWhiteSpace(' ')
                      SimpleType: Unit
                        CodeReferenceElement: Unit
                          PsiElement(identifier)('Unit')
                      PsiWhiteSpace(' ')
                      PsiElement(=)('=')
                      PsiWhiteSpace('\n        ')
                      IfStatement
                        PsiElement(if)('if')
                        PsiWhiteSpace(' ')
                        ReferenceExpression: docComment.nonEmpty
                          ReferenceExpression: docComment
                            PsiElement(identifier)('docComment')
                          PsiElement(.)('.')
                          PsiElement(identifier)('nonEmpty')
                        PsiWhiteSpace(' ')
                        PsiElement(then)('then')
                        PsiWhiteSpace(' ')
                        MethodCall
                          ReferenceExpression: println
                            PsiElement(identifier)('println')
                          ArgumentList
                            PsiElement(()('(')
                            ReferenceExpression: docComment
                              PsiElement(identifier)('docComment')
                            PsiElement())(')')
                    PsiWhiteSpace('  ')
                    PsiComment(comment)('// todo: process & format doc comment')
                    PsiWhiteSpace('\n\n      ')
                    ScFunctionDefinition: flagUnused
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(def)('def')
                      PsiWhiteSpace(' ')
                      PsiElement(identifier)('flagUnused')
                      Parameters
                        ParametersClause
                          PsiElement(()('(')
                          PsiElement())(')')
                      PsiElement(:)(':')
                      PsiWhiteSpace(' ')
                      SimpleType: Unit
                        CodeReferenceElement: Unit
                          PsiElement(identifier)('Unit')
                      PsiWhiteSpace(' ')
                      PsiElement(=)('=')
                      PsiWhiteSpace(' ')
                      MatchStatement
                        MethodCall
                          ReferenceExpression: nextPositionalArg
                            PsiElement(identifier)('nextPositionalArg')
                          ArgumentList
                            PsiElement(()('(')
                            PsiElement())(')')
                        PsiWhiteSpace(' ')
                        PsiElement(match)('match')
                        PsiWhiteSpace('\n        ')
                        CaseClauses
                          CaseClause
                            PsiElement(case)('case')
                            PsiWhiteSpace(' ')
                            ConstructorPattern
                              CodeReferenceElement: Some
                                PsiElement(identifier)('Some')
                              Pattern Argument List
                                PsiElement(()('(')
                                ReferencePattern: arg
                                  PsiElement(identifier)('arg')
                                PsiElement())(')')
                            PsiWhiteSpace(' ')
                            PsiElement(=>)('=>')
                            PsiWhiteSpace('\n          ')
                            BlockOfExpressions
                              MethodCall
                                ReferenceExpression: error
                                  PsiElement(identifier)('error')
                                ArgumentList
                                  PsiElement(()('(')
                                  InterpolatedStringLiteral
                                    InterpolatedExpressionPrefix: s
                                      PsiElement(interpolated string id)('s')
                                    PsiElement(interpolated string)('"unused argument: ')
                                    PsiElement(interpolated string injection)('$')
                                    ReferenceExpression: arg
                                      PsiElement(identifier)('arg')
                                    PsiElement(interpolated string end)('"')
                                  PsiElement())(')')
                              PsiWhiteSpace('\n          ')
                              MethodCall
                                ReferenceExpression: flagUnused
                                  PsiElement(identifier)('flagUnused')
                                ArgumentList
                                  PsiElement(()('(')
                                  PsiElement())(')')
                          PsiWhiteSpace('\n        ')
                          CaseClause
                            PsiElement(case)('case')
                            PsiWhiteSpace(' ')
                            StableElementPattern
                              ReferenceExpression: None
                                PsiElement(identifier)('None')
                            PsiWhiteSpace(' ')
                            PsiElement(=>)('=>')
                            PsiWhiteSpace('\n          ')
                            BlockOfExpressions
                              ForStatement
                                PsiElement(for)('for')
                                PsiWhiteSpace('\n            ')
                                Enumerators
                                  Generator
                                    ReferencePattern: arg
                                      PsiElement(identifier)('arg')
                                    PsiWhiteSpace(' ')
                                    PsiElement(<-)('<-')
                                    PsiWhiteSpace(' ')
                                    ReferenceExpression: args
                                      PsiElement(identifier)('args')
                                  PsiWhiteSpace('\n            ')
                                  Guard
                                    PsiElement(if)('if')
                                    PsiWhiteSpace(' ')
                                    InfixExpression
                                      MethodCall
                                        ReferenceExpression: arg.startsWith
                                          ReferenceExpression: arg
                                            PsiElement(identifier)('arg')
                                          PsiElement(.)('.')
                                          PsiElement(identifier)('startsWith')
                                        ArgumentList
                                          PsiElement(()('(')
                                          StringLiteral
                                            PsiElement(string content)('"--"')
                                          PsiElement())(')')
                                      PsiWhiteSpace(' ')
                                      ReferenceExpression: &&
                                        PsiElement(identifier)('&&')
                                      PsiWhiteSpace(' ')
                                      PrefixExpression
                                        ReferenceExpression: !
                                          PsiElement(identifier)('!')
                                        MethodCall
                                          ReferenceExpression: argInfos.map(_._1).contains
                                            MethodCall
                                              ReferenceExpression: argInfos.map
                                                ReferenceExpression: argInfos
                                                  PsiElement(identifier)('argInfos')
                                                PsiElement(.)('.')
                                                PsiElement(identifier)('map')
                                              ArgumentList
                                                PsiElement(()('(')
                                                ReferenceExpression: _._1
                                                  UnderscoreSection
                                                    PsiElement(_)('_')
                                                  PsiElement(.)('.')
                                                  PsiElement(identifier)('_1')
                                                PsiElement())(')')
                                            PsiElement(.)('.')
                                            PsiElement(identifier)('contains')
                                          ArgumentList
                                            PsiElement(()('(')
                                            MethodCall
                                              ReferenceExpression: arg.drop
                                                ReferenceExpression: arg
                                                  PsiElement(identifier)('arg')
                                                PsiElement(.)('.')
                                                PsiElement(identifier)('drop')
                                              ArgumentList
                                                PsiElement(()('(')
                                                IntegerLiteral
                                                  PsiElement(integer)('2')
                                                PsiElement())(')')
                                            PsiElement())(')')
                                PsiWhiteSpace('\n          ')
                                PsiElement(do)('do')
                                PsiWhiteSpace('\n            ')
                                MethodCall
                                  ReferenceExpression: error
                                    PsiElement(identifier)('error')
                                  ArgumentList
                                    PsiElement(()('(')
                                    InterpolatedStringLiteral
                                      InterpolatedExpressionPrefix: s
                                        PsiElement(interpolated string id)('s')
                                      PsiElement(interpolated string)('"unknown argument name: ')
                                      PsiElement(interpolated string injection)('$')
                                      ReferenceExpression: arg
                                        PsiElement(identifier)('arg')
                                      PsiElement(interpolated string end)('"')
                                    PsiElement())(')')
                      PsiWhiteSpace('\n      ')
                      End: flagUnused
                        PsiElement(end)('end')
                        PsiWhiteSpace(' ')
                        PsiElement(identifier)('flagUnused')
                    PsiWhiteSpace('\n\n      ')
                    IfStatement
                      PsiElement(if)('if')
                      PsiWhiteSpace(' ')
                      InfixExpression
                        ReferenceExpression: args.isEmpty
                          ReferenceExpression: args
                            PsiElement(identifier)('args')
                          PsiElement(.)('.')
                          PsiElement(identifier)('isEmpty')
                        PsiWhiteSpace(' ')
                        ReferenceExpression: ||
                          PsiElement(identifier)('||')
                        PsiWhiteSpace(' ')
                        MethodCall
                          ReferenceExpression: args.contains
                            ReferenceExpression: args
                              PsiElement(identifier)('args')
                            PsiElement(.)('.')
                            PsiElement(identifier)('contains')
                          ArgumentList
                            PsiElement(()('(')
                            StringLiteral
                              PsiElement(string content)('"--help"')
                            PsiElement())(')')
                      PsiWhiteSpace(' ')
                      PsiElement(then)('then')
                      BlockExpression
                        PsiWhiteSpace('\n        ')
                        MethodCall
                          ReferenceExpression: usage
                            PsiElement(identifier)('usage')
                          ArgumentList
                            PsiElement(()('(')
                            PsiElement())(')')
                        PsiWhiteSpace('\n        ')
                        MethodCall
                          ReferenceExpression: explain
                            PsiElement(identifier)('explain')
                          ArgumentList
                            PsiElement(()('(')
                            PsiElement())(')')
                      PsiWhiteSpace('\n      ')
                      PsiElement(else)('else')
                      BlockExpression
                        PsiWhiteSpace('\n        ')
                        MethodCall
                          ReferenceExpression: flagUnused
                            PsiElement(identifier)('flagUnused')
                          ArgumentList
                            PsiElement(()('(')
                            PsiElement())(')')
                        PsiWhiteSpace('\n        ')
                        IfStatement
                          PsiElement(if)('if')
                          PsiWhiteSpace(' ')
                          ReferenceExpression: errors.nonEmpty
                            ReferenceExpression: errors
                              PsiElement(identifier)('errors')
                            PsiElement(.)('.')
                            PsiElement(identifier)('nonEmpty')
                          PsiWhiteSpace(' ')
                          PsiElement(then)('then')
                          BlockExpression
                            PsiWhiteSpace('\n          ')
                            ForStatement
                              PsiElement(for)('for')
                              PsiWhiteSpace(' ')
                              Enumerators
                                Generator
                                  ReferencePattern: msg
                                    PsiElement(identifier)('msg')
                                  PsiWhiteSpace(' ')
                                  PsiElement(<-)('<-')
                                  PsiWhiteSpace(' ')
                                  ReferenceExpression: errors
                                    PsiElement(identifier)('errors')
                              PsiWhiteSpace(' ')
                              PsiElement(do)('do')
                              PsiWhiteSpace(' ')
                              MethodCall
                                ReferenceExpression: println
                                  PsiElement(identifier)('println')
                                ArgumentList
                                  PsiElement(()('(')
                                  InterpolatedStringLiteral
                                    InterpolatedExpressionPrefix: s
                                      PsiElement(interpolated string id)('s')
                                    PsiElement(interpolated string)('"Error: ')
                                    PsiElement(interpolated string injection)('$')
                                    ReferenceExpression: msg
                                      PsiElement(identifier)('msg')
                                    PsiElement(interpolated string end)('"')
                                  PsiElement())(')')
                            PsiWhiteSpace('\n          ')
                            MethodCall
                              ReferenceExpression: usage
                                PsiElement(identifier)('usage')
                              ArgumentList
                                PsiElement(()('(')
                                PsiElement())(')')
                          PsiWhiteSpace('\n        ')
                          PsiElement(else)('else')
                          PsiWhiteSpace(' ')
                          MatchStatement
                            ReferenceExpression: f
                              PsiElement(identifier)('f')
                            PsiWhiteSpace(' ')
                            PsiElement(match)('match')
                            PsiWhiteSpace('\n          ')
                            CaseClauses
                              CaseClause
                                PsiElement(case)('case')
                                PsiWhiteSpace(' ')
                                Scala3 TypedPattern
                                  ReferencePattern: n
                                    PsiElement(identifier)('n')
                                  PsiElement(:)(':')
                                  PsiWhiteSpace(' ')
                                  TypePattern
                                    SimpleType: Int
                                      CodeReferenceElement: Int
                                        PsiElement(identifier)('Int')
                                PsiWhiteSpace(' ')
                                Guard
                                  PsiElement(if)('if')
                                  PsiWhiteSpace(' ')
                                  InfixExpression
                                    ReferenceExpression: n
                                      PsiElement(identifier)('n')
                                    PsiWhiteSpace(' ')
                                    ReferenceExpression: <
                                      PsiElement(identifier)('<')
                                    PsiWhiteSpace(' ')
                                    IntegerLiteral
                                      PsiElement(integer)('0')
                                PsiWhiteSpace(' ')
                                PsiElement(=>)('=>')
                                PsiWhiteSpace(' ')
                                BlockOfExpressions
                                  MethodCall
                                    ReferenceExpression: System.exit
                                      ReferenceExpression: System
                                        PsiElement(identifier)('System')
                                      PsiElement(.)('.')
                                      PsiElement(identifier)('exit')
                                    ArgumentList
                                      PsiElement(()('(')
                                      PrefixExpression
                                        ReferenceExpression: -
                                          PsiElement(identifier)('-')
                                        ReferenceExpression: n
                                          PsiElement(identifier)('n')
                                      PsiElement())(')')
                              PsiWhiteSpace('\n          ')
                              CaseClause
                                PsiElement(case)('case')
                                PsiWhiteSpace(' ')
                                WildcardPattern
                                  PsiElement(_)('_')
                                PsiWhiteSpace(' ')
                                PsiElement(=>)('=>')
                                BlockOfExpressions
                                  <empty list>
                  PsiWhiteSpace('\n    ')
                  End: run
                    PsiElement(end)('end')
                    PsiWhiteSpace(' ')
                    PsiElement(identifier)('run')
          PsiWhiteSpace('\n  ')
          End: command
            PsiElement(end)('end')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('command')
        PsiWhiteSpace('\n')
        End: main
          PsiElement(end)('end')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('main')
  PsiWhiteSpace('\n\n')
  PsiComment(comment)('// Sample main method')
  PsiWhiteSpace('\n\n')
  ScObject: myProgram
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('myProgram')
    ExtendsBlock
      ScTemplateBody
        PsiElement(:)(':')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: add
          DocComment
            ScPsiDocToken(DOC_COMMENT_START)('/**')
            ScDocParagraph
              ScPsiDocToken(DOC_WHITESPACE)(' ')
              ScPsiDocToken(DOC_COMMENT_DATA)('Adds two numbers')
              ScPsiDocToken(DOC_WHITESPACE)(' ')
            ScPsiDocToken(DOC_COMMENT_END)('*/')
          PsiWhiteSpace('\n  ')
          AnnotationsList
            Annotation
              PsiElement(@)('@')
              AnnotationExpression
                ConstructorInvocation
                  SimpleType: main
                    CodeReferenceElement: main
                      PsiElement(identifier)('main')
          Modifiers
            <empty list>
          PsiWhiteSpace(' ')
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('add')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: num
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('num')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Int
                    CodeReferenceElement: Int
                      PsiElement(identifier)('Int')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              Parameter: inc
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('inc')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Int
                    CodeReferenceElement: Int
                      PsiElement(identifier)('Int')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                IntegerLiteral
                  PsiElement(integer)('1')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Unit
            CodeReferenceElement: Unit
              PsiElement(identifier)('Unit')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace('\n    ')
          MethodCall
            ReferenceExpression: println
              PsiElement(identifier)('println')
            ArgumentList
              PsiElement(()('(')
              InterpolatedStringLiteral
                InterpolatedExpressionPrefix: s
                  PsiElement(interpolated string id)('s')
                PsiElement(interpolated string)('"')
                PsiElement(interpolated string injection)('$')
                ReferenceExpression: num
                  PsiElement(identifier)('num')
                PsiElement(interpolated string)(' + ')
                PsiElement(interpolated string injection)('$')
                ReferenceExpression: inc
                  PsiElement(identifier)('inc')
                PsiElement(interpolated string)(' = ')
                PsiElement(interpolated string injection)('$')
                BlockExpression
                  PsiElement({)('{')
                  InfixExpression
                    ReferenceExpression: num
                      PsiElement(identifier)('num')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: +
                      PsiElement(identifier)('+')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: inc
                      PsiElement(identifier)('inc')
                  PsiElement(})('}')
                PsiElement(interpolated string end)('"')
              PsiElement())(')')
        PsiWhiteSpace('\n\n')
        End: myProgram
          PsiElement(end)('end')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('myProgram')
  PsiWhiteSpace('\n\n')
  PsiComment(comment)('//  Compiler generated code:')
  PsiWhiteSpace('\n\n')
  ScObject: add
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('add')
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          SimpleType: main
            CodeReferenceElement: main
              PsiElement(identifier)('main')
      ScTemplateBody
        PsiElement(:)(':')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: main
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('main')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: args
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('args')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  ParametrizedType: Array[String]
                    SimpleType: Array
                      CodeReferenceElement: Array
                        PsiElement(identifier)('Array')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: String
                        CodeReferenceElement: String
                          PsiElement(identifier)('String')
                      PsiElement(])(']')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          BlockExpression
            PsiWhiteSpace('\n    ')
            ScPatternDefinition: cmd
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              ListOfPatterns
                ReferencePattern: cmd
                  PsiElement(identifier)('cmd')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              MethodCall
                ReferenceExpression: command
                  PsiElement(identifier)('command')
                ArgumentList
                  PsiElement(()('(')
                  ReferenceExpression: args
                    PsiElement(identifier)('args')
                  PsiElement())(')')
            PsiWhiteSpace('\n    ')
            ScPatternDefinition: arg1
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              ListOfPatterns
                ReferencePattern: arg1
                  PsiElement(identifier)('arg1')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              MethodCall
                GenericCall
                  ReferenceExpression: cmd.argGetter
                    ReferenceExpression: cmd
                      PsiElement(identifier)('cmd')
                    PsiElement(.)('.')
                    PsiElement(identifier)('argGetter')
                  TypeArgumentsList
                    PsiElement([)('[')
                    SimpleType: Int
                      CodeReferenceElement: Int
                        PsiElement(identifier)('Int')
                    PsiElement(])(']')
                ArgumentList
                  PsiElement(()('(')
                  StringLiteral
                    PsiElement(string content)('"num"')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  GenericCall
                    ReferenceExpression: summon
                      PsiElement(identifier)('summon')
                    TypeArgumentsList
                      PsiElement([)('[')
                      ParametrizedType: ArgumentParser[Int]
                        SimpleType: ArgumentParser
                          CodeReferenceElement: ArgumentParser
                            PsiElement(identifier)('ArgumentParser')
                        TypeArgumentsList
                          PsiElement([)('[')
                          SimpleType: Int
                            CodeReferenceElement: Int
                              PsiElement(identifier)('Int')
                          PsiElement(])(']')
                      PsiElement(])(']')
                  PsiElement())(')')
            PsiWhiteSpace('\n    ')
            ScPatternDefinition: arg2
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              ListOfPatterns
                ReferencePattern: arg2
                  PsiElement(identifier)('arg2')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              MethodCall
                GenericCall
                  ReferenceExpression: cmd.argGetter
                    ReferenceExpression: cmd
                      PsiElement(identifier)('cmd')
                    PsiElement(.)('.')
                    PsiElement(identifier)('argGetter')
                  TypeArgumentsList
                    PsiElement([)('[')
                    SimpleType: Int
                      CodeReferenceElement: Int
                        PsiElement(identifier)('Int')
                    PsiElement(])(']')
                ArgumentList
                  PsiElement(()('(')
                  StringLiteral
                    PsiElement(string content)('"inc"')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  GenericCall
                    ReferenceExpression: summon
                      PsiElement(identifier)('summon')
                    TypeArgumentsList
                      PsiElement([)('[')
                      ParametrizedType: ArgumentParser[Int]
                        SimpleType: ArgumentParser
                          CodeReferenceElement: ArgumentParser
                            PsiElement(identifier)('ArgumentParser')
                        TypeArgumentsList
                          PsiElement([)('[')
                          SimpleType: Int
                            CodeReferenceElement: Int
                              PsiElement(identifier)('Int')
                          PsiElement(])(']')
                      PsiElement(])(']')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  MethodCall
                    ReferenceExpression: Some
                      PsiElement(identifier)('Some')
                    ArgumentList
                      PsiElement(()('(')
                      IntegerLiteral
                        PsiElement(integer)('1')
                      PsiElement())(')')
                  PsiElement())(')')
            PsiWhiteSpace('\n    ')
            MethodCall
              ReferenceExpression: cmd.run
                ReferenceExpression: cmd
                  PsiElement(identifier)('cmd')
                PsiElement(.)('.')
                PsiElement(identifier)('run')
              ArgumentList
                PsiElement(()('(')
                MethodCall
                  ReferenceExpression: myProgram.add
                    ReferenceExpression: myProgram
                      PsiElement(identifier)('myProgram')
                    PsiElement(.)('.')
                    PsiElement(identifier)('add')
                  ArgumentList
                    PsiElement(()('(')
                    MethodCall
                      ReferenceExpression: arg1
                        PsiElement(identifier)('arg1')
                      ArgumentList
                        PsiElement(()('(')
                        PsiElement())(')')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    MethodCall
                      ReferenceExpression: arg2
                        PsiElement(identifier)('arg2')
                      ArgumentList
                        PsiElement(()('(')
                        PsiElement())(')')
                    PsiElement())(')')
                PsiElement(,)(',')
                PsiWhiteSpace(' ')
                StringLiteral
                  PsiElement(string content)('"add"')
                PsiElement(,)(',')
                PsiWhiteSpace(' ')
                StringLiteral
                  PsiElement(string content)('"Adds two numbers"')
                PsiElement())(')')
        PsiWhiteSpace('\n')
        End: add
          PsiElement(end)('end')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('add')
  PsiWhiteSpace('\n\n')
  DocComment
    ScPsiDocToken(DOC_COMMENT_START)('/**')
    ScDocParagraph
      ScPsiDocToken(DOC_WHITESPACE)(' ')
      ScPsiDocToken(DOC_COMMENT_DATA)('--- Some scenarios +')
      ScPsiDocToken(DOC_WHITESPACE)('\n\n')
      ScPsiDocToken(DOC_COMMENT_DATA)('> java add 2 3')
      ScPsiDocToken(DOC_WHITESPACE)('\n')
      ScPsiDocToken(DOC_COMMENT_DATA)('2 + 3 ')
      ScPsiDocToken(DOC_HEADER 256)('=')
      ScPsiDocToken(DOC_COMMENT_DATA)(' 5')
      ScPsiDocToken(DOC_WHITESPACE)('\n')
      ScPsiDocToken(DOC_COMMENT_DATA)('> java add 4')
      ScPsiDocToken(DOC_WHITESPACE)('\n')
      ScPsiDocToken(DOC_COMMENT_DATA)('4 + 1 ')
      ScPsiDocToken(DOC_HEADER 256)('=')
      ScPsiDocToken(DOC_COMMENT_DATA)(' 5')
      ScPsiDocToken(DOC_WHITESPACE)('\n')
      ScPsiDocToken(DOC_COMMENT_DATA)('> java add --num 10 --inc -2')
      ScPsiDocToken(DOC_WHITESPACE)('\n')
      ScPsiDocToken(DOC_COMMENT_DATA)('10 + -2 ')
      ScPsiDocToken(DOC_HEADER 256)('=')
      ScPsiDocToken(DOC_COMMENT_DATA)(' 8')
      ScPsiDocToken(DOC_WHITESPACE)('\n')
      ScPsiDocToken(DOC_COMMENT_DATA)('> java add --num 10')
      ScPsiDocToken(DOC_WHITESPACE)('\n')
      ScPsiDocToken(DOC_COMMENT_DATA)('10 + 1 ')
      ScPsiDocToken(DOC_HEADER 256)('=')
      ScPsiDocToken(DOC_COMMENT_DATA)(' 11')
      ScPsiDocToken(DOC_WHITESPACE)('\n')
      ScPsiDocToken(DOC_COMMENT_DATA)('> java add --help')
      ScPsiDocToken(DOC_WHITESPACE)('\n')
      ScPsiDocToken(DOC_COMMENT_DATA)('Usage: add num inc?')
      ScPsiDocToken(DOC_WHITESPACE)('\n')
      ScPsiDocToken(DOC_COMMENT_DATA)('Adds two numbers')
      ScPsiDocToken(DOC_WHITESPACE)('\n')
      ScPsiDocToken(DOC_COMMENT_DATA)('> java add')
      ScPsiDocToken(DOC_WHITESPACE)('\n')
      ScPsiDocToken(DOC_COMMENT_DATA)('Usage: add num inc?')
      ScPsiDocToken(DOC_WHITESPACE)('\n')
      ScPsiDocToken(DOC_COMMENT_DATA)('Adds two numbers')
      ScPsiDocToken(DOC_WHITESPACE)('\n')
      ScPsiDocToken(DOC_COMMENT_DATA)('> java add 1 2 3 4')
      ScPsiDocToken(DOC_WHITESPACE)('\n')
      ScPsiDocToken(DOC_COMMENT_DATA)('Error: unused argument: 3')
      ScPsiDocToken(DOC_WHITESPACE)('\n')
      ScPsiDocToken(DOC_COMMENT_DATA)('Error: unused argument: 4')
      ScPsiDocToken(DOC_WHITESPACE)('\n')
      ScPsiDocToken(DOC_COMMENT_DATA)('Usage: add num inc?')
      ScPsiDocToken(DOC_WHITESPACE)('\n')
      ScPsiDocToken(DOC_COMMENT_DATA)('> java add -n 1 -i 10')
      ScPsiDocToken(DOC_WHITESPACE)('\n')
      ScPsiDocToken(DOC_COMMENT_DATA)('Error: invalid argument for num: -n')
      ScPsiDocToken(DOC_WHITESPACE)('\n')
      ScPsiDocToken(DOC_COMMENT_DATA)('Error: unused argument: -i')
      ScPsiDocToken(DOC_WHITESPACE)('\n')
      ScPsiDocToken(DOC_COMMENT_DATA)('Error: unused argument: 10')
      ScPsiDocToken(DOC_WHITESPACE)('\n')
      ScPsiDocToken(DOC_COMMENT_DATA)('Usage: add num inc?')
      ScPsiDocToken(DOC_WHITESPACE)('\n')
      ScPsiDocToken(DOC_COMMENT_DATA)('> java add --n 1 --i 10')
      ScPsiDocToken(DOC_WHITESPACE)('\n')
      ScPsiDocToken(DOC_COMMENT_DATA)('Error: missing argument for num')
      ScPsiDocToken(DOC_WHITESPACE)('\n')
      ScPsiDocToken(DOC_COMMENT_DATA)('Error: unknown argument name: --n')
      ScPsiDocToken(DOC_WHITESPACE)('\n')
      ScPsiDocToken(DOC_COMMENT_DATA)('Error: unknown argument name: --i')
      ScPsiDocToken(DOC_WHITESPACE)('\n')
      ScPsiDocToken(DOC_COMMENT_DATA)('Usage: add num inc?')
      ScPsiDocToken(DOC_WHITESPACE)('\n')
      ScPsiDocToken(DOC_COMMENT_DATA)('> java add true 10')
      ScPsiDocToken(DOC_WHITESPACE)('\n')
      ScPsiDocToken(DOC_COMMENT_DATA)('Error: invalid argument for num: true')
      ScPsiDocToken(DOC_WHITESPACE)('\n')
      ScPsiDocToken(DOC_COMMENT_DATA)('Usage: add num inc?')
      ScPsiDocToken(DOC_WHITESPACE)('\n')
      ScPsiDocToken(DOC_COMMENT_DATA)('> java add true false')
      ScPsiDocToken(DOC_WHITESPACE)('\n')
      ScPsiDocToken(DOC_COMMENT_DATA)('Error: invalid argument for num: true')
      ScPsiDocToken(DOC_WHITESPACE)('\n')
      ScPsiDocToken(DOC_COMMENT_DATA)('Error: invalid argument for inc: false')
      ScPsiDocToken(DOC_WHITESPACE)('\n')
      ScPsiDocToken(DOC_COMMENT_DATA)('Usage: add num inc?')
      ScPsiDocToken(DOC_WHITESPACE)('\n')
      ScPsiDocToken(DOC_COMMENT_DATA)('> java add true false 10')
      ScPsiDocToken(DOC_WHITESPACE)('\n')
      ScPsiDocToken(DOC_COMMENT_DATA)('Error: invalid argument for num: true')
      ScPsiDocToken(DOC_WHITESPACE)('\n')
      ScPsiDocToken(DOC_COMMENT_DATA)('Error: invalid argument for inc: false')
      ScPsiDocToken(DOC_WHITESPACE)('\n')
      ScPsiDocToken(DOC_COMMENT_DATA)('Error: unused argument: 10')
      ScPsiDocToken(DOC_WHITESPACE)('\n')
      ScPsiDocToken(DOC_COMMENT_DATA)('Usage: add num inc?')
      ScPsiDocToken(DOC_WHITESPACE)('\n')
      ScPsiDocToken(DOC_COMMENT_DATA)('> java add --inc 10 --num 20')
      ScPsiDocToken(DOC_WHITESPACE)('\n')
      ScPsiDocToken(DOC_COMMENT_DATA)('20 + 10 ')
      ScPsiDocToken(DOC_HEADER 256)('=')
      ScPsiDocToken(DOC_COMMENT_DATA)(' 30')
      ScPsiDocToken(DOC_WHITESPACE)('\n')
      ScPsiDocToken(DOC_COMMENT_DATA)('> java add binary 10 01')
      ScPsiDocToken(DOC_WHITESPACE)('\n')
      ScPsiDocToken(DOC_COMMENT_DATA)('Error: invalid argument for num: binary')
      ScPsiDocToken(DOC_WHITESPACE)('\n')
      ScPsiDocToken(DOC_COMMENT_DATA)('Error: unused argument: 01')
      ScPsiDocToken(DOC_WHITESPACE)('\n')
      ScPsiDocToken(DOC_COMMENT_DATA)('Usage: add num inc?')
      ScPsiDocToken(DOC_WHITESPACE)('\n\n')
    ScPsiDocToken(DOC_COMMENT_END)('*/')
