import reflect.ClassTag
import compiletime.uninitialized
// The same problems arise in real arrays.
class A {

  class Array[T]
  object Array {
    def apply[T: ClassTag](xs: T*): Array[T] = ???
    def apply(x: Int, xs: Int*): Array[Int] = ???
  }

  // Any of Array[List[Symbol]], List[Array[Symbol]], or List[List[Symbol]] compile.
  var xs: Array[Array[Symbol]] = uninitialized
  var ys: Array[Map[Symbol, Set[Symbol]]] = uninitialized

  //xs = Array(Array())
    // gives:
    //
    // isApplicableSafe.scala:15: error: type mismatch:
    // found   : A.this.Array[Nothing]
    // required: A.this.Array[Symbol]
    // xs = Array(Array())
    //
    // Here's the sequence of events that leads to this problem:
    //
    // 1. the outer Array.apply is overloaded, so we need to typecheck the inner one
    //    without an expected prototype
    //
    // 2. The inner Array.apply needs a ClassTag, so we need to instantiate
    //    its type variable, and the best instantiation is Nothing.
    //
    // To prevent this, we'd need to do several things:
    //
    // 1. Pass argument types lazily into the isApplicable call in resolveOverloaded,
    //    so that we can call constrainResult before any arguments are evaluated.
    //
    // 2. This is still not enough because the result type is initially an IgnoredProto.
    //    (because an implicit might have to be inserted around the call, so we cannot
    //     automatically assume that the call result is a subtype of the expected type).
    //    Hence, we need to somehow create a closure in constrainResult that does the
    //    comparison with the real expected result type "on demand".
    //
    // 3. When instantiating a type variable we need to categorize that some instantiations
    //    are suspicous (e.g. scalac avoids instantiating to Nothing). In these
    //    circumstances we should try to excute the delayed constrainResult closures
    //    in order to get a better instance type.
    //
    // Quite a lot of work. It's looking really complicated to fix this.


  ys = Array(Map(), Map())

  val zs = Array(Map())
}
-----
ScalaFile
  ScImportStatement
    PsiElement(import)('import')
    PsiWhiteSpace(' ')
    ImportExpression
      CodeReferenceElement: reflect.ClassTag
        CodeReferenceElement: reflect
          PsiElement(identifier)('reflect')
        PsiElement(.)('.')
        PsiElement(identifier)('ClassTag')
  PsiWhiteSpace('\n')
  ScImportStatement
    PsiElement(import)('import')
    PsiWhiteSpace(' ')
    ImportExpression
      CodeReferenceElement: compiletime.uninitialized
        CodeReferenceElement: compiletime
          PsiElement(identifier)('compiletime')
        PsiElement(.)('.')
        PsiElement(identifier)('uninitialized')
  PsiWhiteSpace('\n')
  ScClass: A
    PsiComment(comment)('// The same problems arise in real arrays.')
    PsiWhiteSpace('\n')
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('A')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n\n  ')
        ScClass: Array
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(class)('class')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Array')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: T
              PsiElement(identifier)('T')
            PsiElement(])(']')
          PrimaryConstructor
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            Parameters
              <empty list>
          ExtendsBlock
            <empty list>
        PsiWhiteSpace('\n  ')
        ScObject: Array
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(object)('object')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Array')
          PsiWhiteSpace(' ')
          ExtendsBlock
            ScTemplateBody
              PsiElement({)('{')
              PsiWhiteSpace('\n    ')
              ScFunctionDefinition: apply
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(def)('def')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('apply')
                TypeParameterClause
                  PsiElement([)('[')
                  TypeParameter: T
                    PsiElement(identifier)('T')
                    PsiElement(:)(':')
                    PsiWhiteSpace(' ')
                    SimpleType: ClassTag
                      CodeReferenceElement: ClassTag
                        PsiElement(identifier)('ClassTag')
                  PsiElement(])(']')
                Parameters
                  ParametersClause
                    PsiElement(()('(')
                    Parameter: xs
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(identifier)('xs')
                      PsiElement(:)(':')
                      PsiWhiteSpace(' ')
                      ParameterType
                        SimpleType: T
                          CodeReferenceElement: T
                            PsiElement(identifier)('T')
                        PsiElement(identifier)('*')
                    PsiElement())(')')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParametrizedType: Array[T]
                  SimpleType: Array
                    CodeReferenceElement: Array
                      PsiElement(identifier)('Array')
                  TypeArgumentsList
                    PsiElement([)('[')
                    SimpleType: T
                      CodeReferenceElement: T
                        PsiElement(identifier)('T')
                    PsiElement(])(']')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                ReferenceExpression: ???
                  PsiElement(identifier)('???')
              PsiWhiteSpace('\n    ')
              ScFunctionDefinition: apply
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(def)('def')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('apply')
                Parameters
                  ParametersClause
                    PsiElement(()('(')
                    Parameter: x
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(identifier)('x')
                      PsiElement(:)(':')
                      PsiWhiteSpace(' ')
                      ParameterType
                        SimpleType: Int
                          CodeReferenceElement: Int
                            PsiElement(identifier)('Int')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    Parameter: xs
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(identifier)('xs')
                      PsiElement(:)(':')
                      PsiWhiteSpace(' ')
                      ParameterType
                        SimpleType: Int
                          CodeReferenceElement: Int
                            PsiElement(identifier)('Int')
                        PsiElement(identifier)('*')
                    PsiElement())(')')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParametrizedType: Array[Int]
                  SimpleType: Array
                    CodeReferenceElement: Array
                      PsiElement(identifier)('Array')
                  TypeArgumentsList
                    PsiElement([)('[')
                    SimpleType: Int
                      CodeReferenceElement: Int
                        PsiElement(identifier)('Int')
                    PsiElement(])(']')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                ReferenceExpression: ???
                  PsiElement(identifier)('???')
              PsiWhiteSpace('\n  ')
              PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        ScVariableDefinition: xs
          PsiComment(comment)('// Any of Array[List[Symbol]], List[Array[Symbol]], or List[List[Symbol]] compile.')
          PsiWhiteSpace('\n  ')
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(var)('var')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: xs
              PsiElement(identifier)('xs')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: Array[Array[Symbol]]
            SimpleType: Array
              CodeReferenceElement: Array
                PsiElement(identifier)('Array')
            TypeArgumentsList
              PsiElement([)('[')
              ParametrizedType: Array[Symbol]
                SimpleType: Array
                  CodeReferenceElement: Array
                    PsiElement(identifier)('Array')
                TypeArgumentsList
                  PsiElement([)('[')
                  SimpleType: Symbol
                    CodeReferenceElement: Symbol
                      PsiElement(identifier)('Symbol')
                  PsiElement(])(']')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: uninitialized
            PsiElement(identifier)('uninitialized')
        PsiWhiteSpace('\n  ')
        ScVariableDefinition: ys
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(var)('var')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: ys
              PsiElement(identifier)('ys')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: Array[Map[Symbol, Set[Symbol]]]
            SimpleType: Array
              CodeReferenceElement: Array
                PsiElement(identifier)('Array')
            TypeArgumentsList
              PsiElement([)('[')
              ParametrizedType: Map[Symbol, Set[Symbol]]
                SimpleType: Map
                  CodeReferenceElement: Map
                    PsiElement(identifier)('Map')
                TypeArgumentsList
                  PsiElement([)('[')
                  SimpleType: Symbol
                    CodeReferenceElement: Symbol
                      PsiElement(identifier)('Symbol')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  ParametrizedType: Set[Symbol]
                    SimpleType: Set
                      CodeReferenceElement: Set
                        PsiElement(identifier)('Set')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: Symbol
                        CodeReferenceElement: Symbol
                          PsiElement(identifier)('Symbol')
                      PsiElement(])(']')
                  PsiElement(])(']')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: uninitialized
            PsiElement(identifier)('uninitialized')
        PsiWhiteSpace('\n\n  ')
        PsiComment(comment)('//xs = Array(Array())')
        PsiWhiteSpace('\n    ')
        PsiComment(comment)('// gives:')
        PsiWhiteSpace('\n    ')
        PsiComment(comment)('//')
        PsiWhiteSpace('\n    ')
        PsiComment(comment)('// isApplicableSafe.scala:15: error: type mismatch:')
        PsiWhiteSpace('\n    ')
        PsiComment(comment)('// found   : A.this.Array[Nothing]')
        PsiWhiteSpace('\n    ')
        PsiComment(comment)('// required: A.this.Array[Symbol]')
        PsiWhiteSpace('\n    ')
        PsiComment(comment)('// xs = Array(Array())')
        PsiWhiteSpace('\n    ')
        PsiComment(comment)('//')
        PsiWhiteSpace('\n    ')
        PsiComment(comment)('// Here's the sequence of events that leads to this problem:')
        PsiWhiteSpace('\n    ')
        PsiComment(comment)('//')
        PsiWhiteSpace('\n    ')
        PsiComment(comment)('// 1. the outer Array.apply is overloaded, so we need to typecheck the inner one')
        PsiWhiteSpace('\n    ')
        PsiComment(comment)('//    without an expected prototype')
        PsiWhiteSpace('\n    ')
        PsiComment(comment)('//')
        PsiWhiteSpace('\n    ')
        PsiComment(comment)('// 2. The inner Array.apply needs a ClassTag, so we need to instantiate')
        PsiWhiteSpace('\n    ')
        PsiComment(comment)('//    its type variable, and the best instantiation is Nothing.')
        PsiWhiteSpace('\n    ')
        PsiComment(comment)('//')
        PsiWhiteSpace('\n    ')
        PsiComment(comment)('// To prevent this, we'd need to do several things:')
        PsiWhiteSpace('\n    ')
        PsiComment(comment)('//')
        PsiWhiteSpace('\n    ')
        PsiComment(comment)('// 1. Pass argument types lazily into the isApplicable call in resolveOverloaded,')
        PsiWhiteSpace('\n    ')
        PsiComment(comment)('//    so that we can call constrainResult before any arguments are evaluated.')
        PsiWhiteSpace('\n    ')
        PsiComment(comment)('//')
        PsiWhiteSpace('\n    ')
        PsiComment(comment)('// 2. This is still not enough because the result type is initially an IgnoredProto.')
        PsiWhiteSpace('\n    ')
        PsiComment(comment)('//    (because an implicit might have to be inserted around the call, so we cannot')
        PsiWhiteSpace('\n    ')
        PsiComment(comment)('//     automatically assume that the call result is a subtype of the expected type).')
        PsiWhiteSpace('\n    ')
        PsiComment(comment)('//    Hence, we need to somehow create a closure in constrainResult that does the')
        PsiWhiteSpace('\n    ')
        PsiComment(comment)('//    comparison with the real expected result type "on demand".')
        PsiWhiteSpace('\n    ')
        PsiComment(comment)('//')
        PsiWhiteSpace('\n    ')
        PsiComment(comment)('// 3. When instantiating a type variable we need to categorize that some instantiations')
        PsiWhiteSpace('\n    ')
        PsiComment(comment)('//    are suspicous (e.g. scalac avoids instantiating to Nothing). In these')
        PsiWhiteSpace('\n    ')
        PsiComment(comment)('//    circumstances we should try to excute the delayed constrainResult closures')
        PsiWhiteSpace('\n    ')
        PsiComment(comment)('//    in order to get a better instance type.')
        PsiWhiteSpace('\n    ')
        PsiComment(comment)('//')
        PsiWhiteSpace('\n    ')
        PsiComment(comment)('// Quite a lot of work. It's looking really complicated to fix this.')
        PsiWhiteSpace('\n\n\n  ')
        AssignStatement
          ReferenceExpression: ys
            PsiElement(identifier)('ys')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: Array
              PsiElement(identifier)('Array')
            ArgumentList
              PsiElement(()('(')
              MethodCall
                ReferenceExpression: Map
                  PsiElement(identifier)('Map')
                ArgumentList
                  PsiElement(()('(')
                  PsiElement())(')')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              MethodCall
                ReferenceExpression: Map
                  PsiElement(identifier)('Map')
                ArgumentList
                  PsiElement(()('(')
                  PsiElement())(')')
              PsiElement())(')')
        PsiWhiteSpace('\n\n  ')
        ScPatternDefinition: zs
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: zs
              PsiElement(identifier)('zs')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: Array
              PsiElement(identifier)('Array')
            ArgumentList
              PsiElement(()('(')
              MethodCall
                ReferenceExpression: Map
                  PsiElement(identifier)('Map')
                ArgumentList
                  PsiElement(()('(')
                  PsiElement())(')')
              PsiElement())(')')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
