object Main {
  class NonGeneric {}
  class Generic[T] {}

  class Composite {
    def contains(setup : Composite => Unit) : Composite = this
  }

  def generic[T](parent: Composite): Generic[T] = new Generic[T]
  def nonGeneric(parent: Composite): NonGeneric = new NonGeneric

  new Composite().contains(
    nonGeneric // should have type Composite => NonGeneric
  )

  new Composite().contains(
    generic[Int] // should have type Composite => Generic[Int]
  )
}
-----
ScalaFile
  ScObject: Main
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Main')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScClass: NonGeneric
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(class)('class')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('NonGeneric')
          PrimaryConstructor
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            Parameters
              <empty list>
          PsiWhiteSpace(' ')
          ExtendsBlock
            ScTemplateBody
              PsiElement({)('{')
              PsiElement(})('}')
        PsiWhiteSpace('\n  ')
        ScClass: Generic
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(class)('class')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Generic')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: T
              PsiElement(identifier)('T')
            PsiElement(])(']')
          PrimaryConstructor
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            Parameters
              <empty list>
          PsiWhiteSpace(' ')
          ExtendsBlock
            ScTemplateBody
              PsiElement({)('{')
              PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        ScClass: Composite
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(class)('class')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Composite')
          PrimaryConstructor
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            Parameters
              <empty list>
          PsiWhiteSpace(' ')
          ExtendsBlock
            ScTemplateBody
              PsiElement({)('{')
              PsiWhiteSpace('\n    ')
              ScFunctionDefinition: contains
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(def)('def')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('contains')
                Parameters
                  ParametersClause
                    PsiElement(()('(')
                    Parameter: setup
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(identifier)('setup')
                      PsiWhiteSpace(' ')
                      PsiElement(:)(':')
                      PsiWhiteSpace(' ')
                      ParameterType
                        FunctionalType: Composite => Unit
                          SimpleType: Composite
                            CodeReferenceElement: Composite
                              PsiElement(identifier)('Composite')
                          PsiWhiteSpace(' ')
                          PsiElement(=>)('=>')
                          PsiWhiteSpace(' ')
                          SimpleType: Unit
                            CodeReferenceElement: Unit
                              PsiElement(identifier)('Unit')
                    PsiElement())(')')
                PsiWhiteSpace(' ')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                SimpleType: Composite
                  CodeReferenceElement: Composite
                    PsiElement(identifier)('Composite')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                ThisReference
                  PsiElement(this)('this')
              PsiWhiteSpace('\n  ')
              PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: generic
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('generic')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: T
              PsiElement(identifier)('T')
            PsiElement(])(']')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: parent
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('parent')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Composite
                    CodeReferenceElement: Composite
                      PsiElement(identifier)('Composite')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: Generic[T]
            SimpleType: Generic
              CodeReferenceElement: Generic
                PsiElement(identifier)('Generic')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: T
                CodeReferenceElement: T
                  PsiElement(identifier)('T')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ScNewTemplateDefinition: <anonymous>
            PsiElement(new)('new')
            PsiWhiteSpace(' ')
            ExtendsBlock
              TemplateParents
                ConstructorInvocation
                  ParametrizedType: Generic[T]
                    SimpleType: Generic
                      CodeReferenceElement: Generic
                        PsiElement(identifier)('Generic')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: T
                        CodeReferenceElement: T
                          PsiElement(identifier)('T')
                      PsiElement(])(']')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: nonGeneric
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('nonGeneric')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: parent
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('parent')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Composite
                    CodeReferenceElement: Composite
                      PsiElement(identifier)('Composite')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: NonGeneric
            CodeReferenceElement: NonGeneric
              PsiElement(identifier)('NonGeneric')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ScNewTemplateDefinition: <anonymous>
            PsiElement(new)('new')
            PsiWhiteSpace(' ')
            ExtendsBlock
              TemplateParents
                ConstructorInvocation
                  SimpleType: NonGeneric
                    CodeReferenceElement: NonGeneric
                      PsiElement(identifier)('NonGeneric')
        PsiWhiteSpace('\n\n  ')
        MethodCall
          ReferenceExpression: new Composite().contains
            ScNewTemplateDefinition: <anonymous>
              PsiElement(new)('new')
              PsiWhiteSpace(' ')
              ExtendsBlock
                TemplateParents
                  ConstructorInvocation
                    SimpleType: Composite
                      CodeReferenceElement: Composite
                        PsiElement(identifier)('Composite')
                    ArgumentList
                      PsiElement(()('(')
                      PsiElement())(')')
            PsiElement(.)('.')
            PsiElement(identifier)('contains')
          ArgumentList
            PsiElement(()('(')
            PsiWhiteSpace('\n    ')
            ReferenceExpression: nonGeneric
              PsiElement(identifier)('nonGeneric')
            PsiWhiteSpace(' ')
            PsiComment(comment)('// should have type Composite => NonGeneric')
            PsiWhiteSpace('\n  ')
            PsiElement())(')')
        PsiWhiteSpace('\n\n  ')
        MethodCall
          ReferenceExpression: new Composite().contains
            ScNewTemplateDefinition: <anonymous>
              PsiElement(new)('new')
              PsiWhiteSpace(' ')
              ExtendsBlock
                TemplateParents
                  ConstructorInvocation
                    SimpleType: Composite
                      CodeReferenceElement: Composite
                        PsiElement(identifier)('Composite')
                    ArgumentList
                      PsiElement(()('(')
                      PsiElement())(')')
            PsiElement(.)('.')
            PsiElement(identifier)('contains')
          ArgumentList
            PsiElement(()('(')
            PsiWhiteSpace('\n    ')
            GenericCall
              ReferenceExpression: generic
                PsiElement(identifier)('generic')
              TypeArgumentsList
                PsiElement([)('[')
                SimpleType: Int
                  CodeReferenceElement: Int
                    PsiElement(identifier)('Int')
                PsiElement(])(']')
            PsiWhiteSpace(' ')
            PsiComment(comment)('// should have type Composite => Generic[Int]')
            PsiWhiteSpace('\n  ')
            PsiElement())(')')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
