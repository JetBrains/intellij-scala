

import collection.immutable.*



object Test {
  def main(args: Array[String]): Unit = {
    val treemap = TreeMap(1 -> 2, 3 -> 4) ++ TreeMap(5 -> 6)
    (treemap: TreeMap[Int, Int])
  }
}
-----
ScalaFile
  ScImportStatement
    PsiElement(import)('import')
    PsiWhiteSpace(' ')
    ImportExpression
      CodeReferenceElement: collection.immutable
        CodeReferenceElement: collection
          PsiElement(identifier)('collection')
        PsiElement(.)('.')
        PsiElement(identifier)('immutable')
      PsiElement(.)('.')
      PsiElement(*)('*')
  PsiWhiteSpace('\n\n\n\n')
  ScObject: Test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: main
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('main')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: args
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('args')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  ParametrizedType: Array[String]
                    SimpleType: Array
                      CodeReferenceElement: Array
                        PsiElement(identifier)('Array')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: String
                        CodeReferenceElement: String
                          PsiElement(identifier)('String')
                      PsiElement(])(']')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Unit
            CodeReferenceElement: Unit
              PsiElement(identifier)('Unit')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          BlockExpression
            PsiElement({)('{')
            PsiWhiteSpace('\n    ')
            ScPatternDefinition: treemap
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              ListOfPatterns
                ReferencePattern: treemap
                  PsiElement(identifier)('treemap')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              InfixExpression
                MethodCall
                  ReferenceExpression: TreeMap
                    PsiElement(identifier)('TreeMap')
                  ArgumentList
                    PsiElement(()('(')
                    InfixExpression
                      IntegerLiteral
                        PsiElement(integer)('1')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: ->
                        PsiElement(identifier)('->')
                      PsiWhiteSpace(' ')
                      IntegerLiteral
                        PsiElement(integer)('2')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    InfixExpression
                      IntegerLiteral
                        PsiElement(integer)('3')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: ->
                        PsiElement(identifier)('->')
                      PsiWhiteSpace(' ')
                      IntegerLiteral
                        PsiElement(integer)('4')
                    PsiElement())(')')
                PsiWhiteSpace(' ')
                ReferenceExpression: ++
                  PsiElement(identifier)('++')
                PsiWhiteSpace(' ')
                MethodCall
                  ReferenceExpression: TreeMap
                    PsiElement(identifier)('TreeMap')
                  ArgumentList
                    PsiElement(()('(')
                    InfixExpression
                      IntegerLiteral
                        PsiElement(integer)('5')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: ->
                        PsiElement(identifier)('->')
                      PsiWhiteSpace(' ')
                      IntegerLiteral
                        PsiElement(integer)('6')
                    PsiElement())(')')
            PsiWhiteSpace('\n    ')
            ExpressionInParenthesis
              PsiElement(()('(')
              TypedExpression
                ReferenceExpression: treemap
                  PsiElement(identifier)('treemap')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParametrizedType: TreeMap[Int, Int]
                  SimpleType: TreeMap
                    CodeReferenceElement: TreeMap
                      PsiElement(identifier)('TreeMap')
                  TypeArgumentsList
                    PsiElement([)('[')
                    SimpleType: Int
                      CodeReferenceElement: Int
                        PsiElement(identifier)('Int')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    SimpleType: Int
                      CodeReferenceElement: Int
                        PsiElement(identifier)('Int')
                    PsiElement(])(']')
              PsiElement())(')')
            PsiWhiteSpace('\n  ')
            PsiElement(})('}')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
