// exercise coevolveSym: ThisType
trait HasA { type A }
class AA[T] {
  type HasAT[T] = HasA{ type A = T }
  val x: HasAT[T] = ???
  def foo: x.A = ???
}

class B extends AA[Int] {
  override def foo: B.this.x.A = super.foo
}
-----
ScalaFile
  ScTrait: HasA
    PsiComment(comment)('// exercise coevolveSym: ThisType')
    PsiWhiteSpace('\n')
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('HasA')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace(' ')
        ScTypeAliasDeclaration: A
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('A')
        PsiWhiteSpace(' ')
        PsiElement(})('}')
  PsiWhiteSpace('\n')
  ScClass: AA
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('AA')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: T
        PsiElement(identifier)('T')
      PsiElement(])(']')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScTypeAliasDefinition: HasAT
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('HasAT')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: T
              PsiElement(identifier)('T')
            PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          CompoundType: HasA{ type A = T }
            SimpleType: HasA
              CodeReferenceElement: HasA
                PsiElement(identifier)('HasA')
            Refinement
              PsiElement({)('{')
              PsiWhiteSpace(' ')
              ScTypeAliasDefinition: A
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(type)('type')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('A')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                SimpleType: T
                  CodeReferenceElement: T
                    PsiElement(identifier)('T')
              PsiWhiteSpace(' ')
              PsiElement(})('}')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: x
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: x
              PsiElement(identifier)('x')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: HasAT[T]
            SimpleType: HasAT
              CodeReferenceElement: HasAT
                PsiElement(identifier)('HasAT')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: T
                CodeReferenceElement: T
                  PsiElement(identifier)('T')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: ???
            PsiElement(identifier)('???')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: foo
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('foo')
          Parameters
            <empty list>
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: x.A
            CodeReferenceElement: x.A
              CodeReferenceElement: x
                PsiElement(identifier)('x')
              PsiElement(.)('.')
              PsiElement(identifier)('A')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: ???
            PsiElement(identifier)('???')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScClass: B
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('B')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          ParametrizedType: AA[Int]
            SimpleType: AA
              CodeReferenceElement: AA
                PsiElement(identifier)('AA')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: Int
                CodeReferenceElement: Int
                  PsiElement(identifier)('Int')
              PsiElement(])(']')
      PsiWhiteSpace(' ')
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: foo
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(override)('override')
          PsiWhiteSpace(' ')
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('foo')
          Parameters
            <empty list>
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: B.this.x.A
            CodeReferenceElement: B.this.x.A
              CodeReferenceElement: B.this.x
                ThisReference
                  CodeReferenceElement: B
                    PsiElement(identifier)('B')
                  PsiElement(.)('.')
                  PsiElement(this)('this')
                PsiElement(.)('.')
                PsiElement(identifier)('x')
              PsiElement(.)('.')
              PsiElement(identifier)('A')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: super.foo
            SuperReference
              PsiElement(super)('super')
            PsiElement(.)('.')
            PsiElement(identifier)('foo')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
