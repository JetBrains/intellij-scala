object Test {
  def second[sA, sB <: sA](foo: sA, bar: sB): sB = bar
  def third[A, B >: A](foo: A, bar: B): B = bar
  def expectString(s: String) = s

  def test = {
    val x = second(Set.empty[String], Set.empty)
    x map expectString
    second(Set.empty[String], Set.empty) map expectString
    third(Set.empty[String], Set.empty) map expectString
  }
}
-----
ScalaFile
  ScObject: Test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: second
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('second')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: sA
              PsiElement(identifier)('sA')
            PsiElement(,)(',')
            PsiWhiteSpace(' ')
            TypeParameter: sB
              PsiElement(identifier)('sB')
              PsiWhiteSpace(' ')
              PsiElement(<:)('<:')
              PsiWhiteSpace(' ')
              SimpleType: sA
                CodeReferenceElement: sA
                  PsiElement(identifier)('sA')
            PsiElement(])(']')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: foo
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('foo')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: sA
                    CodeReferenceElement: sA
                      PsiElement(identifier)('sA')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              Parameter: bar
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('bar')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: sB
                    CodeReferenceElement: sB
                      PsiElement(identifier)('sB')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: sB
            CodeReferenceElement: sB
              PsiElement(identifier)('sB')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: bar
            PsiElement(identifier)('bar')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: third
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('third')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: A
              PsiElement(identifier)('A')
            PsiElement(,)(',')
            PsiWhiteSpace(' ')
            TypeParameter: B
              PsiElement(identifier)('B')
              PsiWhiteSpace(' ')
              PsiElement(>:)('>:')
              PsiWhiteSpace(' ')
              SimpleType: A
                CodeReferenceElement: A
                  PsiElement(identifier)('A')
            PsiElement(])(']')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: foo
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('foo')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: A
                    CodeReferenceElement: A
                      PsiElement(identifier)('A')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              Parameter: bar
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('bar')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: B
                    CodeReferenceElement: B
                      PsiElement(identifier)('B')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: B
            CodeReferenceElement: B
              PsiElement(identifier)('B')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: bar
            PsiElement(identifier)('bar')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: expectString
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('expectString')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: s
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('s')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: String
                    CodeReferenceElement: String
                      PsiElement(identifier)('String')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: s
            PsiElement(identifier)('s')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: test
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('test')
          Parameters
            <empty list>
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          BlockExpression
            PsiElement({)('{')
            PsiWhiteSpace('\n    ')
            ScPatternDefinition: x
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              ListOfPatterns
                ReferencePattern: x
                  PsiElement(identifier)('x')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              MethodCall
                ReferenceExpression: second
                  PsiElement(identifier)('second')
                ArgumentList
                  PsiElement(()('(')
                  GenericCall
                    ReferenceExpression: Set.empty
                      ReferenceExpression: Set
                        PsiElement(identifier)('Set')
                      PsiElement(.)('.')
                      PsiElement(identifier)('empty')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: String
                        CodeReferenceElement: String
                          PsiElement(identifier)('String')
                      PsiElement(])(']')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: Set.empty
                    ReferenceExpression: Set
                      PsiElement(identifier)('Set')
                    PsiElement(.)('.')
                    PsiElement(identifier)('empty')
                  PsiElement())(')')
            PsiWhiteSpace('\n    ')
            InfixExpression
              ReferenceExpression: x
                PsiElement(identifier)('x')
              PsiWhiteSpace(' ')
              ReferenceExpression: map
                PsiElement(identifier)('map')
              PsiWhiteSpace(' ')
              ReferenceExpression: expectString
                PsiElement(identifier)('expectString')
            PsiWhiteSpace('\n    ')
            InfixExpression
              MethodCall
                ReferenceExpression: second
                  PsiElement(identifier)('second')
                ArgumentList
                  PsiElement(()('(')
                  GenericCall
                    ReferenceExpression: Set.empty
                      ReferenceExpression: Set
                        PsiElement(identifier)('Set')
                      PsiElement(.)('.')
                      PsiElement(identifier)('empty')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: String
                        CodeReferenceElement: String
                          PsiElement(identifier)('String')
                      PsiElement(])(']')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: Set.empty
                    ReferenceExpression: Set
                      PsiElement(identifier)('Set')
                    PsiElement(.)('.')
                    PsiElement(identifier)('empty')
                  PsiElement())(')')
              PsiWhiteSpace(' ')
              ReferenceExpression: map
                PsiElement(identifier)('map')
              PsiWhiteSpace(' ')
              ReferenceExpression: expectString
                PsiElement(identifier)('expectString')
            PsiWhiteSpace('\n    ')
            InfixExpression
              MethodCall
                ReferenceExpression: third
                  PsiElement(identifier)('third')
                ArgumentList
                  PsiElement(()('(')
                  GenericCall
                    ReferenceExpression: Set.empty
                      ReferenceExpression: Set
                        PsiElement(identifier)('Set')
                      PsiElement(.)('.')
                      PsiElement(identifier)('empty')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: String
                        CodeReferenceElement: String
                          PsiElement(identifier)('String')
                      PsiElement(])(']')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: Set.empty
                    ReferenceExpression: Set
                      PsiElement(identifier)('Set')
                    PsiElement(.)('.')
                    PsiElement(identifier)('empty')
                  PsiElement())(')')
              PsiWhiteSpace(' ')
              ReferenceExpression: map
                PsiElement(identifier)('map')
              PsiWhiteSpace(' ')
              ReferenceExpression: expectString
                PsiElement(identifier)('expectString')
            PsiWhiteSpace('\n  ')
            PsiElement(})('}')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
