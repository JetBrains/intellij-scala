trait Trait { self =>
  private case class CC(name: String)

  def m = {
    // The type of this Apply after .widenDealias is an AndType:
    // TypeRef(AndType(
    //   TypeRef(ThisType(TypeRef(NoPrefix,<empty>)),Trait),
    //   ThisType(TypeRef(ThisType(TypeRef(NoPrefix,<empty>)),Trait))
    // ), CC)
    // Which cannot be used as is in a New....

    val a = CC("")
    println(a)
    ()
  }
}
-----
ScalaFile
  ScTrait: Trait
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Trait')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace(' ')
        SelfType: self
          PsiElement(identifier)('self')
          PsiWhiteSpace(' ')
          PsiElement(=>)('=>')
        PsiWhiteSpace('\n  ')
        ScClass: CC
          AnnotationsList
            <empty list>
          Modifiers
            AccessModifier
              PsiElement(private)('private')
            PsiWhiteSpace(' ')
            PsiElement(case)('case')
          PsiWhiteSpace(' ')
          PsiElement(class)('class')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('CC')
          PrimaryConstructor
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            Parameters
              ParametersClause
                PsiElement(()('(')
                ClassParameter: name
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(identifier)('name')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    SimpleType: String
                      CodeReferenceElement: String
                        PsiElement(identifier)('String')
                PsiElement())(')')
          ExtendsBlock
            <empty list>
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: m
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('m')
          Parameters
            <empty list>
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          BlockExpression
            PsiElement({)('{')
            PsiWhiteSpace('\n    ')
            PsiComment(comment)('// The type of this Apply after .widenDealias is an AndType:')
            PsiWhiteSpace('\n    ')
            PsiComment(comment)('// TypeRef(AndType(')
            PsiWhiteSpace('\n    ')
            PsiComment(comment)('//   TypeRef(ThisType(TypeRef(NoPrefix,<empty>)),Trait),')
            PsiWhiteSpace('\n    ')
            PsiComment(comment)('//   ThisType(TypeRef(ThisType(TypeRef(NoPrefix,<empty>)),Trait))')
            PsiWhiteSpace('\n    ')
            PsiComment(comment)('// ), CC)')
            PsiWhiteSpace('\n    ')
            PsiComment(comment)('// Which cannot be used as is in a New....')
            PsiWhiteSpace('\n\n    ')
            ScPatternDefinition: a
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              ListOfPatterns
                ReferencePattern: a
                  PsiElement(identifier)('a')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              MethodCall
                ReferenceExpression: CC
                  PsiElement(identifier)('CC')
                ArgumentList
                  PsiElement(()('(')
                  StringLiteral
                    PsiElement(string content)('""')
                  PsiElement())(')')
            PsiWhiteSpace('\n    ')
            MethodCall
              ReferenceExpression: println
                PsiElement(identifier)('println')
              ArgumentList
                PsiElement(()('(')
                ReferenceExpression: a
                  PsiElement(identifier)('a')
                PsiElement())(')')
            PsiWhiteSpace('\n    ')
            UnitExpression
              PsiElement(()('(')
              PsiElement())(')')
            PsiWhiteSpace('\n  ')
            PsiElement(})('}')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
