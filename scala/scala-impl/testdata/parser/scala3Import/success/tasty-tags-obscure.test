object ObscureTasty:

  def foo(f: [t] => List[t] ?=> Unit) = ???
  def test1 = foo([t] => (a: List[t]) ?=> ()) // POLYtype => GIVENMETHODType
  def bar(f: [t] => List[t] => Unit) = ???
  def test2 = bar([t] => (a: List[t]) => ()) // POLYtype => METHODType

  class Bar:
    final val bar = "Bar.bar"

  class Foo extends Bar:
    object A:
      def unapply(a: Any): Some[Foo.super.bar.type] = ???

    def foo =
      "" match
        case A(x) => x // SUPERtype
-----
ScalaFile
  ScObject: ObscureTasty
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('ObscureTasty')
    ExtendsBlock
      ScTemplateBody
        PsiElement(:)(':')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: foo
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('foo')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: f
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('f')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  PolymorhicFunctionType: [t] => List[t] ?=> Unit
                    TypeParameterClause
                      PsiElement([)('[')
                      TypeParameter: t
                        PsiElement(identifier)('t')
                      PsiElement(])(']')
                    PsiWhiteSpace(' ')
                    PsiElement(=>)('=>')
                    PsiWhiteSpace(' ')
                    FunctionalType: List[t] ?=> Unit
                      ParametrizedType: List[t]
                        SimpleType: List
                          CodeReferenceElement: List
                            PsiElement(identifier)('List')
                        TypeArgumentsList
                          PsiElement([)('[')
                          SimpleType: t
                            CodeReferenceElement: t
                              PsiElement(identifier)('t')
                          PsiElement(])(']')
                      PsiWhiteSpace(' ')
                      PsiElement(?=>)('?=>')
                      PsiWhiteSpace(' ')
                      SimpleType: Unit
                        CodeReferenceElement: Unit
                          PsiElement(identifier)('Unit')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: ???
            PsiElement(identifier)('???')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: test1
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('test1')
          Parameters
            <empty list>
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: foo
              PsiElement(identifier)('foo')
            ArgumentList
              PsiElement(()('(')
              PolyFunctionExpression
                TypeParameterClause
                  PsiElement([)('[')
                  TypeParameter: t
                    PsiElement(identifier)('t')
                  PsiElement(])(']')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                FunctionExpression
                  Parameters
                    ParametersClause
                      PsiElement(()('(')
                      Parameter: a
                        AnnotationsList
                          <empty list>
                        PsiElement(identifier)('a')
                        PsiElement(:)(':')
                        PsiWhiteSpace(' ')
                        ParameterType
                          ParametrizedType: List[t]
                            SimpleType: List
                              CodeReferenceElement: List
                                PsiElement(identifier)('List')
                            TypeArgumentsList
                              PsiElement([)('[')
                              SimpleType: t
                                CodeReferenceElement: t
                                  PsiElement(identifier)('t')
                              PsiElement(])(']')
                      PsiElement())(')')
                  PsiWhiteSpace(' ')
                  PsiElement(?=>)('?=>')
                  PsiWhiteSpace(' ')
                  UnitExpression
                    PsiElement(()('(')
                    PsiElement())(')')
              PsiElement())(')')
        PsiWhiteSpace(' ')
        PsiComment(comment)('// POLYtype => GIVENMETHODType')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: bar
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('bar')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: f
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('f')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  PolymorhicFunctionType: [t] => List[t] => Unit
                    TypeParameterClause
                      PsiElement([)('[')
                      TypeParameter: t
                        PsiElement(identifier)('t')
                      PsiElement(])(']')
                    PsiWhiteSpace(' ')
                    PsiElement(=>)('=>')
                    PsiWhiteSpace(' ')
                    FunctionalType: List[t] => Unit
                      ParametrizedType: List[t]
                        SimpleType: List
                          CodeReferenceElement: List
                            PsiElement(identifier)('List')
                        TypeArgumentsList
                          PsiElement([)('[')
                          SimpleType: t
                            CodeReferenceElement: t
                              PsiElement(identifier)('t')
                          PsiElement(])(']')
                      PsiWhiteSpace(' ')
                      PsiElement(=>)('=>')
                      PsiWhiteSpace(' ')
                      SimpleType: Unit
                        CodeReferenceElement: Unit
                          PsiElement(identifier)('Unit')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: ???
            PsiElement(identifier)('???')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: test2
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('test2')
          Parameters
            <empty list>
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: bar
              PsiElement(identifier)('bar')
            ArgumentList
              PsiElement(()('(')
              PolyFunctionExpression
                TypeParameterClause
                  PsiElement([)('[')
                  TypeParameter: t
                    PsiElement(identifier)('t')
                  PsiElement(])(']')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                FunctionExpression
                  Parameters
                    ParametersClause
                      PsiElement(()('(')
                      Parameter: a
                        AnnotationsList
                          <empty list>
                        PsiElement(identifier)('a')
                        PsiElement(:)(':')
                        PsiWhiteSpace(' ')
                        ParameterType
                          ParametrizedType: List[t]
                            SimpleType: List
                              CodeReferenceElement: List
                                PsiElement(identifier)('List')
                            TypeArgumentsList
                              PsiElement([)('[')
                              SimpleType: t
                                CodeReferenceElement: t
                                  PsiElement(identifier)('t')
                              PsiElement(])(']')
                      PsiElement())(')')
                  PsiWhiteSpace(' ')
                  PsiElement(=>)('=>')
                  PsiWhiteSpace(' ')
                  UnitExpression
                    PsiElement(()('(')
                    PsiElement())(')')
              PsiElement())(')')
        PsiWhiteSpace(' ')
        PsiComment(comment)('// POLYtype => METHODType')
        PsiWhiteSpace('\n\n  ')
        ScClass: Bar
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(class)('class')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Bar')
          PrimaryConstructor
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            Parameters
              <empty list>
          ExtendsBlock
            ScTemplateBody
              PsiElement(:)(':')
              PsiWhiteSpace('\n    ')
              ScPatternDefinition: bar
                AnnotationsList
                  <empty list>
                Modifiers
                  PsiElement(final)('final')
                PsiWhiteSpace(' ')
                PsiElement(val)('val')
                PsiWhiteSpace(' ')
                ListOfPatterns
                  ReferencePattern: bar
                    PsiElement(identifier)('bar')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                StringLiteral
                  PsiElement(string content)('"Bar.bar"')
        PsiWhiteSpace('\n\n  ')
        ScClass: Foo
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(class)('class')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Foo')
          PrimaryConstructor
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            Parameters
              <empty list>
          PsiWhiteSpace(' ')
          ExtendsBlock
            PsiElement(extends)('extends')
            PsiWhiteSpace(' ')
            TemplateParents
              ConstructorInvocation
                SimpleType: Bar
                  CodeReferenceElement: Bar
                    PsiElement(identifier)('Bar')
            ScTemplateBody
              PsiElement(:)(':')
              PsiWhiteSpace('\n    ')
              ScObject: A
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(object)('object')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('A')
                ExtendsBlock
                  ScTemplateBody
                    PsiElement(:)(':')
                    PsiWhiteSpace('\n      ')
                    ScFunctionDefinition: unapply
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(def)('def')
                      PsiWhiteSpace(' ')
                      PsiElement(identifier)('unapply')
                      Parameters
                        ParametersClause
                          PsiElement(()('(')
                          Parameter: a
                            AnnotationsList
                              <empty list>
                            Modifiers
                              <empty list>
                            PsiElement(identifier)('a')
                            PsiElement(:)(':')
                            PsiWhiteSpace(' ')
                            ParameterType
                              SimpleType: Any
                                CodeReferenceElement: Any
                                  PsiElement(identifier)('Any')
                          PsiElement())(')')
                      PsiElement(:)(':')
                      PsiWhiteSpace(' ')
                      ParametrizedType: Some[Foo.super.bar.type]
                        SimpleType: Some
                          CodeReferenceElement: Some
                            PsiElement(identifier)('Some')
                        TypeArgumentsList
                          PsiElement([)('[')
                          SimpleType: Foo.super.bar.type
                            CodeReferenceElement: Foo.super.bar
                              SuperReference
                                CodeReferenceElement: Foo
                                  PsiElement(identifier)('Foo')
                                PsiElement(.)('.')
                                PsiElement(super)('super')
                              PsiElement(.)('.')
                              PsiElement(identifier)('bar')
                            PsiElement(.)('.')
                            PsiElement(type)('type')
                          PsiElement(])(']')
                      PsiWhiteSpace(' ')
                      PsiElement(=)('=')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: ???
                        PsiElement(identifier)('???')
              PsiWhiteSpace('\n\n    ')
              ScFunctionDefinition: foo
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(def)('def')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('foo')
                Parameters
                  <empty list>
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace('\n      ')
                MatchStatement
                  StringLiteral
                    PsiElement(string content)('""')
                  PsiWhiteSpace(' ')
                  PsiElement(match)('match')
                  PsiWhiteSpace('\n        ')
                  CaseClauses
                    CaseClause
                      PsiElement(case)('case')
                      PsiWhiteSpace(' ')
                      ConstructorPattern
                        CodeReferenceElement: A
                          PsiElement(identifier)('A')
                        Pattern Argument List
                          PsiElement(()('(')
                          ReferencePattern: x
                            PsiElement(identifier)('x')
                          PsiElement())(')')
                      PsiWhiteSpace(' ')
                      PsiElement(=>)('=>')
                      PsiWhiteSpace(' ')
                      BlockOfExpressions
                        ReferenceExpression: x
                          PsiElement(identifier)('x')
  PsiWhiteSpace(' ')
  PsiComment(comment)('// SUPERtype')
