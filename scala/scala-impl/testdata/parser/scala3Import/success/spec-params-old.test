class Foo[@specialized A: scala.reflect.ClassManifest] {

  // conflicting in bounds, expect a normalized member calling m
  // and bridge + implementation in specialized subclasses
  // and overloads here according to specialization on A
  def m1[@specialized B <: A](x: B, y: A) =
    goal(x)

  // conflicting, unsolvable, expect a warning
  def m2[@specialized B <: String](x: B) = x.concat("a")

  // conflicting in bounds, no mention of other spec members
  // expect an overload here plus implementation in
  // compatible specialized subclasses
  def m3[@specialized B >: A](x: B) = ()

  // non-conflicting, expect a normalized overload implementation here
  def m4[@specialized T, U <: Ordered[T]](x: T, y: U) = ()

  // non-conflicting, expect a normalized overload implementation here
  def m5[@specialized B](x: B) = x

  // non-conflicting, expect a normalized implementation here
  // and specialized implementations for all expansions in specialized subclasses
  def m6[@specialized B](x: B, y: A) =
    goal(y)

  def goal(x: A) = {
    val xs = new Array[A](1)
    xs(0) = x
  }
}
-----
ScalaFile
  ScClass: Foo
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Foo')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: A
        AnnotationsList
          Annotation
            PsiElement(@)('@')
            AnnotationExpression
              ConstructorInvocation
                SimpleType: specialized
                  CodeReferenceElement: specialized
                    PsiElement(identifier)('specialized')
        PsiWhiteSpace(' ')
        PsiElement(identifier)('A')
        PsiElement(:)(':')
        PsiWhiteSpace(' ')
        SimpleType: scala.reflect.ClassManifest
          CodeReferenceElement: scala.reflect.ClassManifest
            CodeReferenceElement: scala.reflect
              CodeReferenceElement: scala
                PsiElement(identifier)('scala')
              PsiElement(.)('.')
              PsiElement(identifier)('reflect')
            PsiElement(.)('.')
            PsiElement(identifier)('ClassManifest')
      PsiElement(])(']')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: m1
          PsiComment(comment)('// conflicting in bounds, expect a normalized member calling m')
          PsiWhiteSpace('\n  ')
          PsiComment(comment)('// and bridge + implementation in specialized subclasses')
          PsiWhiteSpace('\n  ')
          PsiComment(comment)('// and overloads here according to specialization on A')
          PsiWhiteSpace('\n  ')
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('m1')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: B
              AnnotationsList
                Annotation
                  PsiElement(@)('@')
                  AnnotationExpression
                    ConstructorInvocation
                      SimpleType: specialized
                        CodeReferenceElement: specialized
                          PsiElement(identifier)('specialized')
              PsiWhiteSpace(' ')
              PsiElement(identifier)('B')
              PsiWhiteSpace(' ')
              PsiElement(<:)('<:')
              PsiWhiteSpace(' ')
              SimpleType: A
                CodeReferenceElement: A
                  PsiElement(identifier)('A')
            PsiElement(])(']')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: x
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: B
                    CodeReferenceElement: B
                      PsiElement(identifier)('B')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              Parameter: y
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('y')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: A
                    CodeReferenceElement: A
                      PsiElement(identifier)('A')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace('\n    ')
          MethodCall
            ReferenceExpression: goal
              PsiElement(identifier)('goal')
            ArgumentList
              PsiElement(()('(')
              ReferenceExpression: x
                PsiElement(identifier)('x')
              PsiElement())(')')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: m2
          PsiComment(comment)('// conflicting, unsolvable, expect a warning')
          PsiWhiteSpace('\n  ')
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('m2')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: B
              AnnotationsList
                Annotation
                  PsiElement(@)('@')
                  AnnotationExpression
                    ConstructorInvocation
                      SimpleType: specialized
                        CodeReferenceElement: specialized
                          PsiElement(identifier)('specialized')
              PsiWhiteSpace(' ')
              PsiElement(identifier)('B')
              PsiWhiteSpace(' ')
              PsiElement(<:)('<:')
              PsiWhiteSpace(' ')
              SimpleType: String
                CodeReferenceElement: String
                  PsiElement(identifier)('String')
            PsiElement(])(']')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: x
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: B
                    CodeReferenceElement: B
                      PsiElement(identifier)('B')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: x.concat
              ReferenceExpression: x
                PsiElement(identifier)('x')
              PsiElement(.)('.')
              PsiElement(identifier)('concat')
            ArgumentList
              PsiElement(()('(')
              StringLiteral
                PsiElement(string content)('"a"')
              PsiElement())(')')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: m3
          PsiComment(comment)('// conflicting in bounds, no mention of other spec members')
          PsiWhiteSpace('\n  ')
          PsiComment(comment)('// expect an overload here plus implementation in')
          PsiWhiteSpace('\n  ')
          PsiComment(comment)('// compatible specialized subclasses')
          PsiWhiteSpace('\n  ')
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('m3')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: B
              AnnotationsList
                Annotation
                  PsiElement(@)('@')
                  AnnotationExpression
                    ConstructorInvocation
                      SimpleType: specialized
                        CodeReferenceElement: specialized
                          PsiElement(identifier)('specialized')
              PsiWhiteSpace(' ')
              PsiElement(identifier)('B')
              PsiWhiteSpace(' ')
              PsiElement(>:)('>:')
              PsiWhiteSpace(' ')
              SimpleType: A
                CodeReferenceElement: A
                  PsiElement(identifier)('A')
            PsiElement(])(']')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: x
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: B
                    CodeReferenceElement: B
                      PsiElement(identifier)('B')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          UnitExpression
            PsiElement(()('(')
            PsiElement())(')')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: m4
          PsiComment(comment)('// non-conflicting, expect a normalized overload implementation here')
          PsiWhiteSpace('\n  ')
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('m4')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: T
              AnnotationsList
                Annotation
                  PsiElement(@)('@')
                  AnnotationExpression
                    ConstructorInvocation
                      SimpleType: specialized
                        CodeReferenceElement: specialized
                          PsiElement(identifier)('specialized')
              PsiWhiteSpace(' ')
              PsiElement(identifier)('T')
            PsiElement(,)(',')
            PsiWhiteSpace(' ')
            TypeParameter: U
              PsiElement(identifier)('U')
              PsiWhiteSpace(' ')
              PsiElement(<:)('<:')
              PsiWhiteSpace(' ')
              ParametrizedType: Ordered[T]
                SimpleType: Ordered
                  CodeReferenceElement: Ordered
                    PsiElement(identifier)('Ordered')
                TypeArgumentsList
                  PsiElement([)('[')
                  SimpleType: T
                    CodeReferenceElement: T
                      PsiElement(identifier)('T')
                  PsiElement(])(']')
            PsiElement(])(']')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: x
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: T
                    CodeReferenceElement: T
                      PsiElement(identifier)('T')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              Parameter: y
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('y')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: U
                    CodeReferenceElement: U
                      PsiElement(identifier)('U')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          UnitExpression
            PsiElement(()('(')
            PsiElement())(')')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: m5
          PsiComment(comment)('// non-conflicting, expect a normalized overload implementation here')
          PsiWhiteSpace('\n  ')
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('m5')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: B
              AnnotationsList
                Annotation
                  PsiElement(@)('@')
                  AnnotationExpression
                    ConstructorInvocation
                      SimpleType: specialized
                        CodeReferenceElement: specialized
                          PsiElement(identifier)('specialized')
              PsiWhiteSpace(' ')
              PsiElement(identifier)('B')
            PsiElement(])(']')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: x
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: B
                    CodeReferenceElement: B
                      PsiElement(identifier)('B')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: x
            PsiElement(identifier)('x')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: m6
          PsiComment(comment)('// non-conflicting, expect a normalized implementation here')
          PsiWhiteSpace('\n  ')
          PsiComment(comment)('// and specialized implementations for all expansions in specialized subclasses')
          PsiWhiteSpace('\n  ')
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('m6')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: B
              AnnotationsList
                Annotation
                  PsiElement(@)('@')
                  AnnotationExpression
                    ConstructorInvocation
                      SimpleType: specialized
                        CodeReferenceElement: specialized
                          PsiElement(identifier)('specialized')
              PsiWhiteSpace(' ')
              PsiElement(identifier)('B')
            PsiElement(])(']')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: x
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: B
                    CodeReferenceElement: B
                      PsiElement(identifier)('B')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              Parameter: y
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('y')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: A
                    CodeReferenceElement: A
                      PsiElement(identifier)('A')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace('\n    ')
          MethodCall
            ReferenceExpression: goal
              PsiElement(identifier)('goal')
            ArgumentList
              PsiElement(()('(')
              ReferenceExpression: y
                PsiElement(identifier)('y')
              PsiElement())(')')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: goal
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('goal')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: x
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: A
                    CodeReferenceElement: A
                      PsiElement(identifier)('A')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          BlockExpression
            PsiElement({)('{')
            PsiWhiteSpace('\n    ')
            ScPatternDefinition: xs
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              ListOfPatterns
                ReferencePattern: xs
                  PsiElement(identifier)('xs')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              ScNewTemplateDefinition: <anonymous>
                PsiElement(new)('new')
                PsiWhiteSpace(' ')
                ExtendsBlock
                  TemplateParents
                    ConstructorInvocation
                      ParametrizedType: Array[A]
                        SimpleType: Array
                          CodeReferenceElement: Array
                            PsiElement(identifier)('Array')
                        TypeArgumentsList
                          PsiElement([)('[')
                          SimpleType: A
                            CodeReferenceElement: A
                              PsiElement(identifier)('A')
                          PsiElement(])(']')
                      ArgumentList
                        PsiElement(()('(')
                        IntegerLiteral
                          PsiElement(integer)('1')
                        PsiElement())(')')
            PsiWhiteSpace('\n    ')
            AssignStatement
              MethodCall
                ReferenceExpression: xs
                  PsiElement(identifier)('xs')
                ArgumentList
                  PsiElement(()('(')
                  IntegerLiteral
                    PsiElement(integer)('0')
                  PsiElement())(')')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              ReferenceExpression: x
                PsiElement(identifier)('x')
            PsiWhiteSpace('\n  ')
            PsiElement(})('}')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
