object Test {
  enum Hoge[F[_]] {
    case A extends Hoge[List]
    case B extends Hoge[[X] =>> String]
  }
  import Hoge.*

  A == A
  A == (B: Hoge[_])
}
-----
ScalaFile
  ScObject: Test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScEnum: Hoge
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(enum)('enum')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Hoge')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: F
              PsiElement(identifier)('F')
              TypeParameterClause
                PsiElement([)('[')
                TypeParameter: _
                  PsiElement(_)('_')
                PsiElement(])(']')
            PsiElement(])(']')
          PrimaryConstructor
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            Parameters
              <empty list>
          PsiWhiteSpace(' ')
          ExtendsBlock
            ScTemplateBody
              PsiElement({)('{')
              PsiWhiteSpace('\n    ')
              ScEnumCases: A
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                ScEnumSingletonCase: A
                  PsiElement(identifier)('A')
                  PsiWhiteSpace(' ')
                  ExtendsBlock
                    PsiElement(extends)('extends')
                    PsiWhiteSpace(' ')
                    TemplateParents
                      ConstructorInvocation
                        ParametrizedType: Hoge[List]
                          SimpleType: Hoge
                            CodeReferenceElement: Hoge
                              PsiElement(identifier)('Hoge')
                          TypeArgumentsList
                            PsiElement([)('[')
                            SimpleType: List
                              CodeReferenceElement: List
                                PsiElement(identifier)('List')
                            PsiElement(])(']')
              PsiWhiteSpace('\n    ')
              ScEnumCases: B
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                ScEnumSingletonCase: B
                  PsiElement(identifier)('B')
                  PsiWhiteSpace(' ')
                  ExtendsBlock
                    PsiElement(extends)('extends')
                    PsiWhiteSpace(' ')
                    TemplateParents
                      ConstructorInvocation
                        ParametrizedType: Hoge[[X] =>> String]
                          SimpleType: Hoge
                            CodeReferenceElement: Hoge
                              PsiElement(identifier)('Hoge')
                          TypeArgumentsList
                            PsiElement([)('[')
                            TypeLambda: [X] =>> String
                              TypeParameterClause
                                PsiElement([)('[')
                                TypeParameter: X
                                  PsiElement(identifier)('X')
                                PsiElement(])(']')
                              PsiWhiteSpace(' ')
                              PsiElement(=>>)('=>>')
                              PsiWhiteSpace(' ')
                              SimpleType: String
                                CodeReferenceElement: String
                                  PsiElement(identifier)('String')
                            PsiElement(])(']')
              PsiWhiteSpace('\n  ')
              PsiElement(})('}')
        PsiWhiteSpace('\n  ')
        ScImportStatement
          PsiElement(import)('import')
          PsiWhiteSpace(' ')
          ImportExpression
            CodeReferenceElement: Hoge
              PsiElement(identifier)('Hoge')
            PsiElement(.)('.')
            PsiElement(*)('*')
        PsiWhiteSpace('\n\n  ')
        InfixExpression
          ReferenceExpression: A
            PsiElement(identifier)('A')
          PsiWhiteSpace(' ')
          ReferenceExpression: ==
            PsiElement(identifier)('==')
          PsiWhiteSpace(' ')
          ReferenceExpression: A
            PsiElement(identifier)('A')
        PsiWhiteSpace('\n  ')
        InfixExpression
          ReferenceExpression: A
            PsiElement(identifier)('A')
          PsiWhiteSpace(' ')
          ReferenceExpression: ==
            PsiElement(identifier)('==')
          PsiWhiteSpace(' ')
          ExpressionInParenthesis
            PsiElement(()('(')
            TypedExpression
              ReferenceExpression: B
                PsiElement(identifier)('B')
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              ParametrizedType: Hoge[_]
                SimpleType: Hoge
                  CodeReferenceElement: Hoge
                    PsiElement(identifier)('Hoge')
                TypeArgumentsList
                  PsiElement([)('[')
                  WildcardType: _
                    PsiElement(_)('_')
                  PsiElement(])(']')
            PsiElement())(')')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
