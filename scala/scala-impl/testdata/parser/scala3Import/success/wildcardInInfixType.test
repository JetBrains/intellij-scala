object wildcardInInfixType {

  val useless: _ => _ = (x: Int) => 1

  val pointless: (_ <: Int) => _ = (x: Int) => 1

  val answer: Int Either _ = Left(42)
}

-----
ScalaFile
  ScObject: wildcardInInfixType
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('wildcardInInfixType')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n\n  ')
        ScPatternDefinition: useless
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: useless
              PsiElement(identifier)('useless')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          FunctionalType: _ => _
            WildcardType: _
              PsiElement(_)('_')
            PsiWhiteSpace(' ')
            PsiElement(=>)('=>')
            PsiWhiteSpace(' ')
            WildcardType: _
              PsiElement(_)('_')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          FunctionExpression
            Parameters
              ParametersClause
                PsiElement(()('(')
                Parameter: x
                  AnnotationsList
                    <empty list>
                  PsiElement(identifier)('x')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    SimpleType: Int
                      CodeReferenceElement: Int
                        PsiElement(identifier)('Int')
                PsiElement())(')')
            PsiWhiteSpace(' ')
            PsiElement(=>)('=>')
            PsiWhiteSpace(' ')
            IntegerLiteral
              PsiElement(integer)('1')
        PsiWhiteSpace('\n\n  ')
        ScPatternDefinition: pointless
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: pointless
              PsiElement(identifier)('pointless')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          FunctionalType: (_ <: Int) => _
            TypeInParenthesis: (_ <: Int)
              PsiElement(()('(')
              WildcardType: _ <: Int
                PsiElement(_)('_')
                PsiWhiteSpace(' ')
                PsiElement(<:)('<:')
                PsiWhiteSpace(' ')
                SimpleType: Int
                  CodeReferenceElement: Int
                    PsiElement(identifier)('Int')
              PsiElement())(')')
            PsiWhiteSpace(' ')
            PsiElement(=>)('=>')
            PsiWhiteSpace(' ')
            WildcardType: _
              PsiElement(_)('_')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          FunctionExpression
            Parameters
              ParametersClause
                PsiElement(()('(')
                Parameter: x
                  AnnotationsList
                    <empty list>
                  PsiElement(identifier)('x')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    SimpleType: Int
                      CodeReferenceElement: Int
                        PsiElement(identifier)('Int')
                PsiElement())(')')
            PsiWhiteSpace(' ')
            PsiElement(=>)('=>')
            PsiWhiteSpace(' ')
            IntegerLiteral
              PsiElement(integer)('1')
        PsiWhiteSpace('\n\n  ')
        ScPatternDefinition: answer
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: answer
              PsiElement(identifier)('answer')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          InfixType: Int Either _
            SimpleType: Int
              CodeReferenceElement: Int
                PsiElement(identifier)('Int')
            PsiWhiteSpace(' ')
            CodeReferenceElement: Either
              PsiElement(identifier)('Either')
            PsiWhiteSpace(' ')
            WildcardType: _
              PsiElement(_)('_')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: Left
              PsiElement(identifier)('Left')
            ArgumentList
              PsiElement(()('(')
              IntegerLiteral
                PsiElement(integer)('42')
              PsiElement())(')')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
