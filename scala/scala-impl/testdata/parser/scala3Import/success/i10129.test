class Err

type Lifted[A] = Err | A

def point[O](o: O): Lifted[O] = o
extension [O, U](o: Lifted[O]) def map(f: O => U): Lifted[U] = ???

val error: Err = Err()

def ok: Int | Err =
  point("a").map(_ => if true then 1 else error)

def fail: Lifted[Int] =
  point("a").map(_ => if true then 1 else error) // error
-----
ScalaFile
  ScClass: Err
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Err')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    ExtendsBlock
      <empty list>
  PsiWhiteSpace('\n\n')
  ScTypeAliasDefinition: Lifted
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(type)('type')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Lifted')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: A
        PsiElement(identifier)('A')
      PsiElement(])(']')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    InfixType: Err | A
      SimpleType: Err
        CodeReferenceElement: Err
          PsiElement(identifier)('Err')
      PsiWhiteSpace(' ')
      CodeReferenceElement: |
        PsiElement(identifier)('|')
      PsiWhiteSpace(' ')
      SimpleType: A
        CodeReferenceElement: A
          PsiElement(identifier)('A')
  PsiWhiteSpace('\n\n')
  ScFunctionDefinition: point
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(def)('def')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('point')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: O
        PsiElement(identifier)('O')
      PsiElement(])(']')
    Parameters
      ParametersClause
        PsiElement(()('(')
        Parameter: o
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(identifier)('o')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParameterType
            SimpleType: O
              CodeReferenceElement: O
                PsiElement(identifier)('O')
        PsiElement())(')')
    PsiElement(:)(':')
    PsiWhiteSpace(' ')
    ParametrizedType: Lifted[O]
      SimpleType: Lifted
        CodeReferenceElement: Lifted
          PsiElement(identifier)('Lifted')
      TypeArgumentsList
        PsiElement([)('[')
        SimpleType: O
          CodeReferenceElement: O
            PsiElement(identifier)('O')
        PsiElement(])(']')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    ReferenceExpression: o
      PsiElement(identifier)('o')
  PsiWhiteSpace('\n')
  Extension on Lifted[O]
    PsiElement(extension)('extension')
    PsiWhiteSpace(' ')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: O
        PsiElement(identifier)('O')
      PsiElement(,)(',')
      PsiWhiteSpace(' ')
      TypeParameter: U
        PsiElement(identifier)('U')
      PsiElement(])(']')
    Parameters
      ParametersClause
        PsiElement(()('(')
        Parameter: o
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(identifier)('o')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParameterType
            ParametrizedType: Lifted[O]
              SimpleType: Lifted
                CodeReferenceElement: Lifted
                  PsiElement(identifier)('Lifted')
              TypeArgumentsList
                PsiElement([)('[')
                SimpleType: O
                  CodeReferenceElement: O
                    PsiElement(identifier)('O')
                PsiElement(])(']')
        PsiElement())(')')
    PsiWhiteSpace(' ')
    ScExtensionBody
      ScFunctionDefinition: map
        AnnotationsList
          <empty list>
        Modifiers
          <empty list>
        PsiElement(def)('def')
        PsiWhiteSpace(' ')
        PsiElement(identifier)('map')
        Parameters
          ParametersClause
            PsiElement(()('(')
            Parameter: f
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(identifier)('f')
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              ParameterType
                FunctionalType: O => U
                  SimpleType: O
                    CodeReferenceElement: O
                      PsiElement(identifier)('O')
                  PsiWhiteSpace(' ')
                  PsiElement(=>)('=>')
                  PsiWhiteSpace(' ')
                  SimpleType: U
                    CodeReferenceElement: U
                      PsiElement(identifier)('U')
            PsiElement())(')')
        PsiElement(:)(':')
        PsiWhiteSpace(' ')
        ParametrizedType: Lifted[U]
          SimpleType: Lifted
            CodeReferenceElement: Lifted
              PsiElement(identifier)('Lifted')
          TypeArgumentsList
            PsiElement([)('[')
            SimpleType: U
              CodeReferenceElement: U
                PsiElement(identifier)('U')
            PsiElement(])(']')
        PsiWhiteSpace(' ')
        PsiElement(=)('=')
        PsiWhiteSpace(' ')
        ReferenceExpression: ???
          PsiElement(identifier)('???')
  PsiWhiteSpace('\n\n')
  ScPatternDefinition: error
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(val)('val')
    PsiWhiteSpace(' ')
    ListOfPatterns
      ReferencePattern: error
        PsiElement(identifier)('error')
    PsiElement(:)(':')
    PsiWhiteSpace(' ')
    SimpleType: Err
      CodeReferenceElement: Err
        PsiElement(identifier)('Err')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    MethodCall
      ReferenceExpression: Err
        PsiElement(identifier)('Err')
      ArgumentList
        PsiElement(()('(')
        PsiElement())(')')
  PsiWhiteSpace('\n\n')
  ScFunctionDefinition: ok
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(def)('def')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('ok')
    Parameters
      <empty list>
    PsiElement(:)(':')
    PsiWhiteSpace(' ')
    InfixType: Int | Err
      SimpleType: Int
        CodeReferenceElement: Int
          PsiElement(identifier)('Int')
      PsiWhiteSpace(' ')
      CodeReferenceElement: |
        PsiElement(identifier)('|')
      PsiWhiteSpace(' ')
      SimpleType: Err
        CodeReferenceElement: Err
          PsiElement(identifier)('Err')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace('\n  ')
    MethodCall
      ReferenceExpression: point("a").map
        MethodCall
          ReferenceExpression: point
            PsiElement(identifier)('point')
          ArgumentList
            PsiElement(()('(')
            StringLiteral
              PsiElement(string content)('"a"')
            PsiElement())(')')
        PsiElement(.)('.')
        PsiElement(identifier)('map')
      ArgumentList
        PsiElement(()('(')
        FunctionExpression
          Parameters
            ParametersClause
              Parameter: _
                PsiElement(_)('_')
          PsiWhiteSpace(' ')
          PsiElement(=>)('=>')
          PsiWhiteSpace(' ')
          IfStatement
            PsiElement(if)('if')
            PsiWhiteSpace(' ')
            BooleanLiteral
              PsiElement(true)('true')
            PsiWhiteSpace(' ')
            PsiElement(then)('then')
            PsiWhiteSpace(' ')
            IntegerLiteral
              PsiElement(integer)('1')
            PsiWhiteSpace(' ')
            PsiElement(else)('else')
            PsiWhiteSpace(' ')
            ReferenceExpression: error
              PsiElement(identifier)('error')
        PsiElement())(')')
  PsiWhiteSpace('\n\n')
  ScFunctionDefinition: fail
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(def)('def')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('fail')
    Parameters
      <empty list>
    PsiElement(:)(':')
    PsiWhiteSpace(' ')
    ParametrizedType: Lifted[Int]
      SimpleType: Lifted
        CodeReferenceElement: Lifted
          PsiElement(identifier)('Lifted')
      TypeArgumentsList
        PsiElement([)('[')
        SimpleType: Int
          CodeReferenceElement: Int
            PsiElement(identifier)('Int')
        PsiElement(])(']')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace('\n  ')
    MethodCall
      ReferenceExpression: point("a").map
        MethodCall
          ReferenceExpression: point
            PsiElement(identifier)('point')
          ArgumentList
            PsiElement(()('(')
            StringLiteral
              PsiElement(string content)('"a"')
            PsiElement())(')')
        PsiElement(.)('.')
        PsiElement(identifier)('map')
      ArgumentList
        PsiElement(()('(')
        FunctionExpression
          Parameters
            ParametersClause
              Parameter: _
                PsiElement(_)('_')
          PsiWhiteSpace(' ')
          PsiElement(=>)('=>')
          PsiWhiteSpace(' ')
          IfStatement
            PsiElement(if)('if')
            PsiWhiteSpace(' ')
            BooleanLiteral
              PsiElement(true)('true')
            PsiWhiteSpace(' ')
            PsiElement(then)('then')
            PsiWhiteSpace(' ')
            IntegerLiteral
              PsiElement(integer)('1')
            PsiWhiteSpace(' ')
            PsiElement(else)('else')
            PsiWhiteSpace(' ')
            ReferenceExpression: error
              PsiElement(identifier)('error')
        PsiElement())(')')
  PsiWhiteSpace(' ')
  PsiComment(comment)('// error')
