trait T[U] {
  def x: T[_ <: U]
}

object T {
  def unapply[U](t: T[U]): Option[T[_ <: U]] = Some(t.x)
}

object Test {
  def f[W](t: T[W]) = t match {
    case T(T(_)) => ()
  }
}

-----
ScalaFile
  ScTrait: T
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('T')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: U
        PsiElement(identifier)('U')
      PsiElement(])(']')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDeclaration: x
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('x')
          Parameters
            <empty list>
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: T[_ <: U]
            SimpleType: T
              CodeReferenceElement: T
                PsiElement(identifier)('T')
            TypeArgumentsList
              PsiElement([)('[')
              WildcardType: _ <: U
                PsiElement(_)('_')
                PsiWhiteSpace(' ')
                PsiElement(<:)('<:')
                PsiWhiteSpace(' ')
                SimpleType: U
                  CodeReferenceElement: U
                    PsiElement(identifier)('U')
              PsiElement(])(']')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScObject: T
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('T')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: unapply
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('unapply')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: U
              PsiElement(identifier)('U')
            PsiElement(])(']')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: t
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('t')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  ParametrizedType: T[U]
                    SimpleType: T
                      CodeReferenceElement: T
                        PsiElement(identifier)('T')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: U
                        CodeReferenceElement: U
                          PsiElement(identifier)('U')
                      PsiElement(])(']')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: Option[T[_ <: U]]
            SimpleType: Option
              CodeReferenceElement: Option
                PsiElement(identifier)('Option')
            TypeArgumentsList
              PsiElement([)('[')
              ParametrizedType: T[_ <: U]
                SimpleType: T
                  CodeReferenceElement: T
                    PsiElement(identifier)('T')
                TypeArgumentsList
                  PsiElement([)('[')
                  WildcardType: _ <: U
                    PsiElement(_)('_')
                    PsiWhiteSpace(' ')
                    PsiElement(<:)('<:')
                    PsiWhiteSpace(' ')
                    SimpleType: U
                      CodeReferenceElement: U
                        PsiElement(identifier)('U')
                  PsiElement(])(']')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: Some
              PsiElement(identifier)('Some')
            ArgumentList
              PsiElement(()('(')
              ReferenceExpression: t.x
                ReferenceExpression: t
                  PsiElement(identifier)('t')
                PsiElement(.)('.')
                PsiElement(identifier)('x')
              PsiElement())(')')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScObject: Test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: f
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('f')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: W
              PsiElement(identifier)('W')
            PsiElement(])(']')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: t
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('t')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  ParametrizedType: T[W]
                    SimpleType: T
                      CodeReferenceElement: T
                        PsiElement(identifier)('T')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: W
                        CodeReferenceElement: W
                          PsiElement(identifier)('W')
                      PsiElement(])(']')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MatchStatement
            ReferenceExpression: t
              PsiElement(identifier)('t')
            PsiWhiteSpace(' ')
            PsiElement(match)('match')
            PsiWhiteSpace(' ')
            PsiElement({)('{')
            PsiWhiteSpace('\n    ')
            CaseClauses
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                ConstructorPattern
                  CodeReferenceElement: T
                    PsiElement(identifier)('T')
                  Pattern Argument List
                    PsiElement(()('(')
                    ConstructorPattern
                      CodeReferenceElement: T
                        PsiElement(identifier)('T')
                      Pattern Argument List
                        PsiElement(()('(')
                        WildcardPattern
                          PsiElement(_)('_')
                        PsiElement())(')')
                    PsiElement())(')')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                BlockOfExpressions
                  UnitExpression
                    PsiElement(()('(')
                    PsiElement())(')')
            PsiWhiteSpace('\n  ')
            PsiElement(})('}')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
