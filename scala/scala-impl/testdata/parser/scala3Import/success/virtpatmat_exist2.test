class ParseResult[+T]
case class MemoEntry[+T](var r: Either[Nothing,ParseResult[_]])

object Test {
  def grow[T]: ParseResult[T] = (null: MemoEntry[T]) match {
    case MemoEntry(Right(x: ParseResult[_])) => x.asInstanceOf[ParseResult[T]]
  }

  // what's the _$1 doing there?
  // def grow[T >: Nothing <: Any]: ParseResult[T] = {
  //   import OptionMatching.*
  //   runOrElse[MemoEntry[T], ParseResult[T]]((null: MemoEntry[T]))(((x1: MemoEntry[T]) =>
  //     (MemoEntry.unapply[T](x1).flatMap[ParseResult[T]](((x4: Either[Nothing,ParseResult[_]]) =>
  //       guard[Right[Nothing,ParseResult[_]]](x4.isInstanceOf[Right[Nothing,ParseResult[_]]], x4.asInstanceOf[Right[Nothing,ParseResult[_]]]).flatMap[ParseResult[T]](((cp3: Right[Nothing,ParseResult[_]]) =>
  //         scala.Right.unapply[Nothing, ParseResult[_]](cp3).flatMap[ParseResult[T]](((x5: ParseResult[_]) =>
  //           guard[ParseResult[_$1]](x5.ne(null), x5.asInstanceOf[ParseResult[_]]).flatMap[ParseResult[T]](((x6: ParseResult[_]) =>
  //             one[ParseResult[T]](x6.asInstanceOf[ParseResult[T]]))))))))): Option[ParseResult[T]]
  //     ).orElse[ParseResult[T]]((zero: Option[ParseResult[T]]))))
  // }
}
-----
ScalaFile
  ScClass: ParseResult
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('ParseResult')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: T
        PsiElement(identifier)('+')
        PsiElement(identifier)('T')
      PsiElement(])(']')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    ExtendsBlock
      <empty list>
  PsiWhiteSpace('\n')
  ScClass: MemoEntry
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(case)('case')
    PsiWhiteSpace(' ')
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('MemoEntry')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: T
        PsiElement(identifier)('+')
        PsiElement(identifier)('T')
      PsiElement(])(']')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        ParametersClause
          PsiElement(()('(')
          ClassParameter: r
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(var)('var')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('r')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            ParameterType
              ParametrizedType: Either[Nothing,ParseResult[_]]
                SimpleType: Either
                  CodeReferenceElement: Either
                    PsiElement(identifier)('Either')
                TypeArgumentsList
                  PsiElement([)('[')
                  SimpleType: Nothing
                    CodeReferenceElement: Nothing
                      PsiElement(identifier)('Nothing')
                  PsiElement(,)(',')
                  ParametrizedType: ParseResult[_]
                    SimpleType: ParseResult
                      CodeReferenceElement: ParseResult
                        PsiElement(identifier)('ParseResult')
                    TypeArgumentsList
                      PsiElement([)('[')
                      WildcardType: _
                        PsiElement(_)('_')
                      PsiElement(])(']')
                  PsiElement(])(']')
          PsiElement())(')')
    ExtendsBlock
      <empty list>
  PsiWhiteSpace('\n\n')
  ScObject: Test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: grow
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('grow')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: T
              PsiElement(identifier)('T')
            PsiElement(])(']')
          Parameters
            <empty list>
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: ParseResult[T]
            SimpleType: ParseResult
              CodeReferenceElement: ParseResult
                PsiElement(identifier)('ParseResult')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: T
                CodeReferenceElement: T
                  PsiElement(identifier)('T')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MatchStatement
            ExpressionInParenthesis
              PsiElement(()('(')
              TypedExpression
                NullLiteral
                  PsiElement(null)('null')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParametrizedType: MemoEntry[T]
                  SimpleType: MemoEntry
                    CodeReferenceElement: MemoEntry
                      PsiElement(identifier)('MemoEntry')
                  TypeArgumentsList
                    PsiElement([)('[')
                    SimpleType: T
                      CodeReferenceElement: T
                        PsiElement(identifier)('T')
                    PsiElement(])(']')
              PsiElement())(')')
            PsiWhiteSpace(' ')
            PsiElement(match)('match')
            PsiWhiteSpace(' ')
            PsiElement({)('{')
            PsiWhiteSpace('\n    ')
            CaseClauses
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                ConstructorPattern
                  CodeReferenceElement: MemoEntry
                    PsiElement(identifier)('MemoEntry')
                  Pattern Argument List
                    PsiElement(()('(')
                    ConstructorPattern
                      CodeReferenceElement: Right
                        PsiElement(identifier)('Right')
                      Pattern Argument List
                        PsiElement(()('(')
                        Scala3 TypedPattern
                          ReferencePattern: x
                            PsiElement(identifier)('x')
                          PsiElement(:)(':')
                          PsiWhiteSpace(' ')
                          TypePattern
                            ParametrizedType: ParseResult[_]
                              SimpleType: ParseResult
                                CodeReferenceElement: ParseResult
                                  PsiElement(identifier)('ParseResult')
                              TypeArgumentsList
                                PsiElement([)('[')
                                TypeVariable: _
                                  PsiElement(_)('_')
                                PsiElement(])(']')
                        PsiElement())(')')
                    PsiElement())(')')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                BlockOfExpressions
                  GenericCall
                    ReferenceExpression: x.asInstanceOf
                      ReferenceExpression: x
                        PsiElement(identifier)('x')
                      PsiElement(.)('.')
                      PsiElement(identifier)('asInstanceOf')
                    TypeArgumentsList
                      PsiElement([)('[')
                      ParametrizedType: ParseResult[T]
                        SimpleType: ParseResult
                          CodeReferenceElement: ParseResult
                            PsiElement(identifier)('ParseResult')
                        TypeArgumentsList
                          PsiElement([)('[')
                          SimpleType: T
                            CodeReferenceElement: T
                              PsiElement(identifier)('T')
                          PsiElement(])(']')
                      PsiElement(])(']')
            PsiWhiteSpace('\n  ')
            PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        PsiComment(comment)('// what's the _$1 doing there?')
        PsiWhiteSpace('\n  ')
        PsiComment(comment)('// def grow[T >: Nothing <: Any]: ParseResult[T] = {')
        PsiWhiteSpace('\n  ')
        PsiComment(comment)('//   import OptionMatching.*')
        PsiWhiteSpace('\n  ')
        PsiComment(comment)('//   runOrElse[MemoEntry[T], ParseResult[T]]((null: MemoEntry[T]))(((x1: MemoEntry[T]) =>')
        PsiWhiteSpace('\n  ')
        PsiComment(comment)('//     (MemoEntry.unapply[T](x1).flatMap[ParseResult[T]](((x4: Either[Nothing,ParseResult[_]]) =>')
        PsiWhiteSpace('\n  ')
        PsiComment(comment)('//       guard[Right[Nothing,ParseResult[_]]](x4.isInstanceOf[Right[Nothing,ParseResult[_]]], x4.asInstanceOf[Right[Nothing,ParseResult[_]]]).flatMap[ParseResult[T]](((cp3: Right[Nothing,ParseResult[_]]) =>')
        PsiWhiteSpace('\n  ')
        PsiComment(comment)('//         scala.Right.unapply[Nothing, ParseResult[_]](cp3).flatMap[ParseResult[T]](((x5: ParseResult[_]) =>')
        PsiWhiteSpace('\n  ')
        PsiComment(comment)('//           guard[ParseResult[_$1]](x5.ne(null), x5.asInstanceOf[ParseResult[_]]).flatMap[ParseResult[T]](((x6: ParseResult[_]) =>')
        PsiWhiteSpace('\n  ')
        PsiComment(comment)('//             one[ParseResult[T]](x6.asInstanceOf[ParseResult[T]]))))))))): Option[ParseResult[T]]')
        PsiWhiteSpace('\n  ')
        PsiComment(comment)('//     ).orElse[ParseResult[T]]((zero: Option[ParseResult[T]]))))')
        PsiWhiteSpace('\n  ')
        PsiComment(comment)('// }')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
