class MyType()
trait Candidate[R]
given Candidate[MyType] with {}
class Fuzzy[W]()
class Fuzzy1()
class Bear()

extension [L](lhs: L)(using Candidate[L])
  def +[RW](rhs: Fuzzy[RW]): Unit = {}
  def +(rhs: Bear): Unit = {}
  def -(rhs: Fuzzy1): Unit = {}
  def -(rhs: Bear): Unit = {}

val works = MyType() - Fuzzy1()
val fails = MyType() + Fuzzy[1]()
-----
ScalaFile
  ScClass: MyType
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('MyType')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        ParametersClause
          PsiElement(()('(')
          PsiElement())(')')
    ExtendsBlock
      <empty list>
  PsiWhiteSpace('\n')
  ScTrait: Candidate
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Candidate')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: R
        PsiElement(identifier)('R')
      PsiElement(])(']')
    ExtendsBlock
      <empty list>
  PsiWhiteSpace('\n')
  ScGivenDefinition: given_Candidate_MyType
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(given)('given')
    PsiWhiteSpace(' ')
    ExtendsBlock
      TemplateParents
        ConstructorInvocation
          ParametrizedType: Candidate[MyType]
            SimpleType: Candidate
              CodeReferenceElement: Candidate
                PsiElement(identifier)('Candidate')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: MyType
                CodeReferenceElement: MyType
                  PsiElement(identifier)('MyType')
              PsiElement(])(']')
      PsiWhiteSpace(' ')
      PsiElement(with)('with')
      PsiWhiteSpace(' ')
      ScTemplateBody
        PsiElement({)('{')
        PsiElement(})('}')
  PsiWhiteSpace('\n')
  ScClass: Fuzzy
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Fuzzy')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: W
        PsiElement(identifier)('W')
      PsiElement(])(']')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        ParametersClause
          PsiElement(()('(')
          PsiElement())(')')
    ExtendsBlock
      <empty list>
  PsiWhiteSpace('\n')
  ScClass: Fuzzy1
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Fuzzy1')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        ParametersClause
          PsiElement(()('(')
          PsiElement())(')')
    ExtendsBlock
      <empty list>
  PsiWhiteSpace('\n')
  ScClass: Bear
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Bear')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        ParametersClause
          PsiElement(()('(')
          PsiElement())(')')
    ExtendsBlock
      <empty list>
  PsiWhiteSpace('\n\n')
  Extension on L
    PsiElement(extension)('extension')
    PsiWhiteSpace(' ')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: L
        PsiElement(identifier)('L')
      PsiElement(])(']')
    Parameters
      ParametersClause
        PsiElement(()('(')
        Parameter: lhs
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(identifier)('lhs')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParameterType
            SimpleType: L
              CodeReferenceElement: L
                PsiElement(identifier)('L')
        PsiElement())(')')
      ParametersClause
        PsiElement(()('(')
        PsiElement(using)('using')
        PsiWhiteSpace(' ')
        Parameter: <anonymous>
          ParameterType
            ParametrizedType: Candidate[L]
              SimpleType: Candidate
                CodeReferenceElement: Candidate
                  PsiElement(identifier)('Candidate')
              TypeArgumentsList
                PsiElement([)('[')
                SimpleType: L
                  CodeReferenceElement: L
                    PsiElement(identifier)('L')
                PsiElement(])(']')
        PsiElement())(')')
    PsiWhiteSpace('\n  ')
    ScExtensionBody
      ScFunctionDefinition: +
        AnnotationsList
          <empty list>
        Modifiers
          <empty list>
        PsiElement(def)('def')
        PsiWhiteSpace(' ')
        PsiElement(identifier)('+')
        TypeParameterClause
          PsiElement([)('[')
          TypeParameter: RW
            PsiElement(identifier)('RW')
          PsiElement(])(']')
        Parameters
          ParametersClause
            PsiElement(()('(')
            Parameter: rhs
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(identifier)('rhs')
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              ParameterType
                ParametrizedType: Fuzzy[RW]
                  SimpleType: Fuzzy
                    CodeReferenceElement: Fuzzy
                      PsiElement(identifier)('Fuzzy')
                  TypeArgumentsList
                    PsiElement([)('[')
                    SimpleType: RW
                      CodeReferenceElement: RW
                        PsiElement(identifier)('RW')
                    PsiElement(])(']')
            PsiElement())(')')
        PsiElement(:)(':')
        PsiWhiteSpace(' ')
        SimpleType: Unit
          CodeReferenceElement: Unit
            PsiElement(identifier)('Unit')
        PsiWhiteSpace(' ')
        PsiElement(=)('=')
        PsiWhiteSpace(' ')
        BlockExpression
          PsiElement({)('{')
          PsiElement(})('}')
      PsiWhiteSpace('\n  ')
      ScFunctionDefinition: +
        AnnotationsList
          <empty list>
        Modifiers
          <empty list>
        PsiElement(def)('def')
        PsiWhiteSpace(' ')
        PsiElement(identifier)('+')
        Parameters
          ParametersClause
            PsiElement(()('(')
            Parameter: rhs
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(identifier)('rhs')
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              ParameterType
                SimpleType: Bear
                  CodeReferenceElement: Bear
                    PsiElement(identifier)('Bear')
            PsiElement())(')')
        PsiElement(:)(':')
        PsiWhiteSpace(' ')
        SimpleType: Unit
          CodeReferenceElement: Unit
            PsiElement(identifier)('Unit')
        PsiWhiteSpace(' ')
        PsiElement(=)('=')
        PsiWhiteSpace(' ')
        BlockExpression
          PsiElement({)('{')
          PsiElement(})('}')
      PsiWhiteSpace('\n  ')
      ScFunctionDefinition: -
        AnnotationsList
          <empty list>
        Modifiers
          <empty list>
        PsiElement(def)('def')
        PsiWhiteSpace(' ')
        PsiElement(identifier)('-')
        Parameters
          ParametersClause
            PsiElement(()('(')
            Parameter: rhs
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(identifier)('rhs')
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              ParameterType
                SimpleType: Fuzzy1
                  CodeReferenceElement: Fuzzy1
                    PsiElement(identifier)('Fuzzy1')
            PsiElement())(')')
        PsiElement(:)(':')
        PsiWhiteSpace(' ')
        SimpleType: Unit
          CodeReferenceElement: Unit
            PsiElement(identifier)('Unit')
        PsiWhiteSpace(' ')
        PsiElement(=)('=')
        PsiWhiteSpace(' ')
        BlockExpression
          PsiElement({)('{')
          PsiElement(})('}')
      PsiWhiteSpace('\n  ')
      ScFunctionDefinition: -
        AnnotationsList
          <empty list>
        Modifiers
          <empty list>
        PsiElement(def)('def')
        PsiWhiteSpace(' ')
        PsiElement(identifier)('-')
        Parameters
          ParametersClause
            PsiElement(()('(')
            Parameter: rhs
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(identifier)('rhs')
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              ParameterType
                SimpleType: Bear
                  CodeReferenceElement: Bear
                    PsiElement(identifier)('Bear')
            PsiElement())(')')
        PsiElement(:)(':')
        PsiWhiteSpace(' ')
        SimpleType: Unit
          CodeReferenceElement: Unit
            PsiElement(identifier)('Unit')
        PsiWhiteSpace(' ')
        PsiElement(=)('=')
        PsiWhiteSpace(' ')
        BlockExpression
          PsiElement({)('{')
          PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScPatternDefinition: works
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(val)('val')
    PsiWhiteSpace(' ')
    ListOfPatterns
      ReferencePattern: works
        PsiElement(identifier)('works')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    InfixExpression
      MethodCall
        ReferenceExpression: MyType
          PsiElement(identifier)('MyType')
        ArgumentList
          PsiElement(()('(')
          PsiElement())(')')
      PsiWhiteSpace(' ')
      ReferenceExpression: -
        PsiElement(identifier)('-')
      PsiWhiteSpace(' ')
      MethodCall
        ReferenceExpression: Fuzzy1
          PsiElement(identifier)('Fuzzy1')
        ArgumentList
          PsiElement(()('(')
          PsiElement())(')')
  PsiWhiteSpace('\n')
  ScPatternDefinition: fails
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(val)('val')
    PsiWhiteSpace(' ')
    ListOfPatterns
      ReferencePattern: fails
        PsiElement(identifier)('fails')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    InfixExpression
      MethodCall
        ReferenceExpression: MyType
          PsiElement(identifier)('MyType')
        ArgumentList
          PsiElement(()('(')
          PsiElement())(')')
      PsiWhiteSpace(' ')
      ReferenceExpression: +
        PsiElement(identifier)('+')
      PsiWhiteSpace(' ')
      MethodCall
        GenericCall
          ReferenceExpression: Fuzzy
            PsiElement(identifier)('Fuzzy')
          TypeArgumentsList
            PsiElement([)('[')
            LiteralType: 1
              IntegerLiteral
                PsiElement(integer)('1')
            PsiElement(])(']')
        ArgumentList
          PsiElement(()('(')
          PsiElement())(')')
