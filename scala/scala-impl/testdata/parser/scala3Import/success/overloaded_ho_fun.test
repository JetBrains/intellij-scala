import scala.math.Ordering
import scala.reflect.ClassTag

trait MonoSam { def apply(x: Int): String }
trait SamP[U] { def apply(x: Int): U }

class OverloadedFun[T](x: T) {
  // def foo(f: T => String): String = f(x)    Can't unify - need just type equality
  def foo(f: Any => String): String = f(x)
  def foo(f: Any => T): T = f("a")

  def poly[U](f: Int => String): String = f(1)
  def poly[U](f: Int => U): U = f(1)

//  def polySam[U](f: MonoSam): String = f(1)      Only function types supported for pretype-args
//  def polySam[U](f: SamP[U]): U = f(1)

  // check that we properly instantiate java.util.function.Function's type param to String
  def polyJavaSam(f: String => String) = 1
  def polyJavaSam(f: java.util.function.Function[String, String]) = 2
}

class StringLike(xs: String) {
  def map[A](f: Char => A): Array[A] = ???
  def map(f: Char => Char): String = ???
}

object Test {
  val of = new OverloadedFun[Int](1)

  of.foo(_.toString)

  of.poly(x => x / 2 )
  //of.polySam(x => x / 2 )
  of.polyJavaSam(x => x)

  val sl = new StringLike("a")
  sl.map(_ == 'a')  // : Array[Boolean]
  sl.map(x => 'a')  // : String
}

object sorting {
  def stableSort[K: ClassTag](a: Seq[K], f: (K, K) => Boolean): Array[K] = ???
  def stableSort[L: ClassTag](a: Array[L], f: (L, L) => Boolean): Unit = ???

  stableSort(??? : Seq[Boolean], (x: Boolean, y: Boolean) => x && !y)
}

// trait Bijection[A, B] extends (A => B) {
//   def andThen[C](g: Bijection[B, C]): Bijection[A, C] = ???
//   def compose[T](g: Bijection[T, A]) = g andThen this
// }

object SI10194 {
  trait X[A] {
    def map[B](f: A => B): Unit
  }

  trait Y[A] extends X[A] {
    def map[B](f: A => B)(implicit ordering: Ordering[B]): Unit
  }

  trait Z[A] extends Y[A]

  (null: Y[Int]).map(x => x.toString) // compiled
  (null: Z[Int]).map(x => x.toString) // didn't compile
}

// Perform eta-expansion of methods passed as functions to overloaded functions
trait A { def map[T](f: Int => T): Unit = () }
object B extends A {
  def noover(f: SAM[Int, Any]): Unit = ()
  def map[T: scala.reflect.ClassTag](f: Int => T): Unit = ()
  def f(x: Int) = x
  noover(f)
  noover(identity)
  map(f) // same param type, monomorphic method
  map(identity) // same param type, polymorphic method

  // must not lub to an incompatible function type
  object t { def f(x: Int => Int): Int = 0; def f(y: String => Int): String = "1" }
  def fun(x: Int) = x
  def fun2[T] = (x: T) => 42
  t.f(fun) // different param type, monomorphic method
  //t.f(fun2) // different param type, polymorphic method - not possible
}

// The same for SAM types
trait SAM[-T, +R] { def apply(x: T): R }
trait A2 { def map[T](f: SAM[Int, T]): Unit = () }
object B2 extends A2 {
  def noover(f: SAM[Int, Any]): Unit = ()
  def map[T: scala.reflect.ClassTag](f: SAM[Int, T]): Unit = ()
  def f(x: Int) = x
  noover(f)
  noover(identity)
  map(f) // same param type, monomorphic method
  //map(identity) // same param type, polymorphic method - not possible for SAMs

  // must not lub to an incompatible function type
  object t { def f(x: SAM[Int, Int]): Int = 0; def f(y: SAM[String, Int]): String = "1" }
  def fun(x: Int) = x
  def fun2[T] = (x: T) => 42
  t.f(fun) // different param type, monomorphic method
  //t.f(fun2) // different param type, polymorphic method - not possible
}
-----
ScalaFile
  ScImportStatement
    PsiElement(import)('import')
    PsiWhiteSpace(' ')
    ImportExpression
      CodeReferenceElement: scala.math.Ordering
        CodeReferenceElement: scala.math
          CodeReferenceElement: scala
            PsiElement(identifier)('scala')
          PsiElement(.)('.')
          PsiElement(identifier)('math')
        PsiElement(.)('.')
        PsiElement(identifier)('Ordering')
  PsiWhiteSpace('\n')
  ScImportStatement
    PsiElement(import)('import')
    PsiWhiteSpace(' ')
    ImportExpression
      CodeReferenceElement: scala.reflect.ClassTag
        CodeReferenceElement: scala.reflect
          CodeReferenceElement: scala
            PsiElement(identifier)('scala')
          PsiElement(.)('.')
          PsiElement(identifier)('reflect')
        PsiElement(.)('.')
        PsiElement(identifier)('ClassTag')
  PsiWhiteSpace('\n\n')
  ScTrait: MonoSam
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('MonoSam')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace(' ')
        ScFunctionDeclaration: apply
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('apply')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: x
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Int
                    CodeReferenceElement: Int
                      PsiElement(identifier)('Int')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: String
            CodeReferenceElement: String
              PsiElement(identifier)('String')
        PsiWhiteSpace(' ')
        PsiElement(})('}')
  PsiWhiteSpace('\n')
  ScTrait: SamP
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('SamP')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: U
        PsiElement(identifier)('U')
      PsiElement(])(']')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace(' ')
        ScFunctionDeclaration: apply
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('apply')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: x
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Int
                    CodeReferenceElement: Int
                      PsiElement(identifier)('Int')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: U
            CodeReferenceElement: U
              PsiElement(identifier)('U')
        PsiWhiteSpace(' ')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScClass: OverloadedFun
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('OverloadedFun')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: T
        PsiElement(identifier)('T')
      PsiElement(])(']')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        ParametersClause
          PsiElement(()('(')
          ClassParameter: x
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(identifier)('x')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            ParameterType
              SimpleType: T
                CodeReferenceElement: T
                  PsiElement(identifier)('T')
          PsiElement())(')')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: foo
          PsiComment(comment)('// def foo(f: T => String): String = f(x)    Can't unify - need just type equality')
          PsiWhiteSpace('\n  ')
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('foo')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: f
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('f')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  FunctionalType: Any => String
                    SimpleType: Any
                      CodeReferenceElement: Any
                        PsiElement(identifier)('Any')
                    PsiWhiteSpace(' ')
                    PsiElement(=>)('=>')
                    PsiWhiteSpace(' ')
                    SimpleType: String
                      CodeReferenceElement: String
                        PsiElement(identifier)('String')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: String
            CodeReferenceElement: String
              PsiElement(identifier)('String')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: f
              PsiElement(identifier)('f')
            ArgumentList
              PsiElement(()('(')
              ReferenceExpression: x
                PsiElement(identifier)('x')
              PsiElement())(')')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: foo
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('foo')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: f
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('f')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  FunctionalType: Any => T
                    SimpleType: Any
                      CodeReferenceElement: Any
                        PsiElement(identifier)('Any')
                    PsiWhiteSpace(' ')
                    PsiElement(=>)('=>')
                    PsiWhiteSpace(' ')
                    SimpleType: T
                      CodeReferenceElement: T
                        PsiElement(identifier)('T')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: T
            CodeReferenceElement: T
              PsiElement(identifier)('T')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: f
              PsiElement(identifier)('f')
            ArgumentList
              PsiElement(()('(')
              StringLiteral
                PsiElement(string content)('"a"')
              PsiElement())(')')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: poly
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('poly')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: U
              PsiElement(identifier)('U')
            PsiElement(])(']')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: f
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('f')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  FunctionalType: Int => String
                    SimpleType: Int
                      CodeReferenceElement: Int
                        PsiElement(identifier)('Int')
                    PsiWhiteSpace(' ')
                    PsiElement(=>)('=>')
                    PsiWhiteSpace(' ')
                    SimpleType: String
                      CodeReferenceElement: String
                        PsiElement(identifier)('String')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: String
            CodeReferenceElement: String
              PsiElement(identifier)('String')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: f
              PsiElement(identifier)('f')
            ArgumentList
              PsiElement(()('(')
              IntegerLiteral
                PsiElement(integer)('1')
              PsiElement())(')')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: poly
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('poly')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: U
              PsiElement(identifier)('U')
            PsiElement(])(']')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: f
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('f')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  FunctionalType: Int => U
                    SimpleType: Int
                      CodeReferenceElement: Int
                        PsiElement(identifier)('Int')
                    PsiWhiteSpace(' ')
                    PsiElement(=>)('=>')
                    PsiWhiteSpace(' ')
                    SimpleType: U
                      CodeReferenceElement: U
                        PsiElement(identifier)('U')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: U
            CodeReferenceElement: U
              PsiElement(identifier)('U')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: f
              PsiElement(identifier)('f')
            ArgumentList
              PsiElement(()('(')
              IntegerLiteral
                PsiElement(integer)('1')
              PsiElement())(')')
        PsiWhiteSpace('\n\n')
        PsiComment(comment)('//  def polySam[U](f: MonoSam): String = f(1)      Only function types supported for pretype-args')
        PsiWhiteSpace('\n')
        PsiComment(comment)('//  def polySam[U](f: SamP[U]): U = f(1)')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: polyJavaSam
          PsiComment(comment)('// check that we properly instantiate java.util.function.Function's type param to String')
          PsiWhiteSpace('\n  ')
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('polyJavaSam')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: f
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('f')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  FunctionalType: String => String
                    SimpleType: String
                      CodeReferenceElement: String
                        PsiElement(identifier)('String')
                    PsiWhiteSpace(' ')
                    PsiElement(=>)('=>')
                    PsiWhiteSpace(' ')
                    SimpleType: String
                      CodeReferenceElement: String
                        PsiElement(identifier)('String')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          IntegerLiteral
            PsiElement(integer)('1')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: polyJavaSam
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('polyJavaSam')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: f
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('f')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  ParametrizedType: java.util.function.Function[String, String]
                    SimpleType: java.util.function.Function
                      CodeReferenceElement: java.util.function.Function
                        CodeReferenceElement: java.util.function
                          CodeReferenceElement: java.util
                            CodeReferenceElement: java
                              PsiElement(identifier)('java')
                            PsiElement(.)('.')
                            PsiElement(identifier)('util')
                          PsiElement(.)('.')
                          PsiElement(identifier)('function')
                        PsiElement(.)('.')
                        PsiElement(identifier)('Function')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: String
                        CodeReferenceElement: String
                          PsiElement(identifier)('String')
                      PsiElement(,)(',')
                      PsiWhiteSpace(' ')
                      SimpleType: String
                        CodeReferenceElement: String
                          PsiElement(identifier)('String')
                      PsiElement(])(']')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          IntegerLiteral
            PsiElement(integer)('2')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScClass: StringLike
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('StringLike')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        ParametersClause
          PsiElement(()('(')
          ClassParameter: xs
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(identifier)('xs')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            ParameterType
              SimpleType: String
                CodeReferenceElement: String
                  PsiElement(identifier)('String')
          PsiElement())(')')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: map
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('map')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: A
              PsiElement(identifier)('A')
            PsiElement(])(']')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: f
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('f')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  FunctionalType: Char => A
                    SimpleType: Char
                      CodeReferenceElement: Char
                        PsiElement(identifier)('Char')
                    PsiWhiteSpace(' ')
                    PsiElement(=>)('=>')
                    PsiWhiteSpace(' ')
                    SimpleType: A
                      CodeReferenceElement: A
                        PsiElement(identifier)('A')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: Array[A]
            SimpleType: Array
              CodeReferenceElement: Array
                PsiElement(identifier)('Array')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: A
                CodeReferenceElement: A
                  PsiElement(identifier)('A')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: ???
            PsiElement(identifier)('???')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: map
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('map')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: f
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('f')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  FunctionalType: Char => Char
                    SimpleType: Char
                      CodeReferenceElement: Char
                        PsiElement(identifier)('Char')
                    PsiWhiteSpace(' ')
                    PsiElement(=>)('=>')
                    PsiWhiteSpace(' ')
                    SimpleType: Char
                      CodeReferenceElement: Char
                        PsiElement(identifier)('Char')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: String
            CodeReferenceElement: String
              PsiElement(identifier)('String')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: ???
            PsiElement(identifier)('???')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScObject: Test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: of
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: of
              PsiElement(identifier)('of')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ScNewTemplateDefinition: <anonymous>
            PsiElement(new)('new')
            PsiWhiteSpace(' ')
            ExtendsBlock
              TemplateParents
                ConstructorInvocation
                  ParametrizedType: OverloadedFun[Int]
                    SimpleType: OverloadedFun
                      CodeReferenceElement: OverloadedFun
                        PsiElement(identifier)('OverloadedFun')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: Int
                        CodeReferenceElement: Int
                          PsiElement(identifier)('Int')
                      PsiElement(])(']')
                  ArgumentList
                    PsiElement(()('(')
                    IntegerLiteral
                      PsiElement(integer)('1')
                    PsiElement())(')')
        PsiWhiteSpace('\n\n  ')
        MethodCall
          ReferenceExpression: of.foo
            ReferenceExpression: of
              PsiElement(identifier)('of')
            PsiElement(.)('.')
            PsiElement(identifier)('foo')
          ArgumentList
            PsiElement(()('(')
            ReferenceExpression: _.toString
              UnderscoreSection
                PsiElement(_)('_')
              PsiElement(.)('.')
              PsiElement(identifier)('toString')
            PsiElement())(')')
        PsiWhiteSpace('\n\n  ')
        MethodCall
          ReferenceExpression: of.poly
            ReferenceExpression: of
              PsiElement(identifier)('of')
            PsiElement(.)('.')
            PsiElement(identifier)('poly')
          ArgumentList
            PsiElement(()('(')
            FunctionExpression
              Parameters
                ParametersClause
                  Parameter: x
                    PsiElement(identifier)('x')
              PsiWhiteSpace(' ')
              PsiElement(=>)('=>')
              PsiWhiteSpace(' ')
              InfixExpression
                ReferenceExpression: x
                  PsiElement(identifier)('x')
                PsiWhiteSpace(' ')
                ReferenceExpression: /
                  PsiElement(identifier)('/')
                PsiWhiteSpace(' ')
                IntegerLiteral
                  PsiElement(integer)('2')
            PsiWhiteSpace(' ')
            PsiElement())(')')
        PsiWhiteSpace('\n  ')
        PsiComment(comment)('//of.polySam(x => x / 2 )')
        PsiWhiteSpace('\n  ')
        MethodCall
          ReferenceExpression: of.polyJavaSam
            ReferenceExpression: of
              PsiElement(identifier)('of')
            PsiElement(.)('.')
            PsiElement(identifier)('polyJavaSam')
          ArgumentList
            PsiElement(()('(')
            FunctionExpression
              Parameters
                ParametersClause
                  Parameter: x
                    PsiElement(identifier)('x')
              PsiWhiteSpace(' ')
              PsiElement(=>)('=>')
              PsiWhiteSpace(' ')
              ReferenceExpression: x
                PsiElement(identifier)('x')
            PsiElement())(')')
        PsiWhiteSpace('\n\n  ')
        ScPatternDefinition: sl
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: sl
              PsiElement(identifier)('sl')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ScNewTemplateDefinition: <anonymous>
            PsiElement(new)('new')
            PsiWhiteSpace(' ')
            ExtendsBlock
              TemplateParents
                ConstructorInvocation
                  SimpleType: StringLike
                    CodeReferenceElement: StringLike
                      PsiElement(identifier)('StringLike')
                  ArgumentList
                    PsiElement(()('(')
                    StringLiteral
                      PsiElement(string content)('"a"')
                    PsiElement())(')')
        PsiWhiteSpace('\n  ')
        MethodCall
          ReferenceExpression: sl.map
            ReferenceExpression: sl
              PsiElement(identifier)('sl')
            PsiElement(.)('.')
            PsiElement(identifier)('map')
          ArgumentList
            PsiElement(()('(')
            InfixExpression
              UnderscoreSection
                PsiElement(_)('_')
              PsiWhiteSpace(' ')
              ReferenceExpression: ==
                PsiElement(identifier)('==')
              PsiWhiteSpace(' ')
              CharLiteral
                PsiElement(Character)(''a'')
            PsiElement())(')')
        PsiWhiteSpace('  ')
        PsiComment(comment)('// : Array[Boolean]')
        PsiWhiteSpace('\n  ')
        MethodCall
          ReferenceExpression: sl.map
            ReferenceExpression: sl
              PsiElement(identifier)('sl')
            PsiElement(.)('.')
            PsiElement(identifier)('map')
          ArgumentList
            PsiElement(()('(')
            FunctionExpression
              Parameters
                ParametersClause
                  Parameter: x
                    PsiElement(identifier)('x')
              PsiWhiteSpace(' ')
              PsiElement(=>)('=>')
              PsiWhiteSpace(' ')
              CharLiteral
                PsiElement(Character)(''a'')
            PsiElement())(')')
        PsiWhiteSpace('  ')
        PsiComment(comment)('// : String')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScObject: sorting
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('sorting')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: stableSort
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('stableSort')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: K
              PsiElement(identifier)('K')
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              SimpleType: ClassTag
                CodeReferenceElement: ClassTag
                  PsiElement(identifier)('ClassTag')
            PsiElement(])(']')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: a
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('a')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  ParametrizedType: Seq[K]
                    SimpleType: Seq
                      CodeReferenceElement: Seq
                        PsiElement(identifier)('Seq')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: K
                        CodeReferenceElement: K
                          PsiElement(identifier)('K')
                      PsiElement(])(']')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              Parameter: f
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('f')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  FunctionalType: (K, K) => Boolean
                    TupleType: (K, K)
                      PsiElement(()('(')
                      TypesList
                        SimpleType: K
                          CodeReferenceElement: K
                            PsiElement(identifier)('K')
                        PsiElement(,)(',')
                        PsiWhiteSpace(' ')
                        SimpleType: K
                          CodeReferenceElement: K
                            PsiElement(identifier)('K')
                      PsiElement())(')')
                    PsiWhiteSpace(' ')
                    PsiElement(=>)('=>')
                    PsiWhiteSpace(' ')
                    SimpleType: Boolean
                      CodeReferenceElement: Boolean
                        PsiElement(identifier)('Boolean')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: Array[K]
            SimpleType: Array
              CodeReferenceElement: Array
                PsiElement(identifier)('Array')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: K
                CodeReferenceElement: K
                  PsiElement(identifier)('K')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: ???
            PsiElement(identifier)('???')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: stableSort
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('stableSort')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: L
              PsiElement(identifier)('L')
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              SimpleType: ClassTag
                CodeReferenceElement: ClassTag
                  PsiElement(identifier)('ClassTag')
            PsiElement(])(']')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: a
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('a')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  ParametrizedType: Array[L]
                    SimpleType: Array
                      CodeReferenceElement: Array
                        PsiElement(identifier)('Array')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: L
                        CodeReferenceElement: L
                          PsiElement(identifier)('L')
                      PsiElement(])(']')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              Parameter: f
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('f')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  FunctionalType: (L, L) => Boolean
                    TupleType: (L, L)
                      PsiElement(()('(')
                      TypesList
                        SimpleType: L
                          CodeReferenceElement: L
                            PsiElement(identifier)('L')
                        PsiElement(,)(',')
                        PsiWhiteSpace(' ')
                        SimpleType: L
                          CodeReferenceElement: L
                            PsiElement(identifier)('L')
                      PsiElement())(')')
                    PsiWhiteSpace(' ')
                    PsiElement(=>)('=>')
                    PsiWhiteSpace(' ')
                    SimpleType: Boolean
                      CodeReferenceElement: Boolean
                        PsiElement(identifier)('Boolean')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Unit
            CodeReferenceElement: Unit
              PsiElement(identifier)('Unit')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: ???
            PsiElement(identifier)('???')
        PsiWhiteSpace('\n\n  ')
        MethodCall
          ReferenceExpression: stableSort
            PsiElement(identifier)('stableSort')
          ArgumentList
            PsiElement(()('(')
            TypedExpression
              ReferenceExpression: ???
                PsiElement(identifier)('???')
              PsiWhiteSpace(' ')
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              ParametrizedType: Seq[Boolean]
                SimpleType: Seq
                  CodeReferenceElement: Seq
                    PsiElement(identifier)('Seq')
                TypeArgumentsList
                  PsiElement([)('[')
                  SimpleType: Boolean
                    CodeReferenceElement: Boolean
                      PsiElement(identifier)('Boolean')
                  PsiElement(])(']')
            PsiElement(,)(',')
            PsiWhiteSpace(' ')
            FunctionExpression
              Parameters
                ParametersClause
                  PsiElement(()('(')
                  Parameter: x
                    AnnotationsList
                      <empty list>
                    PsiElement(identifier)('x')
                    PsiElement(:)(':')
                    PsiWhiteSpace(' ')
                    ParameterType
                      SimpleType: Boolean
                        CodeReferenceElement: Boolean
                          PsiElement(identifier)('Boolean')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  Parameter: y
                    AnnotationsList
                      <empty list>
                    PsiElement(identifier)('y')
                    PsiElement(:)(':')
                    PsiWhiteSpace(' ')
                    ParameterType
                      SimpleType: Boolean
                        CodeReferenceElement: Boolean
                          PsiElement(identifier)('Boolean')
                  PsiElement())(')')
              PsiWhiteSpace(' ')
              PsiElement(=>)('=>')
              PsiWhiteSpace(' ')
              InfixExpression
                ReferenceExpression: x
                  PsiElement(identifier)('x')
                PsiWhiteSpace(' ')
                ReferenceExpression: &&
                  PsiElement(identifier)('&&')
                PsiWhiteSpace(' ')
                PrefixExpression
                  ReferenceExpression: !
                    PsiElement(identifier)('!')
                  ReferenceExpression: y
                    PsiElement(identifier)('y')
            PsiElement())(')')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  PsiComment(comment)('// trait Bijection[A, B] extends (A => B) {')
  PsiWhiteSpace('\n')
  PsiComment(comment)('//   def andThen[C](g: Bijection[B, C]): Bijection[A, C] = ???')
  PsiWhiteSpace('\n')
  PsiComment(comment)('//   def compose[T](g: Bijection[T, A]) = g andThen this')
  PsiWhiteSpace('\n')
  PsiComment(comment)('// }')
  PsiWhiteSpace('\n\n')
  ScObject: SI10194
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('SI10194')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScTrait: X
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(trait)('trait')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('X')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: A
              PsiElement(identifier)('A')
            PsiElement(])(']')
          PsiWhiteSpace(' ')
          ExtendsBlock
            ScTemplateBody
              PsiElement({)('{')
              PsiWhiteSpace('\n    ')
              ScFunctionDeclaration: map
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(def)('def')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('map')
                TypeParameterClause
                  PsiElement([)('[')
                  TypeParameter: B
                    PsiElement(identifier)('B')
                  PsiElement(])(']')
                Parameters
                  ParametersClause
                    PsiElement(()('(')
                    Parameter: f
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(identifier)('f')
                      PsiElement(:)(':')
                      PsiWhiteSpace(' ')
                      ParameterType
                        FunctionalType: A => B
                          SimpleType: A
                            CodeReferenceElement: A
                              PsiElement(identifier)('A')
                          PsiWhiteSpace(' ')
                          PsiElement(=>)('=>')
                          PsiWhiteSpace(' ')
                          SimpleType: B
                            CodeReferenceElement: B
                              PsiElement(identifier)('B')
                    PsiElement())(')')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                SimpleType: Unit
                  CodeReferenceElement: Unit
                    PsiElement(identifier)('Unit')
              PsiWhiteSpace('\n  ')
              PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        ScTrait: Y
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(trait)('trait')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Y')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: A
              PsiElement(identifier)('A')
            PsiElement(])(']')
          PsiWhiteSpace(' ')
          ExtendsBlock
            PsiElement(extends)('extends')
            PsiWhiteSpace(' ')
            TemplateParents
              ConstructorInvocation
                ParametrizedType: X[A]
                  SimpleType: X
                    CodeReferenceElement: X
                      PsiElement(identifier)('X')
                  TypeArgumentsList
                    PsiElement([)('[')
                    SimpleType: A
                      CodeReferenceElement: A
                        PsiElement(identifier)('A')
                    PsiElement(])(']')
            PsiWhiteSpace(' ')
            ScTemplateBody
              PsiElement({)('{')
              PsiWhiteSpace('\n    ')
              ScFunctionDeclaration: map
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(def)('def')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('map')
                TypeParameterClause
                  PsiElement([)('[')
                  TypeParameter: B
                    PsiElement(identifier)('B')
                  PsiElement(])(']')
                Parameters
                  ParametersClause
                    PsiElement(()('(')
                    Parameter: f
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(identifier)('f')
                      PsiElement(:)(':')
                      PsiWhiteSpace(' ')
                      ParameterType
                        FunctionalType: A => B
                          SimpleType: A
                            CodeReferenceElement: A
                              PsiElement(identifier)('A')
                          PsiWhiteSpace(' ')
                          PsiElement(=>)('=>')
                          PsiWhiteSpace(' ')
                          SimpleType: B
                            CodeReferenceElement: B
                              PsiElement(identifier)('B')
                    PsiElement())(')')
                  ParametersClause
                    PsiElement(()('(')
                    PsiElement(implicit)('implicit')
                    PsiWhiteSpace(' ')
                    Parameter: ordering
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(identifier)('ordering')
                      PsiElement(:)(':')
                      PsiWhiteSpace(' ')
                      ParameterType
                        ParametrizedType: Ordering[B]
                          SimpleType: Ordering
                            CodeReferenceElement: Ordering
                              PsiElement(identifier)('Ordering')
                          TypeArgumentsList
                            PsiElement([)('[')
                            SimpleType: B
                              CodeReferenceElement: B
                                PsiElement(identifier)('B')
                            PsiElement(])(']')
                    PsiElement())(')')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                SimpleType: Unit
                  CodeReferenceElement: Unit
                    PsiElement(identifier)('Unit')
              PsiWhiteSpace('\n  ')
              PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        ScTrait: Z
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(trait)('trait')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Z')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: A
              PsiElement(identifier)('A')
            PsiElement(])(']')
          PsiWhiteSpace(' ')
          ExtendsBlock
            PsiElement(extends)('extends')
            PsiWhiteSpace(' ')
            TemplateParents
              ConstructorInvocation
                ParametrizedType: Y[A]
                  SimpleType: Y
                    CodeReferenceElement: Y
                      PsiElement(identifier)('Y')
                  TypeArgumentsList
                    PsiElement([)('[')
                    SimpleType: A
                      CodeReferenceElement: A
                        PsiElement(identifier)('A')
                    PsiElement(])(']')
        PsiWhiteSpace('\n\n  ')
        MethodCall
          ReferenceExpression: (null: Y[Int]).map
            ExpressionInParenthesis
              PsiElement(()('(')
              TypedExpression
                NullLiteral
                  PsiElement(null)('null')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParametrizedType: Y[Int]
                  SimpleType: Y
                    CodeReferenceElement: Y
                      PsiElement(identifier)('Y')
                  TypeArgumentsList
                    PsiElement([)('[')
                    SimpleType: Int
                      CodeReferenceElement: Int
                        PsiElement(identifier)('Int')
                    PsiElement(])(']')
              PsiElement())(')')
            PsiElement(.)('.')
            PsiElement(identifier)('map')
          ArgumentList
            PsiElement(()('(')
            FunctionExpression
              Parameters
                ParametersClause
                  Parameter: x
                    PsiElement(identifier)('x')
              PsiWhiteSpace(' ')
              PsiElement(=>)('=>')
              PsiWhiteSpace(' ')
              ReferenceExpression: x.toString
                ReferenceExpression: x
                  PsiElement(identifier)('x')
                PsiElement(.)('.')
                PsiElement(identifier)('toString')
            PsiElement())(')')
        PsiWhiteSpace(' ')
        PsiComment(comment)('// compiled')
        PsiWhiteSpace('\n  ')
        MethodCall
          ReferenceExpression: (null: Z[Int]).map
            ExpressionInParenthesis
              PsiElement(()('(')
              TypedExpression
                NullLiteral
                  PsiElement(null)('null')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParametrizedType: Z[Int]
                  SimpleType: Z
                    CodeReferenceElement: Z
                      PsiElement(identifier)('Z')
                  TypeArgumentsList
                    PsiElement([)('[')
                    SimpleType: Int
                      CodeReferenceElement: Int
                        PsiElement(identifier)('Int')
                    PsiElement(])(']')
              PsiElement())(')')
            PsiElement(.)('.')
            PsiElement(identifier)('map')
          ArgumentList
            PsiElement(()('(')
            FunctionExpression
              Parameters
                ParametersClause
                  Parameter: x
                    PsiElement(identifier)('x')
              PsiWhiteSpace(' ')
              PsiElement(=>)('=>')
              PsiWhiteSpace(' ')
              ReferenceExpression: x.toString
                ReferenceExpression: x
                  PsiElement(identifier)('x')
                PsiElement(.)('.')
                PsiElement(identifier)('toString')
            PsiElement())(')')
        PsiWhiteSpace(' ')
        PsiComment(comment)('// didn't compile')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScTrait: A
    PsiComment(comment)('// Perform eta-expansion of methods passed as functions to overloaded functions')
    PsiWhiteSpace('\n')
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('A')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace(' ')
        ScFunctionDefinition: map
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('map')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: T
              PsiElement(identifier)('T')
            PsiElement(])(']')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: f
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('f')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  FunctionalType: Int => T
                    SimpleType: Int
                      CodeReferenceElement: Int
                        PsiElement(identifier)('Int')
                    PsiWhiteSpace(' ')
                    PsiElement(=>)('=>')
                    PsiWhiteSpace(' ')
                    SimpleType: T
                      CodeReferenceElement: T
                        PsiElement(identifier)('T')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Unit
            CodeReferenceElement: Unit
              PsiElement(identifier)('Unit')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          UnitExpression
            PsiElement(()('(')
            PsiElement())(')')
        PsiWhiteSpace(' ')
        PsiElement(})('}')
  PsiWhiteSpace('\n')
  ScObject: B
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('B')
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          SimpleType: A
            CodeReferenceElement: A
              PsiElement(identifier)('A')
      PsiWhiteSpace(' ')
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: noover
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('noover')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: f
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('f')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  ParametrizedType: SAM[Int, Any]
                    SimpleType: SAM
                      CodeReferenceElement: SAM
                        PsiElement(identifier)('SAM')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: Int
                        CodeReferenceElement: Int
                          PsiElement(identifier)('Int')
                      PsiElement(,)(',')
                      PsiWhiteSpace(' ')
                      SimpleType: Any
                        CodeReferenceElement: Any
                          PsiElement(identifier)('Any')
                      PsiElement(])(']')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Unit
            CodeReferenceElement: Unit
              PsiElement(identifier)('Unit')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          UnitExpression
            PsiElement(()('(')
            PsiElement())(')')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: map
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('map')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: T
              PsiElement(identifier)('T')
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              SimpleType: scala.reflect.ClassTag
                CodeReferenceElement: scala.reflect.ClassTag
                  CodeReferenceElement: scala.reflect
                    CodeReferenceElement: scala
                      PsiElement(identifier)('scala')
                    PsiElement(.)('.')
                    PsiElement(identifier)('reflect')
                  PsiElement(.)('.')
                  PsiElement(identifier)('ClassTag')
            PsiElement(])(']')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: f
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('f')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  FunctionalType: Int => T
                    SimpleType: Int
                      CodeReferenceElement: Int
                        PsiElement(identifier)('Int')
                    PsiWhiteSpace(' ')
                    PsiElement(=>)('=>')
                    PsiWhiteSpace(' ')
                    SimpleType: T
                      CodeReferenceElement: T
                        PsiElement(identifier)('T')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Unit
            CodeReferenceElement: Unit
              PsiElement(identifier)('Unit')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          UnitExpression
            PsiElement(()('(')
            PsiElement())(')')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: f
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('f')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: x
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Int
                    CodeReferenceElement: Int
                      PsiElement(identifier)('Int')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: x
            PsiElement(identifier)('x')
        PsiWhiteSpace('\n  ')
        MethodCall
          ReferenceExpression: noover
            PsiElement(identifier)('noover')
          ArgumentList
            PsiElement(()('(')
            ReferenceExpression: f
              PsiElement(identifier)('f')
            PsiElement())(')')
        PsiWhiteSpace('\n  ')
        MethodCall
          ReferenceExpression: noover
            PsiElement(identifier)('noover')
          ArgumentList
            PsiElement(()('(')
            ReferenceExpression: identity
              PsiElement(identifier)('identity')
            PsiElement())(')')
        PsiWhiteSpace('\n  ')
        MethodCall
          ReferenceExpression: map
            PsiElement(identifier)('map')
          ArgumentList
            PsiElement(()('(')
            ReferenceExpression: f
              PsiElement(identifier)('f')
            PsiElement())(')')
        PsiWhiteSpace(' ')
        PsiComment(comment)('// same param type, monomorphic method')
        PsiWhiteSpace('\n  ')
        MethodCall
          ReferenceExpression: map
            PsiElement(identifier)('map')
          ArgumentList
            PsiElement(()('(')
            ReferenceExpression: identity
              PsiElement(identifier)('identity')
            PsiElement())(')')
        PsiWhiteSpace(' ')
        PsiComment(comment)('// same param type, polymorphic method')
        PsiWhiteSpace('\n\n  ')
        ScObject: t
          PsiComment(comment)('// must not lub to an incompatible function type')
          PsiWhiteSpace('\n  ')
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(object)('object')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('t')
          PsiWhiteSpace(' ')
          ExtendsBlock
            ScTemplateBody
              PsiElement({)('{')
              PsiWhiteSpace(' ')
              ScFunctionDefinition: f
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(def)('def')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('f')
                Parameters
                  ParametersClause
                    PsiElement(()('(')
                    Parameter: x
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(identifier)('x')
                      PsiElement(:)(':')
                      PsiWhiteSpace(' ')
                      ParameterType
                        FunctionalType: Int => Int
                          SimpleType: Int
                            CodeReferenceElement: Int
                              PsiElement(identifier)('Int')
                          PsiWhiteSpace(' ')
                          PsiElement(=>)('=>')
                          PsiWhiteSpace(' ')
                          SimpleType: Int
                            CodeReferenceElement: Int
                              PsiElement(identifier)('Int')
                    PsiElement())(')')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                SimpleType: Int
                  CodeReferenceElement: Int
                    PsiElement(identifier)('Int')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                IntegerLiteral
                  PsiElement(integer)('0')
              PsiElement(;)(';')
              PsiWhiteSpace(' ')
              ScFunctionDefinition: f
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(def)('def')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('f')
                Parameters
                  ParametersClause
                    PsiElement(()('(')
                    Parameter: y
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(identifier)('y')
                      PsiElement(:)(':')
                      PsiWhiteSpace(' ')
                      ParameterType
                        FunctionalType: String => Int
                          SimpleType: String
                            CodeReferenceElement: String
                              PsiElement(identifier)('String')
                          PsiWhiteSpace(' ')
                          PsiElement(=>)('=>')
                          PsiWhiteSpace(' ')
                          SimpleType: Int
                            CodeReferenceElement: Int
                              PsiElement(identifier)('Int')
                    PsiElement())(')')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                SimpleType: String
                  CodeReferenceElement: String
                    PsiElement(identifier)('String')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                StringLiteral
                  PsiElement(string content)('"1"')
              PsiWhiteSpace(' ')
              PsiElement(})('}')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: fun
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('fun')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: x
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Int
                    CodeReferenceElement: Int
                      PsiElement(identifier)('Int')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: x
            PsiElement(identifier)('x')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: fun2
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('fun2')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: T
              PsiElement(identifier)('T')
            PsiElement(])(']')
          Parameters
            <empty list>
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          FunctionExpression
            Parameters
              ParametersClause
                PsiElement(()('(')
                Parameter: x
                  AnnotationsList
                    <empty list>
                  PsiElement(identifier)('x')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    SimpleType: T
                      CodeReferenceElement: T
                        PsiElement(identifier)('T')
                PsiElement())(')')
            PsiWhiteSpace(' ')
            PsiElement(=>)('=>')
            PsiWhiteSpace(' ')
            IntegerLiteral
              PsiElement(integer)('42')
        PsiWhiteSpace('\n  ')
        MethodCall
          ReferenceExpression: t.f
            ReferenceExpression: t
              PsiElement(identifier)('t')
            PsiElement(.)('.')
            PsiElement(identifier)('f')
          ArgumentList
            PsiElement(()('(')
            ReferenceExpression: fun
              PsiElement(identifier)('fun')
            PsiElement())(')')
        PsiWhiteSpace(' ')
        PsiComment(comment)('// different param type, monomorphic method')
        PsiWhiteSpace('\n  ')
        PsiComment(comment)('//t.f(fun2) // different param type, polymorphic method - not possible')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScTrait: SAM
    PsiComment(comment)('// The same for SAM types')
    PsiWhiteSpace('\n')
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('SAM')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: T
        PsiElement(identifier)('-')
        PsiElement(identifier)('T')
      PsiElement(,)(',')
      PsiWhiteSpace(' ')
      TypeParameter: R
        PsiElement(identifier)('+')
        PsiElement(identifier)('R')
      PsiElement(])(']')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace(' ')
        ScFunctionDeclaration: apply
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('apply')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: x
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: T
                    CodeReferenceElement: T
                      PsiElement(identifier)('T')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: R
            CodeReferenceElement: R
              PsiElement(identifier)('R')
        PsiWhiteSpace(' ')
        PsiElement(})('}')
  PsiWhiteSpace('\n')
  ScTrait: A2
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('A2')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace(' ')
        ScFunctionDefinition: map
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('map')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: T
              PsiElement(identifier)('T')
            PsiElement(])(']')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: f
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('f')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  ParametrizedType: SAM[Int, T]
                    SimpleType: SAM
                      CodeReferenceElement: SAM
                        PsiElement(identifier)('SAM')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: Int
                        CodeReferenceElement: Int
                          PsiElement(identifier)('Int')
                      PsiElement(,)(',')
                      PsiWhiteSpace(' ')
                      SimpleType: T
                        CodeReferenceElement: T
                          PsiElement(identifier)('T')
                      PsiElement(])(']')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Unit
            CodeReferenceElement: Unit
              PsiElement(identifier)('Unit')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          UnitExpression
            PsiElement(()('(')
            PsiElement())(')')
        PsiWhiteSpace(' ')
        PsiElement(})('}')
  PsiWhiteSpace('\n')
  ScObject: B2
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('B2')
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          SimpleType: A2
            CodeReferenceElement: A2
              PsiElement(identifier)('A2')
      PsiWhiteSpace(' ')
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: noover
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('noover')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: f
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('f')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  ParametrizedType: SAM[Int, Any]
                    SimpleType: SAM
                      CodeReferenceElement: SAM
                        PsiElement(identifier)('SAM')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: Int
                        CodeReferenceElement: Int
                          PsiElement(identifier)('Int')
                      PsiElement(,)(',')
                      PsiWhiteSpace(' ')
                      SimpleType: Any
                        CodeReferenceElement: Any
                          PsiElement(identifier)('Any')
                      PsiElement(])(']')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Unit
            CodeReferenceElement: Unit
              PsiElement(identifier)('Unit')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          UnitExpression
            PsiElement(()('(')
            PsiElement())(')')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: map
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('map')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: T
              PsiElement(identifier)('T')
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              SimpleType: scala.reflect.ClassTag
                CodeReferenceElement: scala.reflect.ClassTag
                  CodeReferenceElement: scala.reflect
                    CodeReferenceElement: scala
                      PsiElement(identifier)('scala')
                    PsiElement(.)('.')
                    PsiElement(identifier)('reflect')
                  PsiElement(.)('.')
                  PsiElement(identifier)('ClassTag')
            PsiElement(])(']')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: f
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('f')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  ParametrizedType: SAM[Int, T]
                    SimpleType: SAM
                      CodeReferenceElement: SAM
                        PsiElement(identifier)('SAM')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: Int
                        CodeReferenceElement: Int
                          PsiElement(identifier)('Int')
                      PsiElement(,)(',')
                      PsiWhiteSpace(' ')
                      SimpleType: T
                        CodeReferenceElement: T
                          PsiElement(identifier)('T')
                      PsiElement(])(']')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Unit
            CodeReferenceElement: Unit
              PsiElement(identifier)('Unit')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          UnitExpression
            PsiElement(()('(')
            PsiElement())(')')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: f
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('f')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: x
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Int
                    CodeReferenceElement: Int
                      PsiElement(identifier)('Int')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: x
            PsiElement(identifier)('x')
        PsiWhiteSpace('\n  ')
        MethodCall
          ReferenceExpression: noover
            PsiElement(identifier)('noover')
          ArgumentList
            PsiElement(()('(')
            ReferenceExpression: f
              PsiElement(identifier)('f')
            PsiElement())(')')
        PsiWhiteSpace('\n  ')
        MethodCall
          ReferenceExpression: noover
            PsiElement(identifier)('noover')
          ArgumentList
            PsiElement(()('(')
            ReferenceExpression: identity
              PsiElement(identifier)('identity')
            PsiElement())(')')
        PsiWhiteSpace('\n  ')
        MethodCall
          ReferenceExpression: map
            PsiElement(identifier)('map')
          ArgumentList
            PsiElement(()('(')
            ReferenceExpression: f
              PsiElement(identifier)('f')
            PsiElement())(')')
        PsiWhiteSpace(' ')
        PsiComment(comment)('// same param type, monomorphic method')
        PsiWhiteSpace('\n  ')
        PsiComment(comment)('//map(identity) // same param type, polymorphic method - not possible for SAMs')
        PsiWhiteSpace('\n\n  ')
        ScObject: t
          PsiComment(comment)('// must not lub to an incompatible function type')
          PsiWhiteSpace('\n  ')
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(object)('object')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('t')
          PsiWhiteSpace(' ')
          ExtendsBlock
            ScTemplateBody
              PsiElement({)('{')
              PsiWhiteSpace(' ')
              ScFunctionDefinition: f
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(def)('def')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('f')
                Parameters
                  ParametersClause
                    PsiElement(()('(')
                    Parameter: x
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(identifier)('x')
                      PsiElement(:)(':')
                      PsiWhiteSpace(' ')
                      ParameterType
                        ParametrizedType: SAM[Int, Int]
                          SimpleType: SAM
                            CodeReferenceElement: SAM
                              PsiElement(identifier)('SAM')
                          TypeArgumentsList
                            PsiElement([)('[')
                            SimpleType: Int
                              CodeReferenceElement: Int
                                PsiElement(identifier)('Int')
                            PsiElement(,)(',')
                            PsiWhiteSpace(' ')
                            SimpleType: Int
                              CodeReferenceElement: Int
                                PsiElement(identifier)('Int')
                            PsiElement(])(']')
                    PsiElement())(')')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                SimpleType: Int
                  CodeReferenceElement: Int
                    PsiElement(identifier)('Int')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                IntegerLiteral
                  PsiElement(integer)('0')
              PsiElement(;)(';')
              PsiWhiteSpace(' ')
              ScFunctionDefinition: f
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(def)('def')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('f')
                Parameters
                  ParametersClause
                    PsiElement(()('(')
                    Parameter: y
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(identifier)('y')
                      PsiElement(:)(':')
                      PsiWhiteSpace(' ')
                      ParameterType
                        ParametrizedType: SAM[String, Int]
                          SimpleType: SAM
                            CodeReferenceElement: SAM
                              PsiElement(identifier)('SAM')
                          TypeArgumentsList
                            PsiElement([)('[')
                            SimpleType: String
                              CodeReferenceElement: String
                                PsiElement(identifier)('String')
                            PsiElement(,)(',')
                            PsiWhiteSpace(' ')
                            SimpleType: Int
                              CodeReferenceElement: Int
                                PsiElement(identifier)('Int')
                            PsiElement(])(']')
                    PsiElement())(')')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                SimpleType: String
                  CodeReferenceElement: String
                    PsiElement(identifier)('String')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                StringLiteral
                  PsiElement(string content)('"1"')
              PsiWhiteSpace(' ')
              PsiElement(})('}')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: fun
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('fun')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: x
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Int
                    CodeReferenceElement: Int
                      PsiElement(identifier)('Int')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: x
            PsiElement(identifier)('x')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: fun2
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('fun2')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: T
              PsiElement(identifier)('T')
            PsiElement(])(']')
          Parameters
            <empty list>
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          FunctionExpression
            Parameters
              ParametersClause
                PsiElement(()('(')
                Parameter: x
                  AnnotationsList
                    <empty list>
                  PsiElement(identifier)('x')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    SimpleType: T
                      CodeReferenceElement: T
                        PsiElement(identifier)('T')
                PsiElement())(')')
            PsiWhiteSpace(' ')
            PsiElement(=>)('=>')
            PsiWhiteSpace(' ')
            IntegerLiteral
              PsiElement(integer)('42')
        PsiWhiteSpace('\n  ')
        MethodCall
          ReferenceExpression: t.f
            ReferenceExpression: t
              PsiElement(identifier)('t')
            PsiElement(.)('.')
            PsiElement(identifier)('f')
          ArgumentList
            PsiElement(()('(')
            ReferenceExpression: fun
              PsiElement(identifier)('fun')
            PsiElement())(')')
        PsiWhiteSpace(' ')
        PsiComment(comment)('// different param type, monomorphic method')
        PsiWhiteSpace('\n  ')
        PsiComment(comment)('//t.f(fun2) // different param type, polymorphic method - not possible')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
