val x = Option((1, 2, 3)).map(_ + _ + _)
def foo[T <: Tuple : Tuple.IsMappedBy[Option]](t: T)(f: Tuple.InverseMap[T, Option] => Int) = null
val y = foo(Option(1), Option(2), Option(3))(_ + _ + _)

//val x: (Tuple3[Int, Int, Int] => Int) = _ + _ + _
-----
ScalaFile
  ScPatternDefinition: x
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(val)('val')
    PsiWhiteSpace(' ')
    ListOfPatterns
      ReferencePattern: x
        PsiElement(identifier)('x')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    MethodCall
      ReferenceExpression: Option((1, 2, 3)).map
        MethodCall
          ReferenceExpression: Option
            PsiElement(identifier)('Option')
          ArgumentList
            PsiElement(()('(')
            Tuple
              PsiElement(()('(')
              IntegerLiteral
                PsiElement(integer)('1')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              IntegerLiteral
                PsiElement(integer)('2')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              IntegerLiteral
                PsiElement(integer)('3')
              PsiElement())(')')
            PsiElement())(')')
        PsiElement(.)('.')
        PsiElement(identifier)('map')
      ArgumentList
        PsiElement(()('(')
        InfixExpression
          InfixExpression
            UnderscoreSection
              PsiElement(_)('_')
            PsiWhiteSpace(' ')
            ReferenceExpression: +
              PsiElement(identifier)('+')
            PsiWhiteSpace(' ')
            UnderscoreSection
              PsiElement(_)('_')
          PsiWhiteSpace(' ')
          ReferenceExpression: +
            PsiElement(identifier)('+')
          PsiWhiteSpace(' ')
          UnderscoreSection
            PsiElement(_)('_')
        PsiElement())(')')
  PsiWhiteSpace('\n')
  ScFunctionDefinition: foo
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(def)('def')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('foo')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: T
        PsiElement(identifier)('T')
        PsiWhiteSpace(' ')
        PsiElement(<:)('<:')
        PsiWhiteSpace(' ')
        SimpleType: Tuple
          CodeReferenceElement: Tuple
            PsiElement(identifier)('Tuple')
        PsiWhiteSpace(' ')
        PsiElement(:)(':')
        PsiWhiteSpace(' ')
        ParametrizedType: Tuple.IsMappedBy[Option]
          SimpleType: Tuple.IsMappedBy
            CodeReferenceElement: Tuple.IsMappedBy
              CodeReferenceElement: Tuple
                PsiElement(identifier)('Tuple')
              PsiElement(.)('.')
              PsiElement(identifier)('IsMappedBy')
          TypeArgumentsList
            PsiElement([)('[')
            SimpleType: Option
              CodeReferenceElement: Option
                PsiElement(identifier)('Option')
            PsiElement(])(']')
      PsiElement(])(']')
    Parameters
      ParametersClause
        PsiElement(()('(')
        Parameter: t
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(identifier)('t')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParameterType
            SimpleType: T
              CodeReferenceElement: T
                PsiElement(identifier)('T')
        PsiElement())(')')
      ParametersClause
        PsiElement(()('(')
        Parameter: f
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(identifier)('f')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParameterType
            FunctionalType: Tuple.InverseMap[T, Option] => Int
              ParametrizedType: Tuple.InverseMap[T, Option]
                SimpleType: Tuple.InverseMap
                  CodeReferenceElement: Tuple.InverseMap
                    CodeReferenceElement: Tuple
                      PsiElement(identifier)('Tuple')
                    PsiElement(.)('.')
                    PsiElement(identifier)('InverseMap')
                TypeArgumentsList
                  PsiElement([)('[')
                  SimpleType: T
                    CodeReferenceElement: T
                      PsiElement(identifier)('T')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  SimpleType: Option
                    CodeReferenceElement: Option
                      PsiElement(identifier)('Option')
                  PsiElement(])(']')
              PsiWhiteSpace(' ')
              PsiElement(=>)('=>')
              PsiWhiteSpace(' ')
              SimpleType: Int
                CodeReferenceElement: Int
                  PsiElement(identifier)('Int')
        PsiElement())(')')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    NullLiteral
      PsiElement(null)('null')
  PsiWhiteSpace('\n')
  ScPatternDefinition: y
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(val)('val')
    PsiWhiteSpace(' ')
    ListOfPatterns
      ReferencePattern: y
        PsiElement(identifier)('y')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    MethodCall
      MethodCall
        ReferenceExpression: foo
          PsiElement(identifier)('foo')
        ArgumentList
          PsiElement(()('(')
          MethodCall
            ReferenceExpression: Option
              PsiElement(identifier)('Option')
            ArgumentList
              PsiElement(()('(')
              IntegerLiteral
                PsiElement(integer)('1')
              PsiElement())(')')
          PsiElement(,)(',')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: Option
              PsiElement(identifier)('Option')
            ArgumentList
              PsiElement(()('(')
              IntegerLiteral
                PsiElement(integer)('2')
              PsiElement())(')')
          PsiElement(,)(',')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: Option
              PsiElement(identifier)('Option')
            ArgumentList
              PsiElement(()('(')
              IntegerLiteral
                PsiElement(integer)('3')
              PsiElement())(')')
          PsiElement())(')')
      ArgumentList
        PsiElement(()('(')
        InfixExpression
          InfixExpression
            UnderscoreSection
              PsiElement(_)('_')
            PsiWhiteSpace(' ')
            ReferenceExpression: +
              PsiElement(identifier)('+')
            PsiWhiteSpace(' ')
            UnderscoreSection
              PsiElement(_)('_')
          PsiWhiteSpace(' ')
          ReferenceExpression: +
            PsiElement(identifier)('+')
          PsiWhiteSpace(' ')
          UnderscoreSection
            PsiElement(_)('_')
        PsiElement())(')')
  PsiWhiteSpace('\n\n')
  PsiComment(comment)('//val x: (Tuple3[Int, Int, Int] => Int) = _ + _ + _')
