//############################################################################
// Lisp interpreter (revived as an optimizer test.)
//############################################################################

//############################################################################
// Lisp Scanner

class LispTokenizer(s: String) extends Iterator[String] {
  private var i = 0;
  private def isDelimiter(ch: Char) = ch <= ' ' || ch == '(' || ch == ')'
  def hasNext: Boolean = {
    while (i < s.length() && s.charAt(i) <= ' ') i += 1
    i < s.length()
  }
  def next: String =
    if (hasNext) {
      val start = i
      if (isDelimiter(s charAt i)) i += 1
      else
        while {
          i = i + 1
          !isDelimiter(s charAt i)
        } do ()
      s.substring(start, i)
    } else sys.error("premature end of string")
}

//############################################################################
// Lisp Interface

trait Lisp {
  type Data

  def string2lisp(s: String): Data
  def lisp2string(s: Data): String

  def evaluate(d: Data): Data
  // !!! def evaluate(s: String): Data = evaluate(string2lisp(s))
  def evaluate(s: String): Data
}

//############################################################################
// Lisp Implementation Using Case Classes

object LispCaseClasses extends Lisp {

  import List.range

  trait Data {
    def elemsToString(): String = toString();
  }
  case class CONS(car: Data, cdr: Data) extends Data {
    override def toString() = "(" + elemsToString() + ")";
    override def elemsToString() = car.toString() + (cdr match {
      case NIL() => ""
      case _     => " " + cdr.elemsToString();
    })
  }
  case class NIL() extends Data { // !!! use case object
    override def toString() = "()";
  }
  case class SYM(name: String) extends Data {
    override def toString() = name;
  }
  case class NUM(x: Int) extends Data {
    override def toString() = x.toString();
  }
  case class STR(x: String) extends Data {
    override def toString() = "\"" + x + "\"";
  }
  case class FUN(f: List[Data] => Data) extends Data {
    override def toString() = "<fn>";
  }

  def list(): Data =
    NIL();
  def list(x0: Data): Data =
    CONS(x0, NIL());
  def list(x0: Data, x1: Data): Data =
    CONS(x0, list(x1));
  def list(x0: Data, x1: Data, x2: Data): Data =
    CONS(x0, list(x1, x2));
  def list(x0: Data, x1: Data, x2: Data, x3: Data): Data =
    CONS(x0, list(x1, x2, x3));
  def list(x0: Data, x1: Data, x2: Data, x3: Data, x4: Data): Data =
    CONS(x0, list(x1, x2, x3, x4));
  def list(x0: Data, x1: Data, x2: Data, x3: Data, x4: Data, x5: Data): Data =
    CONS(x0, list(x1, x2, x3, x4, x5));
  def list(x0: Data, x1: Data, x2: Data, x3: Data, x4: Data, x5: Data,
   x6: Data): Data =
    CONS(x0, list(x1, x2, x3, x4, x5, x6));
  def list(x0: Data, x1: Data, x2: Data, x3: Data, x4: Data, x5: Data,
   x6: Data, x7: Data): Data =
    CONS(x0, list(x1, x2, x3, x4, x5, x6, x7));
  def list(x0: Data, x1: Data, x2: Data, x3: Data, x4: Data, x5: Data,
   x6: Data, x7: Data, x8: Data): Data =
    CONS(x0, list(x1, x2, x3, x4, x5, x6, x7, x8));
  def list(x0: Data, x1: Data, x2: Data, x3: Data, x4: Data, x5: Data,
   x6: Data, x7: Data, x8: Data, x9: Data): Data =
    CONS(x0, list(x1, x2, x3, x4, x5, x6, x7, x8, x9));

  var curexp: Data = null
  var trace: Boolean = false
  var indent: Int = 0

  def lispError[a](msg: String): a =
    sys.error("error: " + msg + "\n" + curexp);

  trait Environment {
    def lookup(n: String): Data;
    def extendRec(name: String, expr: Environment => Data) =
      new Environment {
        def lookup(n: String): Data =
          if (n == name) expr(this) else Environment.this.lookup(n);
      }
    def extend(name: String, v: Data) = extendRec(name, (env1 => v));
  }
  val EmptyEnvironment = new Environment {
    def lookup(n: String): Data = lispError("undefined: " + n);
  }

  def toList(x: Data): List[Data] = x match {
    case NIL() => List()
    case CONS(y, ys) => y :: toList(ys)
    case _ => lispError("malformed list: " + x);
  }

  def toBoolean(x: Data) = x match {
    case NUM(0) => false
    case _ => true
  }

  def normalize(x: Data): Data = x match {
    case CONS(SYM("def"),
           CONS(CONS(SYM(name), args), CONS(body, CONS(expr, NIL())))) =>
      normalize(list(SYM("def"),
        SYM(name), list(SYM("lambda"), args, body), expr))
    case CONS(SYM("cond"), CONS(CONS(SYM("else"), CONS(expr, NIL())),NIL())) =>
      normalize(expr)
    case CONS(SYM("cond"), CONS(CONS(test, CONS(expr, NIL())), rest)) =>
      normalize(list(SYM("if"), test, expr, CONS(SYM("cond"), rest)))
    case CONS(h, t) => CONS(normalize(h), normalize(t))
    case _ => x
  }

  def eval(x: Data, env: Environment): Data = {
    val prevexp = curexp;
    curexp = x;
    if (trace) {
      for (x <- range(1, indent)) Console.print(" ");
      Console.println("===> " + x);
      indent = indent + 1;
    }
    val result = eval1(x, env);
    if (trace) {
      indent = indent - 1;
      for (x <- range(1, indent)) Console.print(" ");
      Console.println("<=== " + result);
    }
    curexp = prevexp;
    result
  }

  def eval1(x: Data, env: Environment): Data = x match {
    case SYM(name) =>
      env lookup name
    case CONS(SYM("def"), CONS(SYM(name), CONS(y, CONS(z, NIL())))) =>
      eval(z, env.extendRec(name, (env1 => eval(y, env1))))
    case CONS(SYM("val"), CONS(SYM(name), CONS(y, CONS(z, NIL())))) =>
      eval(z, env.extend(name, eval(y, env)))
    case CONS(SYM("lambda"), CONS(params, CONS(y, NIL()))) =>
      mkLambda(params, y, env)
    case CONS(SYM("if"), CONS(c, CONS(t, CONS(e, NIL())))) =>
      if (toBoolean(eval(c, env))) eval(t, env) else eval(e, env)
    case CONS(SYM("quote"), CONS(x, NIL())) =>
      x
    case CONS(y, xs) =>
      apply(eval(y, env), toList(xs) map (x => eval(x, env)))
    case NUM(_) => x
    case STR(_) => x
    case FUN(_) => x
    case _ =>
      lispError("illegal term")
    }

  def apply(fn: Data, args: List[Data]): Data = fn match {
    case FUN(f) => f(args);
    case _ => lispError("application of non-function: " + fn);
  }

  def mkLambda(params: Data, expr: Data, env: Environment): Data = {

    def extendEnv(env: Environment,
                  ps: List[String], args: List[Data]): Environment =
      (ps, args) match {
        case (List(), List()) =>
          env
        case (p :: ps1, arg :: args1) =>
          extendEnv(env.extend(p, arg), ps1, args1)
        case _ =>
          lispError("wrong number of arguments")
      }

    val ps: List[String] = toList(params) map {
      case SYM(name) => name
      case _ => sys.error("illegal parameter list");
    }

    FUN(args => eval(expr, extendEnv(env, ps, args)))
  }

  val globalEnv = EmptyEnvironment
    .extend("=", FUN({
      case List(NUM(arg1),NUM(arg2)) => NUM(if (arg1 == arg2) 1 else 0)
      case List(STR(arg1),STR(arg2)) => NUM(if (arg1 == arg2) 1 else 0)}))
    .extend("+", FUN({
      case List(NUM(arg1),NUM(arg2)) => NUM(arg1 + arg2)
      case List(STR(arg1),STR(arg2)) => STR(arg1 + arg2)}))
    .extend("-", FUN({
      case List(NUM(arg1),NUM(arg2)) => NUM(arg1 - arg2)}))
    .extend("*", FUN({
      case List(NUM(arg1),NUM(arg2)) => NUM(arg1 * arg2)}))
    .extend("/", FUN({
      case List(NUM(arg1),NUM(arg2)) => NUM(arg1 / arg2)}))
    .extend("car", FUN({
      case List(CONS(x, xs)) => x}))
    .extend("cdr", FUN({
      case List(CONS(x, xs)) => xs}))
    .extend("null?", FUN({
      case List(NIL()) => NUM(1)
      case _ => NUM(0)}))
    .extend("cons", FUN({
      case List(x, y) => CONS(x, y)}));

  def evaluate(x: Data): Data = eval(normalize(x), globalEnv);
  def evaluate(s: String): Data = evaluate(string2lisp(s));

  def string2lisp(s: String): Data = {
    val it = new LispTokenizer(s);
    def parse(token: String): Data = {
      if (token == "(") parseList
      else if (token == ")") sys.error("unbalanced parentheses")
      else if ('0' <= token.charAt(0) && token.charAt(0) <= '9')
        NUM(token.toInt)
      else if (token.charAt(0) == '\"' && token.charAt(token.length()-1)=='\"')
        STR(token.substring(1,token.length() - 1))
      else SYM(token)
    }
    def parseList: Data = {
      val token = it.next;
      if (token == ")") NIL() else CONS(parse(token), parseList)
    }
    parse(it.next)
  }

  def lisp2string(d: Data): String = d.toString();
}

//############################################################################
// Lisp Implementation Using Any

object LispAny extends Lisp {

  import List._;

  type Data = Any;

  case class Lambda(f: List[Data] => Data);

  var curexp: Data = null;
  var trace: Boolean = false;
  var indent: Int = 0;

  def lispError[a](msg: String): a =
    sys.error("error: " + msg + "\n" + curexp);

  trait Environment {
    def lookup(n: String): Data;
    def extendRec(name: String, expr: Environment => Data) =
      new Environment {
        def lookup(n: String): Data =
          if (n == name) expr(this) else Environment.this.lookup(n);
      }
    def extend(name: String, v: Data) = extendRec(name, (env1 => v));
  }
  val EmptyEnvironment = new Environment {
    def lookup(n: String): Data = lispError("undefined: " + n);
  }

  def asList(x: Data): List[Data] = x match {
    case y: List[_] => y
    case _ => lispError("malformed list: " + x)
  }

  def asInt(x: Data): Int = x match {
    case y: Int => y
    case _ => lispError("not an integer: " + x)
  }

  def asString(x: Data): String = x match {
    case y: String => y
    case _ => lispError("not a string: " + x)
  }

  def asBoolean(x: Data): Boolean = x != 0

  def normalize(x: Data): Data = x match {
    case Symbol("and") :: x :: y :: Nil =>
      normalize(Symbol("if") :: x :: y :: 0 :: Nil)
    case Symbol("or") :: x :: y :: Nil =>
      normalize(Symbol("if") :: x :: 1 :: y :: Nil)
    case Symbol("def") :: (name :: args) :: body :: expr :: Nil =>
      normalize(Symbol("def") :: name :: (Symbol("lambda") :: args :: body :: Nil) :: expr :: Nil)
    case Symbol("cond") :: (Symbol("else") :: expr :: Nil) :: rest =>
        normalize(expr);
    case Symbol("cond") :: (test :: expr :: Nil) :: rest =>
    normalize(Symbol("if") :: test :: expr :: (Symbol("cond") :: rest) :: Nil)
    case Symbol("cond") :: Symbol("else") :: expr :: Nil =>
      normalize(expr)
    case h :: t =>
      normalize(h) :: asList(normalize(t))
    case _ =>
      x
  }

  def eval(x: Data, env: Environment): Data = {
    val prevexp = curexp;
    curexp = x;
    if (trace) {
      for (x <- range(1, indent)) Console.print(" ");
      Console.println("===> " + x);
      indent += 1;
    }
    val result = eval1(x, env);
    if (trace) {
      indent -= 1;
      for (x <- range(1, indent)) Console.print(" ");
      Console.println("<=== " + result);
    }
    curexp = prevexp;
    result
  }

  def eval1(x: Data, env: Environment): Data = x match {
    case Symbol(name) =>
      env lookup name
    case Symbol("def") :: Symbol(name) :: y :: z :: Nil =>
      eval(z, env.extendRec(name, (env1 => eval(y, env1))))
    case Symbol("val") :: Symbol(name) :: y :: z :: Nil =>
      eval(z, env.extend(name, eval(y, env)))
    case Symbol("lambda") :: params :: y :: Nil =>
      mkLambda(params, y, env)
    case Symbol("if") :: c :: y :: z :: Nil =>
      if (asBoolean(eval(c, env))) eval(y, env) else eval(z, env)
    case Symbol("quote") :: y :: Nil =>
      y
    case y :: z =>
      apply(eval(y, env), z map (x => eval(x, env)))
    case Lambda(_) => x
    case y: String => x
    case y: Int => x
    case y => lispError("illegal term")
  }

  def lisp2string(x: Data): String = x match {
    case Symbol(name) => name
    case Nil => "()"
    case y :: ys =>
      def list2string(xs: List[Data]): String = xs match {
        case List() => ""
        case y :: ys => " " + lisp2string(y) + list2string(ys)
      }
      "(" + lisp2string(y) + list2string(ys) + ")"
    case _ => if (x.isInstanceOf[String]) "\"" + x + "\""; else x.toString()
  }

  def apply(fn: Data, args: List[Data]): Data = fn match {
    case Lambda(f) => f(args);
    case _ => lispError("application of non-function: " + fn + " to " + args);
  }

  def mkLambda(params: Data, expr: Data, env: Environment): Data = {

    def extendEnv(env: Environment,
                  ps: List[String], args: List[Data]): Environment =
      (ps, args) match {
        case (List(), List()) =>
          env
        case (p :: ps1, arg :: args1) =>
          extendEnv(env.extend(p, arg), ps1, args1)
        case _ =>
          lispError("wrong number of arguments")
      }

    val ps: List[String] = asList(params) map {
      case Symbol(name) => name
      case _ => sys.error("illegal parameter list");
    }

    Lambda(args => eval(expr, extendEnv(env, ps, args)))
  }

  val globalEnv = EmptyEnvironment
    .extend("=", Lambda{
      case List(arg1, arg2) => if (arg1 == arg2) 1 else 0})
    .extend("+", Lambda{
      case List(arg1: Int, arg2: Int) => arg1 + arg2
      case List(arg1: String, arg2: String) => arg1 + arg2})
    .extend("-", Lambda{
      case List(arg1: Int, arg2: Int) => arg1 - arg2})
    .extend("*", Lambda{
      case List(arg1: Int, arg2: Int) => arg1 * arg2})
    .extend("/", Lambda{
      case List(arg1: Int, arg2: Int) => arg1 / arg2})
    .extend("nil", Nil)
    .extend("cons", Lambda{
      case List(arg1, arg2) => arg1 :: asList(arg2)})
    .extend("car", Lambda{
      case List(x :: xs) => x})
    .extend("cdr", Lambda{
      case List(x :: xs) => xs})
    .extend("null?", Lambda{
      case List(Nil) => 1
      case _ => 0});

  def evaluate(x: Data): Data = eval(normalize(x), globalEnv);
  def evaluate(s: String): Data = evaluate(string2lisp(s));

  def string2lisp(s: String): Data = {
    val it = new LispTokenizer(s);
    def parse(token: String): Data = {
      if (token == "(") parseList
      else if (token == ")") sys.error("unbalanced parentheses")
      //else if (Character.isDigit(token.charAt(0)))
      else if (token.charAt(0).isDigit)
        token.toInt
      else if (token.charAt(0) == '\"' && token.charAt(token.length()-1)=='\"')
        token.substring(1,token.length() - 1)
      else Symbol(token)
    }
    def parseList: List[Data] = {
      val token = it.next;
      if (token == ")") Nil else parse(token) :: parseList
    }
    parse(it.next)
  }
}

//############################################################################
// List User

class LispUser(lisp: Lisp) {

  import lisp._;

  def evaluate(s: String) = lisp2string(lisp.evaluate(s));

  def run = {

    Console.println(string2lisp("(lambda (x) (+ (* x x) 1))").asInstanceOf[AnyRef]);
    Console.println(lisp2string(string2lisp("(lambda (x) (+ (* x x) 1))")));
    Console.println();

    Console.println("(    '(1 2 3)) = " + evaluate("     (quote(1 2 3))"));
    Console.println("(car '(1 2 3)) = " + evaluate("(car (quote(1 2 3)))"));
    Console.println("(cdr '(1 2 3)) = " + evaluate("(cdr (quote(1 2 3)))"));
    Console.println("(null? '(2 3)) = " + evaluate("(null? (quote(2 3)))"));
    Console.println("(null?    '()) = " + evaluate("(null?    (quote()))"));
    Console.println();

    Console.println("faculty(10) = " + evaluate(
      "(def (faculty n) " +
        "(if (= n 0) " +
          "1 " +
          "(* n (faculty (- n 1)))) " +
        "(faculty 10))"));
    Console.println("faculty(10) = " + evaluate(
      "(def (faculty n) " +
        "(cond " +
          "((= n 0) 1) " +
          "(else (* n (faculty (- n 1))))) " +
        "(faculty 10))"));
    Console.println("foobar = " + evaluate(
      "(def (foo n) " +
        "(cond " +
          "((= n 0) \"a\")" +
          "((= n 1) \"b\")" +
          "((= (/ n 2) 1) " +
            "(cond " +
              "((= n 2) \"c\")" +
              "(else    \"d\")))" +
          "(else " +
            "(def (bar m) " +
              "(cond " +
                "((= m 0) \"e\")" +
                "((= m 1) \"f\")" +
                "(else    \"z\"))" +
              "(bar (- n 4)))))" +
        "(val nil (quote ())" +
          "(val v1 (foo 0) " +
            "(val v2 (+ (foo 1) (foo 2)) " +
              "(val v3 (+ (+ (foo 3) (foo 4)) (foo 5)) " +
                "(val v4 (foo 6) " +
                  "(cons v1 (cons v2 (cons v3 (cons v4 nil))))))))))"));
    Console.println();
  }
}

//############################################################################
// Main

object Test {
  def main(args: Array[String]): Unit = {
    new LispUser(LispCaseClasses).run;
    new LispUser(LispAny).run;
    ()
  }
}

//############################################################################
-----
ScalaFile
  PsiComment(comment)('//############################################################################')
  PsiWhiteSpace('\n')
  PsiComment(comment)('// Lisp interpreter (revived as an optimizer test.)')
  PsiWhiteSpace('\n')
  PsiComment(comment)('//############################################################################')
  PsiWhiteSpace('\n\n')
  PsiComment(comment)('//############################################################################')
  PsiWhiteSpace('\n')
  PsiComment(comment)('// Lisp Scanner')
  PsiWhiteSpace('\n\n')
  ScClass: LispTokenizer
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('LispTokenizer')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        ParametersClause
          PsiElement(()('(')
          ClassParameter: s
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(identifier)('s')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            ParameterType
              SimpleType: String
                CodeReferenceElement: String
                  PsiElement(identifier)('String')
          PsiElement())(')')
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          ParametrizedType: Iterator[String]
            SimpleType: Iterator
              CodeReferenceElement: Iterator
                PsiElement(identifier)('Iterator')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: String
                CodeReferenceElement: String
                  PsiElement(identifier)('String')
              PsiElement(])(']')
      PsiWhiteSpace(' ')
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScVariableDefinition: i
          AnnotationsList
            <empty list>
          Modifiers
            AccessModifier
              PsiElement(private)('private')
          PsiWhiteSpace(' ')
          PsiElement(var)('var')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: i
              PsiElement(identifier)('i')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          IntegerLiteral
            PsiElement(integer)('0')
        PsiElement(;)(';')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: isDelimiter
          AnnotationsList
            <empty list>
          Modifiers
            AccessModifier
              PsiElement(private)('private')
          PsiWhiteSpace(' ')
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('isDelimiter')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: ch
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('ch')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Char
                    CodeReferenceElement: Char
                      PsiElement(identifier)('Char')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          InfixExpression
            InfixExpression
              InfixExpression
                ReferenceExpression: ch
                  PsiElement(identifier)('ch')
                PsiWhiteSpace(' ')
                ReferenceExpression: <=
                  PsiElement(identifier)('<=')
                PsiWhiteSpace(' ')
                CharLiteral
                  PsiElement(Character)('' '')
              PsiWhiteSpace(' ')
              ReferenceExpression: ||
                PsiElement(identifier)('||')
              PsiWhiteSpace(' ')
              InfixExpression
                ReferenceExpression: ch
                  PsiElement(identifier)('ch')
                PsiWhiteSpace(' ')
                ReferenceExpression: ==
                  PsiElement(identifier)('==')
                PsiWhiteSpace(' ')
                CharLiteral
                  PsiElement(Character)(''('')
            PsiWhiteSpace(' ')
            ReferenceExpression: ||
              PsiElement(identifier)('||')
            PsiWhiteSpace(' ')
            InfixExpression
              ReferenceExpression: ch
                PsiElement(identifier)('ch')
              PsiWhiteSpace(' ')
              ReferenceExpression: ==
                PsiElement(identifier)('==')
              PsiWhiteSpace(' ')
              CharLiteral
                PsiElement(Character)('')'')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: hasNext
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('hasNext')
          Parameters
            <empty list>
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Boolean
            CodeReferenceElement: Boolean
              PsiElement(identifier)('Boolean')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          BlockExpression
            PsiElement({)('{')
            PsiWhiteSpace('\n    ')
            WhileStatement
              PsiElement(while)('while')
              PsiWhiteSpace(' ')
              PsiElement(()('(')
              InfixExpression
                InfixExpression
                  ReferenceExpression: i
                    PsiElement(identifier)('i')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: <
                    PsiElement(identifier)('<')
                  PsiWhiteSpace(' ')
                  MethodCall
                    ReferenceExpression: s.length
                      ReferenceExpression: s
                        PsiElement(identifier)('s')
                      PsiElement(.)('.')
                      PsiElement(identifier)('length')
                    ArgumentList
                      PsiElement(()('(')
                      PsiElement())(')')
                PsiWhiteSpace(' ')
                ReferenceExpression: &&
                  PsiElement(identifier)('&&')
                PsiWhiteSpace(' ')
                InfixExpression
                  MethodCall
                    ReferenceExpression: s.charAt
                      ReferenceExpression: s
                        PsiElement(identifier)('s')
                      PsiElement(.)('.')
                      PsiElement(identifier)('charAt')
                    ArgumentList
                      PsiElement(()('(')
                      ReferenceExpression: i
                        PsiElement(identifier)('i')
                      PsiElement())(')')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: <=
                    PsiElement(identifier)('<=')
                  PsiWhiteSpace(' ')
                  CharLiteral
                    PsiElement(Character)('' '')
              PsiElement())(')')
              PsiWhiteSpace(' ')
              InfixExpression
                ReferenceExpression: i
                  PsiElement(identifier)('i')
                PsiWhiteSpace(' ')
                ReferenceExpression: +=
                  PsiElement(identifier)('+=')
                PsiWhiteSpace(' ')
                IntegerLiteral
                  PsiElement(integer)('1')
            PsiWhiteSpace('\n    ')
            InfixExpression
              ReferenceExpression: i
                PsiElement(identifier)('i')
              PsiWhiteSpace(' ')
              ReferenceExpression: <
                PsiElement(identifier)('<')
              PsiWhiteSpace(' ')
              MethodCall
                ReferenceExpression: s.length
                  ReferenceExpression: s
                    PsiElement(identifier)('s')
                  PsiElement(.)('.')
                  PsiElement(identifier)('length')
                ArgumentList
                  PsiElement(()('(')
                  PsiElement())(')')
            PsiWhiteSpace('\n  ')
            PsiElement(})('}')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: next
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('next')
          Parameters
            <empty list>
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: String
            CodeReferenceElement: String
              PsiElement(identifier)('String')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace('\n    ')
          IfStatement
            PsiElement(if)('if')
            PsiWhiteSpace(' ')
            PsiElement(()('(')
            ReferenceExpression: hasNext
              PsiElement(identifier)('hasNext')
            PsiElement())(')')
            PsiWhiteSpace(' ')
            BlockExpression
              PsiElement({)('{')
              PsiWhiteSpace('\n      ')
              ScPatternDefinition: start
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(val)('val')
                PsiWhiteSpace(' ')
                ListOfPatterns
                  ReferencePattern: start
                    PsiElement(identifier)('start')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                ReferenceExpression: i
                  PsiElement(identifier)('i')
              PsiWhiteSpace('\n      ')
              IfStatement
                PsiElement(if)('if')
                PsiWhiteSpace(' ')
                PsiElement(()('(')
                MethodCall
                  ReferenceExpression: isDelimiter
                    PsiElement(identifier)('isDelimiter')
                  ArgumentList
                    PsiElement(()('(')
                    InfixExpression
                      ReferenceExpression: s
                        PsiElement(identifier)('s')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: charAt
                        PsiElement(identifier)('charAt')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: i
                        PsiElement(identifier)('i')
                    PsiElement())(')')
                PsiElement())(')')
                PsiWhiteSpace(' ')
                InfixExpression
                  ReferenceExpression: i
                    PsiElement(identifier)('i')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: +=
                    PsiElement(identifier)('+=')
                  PsiWhiteSpace(' ')
                  IntegerLiteral
                    PsiElement(integer)('1')
                PsiWhiteSpace('\n      ')
                PsiElement(else)('else')
                PsiWhiteSpace('\n        ')
                WhileStatement
                  PsiElement(while)('while')
                  PsiWhiteSpace(' ')
                  BlockExpression
                    PsiElement({)('{')
                    PsiWhiteSpace('\n          ')
                    AssignStatement
                      ReferenceExpression: i
                        PsiElement(identifier)('i')
                      PsiWhiteSpace(' ')
                      PsiElement(=)('=')
                      PsiWhiteSpace(' ')
                      InfixExpression
                        ReferenceExpression: i
                          PsiElement(identifier)('i')
                        PsiWhiteSpace(' ')
                        ReferenceExpression: +
                          PsiElement(identifier)('+')
                        PsiWhiteSpace(' ')
                        IntegerLiteral
                          PsiElement(integer)('1')
                    PsiWhiteSpace('\n          ')
                    PrefixExpression
                      ReferenceExpression: !
                        PsiElement(identifier)('!')
                      MethodCall
                        ReferenceExpression: isDelimiter
                          PsiElement(identifier)('isDelimiter')
                        ArgumentList
                          PsiElement(()('(')
                          InfixExpression
                            ReferenceExpression: s
                              PsiElement(identifier)('s')
                            PsiWhiteSpace(' ')
                            ReferenceExpression: charAt
                              PsiElement(identifier)('charAt')
                            PsiWhiteSpace(' ')
                            ReferenceExpression: i
                              PsiElement(identifier)('i')
                          PsiElement())(')')
                    PsiWhiteSpace('\n        ')
                    PsiElement(})('}')
                  PsiWhiteSpace(' ')
                  PsiElement(do)('do')
                  PsiWhiteSpace(' ')
                  UnitExpression
                    PsiElement(()('(')
                    PsiElement())(')')
              PsiWhiteSpace('\n      ')
              MethodCall
                ReferenceExpression: s.substring
                  ReferenceExpression: s
                    PsiElement(identifier)('s')
                  PsiElement(.)('.')
                  PsiElement(identifier)('substring')
                ArgumentList
                  PsiElement(()('(')
                  ReferenceExpression: start
                    PsiElement(identifier)('start')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: i
                    PsiElement(identifier)('i')
                  PsiElement())(')')
              PsiWhiteSpace('\n    ')
              PsiElement(})('}')
            PsiWhiteSpace(' ')
            PsiElement(else)('else')
            PsiWhiteSpace(' ')
            MethodCall
              ReferenceExpression: sys.error
                ReferenceExpression: sys
                  PsiElement(identifier)('sys')
                PsiElement(.)('.')
                PsiElement(identifier)('error')
              ArgumentList
                PsiElement(()('(')
                StringLiteral
                  PsiElement(string content)('"premature end of string"')
                PsiElement())(')')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  PsiComment(comment)('//############################################################################')
  PsiWhiteSpace('\n')
  PsiComment(comment)('// Lisp Interface')
  PsiWhiteSpace('\n\n')
  ScTrait: Lisp
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Lisp')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScTypeAliasDeclaration: Data
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Data')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDeclaration: string2lisp
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('string2lisp')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: s
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('s')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: String
                    CodeReferenceElement: String
                      PsiElement(identifier)('String')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Data
            CodeReferenceElement: Data
              PsiElement(identifier)('Data')
        PsiWhiteSpace('\n  ')
        ScFunctionDeclaration: lisp2string
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('lisp2string')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: s
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('s')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Data
                    CodeReferenceElement: Data
                      PsiElement(identifier)('Data')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: String
            CodeReferenceElement: String
              PsiElement(identifier)('String')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDeclaration: evaluate
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('evaluate')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: d
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('d')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Data
                    CodeReferenceElement: Data
                      PsiElement(identifier)('Data')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Data
            CodeReferenceElement: Data
              PsiElement(identifier)('Data')
        PsiWhiteSpace('\n  ')
        ScFunctionDeclaration: evaluate
          PsiComment(comment)('// !!! def evaluate(s: String): Data = evaluate(string2lisp(s))')
          PsiWhiteSpace('\n  ')
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('evaluate')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: s
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('s')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: String
                    CodeReferenceElement: String
                      PsiElement(identifier)('String')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Data
            CodeReferenceElement: Data
              PsiElement(identifier)('Data')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  PsiComment(comment)('//############################################################################')
  PsiWhiteSpace('\n')
  PsiComment(comment)('// Lisp Implementation Using Case Classes')
  PsiWhiteSpace('\n\n')
  ScObject: LispCaseClasses
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('LispCaseClasses')
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          SimpleType: Lisp
            CodeReferenceElement: Lisp
              PsiElement(identifier)('Lisp')
      PsiWhiteSpace(' ')
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n\n  ')
        ScImportStatement
          PsiElement(import)('import')
          PsiWhiteSpace(' ')
          ImportExpression
            CodeReferenceElement: List.range
              CodeReferenceElement: List
                PsiElement(identifier)('List')
              PsiElement(.)('.')
              PsiElement(identifier)('range')
        PsiWhiteSpace('\n\n  ')
        ScTrait: Data
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(trait)('trait')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Data')
          PsiWhiteSpace(' ')
          ExtendsBlock
            ScTemplateBody
              PsiElement({)('{')
              PsiWhiteSpace('\n    ')
              ScFunctionDefinition: elemsToString
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(def)('def')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('elemsToString')
                Parameters
                  ParametersClause
                    PsiElement(()('(')
                    PsiElement())(')')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                SimpleType: String
                  CodeReferenceElement: String
                    PsiElement(identifier)('String')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                MethodCall
                  ReferenceExpression: toString
                    PsiElement(identifier)('toString')
                  ArgumentList
                    PsiElement(()('(')
                    PsiElement())(')')
              PsiElement(;)(';')
              PsiWhiteSpace('\n  ')
              PsiElement(})('}')
        PsiWhiteSpace('\n  ')
        ScClass: CONS
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(case)('case')
          PsiWhiteSpace(' ')
          PsiElement(class)('class')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('CONS')
          PrimaryConstructor
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            Parameters
              ParametersClause
                PsiElement(()('(')
                ClassParameter: car
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(identifier)('car')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    SimpleType: Data
                      CodeReferenceElement: Data
                        PsiElement(identifier)('Data')
                PsiElement(,)(',')
                PsiWhiteSpace(' ')
                ClassParameter: cdr
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(identifier)('cdr')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    SimpleType: Data
                      CodeReferenceElement: Data
                        PsiElement(identifier)('Data')
                PsiElement())(')')
          PsiWhiteSpace(' ')
          ExtendsBlock
            PsiElement(extends)('extends')
            PsiWhiteSpace(' ')
            TemplateParents
              ConstructorInvocation
                SimpleType: Data
                  CodeReferenceElement: Data
                    PsiElement(identifier)('Data')
            PsiWhiteSpace(' ')
            ScTemplateBody
              PsiElement({)('{')
              PsiWhiteSpace('\n    ')
              ScFunctionDefinition: toString
                AnnotationsList
                  <empty list>
                Modifiers
                  PsiElement(override)('override')
                PsiWhiteSpace(' ')
                PsiElement(def)('def')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('toString')
                Parameters
                  ParametersClause
                    PsiElement(()('(')
                    PsiElement())(')')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                InfixExpression
                  InfixExpression
                    StringLiteral
                      PsiElement(string content)('"("')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: +
                      PsiElement(identifier)('+')
                    PsiWhiteSpace(' ')
                    MethodCall
                      ReferenceExpression: elemsToString
                        PsiElement(identifier)('elemsToString')
                      ArgumentList
                        PsiElement(()('(')
                        PsiElement())(')')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: +
                    PsiElement(identifier)('+')
                  PsiWhiteSpace(' ')
                  StringLiteral
                    PsiElement(string content)('")"')
              PsiElement(;)(';')
              PsiWhiteSpace('\n    ')
              ScFunctionDefinition: elemsToString
                AnnotationsList
                  <empty list>
                Modifiers
                  PsiElement(override)('override')
                PsiWhiteSpace(' ')
                PsiElement(def)('def')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('elemsToString')
                Parameters
                  ParametersClause
                    PsiElement(()('(')
                    PsiElement())(')')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                InfixExpression
                  MethodCall
                    ReferenceExpression: car.toString
                      ReferenceExpression: car
                        PsiElement(identifier)('car')
                      PsiElement(.)('.')
                      PsiElement(identifier)('toString')
                    ArgumentList
                      PsiElement(()('(')
                      PsiElement())(')')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: +
                    PsiElement(identifier)('+')
                  PsiWhiteSpace(' ')
                  ExpressionInParenthesis
                    PsiElement(()('(')
                    MatchStatement
                      ReferenceExpression: cdr
                        PsiElement(identifier)('cdr')
                      PsiWhiteSpace(' ')
                      PsiElement(match)('match')
                      PsiWhiteSpace(' ')
                      PsiElement({)('{')
                      PsiWhiteSpace('\n      ')
                      CaseClauses
                        CaseClause
                          PsiElement(case)('case')
                          PsiWhiteSpace(' ')
                          ConstructorPattern
                            CodeReferenceElement: NIL
                              PsiElement(identifier)('NIL')
                            Pattern Argument List
                              PsiElement(()('(')
                              PsiElement())(')')
                          PsiWhiteSpace(' ')
                          PsiElement(=>)('=>')
                          PsiWhiteSpace(' ')
                          BlockOfExpressions
                            StringLiteral
                              PsiElement(string content)('""')
                        PsiWhiteSpace('\n      ')
                        CaseClause
                          PsiElement(case)('case')
                          PsiWhiteSpace(' ')
                          WildcardPattern
                            PsiElement(_)('_')
                          PsiWhiteSpace('     ')
                          PsiElement(=>)('=>')
                          PsiWhiteSpace(' ')
                          BlockOfExpressions
                            InfixExpression
                              StringLiteral
                                PsiElement(string content)('" "')
                              PsiWhiteSpace(' ')
                              ReferenceExpression: +
                                PsiElement(identifier)('+')
                              PsiWhiteSpace(' ')
                              MethodCall
                                ReferenceExpression: cdr.elemsToString
                                  ReferenceExpression: cdr
                                    PsiElement(identifier)('cdr')
                                  PsiElement(.)('.')
                                  PsiElement(identifier)('elemsToString')
                                ArgumentList
                                  PsiElement(()('(')
                                  PsiElement())(')')
                            PsiElement(;)(';')
                      PsiWhiteSpace('\n    ')
                      PsiElement(})('}')
                    PsiElement())(')')
              PsiWhiteSpace('\n  ')
              PsiElement(})('}')
        PsiWhiteSpace('\n  ')
        ScClass: NIL
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(case)('case')
          PsiWhiteSpace(' ')
          PsiElement(class)('class')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('NIL')
          PrimaryConstructor
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            Parameters
              ParametersClause
                PsiElement(()('(')
                PsiElement())(')')
          PsiWhiteSpace(' ')
          ExtendsBlock
            PsiElement(extends)('extends')
            PsiWhiteSpace(' ')
            TemplateParents
              ConstructorInvocation
                SimpleType: Data
                  CodeReferenceElement: Data
                    PsiElement(identifier)('Data')
            PsiWhiteSpace(' ')
            ScTemplateBody
              PsiElement({)('{')
              PsiWhiteSpace(' ')
              PsiComment(comment)('// !!! use case object')
              PsiWhiteSpace('\n    ')
              ScFunctionDefinition: toString
                AnnotationsList
                  <empty list>
                Modifiers
                  PsiElement(override)('override')
                PsiWhiteSpace(' ')
                PsiElement(def)('def')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('toString')
                Parameters
                  ParametersClause
                    PsiElement(()('(')
                    PsiElement())(')')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                StringLiteral
                  PsiElement(string content)('"()"')
              PsiElement(;)(';')
              PsiWhiteSpace('\n  ')
              PsiElement(})('}')
        PsiWhiteSpace('\n  ')
        ScClass: SYM
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(case)('case')
          PsiWhiteSpace(' ')
          PsiElement(class)('class')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('SYM')
          PrimaryConstructor
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            Parameters
              ParametersClause
                PsiElement(()('(')
                ClassParameter: name
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(identifier)('name')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    SimpleType: String
                      CodeReferenceElement: String
                        PsiElement(identifier)('String')
                PsiElement())(')')
          PsiWhiteSpace(' ')
          ExtendsBlock
            PsiElement(extends)('extends')
            PsiWhiteSpace(' ')
            TemplateParents
              ConstructorInvocation
                SimpleType: Data
                  CodeReferenceElement: Data
                    PsiElement(identifier)('Data')
            PsiWhiteSpace(' ')
            ScTemplateBody
              PsiElement({)('{')
              PsiWhiteSpace('\n    ')
              ScFunctionDefinition: toString
                AnnotationsList
                  <empty list>
                Modifiers
                  PsiElement(override)('override')
                PsiWhiteSpace(' ')
                PsiElement(def)('def')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('toString')
                Parameters
                  ParametersClause
                    PsiElement(()('(')
                    PsiElement())(')')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                ReferenceExpression: name
                  PsiElement(identifier)('name')
              PsiElement(;)(';')
              PsiWhiteSpace('\n  ')
              PsiElement(})('}')
        PsiWhiteSpace('\n  ')
        ScClass: NUM
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(case)('case')
          PsiWhiteSpace(' ')
          PsiElement(class)('class')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('NUM')
          PrimaryConstructor
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            Parameters
              ParametersClause
                PsiElement(()('(')
                ClassParameter: x
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(identifier)('x')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    SimpleType: Int
                      CodeReferenceElement: Int
                        PsiElement(identifier)('Int')
                PsiElement())(')')
          PsiWhiteSpace(' ')
          ExtendsBlock
            PsiElement(extends)('extends')
            PsiWhiteSpace(' ')
            TemplateParents
              ConstructorInvocation
                SimpleType: Data
                  CodeReferenceElement: Data
                    PsiElement(identifier)('Data')
            PsiWhiteSpace(' ')
            ScTemplateBody
              PsiElement({)('{')
              PsiWhiteSpace('\n    ')
              ScFunctionDefinition: toString
                AnnotationsList
                  <empty list>
                Modifiers
                  PsiElement(override)('override')
                PsiWhiteSpace(' ')
                PsiElement(def)('def')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('toString')
                Parameters
                  ParametersClause
                    PsiElement(()('(')
                    PsiElement())(')')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                MethodCall
                  ReferenceExpression: x.toString
                    ReferenceExpression: x
                      PsiElement(identifier)('x')
                    PsiElement(.)('.')
                    PsiElement(identifier)('toString')
                  ArgumentList
                    PsiElement(()('(')
                    PsiElement())(')')
              PsiElement(;)(';')
              PsiWhiteSpace('\n  ')
              PsiElement(})('}')
        PsiWhiteSpace('\n  ')
        ScClass: STR
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(case)('case')
          PsiWhiteSpace(' ')
          PsiElement(class)('class')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('STR')
          PrimaryConstructor
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            Parameters
              ParametersClause
                PsiElement(()('(')
                ClassParameter: x
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(identifier)('x')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    SimpleType: String
                      CodeReferenceElement: String
                        PsiElement(identifier)('String')
                PsiElement())(')')
          PsiWhiteSpace(' ')
          ExtendsBlock
            PsiElement(extends)('extends')
            PsiWhiteSpace(' ')
            TemplateParents
              ConstructorInvocation
                SimpleType: Data
                  CodeReferenceElement: Data
                    PsiElement(identifier)('Data')
            PsiWhiteSpace(' ')
            ScTemplateBody
              PsiElement({)('{')
              PsiWhiteSpace('\n    ')
              ScFunctionDefinition: toString
                AnnotationsList
                  <empty list>
                Modifiers
                  PsiElement(override)('override')
                PsiWhiteSpace(' ')
                PsiElement(def)('def')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('toString')
                Parameters
                  ParametersClause
                    PsiElement(()('(')
                    PsiElement())(')')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                InfixExpression
                  InfixExpression
                    StringLiteral
                      PsiElement(string content)('"\""')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: +
                      PsiElement(identifier)('+')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: x
                      PsiElement(identifier)('x')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: +
                    PsiElement(identifier)('+')
                  PsiWhiteSpace(' ')
                  StringLiteral
                    PsiElement(string content)('"\""')
              PsiElement(;)(';')
              PsiWhiteSpace('\n  ')
              PsiElement(})('}')
        PsiWhiteSpace('\n  ')
        ScClass: FUN
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(case)('case')
          PsiWhiteSpace(' ')
          PsiElement(class)('class')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('FUN')
          PrimaryConstructor
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            Parameters
              ParametersClause
                PsiElement(()('(')
                ClassParameter: f
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(identifier)('f')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    FunctionalType: List[Data] => Data
                      ParametrizedType: List[Data]
                        SimpleType: List
                          CodeReferenceElement: List
                            PsiElement(identifier)('List')
                        TypeArgumentsList
                          PsiElement([)('[')
                          SimpleType: Data
                            CodeReferenceElement: Data
                              PsiElement(identifier)('Data')
                          PsiElement(])(']')
                      PsiWhiteSpace(' ')
                      PsiElement(=>)('=>')
                      PsiWhiteSpace(' ')
                      SimpleType: Data
                        CodeReferenceElement: Data
                          PsiElement(identifier)('Data')
                PsiElement())(')')
          PsiWhiteSpace(' ')
          ExtendsBlock
            PsiElement(extends)('extends')
            PsiWhiteSpace(' ')
            TemplateParents
              ConstructorInvocation
                SimpleType: Data
                  CodeReferenceElement: Data
                    PsiElement(identifier)('Data')
            PsiWhiteSpace(' ')
            ScTemplateBody
              PsiElement({)('{')
              PsiWhiteSpace('\n    ')
              ScFunctionDefinition: toString
                AnnotationsList
                  <empty list>
                Modifiers
                  PsiElement(override)('override')
                PsiWhiteSpace(' ')
                PsiElement(def)('def')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('toString')
                Parameters
                  ParametersClause
                    PsiElement(()('(')
                    PsiElement())(')')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                StringLiteral
                  PsiElement(string content)('"<fn>"')
              PsiElement(;)(';')
              PsiWhiteSpace('\n  ')
              PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: list
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('list')
          Parameters
            ParametersClause
              PsiElement(()('(')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Data
            CodeReferenceElement: Data
              PsiElement(identifier)('Data')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          BlockExpression
            PsiWhiteSpace('\n    ')
            MethodCall
              ReferenceExpression: NIL
                PsiElement(identifier)('NIL')
              ArgumentList
                PsiElement(()('(')
                PsiElement())(')')
            PsiElement(;)(';')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: list
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('list')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: x0
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x0')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Data
                    CodeReferenceElement: Data
                      PsiElement(identifier)('Data')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Data
            CodeReferenceElement: Data
              PsiElement(identifier)('Data')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          BlockExpression
            PsiWhiteSpace('\n    ')
            MethodCall
              ReferenceExpression: CONS
                PsiElement(identifier)('CONS')
              ArgumentList
                PsiElement(()('(')
                ReferenceExpression: x0
                  PsiElement(identifier)('x0')
                PsiElement(,)(',')
                PsiWhiteSpace(' ')
                MethodCall
                  ReferenceExpression: NIL
                    PsiElement(identifier)('NIL')
                  ArgumentList
                    PsiElement(()('(')
                    PsiElement())(')')
                PsiElement())(')')
            PsiElement(;)(';')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: list
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('list')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: x0
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x0')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Data
                    CodeReferenceElement: Data
                      PsiElement(identifier)('Data')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              Parameter: x1
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x1')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Data
                    CodeReferenceElement: Data
                      PsiElement(identifier)('Data')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Data
            CodeReferenceElement: Data
              PsiElement(identifier)('Data')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          BlockExpression
            PsiWhiteSpace('\n    ')
            MethodCall
              ReferenceExpression: CONS
                PsiElement(identifier)('CONS')
              ArgumentList
                PsiElement(()('(')
                ReferenceExpression: x0
                  PsiElement(identifier)('x0')
                PsiElement(,)(',')
                PsiWhiteSpace(' ')
                MethodCall
                  ReferenceExpression: list
                    PsiElement(identifier)('list')
                  ArgumentList
                    PsiElement(()('(')
                    ReferenceExpression: x1
                      PsiElement(identifier)('x1')
                    PsiElement())(')')
                PsiElement())(')')
            PsiElement(;)(';')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: list
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('list')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: x0
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x0')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Data
                    CodeReferenceElement: Data
                      PsiElement(identifier)('Data')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              Parameter: x1
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x1')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Data
                    CodeReferenceElement: Data
                      PsiElement(identifier)('Data')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              Parameter: x2
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x2')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Data
                    CodeReferenceElement: Data
                      PsiElement(identifier)('Data')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Data
            CodeReferenceElement: Data
              PsiElement(identifier)('Data')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          BlockExpression
            PsiWhiteSpace('\n    ')
            MethodCall
              ReferenceExpression: CONS
                PsiElement(identifier)('CONS')
              ArgumentList
                PsiElement(()('(')
                ReferenceExpression: x0
                  PsiElement(identifier)('x0')
                PsiElement(,)(',')
                PsiWhiteSpace(' ')
                MethodCall
                  ReferenceExpression: list
                    PsiElement(identifier)('list')
                  ArgumentList
                    PsiElement(()('(')
                    ReferenceExpression: x1
                      PsiElement(identifier)('x1')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: x2
                      PsiElement(identifier)('x2')
                    PsiElement())(')')
                PsiElement())(')')
            PsiElement(;)(';')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: list
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('list')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: x0
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x0')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Data
                    CodeReferenceElement: Data
                      PsiElement(identifier)('Data')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              Parameter: x1
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x1')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Data
                    CodeReferenceElement: Data
                      PsiElement(identifier)('Data')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              Parameter: x2
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x2')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Data
                    CodeReferenceElement: Data
                      PsiElement(identifier)('Data')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              Parameter: x3
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x3')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Data
                    CodeReferenceElement: Data
                      PsiElement(identifier)('Data')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Data
            CodeReferenceElement: Data
              PsiElement(identifier)('Data')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          BlockExpression
            PsiWhiteSpace('\n    ')
            MethodCall
              ReferenceExpression: CONS
                PsiElement(identifier)('CONS')
              ArgumentList
                PsiElement(()('(')
                ReferenceExpression: x0
                  PsiElement(identifier)('x0')
                PsiElement(,)(',')
                PsiWhiteSpace(' ')
                MethodCall
                  ReferenceExpression: list
                    PsiElement(identifier)('list')
                  ArgumentList
                    PsiElement(()('(')
                    ReferenceExpression: x1
                      PsiElement(identifier)('x1')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: x2
                      PsiElement(identifier)('x2')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: x3
                      PsiElement(identifier)('x3')
                    PsiElement())(')')
                PsiElement())(')')
            PsiElement(;)(';')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: list
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('list')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: x0
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x0')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Data
                    CodeReferenceElement: Data
                      PsiElement(identifier)('Data')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              Parameter: x1
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x1')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Data
                    CodeReferenceElement: Data
                      PsiElement(identifier)('Data')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              Parameter: x2
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x2')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Data
                    CodeReferenceElement: Data
                      PsiElement(identifier)('Data')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              Parameter: x3
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x3')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Data
                    CodeReferenceElement: Data
                      PsiElement(identifier)('Data')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              Parameter: x4
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x4')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Data
                    CodeReferenceElement: Data
                      PsiElement(identifier)('Data')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Data
            CodeReferenceElement: Data
              PsiElement(identifier)('Data')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          BlockExpression
            PsiWhiteSpace('\n    ')
            MethodCall
              ReferenceExpression: CONS
                PsiElement(identifier)('CONS')
              ArgumentList
                PsiElement(()('(')
                ReferenceExpression: x0
                  PsiElement(identifier)('x0')
                PsiElement(,)(',')
                PsiWhiteSpace(' ')
                MethodCall
                  ReferenceExpression: list
                    PsiElement(identifier)('list')
                  ArgumentList
                    PsiElement(()('(')
                    ReferenceExpression: x1
                      PsiElement(identifier)('x1')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: x2
                      PsiElement(identifier)('x2')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: x3
                      PsiElement(identifier)('x3')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: x4
                      PsiElement(identifier)('x4')
                    PsiElement())(')')
                PsiElement())(')')
            PsiElement(;)(';')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: list
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('list')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: x0
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x0')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Data
                    CodeReferenceElement: Data
                      PsiElement(identifier)('Data')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              Parameter: x1
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x1')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Data
                    CodeReferenceElement: Data
                      PsiElement(identifier)('Data')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              Parameter: x2
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x2')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Data
                    CodeReferenceElement: Data
                      PsiElement(identifier)('Data')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              Parameter: x3
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x3')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Data
                    CodeReferenceElement: Data
                      PsiElement(identifier)('Data')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              Parameter: x4
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x4')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Data
                    CodeReferenceElement: Data
                      PsiElement(identifier)('Data')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              Parameter: x5
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x5')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Data
                    CodeReferenceElement: Data
                      PsiElement(identifier)('Data')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Data
            CodeReferenceElement: Data
              PsiElement(identifier)('Data')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          BlockExpression
            PsiWhiteSpace('\n    ')
            MethodCall
              ReferenceExpression: CONS
                PsiElement(identifier)('CONS')
              ArgumentList
                PsiElement(()('(')
                ReferenceExpression: x0
                  PsiElement(identifier)('x0')
                PsiElement(,)(',')
                PsiWhiteSpace(' ')
                MethodCall
                  ReferenceExpression: list
                    PsiElement(identifier)('list')
                  ArgumentList
                    PsiElement(()('(')
                    ReferenceExpression: x1
                      PsiElement(identifier)('x1')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: x2
                      PsiElement(identifier)('x2')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: x3
                      PsiElement(identifier)('x3')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: x4
                      PsiElement(identifier)('x4')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: x5
                      PsiElement(identifier)('x5')
                    PsiElement())(')')
                PsiElement())(')')
            PsiElement(;)(';')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: list
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('list')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: x0
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x0')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Data
                    CodeReferenceElement: Data
                      PsiElement(identifier)('Data')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              Parameter: x1
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x1')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Data
                    CodeReferenceElement: Data
                      PsiElement(identifier)('Data')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              Parameter: x2
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x2')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Data
                    CodeReferenceElement: Data
                      PsiElement(identifier)('Data')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              Parameter: x3
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x3')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Data
                    CodeReferenceElement: Data
                      PsiElement(identifier)('Data')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              Parameter: x4
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x4')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Data
                    CodeReferenceElement: Data
                      PsiElement(identifier)('Data')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              Parameter: x5
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x5')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Data
                    CodeReferenceElement: Data
                      PsiElement(identifier)('Data')
              PsiElement(,)(',')
              PsiWhiteSpace('\n   ')
              Parameter: x6
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x6')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Data
                    CodeReferenceElement: Data
                      PsiElement(identifier)('Data')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Data
            CodeReferenceElement: Data
              PsiElement(identifier)('Data')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          BlockExpression
            PsiWhiteSpace('\n    ')
            MethodCall
              ReferenceExpression: CONS
                PsiElement(identifier)('CONS')
              ArgumentList
                PsiElement(()('(')
                ReferenceExpression: x0
                  PsiElement(identifier)('x0')
                PsiElement(,)(',')
                PsiWhiteSpace(' ')
                MethodCall
                  ReferenceExpression: list
                    PsiElement(identifier)('list')
                  ArgumentList
                    PsiElement(()('(')
                    ReferenceExpression: x1
                      PsiElement(identifier)('x1')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: x2
                      PsiElement(identifier)('x2')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: x3
                      PsiElement(identifier)('x3')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: x4
                      PsiElement(identifier)('x4')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: x5
                      PsiElement(identifier)('x5')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: x6
                      PsiElement(identifier)('x6')
                    PsiElement())(')')
                PsiElement())(')')
            PsiElement(;)(';')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: list
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('list')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: x0
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x0')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Data
                    CodeReferenceElement: Data
                      PsiElement(identifier)('Data')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              Parameter: x1
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x1')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Data
                    CodeReferenceElement: Data
                      PsiElement(identifier)('Data')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              Parameter: x2
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x2')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Data
                    CodeReferenceElement: Data
                      PsiElement(identifier)('Data')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              Parameter: x3
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x3')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Data
                    CodeReferenceElement: Data
                      PsiElement(identifier)('Data')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              Parameter: x4
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x4')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Data
                    CodeReferenceElement: Data
                      PsiElement(identifier)('Data')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              Parameter: x5
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x5')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Data
                    CodeReferenceElement: Data
                      PsiElement(identifier)('Data')
              PsiElement(,)(',')
              PsiWhiteSpace('\n   ')
              Parameter: x6
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x6')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Data
                    CodeReferenceElement: Data
                      PsiElement(identifier)('Data')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              Parameter: x7
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x7')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Data
                    CodeReferenceElement: Data
                      PsiElement(identifier)('Data')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Data
            CodeReferenceElement: Data
              PsiElement(identifier)('Data')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          BlockExpression
            PsiWhiteSpace('\n    ')
            MethodCall
              ReferenceExpression: CONS
                PsiElement(identifier)('CONS')
              ArgumentList
                PsiElement(()('(')
                ReferenceExpression: x0
                  PsiElement(identifier)('x0')
                PsiElement(,)(',')
                PsiWhiteSpace(' ')
                MethodCall
                  ReferenceExpression: list
                    PsiElement(identifier)('list')
                  ArgumentList
                    PsiElement(()('(')
                    ReferenceExpression: x1
                      PsiElement(identifier)('x1')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: x2
                      PsiElement(identifier)('x2')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: x3
                      PsiElement(identifier)('x3')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: x4
                      PsiElement(identifier)('x4')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: x5
                      PsiElement(identifier)('x5')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: x6
                      PsiElement(identifier)('x6')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: x7
                      PsiElement(identifier)('x7')
                    PsiElement())(')')
                PsiElement())(')')
            PsiElement(;)(';')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: list
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('list')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: x0
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x0')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Data
                    CodeReferenceElement: Data
                      PsiElement(identifier)('Data')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              Parameter: x1
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x1')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Data
                    CodeReferenceElement: Data
                      PsiElement(identifier)('Data')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              Parameter: x2
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x2')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Data
                    CodeReferenceElement: Data
                      PsiElement(identifier)('Data')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              Parameter: x3
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x3')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Data
                    CodeReferenceElement: Data
                      PsiElement(identifier)('Data')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              Parameter: x4
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x4')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Data
                    CodeReferenceElement: Data
                      PsiElement(identifier)('Data')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              Parameter: x5
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x5')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Data
                    CodeReferenceElement: Data
                      PsiElement(identifier)('Data')
              PsiElement(,)(',')
              PsiWhiteSpace('\n   ')
              Parameter: x6
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x6')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Data
                    CodeReferenceElement: Data
                      PsiElement(identifier)('Data')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              Parameter: x7
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x7')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Data
                    CodeReferenceElement: Data
                      PsiElement(identifier)('Data')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              Parameter: x8
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x8')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Data
                    CodeReferenceElement: Data
                      PsiElement(identifier)('Data')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Data
            CodeReferenceElement: Data
              PsiElement(identifier)('Data')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          BlockExpression
            PsiWhiteSpace('\n    ')
            MethodCall
              ReferenceExpression: CONS
                PsiElement(identifier)('CONS')
              ArgumentList
                PsiElement(()('(')
                ReferenceExpression: x0
                  PsiElement(identifier)('x0')
                PsiElement(,)(',')
                PsiWhiteSpace(' ')
                MethodCall
                  ReferenceExpression: list
                    PsiElement(identifier)('list')
                  ArgumentList
                    PsiElement(()('(')
                    ReferenceExpression: x1
                      PsiElement(identifier)('x1')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: x2
                      PsiElement(identifier)('x2')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: x3
                      PsiElement(identifier)('x3')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: x4
                      PsiElement(identifier)('x4')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: x5
                      PsiElement(identifier)('x5')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: x6
                      PsiElement(identifier)('x6')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: x7
                      PsiElement(identifier)('x7')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: x8
                      PsiElement(identifier)('x8')
                    PsiElement())(')')
                PsiElement())(')')
            PsiElement(;)(';')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: list
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('list')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: x0
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x0')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Data
                    CodeReferenceElement: Data
                      PsiElement(identifier)('Data')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              Parameter: x1
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x1')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Data
                    CodeReferenceElement: Data
                      PsiElement(identifier)('Data')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              Parameter: x2
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x2')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Data
                    CodeReferenceElement: Data
                      PsiElement(identifier)('Data')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              Parameter: x3
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x3')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Data
                    CodeReferenceElement: Data
                      PsiElement(identifier)('Data')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              Parameter: x4
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x4')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Data
                    CodeReferenceElement: Data
                      PsiElement(identifier)('Data')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              Parameter: x5
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x5')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Data
                    CodeReferenceElement: Data
                      PsiElement(identifier)('Data')
              PsiElement(,)(',')
              PsiWhiteSpace('\n   ')
              Parameter: x6
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x6')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Data
                    CodeReferenceElement: Data
                      PsiElement(identifier)('Data')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              Parameter: x7
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x7')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Data
                    CodeReferenceElement: Data
                      PsiElement(identifier)('Data')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              Parameter: x8
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x8')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Data
                    CodeReferenceElement: Data
                      PsiElement(identifier)('Data')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              Parameter: x9
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x9')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Data
                    CodeReferenceElement: Data
                      PsiElement(identifier)('Data')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Data
            CodeReferenceElement: Data
              PsiElement(identifier)('Data')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          BlockExpression
            PsiWhiteSpace('\n    ')
            MethodCall
              ReferenceExpression: CONS
                PsiElement(identifier)('CONS')
              ArgumentList
                PsiElement(()('(')
                ReferenceExpression: x0
                  PsiElement(identifier)('x0')
                PsiElement(,)(',')
                PsiWhiteSpace(' ')
                MethodCall
                  ReferenceExpression: list
                    PsiElement(identifier)('list')
                  ArgumentList
                    PsiElement(()('(')
                    ReferenceExpression: x1
                      PsiElement(identifier)('x1')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: x2
                      PsiElement(identifier)('x2')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: x3
                      PsiElement(identifier)('x3')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: x4
                      PsiElement(identifier)('x4')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: x5
                      PsiElement(identifier)('x5')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: x6
                      PsiElement(identifier)('x6')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: x7
                      PsiElement(identifier)('x7')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: x8
                      PsiElement(identifier)('x8')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: x9
                      PsiElement(identifier)('x9')
                    PsiElement())(')')
                PsiElement())(')')
            PsiElement(;)(';')
        PsiWhiteSpace('\n\n  ')
        ScVariableDefinition: curexp
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(var)('var')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: curexp
              PsiElement(identifier)('curexp')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Data
            CodeReferenceElement: Data
              PsiElement(identifier)('Data')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          NullLiteral
            PsiElement(null)('null')
        PsiWhiteSpace('\n  ')
        ScVariableDefinition: trace
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(var)('var')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: trace
              PsiElement(identifier)('trace')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Boolean
            CodeReferenceElement: Boolean
              PsiElement(identifier)('Boolean')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          BooleanLiteral
            PsiElement(false)('false')
        PsiWhiteSpace('\n  ')
        ScVariableDefinition: indent
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(var)('var')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: indent
              PsiElement(identifier)('indent')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Int
            CodeReferenceElement: Int
              PsiElement(identifier)('Int')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          IntegerLiteral
            PsiElement(integer)('0')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: lispError
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('lispError')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: a
              PsiElement(identifier)('a')
            PsiElement(])(']')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: msg
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('msg')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: String
                    CodeReferenceElement: String
                      PsiElement(identifier)('String')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: a
            CodeReferenceElement: a
              PsiElement(identifier)('a')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          BlockExpression
            PsiWhiteSpace('\n    ')
            MethodCall
              ReferenceExpression: sys.error
                ReferenceExpression: sys
                  PsiElement(identifier)('sys')
                PsiElement(.)('.')
                PsiElement(identifier)('error')
              ArgumentList
                PsiElement(()('(')
                InfixExpression
                  InfixExpression
                    InfixExpression
                      StringLiteral
                        PsiElement(string content)('"error: "')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: +
                        PsiElement(identifier)('+')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: msg
                        PsiElement(identifier)('msg')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: +
                      PsiElement(identifier)('+')
                    PsiWhiteSpace(' ')
                    StringLiteral
                      PsiElement(string content)('"\n"')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: +
                    PsiElement(identifier)('+')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: curexp
                    PsiElement(identifier)('curexp')
                PsiElement())(')')
            PsiElement(;)(';')
        PsiWhiteSpace('\n\n  ')
        ScTrait: Environment
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(trait)('trait')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Environment')
          PsiWhiteSpace(' ')
          ExtendsBlock
            ScTemplateBody
              PsiElement({)('{')
              PsiWhiteSpace('\n    ')
              ScFunctionDeclaration: lookup
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(def)('def')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('lookup')
                Parameters
                  ParametersClause
                    PsiElement(()('(')
                    Parameter: n
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(identifier)('n')
                      PsiElement(:)(':')
                      PsiWhiteSpace(' ')
                      ParameterType
                        SimpleType: String
                          CodeReferenceElement: String
                            PsiElement(identifier)('String')
                    PsiElement())(')')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                SimpleType: Data
                  CodeReferenceElement: Data
                    PsiElement(identifier)('Data')
              PsiElement(;)(';')
              PsiWhiteSpace('\n    ')
              ScFunctionDefinition: extendRec
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(def)('def')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('extendRec')
                Parameters
                  ParametersClause
                    PsiElement(()('(')
                    Parameter: name
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(identifier)('name')
                      PsiElement(:)(':')
                      PsiWhiteSpace(' ')
                      ParameterType
                        SimpleType: String
                          CodeReferenceElement: String
                            PsiElement(identifier)('String')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    Parameter: expr
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(identifier)('expr')
                      PsiElement(:)(':')
                      PsiWhiteSpace(' ')
                      ParameterType
                        FunctionalType: Environment => Data
                          SimpleType: Environment
                            CodeReferenceElement: Environment
                              PsiElement(identifier)('Environment')
                          PsiWhiteSpace(' ')
                          PsiElement(=>)('=>')
                          PsiWhiteSpace(' ')
                          SimpleType: Data
                            CodeReferenceElement: Data
                              PsiElement(identifier)('Data')
                    PsiElement())(')')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace('\n      ')
                ScNewTemplateDefinition: <anonymous>
                  PsiElement(new)('new')
                  PsiWhiteSpace(' ')
                  ExtendsBlock
                    TemplateParents
                      ConstructorInvocation
                        SimpleType: Environment
                          CodeReferenceElement: Environment
                            PsiElement(identifier)('Environment')
                    PsiWhiteSpace(' ')
                    ScTemplateBody
                      PsiElement({)('{')
                      PsiWhiteSpace('\n        ')
                      ScFunctionDefinition: lookup
                        AnnotationsList
                          <empty list>
                        Modifiers
                          <empty list>
                        PsiElement(def)('def')
                        PsiWhiteSpace(' ')
                        PsiElement(identifier)('lookup')
                        Parameters
                          ParametersClause
                            PsiElement(()('(')
                            Parameter: n
                              AnnotationsList
                                <empty list>
                              Modifiers
                                <empty list>
                              PsiElement(identifier)('n')
                              PsiElement(:)(':')
                              PsiWhiteSpace(' ')
                              ParameterType
                                SimpleType: String
                                  CodeReferenceElement: String
                                    PsiElement(identifier)('String')
                            PsiElement())(')')
                        PsiElement(:)(':')
                        PsiWhiteSpace(' ')
                        SimpleType: Data
                          CodeReferenceElement: Data
                            PsiElement(identifier)('Data')
                        PsiWhiteSpace(' ')
                        PsiElement(=)('=')
                        BlockExpression
                          PsiWhiteSpace('\n          ')
                          IfStatement
                            PsiElement(if)('if')
                            PsiWhiteSpace(' ')
                            PsiElement(()('(')
                            InfixExpression
                              ReferenceExpression: n
                                PsiElement(identifier)('n')
                              PsiWhiteSpace(' ')
                              ReferenceExpression: ==
                                PsiElement(identifier)('==')
                              PsiWhiteSpace(' ')
                              ReferenceExpression: name
                                PsiElement(identifier)('name')
                            PsiElement())(')')
                            PsiWhiteSpace(' ')
                            MethodCall
                              ReferenceExpression: expr
                                PsiElement(identifier)('expr')
                              ArgumentList
                                PsiElement(()('(')
                                ThisReference
                                  PsiElement(this)('this')
                                PsiElement())(')')
                            PsiWhiteSpace(' ')
                            PsiElement(else)('else')
                            PsiWhiteSpace(' ')
                            MethodCall
                              ReferenceExpression: Environment.this.lookup
                                ThisReference
                                  CodeReferenceElement: Environment
                                    PsiElement(identifier)('Environment')
                                  PsiElement(.)('.')
                                  PsiElement(this)('this')
                                PsiElement(.)('.')
                                PsiElement(identifier)('lookup')
                              ArgumentList
                                PsiElement(()('(')
                                ReferenceExpression: n
                                  PsiElement(identifier)('n')
                                PsiElement())(')')
                          PsiElement(;)(';')
                      PsiWhiteSpace('\n      ')
                      PsiElement(})('}')
              PsiWhiteSpace('\n    ')
              ScFunctionDefinition: extend
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(def)('def')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('extend')
                Parameters
                  ParametersClause
                    PsiElement(()('(')
                    Parameter: name
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(identifier)('name')
                      PsiElement(:)(':')
                      PsiWhiteSpace(' ')
                      ParameterType
                        SimpleType: String
                          CodeReferenceElement: String
                            PsiElement(identifier)('String')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    Parameter: v
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(identifier)('v')
                      PsiElement(:)(':')
                      PsiWhiteSpace(' ')
                      ParameterType
                        SimpleType: Data
                          CodeReferenceElement: Data
                            PsiElement(identifier)('Data')
                    PsiElement())(')')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                MethodCall
                  ReferenceExpression: extendRec
                    PsiElement(identifier)('extendRec')
                  ArgumentList
                    PsiElement(()('(')
                    ReferenceExpression: name
                      PsiElement(identifier)('name')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    ExpressionInParenthesis
                      PsiElement(()('(')
                      FunctionExpression
                        Parameters
                          ParametersClause
                            Parameter: env1
                              PsiElement(identifier)('env1')
                        PsiWhiteSpace(' ')
                        PsiElement(=>)('=>')
                        PsiWhiteSpace(' ')
                        ReferenceExpression: v
                          PsiElement(identifier)('v')
                      PsiElement())(')')
                    PsiElement())(')')
              PsiElement(;)(';')
              PsiWhiteSpace('\n  ')
              PsiElement(})('}')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: EmptyEnvironment
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: EmptyEnvironment
              PsiElement(identifier)('EmptyEnvironment')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ScNewTemplateDefinition: <anonymous>
            PsiElement(new)('new')
            PsiWhiteSpace(' ')
            ExtendsBlock
              TemplateParents
                ConstructorInvocation
                  SimpleType: Environment
                    CodeReferenceElement: Environment
                      PsiElement(identifier)('Environment')
              PsiWhiteSpace(' ')
              ScTemplateBody
                PsiElement({)('{')
                PsiWhiteSpace('\n    ')
                ScFunctionDefinition: lookup
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(def)('def')
                  PsiWhiteSpace(' ')
                  PsiElement(identifier)('lookup')
                  Parameters
                    ParametersClause
                      PsiElement(()('(')
                      Parameter: n
                        AnnotationsList
                          <empty list>
                        Modifiers
                          <empty list>
                        PsiElement(identifier)('n')
                        PsiElement(:)(':')
                        PsiWhiteSpace(' ')
                        ParameterType
                          SimpleType: String
                            CodeReferenceElement: String
                              PsiElement(identifier)('String')
                      PsiElement())(')')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  SimpleType: Data
                    CodeReferenceElement: Data
                      PsiElement(identifier)('Data')
                  PsiWhiteSpace(' ')
                  PsiElement(=)('=')
                  PsiWhiteSpace(' ')
                  MethodCall
                    ReferenceExpression: lispError
                      PsiElement(identifier)('lispError')
                    ArgumentList
                      PsiElement(()('(')
                      InfixExpression
                        StringLiteral
                          PsiElement(string content)('"undefined: "')
                        PsiWhiteSpace(' ')
                        ReferenceExpression: +
                          PsiElement(identifier)('+')
                        PsiWhiteSpace(' ')
                        ReferenceExpression: n
                          PsiElement(identifier)('n')
                      PsiElement())(')')
                PsiElement(;)(';')
                PsiWhiteSpace('\n  ')
                PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: toList
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('toList')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: x
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Data
                    CodeReferenceElement: Data
                      PsiElement(identifier)('Data')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: List[Data]
            SimpleType: List
              CodeReferenceElement: List
                PsiElement(identifier)('List')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: Data
                CodeReferenceElement: Data
                  PsiElement(identifier)('Data')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MatchStatement
            ReferenceExpression: x
              PsiElement(identifier)('x')
            PsiWhiteSpace(' ')
            PsiElement(match)('match')
            PsiWhiteSpace(' ')
            PsiElement({)('{')
            PsiWhiteSpace('\n    ')
            CaseClauses
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                ConstructorPattern
                  CodeReferenceElement: NIL
                    PsiElement(identifier)('NIL')
                  Pattern Argument List
                    PsiElement(()('(')
                    PsiElement())(')')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                BlockOfExpressions
                  MethodCall
                    ReferenceExpression: List
                      PsiElement(identifier)('List')
                    ArgumentList
                      PsiElement(()('(')
                      PsiElement())(')')
              PsiWhiteSpace('\n    ')
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                ConstructorPattern
                  CodeReferenceElement: CONS
                    PsiElement(identifier)('CONS')
                  Pattern Argument List
                    PsiElement(()('(')
                    ReferencePattern: y
                      PsiElement(identifier)('y')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    ReferencePattern: ys
                      PsiElement(identifier)('ys')
                    PsiElement())(')')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                BlockOfExpressions
                  InfixExpression
                    ReferenceExpression: y
                      PsiElement(identifier)('y')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: ::
                      PsiElement(identifier)('::')
                    PsiWhiteSpace(' ')
                    MethodCall
                      ReferenceExpression: toList
                        PsiElement(identifier)('toList')
                      ArgumentList
                        PsiElement(()('(')
                        ReferenceExpression: ys
                          PsiElement(identifier)('ys')
                        PsiElement())(')')
              PsiWhiteSpace('\n    ')
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                WildcardPattern
                  PsiElement(_)('_')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                BlockOfExpressions
                  MethodCall
                    ReferenceExpression: lispError
                      PsiElement(identifier)('lispError')
                    ArgumentList
                      PsiElement(()('(')
                      InfixExpression
                        StringLiteral
                          PsiElement(string content)('"malformed list: "')
                        PsiWhiteSpace(' ')
                        ReferenceExpression: +
                          PsiElement(identifier)('+')
                        PsiWhiteSpace(' ')
                        ReferenceExpression: x
                          PsiElement(identifier)('x')
                      PsiElement())(')')
                  PsiElement(;)(';')
            PsiWhiteSpace('\n  ')
            PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: toBoolean
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('toBoolean')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: x
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Data
                    CodeReferenceElement: Data
                      PsiElement(identifier)('Data')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MatchStatement
            ReferenceExpression: x
              PsiElement(identifier)('x')
            PsiWhiteSpace(' ')
            PsiElement(match)('match')
            PsiWhiteSpace(' ')
            PsiElement({)('{')
            PsiWhiteSpace('\n    ')
            CaseClauses
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                ConstructorPattern
                  CodeReferenceElement: NUM
                    PsiElement(identifier)('NUM')
                  Pattern Argument List
                    PsiElement(()('(')
                    LiteralPattern
                      IntegerLiteral
                        PsiElement(integer)('0')
                    PsiElement())(')')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                BlockOfExpressions
                  BooleanLiteral
                    PsiElement(false)('false')
              PsiWhiteSpace('\n    ')
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                WildcardPattern
                  PsiElement(_)('_')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                BlockOfExpressions
                  BooleanLiteral
                    PsiElement(true)('true')
            PsiWhiteSpace('\n  ')
            PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: normalize
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('normalize')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: x
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Data
                    CodeReferenceElement: Data
                      PsiElement(identifier)('Data')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Data
            CodeReferenceElement: Data
              PsiElement(identifier)('Data')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MatchStatement
            ReferenceExpression: x
              PsiElement(identifier)('x')
            PsiWhiteSpace(' ')
            PsiElement(match)('match')
            PsiWhiteSpace(' ')
            PsiElement({)('{')
            PsiWhiteSpace('\n    ')
            CaseClauses
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                ConstructorPattern
                  CodeReferenceElement: CONS
                    PsiElement(identifier)('CONS')
                  Pattern Argument List
                    PsiElement(()('(')
                    ConstructorPattern
                      CodeReferenceElement: SYM
                        PsiElement(identifier)('SYM')
                      Pattern Argument List
                        PsiElement(()('(')
                        LiteralPattern
                          StringLiteral
                            PsiElement(string content)('"def"')
                        PsiElement())(')')
                    PsiElement(,)(',')
                    PsiWhiteSpace('\n           ')
                    ConstructorPattern
                      CodeReferenceElement: CONS
                        PsiElement(identifier)('CONS')
                      Pattern Argument List
                        PsiElement(()('(')
                        ConstructorPattern
                          CodeReferenceElement: CONS
                            PsiElement(identifier)('CONS')
                          Pattern Argument List
                            PsiElement(()('(')
                            ConstructorPattern
                              CodeReferenceElement: SYM
                                PsiElement(identifier)('SYM')
                              Pattern Argument List
                                PsiElement(()('(')
                                ReferencePattern: name
                                  PsiElement(identifier)('name')
                                PsiElement())(')')
                            PsiElement(,)(',')
                            PsiWhiteSpace(' ')
                            ReferencePattern: args
                              PsiElement(identifier)('args')
                            PsiElement())(')')
                        PsiElement(,)(',')
                        PsiWhiteSpace(' ')
                        ConstructorPattern
                          CodeReferenceElement: CONS
                            PsiElement(identifier)('CONS')
                          Pattern Argument List
                            PsiElement(()('(')
                            ReferencePattern: body
                              PsiElement(identifier)('body')
                            PsiElement(,)(',')
                            PsiWhiteSpace(' ')
                            ConstructorPattern
                              CodeReferenceElement: CONS
                                PsiElement(identifier)('CONS')
                              Pattern Argument List
                                PsiElement(()('(')
                                ReferencePattern: expr
                                  PsiElement(identifier)('expr')
                                PsiElement(,)(',')
                                PsiWhiteSpace(' ')
                                ConstructorPattern
                                  CodeReferenceElement: NIL
                                    PsiElement(identifier)('NIL')
                                  Pattern Argument List
                                    PsiElement(()('(')
                                    PsiElement())(')')
                                PsiElement())(')')
                            PsiElement())(')')
                        PsiElement())(')')
                    PsiElement())(')')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace('\n      ')
                BlockOfExpressions
                  MethodCall
                    ReferenceExpression: normalize
                      PsiElement(identifier)('normalize')
                    ArgumentList
                      PsiElement(()('(')
                      MethodCall
                        ReferenceExpression: list
                          PsiElement(identifier)('list')
                        ArgumentList
                          PsiElement(()('(')
                          MethodCall
                            ReferenceExpression: SYM
                              PsiElement(identifier)('SYM')
                            ArgumentList
                              PsiElement(()('(')
                              StringLiteral
                                PsiElement(string content)('"def"')
                              PsiElement())(')')
                          PsiElement(,)(',')
                          PsiWhiteSpace('\n        ')
                          MethodCall
                            ReferenceExpression: SYM
                              PsiElement(identifier)('SYM')
                            ArgumentList
                              PsiElement(()('(')
                              ReferenceExpression: name
                                PsiElement(identifier)('name')
                              PsiElement())(')')
                          PsiElement(,)(',')
                          PsiWhiteSpace(' ')
                          MethodCall
                            ReferenceExpression: list
                              PsiElement(identifier)('list')
                            ArgumentList
                              PsiElement(()('(')
                              MethodCall
                                ReferenceExpression: SYM
                                  PsiElement(identifier)('SYM')
                                ArgumentList
                                  PsiElement(()('(')
                                  StringLiteral
                                    PsiElement(string content)('"lambda"')
                                  PsiElement())(')')
                              PsiElement(,)(',')
                              PsiWhiteSpace(' ')
                              ReferenceExpression: args
                                PsiElement(identifier)('args')
                              PsiElement(,)(',')
                              PsiWhiteSpace(' ')
                              ReferenceExpression: body
                                PsiElement(identifier)('body')
                              PsiElement())(')')
                          PsiElement(,)(',')
                          PsiWhiteSpace(' ')
                          ReferenceExpression: expr
                            PsiElement(identifier)('expr')
                          PsiElement())(')')
                      PsiElement())(')')
              PsiWhiteSpace('\n    ')
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                ConstructorPattern
                  CodeReferenceElement: CONS
                    PsiElement(identifier)('CONS')
                  Pattern Argument List
                    PsiElement(()('(')
                    ConstructorPattern
                      CodeReferenceElement: SYM
                        PsiElement(identifier)('SYM')
                      Pattern Argument List
                        PsiElement(()('(')
                        LiteralPattern
                          StringLiteral
                            PsiElement(string content)('"cond"')
                        PsiElement())(')')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    ConstructorPattern
                      CodeReferenceElement: CONS
                        PsiElement(identifier)('CONS')
                      Pattern Argument List
                        PsiElement(()('(')
                        ConstructorPattern
                          CodeReferenceElement: CONS
                            PsiElement(identifier)('CONS')
                          Pattern Argument List
                            PsiElement(()('(')
                            ConstructorPattern
                              CodeReferenceElement: SYM
                                PsiElement(identifier)('SYM')
                              Pattern Argument List
                                PsiElement(()('(')
                                LiteralPattern
                                  StringLiteral
                                    PsiElement(string content)('"else"')
                                PsiElement())(')')
                            PsiElement(,)(',')
                            PsiWhiteSpace(' ')
                            ConstructorPattern
                              CodeReferenceElement: CONS
                                PsiElement(identifier)('CONS')
                              Pattern Argument List
                                PsiElement(()('(')
                                ReferencePattern: expr
                                  PsiElement(identifier)('expr')
                                PsiElement(,)(',')
                                PsiWhiteSpace(' ')
                                ConstructorPattern
                                  CodeReferenceElement: NIL
                                    PsiElement(identifier)('NIL')
                                  Pattern Argument List
                                    PsiElement(()('(')
                                    PsiElement())(')')
                                PsiElement())(')')
                            PsiElement())(')')
                        PsiElement(,)(',')
                        ConstructorPattern
                          CodeReferenceElement: NIL
                            PsiElement(identifier)('NIL')
                          Pattern Argument List
                            PsiElement(()('(')
                            PsiElement())(')')
                        PsiElement())(')')
                    PsiElement())(')')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace('\n      ')
                BlockOfExpressions
                  MethodCall
                    ReferenceExpression: normalize
                      PsiElement(identifier)('normalize')
                    ArgumentList
                      PsiElement(()('(')
                      ReferenceExpression: expr
                        PsiElement(identifier)('expr')
                      PsiElement())(')')
              PsiWhiteSpace('\n    ')
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                ConstructorPattern
                  CodeReferenceElement: CONS
                    PsiElement(identifier)('CONS')
                  Pattern Argument List
                    PsiElement(()('(')
                    ConstructorPattern
                      CodeReferenceElement: SYM
                        PsiElement(identifier)('SYM')
                      Pattern Argument List
                        PsiElement(()('(')
                        LiteralPattern
                          StringLiteral
                            PsiElement(string content)('"cond"')
                        PsiElement())(')')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    ConstructorPattern
                      CodeReferenceElement: CONS
                        PsiElement(identifier)('CONS')
                      Pattern Argument List
                        PsiElement(()('(')
                        ConstructorPattern
                          CodeReferenceElement: CONS
                            PsiElement(identifier)('CONS')
                          Pattern Argument List
                            PsiElement(()('(')
                            ReferencePattern: test
                              PsiElement(identifier)('test')
                            PsiElement(,)(',')
                            PsiWhiteSpace(' ')
                            ConstructorPattern
                              CodeReferenceElement: CONS
                                PsiElement(identifier)('CONS')
                              Pattern Argument List
                                PsiElement(()('(')
                                ReferencePattern: expr
                                  PsiElement(identifier)('expr')
                                PsiElement(,)(',')
                                PsiWhiteSpace(' ')
                                ConstructorPattern
                                  CodeReferenceElement: NIL
                                    PsiElement(identifier)('NIL')
                                  Pattern Argument List
                                    PsiElement(()('(')
                                    PsiElement())(')')
                                PsiElement())(')')
                            PsiElement())(')')
                        PsiElement(,)(',')
                        PsiWhiteSpace(' ')
                        ReferencePattern: rest
                          PsiElement(identifier)('rest')
                        PsiElement())(')')
                    PsiElement())(')')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace('\n      ')
                BlockOfExpressions
                  MethodCall
                    ReferenceExpression: normalize
                      PsiElement(identifier)('normalize')
                    ArgumentList
                      PsiElement(()('(')
                      MethodCall
                        ReferenceExpression: list
                          PsiElement(identifier)('list')
                        ArgumentList
                          PsiElement(()('(')
                          MethodCall
                            ReferenceExpression: SYM
                              PsiElement(identifier)('SYM')
                            ArgumentList
                              PsiElement(()('(')
                              StringLiteral
                                PsiElement(string content)('"if"')
                              PsiElement())(')')
                          PsiElement(,)(',')
                          PsiWhiteSpace(' ')
                          ReferenceExpression: test
                            PsiElement(identifier)('test')
                          PsiElement(,)(',')
                          PsiWhiteSpace(' ')
                          ReferenceExpression: expr
                            PsiElement(identifier)('expr')
                          PsiElement(,)(',')
                          PsiWhiteSpace(' ')
                          MethodCall
                            ReferenceExpression: CONS
                              PsiElement(identifier)('CONS')
                            ArgumentList
                              PsiElement(()('(')
                              MethodCall
                                ReferenceExpression: SYM
                                  PsiElement(identifier)('SYM')
                                ArgumentList
                                  PsiElement(()('(')
                                  StringLiteral
                                    PsiElement(string content)('"cond"')
                                  PsiElement())(')')
                              PsiElement(,)(',')
                              PsiWhiteSpace(' ')
                              ReferenceExpression: rest
                                PsiElement(identifier)('rest')
                              PsiElement())(')')
                          PsiElement())(')')
                      PsiElement())(')')
              PsiWhiteSpace('\n    ')
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                ConstructorPattern
                  CodeReferenceElement: CONS
                    PsiElement(identifier)('CONS')
                  Pattern Argument List
                    PsiElement(()('(')
                    ReferencePattern: h
                      PsiElement(identifier)('h')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    ReferencePattern: t
                      PsiElement(identifier)('t')
                    PsiElement())(')')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                BlockOfExpressions
                  MethodCall
                    ReferenceExpression: CONS
                      PsiElement(identifier)('CONS')
                    ArgumentList
                      PsiElement(()('(')
                      MethodCall
                        ReferenceExpression: normalize
                          PsiElement(identifier)('normalize')
                        ArgumentList
                          PsiElement(()('(')
                          ReferenceExpression: h
                            PsiElement(identifier)('h')
                          PsiElement())(')')
                      PsiElement(,)(',')
                      PsiWhiteSpace(' ')
                      MethodCall
                        ReferenceExpression: normalize
                          PsiElement(identifier)('normalize')
                        ArgumentList
                          PsiElement(()('(')
                          ReferenceExpression: t
                            PsiElement(identifier)('t')
                          PsiElement())(')')
                      PsiElement())(')')
              PsiWhiteSpace('\n    ')
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                WildcardPattern
                  PsiElement(_)('_')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                BlockOfExpressions
                  ReferenceExpression: x
                    PsiElement(identifier)('x')
            PsiWhiteSpace('\n  ')
            PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: eval
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('eval')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: x
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Data
                    CodeReferenceElement: Data
                      PsiElement(identifier)('Data')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              Parameter: env
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('env')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Environment
                    CodeReferenceElement: Environment
                      PsiElement(identifier)('Environment')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Data
            CodeReferenceElement: Data
              PsiElement(identifier)('Data')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          BlockExpression
            PsiElement({)('{')
            PsiWhiteSpace('\n    ')
            ScPatternDefinition: prevexp
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              ListOfPatterns
                ReferencePattern: prevexp
                  PsiElement(identifier)('prevexp')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              ReferenceExpression: curexp
                PsiElement(identifier)('curexp')
            PsiElement(;)(';')
            PsiWhiteSpace('\n    ')
            AssignStatement
              ReferenceExpression: curexp
                PsiElement(identifier)('curexp')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              ReferenceExpression: x
                PsiElement(identifier)('x')
            PsiElement(;)(';')
            PsiWhiteSpace('\n    ')
            IfStatement
              PsiElement(if)('if')
              PsiWhiteSpace(' ')
              PsiElement(()('(')
              ReferenceExpression: trace
                PsiElement(identifier)('trace')
              PsiElement())(')')
              PsiWhiteSpace(' ')
              BlockExpression
                PsiElement({)('{')
                PsiWhiteSpace('\n      ')
                ForStatement
                  PsiElement(for)('for')
                  PsiWhiteSpace(' ')
                  PsiElement(()('(')
                  Enumerators
                    Generator
                      ReferencePattern: x
                        PsiElement(identifier)('x')
                      PsiWhiteSpace(' ')
                      PsiElement(<-)('<-')
                      PsiWhiteSpace(' ')
                      MethodCall
                        ReferenceExpression: range
                          PsiElement(identifier)('range')
                        ArgumentList
                          PsiElement(()('(')
                          IntegerLiteral
                            PsiElement(integer)('1')
                          PsiElement(,)(',')
                          PsiWhiteSpace(' ')
                          ReferenceExpression: indent
                            PsiElement(identifier)('indent')
                          PsiElement())(')')
                  PsiElement())(')')
                  PsiWhiteSpace(' ')
                  MethodCall
                    ReferenceExpression: Console.print
                      ReferenceExpression: Console
                        PsiElement(identifier)('Console')
                      PsiElement(.)('.')
                      PsiElement(identifier)('print')
                    ArgumentList
                      PsiElement(()('(')
                      StringLiteral
                        PsiElement(string content)('" "')
                      PsiElement())(')')
                PsiElement(;)(';')
                PsiWhiteSpace('\n      ')
                MethodCall
                  ReferenceExpression: Console.println
                    ReferenceExpression: Console
                      PsiElement(identifier)('Console')
                    PsiElement(.)('.')
                    PsiElement(identifier)('println')
                  ArgumentList
                    PsiElement(()('(')
                    InfixExpression
                      StringLiteral
                        PsiElement(string content)('"===> "')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: +
                        PsiElement(identifier)('+')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: x
                        PsiElement(identifier)('x')
                    PsiElement())(')')
                PsiElement(;)(';')
                PsiWhiteSpace('\n      ')
                AssignStatement
                  ReferenceExpression: indent
                    PsiElement(identifier)('indent')
                  PsiWhiteSpace(' ')
                  PsiElement(=)('=')
                  PsiWhiteSpace(' ')
                  InfixExpression
                    ReferenceExpression: indent
                      PsiElement(identifier)('indent')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: +
                      PsiElement(identifier)('+')
                    PsiWhiteSpace(' ')
                    IntegerLiteral
                      PsiElement(integer)('1')
                PsiElement(;)(';')
                PsiWhiteSpace('\n    ')
                PsiElement(})('}')
            PsiWhiteSpace('\n    ')
            ScPatternDefinition: result
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              ListOfPatterns
                ReferencePattern: result
                  PsiElement(identifier)('result')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              MethodCall
                ReferenceExpression: eval1
                  PsiElement(identifier)('eval1')
                ArgumentList
                  PsiElement(()('(')
                  ReferenceExpression: x
                    PsiElement(identifier)('x')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: env
                    PsiElement(identifier)('env')
                  PsiElement())(')')
            PsiElement(;)(';')
            PsiWhiteSpace('\n    ')
            IfStatement
              PsiElement(if)('if')
              PsiWhiteSpace(' ')
              PsiElement(()('(')
              ReferenceExpression: trace
                PsiElement(identifier)('trace')
              PsiElement())(')')
              PsiWhiteSpace(' ')
              BlockExpression
                PsiElement({)('{')
                PsiWhiteSpace('\n      ')
                AssignStatement
                  ReferenceExpression: indent
                    PsiElement(identifier)('indent')
                  PsiWhiteSpace(' ')
                  PsiElement(=)('=')
                  PsiWhiteSpace(' ')
                  InfixExpression
                    ReferenceExpression: indent
                      PsiElement(identifier)('indent')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: -
                      PsiElement(identifier)('-')
                    PsiWhiteSpace(' ')
                    IntegerLiteral
                      PsiElement(integer)('1')
                PsiElement(;)(';')
                PsiWhiteSpace('\n      ')
                ForStatement
                  PsiElement(for)('for')
                  PsiWhiteSpace(' ')
                  PsiElement(()('(')
                  Enumerators
                    Generator
                      ReferencePattern: x
                        PsiElement(identifier)('x')
                      PsiWhiteSpace(' ')
                      PsiElement(<-)('<-')
                      PsiWhiteSpace(' ')
                      MethodCall
                        ReferenceExpression: range
                          PsiElement(identifier)('range')
                        ArgumentList
                          PsiElement(()('(')
                          IntegerLiteral
                            PsiElement(integer)('1')
                          PsiElement(,)(',')
                          PsiWhiteSpace(' ')
                          ReferenceExpression: indent
                            PsiElement(identifier)('indent')
                          PsiElement())(')')
                  PsiElement())(')')
                  PsiWhiteSpace(' ')
                  MethodCall
                    ReferenceExpression: Console.print
                      ReferenceExpression: Console
                        PsiElement(identifier)('Console')
                      PsiElement(.)('.')
                      PsiElement(identifier)('print')
                    ArgumentList
                      PsiElement(()('(')
                      StringLiteral
                        PsiElement(string content)('" "')
                      PsiElement())(')')
                PsiElement(;)(';')
                PsiWhiteSpace('\n      ')
                MethodCall
                  ReferenceExpression: Console.println
                    ReferenceExpression: Console
                      PsiElement(identifier)('Console')
                    PsiElement(.)('.')
                    PsiElement(identifier)('println')
                  ArgumentList
                    PsiElement(()('(')
                    InfixExpression
                      StringLiteral
                        PsiElement(string content)('"<=== "')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: +
                        PsiElement(identifier)('+')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: result
                        PsiElement(identifier)('result')
                    PsiElement())(')')
                PsiElement(;)(';')
                PsiWhiteSpace('\n    ')
                PsiElement(})('}')
            PsiWhiteSpace('\n    ')
            AssignStatement
              ReferenceExpression: curexp
                PsiElement(identifier)('curexp')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              ReferenceExpression: prevexp
                PsiElement(identifier)('prevexp')
            PsiElement(;)(';')
            PsiWhiteSpace('\n    ')
            ReferenceExpression: result
              PsiElement(identifier)('result')
            PsiWhiteSpace('\n  ')
            PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: eval1
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('eval1')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: x
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Data
                    CodeReferenceElement: Data
                      PsiElement(identifier)('Data')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              Parameter: env
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('env')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Environment
                    CodeReferenceElement: Environment
                      PsiElement(identifier)('Environment')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Data
            CodeReferenceElement: Data
              PsiElement(identifier)('Data')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MatchStatement
            ReferenceExpression: x
              PsiElement(identifier)('x')
            PsiWhiteSpace(' ')
            PsiElement(match)('match')
            PsiWhiteSpace(' ')
            PsiElement({)('{')
            PsiWhiteSpace('\n    ')
            CaseClauses
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                ConstructorPattern
                  CodeReferenceElement: SYM
                    PsiElement(identifier)('SYM')
                  Pattern Argument List
                    PsiElement(()('(')
                    ReferencePattern: name
                      PsiElement(identifier)('name')
                    PsiElement())(')')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace('\n      ')
                BlockOfExpressions
                  InfixExpression
                    ReferenceExpression: env
                      PsiElement(identifier)('env')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: lookup
                      PsiElement(identifier)('lookup')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: name
                      PsiElement(identifier)('name')
              PsiWhiteSpace('\n    ')
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                ConstructorPattern
                  CodeReferenceElement: CONS
                    PsiElement(identifier)('CONS')
                  Pattern Argument List
                    PsiElement(()('(')
                    ConstructorPattern
                      CodeReferenceElement: SYM
                        PsiElement(identifier)('SYM')
                      Pattern Argument List
                        PsiElement(()('(')
                        LiteralPattern
                          StringLiteral
                            PsiElement(string content)('"def"')
                        PsiElement())(')')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    ConstructorPattern
                      CodeReferenceElement: CONS
                        PsiElement(identifier)('CONS')
                      Pattern Argument List
                        PsiElement(()('(')
                        ConstructorPattern
                          CodeReferenceElement: SYM
                            PsiElement(identifier)('SYM')
                          Pattern Argument List
                            PsiElement(()('(')
                            ReferencePattern: name
                              PsiElement(identifier)('name')
                            PsiElement())(')')
                        PsiElement(,)(',')
                        PsiWhiteSpace(' ')
                        ConstructorPattern
                          CodeReferenceElement: CONS
                            PsiElement(identifier)('CONS')
                          Pattern Argument List
                            PsiElement(()('(')
                            ReferencePattern: y
                              PsiElement(identifier)('y')
                            PsiElement(,)(',')
                            PsiWhiteSpace(' ')
                            ConstructorPattern
                              CodeReferenceElement: CONS
                                PsiElement(identifier)('CONS')
                              Pattern Argument List
                                PsiElement(()('(')
                                ReferencePattern: z
                                  PsiElement(identifier)('z')
                                PsiElement(,)(',')
                                PsiWhiteSpace(' ')
                                ConstructorPattern
                                  CodeReferenceElement: NIL
                                    PsiElement(identifier)('NIL')
                                  Pattern Argument List
                                    PsiElement(()('(')
                                    PsiElement())(')')
                                PsiElement())(')')
                            PsiElement())(')')
                        PsiElement())(')')
                    PsiElement())(')')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace('\n      ')
                BlockOfExpressions
                  MethodCall
                    ReferenceExpression: eval
                      PsiElement(identifier)('eval')
                    ArgumentList
                      PsiElement(()('(')
                      ReferenceExpression: z
                        PsiElement(identifier)('z')
                      PsiElement(,)(',')
                      PsiWhiteSpace(' ')
                      MethodCall
                        ReferenceExpression: env.extendRec
                          ReferenceExpression: env
                            PsiElement(identifier)('env')
                          PsiElement(.)('.')
                          PsiElement(identifier)('extendRec')
                        ArgumentList
                          PsiElement(()('(')
                          ReferenceExpression: name
                            PsiElement(identifier)('name')
                          PsiElement(,)(',')
                          PsiWhiteSpace(' ')
                          ExpressionInParenthesis
                            PsiElement(()('(')
                            FunctionExpression
                              Parameters
                                ParametersClause
                                  Parameter: env1
                                    PsiElement(identifier)('env1')
                              PsiWhiteSpace(' ')
                              PsiElement(=>)('=>')
                              PsiWhiteSpace(' ')
                              MethodCall
                                ReferenceExpression: eval
                                  PsiElement(identifier)('eval')
                                ArgumentList
                                  PsiElement(()('(')
                                  ReferenceExpression: y
                                    PsiElement(identifier)('y')
                                  PsiElement(,)(',')
                                  PsiWhiteSpace(' ')
                                  ReferenceExpression: env1
                                    PsiElement(identifier)('env1')
                                  PsiElement())(')')
                            PsiElement())(')')
                          PsiElement())(')')
                      PsiElement())(')')
              PsiWhiteSpace('\n    ')
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                ConstructorPattern
                  CodeReferenceElement: CONS
                    PsiElement(identifier)('CONS')
                  Pattern Argument List
                    PsiElement(()('(')
                    ConstructorPattern
                      CodeReferenceElement: SYM
                        PsiElement(identifier)('SYM')
                      Pattern Argument List
                        PsiElement(()('(')
                        LiteralPattern
                          StringLiteral
                            PsiElement(string content)('"val"')
                        PsiElement())(')')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    ConstructorPattern
                      CodeReferenceElement: CONS
                        PsiElement(identifier)('CONS')
                      Pattern Argument List
                        PsiElement(()('(')
                        ConstructorPattern
                          CodeReferenceElement: SYM
                            PsiElement(identifier)('SYM')
                          Pattern Argument List
                            PsiElement(()('(')
                            ReferencePattern: name
                              PsiElement(identifier)('name')
                            PsiElement())(')')
                        PsiElement(,)(',')
                        PsiWhiteSpace(' ')
                        ConstructorPattern
                          CodeReferenceElement: CONS
                            PsiElement(identifier)('CONS')
                          Pattern Argument List
                            PsiElement(()('(')
                            ReferencePattern: y
                              PsiElement(identifier)('y')
                            PsiElement(,)(',')
                            PsiWhiteSpace(' ')
                            ConstructorPattern
                              CodeReferenceElement: CONS
                                PsiElement(identifier)('CONS')
                              Pattern Argument List
                                PsiElement(()('(')
                                ReferencePattern: z
                                  PsiElement(identifier)('z')
                                PsiElement(,)(',')
                                PsiWhiteSpace(' ')
                                ConstructorPattern
                                  CodeReferenceElement: NIL
                                    PsiElement(identifier)('NIL')
                                  Pattern Argument List
                                    PsiElement(()('(')
                                    PsiElement())(')')
                                PsiElement())(')')
                            PsiElement())(')')
                        PsiElement())(')')
                    PsiElement())(')')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace('\n      ')
                BlockOfExpressions
                  MethodCall
                    ReferenceExpression: eval
                      PsiElement(identifier)('eval')
                    ArgumentList
                      PsiElement(()('(')
                      ReferenceExpression: z
                        PsiElement(identifier)('z')
                      PsiElement(,)(',')
                      PsiWhiteSpace(' ')
                      MethodCall
                        ReferenceExpression: env.extend
                          ReferenceExpression: env
                            PsiElement(identifier)('env')
                          PsiElement(.)('.')
                          PsiElement(identifier)('extend')
                        ArgumentList
                          PsiElement(()('(')
                          ReferenceExpression: name
                            PsiElement(identifier)('name')
                          PsiElement(,)(',')
                          PsiWhiteSpace(' ')
                          MethodCall
                            ReferenceExpression: eval
                              PsiElement(identifier)('eval')
                            ArgumentList
                              PsiElement(()('(')
                              ReferenceExpression: y
                                PsiElement(identifier)('y')
                              PsiElement(,)(',')
                              PsiWhiteSpace(' ')
                              ReferenceExpression: env
                                PsiElement(identifier)('env')
                              PsiElement())(')')
                          PsiElement())(')')
                      PsiElement())(')')
              PsiWhiteSpace('\n    ')
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                ConstructorPattern
                  CodeReferenceElement: CONS
                    PsiElement(identifier)('CONS')
                  Pattern Argument List
                    PsiElement(()('(')
                    ConstructorPattern
                      CodeReferenceElement: SYM
                        PsiElement(identifier)('SYM')
                      Pattern Argument List
                        PsiElement(()('(')
                        LiteralPattern
                          StringLiteral
                            PsiElement(string content)('"lambda"')
                        PsiElement())(')')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    ConstructorPattern
                      CodeReferenceElement: CONS
                        PsiElement(identifier)('CONS')
                      Pattern Argument List
                        PsiElement(()('(')
                        ReferencePattern: params
                          PsiElement(identifier)('params')
                        PsiElement(,)(',')
                        PsiWhiteSpace(' ')
                        ConstructorPattern
                          CodeReferenceElement: CONS
                            PsiElement(identifier)('CONS')
                          Pattern Argument List
                            PsiElement(()('(')
                            ReferencePattern: y
                              PsiElement(identifier)('y')
                            PsiElement(,)(',')
                            PsiWhiteSpace(' ')
                            ConstructorPattern
                              CodeReferenceElement: NIL
                                PsiElement(identifier)('NIL')
                              Pattern Argument List
                                PsiElement(()('(')
                                PsiElement())(')')
                            PsiElement())(')')
                        PsiElement())(')')
                    PsiElement())(')')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace('\n      ')
                BlockOfExpressions
                  MethodCall
                    ReferenceExpression: mkLambda
                      PsiElement(identifier)('mkLambda')
                    ArgumentList
                      PsiElement(()('(')
                      ReferenceExpression: params
                        PsiElement(identifier)('params')
                      PsiElement(,)(',')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: y
                        PsiElement(identifier)('y')
                      PsiElement(,)(',')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: env
                        PsiElement(identifier)('env')
                      PsiElement())(')')
              PsiWhiteSpace('\n    ')
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                ConstructorPattern
                  CodeReferenceElement: CONS
                    PsiElement(identifier)('CONS')
                  Pattern Argument List
                    PsiElement(()('(')
                    ConstructorPattern
                      CodeReferenceElement: SYM
                        PsiElement(identifier)('SYM')
                      Pattern Argument List
                        PsiElement(()('(')
                        LiteralPattern
                          StringLiteral
                            PsiElement(string content)('"if"')
                        PsiElement())(')')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    ConstructorPattern
                      CodeReferenceElement: CONS
                        PsiElement(identifier)('CONS')
                      Pattern Argument List
                        PsiElement(()('(')
                        ReferencePattern: c
                          PsiElement(identifier)('c')
                        PsiElement(,)(',')
                        PsiWhiteSpace(' ')
                        ConstructorPattern
                          CodeReferenceElement: CONS
                            PsiElement(identifier)('CONS')
                          Pattern Argument List
                            PsiElement(()('(')
                            ReferencePattern: t
                              PsiElement(identifier)('t')
                            PsiElement(,)(',')
                            PsiWhiteSpace(' ')
                            ConstructorPattern
                              CodeReferenceElement: CONS
                                PsiElement(identifier)('CONS')
                              Pattern Argument List
                                PsiElement(()('(')
                                ReferencePattern: e
                                  PsiElement(identifier)('e')
                                PsiElement(,)(',')
                                PsiWhiteSpace(' ')
                                ConstructorPattern
                                  CodeReferenceElement: NIL
                                    PsiElement(identifier)('NIL')
                                  Pattern Argument List
                                    PsiElement(()('(')
                                    PsiElement())(')')
                                PsiElement())(')')
                            PsiElement())(')')
                        PsiElement())(')')
                    PsiElement())(')')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace('\n      ')
                BlockOfExpressions
                  IfStatement
                    PsiElement(if)('if')
                    PsiWhiteSpace(' ')
                    PsiElement(()('(')
                    MethodCall
                      ReferenceExpression: toBoolean
                        PsiElement(identifier)('toBoolean')
                      ArgumentList
                        PsiElement(()('(')
                        MethodCall
                          ReferenceExpression: eval
                            PsiElement(identifier)('eval')
                          ArgumentList
                            PsiElement(()('(')
                            ReferenceExpression: c
                              PsiElement(identifier)('c')
                            PsiElement(,)(',')
                            PsiWhiteSpace(' ')
                            ReferenceExpression: env
                              PsiElement(identifier)('env')
                            PsiElement())(')')
                        PsiElement())(')')
                    PsiElement())(')')
                    PsiWhiteSpace(' ')
                    MethodCall
                      ReferenceExpression: eval
                        PsiElement(identifier)('eval')
                      ArgumentList
                        PsiElement(()('(')
                        ReferenceExpression: t
                          PsiElement(identifier)('t')
                        PsiElement(,)(',')
                        PsiWhiteSpace(' ')
                        ReferenceExpression: env
                          PsiElement(identifier)('env')
                        PsiElement())(')')
                    PsiWhiteSpace(' ')
                    PsiElement(else)('else')
                    PsiWhiteSpace(' ')
                    MethodCall
                      ReferenceExpression: eval
                        PsiElement(identifier)('eval')
                      ArgumentList
                        PsiElement(()('(')
                        ReferenceExpression: e
                          PsiElement(identifier)('e')
                        PsiElement(,)(',')
                        PsiWhiteSpace(' ')
                        ReferenceExpression: env
                          PsiElement(identifier)('env')
                        PsiElement())(')')
              PsiWhiteSpace('\n    ')
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                ConstructorPattern
                  CodeReferenceElement: CONS
                    PsiElement(identifier)('CONS')
                  Pattern Argument List
                    PsiElement(()('(')
                    ConstructorPattern
                      CodeReferenceElement: SYM
                        PsiElement(identifier)('SYM')
                      Pattern Argument List
                        PsiElement(()('(')
                        LiteralPattern
                          StringLiteral
                            PsiElement(string content)('"quote"')
                        PsiElement())(')')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    ConstructorPattern
                      CodeReferenceElement: CONS
                        PsiElement(identifier)('CONS')
                      Pattern Argument List
                        PsiElement(()('(')
                        ReferencePattern: x
                          PsiElement(identifier)('x')
                        PsiElement(,)(',')
                        PsiWhiteSpace(' ')
                        ConstructorPattern
                          CodeReferenceElement: NIL
                            PsiElement(identifier)('NIL')
                          Pattern Argument List
                            PsiElement(()('(')
                            PsiElement())(')')
                        PsiElement())(')')
                    PsiElement())(')')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace('\n      ')
                BlockOfExpressions
                  ReferenceExpression: x
                    PsiElement(identifier)('x')
              PsiWhiteSpace('\n    ')
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                ConstructorPattern
                  CodeReferenceElement: CONS
                    PsiElement(identifier)('CONS')
                  Pattern Argument List
                    PsiElement(()('(')
                    ReferencePattern: y
                      PsiElement(identifier)('y')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    ReferencePattern: xs
                      PsiElement(identifier)('xs')
                    PsiElement())(')')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace('\n      ')
                BlockOfExpressions
                  MethodCall
                    ReferenceExpression: apply
                      PsiElement(identifier)('apply')
                    ArgumentList
                      PsiElement(()('(')
                      MethodCall
                        ReferenceExpression: eval
                          PsiElement(identifier)('eval')
                        ArgumentList
                          PsiElement(()('(')
                          ReferenceExpression: y
                            PsiElement(identifier)('y')
                          PsiElement(,)(',')
                          PsiWhiteSpace(' ')
                          ReferenceExpression: env
                            PsiElement(identifier)('env')
                          PsiElement())(')')
                      PsiElement(,)(',')
                      PsiWhiteSpace(' ')
                      InfixExpression
                        MethodCall
                          ReferenceExpression: toList
                            PsiElement(identifier)('toList')
                          ArgumentList
                            PsiElement(()('(')
                            ReferenceExpression: xs
                              PsiElement(identifier)('xs')
                            PsiElement())(')')
                        PsiWhiteSpace(' ')
                        ReferenceExpression: map
                          PsiElement(identifier)('map')
                        PsiWhiteSpace(' ')
                        ExpressionInParenthesis
                          PsiElement(()('(')
                          FunctionExpression
                            Parameters
                              ParametersClause
                                Parameter: x
                                  PsiElement(identifier)('x')
                            PsiWhiteSpace(' ')
                            PsiElement(=>)('=>')
                            PsiWhiteSpace(' ')
                            MethodCall
                              ReferenceExpression: eval
                                PsiElement(identifier)('eval')
                              ArgumentList
                                PsiElement(()('(')
                                ReferenceExpression: x
                                  PsiElement(identifier)('x')
                                PsiElement(,)(',')
                                PsiWhiteSpace(' ')
                                ReferenceExpression: env
                                  PsiElement(identifier)('env')
                                PsiElement())(')')
                          PsiElement())(')')
                      PsiElement())(')')
              PsiWhiteSpace('\n    ')
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                ConstructorPattern
                  CodeReferenceElement: NUM
                    PsiElement(identifier)('NUM')
                  Pattern Argument List
                    PsiElement(()('(')
                    WildcardPattern
                      PsiElement(_)('_')
                    PsiElement())(')')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                BlockOfExpressions
                  ReferenceExpression: x
                    PsiElement(identifier)('x')
              PsiWhiteSpace('\n    ')
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                ConstructorPattern
                  CodeReferenceElement: STR
                    PsiElement(identifier)('STR')
                  Pattern Argument List
                    PsiElement(()('(')
                    WildcardPattern
                      PsiElement(_)('_')
                    PsiElement())(')')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                BlockOfExpressions
                  ReferenceExpression: x
                    PsiElement(identifier)('x')
              PsiWhiteSpace('\n    ')
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                ConstructorPattern
                  CodeReferenceElement: FUN
                    PsiElement(identifier)('FUN')
                  Pattern Argument List
                    PsiElement(()('(')
                    WildcardPattern
                      PsiElement(_)('_')
                    PsiElement())(')')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                BlockOfExpressions
                  ReferenceExpression: x
                    PsiElement(identifier)('x')
              PsiWhiteSpace('\n    ')
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                WildcardPattern
                  PsiElement(_)('_')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace('\n      ')
                BlockOfExpressions
                  MethodCall
                    ReferenceExpression: lispError
                      PsiElement(identifier)('lispError')
                    ArgumentList
                      PsiElement(()('(')
                      StringLiteral
                        PsiElement(string content)('"illegal term"')
                      PsiElement())(')')
            PsiWhiteSpace('\n    ')
            PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: apply
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('apply')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: fn
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('fn')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Data
                    CodeReferenceElement: Data
                      PsiElement(identifier)('Data')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              Parameter: args
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('args')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  ParametrizedType: List[Data]
                    SimpleType: List
                      CodeReferenceElement: List
                        PsiElement(identifier)('List')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: Data
                        CodeReferenceElement: Data
                          PsiElement(identifier)('Data')
                      PsiElement(])(']')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Data
            CodeReferenceElement: Data
              PsiElement(identifier)('Data')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MatchStatement
            ReferenceExpression: fn
              PsiElement(identifier)('fn')
            PsiWhiteSpace(' ')
            PsiElement(match)('match')
            PsiWhiteSpace(' ')
            PsiElement({)('{')
            PsiWhiteSpace('\n    ')
            CaseClauses
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                ConstructorPattern
                  CodeReferenceElement: FUN
                    PsiElement(identifier)('FUN')
                  Pattern Argument List
                    PsiElement(()('(')
                    ReferencePattern: f
                      PsiElement(identifier)('f')
                    PsiElement())(')')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                BlockOfExpressions
                  MethodCall
                    ReferenceExpression: f
                      PsiElement(identifier)('f')
                    ArgumentList
                      PsiElement(()('(')
                      ReferenceExpression: args
                        PsiElement(identifier)('args')
                      PsiElement())(')')
                  PsiElement(;)(';')
              PsiWhiteSpace('\n    ')
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                WildcardPattern
                  PsiElement(_)('_')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                BlockOfExpressions
                  MethodCall
                    ReferenceExpression: lispError
                      PsiElement(identifier)('lispError')
                    ArgumentList
                      PsiElement(()('(')
                      InfixExpression
                        StringLiteral
                          PsiElement(string content)('"application of non-function: "')
                        PsiWhiteSpace(' ')
                        ReferenceExpression: +
                          PsiElement(identifier)('+')
                        PsiWhiteSpace(' ')
                        ReferenceExpression: fn
                          PsiElement(identifier)('fn')
                      PsiElement())(')')
                  PsiElement(;)(';')
            PsiWhiteSpace('\n  ')
            PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: mkLambda
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('mkLambda')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: params
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('params')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Data
                    CodeReferenceElement: Data
                      PsiElement(identifier)('Data')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              Parameter: expr
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('expr')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Data
                    CodeReferenceElement: Data
                      PsiElement(identifier)('Data')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              Parameter: env
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('env')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Environment
                    CodeReferenceElement: Environment
                      PsiElement(identifier)('Environment')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Data
            CodeReferenceElement: Data
              PsiElement(identifier)('Data')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          BlockExpression
            PsiElement({)('{')
            PsiWhiteSpace('\n\n    ')
            ScFunctionDefinition: extendEnv
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(def)('def')
              PsiWhiteSpace(' ')
              PsiElement(identifier)('extendEnv')
              Parameters
                ParametersClause
                  PsiElement(()('(')
                  Parameter: env
                    AnnotationsList
                      <empty list>
                    Modifiers
                      <empty list>
                    PsiElement(identifier)('env')
                    PsiElement(:)(':')
                    PsiWhiteSpace(' ')
                    ParameterType
                      SimpleType: Environment
                        CodeReferenceElement: Environment
                          PsiElement(identifier)('Environment')
                  PsiElement(,)(',')
                  PsiWhiteSpace('\n                  ')
                  Parameter: ps
                    AnnotationsList
                      <empty list>
                    Modifiers
                      <empty list>
                    PsiElement(identifier)('ps')
                    PsiElement(:)(':')
                    PsiWhiteSpace(' ')
                    ParameterType
                      ParametrizedType: List[String]
                        SimpleType: List
                          CodeReferenceElement: List
                            PsiElement(identifier)('List')
                        TypeArgumentsList
                          PsiElement([)('[')
                          SimpleType: String
                            CodeReferenceElement: String
                              PsiElement(identifier)('String')
                          PsiElement(])(']')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  Parameter: args
                    AnnotationsList
                      <empty list>
                    Modifiers
                      <empty list>
                    PsiElement(identifier)('args')
                    PsiElement(:)(':')
                    PsiWhiteSpace(' ')
                    ParameterType
                      ParametrizedType: List[Data]
                        SimpleType: List
                          CodeReferenceElement: List
                            PsiElement(identifier)('List')
                        TypeArgumentsList
                          PsiElement([)('[')
                          SimpleType: Data
                            CodeReferenceElement: Data
                              PsiElement(identifier)('Data')
                          PsiElement(])(']')
                  PsiElement())(')')
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              SimpleType: Environment
                CodeReferenceElement: Environment
                  PsiElement(identifier)('Environment')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace('\n      ')
              MatchStatement
                Tuple
                  PsiElement(()('(')
                  ReferenceExpression: ps
                    PsiElement(identifier)('ps')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: args
                    PsiElement(identifier)('args')
                  PsiElement())(')')
                PsiWhiteSpace(' ')
                PsiElement(match)('match')
                PsiWhiteSpace(' ')
                PsiElement({)('{')
                PsiWhiteSpace('\n        ')
                CaseClauses
                  CaseClause
                    PsiElement(case)('case')
                    PsiWhiteSpace(' ')
                    TuplePattern
                      PsiElement(()('(')
                      ArgumentPatterns
                        ConstructorPattern
                          CodeReferenceElement: List
                            PsiElement(identifier)('List')
                          Pattern Argument List
                            PsiElement(()('(')
                            PsiElement())(')')
                        PsiElement(,)(',')
                        PsiWhiteSpace(' ')
                        ConstructorPattern
                          CodeReferenceElement: List
                            PsiElement(identifier)('List')
                          Pattern Argument List
                            PsiElement(()('(')
                            PsiElement())(')')
                      PsiElement())(')')
                    PsiWhiteSpace(' ')
                    PsiElement(=>)('=>')
                    PsiWhiteSpace('\n          ')
                    BlockOfExpressions
                      ReferenceExpression: env
                        PsiElement(identifier)('env')
                  PsiWhiteSpace('\n        ')
                  CaseClause
                    PsiElement(case)('case')
                    PsiWhiteSpace(' ')
                    TuplePattern
                      PsiElement(()('(')
                      ArgumentPatterns
                        InfixPattern
                          ReferencePattern: p
                            PsiElement(identifier)('p')
                          PsiWhiteSpace(' ')
                          CodeReferenceElement: ::
                            PsiElement(identifier)('::')
                          PsiWhiteSpace(' ')
                          ReferencePattern: ps1
                            PsiElement(identifier)('ps1')
                        PsiElement(,)(',')
                        PsiWhiteSpace(' ')
                        InfixPattern
                          ReferencePattern: arg
                            PsiElement(identifier)('arg')
                          PsiWhiteSpace(' ')
                          CodeReferenceElement: ::
                            PsiElement(identifier)('::')
                          PsiWhiteSpace(' ')
                          ReferencePattern: args1
                            PsiElement(identifier)('args1')
                      PsiElement())(')')
                    PsiWhiteSpace(' ')
                    PsiElement(=>)('=>')
                    PsiWhiteSpace('\n          ')
                    BlockOfExpressions
                      MethodCall
                        ReferenceExpression: extendEnv
                          PsiElement(identifier)('extendEnv')
                        ArgumentList
                          PsiElement(()('(')
                          MethodCall
                            ReferenceExpression: env.extend
                              ReferenceExpression: env
                                PsiElement(identifier)('env')
                              PsiElement(.)('.')
                              PsiElement(identifier)('extend')
                            ArgumentList
                              PsiElement(()('(')
                              ReferenceExpression: p
                                PsiElement(identifier)('p')
                              PsiElement(,)(',')
                              PsiWhiteSpace(' ')
                              ReferenceExpression: arg
                                PsiElement(identifier)('arg')
                              PsiElement())(')')
                          PsiElement(,)(',')
                          PsiWhiteSpace(' ')
                          ReferenceExpression: ps1
                            PsiElement(identifier)('ps1')
                          PsiElement(,)(',')
                          PsiWhiteSpace(' ')
                          ReferenceExpression: args1
                            PsiElement(identifier)('args1')
                          PsiElement())(')')
                  PsiWhiteSpace('\n        ')
                  CaseClause
                    PsiElement(case)('case')
                    PsiWhiteSpace(' ')
                    WildcardPattern
                      PsiElement(_)('_')
                    PsiWhiteSpace(' ')
                    PsiElement(=>)('=>')
                    PsiWhiteSpace('\n          ')
                    BlockOfExpressions
                      MethodCall
                        ReferenceExpression: lispError
                          PsiElement(identifier)('lispError')
                        ArgumentList
                          PsiElement(()('(')
                          StringLiteral
                            PsiElement(string content)('"wrong number of arguments"')
                          PsiElement())(')')
                PsiWhiteSpace('\n      ')
                PsiElement(})('}')
            PsiWhiteSpace('\n\n    ')
            ScPatternDefinition: ps
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              ListOfPatterns
                ReferencePattern: ps
                  PsiElement(identifier)('ps')
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              ParametrizedType: List[String]
                SimpleType: List
                  CodeReferenceElement: List
                    PsiElement(identifier)('List')
                TypeArgumentsList
                  PsiElement([)('[')
                  SimpleType: String
                    CodeReferenceElement: String
                      PsiElement(identifier)('String')
                  PsiElement(])(']')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              InfixExpression
                MethodCall
                  ReferenceExpression: toList
                    PsiElement(identifier)('toList')
                  ArgumentList
                    PsiElement(()('(')
                    ReferenceExpression: params
                      PsiElement(identifier)('params')
                    PsiElement())(')')
                PsiWhiteSpace(' ')
                ReferenceExpression: map
                  PsiElement(identifier)('map')
                PsiWhiteSpace(' ')
                BlockExpression
                  PsiElement({)('{')
                  PsiWhiteSpace('\n      ')
                  CaseClauses
                    CaseClause
                      PsiElement(case)('case')
                      PsiWhiteSpace(' ')
                      ConstructorPattern
                        CodeReferenceElement: SYM
                          PsiElement(identifier)('SYM')
                        Pattern Argument List
                          PsiElement(()('(')
                          ReferencePattern: name
                            PsiElement(identifier)('name')
                          PsiElement())(')')
                      PsiWhiteSpace(' ')
                      PsiElement(=>)('=>')
                      PsiWhiteSpace(' ')
                      BlockOfExpressions
                        ReferenceExpression: name
                          PsiElement(identifier)('name')
                    PsiWhiteSpace('\n      ')
                    CaseClause
                      PsiElement(case)('case')
                      PsiWhiteSpace(' ')
                      WildcardPattern
                        PsiElement(_)('_')
                      PsiWhiteSpace(' ')
                      PsiElement(=>)('=>')
                      PsiWhiteSpace(' ')
                      BlockOfExpressions
                        MethodCall
                          ReferenceExpression: sys.error
                            ReferenceExpression: sys
                              PsiElement(identifier)('sys')
                            PsiElement(.)('.')
                            PsiElement(identifier)('error')
                          ArgumentList
                            PsiElement(()('(')
                            StringLiteral
                              PsiElement(string content)('"illegal parameter list"')
                            PsiElement())(')')
                        PsiElement(;)(';')
                  PsiWhiteSpace('\n    ')
                  PsiElement(})('}')
            PsiWhiteSpace('\n\n    ')
            MethodCall
              ReferenceExpression: FUN
                PsiElement(identifier)('FUN')
              ArgumentList
                PsiElement(()('(')
                FunctionExpression
                  Parameters
                    ParametersClause
                      Parameter: args
                        PsiElement(identifier)('args')
                  PsiWhiteSpace(' ')
                  PsiElement(=>)('=>')
                  PsiWhiteSpace(' ')
                  MethodCall
                    ReferenceExpression: eval
                      PsiElement(identifier)('eval')
                    ArgumentList
                      PsiElement(()('(')
                      ReferenceExpression: expr
                        PsiElement(identifier)('expr')
                      PsiElement(,)(',')
                      PsiWhiteSpace(' ')
                      MethodCall
                        ReferenceExpression: extendEnv
                          PsiElement(identifier)('extendEnv')
                        ArgumentList
                          PsiElement(()('(')
                          ReferenceExpression: env
                            PsiElement(identifier)('env')
                          PsiElement(,)(',')
                          PsiWhiteSpace(' ')
                          ReferenceExpression: ps
                            PsiElement(identifier)('ps')
                          PsiElement(,)(',')
                          PsiWhiteSpace(' ')
                          ReferenceExpression: args
                            PsiElement(identifier)('args')
                          PsiElement())(')')
                      PsiElement())(')')
                PsiElement())(')')
            PsiWhiteSpace('\n  ')
            PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        ScPatternDefinition: globalEnv
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: globalEnv
              PsiElement(identifier)('globalEnv')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: EmptyEnvironment
    .extend("=", FUN({
      case List(NUM(arg1),NUM(arg2)) => NUM(if (arg1 == arg2) 1 else 0)
      case List(STR(arg1),STR(arg2)) => NUM(if (arg1 == arg2) 1 else 0)}))
    .extend("+", FUN({
      case List(NUM(arg1),NUM(arg2)) => NUM(arg1 + arg2)
      case List(STR(arg1),STR(arg2)) => STR(arg1 + arg2)}))
    .extend("-", FUN({
      case List(NUM(arg1),NUM(arg2)) => NUM(arg1 - arg2)}))
    .extend("*", FUN({
      case List(NUM(arg1),NUM(arg2)) => NUM(arg1 * arg2)}))
    .extend("/", FUN({
      case List(NUM(arg1),NUM(arg2)) => NUM(arg1 / arg2)}))
    .extend("car", FUN({
      case List(CONS(x, xs)) => x}))
    .extend("cdr", FUN({
      case List(CONS(x, xs)) => xs}))
    .extend("null?", FUN({
      case List(NIL()) => NUM(1)
      case _ => NUM(0)}))
    .extend
              MethodCall
                ReferenceExpression: EmptyEnvironment
    .extend("=", FUN({
      case List(NUM(arg1),NUM(arg2)) => NUM(if (arg1 == arg2) 1 else 0)
      case List(STR(arg1),STR(arg2)) => NUM(if (arg1 == arg2) 1 else 0)}))
    .extend("+", FUN({
      case List(NUM(arg1),NUM(arg2)) => NUM(arg1 + arg2)
      case List(STR(arg1),STR(arg2)) => STR(arg1 + arg2)}))
    .extend("-", FUN({
      case List(NUM(arg1),NUM(arg2)) => NUM(arg1 - arg2)}))
    .extend("*", FUN({
      case List(NUM(arg1),NUM(arg2)) => NUM(arg1 * arg2)}))
    .extend("/", FUN({
      case List(NUM(arg1),NUM(arg2)) => NUM(arg1 / arg2)}))
    .extend("car", FUN({
      case List(CONS(x, xs)) => x}))
    .extend("cdr", FUN({
      case List(CONS(x, xs)) => xs}))
    .extend
                  MethodCall
                    ReferenceExpression: EmptyEnvironment
    .extend("=", FUN({
      case List(NUM(arg1),NUM(arg2)) => NUM(if (arg1 == arg2) 1 else 0)
      case List(STR(arg1),STR(arg2)) => NUM(if (arg1 == arg2) 1 else 0)}))
    .extend("+", FUN({
      case List(NUM(arg1),NUM(arg2)) => NUM(arg1 + arg2)
      case List(STR(arg1),STR(arg2)) => STR(arg1 + arg2)}))
    .extend("-", FUN({
      case List(NUM(arg1),NUM(arg2)) => NUM(arg1 - arg2)}))
    .extend("*", FUN({
      case List(NUM(arg1),NUM(arg2)) => NUM(arg1 * arg2)}))
    .extend("/", FUN({
      case List(NUM(arg1),NUM(arg2)) => NUM(arg1 / arg2)}))
    .extend("car", FUN({
      case List(CONS(x, xs)) => x}))
    .extend
                      MethodCall
                        ReferenceExpression: EmptyEnvironment
    .extend("=", FUN({
      case List(NUM(arg1),NUM(arg2)) => NUM(if (arg1 == arg2) 1 else 0)
      case List(STR(arg1),STR(arg2)) => NUM(if (arg1 == arg2) 1 else 0)}))
    .extend("+", FUN({
      case List(NUM(arg1),NUM(arg2)) => NUM(arg1 + arg2)
      case List(STR(arg1),STR(arg2)) => STR(arg1 + arg2)}))
    .extend("-", FUN({
      case List(NUM(arg1),NUM(arg2)) => NUM(arg1 - arg2)}))
    .extend("*", FUN({
      case List(NUM(arg1),NUM(arg2)) => NUM(arg1 * arg2)}))
    .extend("/", FUN({
      case List(NUM(arg1),NUM(arg2)) => NUM(arg1 / arg2)}))
    .extend
                          MethodCall
                            ReferenceExpression: EmptyEnvironment
    .extend("=", FUN({
      case List(NUM(arg1),NUM(arg2)) => NUM(if (arg1 == arg2) 1 else 0)
      case List(STR(arg1),STR(arg2)) => NUM(if (arg1 == arg2) 1 else 0)}))
    .extend("+", FUN({
      case List(NUM(arg1),NUM(arg2)) => NUM(arg1 + arg2)
      case List(STR(arg1),STR(arg2)) => STR(arg1 + arg2)}))
    .extend("-", FUN({
      case List(NUM(arg1),NUM(arg2)) => NUM(arg1 - arg2)}))
    .extend("*", FUN({
      case List(NUM(arg1),NUM(arg2)) => NUM(arg1 * arg2)}))
    .extend
                              MethodCall
                                ReferenceExpression: EmptyEnvironment
    .extend("=", FUN({
      case List(NUM(arg1),NUM(arg2)) => NUM(if (arg1 == arg2) 1 else 0)
      case List(STR(arg1),STR(arg2)) => NUM(if (arg1 == arg2) 1 else 0)}))
    .extend("+", FUN({
      case List(NUM(arg1),NUM(arg2)) => NUM(arg1 + arg2)
      case List(STR(arg1),STR(arg2)) => STR(arg1 + arg2)}))
    .extend("-", FUN({
      case List(NUM(arg1),NUM(arg2)) => NUM(arg1 - arg2)}))
    .extend
                                  MethodCall
                                    ReferenceExpression: EmptyEnvironment
    .extend("=", FUN({
      case List(NUM(arg1),NUM(arg2)) => NUM(if (arg1 == arg2) 1 else 0)
      case List(STR(arg1),STR(arg2)) => NUM(if (arg1 == arg2) 1 else 0)}))
    .extend("+", FUN({
      case List(NUM(arg1),NUM(arg2)) => NUM(arg1 + arg2)
      case List(STR(arg1),STR(arg2)) => STR(arg1 + arg2)}))
    .extend
                                      MethodCall
                                        ReferenceExpression: EmptyEnvironment
    .extend("=", FUN({
      case List(NUM(arg1),NUM(arg2)) => NUM(if (arg1 == arg2) 1 else 0)
      case List(STR(arg1),STR(arg2)) => NUM(if (arg1 == arg2) 1 else 0)}))
    .extend
                                          MethodCall
                                            ReferenceExpression: EmptyEnvironment
    .extend
                                              ReferenceExpression: EmptyEnvironment
                                                PsiElement(identifier)('EmptyEnvironment')
                                              PsiWhiteSpace('\n    ')
                                              PsiElement(.)('.')
                                              PsiElement(identifier)('extend')
                                            ArgumentList
                                              PsiElement(()('(')
                                              StringLiteral
                                                PsiElement(string content)('"="')
                                              PsiElement(,)(',')
                                              PsiWhiteSpace(' ')
                                              MethodCall
                                                ReferenceExpression: FUN
                                                  PsiElement(identifier)('FUN')
                                                ArgumentList
                                                  PsiElement(()('(')
                                                  BlockExpression
                                                    PsiElement({)('{')
                                                    PsiWhiteSpace('\n      ')
                                                    CaseClauses
                                                      CaseClause
                                                        PsiElement(case)('case')
                                                        PsiWhiteSpace(' ')
                                                        ConstructorPattern
                                                          CodeReferenceElement: List
                                                            PsiElement(identifier)('List')
                                                          Pattern Argument List
                                                            PsiElement(()('(')
                                                            ConstructorPattern
                                                              CodeReferenceElement: NUM
                                                                PsiElement(identifier)('NUM')
                                                              Pattern Argument List
                                                                PsiElement(()('(')
                                                                ReferencePattern: arg1
                                                                  PsiElement(identifier)('arg1')
                                                                PsiElement())(')')
                                                            PsiElement(,)(',')
                                                            ConstructorPattern
                                                              CodeReferenceElement: NUM
                                                                PsiElement(identifier)('NUM')
                                                              Pattern Argument List
                                                                PsiElement(()('(')
                                                                ReferencePattern: arg2
                                                                  PsiElement(identifier)('arg2')
                                                                PsiElement())(')')
                                                            PsiElement())(')')
                                                        PsiWhiteSpace(' ')
                                                        PsiElement(=>)('=>')
                                                        PsiWhiteSpace(' ')
                                                        BlockOfExpressions
                                                          MethodCall
                                                            ReferenceExpression: NUM
                                                              PsiElement(identifier)('NUM')
                                                            ArgumentList
                                                              PsiElement(()('(')
                                                              IfStatement
                                                                PsiElement(if)('if')
                                                                PsiWhiteSpace(' ')
                                                                PsiElement(()('(')
                                                                InfixExpression
                                                                  ReferenceExpression: arg1
                                                                    PsiElement(identifier)('arg1')
                                                                  PsiWhiteSpace(' ')
                                                                  ReferenceExpression: ==
                                                                    PsiElement(identifier)('==')
                                                                  PsiWhiteSpace(' ')
                                                                  ReferenceExpression: arg2
                                                                    PsiElement(identifier)('arg2')
                                                                PsiElement())(')')
                                                                PsiWhiteSpace(' ')
                                                                IntegerLiteral
                                                                  PsiElement(integer)('1')
                                                                PsiWhiteSpace(' ')
                                                                PsiElement(else)('else')
                                                                PsiWhiteSpace(' ')
                                                                IntegerLiteral
                                                                  PsiElement(integer)('0')
                                                              PsiElement())(')')
                                                      PsiWhiteSpace('\n      ')
                                                      CaseClause
                                                        PsiElement(case)('case')
                                                        PsiWhiteSpace(' ')
                                                        ConstructorPattern
                                                          CodeReferenceElement: List
                                                            PsiElement(identifier)('List')
                                                          Pattern Argument List
                                                            PsiElement(()('(')
                                                            ConstructorPattern
                                                              CodeReferenceElement: STR
                                                                PsiElement(identifier)('STR')
                                                              Pattern Argument List
                                                                PsiElement(()('(')
                                                                ReferencePattern: arg1
                                                                  PsiElement(identifier)('arg1')
                                                                PsiElement())(')')
                                                            PsiElement(,)(',')
                                                            ConstructorPattern
                                                              CodeReferenceElement: STR
                                                                PsiElement(identifier)('STR')
                                                              Pattern Argument List
                                                                PsiElement(()('(')
                                                                ReferencePattern: arg2
                                                                  PsiElement(identifier)('arg2')
                                                                PsiElement())(')')
                                                            PsiElement())(')')
                                                        PsiWhiteSpace(' ')
                                                        PsiElement(=>)('=>')
                                                        PsiWhiteSpace(' ')
                                                        BlockOfExpressions
                                                          MethodCall
                                                            ReferenceExpression: NUM
                                                              PsiElement(identifier)('NUM')
                                                            ArgumentList
                                                              PsiElement(()('(')
                                                              IfStatement
                                                                PsiElement(if)('if')
                                                                PsiWhiteSpace(' ')
                                                                PsiElement(()('(')
                                                                InfixExpression
                                                                  ReferenceExpression: arg1
                                                                    PsiElement(identifier)('arg1')
                                                                  PsiWhiteSpace(' ')
                                                                  ReferenceExpression: ==
                                                                    PsiElement(identifier)('==')
                                                                  PsiWhiteSpace(' ')
                                                                  ReferenceExpression: arg2
                                                                    PsiElement(identifier)('arg2')
                                                                PsiElement())(')')
                                                                PsiWhiteSpace(' ')
                                                                IntegerLiteral
                                                                  PsiElement(integer)('1')
                                                                PsiWhiteSpace(' ')
                                                                PsiElement(else)('else')
                                                                PsiWhiteSpace(' ')
                                                                IntegerLiteral
                                                                  PsiElement(integer)('0')
                                                              PsiElement())(')')
                                                    PsiElement(})('}')
                                                  PsiElement())(')')
                                              PsiElement())(')')
                                          PsiWhiteSpace('\n    ')
                                          PsiElement(.)('.')
                                          PsiElement(identifier)('extend')
                                        ArgumentList
                                          PsiElement(()('(')
                                          StringLiteral
                                            PsiElement(string content)('"+"')
                                          PsiElement(,)(',')
                                          PsiWhiteSpace(' ')
                                          MethodCall
                                            ReferenceExpression: FUN
                                              PsiElement(identifier)('FUN')
                                            ArgumentList
                                              PsiElement(()('(')
                                              BlockExpression
                                                PsiElement({)('{')
                                                PsiWhiteSpace('\n      ')
                                                CaseClauses
                                                  CaseClause
                                                    PsiElement(case)('case')
                                                    PsiWhiteSpace(' ')
                                                    ConstructorPattern
                                                      CodeReferenceElement: List
                                                        PsiElement(identifier)('List')
                                                      Pattern Argument List
                                                        PsiElement(()('(')
                                                        ConstructorPattern
                                                          CodeReferenceElement: NUM
                                                            PsiElement(identifier)('NUM')
                                                          Pattern Argument List
                                                            PsiElement(()('(')
                                                            ReferencePattern: arg1
                                                              PsiElement(identifier)('arg1')
                                                            PsiElement())(')')
                                                        PsiElement(,)(',')
                                                        ConstructorPattern
                                                          CodeReferenceElement: NUM
                                                            PsiElement(identifier)('NUM')
                                                          Pattern Argument List
                                                            PsiElement(()('(')
                                                            ReferencePattern: arg2
                                                              PsiElement(identifier)('arg2')
                                                            PsiElement())(')')
                                                        PsiElement())(')')
                                                    PsiWhiteSpace(' ')
                                                    PsiElement(=>)('=>')
                                                    PsiWhiteSpace(' ')
                                                    BlockOfExpressions
                                                      MethodCall
                                                        ReferenceExpression: NUM
                                                          PsiElement(identifier)('NUM')
                                                        ArgumentList
                                                          PsiElement(()('(')
                                                          InfixExpression
                                                            ReferenceExpression: arg1
                                                              PsiElement(identifier)('arg1')
                                                            PsiWhiteSpace(' ')
                                                            ReferenceExpression: +
                                                              PsiElement(identifier)('+')
                                                            PsiWhiteSpace(' ')
                                                            ReferenceExpression: arg2
                                                              PsiElement(identifier)('arg2')
                                                          PsiElement())(')')
                                                  PsiWhiteSpace('\n      ')
                                                  CaseClause
                                                    PsiElement(case)('case')
                                                    PsiWhiteSpace(' ')
                                                    ConstructorPattern
                                                      CodeReferenceElement: List
                                                        PsiElement(identifier)('List')
                                                      Pattern Argument List
                                                        PsiElement(()('(')
                                                        ConstructorPattern
                                                          CodeReferenceElement: STR
                                                            PsiElement(identifier)('STR')
                                                          Pattern Argument List
                                                            PsiElement(()('(')
                                                            ReferencePattern: arg1
                                                              PsiElement(identifier)('arg1')
                                                            PsiElement())(')')
                                                        PsiElement(,)(',')
                                                        ConstructorPattern
                                                          CodeReferenceElement: STR
                                                            PsiElement(identifier)('STR')
                                                          Pattern Argument List
                                                            PsiElement(()('(')
                                                            ReferencePattern: arg2
                                                              PsiElement(identifier)('arg2')
                                                            PsiElement())(')')
                                                        PsiElement())(')')
                                                    PsiWhiteSpace(' ')
                                                    PsiElement(=>)('=>')
                                                    PsiWhiteSpace(' ')
                                                    BlockOfExpressions
                                                      MethodCall
                                                        ReferenceExpression: STR
                                                          PsiElement(identifier)('STR')
                                                        ArgumentList
                                                          PsiElement(()('(')
                                                          InfixExpression
                                                            ReferenceExpression: arg1
                                                              PsiElement(identifier)('arg1')
                                                            PsiWhiteSpace(' ')
                                                            ReferenceExpression: +
                                                              PsiElement(identifier)('+')
                                                            PsiWhiteSpace(' ')
                                                            ReferenceExpression: arg2
                                                              PsiElement(identifier)('arg2')
                                                          PsiElement())(')')
                                                PsiElement(})('}')
                                              PsiElement())(')')
                                          PsiElement())(')')
                                      PsiWhiteSpace('\n    ')
                                      PsiElement(.)('.')
                                      PsiElement(identifier)('extend')
                                    ArgumentList
                                      PsiElement(()('(')
                                      StringLiteral
                                        PsiElement(string content)('"-"')
                                      PsiElement(,)(',')
                                      PsiWhiteSpace(' ')
                                      MethodCall
                                        ReferenceExpression: FUN
                                          PsiElement(identifier)('FUN')
                                        ArgumentList
                                          PsiElement(()('(')
                                          BlockExpression
                                            PsiElement({)('{')
                                            PsiWhiteSpace('\n      ')
                                            CaseClauses
                                              CaseClause
                                                PsiElement(case)('case')
                                                PsiWhiteSpace(' ')
                                                ConstructorPattern
                                                  CodeReferenceElement: List
                                                    PsiElement(identifier)('List')
                                                  Pattern Argument List
                                                    PsiElement(()('(')
                                                    ConstructorPattern
                                                      CodeReferenceElement: NUM
                                                        PsiElement(identifier)('NUM')
                                                      Pattern Argument List
                                                        PsiElement(()('(')
                                                        ReferencePattern: arg1
                                                          PsiElement(identifier)('arg1')
                                                        PsiElement())(')')
                                                    PsiElement(,)(',')
                                                    ConstructorPattern
                                                      CodeReferenceElement: NUM
                                                        PsiElement(identifier)('NUM')
                                                      Pattern Argument List
                                                        PsiElement(()('(')
                                                        ReferencePattern: arg2
                                                          PsiElement(identifier)('arg2')
                                                        PsiElement())(')')
                                                    PsiElement())(')')
                                                PsiWhiteSpace(' ')
                                                PsiElement(=>)('=>')
                                                PsiWhiteSpace(' ')
                                                BlockOfExpressions
                                                  MethodCall
                                                    ReferenceExpression: NUM
                                                      PsiElement(identifier)('NUM')
                                                    ArgumentList
                                                      PsiElement(()('(')
                                                      InfixExpression
                                                        ReferenceExpression: arg1
                                                          PsiElement(identifier)('arg1')
                                                        PsiWhiteSpace(' ')
                                                        ReferenceExpression: -
                                                          PsiElement(identifier)('-')
                                                        PsiWhiteSpace(' ')
                                                        ReferenceExpression: arg2
                                                          PsiElement(identifier)('arg2')
                                                      PsiElement())(')')
                                            PsiElement(})('}')
                                          PsiElement())(')')
                                      PsiElement())(')')
                                  PsiWhiteSpace('\n    ')
                                  PsiElement(.)('.')
                                  PsiElement(identifier)('extend')
                                ArgumentList
                                  PsiElement(()('(')
                                  StringLiteral
                                    PsiElement(string content)('"*"')
                                  PsiElement(,)(',')
                                  PsiWhiteSpace(' ')
                                  MethodCall
                                    ReferenceExpression: FUN
                                      PsiElement(identifier)('FUN')
                                    ArgumentList
                                      PsiElement(()('(')
                                      BlockExpression
                                        PsiElement({)('{')
                                        PsiWhiteSpace('\n      ')
                                        CaseClauses
                                          CaseClause
                                            PsiElement(case)('case')
                                            PsiWhiteSpace(' ')
                                            ConstructorPattern
                                              CodeReferenceElement: List
                                                PsiElement(identifier)('List')
                                              Pattern Argument List
                                                PsiElement(()('(')
                                                ConstructorPattern
                                                  CodeReferenceElement: NUM
                                                    PsiElement(identifier)('NUM')
                                                  Pattern Argument List
                                                    PsiElement(()('(')
                                                    ReferencePattern: arg1
                                                      PsiElement(identifier)('arg1')
                                                    PsiElement())(')')
                                                PsiElement(,)(',')
                                                ConstructorPattern
                                                  CodeReferenceElement: NUM
                                                    PsiElement(identifier)('NUM')
                                                  Pattern Argument List
                                                    PsiElement(()('(')
                                                    ReferencePattern: arg2
                                                      PsiElement(identifier)('arg2')
                                                    PsiElement())(')')
                                                PsiElement())(')')
                                            PsiWhiteSpace(' ')
                                            PsiElement(=>)('=>')
                                            PsiWhiteSpace(' ')
                                            BlockOfExpressions
                                              MethodCall
                                                ReferenceExpression: NUM
                                                  PsiElement(identifier)('NUM')
                                                ArgumentList
                                                  PsiElement(()('(')
                                                  InfixExpression
                                                    ReferenceExpression: arg1
                                                      PsiElement(identifier)('arg1')
                                                    PsiWhiteSpace(' ')
                                                    ReferenceExpression: *
                                                      PsiElement(identifier)('*')
                                                    PsiWhiteSpace(' ')
                                                    ReferenceExpression: arg2
                                                      PsiElement(identifier)('arg2')
                                                  PsiElement())(')')
                                        PsiElement(})('}')
                                      PsiElement())(')')
                                  PsiElement())(')')
                              PsiWhiteSpace('\n    ')
                              PsiElement(.)('.')
                              PsiElement(identifier)('extend')
                            ArgumentList
                              PsiElement(()('(')
                              StringLiteral
                                PsiElement(string content)('"/"')
                              PsiElement(,)(',')
                              PsiWhiteSpace(' ')
                              MethodCall
                                ReferenceExpression: FUN
                                  PsiElement(identifier)('FUN')
                                ArgumentList
                                  PsiElement(()('(')
                                  BlockExpression
                                    PsiElement({)('{')
                                    PsiWhiteSpace('\n      ')
                                    CaseClauses
                                      CaseClause
                                        PsiElement(case)('case')
                                        PsiWhiteSpace(' ')
                                        ConstructorPattern
                                          CodeReferenceElement: List
                                            PsiElement(identifier)('List')
                                          Pattern Argument List
                                            PsiElement(()('(')
                                            ConstructorPattern
                                              CodeReferenceElement: NUM
                                                PsiElement(identifier)('NUM')
                                              Pattern Argument List
                                                PsiElement(()('(')
                                                ReferencePattern: arg1
                                                  PsiElement(identifier)('arg1')
                                                PsiElement())(')')
                                            PsiElement(,)(',')
                                            ConstructorPattern
                                              CodeReferenceElement: NUM
                                                PsiElement(identifier)('NUM')
                                              Pattern Argument List
                                                PsiElement(()('(')
                                                ReferencePattern: arg2
                                                  PsiElement(identifier)('arg2')
                                                PsiElement())(')')
                                            PsiElement())(')')
                                        PsiWhiteSpace(' ')
                                        PsiElement(=>)('=>')
                                        PsiWhiteSpace(' ')
                                        BlockOfExpressions
                                          MethodCall
                                            ReferenceExpression: NUM
                                              PsiElement(identifier)('NUM')
                                            ArgumentList
                                              PsiElement(()('(')
                                              InfixExpression
                                                ReferenceExpression: arg1
                                                  PsiElement(identifier)('arg1')
                                                PsiWhiteSpace(' ')
                                                ReferenceExpression: /
                                                  PsiElement(identifier)('/')
                                                PsiWhiteSpace(' ')
                                                ReferenceExpression: arg2
                                                  PsiElement(identifier)('arg2')
                                              PsiElement())(')')
                                    PsiElement(})('}')
                                  PsiElement())(')')
                              PsiElement())(')')
                          PsiWhiteSpace('\n    ')
                          PsiElement(.)('.')
                          PsiElement(identifier)('extend')
                        ArgumentList
                          PsiElement(()('(')
                          StringLiteral
                            PsiElement(string content)('"car"')
                          PsiElement(,)(',')
                          PsiWhiteSpace(' ')
                          MethodCall
                            ReferenceExpression: FUN
                              PsiElement(identifier)('FUN')
                            ArgumentList
                              PsiElement(()('(')
                              BlockExpression
                                PsiElement({)('{')
                                PsiWhiteSpace('\n      ')
                                CaseClauses
                                  CaseClause
                                    PsiElement(case)('case')
                                    PsiWhiteSpace(' ')
                                    ConstructorPattern
                                      CodeReferenceElement: List
                                        PsiElement(identifier)('List')
                                      Pattern Argument List
                                        PsiElement(()('(')
                                        ConstructorPattern
                                          CodeReferenceElement: CONS
                                            PsiElement(identifier)('CONS')
                                          Pattern Argument List
                                            PsiElement(()('(')
                                            ReferencePattern: x
                                              PsiElement(identifier)('x')
                                            PsiElement(,)(',')
                                            PsiWhiteSpace(' ')
                                            ReferencePattern: xs
                                              PsiElement(identifier)('xs')
                                            PsiElement())(')')
                                        PsiElement())(')')
                                    PsiWhiteSpace(' ')
                                    PsiElement(=>)('=>')
                                    PsiWhiteSpace(' ')
                                    BlockOfExpressions
                                      ReferenceExpression: x
                                        PsiElement(identifier)('x')
                                PsiElement(})('}')
                              PsiElement())(')')
                          PsiElement())(')')
                      PsiWhiteSpace('\n    ')
                      PsiElement(.)('.')
                      PsiElement(identifier)('extend')
                    ArgumentList
                      PsiElement(()('(')
                      StringLiteral
                        PsiElement(string content)('"cdr"')
                      PsiElement(,)(',')
                      PsiWhiteSpace(' ')
                      MethodCall
                        ReferenceExpression: FUN
                          PsiElement(identifier)('FUN')
                        ArgumentList
                          PsiElement(()('(')
                          BlockExpression
                            PsiElement({)('{')
                            PsiWhiteSpace('\n      ')
                            CaseClauses
                              CaseClause
                                PsiElement(case)('case')
                                PsiWhiteSpace(' ')
                                ConstructorPattern
                                  CodeReferenceElement: List
                                    PsiElement(identifier)('List')
                                  Pattern Argument List
                                    PsiElement(()('(')
                                    ConstructorPattern
                                      CodeReferenceElement: CONS
                                        PsiElement(identifier)('CONS')
                                      Pattern Argument List
                                        PsiElement(()('(')
                                        ReferencePattern: x
                                          PsiElement(identifier)('x')
                                        PsiElement(,)(',')
                                        PsiWhiteSpace(' ')
                                        ReferencePattern: xs
                                          PsiElement(identifier)('xs')
                                        PsiElement())(')')
                                    PsiElement())(')')
                                PsiWhiteSpace(' ')
                                PsiElement(=>)('=>')
                                PsiWhiteSpace(' ')
                                BlockOfExpressions
                                  ReferenceExpression: xs
                                    PsiElement(identifier)('xs')
                            PsiElement(})('}')
                          PsiElement())(')')
                      PsiElement())(')')
                  PsiWhiteSpace('\n    ')
                  PsiElement(.)('.')
                  PsiElement(identifier)('extend')
                ArgumentList
                  PsiElement(()('(')
                  StringLiteral
                    PsiElement(string content)('"null?"')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  MethodCall
                    ReferenceExpression: FUN
                      PsiElement(identifier)('FUN')
                    ArgumentList
                      PsiElement(()('(')
                      BlockExpression
                        PsiElement({)('{')
                        PsiWhiteSpace('\n      ')
                        CaseClauses
                          CaseClause
                            PsiElement(case)('case')
                            PsiWhiteSpace(' ')
                            ConstructorPattern
                              CodeReferenceElement: List
                                PsiElement(identifier)('List')
                              Pattern Argument List
                                PsiElement(()('(')
                                ConstructorPattern
                                  CodeReferenceElement: NIL
                                    PsiElement(identifier)('NIL')
                                  Pattern Argument List
                                    PsiElement(()('(')
                                    PsiElement())(')')
                                PsiElement())(')')
                            PsiWhiteSpace(' ')
                            PsiElement(=>)('=>')
                            PsiWhiteSpace(' ')
                            BlockOfExpressions
                              MethodCall
                                ReferenceExpression: NUM
                                  PsiElement(identifier)('NUM')
                                ArgumentList
                                  PsiElement(()('(')
                                  IntegerLiteral
                                    PsiElement(integer)('1')
                                  PsiElement())(')')
                          PsiWhiteSpace('\n      ')
                          CaseClause
                            PsiElement(case)('case')
                            PsiWhiteSpace(' ')
                            WildcardPattern
                              PsiElement(_)('_')
                            PsiWhiteSpace(' ')
                            PsiElement(=>)('=>')
                            PsiWhiteSpace(' ')
                            BlockOfExpressions
                              MethodCall
                                ReferenceExpression: NUM
                                  PsiElement(identifier)('NUM')
                                ArgumentList
                                  PsiElement(()('(')
                                  IntegerLiteral
                                    PsiElement(integer)('0')
                                  PsiElement())(')')
                        PsiElement(})('}')
                      PsiElement())(')')
                  PsiElement())(')')
              PsiWhiteSpace('\n    ')
              PsiElement(.)('.')
              PsiElement(identifier)('extend')
            ArgumentList
              PsiElement(()('(')
              StringLiteral
                PsiElement(string content)('"cons"')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              MethodCall
                ReferenceExpression: FUN
                  PsiElement(identifier)('FUN')
                ArgumentList
                  PsiElement(()('(')
                  BlockExpression
                    PsiElement({)('{')
                    PsiWhiteSpace('\n      ')
                    CaseClauses
                      CaseClause
                        PsiElement(case)('case')
                        PsiWhiteSpace(' ')
                        ConstructorPattern
                          CodeReferenceElement: List
                            PsiElement(identifier)('List')
                          Pattern Argument List
                            PsiElement(()('(')
                            ReferencePattern: x
                              PsiElement(identifier)('x')
                            PsiElement(,)(',')
                            PsiWhiteSpace(' ')
                            ReferencePattern: y
                              PsiElement(identifier)('y')
                            PsiElement())(')')
                        PsiWhiteSpace(' ')
                        PsiElement(=>)('=>')
                        PsiWhiteSpace(' ')
                        BlockOfExpressions
                          MethodCall
                            ReferenceExpression: CONS
                              PsiElement(identifier)('CONS')
                            ArgumentList
                              PsiElement(()('(')
                              ReferenceExpression: x
                                PsiElement(identifier)('x')
                              PsiElement(,)(',')
                              PsiWhiteSpace(' ')
                              ReferenceExpression: y
                                PsiElement(identifier)('y')
                              PsiElement())(')')
                    PsiElement(})('}')
                  PsiElement())(')')
              PsiElement())(')')
        PsiElement(;)(';')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: evaluate
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('evaluate')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: x
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Data
                    CodeReferenceElement: Data
                      PsiElement(identifier)('Data')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Data
            CodeReferenceElement: Data
              PsiElement(identifier)('Data')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: eval
              PsiElement(identifier)('eval')
            ArgumentList
              PsiElement(()('(')
              MethodCall
                ReferenceExpression: normalize
                  PsiElement(identifier)('normalize')
                ArgumentList
                  PsiElement(()('(')
                  ReferenceExpression: x
                    PsiElement(identifier)('x')
                  PsiElement())(')')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              ReferenceExpression: globalEnv
                PsiElement(identifier)('globalEnv')
              PsiElement())(')')
        PsiElement(;)(';')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: evaluate
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('evaluate')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: s
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('s')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: String
                    CodeReferenceElement: String
                      PsiElement(identifier)('String')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Data
            CodeReferenceElement: Data
              PsiElement(identifier)('Data')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: evaluate
              PsiElement(identifier)('evaluate')
            ArgumentList
              PsiElement(()('(')
              MethodCall
                ReferenceExpression: string2lisp
                  PsiElement(identifier)('string2lisp')
                ArgumentList
                  PsiElement(()('(')
                  ReferenceExpression: s
                    PsiElement(identifier)('s')
                  PsiElement())(')')
              PsiElement())(')')
        PsiElement(;)(';')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: string2lisp
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('string2lisp')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: s
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('s')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: String
                    CodeReferenceElement: String
                      PsiElement(identifier)('String')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Data
            CodeReferenceElement: Data
              PsiElement(identifier)('Data')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          BlockExpression
            PsiElement({)('{')
            PsiWhiteSpace('\n    ')
            ScPatternDefinition: it
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              ListOfPatterns
                ReferencePattern: it
                  PsiElement(identifier)('it')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              ScNewTemplateDefinition: <anonymous>
                PsiElement(new)('new')
                PsiWhiteSpace(' ')
                ExtendsBlock
                  TemplateParents
                    ConstructorInvocation
                      SimpleType: LispTokenizer
                        CodeReferenceElement: LispTokenizer
                          PsiElement(identifier)('LispTokenizer')
                      ArgumentList
                        PsiElement(()('(')
                        ReferenceExpression: s
                          PsiElement(identifier)('s')
                        PsiElement())(')')
            PsiElement(;)(';')
            PsiWhiteSpace('\n    ')
            ScFunctionDefinition: parse
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(def)('def')
              PsiWhiteSpace(' ')
              PsiElement(identifier)('parse')
              Parameters
                ParametersClause
                  PsiElement(()('(')
                  Parameter: token
                    AnnotationsList
                      <empty list>
                    Modifiers
                      <empty list>
                    PsiElement(identifier)('token')
                    PsiElement(:)(':')
                    PsiWhiteSpace(' ')
                    ParameterType
                      SimpleType: String
                        CodeReferenceElement: String
                          PsiElement(identifier)('String')
                  PsiElement())(')')
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              SimpleType: Data
                CodeReferenceElement: Data
                  PsiElement(identifier)('Data')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              BlockExpression
                PsiElement({)('{')
                PsiWhiteSpace('\n      ')
                IfStatement
                  PsiElement(if)('if')
                  PsiWhiteSpace(' ')
                  PsiElement(()('(')
                  InfixExpression
                    ReferenceExpression: token
                      PsiElement(identifier)('token')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: ==
                      PsiElement(identifier)('==')
                    PsiWhiteSpace(' ')
                    StringLiteral
                      PsiElement(string content)('"("')
                  PsiElement())(')')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: parseList
                    PsiElement(identifier)('parseList')
                  PsiWhiteSpace('\n      ')
                  PsiElement(else)('else')
                  PsiWhiteSpace(' ')
                  IfStatement
                    PsiElement(if)('if')
                    PsiWhiteSpace(' ')
                    PsiElement(()('(')
                    InfixExpression
                      ReferenceExpression: token
                        PsiElement(identifier)('token')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: ==
                        PsiElement(identifier)('==')
                      PsiWhiteSpace(' ')
                      StringLiteral
                        PsiElement(string content)('")"')
                    PsiElement())(')')
                    PsiWhiteSpace(' ')
                    MethodCall
                      ReferenceExpression: sys.error
                        ReferenceExpression: sys
                          PsiElement(identifier)('sys')
                        PsiElement(.)('.')
                        PsiElement(identifier)('error')
                      ArgumentList
                        PsiElement(()('(')
                        StringLiteral
                          PsiElement(string content)('"unbalanced parentheses"')
                        PsiElement())(')')
                    PsiWhiteSpace('\n      ')
                    PsiElement(else)('else')
                    PsiWhiteSpace(' ')
                    IfStatement
                      PsiElement(if)('if')
                      PsiWhiteSpace(' ')
                      PsiElement(()('(')
                      InfixExpression
                        InfixExpression
                          CharLiteral
                            PsiElement(Character)(''0'')
                          PsiWhiteSpace(' ')
                          ReferenceExpression: <=
                            PsiElement(identifier)('<=')
                          PsiWhiteSpace(' ')
                          MethodCall
                            ReferenceExpression: token.charAt
                              ReferenceExpression: token
                                PsiElement(identifier)('token')
                              PsiElement(.)('.')
                              PsiElement(identifier)('charAt')
                            ArgumentList
                              PsiElement(()('(')
                              IntegerLiteral
                                PsiElement(integer)('0')
                              PsiElement())(')')
                        PsiWhiteSpace(' ')
                        ReferenceExpression: &&
                          PsiElement(identifier)('&&')
                        PsiWhiteSpace(' ')
                        InfixExpression
                          MethodCall
                            ReferenceExpression: token.charAt
                              ReferenceExpression: token
                                PsiElement(identifier)('token')
                              PsiElement(.)('.')
                              PsiElement(identifier)('charAt')
                            ArgumentList
                              PsiElement(()('(')
                              IntegerLiteral
                                PsiElement(integer)('0')
                              PsiElement())(')')
                          PsiWhiteSpace(' ')
                          ReferenceExpression: <=
                            PsiElement(identifier)('<=')
                          PsiWhiteSpace(' ')
                          CharLiteral
                            PsiElement(Character)(''9'')
                      PsiElement())(')')
                      PsiWhiteSpace('\n        ')
                      MethodCall
                        ReferenceExpression: NUM
                          PsiElement(identifier)('NUM')
                        ArgumentList
                          PsiElement(()('(')
                          ReferenceExpression: token.toInt
                            ReferenceExpression: token
                              PsiElement(identifier)('token')
                            PsiElement(.)('.')
                            PsiElement(identifier)('toInt')
                          PsiElement())(')')
                      PsiWhiteSpace('\n      ')
                      PsiElement(else)('else')
                      PsiWhiteSpace(' ')
                      IfStatement
                        PsiElement(if)('if')
                        PsiWhiteSpace(' ')
                        PsiElement(()('(')
                        InfixExpression
                          InfixExpression
                            MethodCall
                              ReferenceExpression: token.charAt
                                ReferenceExpression: token
                                  PsiElement(identifier)('token')
                                PsiElement(.)('.')
                                PsiElement(identifier)('charAt')
                              ArgumentList
                                PsiElement(()('(')
                                IntegerLiteral
                                  PsiElement(integer)('0')
                                PsiElement())(')')
                            PsiWhiteSpace(' ')
                            ReferenceExpression: ==
                              PsiElement(identifier)('==')
                            PsiWhiteSpace(' ')
                            CharLiteral
                              PsiElement(Character)(''\"'')
                          PsiWhiteSpace(' ')
                          ReferenceExpression: &&
                            PsiElement(identifier)('&&')
                          PsiWhiteSpace(' ')
                          InfixExpression
                            MethodCall
                              ReferenceExpression: token.charAt
                                ReferenceExpression: token
                                  PsiElement(identifier)('token')
                                PsiElement(.)('.')
                                PsiElement(identifier)('charAt')
                              ArgumentList
                                PsiElement(()('(')
                                InfixExpression
                                  MethodCall
                                    ReferenceExpression: token.length
                                      ReferenceExpression: token
                                        PsiElement(identifier)('token')
                                      PsiElement(.)('.')
                                      PsiElement(identifier)('length')
                                    ArgumentList
                                      PsiElement(()('(')
                                      PsiElement())(')')
                                  ReferenceExpression: -
                                    PsiElement(identifier)('-')
                                  IntegerLiteral
                                    PsiElement(integer)('1')
                                PsiElement())(')')
                            ReferenceExpression: ==
                              PsiElement(identifier)('==')
                            CharLiteral
                              PsiElement(Character)(''\"'')
                        PsiElement())(')')
                        PsiWhiteSpace('\n        ')
                        MethodCall
                          ReferenceExpression: STR
                            PsiElement(identifier)('STR')
                          ArgumentList
                            PsiElement(()('(')
                            MethodCall
                              ReferenceExpression: token.substring
                                ReferenceExpression: token
                                  PsiElement(identifier)('token')
                                PsiElement(.)('.')
                                PsiElement(identifier)('substring')
                              ArgumentList
                                PsiElement(()('(')
                                IntegerLiteral
                                  PsiElement(integer)('1')
                                PsiElement(,)(',')
                                InfixExpression
                                  MethodCall
                                    ReferenceExpression: token.length
                                      ReferenceExpression: token
                                        PsiElement(identifier)('token')
                                      PsiElement(.)('.')
                                      PsiElement(identifier)('length')
                                    ArgumentList
                                      PsiElement(()('(')
                                      PsiElement())(')')
                                  PsiWhiteSpace(' ')
                                  ReferenceExpression: -
                                    PsiElement(identifier)('-')
                                  PsiWhiteSpace(' ')
                                  IntegerLiteral
                                    PsiElement(integer)('1')
                                PsiElement())(')')
                            PsiElement())(')')
                        PsiWhiteSpace('\n      ')
                        PsiElement(else)('else')
                        PsiWhiteSpace(' ')
                        MethodCall
                          ReferenceExpression: SYM
                            PsiElement(identifier)('SYM')
                          ArgumentList
                            PsiElement(()('(')
                            ReferenceExpression: token
                              PsiElement(identifier)('token')
                            PsiElement())(')')
                PsiWhiteSpace('\n    ')
                PsiElement(})('}')
            PsiWhiteSpace('\n    ')
            ScFunctionDefinition: parseList
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(def)('def')
              PsiWhiteSpace(' ')
              PsiElement(identifier)('parseList')
              Parameters
                <empty list>
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              SimpleType: Data
                CodeReferenceElement: Data
                  PsiElement(identifier)('Data')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              BlockExpression
                PsiElement({)('{')
                PsiWhiteSpace('\n      ')
                ScPatternDefinition: token
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(val)('val')
                  PsiWhiteSpace(' ')
                  ListOfPatterns
                    ReferencePattern: token
                      PsiElement(identifier)('token')
                  PsiWhiteSpace(' ')
                  PsiElement(=)('=')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: it.next
                    ReferenceExpression: it
                      PsiElement(identifier)('it')
                    PsiElement(.)('.')
                    PsiElement(identifier)('next')
                PsiElement(;)(';')
                PsiWhiteSpace('\n      ')
                IfStatement
                  PsiElement(if)('if')
                  PsiWhiteSpace(' ')
                  PsiElement(()('(')
                  InfixExpression
                    ReferenceExpression: token
                      PsiElement(identifier)('token')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: ==
                      PsiElement(identifier)('==')
                    PsiWhiteSpace(' ')
                    StringLiteral
                      PsiElement(string content)('")"')
                  PsiElement())(')')
                  PsiWhiteSpace(' ')
                  MethodCall
                    ReferenceExpression: NIL
                      PsiElement(identifier)('NIL')
                    ArgumentList
                      PsiElement(()('(')
                      PsiElement())(')')
                  PsiWhiteSpace(' ')
                  PsiElement(else)('else')
                  PsiWhiteSpace(' ')
                  MethodCall
                    ReferenceExpression: CONS
                      PsiElement(identifier)('CONS')
                    ArgumentList
                      PsiElement(()('(')
                      MethodCall
                        ReferenceExpression: parse
                          PsiElement(identifier)('parse')
                        ArgumentList
                          PsiElement(()('(')
                          ReferenceExpression: token
                            PsiElement(identifier)('token')
                          PsiElement())(')')
                      PsiElement(,)(',')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: parseList
                        PsiElement(identifier)('parseList')
                      PsiElement())(')')
                PsiWhiteSpace('\n    ')
                PsiElement(})('}')
            PsiWhiteSpace('\n    ')
            MethodCall
              ReferenceExpression: parse
                PsiElement(identifier)('parse')
              ArgumentList
                PsiElement(()('(')
                ReferenceExpression: it.next
                  ReferenceExpression: it
                    PsiElement(identifier)('it')
                  PsiElement(.)('.')
                  PsiElement(identifier)('next')
                PsiElement())(')')
            PsiWhiteSpace('\n  ')
            PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: lisp2string
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('lisp2string')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: d
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('d')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Data
                    CodeReferenceElement: Data
                      PsiElement(identifier)('Data')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: String
            CodeReferenceElement: String
              PsiElement(identifier)('String')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: d.toString
              ReferenceExpression: d
                PsiElement(identifier)('d')
              PsiElement(.)('.')
              PsiElement(identifier)('toString')
            ArgumentList
              PsiElement(()('(')
              PsiElement())(')')
        PsiElement(;)(';')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  PsiComment(comment)('//############################################################################')
  PsiWhiteSpace('\n')
  PsiComment(comment)('// Lisp Implementation Using Any')
  PsiWhiteSpace('\n\n')
  ScObject: LispAny
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('LispAny')
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          SimpleType: Lisp
            CodeReferenceElement: Lisp
              PsiElement(identifier)('Lisp')
      PsiWhiteSpace(' ')
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n\n  ')
        ScImportStatement
          PsiElement(import)('import')
          PsiWhiteSpace(' ')
          ImportExpression
            CodeReferenceElement: List
              PsiElement(identifier)('List')
            PsiElement(.)('.')
            PsiElement(_)('_')
        PsiElement(;)(';')
        PsiWhiteSpace('\n\n  ')
        ScTypeAliasDefinition: Data
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Data')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          SimpleType: Any
            CodeReferenceElement: Any
              PsiElement(identifier)('Any')
        PsiElement(;)(';')
        PsiWhiteSpace('\n\n  ')
        ScClass: Lambda
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(case)('case')
          PsiWhiteSpace(' ')
          PsiElement(class)('class')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Lambda')
          PrimaryConstructor
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            Parameters
              ParametersClause
                PsiElement(()('(')
                ClassParameter: f
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(identifier)('f')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    FunctionalType: List[Data] => Data
                      ParametrizedType: List[Data]
                        SimpleType: List
                          CodeReferenceElement: List
                            PsiElement(identifier)('List')
                        TypeArgumentsList
                          PsiElement([)('[')
                          SimpleType: Data
                            CodeReferenceElement: Data
                              PsiElement(identifier)('Data')
                          PsiElement(])(']')
                      PsiWhiteSpace(' ')
                      PsiElement(=>)('=>')
                      PsiWhiteSpace(' ')
                      SimpleType: Data
                        CodeReferenceElement: Data
                          PsiElement(identifier)('Data')
                PsiElement())(')')
          ExtendsBlock
            <empty list>
        PsiElement(;)(';')
        PsiWhiteSpace('\n\n  ')
        ScVariableDefinition: curexp
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(var)('var')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: curexp
              PsiElement(identifier)('curexp')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Data
            CodeReferenceElement: Data
              PsiElement(identifier)('Data')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          NullLiteral
            PsiElement(null)('null')
        PsiElement(;)(';')
        PsiWhiteSpace('\n  ')
        ScVariableDefinition: trace
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(var)('var')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: trace
              PsiElement(identifier)('trace')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Boolean
            CodeReferenceElement: Boolean
              PsiElement(identifier)('Boolean')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          BooleanLiteral
            PsiElement(false)('false')
        PsiElement(;)(';')
        PsiWhiteSpace('\n  ')
        ScVariableDefinition: indent
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(var)('var')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: indent
              PsiElement(identifier)('indent')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Int
            CodeReferenceElement: Int
              PsiElement(identifier)('Int')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          IntegerLiteral
            PsiElement(integer)('0')
        PsiElement(;)(';')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: lispError
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('lispError')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: a
              PsiElement(identifier)('a')
            PsiElement(])(']')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: msg
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('msg')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: String
                    CodeReferenceElement: String
                      PsiElement(identifier)('String')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: a
            CodeReferenceElement: a
              PsiElement(identifier)('a')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          BlockExpression
            PsiWhiteSpace('\n    ')
            MethodCall
              ReferenceExpression: sys.error
                ReferenceExpression: sys
                  PsiElement(identifier)('sys')
                PsiElement(.)('.')
                PsiElement(identifier)('error')
              ArgumentList
                PsiElement(()('(')
                InfixExpression
                  InfixExpression
                    InfixExpression
                      StringLiteral
                        PsiElement(string content)('"error: "')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: +
                        PsiElement(identifier)('+')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: msg
                        PsiElement(identifier)('msg')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: +
                      PsiElement(identifier)('+')
                    PsiWhiteSpace(' ')
                    StringLiteral
                      PsiElement(string content)('"\n"')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: +
                    PsiElement(identifier)('+')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: curexp
                    PsiElement(identifier)('curexp')
                PsiElement())(')')
            PsiElement(;)(';')
        PsiWhiteSpace('\n\n  ')
        ScTrait: Environment
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(trait)('trait')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Environment')
          PsiWhiteSpace(' ')
          ExtendsBlock
            ScTemplateBody
              PsiElement({)('{')
              PsiWhiteSpace('\n    ')
              ScFunctionDeclaration: lookup
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(def)('def')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('lookup')
                Parameters
                  ParametersClause
                    PsiElement(()('(')
                    Parameter: n
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(identifier)('n')
                      PsiElement(:)(':')
                      PsiWhiteSpace(' ')
                      ParameterType
                        SimpleType: String
                          CodeReferenceElement: String
                            PsiElement(identifier)('String')
                    PsiElement())(')')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                SimpleType: Data
                  CodeReferenceElement: Data
                    PsiElement(identifier)('Data')
              PsiElement(;)(';')
              PsiWhiteSpace('\n    ')
              ScFunctionDefinition: extendRec
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(def)('def')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('extendRec')
                Parameters
                  ParametersClause
                    PsiElement(()('(')
                    Parameter: name
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(identifier)('name')
                      PsiElement(:)(':')
                      PsiWhiteSpace(' ')
                      ParameterType
                        SimpleType: String
                          CodeReferenceElement: String
                            PsiElement(identifier)('String')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    Parameter: expr
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(identifier)('expr')
                      PsiElement(:)(':')
                      PsiWhiteSpace(' ')
                      ParameterType
                        FunctionalType: Environment => Data
                          SimpleType: Environment
                            CodeReferenceElement: Environment
                              PsiElement(identifier)('Environment')
                          PsiWhiteSpace(' ')
                          PsiElement(=>)('=>')
                          PsiWhiteSpace(' ')
                          SimpleType: Data
                            CodeReferenceElement: Data
                              PsiElement(identifier)('Data')
                    PsiElement())(')')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace('\n      ')
                ScNewTemplateDefinition: <anonymous>
                  PsiElement(new)('new')
                  PsiWhiteSpace(' ')
                  ExtendsBlock
                    TemplateParents
                      ConstructorInvocation
                        SimpleType: Environment
                          CodeReferenceElement: Environment
                            PsiElement(identifier)('Environment')
                    PsiWhiteSpace(' ')
                    ScTemplateBody
                      PsiElement({)('{')
                      PsiWhiteSpace('\n        ')
                      ScFunctionDefinition: lookup
                        AnnotationsList
                          <empty list>
                        Modifiers
                          <empty list>
                        PsiElement(def)('def')
                        PsiWhiteSpace(' ')
                        PsiElement(identifier)('lookup')
                        Parameters
                          ParametersClause
                            PsiElement(()('(')
                            Parameter: n
                              AnnotationsList
                                <empty list>
                              Modifiers
                                <empty list>
                              PsiElement(identifier)('n')
                              PsiElement(:)(':')
                              PsiWhiteSpace(' ')
                              ParameterType
                                SimpleType: String
                                  CodeReferenceElement: String
                                    PsiElement(identifier)('String')
                            PsiElement())(')')
                        PsiElement(:)(':')
                        PsiWhiteSpace(' ')
                        SimpleType: Data
                          CodeReferenceElement: Data
                            PsiElement(identifier)('Data')
                        PsiWhiteSpace(' ')
                        PsiElement(=)('=')
                        BlockExpression
                          PsiWhiteSpace('\n          ')
                          IfStatement
                            PsiElement(if)('if')
                            PsiWhiteSpace(' ')
                            PsiElement(()('(')
                            InfixExpression
                              ReferenceExpression: n
                                PsiElement(identifier)('n')
                              PsiWhiteSpace(' ')
                              ReferenceExpression: ==
                                PsiElement(identifier)('==')
                              PsiWhiteSpace(' ')
                              ReferenceExpression: name
                                PsiElement(identifier)('name')
                            PsiElement())(')')
                            PsiWhiteSpace(' ')
                            MethodCall
                              ReferenceExpression: expr
                                PsiElement(identifier)('expr')
                              ArgumentList
                                PsiElement(()('(')
                                ThisReference
                                  PsiElement(this)('this')
                                PsiElement())(')')
                            PsiWhiteSpace(' ')
                            PsiElement(else)('else')
                            PsiWhiteSpace(' ')
                            MethodCall
                              ReferenceExpression: Environment.this.lookup
                                ThisReference
                                  CodeReferenceElement: Environment
                                    PsiElement(identifier)('Environment')
                                  PsiElement(.)('.')
                                  PsiElement(this)('this')
                                PsiElement(.)('.')
                                PsiElement(identifier)('lookup')
                              ArgumentList
                                PsiElement(()('(')
                                ReferenceExpression: n
                                  PsiElement(identifier)('n')
                                PsiElement())(')')
                          PsiElement(;)(';')
                      PsiWhiteSpace('\n      ')
                      PsiElement(})('}')
              PsiWhiteSpace('\n    ')
              ScFunctionDefinition: extend
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(def)('def')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('extend')
                Parameters
                  ParametersClause
                    PsiElement(()('(')
                    Parameter: name
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(identifier)('name')
                      PsiElement(:)(':')
                      PsiWhiteSpace(' ')
                      ParameterType
                        SimpleType: String
                          CodeReferenceElement: String
                            PsiElement(identifier)('String')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    Parameter: v
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(identifier)('v')
                      PsiElement(:)(':')
                      PsiWhiteSpace(' ')
                      ParameterType
                        SimpleType: Data
                          CodeReferenceElement: Data
                            PsiElement(identifier)('Data')
                    PsiElement())(')')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                MethodCall
                  ReferenceExpression: extendRec
                    PsiElement(identifier)('extendRec')
                  ArgumentList
                    PsiElement(()('(')
                    ReferenceExpression: name
                      PsiElement(identifier)('name')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    ExpressionInParenthesis
                      PsiElement(()('(')
                      FunctionExpression
                        Parameters
                          ParametersClause
                            Parameter: env1
                              PsiElement(identifier)('env1')
                        PsiWhiteSpace(' ')
                        PsiElement(=>)('=>')
                        PsiWhiteSpace(' ')
                        ReferenceExpression: v
                          PsiElement(identifier)('v')
                      PsiElement())(')')
                    PsiElement())(')')
              PsiElement(;)(';')
              PsiWhiteSpace('\n  ')
              PsiElement(})('}')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: EmptyEnvironment
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: EmptyEnvironment
              PsiElement(identifier)('EmptyEnvironment')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ScNewTemplateDefinition: <anonymous>
            PsiElement(new)('new')
            PsiWhiteSpace(' ')
            ExtendsBlock
              TemplateParents
                ConstructorInvocation
                  SimpleType: Environment
                    CodeReferenceElement: Environment
                      PsiElement(identifier)('Environment')
              PsiWhiteSpace(' ')
              ScTemplateBody
                PsiElement({)('{')
                PsiWhiteSpace('\n    ')
                ScFunctionDefinition: lookup
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(def)('def')
                  PsiWhiteSpace(' ')
                  PsiElement(identifier)('lookup')
                  Parameters
                    ParametersClause
                      PsiElement(()('(')
                      Parameter: n
                        AnnotationsList
                          <empty list>
                        Modifiers
                          <empty list>
                        PsiElement(identifier)('n')
                        PsiElement(:)(':')
                        PsiWhiteSpace(' ')
                        ParameterType
                          SimpleType: String
                            CodeReferenceElement: String
                              PsiElement(identifier)('String')
                      PsiElement())(')')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  SimpleType: Data
                    CodeReferenceElement: Data
                      PsiElement(identifier)('Data')
                  PsiWhiteSpace(' ')
                  PsiElement(=)('=')
                  PsiWhiteSpace(' ')
                  MethodCall
                    ReferenceExpression: lispError
                      PsiElement(identifier)('lispError')
                    ArgumentList
                      PsiElement(()('(')
                      InfixExpression
                        StringLiteral
                          PsiElement(string content)('"undefined: "')
                        PsiWhiteSpace(' ')
                        ReferenceExpression: +
                          PsiElement(identifier)('+')
                        PsiWhiteSpace(' ')
                        ReferenceExpression: n
                          PsiElement(identifier)('n')
                      PsiElement())(')')
                PsiElement(;)(';')
                PsiWhiteSpace('\n  ')
                PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: asList
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('asList')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: x
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Data
                    CodeReferenceElement: Data
                      PsiElement(identifier)('Data')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: List[Data]
            SimpleType: List
              CodeReferenceElement: List
                PsiElement(identifier)('List')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: Data
                CodeReferenceElement: Data
                  PsiElement(identifier)('Data')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MatchStatement
            ReferenceExpression: x
              PsiElement(identifier)('x')
            PsiWhiteSpace(' ')
            PsiElement(match)('match')
            PsiWhiteSpace(' ')
            PsiElement({)('{')
            PsiWhiteSpace('\n    ')
            CaseClauses
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                Scala3 TypedPattern
                  ReferencePattern: y
                    PsiElement(identifier)('y')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  TypePattern
                    ParametrizedType: List[_]
                      SimpleType: List
                        CodeReferenceElement: List
                          PsiElement(identifier)('List')
                      TypeArgumentsList
                        PsiElement([)('[')
                        TypeVariable: _
                          PsiElement(_)('_')
                        PsiElement(])(']')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                BlockOfExpressions
                  ReferenceExpression: y
                    PsiElement(identifier)('y')
              PsiWhiteSpace('\n    ')
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                WildcardPattern
                  PsiElement(_)('_')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                BlockOfExpressions
                  MethodCall
                    ReferenceExpression: lispError
                      PsiElement(identifier)('lispError')
                    ArgumentList
                      PsiElement(()('(')
                      InfixExpression
                        StringLiteral
                          PsiElement(string content)('"malformed list: "')
                        PsiWhiteSpace(' ')
                        ReferenceExpression: +
                          PsiElement(identifier)('+')
                        PsiWhiteSpace(' ')
                        ReferenceExpression: x
                          PsiElement(identifier)('x')
                      PsiElement())(')')
            PsiWhiteSpace('\n  ')
            PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: asInt
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('asInt')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: x
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Data
                    CodeReferenceElement: Data
                      PsiElement(identifier)('Data')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Int
            CodeReferenceElement: Int
              PsiElement(identifier)('Int')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MatchStatement
            ReferenceExpression: x
              PsiElement(identifier)('x')
            PsiWhiteSpace(' ')
            PsiElement(match)('match')
            PsiWhiteSpace(' ')
            PsiElement({)('{')
            PsiWhiteSpace('\n    ')
            CaseClauses
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                Scala3 TypedPattern
                  ReferencePattern: y
                    PsiElement(identifier)('y')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  TypePattern
                    SimpleType: Int
                      CodeReferenceElement: Int
                        PsiElement(identifier)('Int')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                BlockOfExpressions
                  ReferenceExpression: y
                    PsiElement(identifier)('y')
              PsiWhiteSpace('\n    ')
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                WildcardPattern
                  PsiElement(_)('_')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                BlockOfExpressions
                  MethodCall
                    ReferenceExpression: lispError
                      PsiElement(identifier)('lispError')
                    ArgumentList
                      PsiElement(()('(')
                      InfixExpression
                        StringLiteral
                          PsiElement(string content)('"not an integer: "')
                        PsiWhiteSpace(' ')
                        ReferenceExpression: +
                          PsiElement(identifier)('+')
                        PsiWhiteSpace(' ')
                        ReferenceExpression: x
                          PsiElement(identifier)('x')
                      PsiElement())(')')
            PsiWhiteSpace('\n  ')
            PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: asString
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('asString')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: x
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Data
                    CodeReferenceElement: Data
                      PsiElement(identifier)('Data')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: String
            CodeReferenceElement: String
              PsiElement(identifier)('String')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MatchStatement
            ReferenceExpression: x
              PsiElement(identifier)('x')
            PsiWhiteSpace(' ')
            PsiElement(match)('match')
            PsiWhiteSpace(' ')
            PsiElement({)('{')
            PsiWhiteSpace('\n    ')
            CaseClauses
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                Scala3 TypedPattern
                  ReferencePattern: y
                    PsiElement(identifier)('y')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  TypePattern
                    SimpleType: String
                      CodeReferenceElement: String
                        PsiElement(identifier)('String')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                BlockOfExpressions
                  ReferenceExpression: y
                    PsiElement(identifier)('y')
              PsiWhiteSpace('\n    ')
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                WildcardPattern
                  PsiElement(_)('_')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                BlockOfExpressions
                  MethodCall
                    ReferenceExpression: lispError
                      PsiElement(identifier)('lispError')
                    ArgumentList
                      PsiElement(()('(')
                      InfixExpression
                        StringLiteral
                          PsiElement(string content)('"not a string: "')
                        PsiWhiteSpace(' ')
                        ReferenceExpression: +
                          PsiElement(identifier)('+')
                        PsiWhiteSpace(' ')
                        ReferenceExpression: x
                          PsiElement(identifier)('x')
                      PsiElement())(')')
            PsiWhiteSpace('\n  ')
            PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: asBoolean
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('asBoolean')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: x
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Data
                    CodeReferenceElement: Data
                      PsiElement(identifier)('Data')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Boolean
            CodeReferenceElement: Boolean
              PsiElement(identifier)('Boolean')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          InfixExpression
            ReferenceExpression: x
              PsiElement(identifier)('x')
            PsiWhiteSpace(' ')
            ReferenceExpression: !=
              PsiElement(identifier)('!=')
            PsiWhiteSpace(' ')
            IntegerLiteral
              PsiElement(integer)('0')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: normalize
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('normalize')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: x
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Data
                    CodeReferenceElement: Data
                      PsiElement(identifier)('Data')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Data
            CodeReferenceElement: Data
              PsiElement(identifier)('Data')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MatchStatement
            ReferenceExpression: x
              PsiElement(identifier)('x')
            PsiWhiteSpace(' ')
            PsiElement(match)('match')
            PsiWhiteSpace(' ')
            PsiElement({)('{')
            PsiWhiteSpace('\n    ')
            CaseClauses
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                InfixPattern
                  ConstructorPattern
                    CodeReferenceElement: Symbol
                      PsiElement(identifier)('Symbol')
                    Pattern Argument List
                      PsiElement(()('(')
                      LiteralPattern
                        StringLiteral
                          PsiElement(string content)('"and"')
                      PsiElement())(')')
                  PsiWhiteSpace(' ')
                  CodeReferenceElement: ::
                    PsiElement(identifier)('::')
                  PsiWhiteSpace(' ')
                  InfixPattern
                    ReferencePattern: x
                      PsiElement(identifier)('x')
                    PsiWhiteSpace(' ')
                    CodeReferenceElement: ::
                      PsiElement(identifier)('::')
                    PsiWhiteSpace(' ')
                    InfixPattern
                      ReferencePattern: y
                        PsiElement(identifier)('y')
                      PsiWhiteSpace(' ')
                      CodeReferenceElement: ::
                        PsiElement(identifier)('::')
                      PsiWhiteSpace(' ')
                      StableElementPattern
                        ReferenceExpression: Nil
                          PsiElement(identifier)('Nil')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace('\n      ')
                BlockOfExpressions
                  MethodCall
                    ReferenceExpression: normalize
                      PsiElement(identifier)('normalize')
                    ArgumentList
                      PsiElement(()('(')
                      InfixExpression
                        MethodCall
                          ReferenceExpression: Symbol
                            PsiElement(identifier)('Symbol')
                          ArgumentList
                            PsiElement(()('(')
                            StringLiteral
                              PsiElement(string content)('"if"')
                            PsiElement())(')')
                        PsiWhiteSpace(' ')
                        ReferenceExpression: ::
                          PsiElement(identifier)('::')
                        PsiWhiteSpace(' ')
                        InfixExpression
                          ReferenceExpression: x
                            PsiElement(identifier)('x')
                          PsiWhiteSpace(' ')
                          ReferenceExpression: ::
                            PsiElement(identifier)('::')
                          PsiWhiteSpace(' ')
                          InfixExpression
                            ReferenceExpression: y
                              PsiElement(identifier)('y')
                            PsiWhiteSpace(' ')
                            ReferenceExpression: ::
                              PsiElement(identifier)('::')
                            PsiWhiteSpace(' ')
                            InfixExpression
                              IntegerLiteral
                                PsiElement(integer)('0')
                              PsiWhiteSpace(' ')
                              ReferenceExpression: ::
                                PsiElement(identifier)('::')
                              PsiWhiteSpace(' ')
                              ReferenceExpression: Nil
                                PsiElement(identifier)('Nil')
                      PsiElement())(')')
              PsiWhiteSpace('\n    ')
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                InfixPattern
                  ConstructorPattern
                    CodeReferenceElement: Symbol
                      PsiElement(identifier)('Symbol')
                    Pattern Argument List
                      PsiElement(()('(')
                      LiteralPattern
                        StringLiteral
                          PsiElement(string content)('"or"')
                      PsiElement())(')')
                  PsiWhiteSpace(' ')
                  CodeReferenceElement: ::
                    PsiElement(identifier)('::')
                  PsiWhiteSpace(' ')
                  InfixPattern
                    ReferencePattern: x
                      PsiElement(identifier)('x')
                    PsiWhiteSpace(' ')
                    CodeReferenceElement: ::
                      PsiElement(identifier)('::')
                    PsiWhiteSpace(' ')
                    InfixPattern
                      ReferencePattern: y
                        PsiElement(identifier)('y')
                      PsiWhiteSpace(' ')
                      CodeReferenceElement: ::
                        PsiElement(identifier)('::')
                      PsiWhiteSpace(' ')
                      StableElementPattern
                        ReferenceExpression: Nil
                          PsiElement(identifier)('Nil')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace('\n      ')
                BlockOfExpressions
                  MethodCall
                    ReferenceExpression: normalize
                      PsiElement(identifier)('normalize')
                    ArgumentList
                      PsiElement(()('(')
                      InfixExpression
                        MethodCall
                          ReferenceExpression: Symbol
                            PsiElement(identifier)('Symbol')
                          ArgumentList
                            PsiElement(()('(')
                            StringLiteral
                              PsiElement(string content)('"if"')
                            PsiElement())(')')
                        PsiWhiteSpace(' ')
                        ReferenceExpression: ::
                          PsiElement(identifier)('::')
                        PsiWhiteSpace(' ')
                        InfixExpression
                          ReferenceExpression: x
                            PsiElement(identifier)('x')
                          PsiWhiteSpace(' ')
                          ReferenceExpression: ::
                            PsiElement(identifier)('::')
                          PsiWhiteSpace(' ')
                          InfixExpression
                            IntegerLiteral
                              PsiElement(integer)('1')
                            PsiWhiteSpace(' ')
                            ReferenceExpression: ::
                              PsiElement(identifier)('::')
                            PsiWhiteSpace(' ')
                            InfixExpression
                              ReferenceExpression: y
                                PsiElement(identifier)('y')
                              PsiWhiteSpace(' ')
                              ReferenceExpression: ::
                                PsiElement(identifier)('::')
                              PsiWhiteSpace(' ')
                              ReferenceExpression: Nil
                                PsiElement(identifier)('Nil')
                      PsiElement())(')')
              PsiWhiteSpace('\n    ')
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                InfixPattern
                  ConstructorPattern
                    CodeReferenceElement: Symbol
                      PsiElement(identifier)('Symbol')
                    Pattern Argument List
                      PsiElement(()('(')
                      LiteralPattern
                        StringLiteral
                          PsiElement(string content)('"def"')
                      PsiElement())(')')
                  PsiWhiteSpace(' ')
                  CodeReferenceElement: ::
                    PsiElement(identifier)('::')
                  PsiWhiteSpace(' ')
                  InfixPattern
                    PatternInParenthesis
                      PsiElement(()('(')
                      InfixPattern
                        ReferencePattern: name
                          PsiElement(identifier)('name')
                        PsiWhiteSpace(' ')
                        CodeReferenceElement: ::
                          PsiElement(identifier)('::')
                        PsiWhiteSpace(' ')
                        ReferencePattern: args
                          PsiElement(identifier)('args')
                      PsiElement())(')')
                    PsiWhiteSpace(' ')
                    CodeReferenceElement: ::
                      PsiElement(identifier)('::')
                    PsiWhiteSpace(' ')
                    InfixPattern
                      ReferencePattern: body
                        PsiElement(identifier)('body')
                      PsiWhiteSpace(' ')
                      CodeReferenceElement: ::
                        PsiElement(identifier)('::')
                      PsiWhiteSpace(' ')
                      InfixPattern
                        ReferencePattern: expr
                          PsiElement(identifier)('expr')
                        PsiWhiteSpace(' ')
                        CodeReferenceElement: ::
                          PsiElement(identifier)('::')
                        PsiWhiteSpace(' ')
                        StableElementPattern
                          ReferenceExpression: Nil
                            PsiElement(identifier)('Nil')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace('\n      ')
                BlockOfExpressions
                  MethodCall
                    ReferenceExpression: normalize
                      PsiElement(identifier)('normalize')
                    ArgumentList
                      PsiElement(()('(')
                      InfixExpression
                        MethodCall
                          ReferenceExpression: Symbol
                            PsiElement(identifier)('Symbol')
                          ArgumentList
                            PsiElement(()('(')
                            StringLiteral
                              PsiElement(string content)('"def"')
                            PsiElement())(')')
                        PsiWhiteSpace(' ')
                        ReferenceExpression: ::
                          PsiElement(identifier)('::')
                        PsiWhiteSpace(' ')
                        InfixExpression
                          ReferenceExpression: name
                            PsiElement(identifier)('name')
                          PsiWhiteSpace(' ')
                          ReferenceExpression: ::
                            PsiElement(identifier)('::')
                          PsiWhiteSpace(' ')
                          InfixExpression
                            ExpressionInParenthesis
                              PsiElement(()('(')
                              InfixExpression
                                MethodCall
                                  ReferenceExpression: Symbol
                                    PsiElement(identifier)('Symbol')
                                  ArgumentList
                                    PsiElement(()('(')
                                    StringLiteral
                                      PsiElement(string content)('"lambda"')
                                    PsiElement())(')')
                                PsiWhiteSpace(' ')
                                ReferenceExpression: ::
                                  PsiElement(identifier)('::')
                                PsiWhiteSpace(' ')
                                InfixExpression
                                  ReferenceExpression: args
                                    PsiElement(identifier)('args')
                                  PsiWhiteSpace(' ')
                                  ReferenceExpression: ::
                                    PsiElement(identifier)('::')
                                  PsiWhiteSpace(' ')
                                  InfixExpression
                                    ReferenceExpression: body
                                      PsiElement(identifier)('body')
                                    PsiWhiteSpace(' ')
                                    ReferenceExpression: ::
                                      PsiElement(identifier)('::')
                                    PsiWhiteSpace(' ')
                                    ReferenceExpression: Nil
                                      PsiElement(identifier)('Nil')
                              PsiElement())(')')
                            PsiWhiteSpace(' ')
                            ReferenceExpression: ::
                              PsiElement(identifier)('::')
                            PsiWhiteSpace(' ')
                            InfixExpression
                              ReferenceExpression: expr
                                PsiElement(identifier)('expr')
                              PsiWhiteSpace(' ')
                              ReferenceExpression: ::
                                PsiElement(identifier)('::')
                              PsiWhiteSpace(' ')
                              ReferenceExpression: Nil
                                PsiElement(identifier)('Nil')
                      PsiElement())(')')
              PsiWhiteSpace('\n    ')
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                InfixPattern
                  ConstructorPattern
                    CodeReferenceElement: Symbol
                      PsiElement(identifier)('Symbol')
                    Pattern Argument List
                      PsiElement(()('(')
                      LiteralPattern
                        StringLiteral
                          PsiElement(string content)('"cond"')
                      PsiElement())(')')
                  PsiWhiteSpace(' ')
                  CodeReferenceElement: ::
                    PsiElement(identifier)('::')
                  PsiWhiteSpace(' ')
                  InfixPattern
                    PatternInParenthesis
                      PsiElement(()('(')
                      InfixPattern
                        ConstructorPattern
                          CodeReferenceElement: Symbol
                            PsiElement(identifier)('Symbol')
                          Pattern Argument List
                            PsiElement(()('(')
                            LiteralPattern
                              StringLiteral
                                PsiElement(string content)('"else"')
                            PsiElement())(')')
                        PsiWhiteSpace(' ')
                        CodeReferenceElement: ::
                          PsiElement(identifier)('::')
                        PsiWhiteSpace(' ')
                        InfixPattern
                          ReferencePattern: expr
                            PsiElement(identifier)('expr')
                          PsiWhiteSpace(' ')
                          CodeReferenceElement: ::
                            PsiElement(identifier)('::')
                          PsiWhiteSpace(' ')
                          StableElementPattern
                            ReferenceExpression: Nil
                              PsiElement(identifier)('Nil')
                      PsiElement())(')')
                    PsiWhiteSpace(' ')
                    CodeReferenceElement: ::
                      PsiElement(identifier)('::')
                    PsiWhiteSpace(' ')
                    ReferencePattern: rest
                      PsiElement(identifier)('rest')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace('\n        ')
                BlockOfExpressions
                  MethodCall
                    ReferenceExpression: normalize
                      PsiElement(identifier)('normalize')
                    ArgumentList
                      PsiElement(()('(')
                      ReferenceExpression: expr
                        PsiElement(identifier)('expr')
                      PsiElement())(')')
                  PsiElement(;)(';')
              PsiWhiteSpace('\n    ')
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                InfixPattern
                  ConstructorPattern
                    CodeReferenceElement: Symbol
                      PsiElement(identifier)('Symbol')
                    Pattern Argument List
                      PsiElement(()('(')
                      LiteralPattern
                        StringLiteral
                          PsiElement(string content)('"cond"')
                      PsiElement())(')')
                  PsiWhiteSpace(' ')
                  CodeReferenceElement: ::
                    PsiElement(identifier)('::')
                  PsiWhiteSpace(' ')
                  InfixPattern
                    PatternInParenthesis
                      PsiElement(()('(')
                      InfixPattern
                        ReferencePattern: test
                          PsiElement(identifier)('test')
                        PsiWhiteSpace(' ')
                        CodeReferenceElement: ::
                          PsiElement(identifier)('::')
                        PsiWhiteSpace(' ')
                        InfixPattern
                          ReferencePattern: expr
                            PsiElement(identifier)('expr')
                          PsiWhiteSpace(' ')
                          CodeReferenceElement: ::
                            PsiElement(identifier)('::')
                          PsiWhiteSpace(' ')
                          StableElementPattern
                            ReferenceExpression: Nil
                              PsiElement(identifier)('Nil')
                      PsiElement())(')')
                    PsiWhiteSpace(' ')
                    CodeReferenceElement: ::
                      PsiElement(identifier)('::')
                    PsiWhiteSpace(' ')
                    ReferencePattern: rest
                      PsiElement(identifier)('rest')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace('\n    ')
                BlockOfExpressions
                  MethodCall
                    ReferenceExpression: normalize
                      PsiElement(identifier)('normalize')
                    ArgumentList
                      PsiElement(()('(')
                      InfixExpression
                        MethodCall
                          ReferenceExpression: Symbol
                            PsiElement(identifier)('Symbol')
                          ArgumentList
                            PsiElement(()('(')
                            StringLiteral
                              PsiElement(string content)('"if"')
                            PsiElement())(')')
                        PsiWhiteSpace(' ')
                        ReferenceExpression: ::
                          PsiElement(identifier)('::')
                        PsiWhiteSpace(' ')
                        InfixExpression
                          ReferenceExpression: test
                            PsiElement(identifier)('test')
                          PsiWhiteSpace(' ')
                          ReferenceExpression: ::
                            PsiElement(identifier)('::')
                          PsiWhiteSpace(' ')
                          InfixExpression
                            ReferenceExpression: expr
                              PsiElement(identifier)('expr')
                            PsiWhiteSpace(' ')
                            ReferenceExpression: ::
                              PsiElement(identifier)('::')
                            PsiWhiteSpace(' ')
                            InfixExpression
                              ExpressionInParenthesis
                                PsiElement(()('(')
                                InfixExpression
                                  MethodCall
                                    ReferenceExpression: Symbol
                                      PsiElement(identifier)('Symbol')
                                    ArgumentList
                                      PsiElement(()('(')
                                      StringLiteral
                                        PsiElement(string content)('"cond"')
                                      PsiElement())(')')
                                  PsiWhiteSpace(' ')
                                  ReferenceExpression: ::
                                    PsiElement(identifier)('::')
                                  PsiWhiteSpace(' ')
                                  ReferenceExpression: rest
                                    PsiElement(identifier)('rest')
                                PsiElement())(')')
                              PsiWhiteSpace(' ')
                              ReferenceExpression: ::
                                PsiElement(identifier)('::')
                              PsiWhiteSpace(' ')
                              ReferenceExpression: Nil
                                PsiElement(identifier)('Nil')
                      PsiElement())(')')
              PsiWhiteSpace('\n    ')
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                InfixPattern
                  ConstructorPattern
                    CodeReferenceElement: Symbol
                      PsiElement(identifier)('Symbol')
                    Pattern Argument List
                      PsiElement(()('(')
                      LiteralPattern
                        StringLiteral
                          PsiElement(string content)('"cond"')
                      PsiElement())(')')
                  PsiWhiteSpace(' ')
                  CodeReferenceElement: ::
                    PsiElement(identifier)('::')
                  PsiWhiteSpace(' ')
                  InfixPattern
                    ConstructorPattern
                      CodeReferenceElement: Symbol
                        PsiElement(identifier)('Symbol')
                      Pattern Argument List
                        PsiElement(()('(')
                        LiteralPattern
                          StringLiteral
                            PsiElement(string content)('"else"')
                        PsiElement())(')')
                    PsiWhiteSpace(' ')
                    CodeReferenceElement: ::
                      PsiElement(identifier)('::')
                    PsiWhiteSpace(' ')
                    InfixPattern
                      ReferencePattern: expr
                        PsiElement(identifier)('expr')
                      PsiWhiteSpace(' ')
                      CodeReferenceElement: ::
                        PsiElement(identifier)('::')
                      PsiWhiteSpace(' ')
                      StableElementPattern
                        ReferenceExpression: Nil
                          PsiElement(identifier)('Nil')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace('\n      ')
                BlockOfExpressions
                  MethodCall
                    ReferenceExpression: normalize
                      PsiElement(identifier)('normalize')
                    ArgumentList
                      PsiElement(()('(')
                      ReferenceExpression: expr
                        PsiElement(identifier)('expr')
                      PsiElement())(')')
              PsiWhiteSpace('\n    ')
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                InfixPattern
                  ReferencePattern: h
                    PsiElement(identifier)('h')
                  PsiWhiteSpace(' ')
                  CodeReferenceElement: ::
                    PsiElement(identifier)('::')
                  PsiWhiteSpace(' ')
                  ReferencePattern: t
                    PsiElement(identifier)('t')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace('\n      ')
                BlockOfExpressions
                  InfixExpression
                    MethodCall
                      ReferenceExpression: normalize
                        PsiElement(identifier)('normalize')
                      ArgumentList
                        PsiElement(()('(')
                        ReferenceExpression: h
                          PsiElement(identifier)('h')
                        PsiElement())(')')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: ::
                      PsiElement(identifier)('::')
                    PsiWhiteSpace(' ')
                    MethodCall
                      ReferenceExpression: asList
                        PsiElement(identifier)('asList')
                      ArgumentList
                        PsiElement(()('(')
                        MethodCall
                          ReferenceExpression: normalize
                            PsiElement(identifier)('normalize')
                          ArgumentList
                            PsiElement(()('(')
                            ReferenceExpression: t
                              PsiElement(identifier)('t')
                            PsiElement())(')')
                        PsiElement())(')')
              PsiWhiteSpace('\n    ')
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                WildcardPattern
                  PsiElement(_)('_')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace('\n      ')
                BlockOfExpressions
                  ReferenceExpression: x
                    PsiElement(identifier)('x')
            PsiWhiteSpace('\n  ')
            PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: eval
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('eval')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: x
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Data
                    CodeReferenceElement: Data
                      PsiElement(identifier)('Data')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              Parameter: env
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('env')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Environment
                    CodeReferenceElement: Environment
                      PsiElement(identifier)('Environment')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Data
            CodeReferenceElement: Data
              PsiElement(identifier)('Data')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          BlockExpression
            PsiElement({)('{')
            PsiWhiteSpace('\n    ')
            ScPatternDefinition: prevexp
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              ListOfPatterns
                ReferencePattern: prevexp
                  PsiElement(identifier)('prevexp')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              ReferenceExpression: curexp
                PsiElement(identifier)('curexp')
            PsiElement(;)(';')
            PsiWhiteSpace('\n    ')
            AssignStatement
              ReferenceExpression: curexp
                PsiElement(identifier)('curexp')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              ReferenceExpression: x
                PsiElement(identifier)('x')
            PsiElement(;)(';')
            PsiWhiteSpace('\n    ')
            IfStatement
              PsiElement(if)('if')
              PsiWhiteSpace(' ')
              PsiElement(()('(')
              ReferenceExpression: trace
                PsiElement(identifier)('trace')
              PsiElement())(')')
              PsiWhiteSpace(' ')
              BlockExpression
                PsiElement({)('{')
                PsiWhiteSpace('\n      ')
                ForStatement
                  PsiElement(for)('for')
                  PsiWhiteSpace(' ')
                  PsiElement(()('(')
                  Enumerators
                    Generator
                      ReferencePattern: x
                        PsiElement(identifier)('x')
                      PsiWhiteSpace(' ')
                      PsiElement(<-)('<-')
                      PsiWhiteSpace(' ')
                      MethodCall
                        ReferenceExpression: range
                          PsiElement(identifier)('range')
                        ArgumentList
                          PsiElement(()('(')
                          IntegerLiteral
                            PsiElement(integer)('1')
                          PsiElement(,)(',')
                          PsiWhiteSpace(' ')
                          ReferenceExpression: indent
                            PsiElement(identifier)('indent')
                          PsiElement())(')')
                  PsiElement())(')')
                  PsiWhiteSpace(' ')
                  MethodCall
                    ReferenceExpression: Console.print
                      ReferenceExpression: Console
                        PsiElement(identifier)('Console')
                      PsiElement(.)('.')
                      PsiElement(identifier)('print')
                    ArgumentList
                      PsiElement(()('(')
                      StringLiteral
                        PsiElement(string content)('" "')
                      PsiElement())(')')
                PsiElement(;)(';')
                PsiWhiteSpace('\n      ')
                MethodCall
                  ReferenceExpression: Console.println
                    ReferenceExpression: Console
                      PsiElement(identifier)('Console')
                    PsiElement(.)('.')
                    PsiElement(identifier)('println')
                  ArgumentList
                    PsiElement(()('(')
                    InfixExpression
                      StringLiteral
                        PsiElement(string content)('"===> "')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: +
                        PsiElement(identifier)('+')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: x
                        PsiElement(identifier)('x')
                    PsiElement())(')')
                PsiElement(;)(';')
                PsiWhiteSpace('\n      ')
                InfixExpression
                  ReferenceExpression: indent
                    PsiElement(identifier)('indent')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: +=
                    PsiElement(identifier)('+=')
                  PsiWhiteSpace(' ')
                  IntegerLiteral
                    PsiElement(integer)('1')
                PsiElement(;)(';')
                PsiWhiteSpace('\n    ')
                PsiElement(})('}')
            PsiWhiteSpace('\n    ')
            ScPatternDefinition: result
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              ListOfPatterns
                ReferencePattern: result
                  PsiElement(identifier)('result')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              MethodCall
                ReferenceExpression: eval1
                  PsiElement(identifier)('eval1')
                ArgumentList
                  PsiElement(()('(')
                  ReferenceExpression: x
                    PsiElement(identifier)('x')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: env
                    PsiElement(identifier)('env')
                  PsiElement())(')')
            PsiElement(;)(';')
            PsiWhiteSpace('\n    ')
            IfStatement
              PsiElement(if)('if')
              PsiWhiteSpace(' ')
              PsiElement(()('(')
              ReferenceExpression: trace
                PsiElement(identifier)('trace')
              PsiElement())(')')
              PsiWhiteSpace(' ')
              BlockExpression
                PsiElement({)('{')
                PsiWhiteSpace('\n      ')
                InfixExpression
                  ReferenceExpression: indent
                    PsiElement(identifier)('indent')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: -=
                    PsiElement(identifier)('-=')
                  PsiWhiteSpace(' ')
                  IntegerLiteral
                    PsiElement(integer)('1')
                PsiElement(;)(';')
                PsiWhiteSpace('\n      ')
                ForStatement
                  PsiElement(for)('for')
                  PsiWhiteSpace(' ')
                  PsiElement(()('(')
                  Enumerators
                    Generator
                      ReferencePattern: x
                        PsiElement(identifier)('x')
                      PsiWhiteSpace(' ')
                      PsiElement(<-)('<-')
                      PsiWhiteSpace(' ')
                      MethodCall
                        ReferenceExpression: range
                          PsiElement(identifier)('range')
                        ArgumentList
                          PsiElement(()('(')
                          IntegerLiteral
                            PsiElement(integer)('1')
                          PsiElement(,)(',')
                          PsiWhiteSpace(' ')
                          ReferenceExpression: indent
                            PsiElement(identifier)('indent')
                          PsiElement())(')')
                  PsiElement())(')')
                  PsiWhiteSpace(' ')
                  MethodCall
                    ReferenceExpression: Console.print
                      ReferenceExpression: Console
                        PsiElement(identifier)('Console')
                      PsiElement(.)('.')
                      PsiElement(identifier)('print')
                    ArgumentList
                      PsiElement(()('(')
                      StringLiteral
                        PsiElement(string content)('" "')
                      PsiElement())(')')
                PsiElement(;)(';')
                PsiWhiteSpace('\n      ')
                MethodCall
                  ReferenceExpression: Console.println
                    ReferenceExpression: Console
                      PsiElement(identifier)('Console')
                    PsiElement(.)('.')
                    PsiElement(identifier)('println')
                  ArgumentList
                    PsiElement(()('(')
                    InfixExpression
                      StringLiteral
                        PsiElement(string content)('"<=== "')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: +
                        PsiElement(identifier)('+')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: result
                        PsiElement(identifier)('result')
                    PsiElement())(')')
                PsiElement(;)(';')
                PsiWhiteSpace('\n    ')
                PsiElement(})('}')
            PsiWhiteSpace('\n    ')
            AssignStatement
              ReferenceExpression: curexp
                PsiElement(identifier)('curexp')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              ReferenceExpression: prevexp
                PsiElement(identifier)('prevexp')
            PsiElement(;)(';')
            PsiWhiteSpace('\n    ')
            ReferenceExpression: result
              PsiElement(identifier)('result')
            PsiWhiteSpace('\n  ')
            PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: eval1
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('eval1')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: x
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Data
                    CodeReferenceElement: Data
                      PsiElement(identifier)('Data')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              Parameter: env
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('env')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Environment
                    CodeReferenceElement: Environment
                      PsiElement(identifier)('Environment')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Data
            CodeReferenceElement: Data
              PsiElement(identifier)('Data')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MatchStatement
            ReferenceExpression: x
              PsiElement(identifier)('x')
            PsiWhiteSpace(' ')
            PsiElement(match)('match')
            PsiWhiteSpace(' ')
            PsiElement({)('{')
            PsiWhiteSpace('\n    ')
            CaseClauses
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                ConstructorPattern
                  CodeReferenceElement: Symbol
                    PsiElement(identifier)('Symbol')
                  Pattern Argument List
                    PsiElement(()('(')
                    ReferencePattern: name
                      PsiElement(identifier)('name')
                    PsiElement())(')')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace('\n      ')
                BlockOfExpressions
                  InfixExpression
                    ReferenceExpression: env
                      PsiElement(identifier)('env')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: lookup
                      PsiElement(identifier)('lookup')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: name
                      PsiElement(identifier)('name')
              PsiWhiteSpace('\n    ')
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                InfixPattern
                  ConstructorPattern
                    CodeReferenceElement: Symbol
                      PsiElement(identifier)('Symbol')
                    Pattern Argument List
                      PsiElement(()('(')
                      LiteralPattern
                        StringLiteral
                          PsiElement(string content)('"def"')
                      PsiElement())(')')
                  PsiWhiteSpace(' ')
                  CodeReferenceElement: ::
                    PsiElement(identifier)('::')
                  PsiWhiteSpace(' ')
                  InfixPattern
                    ConstructorPattern
                      CodeReferenceElement: Symbol
                        PsiElement(identifier)('Symbol')
                      Pattern Argument List
                        PsiElement(()('(')
                        ReferencePattern: name
                          PsiElement(identifier)('name')
                        PsiElement())(')')
                    PsiWhiteSpace(' ')
                    CodeReferenceElement: ::
                      PsiElement(identifier)('::')
                    PsiWhiteSpace(' ')
                    InfixPattern
                      ReferencePattern: y
                        PsiElement(identifier)('y')
                      PsiWhiteSpace(' ')
                      CodeReferenceElement: ::
                        PsiElement(identifier)('::')
                      PsiWhiteSpace(' ')
                      InfixPattern
                        ReferencePattern: z
                          PsiElement(identifier)('z')
                        PsiWhiteSpace(' ')
                        CodeReferenceElement: ::
                          PsiElement(identifier)('::')
                        PsiWhiteSpace(' ')
                        StableElementPattern
                          ReferenceExpression: Nil
                            PsiElement(identifier)('Nil')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace('\n      ')
                BlockOfExpressions
                  MethodCall
                    ReferenceExpression: eval
                      PsiElement(identifier)('eval')
                    ArgumentList
                      PsiElement(()('(')
                      ReferenceExpression: z
                        PsiElement(identifier)('z')
                      PsiElement(,)(',')
                      PsiWhiteSpace(' ')
                      MethodCall
                        ReferenceExpression: env.extendRec
                          ReferenceExpression: env
                            PsiElement(identifier)('env')
                          PsiElement(.)('.')
                          PsiElement(identifier)('extendRec')
                        ArgumentList
                          PsiElement(()('(')
                          ReferenceExpression: name
                            PsiElement(identifier)('name')
                          PsiElement(,)(',')
                          PsiWhiteSpace(' ')
                          ExpressionInParenthesis
                            PsiElement(()('(')
                            FunctionExpression
                              Parameters
                                ParametersClause
                                  Parameter: env1
                                    PsiElement(identifier)('env1')
                              PsiWhiteSpace(' ')
                              PsiElement(=>)('=>')
                              PsiWhiteSpace(' ')
                              MethodCall
                                ReferenceExpression: eval
                                  PsiElement(identifier)('eval')
                                ArgumentList
                                  PsiElement(()('(')
                                  ReferenceExpression: y
                                    PsiElement(identifier)('y')
                                  PsiElement(,)(',')
                                  PsiWhiteSpace(' ')
                                  ReferenceExpression: env1
                                    PsiElement(identifier)('env1')
                                  PsiElement())(')')
                            PsiElement())(')')
                          PsiElement())(')')
                      PsiElement())(')')
              PsiWhiteSpace('\n    ')
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                InfixPattern
                  ConstructorPattern
                    CodeReferenceElement: Symbol
                      PsiElement(identifier)('Symbol')
                    Pattern Argument List
                      PsiElement(()('(')
                      LiteralPattern
                        StringLiteral
                          PsiElement(string content)('"val"')
                      PsiElement())(')')
                  PsiWhiteSpace(' ')
                  CodeReferenceElement: ::
                    PsiElement(identifier)('::')
                  PsiWhiteSpace(' ')
                  InfixPattern
                    ConstructorPattern
                      CodeReferenceElement: Symbol
                        PsiElement(identifier)('Symbol')
                      Pattern Argument List
                        PsiElement(()('(')
                        ReferencePattern: name
                          PsiElement(identifier)('name')
                        PsiElement())(')')
                    PsiWhiteSpace(' ')
                    CodeReferenceElement: ::
                      PsiElement(identifier)('::')
                    PsiWhiteSpace(' ')
                    InfixPattern
                      ReferencePattern: y
                        PsiElement(identifier)('y')
                      PsiWhiteSpace(' ')
                      CodeReferenceElement: ::
                        PsiElement(identifier)('::')
                      PsiWhiteSpace(' ')
                      InfixPattern
                        ReferencePattern: z
                          PsiElement(identifier)('z')
                        PsiWhiteSpace(' ')
                        CodeReferenceElement: ::
                          PsiElement(identifier)('::')
                        PsiWhiteSpace(' ')
                        StableElementPattern
                          ReferenceExpression: Nil
                            PsiElement(identifier)('Nil')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace('\n      ')
                BlockOfExpressions
                  MethodCall
                    ReferenceExpression: eval
                      PsiElement(identifier)('eval')
                    ArgumentList
                      PsiElement(()('(')
                      ReferenceExpression: z
                        PsiElement(identifier)('z')
                      PsiElement(,)(',')
                      PsiWhiteSpace(' ')
                      MethodCall
                        ReferenceExpression: env.extend
                          ReferenceExpression: env
                            PsiElement(identifier)('env')
                          PsiElement(.)('.')
                          PsiElement(identifier)('extend')
                        ArgumentList
                          PsiElement(()('(')
                          ReferenceExpression: name
                            PsiElement(identifier)('name')
                          PsiElement(,)(',')
                          PsiWhiteSpace(' ')
                          MethodCall
                            ReferenceExpression: eval
                              PsiElement(identifier)('eval')
                            ArgumentList
                              PsiElement(()('(')
                              ReferenceExpression: y
                                PsiElement(identifier)('y')
                              PsiElement(,)(',')
                              PsiWhiteSpace(' ')
                              ReferenceExpression: env
                                PsiElement(identifier)('env')
                              PsiElement())(')')
                          PsiElement())(')')
                      PsiElement())(')')
              PsiWhiteSpace('\n    ')
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                InfixPattern
                  ConstructorPattern
                    CodeReferenceElement: Symbol
                      PsiElement(identifier)('Symbol')
                    Pattern Argument List
                      PsiElement(()('(')
                      LiteralPattern
                        StringLiteral
                          PsiElement(string content)('"lambda"')
                      PsiElement())(')')
                  PsiWhiteSpace(' ')
                  CodeReferenceElement: ::
                    PsiElement(identifier)('::')
                  PsiWhiteSpace(' ')
                  InfixPattern
                    ReferencePattern: params
                      PsiElement(identifier)('params')
                    PsiWhiteSpace(' ')
                    CodeReferenceElement: ::
                      PsiElement(identifier)('::')
                    PsiWhiteSpace(' ')
                    InfixPattern
                      ReferencePattern: y
                        PsiElement(identifier)('y')
                      PsiWhiteSpace(' ')
                      CodeReferenceElement: ::
                        PsiElement(identifier)('::')
                      PsiWhiteSpace(' ')
                      StableElementPattern
                        ReferenceExpression: Nil
                          PsiElement(identifier)('Nil')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace('\n      ')
                BlockOfExpressions
                  MethodCall
                    ReferenceExpression: mkLambda
                      PsiElement(identifier)('mkLambda')
                    ArgumentList
                      PsiElement(()('(')
                      ReferenceExpression: params
                        PsiElement(identifier)('params')
                      PsiElement(,)(',')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: y
                        PsiElement(identifier)('y')
                      PsiElement(,)(',')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: env
                        PsiElement(identifier)('env')
                      PsiElement())(')')
              PsiWhiteSpace('\n    ')
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                InfixPattern
                  ConstructorPattern
                    CodeReferenceElement: Symbol
                      PsiElement(identifier)('Symbol')
                    Pattern Argument List
                      PsiElement(()('(')
                      LiteralPattern
                        StringLiteral
                          PsiElement(string content)('"if"')
                      PsiElement())(')')
                  PsiWhiteSpace(' ')
                  CodeReferenceElement: ::
                    PsiElement(identifier)('::')
                  PsiWhiteSpace(' ')
                  InfixPattern
                    ReferencePattern: c
                      PsiElement(identifier)('c')
                    PsiWhiteSpace(' ')
                    CodeReferenceElement: ::
                      PsiElement(identifier)('::')
                    PsiWhiteSpace(' ')
                    InfixPattern
                      ReferencePattern: y
                        PsiElement(identifier)('y')
                      PsiWhiteSpace(' ')
                      CodeReferenceElement: ::
                        PsiElement(identifier)('::')
                      PsiWhiteSpace(' ')
                      InfixPattern
                        ReferencePattern: z
                          PsiElement(identifier)('z')
                        PsiWhiteSpace(' ')
                        CodeReferenceElement: ::
                          PsiElement(identifier)('::')
                        PsiWhiteSpace(' ')
                        StableElementPattern
                          ReferenceExpression: Nil
                            PsiElement(identifier)('Nil')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace('\n      ')
                BlockOfExpressions
                  IfStatement
                    PsiElement(if)('if')
                    PsiWhiteSpace(' ')
                    PsiElement(()('(')
                    MethodCall
                      ReferenceExpression: asBoolean
                        PsiElement(identifier)('asBoolean')
                      ArgumentList
                        PsiElement(()('(')
                        MethodCall
                          ReferenceExpression: eval
                            PsiElement(identifier)('eval')
                          ArgumentList
                            PsiElement(()('(')
                            ReferenceExpression: c
                              PsiElement(identifier)('c')
                            PsiElement(,)(',')
                            PsiWhiteSpace(' ')
                            ReferenceExpression: env
                              PsiElement(identifier)('env')
                            PsiElement())(')')
                        PsiElement())(')')
                    PsiElement())(')')
                    PsiWhiteSpace(' ')
                    MethodCall
                      ReferenceExpression: eval
                        PsiElement(identifier)('eval')
                      ArgumentList
                        PsiElement(()('(')
                        ReferenceExpression: y
                          PsiElement(identifier)('y')
                        PsiElement(,)(',')
                        PsiWhiteSpace(' ')
                        ReferenceExpression: env
                          PsiElement(identifier)('env')
                        PsiElement())(')')
                    PsiWhiteSpace(' ')
                    PsiElement(else)('else')
                    PsiWhiteSpace(' ')
                    MethodCall
                      ReferenceExpression: eval
                        PsiElement(identifier)('eval')
                      ArgumentList
                        PsiElement(()('(')
                        ReferenceExpression: z
                          PsiElement(identifier)('z')
                        PsiElement(,)(',')
                        PsiWhiteSpace(' ')
                        ReferenceExpression: env
                          PsiElement(identifier)('env')
                        PsiElement())(')')
              PsiWhiteSpace('\n    ')
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                InfixPattern
                  ConstructorPattern
                    CodeReferenceElement: Symbol
                      PsiElement(identifier)('Symbol')
                    Pattern Argument List
                      PsiElement(()('(')
                      LiteralPattern
                        StringLiteral
                          PsiElement(string content)('"quote"')
                      PsiElement())(')')
                  PsiWhiteSpace(' ')
                  CodeReferenceElement: ::
                    PsiElement(identifier)('::')
                  PsiWhiteSpace(' ')
                  InfixPattern
                    ReferencePattern: y
                      PsiElement(identifier)('y')
                    PsiWhiteSpace(' ')
                    CodeReferenceElement: ::
                      PsiElement(identifier)('::')
                    PsiWhiteSpace(' ')
                    StableElementPattern
                      ReferenceExpression: Nil
                        PsiElement(identifier)('Nil')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace('\n      ')
                BlockOfExpressions
                  ReferenceExpression: y
                    PsiElement(identifier)('y')
              PsiWhiteSpace('\n    ')
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                InfixPattern
                  ReferencePattern: y
                    PsiElement(identifier)('y')
                  PsiWhiteSpace(' ')
                  CodeReferenceElement: ::
                    PsiElement(identifier)('::')
                  PsiWhiteSpace(' ')
                  ReferencePattern: z
                    PsiElement(identifier)('z')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace('\n      ')
                BlockOfExpressions
                  MethodCall
                    ReferenceExpression: apply
                      PsiElement(identifier)('apply')
                    ArgumentList
                      PsiElement(()('(')
                      MethodCall
                        ReferenceExpression: eval
                          PsiElement(identifier)('eval')
                        ArgumentList
                          PsiElement(()('(')
                          ReferenceExpression: y
                            PsiElement(identifier)('y')
                          PsiElement(,)(',')
                          PsiWhiteSpace(' ')
                          ReferenceExpression: env
                            PsiElement(identifier)('env')
                          PsiElement())(')')
                      PsiElement(,)(',')
                      PsiWhiteSpace(' ')
                      InfixExpression
                        ReferenceExpression: z
                          PsiElement(identifier)('z')
                        PsiWhiteSpace(' ')
                        ReferenceExpression: map
                          PsiElement(identifier)('map')
                        PsiWhiteSpace(' ')
                        ExpressionInParenthesis
                          PsiElement(()('(')
                          FunctionExpression
                            Parameters
                              ParametersClause
                                Parameter: x
                                  PsiElement(identifier)('x')
                            PsiWhiteSpace(' ')
                            PsiElement(=>)('=>')
                            PsiWhiteSpace(' ')
                            MethodCall
                              ReferenceExpression: eval
                                PsiElement(identifier)('eval')
                              ArgumentList
                                PsiElement(()('(')
                                ReferenceExpression: x
                                  PsiElement(identifier)('x')
                                PsiElement(,)(',')
                                PsiWhiteSpace(' ')
                                ReferenceExpression: env
                                  PsiElement(identifier)('env')
                                PsiElement())(')')
                          PsiElement())(')')
                      PsiElement())(')')
              PsiWhiteSpace('\n    ')
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                ConstructorPattern
                  CodeReferenceElement: Lambda
                    PsiElement(identifier)('Lambda')
                  Pattern Argument List
                    PsiElement(()('(')
                    WildcardPattern
                      PsiElement(_)('_')
                    PsiElement())(')')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                BlockOfExpressions
                  ReferenceExpression: x
                    PsiElement(identifier)('x')
              PsiWhiteSpace('\n    ')
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                Scala3 TypedPattern
                  ReferencePattern: y
                    PsiElement(identifier)('y')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  TypePattern
                    SimpleType: String
                      CodeReferenceElement: String
                        PsiElement(identifier)('String')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                BlockOfExpressions
                  ReferenceExpression: x
                    PsiElement(identifier)('x')
              PsiWhiteSpace('\n    ')
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                Scala3 TypedPattern
                  ReferencePattern: y
                    PsiElement(identifier)('y')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  TypePattern
                    SimpleType: Int
                      CodeReferenceElement: Int
                        PsiElement(identifier)('Int')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                BlockOfExpressions
                  ReferenceExpression: x
                    PsiElement(identifier)('x')
              PsiWhiteSpace('\n    ')
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                ReferencePattern: y
                  PsiElement(identifier)('y')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                BlockOfExpressions
                  MethodCall
                    ReferenceExpression: lispError
                      PsiElement(identifier)('lispError')
                    ArgumentList
                      PsiElement(()('(')
                      StringLiteral
                        PsiElement(string content)('"illegal term"')
                      PsiElement())(')')
            PsiWhiteSpace('\n  ')
            PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: lisp2string
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('lisp2string')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: x
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Data
                    CodeReferenceElement: Data
                      PsiElement(identifier)('Data')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: String
            CodeReferenceElement: String
              PsiElement(identifier)('String')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MatchStatement
            ReferenceExpression: x
              PsiElement(identifier)('x')
            PsiWhiteSpace(' ')
            PsiElement(match)('match')
            PsiWhiteSpace(' ')
            PsiElement({)('{')
            PsiWhiteSpace('\n    ')
            CaseClauses
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                ConstructorPattern
                  CodeReferenceElement: Symbol
                    PsiElement(identifier)('Symbol')
                  Pattern Argument List
                    PsiElement(()('(')
                    ReferencePattern: name
                      PsiElement(identifier)('name')
                    PsiElement())(')')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                BlockOfExpressions
                  ReferenceExpression: name
                    PsiElement(identifier)('name')
              PsiWhiteSpace('\n    ')
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                StableElementPattern
                  ReferenceExpression: Nil
                    PsiElement(identifier)('Nil')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                BlockOfExpressions
                  StringLiteral
                    PsiElement(string content)('"()"')
              PsiWhiteSpace('\n    ')
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                InfixPattern
                  ReferencePattern: y
                    PsiElement(identifier)('y')
                  PsiWhiteSpace(' ')
                  CodeReferenceElement: ::
                    PsiElement(identifier)('::')
                  PsiWhiteSpace(' ')
                  ReferencePattern: ys
                    PsiElement(identifier)('ys')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace('\n      ')
                BlockOfExpressions
                  ScFunctionDefinition: list2string
                    AnnotationsList
                      <empty list>
                    Modifiers
                      <empty list>
                    PsiElement(def)('def')
                    PsiWhiteSpace(' ')
                    PsiElement(identifier)('list2string')
                    Parameters
                      ParametersClause
                        PsiElement(()('(')
                        Parameter: xs
                          AnnotationsList
                            <empty list>
                          Modifiers
                            <empty list>
                          PsiElement(identifier)('xs')
                          PsiElement(:)(':')
                          PsiWhiteSpace(' ')
                          ParameterType
                            ParametrizedType: List[Data]
                              SimpleType: List
                                CodeReferenceElement: List
                                  PsiElement(identifier)('List')
                              TypeArgumentsList
                                PsiElement([)('[')
                                SimpleType: Data
                                  CodeReferenceElement: Data
                                    PsiElement(identifier)('Data')
                                PsiElement(])(']')
                        PsiElement())(')')
                    PsiElement(:)(':')
                    PsiWhiteSpace(' ')
                    SimpleType: String
                      CodeReferenceElement: String
                        PsiElement(identifier)('String')
                    PsiWhiteSpace(' ')
                    PsiElement(=)('=')
                    PsiWhiteSpace(' ')
                    MatchStatement
                      ReferenceExpression: xs
                        PsiElement(identifier)('xs')
                      PsiWhiteSpace(' ')
                      PsiElement(match)('match')
                      PsiWhiteSpace(' ')
                      PsiElement({)('{')
                      PsiWhiteSpace('\n        ')
                      CaseClauses
                        CaseClause
                          PsiElement(case)('case')
                          PsiWhiteSpace(' ')
                          ConstructorPattern
                            CodeReferenceElement: List
                              PsiElement(identifier)('List')
                            Pattern Argument List
                              PsiElement(()('(')
                              PsiElement())(')')
                          PsiWhiteSpace(' ')
                          PsiElement(=>)('=>')
                          PsiWhiteSpace(' ')
                          BlockOfExpressions
                            StringLiteral
                              PsiElement(string content)('""')
                        PsiWhiteSpace('\n        ')
                        CaseClause
                          PsiElement(case)('case')
                          PsiWhiteSpace(' ')
                          InfixPattern
                            ReferencePattern: y
                              PsiElement(identifier)('y')
                            PsiWhiteSpace(' ')
                            CodeReferenceElement: ::
                              PsiElement(identifier)('::')
                            PsiWhiteSpace(' ')
                            ReferencePattern: ys
                              PsiElement(identifier)('ys')
                          PsiWhiteSpace(' ')
                          PsiElement(=>)('=>')
                          PsiWhiteSpace(' ')
                          BlockOfExpressions
                            InfixExpression
                              InfixExpression
                                StringLiteral
                                  PsiElement(string content)('" "')
                                PsiWhiteSpace(' ')
                                ReferenceExpression: +
                                  PsiElement(identifier)('+')
                                PsiWhiteSpace(' ')
                                MethodCall
                                  ReferenceExpression: lisp2string
                                    PsiElement(identifier)('lisp2string')
                                  ArgumentList
                                    PsiElement(()('(')
                                    ReferenceExpression: y
                                      PsiElement(identifier)('y')
                                    PsiElement())(')')
                              PsiWhiteSpace(' ')
                              ReferenceExpression: +
                                PsiElement(identifier)('+')
                              PsiWhiteSpace(' ')
                              MethodCall
                                ReferenceExpression: list2string
                                  PsiElement(identifier)('list2string')
                                ArgumentList
                                  PsiElement(()('(')
                                  ReferenceExpression: ys
                                    PsiElement(identifier)('ys')
                                  PsiElement())(')')
                      PsiWhiteSpace('\n      ')
                      PsiElement(})('}')
                  PsiWhiteSpace('\n      ')
                  InfixExpression
                    InfixExpression
                      InfixExpression
                        StringLiteral
                          PsiElement(string content)('"("')
                        PsiWhiteSpace(' ')
                        ReferenceExpression: +
                          PsiElement(identifier)('+')
                        PsiWhiteSpace(' ')
                        MethodCall
                          ReferenceExpression: lisp2string
                            PsiElement(identifier)('lisp2string')
                          ArgumentList
                            PsiElement(()('(')
                            ReferenceExpression: y
                              PsiElement(identifier)('y')
                            PsiElement())(')')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: +
                        PsiElement(identifier)('+')
                      PsiWhiteSpace(' ')
                      MethodCall
                        ReferenceExpression: list2string
                          PsiElement(identifier)('list2string')
                        ArgumentList
                          PsiElement(()('(')
                          ReferenceExpression: ys
                            PsiElement(identifier)('ys')
                          PsiElement())(')')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: +
                      PsiElement(identifier)('+')
                    PsiWhiteSpace(' ')
                    StringLiteral
                      PsiElement(string content)('")"')
              PsiWhiteSpace('\n    ')
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                WildcardPattern
                  PsiElement(_)('_')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                BlockOfExpressions
                  IfStatement
                    PsiElement(if)('if')
                    PsiWhiteSpace(' ')
                    PsiElement(()('(')
                    GenericCall
                      ReferenceExpression: x.isInstanceOf
                        ReferenceExpression: x
                          PsiElement(identifier)('x')
                        PsiElement(.)('.')
                        PsiElement(identifier)('isInstanceOf')
                      TypeArgumentsList
                        PsiElement([)('[')
                        SimpleType: String
                          CodeReferenceElement: String
                            PsiElement(identifier)('String')
                        PsiElement(])(']')
                    PsiElement())(')')
                    PsiWhiteSpace(' ')
                    InfixExpression
                      InfixExpression
                        StringLiteral
                          PsiElement(string content)('"\""')
                        PsiWhiteSpace(' ')
                        ReferenceExpression: +
                          PsiElement(identifier)('+')
                        PsiWhiteSpace(' ')
                        ReferenceExpression: x
                          PsiElement(identifier)('x')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: +
                        PsiElement(identifier)('+')
                      PsiWhiteSpace(' ')
                      StringLiteral
                        PsiElement(string content)('"\""')
                    PsiElement(;)(';')
                    PsiWhiteSpace(' ')
                    PsiElement(else)('else')
                    PsiWhiteSpace(' ')
                    MethodCall
                      ReferenceExpression: x.toString
                        ReferenceExpression: x
                          PsiElement(identifier)('x')
                        PsiElement(.)('.')
                        PsiElement(identifier)('toString')
                      ArgumentList
                        PsiElement(()('(')
                        PsiElement())(')')
            PsiWhiteSpace('\n  ')
            PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: apply
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('apply')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: fn
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('fn')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Data
                    CodeReferenceElement: Data
                      PsiElement(identifier)('Data')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              Parameter: args
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('args')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  ParametrizedType: List[Data]
                    SimpleType: List
                      CodeReferenceElement: List
                        PsiElement(identifier)('List')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: Data
                        CodeReferenceElement: Data
                          PsiElement(identifier)('Data')
                      PsiElement(])(']')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Data
            CodeReferenceElement: Data
              PsiElement(identifier)('Data')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MatchStatement
            ReferenceExpression: fn
              PsiElement(identifier)('fn')
            PsiWhiteSpace(' ')
            PsiElement(match)('match')
            PsiWhiteSpace(' ')
            PsiElement({)('{')
            PsiWhiteSpace('\n    ')
            CaseClauses
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                ConstructorPattern
                  CodeReferenceElement: Lambda
                    PsiElement(identifier)('Lambda')
                  Pattern Argument List
                    PsiElement(()('(')
                    ReferencePattern: f
                      PsiElement(identifier)('f')
                    PsiElement())(')')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                BlockOfExpressions
                  MethodCall
                    ReferenceExpression: f
                      PsiElement(identifier)('f')
                    ArgumentList
                      PsiElement(()('(')
                      ReferenceExpression: args
                        PsiElement(identifier)('args')
                      PsiElement())(')')
                  PsiElement(;)(';')
              PsiWhiteSpace('\n    ')
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                WildcardPattern
                  PsiElement(_)('_')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                BlockOfExpressions
                  MethodCall
                    ReferenceExpression: lispError
                      PsiElement(identifier)('lispError')
                    ArgumentList
                      PsiElement(()('(')
                      InfixExpression
                        InfixExpression
                          InfixExpression
                            StringLiteral
                              PsiElement(string content)('"application of non-function: "')
                            PsiWhiteSpace(' ')
                            ReferenceExpression: +
                              PsiElement(identifier)('+')
                            PsiWhiteSpace(' ')
                            ReferenceExpression: fn
                              PsiElement(identifier)('fn')
                          PsiWhiteSpace(' ')
                          ReferenceExpression: +
                            PsiElement(identifier)('+')
                          PsiWhiteSpace(' ')
                          StringLiteral
                            PsiElement(string content)('" to "')
                        PsiWhiteSpace(' ')
                        ReferenceExpression: +
                          PsiElement(identifier)('+')
                        PsiWhiteSpace(' ')
                        ReferenceExpression: args
                          PsiElement(identifier)('args')
                      PsiElement())(')')
                  PsiElement(;)(';')
            PsiWhiteSpace('\n  ')
            PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: mkLambda
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('mkLambda')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: params
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('params')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Data
                    CodeReferenceElement: Data
                      PsiElement(identifier)('Data')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              Parameter: expr
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('expr')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Data
                    CodeReferenceElement: Data
                      PsiElement(identifier)('Data')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              Parameter: env
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('env')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Environment
                    CodeReferenceElement: Environment
                      PsiElement(identifier)('Environment')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Data
            CodeReferenceElement: Data
              PsiElement(identifier)('Data')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          BlockExpression
            PsiElement({)('{')
            PsiWhiteSpace('\n\n    ')
            ScFunctionDefinition: extendEnv
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(def)('def')
              PsiWhiteSpace(' ')
              PsiElement(identifier)('extendEnv')
              Parameters
                ParametersClause
                  PsiElement(()('(')
                  Parameter: env
                    AnnotationsList
                      <empty list>
                    Modifiers
                      <empty list>
                    PsiElement(identifier)('env')
                    PsiElement(:)(':')
                    PsiWhiteSpace(' ')
                    ParameterType
                      SimpleType: Environment
                        CodeReferenceElement: Environment
                          PsiElement(identifier)('Environment')
                  PsiElement(,)(',')
                  PsiWhiteSpace('\n                  ')
                  Parameter: ps
                    AnnotationsList
                      <empty list>
                    Modifiers
                      <empty list>
                    PsiElement(identifier)('ps')
                    PsiElement(:)(':')
                    PsiWhiteSpace(' ')
                    ParameterType
                      ParametrizedType: List[String]
                        SimpleType: List
                          CodeReferenceElement: List
                            PsiElement(identifier)('List')
                        TypeArgumentsList
                          PsiElement([)('[')
                          SimpleType: String
                            CodeReferenceElement: String
                              PsiElement(identifier)('String')
                          PsiElement(])(']')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  Parameter: args
                    AnnotationsList
                      <empty list>
                    Modifiers
                      <empty list>
                    PsiElement(identifier)('args')
                    PsiElement(:)(':')
                    PsiWhiteSpace(' ')
                    ParameterType
                      ParametrizedType: List[Data]
                        SimpleType: List
                          CodeReferenceElement: List
                            PsiElement(identifier)('List')
                        TypeArgumentsList
                          PsiElement([)('[')
                          SimpleType: Data
                            CodeReferenceElement: Data
                              PsiElement(identifier)('Data')
                          PsiElement(])(']')
                  PsiElement())(')')
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              SimpleType: Environment
                CodeReferenceElement: Environment
                  PsiElement(identifier)('Environment')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace('\n      ')
              MatchStatement
                Tuple
                  PsiElement(()('(')
                  ReferenceExpression: ps
                    PsiElement(identifier)('ps')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: args
                    PsiElement(identifier)('args')
                  PsiElement())(')')
                PsiWhiteSpace(' ')
                PsiElement(match)('match')
                PsiWhiteSpace(' ')
                PsiElement({)('{')
                PsiWhiteSpace('\n        ')
                CaseClauses
                  CaseClause
                    PsiElement(case)('case')
                    PsiWhiteSpace(' ')
                    TuplePattern
                      PsiElement(()('(')
                      ArgumentPatterns
                        ConstructorPattern
                          CodeReferenceElement: List
                            PsiElement(identifier)('List')
                          Pattern Argument List
                            PsiElement(()('(')
                            PsiElement())(')')
                        PsiElement(,)(',')
                        PsiWhiteSpace(' ')
                        ConstructorPattern
                          CodeReferenceElement: List
                            PsiElement(identifier)('List')
                          Pattern Argument List
                            PsiElement(()('(')
                            PsiElement())(')')
                      PsiElement())(')')
                    PsiWhiteSpace(' ')
                    PsiElement(=>)('=>')
                    PsiWhiteSpace('\n          ')
                    BlockOfExpressions
                      ReferenceExpression: env
                        PsiElement(identifier)('env')
                  PsiWhiteSpace('\n        ')
                  CaseClause
                    PsiElement(case)('case')
                    PsiWhiteSpace(' ')
                    TuplePattern
                      PsiElement(()('(')
                      ArgumentPatterns
                        InfixPattern
                          ReferencePattern: p
                            PsiElement(identifier)('p')
                          PsiWhiteSpace(' ')
                          CodeReferenceElement: ::
                            PsiElement(identifier)('::')
                          PsiWhiteSpace(' ')
                          ReferencePattern: ps1
                            PsiElement(identifier)('ps1')
                        PsiElement(,)(',')
                        PsiWhiteSpace(' ')
                        InfixPattern
                          ReferencePattern: arg
                            PsiElement(identifier)('arg')
                          PsiWhiteSpace(' ')
                          CodeReferenceElement: ::
                            PsiElement(identifier)('::')
                          PsiWhiteSpace(' ')
                          ReferencePattern: args1
                            PsiElement(identifier)('args1')
                      PsiElement())(')')
                    PsiWhiteSpace(' ')
                    PsiElement(=>)('=>')
                    PsiWhiteSpace('\n          ')
                    BlockOfExpressions
                      MethodCall
                        ReferenceExpression: extendEnv
                          PsiElement(identifier)('extendEnv')
                        ArgumentList
                          PsiElement(()('(')
                          MethodCall
                            ReferenceExpression: env.extend
                              ReferenceExpression: env
                                PsiElement(identifier)('env')
                              PsiElement(.)('.')
                              PsiElement(identifier)('extend')
                            ArgumentList
                              PsiElement(()('(')
                              ReferenceExpression: p
                                PsiElement(identifier)('p')
                              PsiElement(,)(',')
                              PsiWhiteSpace(' ')
                              ReferenceExpression: arg
                                PsiElement(identifier)('arg')
                              PsiElement())(')')
                          PsiElement(,)(',')
                          PsiWhiteSpace(' ')
                          ReferenceExpression: ps1
                            PsiElement(identifier)('ps1')
                          PsiElement(,)(',')
                          PsiWhiteSpace(' ')
                          ReferenceExpression: args1
                            PsiElement(identifier)('args1')
                          PsiElement())(')')
                  PsiWhiteSpace('\n        ')
                  CaseClause
                    PsiElement(case)('case')
                    PsiWhiteSpace(' ')
                    WildcardPattern
                      PsiElement(_)('_')
                    PsiWhiteSpace(' ')
                    PsiElement(=>)('=>')
                    PsiWhiteSpace('\n          ')
                    BlockOfExpressions
                      MethodCall
                        ReferenceExpression: lispError
                          PsiElement(identifier)('lispError')
                        ArgumentList
                          PsiElement(()('(')
                          StringLiteral
                            PsiElement(string content)('"wrong number of arguments"')
                          PsiElement())(')')
                PsiWhiteSpace('\n      ')
                PsiElement(})('}')
            PsiWhiteSpace('\n\n    ')
            ScPatternDefinition: ps
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              ListOfPatterns
                ReferencePattern: ps
                  PsiElement(identifier)('ps')
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              ParametrizedType: List[String]
                SimpleType: List
                  CodeReferenceElement: List
                    PsiElement(identifier)('List')
                TypeArgumentsList
                  PsiElement([)('[')
                  SimpleType: String
                    CodeReferenceElement: String
                      PsiElement(identifier)('String')
                  PsiElement(])(']')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              InfixExpression
                MethodCall
                  ReferenceExpression: asList
                    PsiElement(identifier)('asList')
                  ArgumentList
                    PsiElement(()('(')
                    ReferenceExpression: params
                      PsiElement(identifier)('params')
                    PsiElement())(')')
                PsiWhiteSpace(' ')
                ReferenceExpression: map
                  PsiElement(identifier)('map')
                PsiWhiteSpace(' ')
                BlockExpression
                  PsiElement({)('{')
                  PsiWhiteSpace('\n      ')
                  CaseClauses
                    CaseClause
                      PsiElement(case)('case')
                      PsiWhiteSpace(' ')
                      ConstructorPattern
                        CodeReferenceElement: Symbol
                          PsiElement(identifier)('Symbol')
                        Pattern Argument List
                          PsiElement(()('(')
                          ReferencePattern: name
                            PsiElement(identifier)('name')
                          PsiElement())(')')
                      PsiWhiteSpace(' ')
                      PsiElement(=>)('=>')
                      PsiWhiteSpace(' ')
                      BlockOfExpressions
                        ReferenceExpression: name
                          PsiElement(identifier)('name')
                    PsiWhiteSpace('\n      ')
                    CaseClause
                      PsiElement(case)('case')
                      PsiWhiteSpace(' ')
                      WildcardPattern
                        PsiElement(_)('_')
                      PsiWhiteSpace(' ')
                      PsiElement(=>)('=>')
                      PsiWhiteSpace(' ')
                      BlockOfExpressions
                        MethodCall
                          ReferenceExpression: sys.error
                            ReferenceExpression: sys
                              PsiElement(identifier)('sys')
                            PsiElement(.)('.')
                            PsiElement(identifier)('error')
                          ArgumentList
                            PsiElement(()('(')
                            StringLiteral
                              PsiElement(string content)('"illegal parameter list"')
                            PsiElement())(')')
                        PsiElement(;)(';')
                  PsiWhiteSpace('\n    ')
                  PsiElement(})('}')
            PsiWhiteSpace('\n\n    ')
            MethodCall
              ReferenceExpression: Lambda
                PsiElement(identifier)('Lambda')
              ArgumentList
                PsiElement(()('(')
                FunctionExpression
                  Parameters
                    ParametersClause
                      Parameter: args
                        PsiElement(identifier)('args')
                  PsiWhiteSpace(' ')
                  PsiElement(=>)('=>')
                  PsiWhiteSpace(' ')
                  MethodCall
                    ReferenceExpression: eval
                      PsiElement(identifier)('eval')
                    ArgumentList
                      PsiElement(()('(')
                      ReferenceExpression: expr
                        PsiElement(identifier)('expr')
                      PsiElement(,)(',')
                      PsiWhiteSpace(' ')
                      MethodCall
                        ReferenceExpression: extendEnv
                          PsiElement(identifier)('extendEnv')
                        ArgumentList
                          PsiElement(()('(')
                          ReferenceExpression: env
                            PsiElement(identifier)('env')
                          PsiElement(,)(',')
                          PsiWhiteSpace(' ')
                          ReferenceExpression: ps
                            PsiElement(identifier)('ps')
                          PsiElement(,)(',')
                          PsiWhiteSpace(' ')
                          ReferenceExpression: args
                            PsiElement(identifier)('args')
                          PsiElement())(')')
                      PsiElement())(')')
                PsiElement())(')')
            PsiWhiteSpace('\n  ')
            PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        ScPatternDefinition: globalEnv
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: globalEnv
              PsiElement(identifier)('globalEnv')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: EmptyEnvironment
    .extend("=", Lambda{
      case List(arg1, arg2) => if (arg1 == arg2) 1 else 0})
    .extend("+", Lambda{
      case List(arg1: Int, arg2: Int) => arg1 + arg2
      case List(arg1: String, arg2: String) => arg1 + arg2})
    .extend("-", Lambda{
      case List(arg1: Int, arg2: Int) => arg1 - arg2})
    .extend("*", Lambda{
      case List(arg1: Int, arg2: Int) => arg1 * arg2})
    .extend("/", Lambda{
      case List(arg1: Int, arg2: Int) => arg1 / arg2})
    .extend("nil", Nil)
    .extend("cons", Lambda{
      case List(arg1, arg2) => arg1 :: asList(arg2)})
    .extend("car", Lambda{
      case List(x :: xs) => x})
    .extend("cdr", Lambda{
      case List(x :: xs) => xs})
    .extend
              MethodCall
                ReferenceExpression: EmptyEnvironment
    .extend("=", Lambda{
      case List(arg1, arg2) => if (arg1 == arg2) 1 else 0})
    .extend("+", Lambda{
      case List(arg1: Int, arg2: Int) => arg1 + arg2
      case List(arg1: String, arg2: String) => arg1 + arg2})
    .extend("-", Lambda{
      case List(arg1: Int, arg2: Int) => arg1 - arg2})
    .extend("*", Lambda{
      case List(arg1: Int, arg2: Int) => arg1 * arg2})
    .extend("/", Lambda{
      case List(arg1: Int, arg2: Int) => arg1 / arg2})
    .extend("nil", Nil)
    .extend("cons", Lambda{
      case List(arg1, arg2) => arg1 :: asList(arg2)})
    .extend("car", Lambda{
      case List(x :: xs) => x})
    .extend
                  MethodCall
                    ReferenceExpression: EmptyEnvironment
    .extend("=", Lambda{
      case List(arg1, arg2) => if (arg1 == arg2) 1 else 0})
    .extend("+", Lambda{
      case List(arg1: Int, arg2: Int) => arg1 + arg2
      case List(arg1: String, arg2: String) => arg1 + arg2})
    .extend("-", Lambda{
      case List(arg1: Int, arg2: Int) => arg1 - arg2})
    .extend("*", Lambda{
      case List(arg1: Int, arg2: Int) => arg1 * arg2})
    .extend("/", Lambda{
      case List(arg1: Int, arg2: Int) => arg1 / arg2})
    .extend("nil", Nil)
    .extend("cons", Lambda{
      case List(arg1, arg2) => arg1 :: asList(arg2)})
    .extend
                      MethodCall
                        ReferenceExpression: EmptyEnvironment
    .extend("=", Lambda{
      case List(arg1, arg2) => if (arg1 == arg2) 1 else 0})
    .extend("+", Lambda{
      case List(arg1: Int, arg2: Int) => arg1 + arg2
      case List(arg1: String, arg2: String) => arg1 + arg2})
    .extend("-", Lambda{
      case List(arg1: Int, arg2: Int) => arg1 - arg2})
    .extend("*", Lambda{
      case List(arg1: Int, arg2: Int) => arg1 * arg2})
    .extend("/", Lambda{
      case List(arg1: Int, arg2: Int) => arg1 / arg2})
    .extend("nil", Nil)
    .extend
                          MethodCall
                            ReferenceExpression: EmptyEnvironment
    .extend("=", Lambda{
      case List(arg1, arg2) => if (arg1 == arg2) 1 else 0})
    .extend("+", Lambda{
      case List(arg1: Int, arg2: Int) => arg1 + arg2
      case List(arg1: String, arg2: String) => arg1 + arg2})
    .extend("-", Lambda{
      case List(arg1: Int, arg2: Int) => arg1 - arg2})
    .extend("*", Lambda{
      case List(arg1: Int, arg2: Int) => arg1 * arg2})
    .extend("/", Lambda{
      case List(arg1: Int, arg2: Int) => arg1 / arg2})
    .extend
                              MethodCall
                                ReferenceExpression: EmptyEnvironment
    .extend("=", Lambda{
      case List(arg1, arg2) => if (arg1 == arg2) 1 else 0})
    .extend("+", Lambda{
      case List(arg1: Int, arg2: Int) => arg1 + arg2
      case List(arg1: String, arg2: String) => arg1 + arg2})
    .extend("-", Lambda{
      case List(arg1: Int, arg2: Int) => arg1 - arg2})
    .extend("*", Lambda{
      case List(arg1: Int, arg2: Int) => arg1 * arg2})
    .extend
                                  MethodCall
                                    ReferenceExpression: EmptyEnvironment
    .extend("=", Lambda{
      case List(arg1, arg2) => if (arg1 == arg2) 1 else 0})
    .extend("+", Lambda{
      case List(arg1: Int, arg2: Int) => arg1 + arg2
      case List(arg1: String, arg2: String) => arg1 + arg2})
    .extend("-", Lambda{
      case List(arg1: Int, arg2: Int) => arg1 - arg2})
    .extend
                                      MethodCall
                                        ReferenceExpression: EmptyEnvironment
    .extend("=", Lambda{
      case List(arg1, arg2) => if (arg1 == arg2) 1 else 0})
    .extend("+", Lambda{
      case List(arg1: Int, arg2: Int) => arg1 + arg2
      case List(arg1: String, arg2: String) => arg1 + arg2})
    .extend
                                          MethodCall
                                            ReferenceExpression: EmptyEnvironment
    .extend("=", Lambda{
      case List(arg1, arg2) => if (arg1 == arg2) 1 else 0})
    .extend
                                              MethodCall
                                                ReferenceExpression: EmptyEnvironment
    .extend
                                                  ReferenceExpression: EmptyEnvironment
                                                    PsiElement(identifier)('EmptyEnvironment')
                                                  PsiWhiteSpace('\n    ')
                                                  PsiElement(.)('.')
                                                  PsiElement(identifier)('extend')
                                                ArgumentList
                                                  PsiElement(()('(')
                                                  StringLiteral
                                                    PsiElement(string content)('"="')
                                                  PsiElement(,)(',')
                                                  PsiWhiteSpace(' ')
                                                  MethodCall
                                                    ReferenceExpression: Lambda
                                                      PsiElement(identifier)('Lambda')
                                                    ArgumentList
                                                      BlockExpression
                                                        PsiElement({)('{')
                                                        PsiWhiteSpace('\n      ')
                                                        CaseClauses
                                                          CaseClause
                                                            PsiElement(case)('case')
                                                            PsiWhiteSpace(' ')
                                                            ConstructorPattern
                                                              CodeReferenceElement: List
                                                                PsiElement(identifier)('List')
                                                              Pattern Argument List
                                                                PsiElement(()('(')
                                                                ReferencePattern: arg1
                                                                  PsiElement(identifier)('arg1')
                                                                PsiElement(,)(',')
                                                                PsiWhiteSpace(' ')
                                                                ReferencePattern: arg2
                                                                  PsiElement(identifier)('arg2')
                                                                PsiElement())(')')
                                                            PsiWhiteSpace(' ')
                                                            PsiElement(=>)('=>')
                                                            PsiWhiteSpace(' ')
                                                            BlockOfExpressions
                                                              IfStatement
                                                                PsiElement(if)('if')
                                                                PsiWhiteSpace(' ')
                                                                PsiElement(()('(')
                                                                InfixExpression
                                                                  ReferenceExpression: arg1
                                                                    PsiElement(identifier)('arg1')
                                                                  PsiWhiteSpace(' ')
                                                                  ReferenceExpression: ==
                                                                    PsiElement(identifier)('==')
                                                                  PsiWhiteSpace(' ')
                                                                  ReferenceExpression: arg2
                                                                    PsiElement(identifier)('arg2')
                                                                PsiElement())(')')
                                                                PsiWhiteSpace(' ')
                                                                IntegerLiteral
                                                                  PsiElement(integer)('1')
                                                                PsiWhiteSpace(' ')
                                                                PsiElement(else)('else')
                                                                PsiWhiteSpace(' ')
                                                                IntegerLiteral
                                                                  PsiElement(integer)('0')
                                                        PsiElement(})('}')
                                                  PsiElement())(')')
                                              PsiWhiteSpace('\n    ')
                                              PsiElement(.)('.')
                                              PsiElement(identifier)('extend')
                                            ArgumentList
                                              PsiElement(()('(')
                                              StringLiteral
                                                PsiElement(string content)('"+"')
                                              PsiElement(,)(',')
                                              PsiWhiteSpace(' ')
                                              MethodCall
                                                ReferenceExpression: Lambda
                                                  PsiElement(identifier)('Lambda')
                                                ArgumentList
                                                  BlockExpression
                                                    PsiElement({)('{')
                                                    PsiWhiteSpace('\n      ')
                                                    CaseClauses
                                                      CaseClause
                                                        PsiElement(case)('case')
                                                        PsiWhiteSpace(' ')
                                                        ConstructorPattern
                                                          CodeReferenceElement: List
                                                            PsiElement(identifier)('List')
                                                          Pattern Argument List
                                                            PsiElement(()('(')
                                                            Scala3 TypedPattern
                                                              ReferencePattern: arg1
                                                                PsiElement(identifier)('arg1')
                                                              PsiElement(:)(':')
                                                              PsiWhiteSpace(' ')
                                                              TypePattern
                                                                SimpleType: Int
                                                                  CodeReferenceElement: Int
                                                                    PsiElement(identifier)('Int')
                                                            PsiElement(,)(',')
                                                            PsiWhiteSpace(' ')
                                                            Scala3 TypedPattern
                                                              ReferencePattern: arg2
                                                                PsiElement(identifier)('arg2')
                                                              PsiElement(:)(':')
                                                              PsiWhiteSpace(' ')
                                                              TypePattern
                                                                SimpleType: Int
                                                                  CodeReferenceElement: Int
                                                                    PsiElement(identifier)('Int')
                                                            PsiElement())(')')
                                                        PsiWhiteSpace(' ')
                                                        PsiElement(=>)('=>')
                                                        PsiWhiteSpace(' ')
                                                        BlockOfExpressions
                                                          InfixExpression
                                                            ReferenceExpression: arg1
                                                              PsiElement(identifier)('arg1')
                                                            PsiWhiteSpace(' ')
                                                            ReferenceExpression: +
                                                              PsiElement(identifier)('+')
                                                            PsiWhiteSpace(' ')
                                                            ReferenceExpression: arg2
                                                              PsiElement(identifier)('arg2')
                                                      PsiWhiteSpace('\n      ')
                                                      CaseClause
                                                        PsiElement(case)('case')
                                                        PsiWhiteSpace(' ')
                                                        ConstructorPattern
                                                          CodeReferenceElement: List
                                                            PsiElement(identifier)('List')
                                                          Pattern Argument List
                                                            PsiElement(()('(')
                                                            Scala3 TypedPattern
                                                              ReferencePattern: arg1
                                                                PsiElement(identifier)('arg1')
                                                              PsiElement(:)(':')
                                                              PsiWhiteSpace(' ')
                                                              TypePattern
                                                                SimpleType: String
                                                                  CodeReferenceElement: String
                                                                    PsiElement(identifier)('String')
                                                            PsiElement(,)(',')
                                                            PsiWhiteSpace(' ')
                                                            Scala3 TypedPattern
                                                              ReferencePattern: arg2
                                                                PsiElement(identifier)('arg2')
                                                              PsiElement(:)(':')
                                                              PsiWhiteSpace(' ')
                                                              TypePattern
                                                                SimpleType: String
                                                                  CodeReferenceElement: String
                                                                    PsiElement(identifier)('String')
                                                            PsiElement())(')')
                                                        PsiWhiteSpace(' ')
                                                        PsiElement(=>)('=>')
                                                        PsiWhiteSpace(' ')
                                                        BlockOfExpressions
                                                          InfixExpression
                                                            ReferenceExpression: arg1
                                                              PsiElement(identifier)('arg1')
                                                            PsiWhiteSpace(' ')
                                                            ReferenceExpression: +
                                                              PsiElement(identifier)('+')
                                                            PsiWhiteSpace(' ')
                                                            ReferenceExpression: arg2
                                                              PsiElement(identifier)('arg2')
                                                    PsiElement(})('}')
                                              PsiElement())(')')
                                          PsiWhiteSpace('\n    ')
                                          PsiElement(.)('.')
                                          PsiElement(identifier)('extend')
                                        ArgumentList
                                          PsiElement(()('(')
                                          StringLiteral
                                            PsiElement(string content)('"-"')
                                          PsiElement(,)(',')
                                          PsiWhiteSpace(' ')
                                          MethodCall
                                            ReferenceExpression: Lambda
                                              PsiElement(identifier)('Lambda')
                                            ArgumentList
                                              BlockExpression
                                                PsiElement({)('{')
                                                PsiWhiteSpace('\n      ')
                                                CaseClauses
                                                  CaseClause
                                                    PsiElement(case)('case')
                                                    PsiWhiteSpace(' ')
                                                    ConstructorPattern
                                                      CodeReferenceElement: List
                                                        PsiElement(identifier)('List')
                                                      Pattern Argument List
                                                        PsiElement(()('(')
                                                        Scala3 TypedPattern
                                                          ReferencePattern: arg1
                                                            PsiElement(identifier)('arg1')
                                                          PsiElement(:)(':')
                                                          PsiWhiteSpace(' ')
                                                          TypePattern
                                                            SimpleType: Int
                                                              CodeReferenceElement: Int
                                                                PsiElement(identifier)('Int')
                                                        PsiElement(,)(',')
                                                        PsiWhiteSpace(' ')
                                                        Scala3 TypedPattern
                                                          ReferencePattern: arg2
                                                            PsiElement(identifier)('arg2')
                                                          PsiElement(:)(':')
                                                          PsiWhiteSpace(' ')
                                                          TypePattern
                                                            SimpleType: Int
                                                              CodeReferenceElement: Int
                                                                PsiElement(identifier)('Int')
                                                        PsiElement())(')')
                                                    PsiWhiteSpace(' ')
                                                    PsiElement(=>)('=>')
                                                    PsiWhiteSpace(' ')
                                                    BlockOfExpressions
                                                      InfixExpression
                                                        ReferenceExpression: arg1
                                                          PsiElement(identifier)('arg1')
                                                        PsiWhiteSpace(' ')
                                                        ReferenceExpression: -
                                                          PsiElement(identifier)('-')
                                                        PsiWhiteSpace(' ')
                                                        ReferenceExpression: arg2
                                                          PsiElement(identifier)('arg2')
                                                PsiElement(})('}')
                                          PsiElement())(')')
                                      PsiWhiteSpace('\n    ')
                                      PsiElement(.)('.')
                                      PsiElement(identifier)('extend')
                                    ArgumentList
                                      PsiElement(()('(')
                                      StringLiteral
                                        PsiElement(string content)('"*"')
                                      PsiElement(,)(',')
                                      PsiWhiteSpace(' ')
                                      MethodCall
                                        ReferenceExpression: Lambda
                                          PsiElement(identifier)('Lambda')
                                        ArgumentList
                                          BlockExpression
                                            PsiElement({)('{')
                                            PsiWhiteSpace('\n      ')
                                            CaseClauses
                                              CaseClause
                                                PsiElement(case)('case')
                                                PsiWhiteSpace(' ')
                                                ConstructorPattern
                                                  CodeReferenceElement: List
                                                    PsiElement(identifier)('List')
                                                  Pattern Argument List
                                                    PsiElement(()('(')
                                                    Scala3 TypedPattern
                                                      ReferencePattern: arg1
                                                        PsiElement(identifier)('arg1')
                                                      PsiElement(:)(':')
                                                      PsiWhiteSpace(' ')
                                                      TypePattern
                                                        SimpleType: Int
                                                          CodeReferenceElement: Int
                                                            PsiElement(identifier)('Int')
                                                    PsiElement(,)(',')
                                                    PsiWhiteSpace(' ')
                                                    Scala3 TypedPattern
                                                      ReferencePattern: arg2
                                                        PsiElement(identifier)('arg2')
                                                      PsiElement(:)(':')
                                                      PsiWhiteSpace(' ')
                                                      TypePattern
                                                        SimpleType: Int
                                                          CodeReferenceElement: Int
                                                            PsiElement(identifier)('Int')
                                                    PsiElement())(')')
                                                PsiWhiteSpace(' ')
                                                PsiElement(=>)('=>')
                                                PsiWhiteSpace(' ')
                                                BlockOfExpressions
                                                  InfixExpression
                                                    ReferenceExpression: arg1
                                                      PsiElement(identifier)('arg1')
                                                    PsiWhiteSpace(' ')
                                                    ReferenceExpression: *
                                                      PsiElement(identifier)('*')
                                                    PsiWhiteSpace(' ')
                                                    ReferenceExpression: arg2
                                                      PsiElement(identifier)('arg2')
                                            PsiElement(})('}')
                                      PsiElement())(')')
                                  PsiWhiteSpace('\n    ')
                                  PsiElement(.)('.')
                                  PsiElement(identifier)('extend')
                                ArgumentList
                                  PsiElement(()('(')
                                  StringLiteral
                                    PsiElement(string content)('"/"')
                                  PsiElement(,)(',')
                                  PsiWhiteSpace(' ')
                                  MethodCall
                                    ReferenceExpression: Lambda
                                      PsiElement(identifier)('Lambda')
                                    ArgumentList
                                      BlockExpression
                                        PsiElement({)('{')
                                        PsiWhiteSpace('\n      ')
                                        CaseClauses
                                          CaseClause
                                            PsiElement(case)('case')
                                            PsiWhiteSpace(' ')
                                            ConstructorPattern
                                              CodeReferenceElement: List
                                                PsiElement(identifier)('List')
                                              Pattern Argument List
                                                PsiElement(()('(')
                                                Scala3 TypedPattern
                                                  ReferencePattern: arg1
                                                    PsiElement(identifier)('arg1')
                                                  PsiElement(:)(':')
                                                  PsiWhiteSpace(' ')
                                                  TypePattern
                                                    SimpleType: Int
                                                      CodeReferenceElement: Int
                                                        PsiElement(identifier)('Int')
                                                PsiElement(,)(',')
                                                PsiWhiteSpace(' ')
                                                Scala3 TypedPattern
                                                  ReferencePattern: arg2
                                                    PsiElement(identifier)('arg2')
                                                  PsiElement(:)(':')
                                                  PsiWhiteSpace(' ')
                                                  TypePattern
                                                    SimpleType: Int
                                                      CodeReferenceElement: Int
                                                        PsiElement(identifier)('Int')
                                                PsiElement())(')')
                                            PsiWhiteSpace(' ')
                                            PsiElement(=>)('=>')
                                            PsiWhiteSpace(' ')
                                            BlockOfExpressions
                                              InfixExpression
                                                ReferenceExpression: arg1
                                                  PsiElement(identifier)('arg1')
                                                PsiWhiteSpace(' ')
                                                ReferenceExpression: /
                                                  PsiElement(identifier)('/')
                                                PsiWhiteSpace(' ')
                                                ReferenceExpression: arg2
                                                  PsiElement(identifier)('arg2')
                                        PsiElement(})('}')
                                  PsiElement())(')')
                              PsiWhiteSpace('\n    ')
                              PsiElement(.)('.')
                              PsiElement(identifier)('extend')
                            ArgumentList
                              PsiElement(()('(')
                              StringLiteral
                                PsiElement(string content)('"nil"')
                              PsiElement(,)(',')
                              PsiWhiteSpace(' ')
                              ReferenceExpression: Nil
                                PsiElement(identifier)('Nil')
                              PsiElement())(')')
                          PsiWhiteSpace('\n    ')
                          PsiElement(.)('.')
                          PsiElement(identifier)('extend')
                        ArgumentList
                          PsiElement(()('(')
                          StringLiteral
                            PsiElement(string content)('"cons"')
                          PsiElement(,)(',')
                          PsiWhiteSpace(' ')
                          MethodCall
                            ReferenceExpression: Lambda
                              PsiElement(identifier)('Lambda')
                            ArgumentList
                              BlockExpression
                                PsiElement({)('{')
                                PsiWhiteSpace('\n      ')
                                CaseClauses
                                  CaseClause
                                    PsiElement(case)('case')
                                    PsiWhiteSpace(' ')
                                    ConstructorPattern
                                      CodeReferenceElement: List
                                        PsiElement(identifier)('List')
                                      Pattern Argument List
                                        PsiElement(()('(')
                                        ReferencePattern: arg1
                                          PsiElement(identifier)('arg1')
                                        PsiElement(,)(',')
                                        PsiWhiteSpace(' ')
                                        ReferencePattern: arg2
                                          PsiElement(identifier)('arg2')
                                        PsiElement())(')')
                                    PsiWhiteSpace(' ')
                                    PsiElement(=>)('=>')
                                    PsiWhiteSpace(' ')
                                    BlockOfExpressions
                                      InfixExpression
                                        ReferenceExpression: arg1
                                          PsiElement(identifier)('arg1')
                                        PsiWhiteSpace(' ')
                                        ReferenceExpression: ::
                                          PsiElement(identifier)('::')
                                        PsiWhiteSpace(' ')
                                        MethodCall
                                          ReferenceExpression: asList
                                            PsiElement(identifier)('asList')
                                          ArgumentList
                                            PsiElement(()('(')
                                            ReferenceExpression: arg2
                                              PsiElement(identifier)('arg2')
                                            PsiElement())(')')
                                PsiElement(})('}')
                          PsiElement())(')')
                      PsiWhiteSpace('\n    ')
                      PsiElement(.)('.')
                      PsiElement(identifier)('extend')
                    ArgumentList
                      PsiElement(()('(')
                      StringLiteral
                        PsiElement(string content)('"car"')
                      PsiElement(,)(',')
                      PsiWhiteSpace(' ')
                      MethodCall
                        ReferenceExpression: Lambda
                          PsiElement(identifier)('Lambda')
                        ArgumentList
                          BlockExpression
                            PsiElement({)('{')
                            PsiWhiteSpace('\n      ')
                            CaseClauses
                              CaseClause
                                PsiElement(case)('case')
                                PsiWhiteSpace(' ')
                                ConstructorPattern
                                  CodeReferenceElement: List
                                    PsiElement(identifier)('List')
                                  Pattern Argument List
                                    PsiElement(()('(')
                                    InfixPattern
                                      ReferencePattern: x
                                        PsiElement(identifier)('x')
                                      PsiWhiteSpace(' ')
                                      CodeReferenceElement: ::
                                        PsiElement(identifier)('::')
                                      PsiWhiteSpace(' ')
                                      ReferencePattern: xs
                                        PsiElement(identifier)('xs')
                                    PsiElement())(')')
                                PsiWhiteSpace(' ')
                                PsiElement(=>)('=>')
                                PsiWhiteSpace(' ')
                                BlockOfExpressions
                                  ReferenceExpression: x
                                    PsiElement(identifier)('x')
                            PsiElement(})('}')
                      PsiElement())(')')
                  PsiWhiteSpace('\n    ')
                  PsiElement(.)('.')
                  PsiElement(identifier)('extend')
                ArgumentList
                  PsiElement(()('(')
                  StringLiteral
                    PsiElement(string content)('"cdr"')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  MethodCall
                    ReferenceExpression: Lambda
                      PsiElement(identifier)('Lambda')
                    ArgumentList
                      BlockExpression
                        PsiElement({)('{')
                        PsiWhiteSpace('\n      ')
                        CaseClauses
                          CaseClause
                            PsiElement(case)('case')
                            PsiWhiteSpace(' ')
                            ConstructorPattern
                              CodeReferenceElement: List
                                PsiElement(identifier)('List')
                              Pattern Argument List
                                PsiElement(()('(')
                                InfixPattern
                                  ReferencePattern: x
                                    PsiElement(identifier)('x')
                                  PsiWhiteSpace(' ')
                                  CodeReferenceElement: ::
                                    PsiElement(identifier)('::')
                                  PsiWhiteSpace(' ')
                                  ReferencePattern: xs
                                    PsiElement(identifier)('xs')
                                PsiElement())(')')
                            PsiWhiteSpace(' ')
                            PsiElement(=>)('=>')
                            PsiWhiteSpace(' ')
                            BlockOfExpressions
                              ReferenceExpression: xs
                                PsiElement(identifier)('xs')
                        PsiElement(})('}')
                  PsiElement())(')')
              PsiWhiteSpace('\n    ')
              PsiElement(.)('.')
              PsiElement(identifier)('extend')
            ArgumentList
              PsiElement(()('(')
              StringLiteral
                PsiElement(string content)('"null?"')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              MethodCall
                ReferenceExpression: Lambda
                  PsiElement(identifier)('Lambda')
                ArgumentList
                  BlockExpression
                    PsiElement({)('{')
                    PsiWhiteSpace('\n      ')
                    CaseClauses
                      CaseClause
                        PsiElement(case)('case')
                        PsiWhiteSpace(' ')
                        ConstructorPattern
                          CodeReferenceElement: List
                            PsiElement(identifier)('List')
                          Pattern Argument List
                            PsiElement(()('(')
                            StableElementPattern
                              ReferenceExpression: Nil
                                PsiElement(identifier)('Nil')
                            PsiElement())(')')
                        PsiWhiteSpace(' ')
                        PsiElement(=>)('=>')
                        PsiWhiteSpace(' ')
                        BlockOfExpressions
                          IntegerLiteral
                            PsiElement(integer)('1')
                      PsiWhiteSpace('\n      ')
                      CaseClause
                        PsiElement(case)('case')
                        PsiWhiteSpace(' ')
                        WildcardPattern
                          PsiElement(_)('_')
                        PsiWhiteSpace(' ')
                        PsiElement(=>)('=>')
                        PsiWhiteSpace(' ')
                        BlockOfExpressions
                          IntegerLiteral
                            PsiElement(integer)('0')
                    PsiElement(})('}')
              PsiElement())(')')
        PsiElement(;)(';')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: evaluate
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('evaluate')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: x
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Data
                    CodeReferenceElement: Data
                      PsiElement(identifier)('Data')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Data
            CodeReferenceElement: Data
              PsiElement(identifier)('Data')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: eval
              PsiElement(identifier)('eval')
            ArgumentList
              PsiElement(()('(')
              MethodCall
                ReferenceExpression: normalize
                  PsiElement(identifier)('normalize')
                ArgumentList
                  PsiElement(()('(')
                  ReferenceExpression: x
                    PsiElement(identifier)('x')
                  PsiElement())(')')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              ReferenceExpression: globalEnv
                PsiElement(identifier)('globalEnv')
              PsiElement())(')')
        PsiElement(;)(';')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: evaluate
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('evaluate')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: s
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('s')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: String
                    CodeReferenceElement: String
                      PsiElement(identifier)('String')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Data
            CodeReferenceElement: Data
              PsiElement(identifier)('Data')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: evaluate
              PsiElement(identifier)('evaluate')
            ArgumentList
              PsiElement(()('(')
              MethodCall
                ReferenceExpression: string2lisp
                  PsiElement(identifier)('string2lisp')
                ArgumentList
                  PsiElement(()('(')
                  ReferenceExpression: s
                    PsiElement(identifier)('s')
                  PsiElement())(')')
              PsiElement())(')')
        PsiElement(;)(';')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: string2lisp
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('string2lisp')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: s
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('s')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: String
                    CodeReferenceElement: String
                      PsiElement(identifier)('String')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Data
            CodeReferenceElement: Data
              PsiElement(identifier)('Data')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          BlockExpression
            PsiElement({)('{')
            PsiWhiteSpace('\n    ')
            ScPatternDefinition: it
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              ListOfPatterns
                ReferencePattern: it
                  PsiElement(identifier)('it')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              ScNewTemplateDefinition: <anonymous>
                PsiElement(new)('new')
                PsiWhiteSpace(' ')
                ExtendsBlock
                  TemplateParents
                    ConstructorInvocation
                      SimpleType: LispTokenizer
                        CodeReferenceElement: LispTokenizer
                          PsiElement(identifier)('LispTokenizer')
                      ArgumentList
                        PsiElement(()('(')
                        ReferenceExpression: s
                          PsiElement(identifier)('s')
                        PsiElement())(')')
            PsiElement(;)(';')
            PsiWhiteSpace('\n    ')
            ScFunctionDefinition: parse
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(def)('def')
              PsiWhiteSpace(' ')
              PsiElement(identifier)('parse')
              Parameters
                ParametersClause
                  PsiElement(()('(')
                  Parameter: token
                    AnnotationsList
                      <empty list>
                    Modifiers
                      <empty list>
                    PsiElement(identifier)('token')
                    PsiElement(:)(':')
                    PsiWhiteSpace(' ')
                    ParameterType
                      SimpleType: String
                        CodeReferenceElement: String
                          PsiElement(identifier)('String')
                  PsiElement())(')')
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              SimpleType: Data
                CodeReferenceElement: Data
                  PsiElement(identifier)('Data')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              BlockExpression
                PsiElement({)('{')
                PsiWhiteSpace('\n      ')
                IfStatement
                  PsiElement(if)('if')
                  PsiWhiteSpace(' ')
                  PsiElement(()('(')
                  InfixExpression
                    ReferenceExpression: token
                      PsiElement(identifier)('token')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: ==
                      PsiElement(identifier)('==')
                    PsiWhiteSpace(' ')
                    StringLiteral
                      PsiElement(string content)('"("')
                  PsiElement())(')')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: parseList
                    PsiElement(identifier)('parseList')
                  PsiWhiteSpace('\n      ')
                  PsiElement(else)('else')
                  PsiWhiteSpace(' ')
                  IfStatement
                    PsiElement(if)('if')
                    PsiWhiteSpace(' ')
                    PsiElement(()('(')
                    InfixExpression
                      ReferenceExpression: token
                        PsiElement(identifier)('token')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: ==
                        PsiElement(identifier)('==')
                      PsiWhiteSpace(' ')
                      StringLiteral
                        PsiElement(string content)('")"')
                    PsiElement())(')')
                    PsiWhiteSpace(' ')
                    MethodCall
                      ReferenceExpression: sys.error
                        ReferenceExpression: sys
                          PsiElement(identifier)('sys')
                        PsiElement(.)('.')
                        PsiElement(identifier)('error')
                      ArgumentList
                        PsiElement(()('(')
                        StringLiteral
                          PsiElement(string content)('"unbalanced parentheses"')
                        PsiElement())(')')
                    PsiWhiteSpace('\n      ')
                    PsiComment(comment)('//else if (Character.isDigit(token.charAt(0)))')
                    PsiWhiteSpace('\n      ')
                    PsiElement(else)('else')
                    PsiWhiteSpace(' ')
                    IfStatement
                      PsiElement(if)('if')
                      PsiWhiteSpace(' ')
                      PsiElement(()('(')
                      ReferenceExpression: token.charAt(0).isDigit
                        MethodCall
                          ReferenceExpression: token.charAt
                            ReferenceExpression: token
                              PsiElement(identifier)('token')
                            PsiElement(.)('.')
                            PsiElement(identifier)('charAt')
                          ArgumentList
                            PsiElement(()('(')
                            IntegerLiteral
                              PsiElement(integer)('0')
                            PsiElement())(')')
                        PsiElement(.)('.')
                        PsiElement(identifier)('isDigit')
                      PsiElement())(')')
                      PsiWhiteSpace('\n        ')
                      ReferenceExpression: token.toInt
                        ReferenceExpression: token
                          PsiElement(identifier)('token')
                        PsiElement(.)('.')
                        PsiElement(identifier)('toInt')
                      PsiWhiteSpace('\n      ')
                      PsiElement(else)('else')
                      PsiWhiteSpace(' ')
                      IfStatement
                        PsiElement(if)('if')
                        PsiWhiteSpace(' ')
                        PsiElement(()('(')
                        InfixExpression
                          InfixExpression
                            MethodCall
                              ReferenceExpression: token.charAt
                                ReferenceExpression: token
                                  PsiElement(identifier)('token')
                                PsiElement(.)('.')
                                PsiElement(identifier)('charAt')
                              ArgumentList
                                PsiElement(()('(')
                                IntegerLiteral
                                  PsiElement(integer)('0')
                                PsiElement())(')')
                            PsiWhiteSpace(' ')
                            ReferenceExpression: ==
                              PsiElement(identifier)('==')
                            PsiWhiteSpace(' ')
                            CharLiteral
                              PsiElement(Character)(''\"'')
                          PsiWhiteSpace(' ')
                          ReferenceExpression: &&
                            PsiElement(identifier)('&&')
                          PsiWhiteSpace(' ')
                          InfixExpression
                            MethodCall
                              ReferenceExpression: token.charAt
                                ReferenceExpression: token
                                  PsiElement(identifier)('token')
                                PsiElement(.)('.')
                                PsiElement(identifier)('charAt')
                              ArgumentList
                                PsiElement(()('(')
                                InfixExpression
                                  MethodCall
                                    ReferenceExpression: token.length
                                      ReferenceExpression: token
                                        PsiElement(identifier)('token')
                                      PsiElement(.)('.')
                                      PsiElement(identifier)('length')
                                    ArgumentList
                                      PsiElement(()('(')
                                      PsiElement())(')')
                                  ReferenceExpression: -
                                    PsiElement(identifier)('-')
                                  IntegerLiteral
                                    PsiElement(integer)('1')
                                PsiElement())(')')
                            ReferenceExpression: ==
                              PsiElement(identifier)('==')
                            CharLiteral
                              PsiElement(Character)(''\"'')
                        PsiElement())(')')
                        PsiWhiteSpace('\n        ')
                        MethodCall
                          ReferenceExpression: token.substring
                            ReferenceExpression: token
                              PsiElement(identifier)('token')
                            PsiElement(.)('.')
                            PsiElement(identifier)('substring')
                          ArgumentList
                            PsiElement(()('(')
                            IntegerLiteral
                              PsiElement(integer)('1')
                            PsiElement(,)(',')
                            InfixExpression
                              MethodCall
                                ReferenceExpression: token.length
                                  ReferenceExpression: token
                                    PsiElement(identifier)('token')
                                  PsiElement(.)('.')
                                  PsiElement(identifier)('length')
                                ArgumentList
                                  PsiElement(()('(')
                                  PsiElement())(')')
                              PsiWhiteSpace(' ')
                              ReferenceExpression: -
                                PsiElement(identifier)('-')
                              PsiWhiteSpace(' ')
                              IntegerLiteral
                                PsiElement(integer)('1')
                            PsiElement())(')')
                        PsiWhiteSpace('\n      ')
                        PsiElement(else)('else')
                        PsiWhiteSpace(' ')
                        MethodCall
                          ReferenceExpression: Symbol
                            PsiElement(identifier)('Symbol')
                          ArgumentList
                            PsiElement(()('(')
                            ReferenceExpression: token
                              PsiElement(identifier)('token')
                            PsiElement())(')')
                PsiWhiteSpace('\n    ')
                PsiElement(})('}')
            PsiWhiteSpace('\n    ')
            ScFunctionDefinition: parseList
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(def)('def')
              PsiWhiteSpace(' ')
              PsiElement(identifier)('parseList')
              Parameters
                <empty list>
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              ParametrizedType: List[Data]
                SimpleType: List
                  CodeReferenceElement: List
                    PsiElement(identifier)('List')
                TypeArgumentsList
                  PsiElement([)('[')
                  SimpleType: Data
                    CodeReferenceElement: Data
                      PsiElement(identifier)('Data')
                  PsiElement(])(']')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              BlockExpression
                PsiElement({)('{')
                PsiWhiteSpace('\n      ')
                ScPatternDefinition: token
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(val)('val')
                  PsiWhiteSpace(' ')
                  ListOfPatterns
                    ReferencePattern: token
                      PsiElement(identifier)('token')
                  PsiWhiteSpace(' ')
                  PsiElement(=)('=')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: it.next
                    ReferenceExpression: it
                      PsiElement(identifier)('it')
                    PsiElement(.)('.')
                    PsiElement(identifier)('next')
                PsiElement(;)(';')
                PsiWhiteSpace('\n      ')
                IfStatement
                  PsiElement(if)('if')
                  PsiWhiteSpace(' ')
                  PsiElement(()('(')
                  InfixExpression
                    ReferenceExpression: token
                      PsiElement(identifier)('token')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: ==
                      PsiElement(identifier)('==')
                    PsiWhiteSpace(' ')
                    StringLiteral
                      PsiElement(string content)('")"')
                  PsiElement())(')')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: Nil
                    PsiElement(identifier)('Nil')
                  PsiWhiteSpace(' ')
                  PsiElement(else)('else')
                  PsiWhiteSpace(' ')
                  InfixExpression
                    MethodCall
                      ReferenceExpression: parse
                        PsiElement(identifier)('parse')
                      ArgumentList
                        PsiElement(()('(')
                        ReferenceExpression: token
                          PsiElement(identifier)('token')
                        PsiElement())(')')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: ::
                      PsiElement(identifier)('::')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: parseList
                      PsiElement(identifier)('parseList')
                PsiWhiteSpace('\n    ')
                PsiElement(})('}')
            PsiWhiteSpace('\n    ')
            MethodCall
              ReferenceExpression: parse
                PsiElement(identifier)('parse')
              ArgumentList
                PsiElement(()('(')
                ReferenceExpression: it.next
                  ReferenceExpression: it
                    PsiElement(identifier)('it')
                  PsiElement(.)('.')
                  PsiElement(identifier)('next')
                PsiElement())(')')
            PsiWhiteSpace('\n  ')
            PsiElement(})('}')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  PsiComment(comment)('//############################################################################')
  PsiWhiteSpace('\n')
  PsiComment(comment)('// List User')
  PsiWhiteSpace('\n\n')
  ScClass: LispUser
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('LispUser')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        ParametersClause
          PsiElement(()('(')
          ClassParameter: lisp
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(identifier)('lisp')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            ParameterType
              SimpleType: Lisp
                CodeReferenceElement: Lisp
                  PsiElement(identifier)('Lisp')
          PsiElement())(')')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n\n  ')
        ScImportStatement
          PsiElement(import)('import')
          PsiWhiteSpace(' ')
          ImportExpression
            CodeReferenceElement: lisp
              PsiElement(identifier)('lisp')
            PsiElement(.)('.')
            PsiElement(_)('_')
        PsiElement(;)(';')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: evaluate
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('evaluate')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: s
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('s')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: String
                    CodeReferenceElement: String
                      PsiElement(identifier)('String')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: lisp2string
              PsiElement(identifier)('lisp2string')
            ArgumentList
              PsiElement(()('(')
              MethodCall
                ReferenceExpression: lisp.evaluate
                  ReferenceExpression: lisp
                    PsiElement(identifier)('lisp')
                  PsiElement(.)('.')
                  PsiElement(identifier)('evaluate')
                ArgumentList
                  PsiElement(()('(')
                  ReferenceExpression: s
                    PsiElement(identifier)('s')
                  PsiElement())(')')
              PsiElement())(')')
        PsiElement(;)(';')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: run
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('run')
          Parameters
            <empty list>
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          BlockExpression
            PsiElement({)('{')
            PsiWhiteSpace('\n\n    ')
            MethodCall
              ReferenceExpression: Console.println
                ReferenceExpression: Console
                  PsiElement(identifier)('Console')
                PsiElement(.)('.')
                PsiElement(identifier)('println')
              ArgumentList
                PsiElement(()('(')
                GenericCall
                  ReferenceExpression: string2lisp("(lambda (x) (+ (* x x) 1))").asInstanceOf
                    MethodCall
                      ReferenceExpression: string2lisp
                        PsiElement(identifier)('string2lisp')
                      ArgumentList
                        PsiElement(()('(')
                        StringLiteral
                          PsiElement(string content)('"(lambda (x) (+ (* x x) 1))"')
                        PsiElement())(')')
                    PsiElement(.)('.')
                    PsiElement(identifier)('asInstanceOf')
                  TypeArgumentsList
                    PsiElement([)('[')
                    SimpleType: AnyRef
                      CodeReferenceElement: AnyRef
                        PsiElement(identifier)('AnyRef')
                    PsiElement(])(']')
                PsiElement())(')')
            PsiElement(;)(';')
            PsiWhiteSpace('\n    ')
            MethodCall
              ReferenceExpression: Console.println
                ReferenceExpression: Console
                  PsiElement(identifier)('Console')
                PsiElement(.)('.')
                PsiElement(identifier)('println')
              ArgumentList
                PsiElement(()('(')
                MethodCall
                  ReferenceExpression: lisp2string
                    PsiElement(identifier)('lisp2string')
                  ArgumentList
                    PsiElement(()('(')
                    MethodCall
                      ReferenceExpression: string2lisp
                        PsiElement(identifier)('string2lisp')
                      ArgumentList
                        PsiElement(()('(')
                        StringLiteral
                          PsiElement(string content)('"(lambda (x) (+ (* x x) 1))"')
                        PsiElement())(')')
                    PsiElement())(')')
                PsiElement())(')')
            PsiElement(;)(';')
            PsiWhiteSpace('\n    ')
            MethodCall
              ReferenceExpression: Console.println
                ReferenceExpression: Console
                  PsiElement(identifier)('Console')
                PsiElement(.)('.')
                PsiElement(identifier)('println')
              ArgumentList
                PsiElement(()('(')
                PsiElement())(')')
            PsiElement(;)(';')
            PsiWhiteSpace('\n\n    ')
            MethodCall
              ReferenceExpression: Console.println
                ReferenceExpression: Console
                  PsiElement(identifier)('Console')
                PsiElement(.)('.')
                PsiElement(identifier)('println')
              ArgumentList
                PsiElement(()('(')
                InfixExpression
                  StringLiteral
                    PsiElement(string content)('"(    '(1 2 3)) = "')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: +
                    PsiElement(identifier)('+')
                  PsiWhiteSpace(' ')
                  MethodCall
                    ReferenceExpression: evaluate
                      PsiElement(identifier)('evaluate')
                    ArgumentList
                      PsiElement(()('(')
                      StringLiteral
                        PsiElement(string content)('"     (quote(1 2 3))"')
                      PsiElement())(')')
                PsiElement())(')')
            PsiElement(;)(';')
            PsiWhiteSpace('\n    ')
            MethodCall
              ReferenceExpression: Console.println
                ReferenceExpression: Console
                  PsiElement(identifier)('Console')
                PsiElement(.)('.')
                PsiElement(identifier)('println')
              ArgumentList
                PsiElement(()('(')
                InfixExpression
                  StringLiteral
                    PsiElement(string content)('"(car '(1 2 3)) = "')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: +
                    PsiElement(identifier)('+')
                  PsiWhiteSpace(' ')
                  MethodCall
                    ReferenceExpression: evaluate
                      PsiElement(identifier)('evaluate')
                    ArgumentList
                      PsiElement(()('(')
                      StringLiteral
                        PsiElement(string content)('"(car (quote(1 2 3)))"')
                      PsiElement())(')')
                PsiElement())(')')
            PsiElement(;)(';')
            PsiWhiteSpace('\n    ')
            MethodCall
              ReferenceExpression: Console.println
                ReferenceExpression: Console
                  PsiElement(identifier)('Console')
                PsiElement(.)('.')
                PsiElement(identifier)('println')
              ArgumentList
                PsiElement(()('(')
                InfixExpression
                  StringLiteral
                    PsiElement(string content)('"(cdr '(1 2 3)) = "')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: +
                    PsiElement(identifier)('+')
                  PsiWhiteSpace(' ')
                  MethodCall
                    ReferenceExpression: evaluate
                      PsiElement(identifier)('evaluate')
                    ArgumentList
                      PsiElement(()('(')
                      StringLiteral
                        PsiElement(string content)('"(cdr (quote(1 2 3)))"')
                      PsiElement())(')')
                PsiElement())(')')
            PsiElement(;)(';')
            PsiWhiteSpace('\n    ')
            MethodCall
              ReferenceExpression: Console.println
                ReferenceExpression: Console
                  PsiElement(identifier)('Console')
                PsiElement(.)('.')
                PsiElement(identifier)('println')
              ArgumentList
                PsiElement(()('(')
                InfixExpression
                  StringLiteral
                    PsiElement(string content)('"(null? '(2 3)) = "')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: +
                    PsiElement(identifier)('+')
                  PsiWhiteSpace(' ')
                  MethodCall
                    ReferenceExpression: evaluate
                      PsiElement(identifier)('evaluate')
                    ArgumentList
                      PsiElement(()('(')
                      StringLiteral
                        PsiElement(string content)('"(null? (quote(2 3)))"')
                      PsiElement())(')')
                PsiElement())(')')
            PsiElement(;)(';')
            PsiWhiteSpace('\n    ')
            MethodCall
              ReferenceExpression: Console.println
                ReferenceExpression: Console
                  PsiElement(identifier)('Console')
                PsiElement(.)('.')
                PsiElement(identifier)('println')
              ArgumentList
                PsiElement(()('(')
                InfixExpression
                  StringLiteral
                    PsiElement(string content)('"(null?    '()) = "')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: +
                    PsiElement(identifier)('+')
                  PsiWhiteSpace(' ')
                  MethodCall
                    ReferenceExpression: evaluate
                      PsiElement(identifier)('evaluate')
                    ArgumentList
                      PsiElement(()('(')
                      StringLiteral
                        PsiElement(string content)('"(null?    (quote()))"')
                      PsiElement())(')')
                PsiElement())(')')
            PsiElement(;)(';')
            PsiWhiteSpace('\n    ')
            MethodCall
              ReferenceExpression: Console.println
                ReferenceExpression: Console
                  PsiElement(identifier)('Console')
                PsiElement(.)('.')
                PsiElement(identifier)('println')
              ArgumentList
                PsiElement(()('(')
                PsiElement())(')')
            PsiElement(;)(';')
            PsiWhiteSpace('\n\n    ')
            MethodCall
              ReferenceExpression: Console.println
                ReferenceExpression: Console
                  PsiElement(identifier)('Console')
                PsiElement(.)('.')
                PsiElement(identifier)('println')
              ArgumentList
                PsiElement(()('(')
                InfixExpression
                  StringLiteral
                    PsiElement(string content)('"faculty(10) = "')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: +
                    PsiElement(identifier)('+')
                  PsiWhiteSpace(' ')
                  MethodCall
                    ReferenceExpression: evaluate
                      PsiElement(identifier)('evaluate')
                    ArgumentList
                      PsiElement(()('(')
                      PsiWhiteSpace('\n      ')
                      InfixExpression
                        InfixExpression
                          InfixExpression
                            InfixExpression
                              StringLiteral
                                PsiElement(string content)('"(def (faculty n) "')
                              PsiWhiteSpace(' ')
                              ReferenceExpression: +
                                PsiElement(identifier)('+')
                              PsiWhiteSpace('\n        ')
                              StringLiteral
                                PsiElement(string content)('"(if (= n 0) "')
                            PsiWhiteSpace(' ')
                            ReferenceExpression: +
                              PsiElement(identifier)('+')
                            PsiWhiteSpace('\n          ')
                            StringLiteral
                              PsiElement(string content)('"1 "')
                          PsiWhiteSpace(' ')
                          ReferenceExpression: +
                            PsiElement(identifier)('+')
                          PsiWhiteSpace('\n          ')
                          StringLiteral
                            PsiElement(string content)('"(* n (faculty (- n 1)))) "')
                        PsiWhiteSpace(' ')
                        ReferenceExpression: +
                          PsiElement(identifier)('+')
                        PsiWhiteSpace('\n        ')
                        StringLiteral
                          PsiElement(string content)('"(faculty 10))"')
                      PsiElement())(')')
                PsiElement())(')')
            PsiElement(;)(';')
            PsiWhiteSpace('\n    ')
            MethodCall
              ReferenceExpression: Console.println
                ReferenceExpression: Console
                  PsiElement(identifier)('Console')
                PsiElement(.)('.')
                PsiElement(identifier)('println')
              ArgumentList
                PsiElement(()('(')
                InfixExpression
                  StringLiteral
                    PsiElement(string content)('"faculty(10) = "')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: +
                    PsiElement(identifier)('+')
                  PsiWhiteSpace(' ')
                  MethodCall
                    ReferenceExpression: evaluate
                      PsiElement(identifier)('evaluate')
                    ArgumentList
                      PsiElement(()('(')
                      PsiWhiteSpace('\n      ')
                      InfixExpression
                        InfixExpression
                          InfixExpression
                            InfixExpression
                              StringLiteral
                                PsiElement(string content)('"(def (faculty n) "')
                              PsiWhiteSpace(' ')
                              ReferenceExpression: +
                                PsiElement(identifier)('+')
                              PsiWhiteSpace('\n        ')
                              StringLiteral
                                PsiElement(string content)('"(cond "')
                            PsiWhiteSpace(' ')
                            ReferenceExpression: +
                              PsiElement(identifier)('+')
                            PsiWhiteSpace('\n          ')
                            StringLiteral
                              PsiElement(string content)('"((= n 0) 1) "')
                          PsiWhiteSpace(' ')
                          ReferenceExpression: +
                            PsiElement(identifier)('+')
                          PsiWhiteSpace('\n          ')
                          StringLiteral
                            PsiElement(string content)('"(else (* n (faculty (- n 1))))) "')
                        PsiWhiteSpace(' ')
                        ReferenceExpression: +
                          PsiElement(identifier)('+')
                        PsiWhiteSpace('\n        ')
                        StringLiteral
                          PsiElement(string content)('"(faculty 10))"')
                      PsiElement())(')')
                PsiElement())(')')
            PsiElement(;)(';')
            PsiWhiteSpace('\n    ')
            MethodCall
              ReferenceExpression: Console.println
                ReferenceExpression: Console
                  PsiElement(identifier)('Console')
                PsiElement(.)('.')
                PsiElement(identifier)('println')
              ArgumentList
                PsiElement(()('(')
                InfixExpression
                  StringLiteral
                    PsiElement(string content)('"foobar = "')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: +
                    PsiElement(identifier)('+')
                  PsiWhiteSpace(' ')
                  MethodCall
                    ReferenceExpression: evaluate
                      PsiElement(identifier)('evaluate')
                    ArgumentList
                      PsiElement(()('(')
                      PsiWhiteSpace('\n      ')
                      InfixExpression
                        InfixExpression
                          InfixExpression
                            InfixExpression
                              InfixExpression
                                InfixExpression
                                  InfixExpression
                                    InfixExpression
                                      InfixExpression
                                        InfixExpression
                                          InfixExpression
                                            InfixExpression
                                              InfixExpression
                                                InfixExpression
                                                  InfixExpression
                                                    InfixExpression
                                                      InfixExpression
                                                        InfixExpression
                                                          InfixExpression
                                                            InfixExpression
                                                              StringLiteral
                                                                PsiElement(string content)('"(def (foo n) "')
                                                              PsiWhiteSpace(' ')
                                                              ReferenceExpression: +
                                                                PsiElement(identifier)('+')
                                                              PsiWhiteSpace('\n        ')
                                                              StringLiteral
                                                                PsiElement(string content)('"(cond "')
                                                            PsiWhiteSpace(' ')
                                                            ReferenceExpression: +
                                                              PsiElement(identifier)('+')
                                                            PsiWhiteSpace('\n          ')
                                                            StringLiteral
                                                              PsiElement(string content)('"((= n 0) \"a\")"')
                                                          PsiWhiteSpace(' ')
                                                          ReferenceExpression: +
                                                            PsiElement(identifier)('+')
                                                          PsiWhiteSpace('\n          ')
                                                          StringLiteral
                                                            PsiElement(string content)('"((= n 1) \"b\")"')
                                                        PsiWhiteSpace(' ')
                                                        ReferenceExpression: +
                                                          PsiElement(identifier)('+')
                                                        PsiWhiteSpace('\n          ')
                                                        StringLiteral
                                                          PsiElement(string content)('"((= (/ n 2) 1) "')
                                                      PsiWhiteSpace(' ')
                                                      ReferenceExpression: +
                                                        PsiElement(identifier)('+')
                                                      PsiWhiteSpace('\n            ')
                                                      StringLiteral
                                                        PsiElement(string content)('"(cond "')
                                                    PsiWhiteSpace(' ')
                                                    ReferenceExpression: +
                                                      PsiElement(identifier)('+')
                                                    PsiWhiteSpace('\n              ')
                                                    StringLiteral
                                                      PsiElement(string content)('"((= n 2) \"c\")"')
                                                  PsiWhiteSpace(' ')
                                                  ReferenceExpression: +
                                                    PsiElement(identifier)('+')
                                                  PsiWhiteSpace('\n              ')
                                                  StringLiteral
                                                    PsiElement(string content)('"(else    \"d\")))"')
                                                PsiWhiteSpace(' ')
                                                ReferenceExpression: +
                                                  PsiElement(identifier)('+')
                                                PsiWhiteSpace('\n          ')
                                                StringLiteral
                                                  PsiElement(string content)('"(else "')
                                              PsiWhiteSpace(' ')
                                              ReferenceExpression: +
                                                PsiElement(identifier)('+')
                                              PsiWhiteSpace('\n            ')
                                              StringLiteral
                                                PsiElement(string content)('"(def (bar m) "')
                                            PsiWhiteSpace(' ')
                                            ReferenceExpression: +
                                              PsiElement(identifier)('+')
                                            PsiWhiteSpace('\n              ')
                                            StringLiteral
                                              PsiElement(string content)('"(cond "')
                                          PsiWhiteSpace(' ')
                                          ReferenceExpression: +
                                            PsiElement(identifier)('+')
                                          PsiWhiteSpace('\n                ')
                                          StringLiteral
                                            PsiElement(string content)('"((= m 0) \"e\")"')
                                        PsiWhiteSpace(' ')
                                        ReferenceExpression: +
                                          PsiElement(identifier)('+')
                                        PsiWhiteSpace('\n                ')
                                        StringLiteral
                                          PsiElement(string content)('"((= m 1) \"f\")"')
                                      PsiWhiteSpace(' ')
                                      ReferenceExpression: +
                                        PsiElement(identifier)('+')
                                      PsiWhiteSpace('\n                ')
                                      StringLiteral
                                        PsiElement(string content)('"(else    \"z\"))"')
                                    PsiWhiteSpace(' ')
                                    ReferenceExpression: +
                                      PsiElement(identifier)('+')
                                    PsiWhiteSpace('\n              ')
                                    StringLiteral
                                      PsiElement(string content)('"(bar (- n 4)))))"')
                                  PsiWhiteSpace(' ')
                                  ReferenceExpression: +
                                    PsiElement(identifier)('+')
                                  PsiWhiteSpace('\n        ')
                                  StringLiteral
                                    PsiElement(string content)('"(val nil (quote ())"')
                                PsiWhiteSpace(' ')
                                ReferenceExpression: +
                                  PsiElement(identifier)('+')
                                PsiWhiteSpace('\n          ')
                                StringLiteral
                                  PsiElement(string content)('"(val v1 (foo 0) "')
                              PsiWhiteSpace(' ')
                              ReferenceExpression: +
                                PsiElement(identifier)('+')
                              PsiWhiteSpace('\n            ')
                              StringLiteral
                                PsiElement(string content)('"(val v2 (+ (foo 1) (foo 2)) "')
                            PsiWhiteSpace(' ')
                            ReferenceExpression: +
                              PsiElement(identifier)('+')
                            PsiWhiteSpace('\n              ')
                            StringLiteral
                              PsiElement(string content)('"(val v3 (+ (+ (foo 3) (foo 4)) (foo 5)) "')
                          PsiWhiteSpace(' ')
                          ReferenceExpression: +
                            PsiElement(identifier)('+')
                          PsiWhiteSpace('\n                ')
                          StringLiteral
                            PsiElement(string content)('"(val v4 (foo 6) "')
                        PsiWhiteSpace(' ')
                        ReferenceExpression: +
                          PsiElement(identifier)('+')
                        PsiWhiteSpace('\n                  ')
                        StringLiteral
                          PsiElement(string content)('"(cons v1 (cons v2 (cons v3 (cons v4 nil))))))))))"')
                      PsiElement())(')')
                PsiElement())(')')
            PsiElement(;)(';')
            PsiWhiteSpace('\n    ')
            MethodCall
              ReferenceExpression: Console.println
                ReferenceExpression: Console
                  PsiElement(identifier)('Console')
                PsiElement(.)('.')
                PsiElement(identifier)('println')
              ArgumentList
                PsiElement(()('(')
                PsiElement())(')')
            PsiElement(;)(';')
            PsiWhiteSpace('\n  ')
            PsiElement(})('}')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  PsiComment(comment)('//############################################################################')
  PsiWhiteSpace('\n')
  PsiComment(comment)('// Main')
  PsiWhiteSpace('\n\n')
  ScObject: Test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: main
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('main')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: args
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('args')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  ParametrizedType: Array[String]
                    SimpleType: Array
                      CodeReferenceElement: Array
                        PsiElement(identifier)('Array')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: String
                        CodeReferenceElement: String
                          PsiElement(identifier)('String')
                      PsiElement(])(']')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Unit
            CodeReferenceElement: Unit
              PsiElement(identifier)('Unit')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          BlockExpression
            PsiElement({)('{')
            PsiWhiteSpace('\n    ')
            ReferenceExpression: new LispUser(LispCaseClasses).run
              ScNewTemplateDefinition: <anonymous>
                PsiElement(new)('new')
                PsiWhiteSpace(' ')
                ExtendsBlock
                  TemplateParents
                    ConstructorInvocation
                      SimpleType: LispUser
                        CodeReferenceElement: LispUser
                          PsiElement(identifier)('LispUser')
                      ArgumentList
                        PsiElement(()('(')
                        ReferenceExpression: LispCaseClasses
                          PsiElement(identifier)('LispCaseClasses')
                        PsiElement())(')')
              PsiElement(.)('.')
              PsiElement(identifier)('run')
            PsiElement(;)(';')
            PsiWhiteSpace('\n    ')
            ReferenceExpression: new LispUser(LispAny).run
              ScNewTemplateDefinition: <anonymous>
                PsiElement(new)('new')
                PsiWhiteSpace(' ')
                ExtendsBlock
                  TemplateParents
                    ConstructorInvocation
                      SimpleType: LispUser
                        CodeReferenceElement: LispUser
                          PsiElement(identifier)('LispUser')
                      ArgumentList
                        PsiElement(()('(')
                        ReferenceExpression: LispAny
                          PsiElement(identifier)('LispAny')
                        PsiElement())(')')
              PsiElement(.)('.')
              PsiElement(identifier)('run')
            PsiElement(;)(';')
            PsiWhiteSpace('\n    ')
            UnitExpression
              PsiElement(()('(')
              PsiElement())(')')
            PsiWhiteSpace('\n  ')
            PsiElement(})('}')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  PsiComment(comment)('//############################################################################')
