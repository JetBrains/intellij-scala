
package object t7322 {
  implicit class X(sc: StringContext) {
    def x_?(args: Any*) = "hi there"
  }
}
package t7322 {
  trait Y {
    x_?"junk"  // assume that if it compiles, it works
  }
}
-----
ScalaFile
  ScObject: t7322
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(package)('package')
    PsiWhiteSpace(' ')
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('t7322')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScClass: X
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(implicit)('implicit')
          PsiWhiteSpace(' ')
          PsiElement(class)('class')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('X')
          PrimaryConstructor
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            Parameters
              ParametersClause
                PsiElement(()('(')
                ClassParameter: sc
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(identifier)('sc')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    SimpleType: StringContext
                      CodeReferenceElement: StringContext
                        PsiElement(identifier)('StringContext')
                PsiElement())(')')
          PsiWhiteSpace(' ')
          ExtendsBlock
            ScTemplateBody
              PsiElement({)('{')
              PsiWhiteSpace('\n    ')
              ScFunctionDefinition: x_?
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(def)('def')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('x_?')
                Parameters
                  ParametersClause
                    PsiElement(()('(')
                    Parameter: args
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(identifier)('args')
                      PsiElement(:)(':')
                      PsiWhiteSpace(' ')
                      ParameterType
                        SimpleType: Any
                          CodeReferenceElement: Any
                            PsiElement(identifier)('Any')
                        PsiElement(identifier)('*')
                    PsiElement())(')')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                StringLiteral
                  PsiElement(string content)('"hi there"')
              PsiWhiteSpace('\n  ')
              PsiElement(})('}')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n')
  ScPackaging
    PsiElement(package)('package')
    PsiWhiteSpace(' ')
    CodeReferenceElement: t7322
      PsiElement(identifier)('t7322')
    PsiWhiteSpace(' ')
    PsiElement({)('{')
    PsiWhiteSpace('\n  ')
    ScTrait: Y
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      PsiElement(trait)('trait')
      PsiWhiteSpace(' ')
      PsiElement(identifier)('Y')
      PsiWhiteSpace(' ')
      ExtendsBlock
        ScTemplateBody
          PsiElement({)('{')
          PsiWhiteSpace('\n    ')
          InterpolatedStringLiteral
            InterpolatedExpressionPrefix: x_?
              PsiElement(interpolated string id)('x_?')
            PsiElement(interpolated string)('"junk')
            PsiElement(interpolated string end)('"')
          PsiWhiteSpace('  ')
          PsiComment(comment)('// assume that if it compiles, it works')
          PsiWhiteSpace('\n  ')
          PsiElement(})('}')
    PsiWhiteSpace('\n')
    PsiElement(})('}')
