case class Data(private val t: Option[String] = None, only: Boolean = false) {
  def add(other: Data) = {
    other match {
      case Data(None, b)    => ()
      case Data(Some(_), b) => ()
    }
  }
}
-----
ScalaFile
  ScClass: Data
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(case)('case')
    PsiWhiteSpace(' ')
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Data')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        ParametersClause
          PsiElement(()('(')
          ClassParameter: t
            AnnotationsList
              <empty list>
            Modifiers
              AccessModifier
                PsiElement(private)('private')
            PsiWhiteSpace(' ')
            PsiElement(val)('val')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('t')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            ParameterType
              ParametrizedType: Option[String]
                SimpleType: Option
                  CodeReferenceElement: Option
                    PsiElement(identifier)('Option')
                TypeArgumentsList
                  PsiElement([)('[')
                  SimpleType: String
                    CodeReferenceElement: String
                      PsiElement(identifier)('String')
                  PsiElement(])(']')
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace(' ')
            ReferenceExpression: None
              PsiElement(identifier)('None')
          PsiElement(,)(',')
          PsiWhiteSpace(' ')
          ClassParameter: only
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(identifier)('only')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            ParameterType
              SimpleType: Boolean
                CodeReferenceElement: Boolean
                  PsiElement(identifier)('Boolean')
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace(' ')
            BooleanLiteral
              PsiElement(false)('false')
          PsiElement())(')')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: add
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('add')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: other
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('other')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Data
                    CodeReferenceElement: Data
                      PsiElement(identifier)('Data')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          BlockExpression
            PsiElement({)('{')
            PsiWhiteSpace('\n    ')
            MatchStatement
              ReferenceExpression: other
                PsiElement(identifier)('other')
              PsiWhiteSpace(' ')
              PsiElement(match)('match')
              PsiWhiteSpace(' ')
              PsiElement({)('{')
              PsiWhiteSpace('\n      ')
              CaseClauses
                CaseClause
                  PsiElement(case)('case')
                  PsiWhiteSpace(' ')
                  ConstructorPattern
                    CodeReferenceElement: Data
                      PsiElement(identifier)('Data')
                    Pattern Argument List
                      PsiElement(()('(')
                      StableElementPattern
                        ReferenceExpression: None
                          PsiElement(identifier)('None')
                      PsiElement(,)(',')
                      PsiWhiteSpace(' ')
                      ReferencePattern: b
                        PsiElement(identifier)('b')
                      PsiElement())(')')
                  PsiWhiteSpace('    ')
                  PsiElement(=>)('=>')
                  PsiWhiteSpace(' ')
                  BlockOfExpressions
                    UnitExpression
                      PsiElement(()('(')
                      PsiElement())(')')
                PsiWhiteSpace('\n      ')
                CaseClause
                  PsiElement(case)('case')
                  PsiWhiteSpace(' ')
                  ConstructorPattern
                    CodeReferenceElement: Data
                      PsiElement(identifier)('Data')
                    Pattern Argument List
                      PsiElement(()('(')
                      ConstructorPattern
                        CodeReferenceElement: Some
                          PsiElement(identifier)('Some')
                        Pattern Argument List
                          PsiElement(()('(')
                          WildcardPattern
                            PsiElement(_)('_')
                          PsiElement())(')')
                      PsiElement(,)(',')
                      PsiWhiteSpace(' ')
                      ReferencePattern: b
                        PsiElement(identifier)('b')
                      PsiElement())(')')
                  PsiWhiteSpace(' ')
                  PsiElement(=>)('=>')
                  PsiWhiteSpace(' ')
                  BlockOfExpressions
                    UnitExpression
                      PsiElement(()('(')
                      PsiElement())(')')
              PsiWhiteSpace('\n    ')
              PsiElement(})('}')
            PsiWhiteSpace('\n  ')
            PsiElement(})('}')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
