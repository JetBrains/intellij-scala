package test

object A {
  println(("a" match {
    case "a" => 1
    case _ => "a"
  }).asInstanceOf[Object])
  def foo[T](x: T) = x
  var x: Int = 1
  var y: Long = 1L
  x = foo(x)
  y = foo(y)
}
-----
ScalaFile
  ScPackaging
    PsiElement(package)('package')
    PsiWhiteSpace(' ')
    CodeReferenceElement: test
      PsiElement(identifier)('test')
    PsiWhiteSpace('\n\n')
    ScObject: A
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      PsiElement(object)('object')
      PsiWhiteSpace(' ')
      PsiElement(identifier)('A')
      PsiWhiteSpace(' ')
      ExtendsBlock
        ScTemplateBody
          PsiElement({)('{')
          PsiWhiteSpace('\n  ')
          MethodCall
            ReferenceExpression: println
              PsiElement(identifier)('println')
            ArgumentList
              PsiElement(()('(')
              GenericCall
                ReferenceExpression: ("a" match {
    case "a" => 1
    case _ => "a"
  }).asInstanceOf
                  ExpressionInParenthesis
                    PsiElement(()('(')
                    MatchStatement
                      StringLiteral
                        PsiElement(string content)('"a"')
                      PsiWhiteSpace(' ')
                      PsiElement(match)('match')
                      PsiWhiteSpace(' ')
                      PsiElement({)('{')
                      PsiWhiteSpace('\n    ')
                      CaseClauses
                        CaseClause
                          PsiElement(case)('case')
                          PsiWhiteSpace(' ')
                          LiteralPattern
                            StringLiteral
                              PsiElement(string content)('"a"')
                          PsiWhiteSpace(' ')
                          PsiElement(=>)('=>')
                          PsiWhiteSpace(' ')
                          BlockOfExpressions
                            IntegerLiteral
                              PsiElement(integer)('1')
                        PsiWhiteSpace('\n    ')
                        CaseClause
                          PsiElement(case)('case')
                          PsiWhiteSpace(' ')
                          WildcardPattern
                            PsiElement(_)('_')
                          PsiWhiteSpace(' ')
                          PsiElement(=>)('=>')
                          PsiWhiteSpace(' ')
                          BlockOfExpressions
                            StringLiteral
                              PsiElement(string content)('"a"')
                      PsiWhiteSpace('\n  ')
                      PsiElement(})('}')
                    PsiElement())(')')
                  PsiElement(.)('.')
                  PsiElement(identifier)('asInstanceOf')
                TypeArgumentsList
                  PsiElement([)('[')
                  SimpleType: Object
                    CodeReferenceElement: Object
                      PsiElement(identifier)('Object')
                  PsiElement(])(']')
              PsiElement())(')')
          PsiWhiteSpace('\n  ')
          ScFunctionDefinition: foo
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(def)('def')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('foo')
            TypeParameterClause
              PsiElement([)('[')
              TypeParameter: T
                PsiElement(identifier)('T')
              PsiElement(])(']')
            Parameters
              ParametersClause
                PsiElement(()('(')
                Parameter: x
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(identifier)('x')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    SimpleType: T
                      CodeReferenceElement: T
                        PsiElement(identifier)('T')
                PsiElement())(')')
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace(' ')
            ReferenceExpression: x
              PsiElement(identifier)('x')
          PsiWhiteSpace('\n  ')
          ScVariableDefinition: x
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(var)('var')
            PsiWhiteSpace(' ')
            ListOfPatterns
              ReferencePattern: x
                PsiElement(identifier)('x')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            SimpleType: Int
              CodeReferenceElement: Int
                PsiElement(identifier)('Int')
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace(' ')
            IntegerLiteral
              PsiElement(integer)('1')
          PsiWhiteSpace('\n  ')
          ScVariableDefinition: y
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(var)('var')
            PsiWhiteSpace(' ')
            ListOfPatterns
              ReferencePattern: y
                PsiElement(identifier)('y')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            SimpleType: Long
              CodeReferenceElement: Long
                PsiElement(identifier)('Long')
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace(' ')
            LongLiteral
              PsiElement(long)('1L')
          PsiWhiteSpace('\n  ')
          AssignStatement
            ReferenceExpression: x
              PsiElement(identifier)('x')
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace(' ')
            MethodCall
              ReferenceExpression: foo
                PsiElement(identifier)('foo')
              ArgumentList
                PsiElement(()('(')
                ReferenceExpression: x
                  PsiElement(identifier)('x')
                PsiElement())(')')
          PsiWhiteSpace('\n  ')
          AssignStatement
            ReferenceExpression: y
              PsiElement(identifier)('y')
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace(' ')
            MethodCall
              ReferenceExpression: foo
                PsiElement(identifier)('foo')
              ArgumentList
                PsiElement(()('(')
                ReferenceExpression: y
                  PsiElement(identifier)('y')
                PsiElement())(')')
          PsiWhiteSpace('\n')
          PsiElement(})('}')
