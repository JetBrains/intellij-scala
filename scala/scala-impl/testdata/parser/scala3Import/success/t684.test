package test;
trait Test {
  trait Ti;
  class Foo;
  def foo(t : Ti) = t match {
  case t : Foo => true;
  case _ => false;
  }
  class Bar extends Foo with Ti;
  assert(foo(new Bar));
}
-----
ScalaFile
  ScPackaging
    PsiElement(package)('package')
    PsiWhiteSpace(' ')
    CodeReferenceElement: test
      PsiElement(identifier)('test')
    PsiElement(;)(';')
    PsiWhiteSpace('\n')
    ScTrait: Test
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      PsiElement(trait)('trait')
      PsiWhiteSpace(' ')
      PsiElement(identifier)('Test')
      PsiWhiteSpace(' ')
      ExtendsBlock
        ScTemplateBody
          PsiElement({)('{')
          PsiWhiteSpace('\n  ')
          ScTrait: Ti
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(trait)('trait')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('Ti')
            ExtendsBlock
              <empty list>
          PsiElement(;)(';')
          PsiWhiteSpace('\n  ')
          ScClass: Foo
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(class)('class')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('Foo')
            PrimaryConstructor
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              Parameters
                <empty list>
            ExtendsBlock
              <empty list>
          PsiElement(;)(';')
          PsiWhiteSpace('\n  ')
          ScFunctionDefinition: foo
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(def)('def')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('foo')
            Parameters
              ParametersClause
                PsiElement(()('(')
                Parameter: t
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(identifier)('t')
                  PsiWhiteSpace(' ')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    SimpleType: Ti
                      CodeReferenceElement: Ti
                        PsiElement(identifier)('Ti')
                PsiElement())(')')
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace(' ')
            MatchStatement
              ReferenceExpression: t
                PsiElement(identifier)('t')
              PsiWhiteSpace(' ')
              PsiElement(match)('match')
              PsiWhiteSpace(' ')
              PsiElement({)('{')
              PsiWhiteSpace('\n  ')
              CaseClauses
                CaseClause
                  PsiElement(case)('case')
                  PsiWhiteSpace(' ')
                  Scala3 TypedPattern
                    ReferencePattern: t
                      PsiElement(identifier)('t')
                    PsiWhiteSpace(' ')
                    PsiElement(:)(':')
                    PsiWhiteSpace(' ')
                    TypePattern
                      SimpleType: Foo
                        CodeReferenceElement: Foo
                          PsiElement(identifier)('Foo')
                  PsiWhiteSpace(' ')
                  PsiElement(=>)('=>')
                  PsiWhiteSpace(' ')
                  BlockOfExpressions
                    BooleanLiteral
                      PsiElement(true)('true')
                    PsiElement(;)(';')
                PsiWhiteSpace('\n  ')
                CaseClause
                  PsiElement(case)('case')
                  PsiWhiteSpace(' ')
                  WildcardPattern
                    PsiElement(_)('_')
                  PsiWhiteSpace(' ')
                  PsiElement(=>)('=>')
                  PsiWhiteSpace(' ')
                  BlockOfExpressions
                    BooleanLiteral
                      PsiElement(false)('false')
                    PsiElement(;)(';')
              PsiWhiteSpace('\n  ')
              PsiElement(})('}')
          PsiWhiteSpace('\n  ')
          ScClass: Bar
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(class)('class')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('Bar')
            PrimaryConstructor
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              Parameters
                <empty list>
            PsiWhiteSpace(' ')
            ExtendsBlock
              PsiElement(extends)('extends')
              PsiWhiteSpace(' ')
              TemplateParents
                ConstructorInvocation
                  SimpleType: Foo
                    CodeReferenceElement: Foo
                      PsiElement(identifier)('Foo')
                PsiWhiteSpace(' ')
                PsiElement(with)('with')
                PsiWhiteSpace(' ')
                ConstructorInvocation
                  SimpleType: Ti
                    CodeReferenceElement: Ti
                      PsiElement(identifier)('Ti')
          PsiElement(;)(';')
          PsiWhiteSpace('\n  ')
          MethodCall
            ReferenceExpression: assert
              PsiElement(identifier)('assert')
            ArgumentList
              PsiElement(()('(')
              MethodCall
                ReferenceExpression: foo
                  PsiElement(identifier)('foo')
                ArgumentList
                  PsiElement(()('(')
                  ScNewTemplateDefinition: <anonymous>
                    PsiElement(new)('new')
                    PsiWhiteSpace(' ')
                    ExtendsBlock
                      TemplateParents
                        ConstructorInvocation
                          SimpleType: Bar
                            CodeReferenceElement: Bar
                              PsiElement(identifier)('Bar')
                  PsiElement())(')')
              PsiElement())(')')
          PsiElement(;)(';')
          PsiWhiteSpace('\n')
          PsiElement(})('}')
