class S[A](f: A => A, x: A) {
  Console.println(f(x));
}
class T[B](f: B => B, y: B) extends S((x: B) => f(x), y) {
}
object Test extends App {
  new T[Int](x => x * 2, 1);
  val f = new S((x: Int) => x, 1);
}
-----
ScalaFile
  ScClass: S
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('S')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: A
        PsiElement(identifier)('A')
      PsiElement(])(']')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        ParametersClause
          PsiElement(()('(')
          ClassParameter: f
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(identifier)('f')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            ParameterType
              FunctionalType: A => A
                SimpleType: A
                  CodeReferenceElement: A
                    PsiElement(identifier)('A')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                SimpleType: A
                  CodeReferenceElement: A
                    PsiElement(identifier)('A')
          PsiElement(,)(',')
          PsiWhiteSpace(' ')
          ClassParameter: x
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(identifier)('x')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            ParameterType
              SimpleType: A
                CodeReferenceElement: A
                  PsiElement(identifier)('A')
          PsiElement())(')')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        MethodCall
          ReferenceExpression: Console.println
            ReferenceExpression: Console
              PsiElement(identifier)('Console')
            PsiElement(.)('.')
            PsiElement(identifier)('println')
          ArgumentList
            PsiElement(()('(')
            MethodCall
              ReferenceExpression: f
                PsiElement(identifier)('f')
              ArgumentList
                PsiElement(()('(')
                ReferenceExpression: x
                  PsiElement(identifier)('x')
                PsiElement())(')')
            PsiElement())(')')
        PsiElement(;)(';')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n')
  ScClass: T
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('T')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: B
        PsiElement(identifier)('B')
      PsiElement(])(']')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        ParametersClause
          PsiElement(()('(')
          ClassParameter: f
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(identifier)('f')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            ParameterType
              FunctionalType: B => B
                SimpleType: B
                  CodeReferenceElement: B
                    PsiElement(identifier)('B')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                SimpleType: B
                  CodeReferenceElement: B
                    PsiElement(identifier)('B')
          PsiElement(,)(',')
          PsiWhiteSpace(' ')
          ClassParameter: y
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(identifier)('y')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            ParameterType
              SimpleType: B
                CodeReferenceElement: B
                  PsiElement(identifier)('B')
          PsiElement())(')')
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          SimpleType: S
            CodeReferenceElement: S
              PsiElement(identifier)('S')
          ArgumentList
            PsiElement(()('(')
            FunctionExpression
              Parameters
                ParametersClause
                  PsiElement(()('(')
                  Parameter: x
                    AnnotationsList
                      <empty list>
                    PsiElement(identifier)('x')
                    PsiElement(:)(':')
                    PsiWhiteSpace(' ')
                    ParameterType
                      SimpleType: B
                        CodeReferenceElement: B
                          PsiElement(identifier)('B')
                  PsiElement())(')')
              PsiWhiteSpace(' ')
              PsiElement(=>)('=>')
              PsiWhiteSpace(' ')
              MethodCall
                ReferenceExpression: f
                  PsiElement(identifier)('f')
                ArgumentList
                  PsiElement(()('(')
                  ReferenceExpression: x
                    PsiElement(identifier)('x')
                  PsiElement())(')')
            PsiElement(,)(',')
            PsiWhiteSpace(' ')
            ReferenceExpression: y
              PsiElement(identifier)('y')
            PsiElement())(')')
      PsiWhiteSpace(' ')
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n')
  ScObject: Test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test')
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          SimpleType: App
            CodeReferenceElement: App
              PsiElement(identifier)('App')
      PsiWhiteSpace(' ')
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScNewTemplateDefinition: <anonymous>
          PsiElement(new)('new')
          PsiWhiteSpace(' ')
          ExtendsBlock
            TemplateParents
              ConstructorInvocation
                ParametrizedType: T[Int]
                  SimpleType: T
                    CodeReferenceElement: T
                      PsiElement(identifier)('T')
                  TypeArgumentsList
                    PsiElement([)('[')
                    SimpleType: Int
                      CodeReferenceElement: Int
                        PsiElement(identifier)('Int')
                    PsiElement(])(']')
                ArgumentList
                  PsiElement(()('(')
                  FunctionExpression
                    Parameters
                      ParametersClause
                        Parameter: x
                          PsiElement(identifier)('x')
                    PsiWhiteSpace(' ')
                    PsiElement(=>)('=>')
                    PsiWhiteSpace(' ')
                    InfixExpression
                      ReferenceExpression: x
                        PsiElement(identifier)('x')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: *
                        PsiElement(identifier)('*')
                      PsiWhiteSpace(' ')
                      IntegerLiteral
                        PsiElement(integer)('2')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  IntegerLiteral
                    PsiElement(integer)('1')
                  PsiElement())(')')
        PsiElement(;)(';')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: f
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: f
              PsiElement(identifier)('f')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ScNewTemplateDefinition: <anonymous>
            PsiElement(new)('new')
            PsiWhiteSpace(' ')
            ExtendsBlock
              TemplateParents
                ConstructorInvocation
                  SimpleType: S
                    CodeReferenceElement: S
                      PsiElement(identifier)('S')
                  ArgumentList
                    PsiElement(()('(')
                    FunctionExpression
                      Parameters
                        ParametersClause
                          PsiElement(()('(')
                          Parameter: x
                            AnnotationsList
                              <empty list>
                            PsiElement(identifier)('x')
                            PsiElement(:)(':')
                            PsiWhiteSpace(' ')
                            ParameterType
                              SimpleType: Int
                                CodeReferenceElement: Int
                                  PsiElement(identifier)('Int')
                          PsiElement())(')')
                      PsiWhiteSpace(' ')
                      PsiElement(=>)('=>')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: x
                        PsiElement(identifier)('x')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    IntegerLiteral
                      PsiElement(integer)('1')
                    PsiElement())(')')
        PsiElement(;)(';')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
