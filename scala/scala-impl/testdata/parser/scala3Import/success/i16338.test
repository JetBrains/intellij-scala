package de.sciss.kollflitz

import scala.collection.*

type Tagged[U]  = { type Tag  = U }
type @@ [+T, U] = T with Tagged[U]
private val anyTagger = new Tagger[Any]
final class Tagger[U] private[kollflitz] {
  def apply[T](t : T): T @@ U = t.asInstanceOf[T @@ U]
}
def tag[U]: Tagger[U] = anyTagger.asInstanceOf[Tagger[U]]

sealed trait Sorted


/** Enrichment methods for random access collections. */
implicit final class KollFlitzSortedIndexedSeq[A, CC[_], Repr](val self: SeqOps[A, CC, Repr] @@ Sorted)
  extends AnyVal {

  /** Nearest percentile (rounded index, no interpolation). */
  def percentile(n: Int): A = self((self.size * n - 50) / 100)

  /** Median found by rounding the index (no interpolation). */
  def median: A = percentile(50)
}
-----
ScalaFile
  ScPackaging
    PsiElement(package)('package')
    PsiWhiteSpace(' ')
    CodeReferenceElement: de.sciss.kollflitz
      CodeReferenceElement: de.sciss
        CodeReferenceElement: de
          PsiElement(identifier)('de')
        PsiElement(.)('.')
        PsiElement(identifier)('sciss')
      PsiElement(.)('.')
      PsiElement(identifier)('kollflitz')
    PsiWhiteSpace('\n\n')
    ScImportStatement
      PsiElement(import)('import')
      PsiWhiteSpace(' ')
      ImportExpression
        CodeReferenceElement: scala.collection
          CodeReferenceElement: scala
            PsiElement(identifier)('scala')
          PsiElement(.)('.')
          PsiElement(identifier)('collection')
        PsiElement(.)('.')
        PsiElement(*)('*')
    PsiWhiteSpace('\n\n')
    ScTypeAliasDefinition: Tagged
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      PsiElement(type)('type')
      PsiWhiteSpace(' ')
      PsiElement(identifier)('Tagged')
      TypeParameterClause
        PsiElement([)('[')
        TypeParameter: U
          PsiElement(identifier)('U')
        PsiElement(])(']')
      PsiWhiteSpace('  ')
      PsiElement(=)('=')
      PsiWhiteSpace(' ')
      CompoundType: { type Tag  = U }
        Refinement
          PsiElement({)('{')
          PsiWhiteSpace(' ')
          ScTypeAliasDefinition: Tag
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(type)('type')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('Tag')
            PsiWhiteSpace('  ')
            PsiElement(=)('=')
            PsiWhiteSpace(' ')
            SimpleType: U
              CodeReferenceElement: U
                PsiElement(identifier)('U')
          PsiWhiteSpace(' ')
          PsiElement(})('}')
    PsiWhiteSpace('\n')
    ScTypeAliasDefinition: @@
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      PsiElement(type)('type')
      PsiWhiteSpace(' ')
      PsiElement(identifier)('@@')
      PsiWhiteSpace(' ')
      TypeParameterClause
        PsiElement([)('[')
        TypeParameter: T
          PsiElement(identifier)('+')
          PsiElement(identifier)('T')
        PsiElement(,)(',')
        PsiWhiteSpace(' ')
        TypeParameter: U
          PsiElement(identifier)('U')
        PsiElement(])(']')
      PsiWhiteSpace(' ')
      PsiElement(=)('=')
      PsiWhiteSpace(' ')
      CompoundType: T with Tagged[U]
        SimpleType: T
          CodeReferenceElement: T
            PsiElement(identifier)('T')
        PsiWhiteSpace(' ')
        PsiElement(with)('with')
        PsiWhiteSpace(' ')
        ParametrizedType: Tagged[U]
          SimpleType: Tagged
            CodeReferenceElement: Tagged
              PsiElement(identifier)('Tagged')
          TypeArgumentsList
            PsiElement([)('[')
            SimpleType: U
              CodeReferenceElement: U
                PsiElement(identifier)('U')
            PsiElement(])(']')
    PsiWhiteSpace('\n')
    ScPatternDefinition: anyTagger
      AnnotationsList
        <empty list>
      Modifiers
        AccessModifier
          PsiElement(private)('private')
      PsiWhiteSpace(' ')
      PsiElement(val)('val')
      PsiWhiteSpace(' ')
      ListOfPatterns
        ReferencePattern: anyTagger
          PsiElement(identifier)('anyTagger')
      PsiWhiteSpace(' ')
      PsiElement(=)('=')
      PsiWhiteSpace(' ')
      ScNewTemplateDefinition: <anonymous>
        PsiElement(new)('new')
        PsiWhiteSpace(' ')
        ExtendsBlock
          TemplateParents
            ConstructorInvocation
              ParametrizedType: Tagger[Any]
                SimpleType: Tagger
                  CodeReferenceElement: Tagger
                    PsiElement(identifier)('Tagger')
                TypeArgumentsList
                  PsiElement([)('[')
                  SimpleType: Any
                    CodeReferenceElement: Any
                      PsiElement(identifier)('Any')
                  PsiElement(])(']')
    PsiWhiteSpace('\n')
    ScClass: Tagger
      AnnotationsList
        <empty list>
      Modifiers
        PsiElement(final)('final')
      PsiWhiteSpace(' ')
      PsiElement(class)('class')
      PsiWhiteSpace(' ')
      PsiElement(identifier)('Tagger')
      TypeParameterClause
        PsiElement([)('[')
        TypeParameter: U
          PsiElement(identifier)('U')
        PsiElement(])(']')
      PsiWhiteSpace(' ')
      PrimaryConstructor
        AnnotationsList
          <empty list>
        Modifiers
          AccessModifier
            PsiElement(private)('private')
            PsiElement([)('[')
            PsiElement(identifier)('kollflitz')
            PsiElement(])(']')
        Parameters
          <empty list>
      PsiWhiteSpace(' ')
      ExtendsBlock
        ScTemplateBody
          PsiElement({)('{')
          PsiWhiteSpace('\n  ')
          ScFunctionDefinition: apply
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(def)('def')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('apply')
            TypeParameterClause
              PsiElement([)('[')
              TypeParameter: T
                PsiElement(identifier)('T')
              PsiElement(])(']')
            Parameters
              ParametersClause
                PsiElement(()('(')
                Parameter: t
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(identifier)('t')
                  PsiWhiteSpace(' ')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    SimpleType: T
                      CodeReferenceElement: T
                        PsiElement(identifier)('T')
                PsiElement())(')')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            InfixType: T @@ U
              SimpleType: T
                CodeReferenceElement: T
                  PsiElement(identifier)('T')
              PsiWhiteSpace(' ')
              CodeReferenceElement: @@
                PsiElement(identifier)('@@')
              PsiWhiteSpace(' ')
              SimpleType: U
                CodeReferenceElement: U
                  PsiElement(identifier)('U')
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace(' ')
            GenericCall
              ReferenceExpression: t.asInstanceOf
                ReferenceExpression: t
                  PsiElement(identifier)('t')
                PsiElement(.)('.')
                PsiElement(identifier)('asInstanceOf')
              TypeArgumentsList
                PsiElement([)('[')
                InfixType: T @@ U
                  SimpleType: T
                    CodeReferenceElement: T
                      PsiElement(identifier)('T')
                  PsiWhiteSpace(' ')
                  CodeReferenceElement: @@
                    PsiElement(identifier)('@@')
                  PsiWhiteSpace(' ')
                  SimpleType: U
                    CodeReferenceElement: U
                      PsiElement(identifier)('U')
                PsiElement(])(']')
          PsiWhiteSpace('\n')
          PsiElement(})('}')
    PsiWhiteSpace('\n')
    ScFunctionDefinition: tag
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      PsiElement(def)('def')
      PsiWhiteSpace(' ')
      PsiElement(identifier)('tag')
      TypeParameterClause
        PsiElement([)('[')
        TypeParameter: U
          PsiElement(identifier)('U')
        PsiElement(])(']')
      Parameters
        <empty list>
      PsiElement(:)(':')
      PsiWhiteSpace(' ')
      ParametrizedType: Tagger[U]
        SimpleType: Tagger
          CodeReferenceElement: Tagger
            PsiElement(identifier)('Tagger')
        TypeArgumentsList
          PsiElement([)('[')
          SimpleType: U
            CodeReferenceElement: U
              PsiElement(identifier)('U')
          PsiElement(])(']')
      PsiWhiteSpace(' ')
      PsiElement(=)('=')
      PsiWhiteSpace(' ')
      GenericCall
        ReferenceExpression: anyTagger.asInstanceOf
          ReferenceExpression: anyTagger
            PsiElement(identifier)('anyTagger')
          PsiElement(.)('.')
          PsiElement(identifier)('asInstanceOf')
        TypeArgumentsList
          PsiElement([)('[')
          ParametrizedType: Tagger[U]
            SimpleType: Tagger
              CodeReferenceElement: Tagger
                PsiElement(identifier)('Tagger')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: U
                CodeReferenceElement: U
                  PsiElement(identifier)('U')
              PsiElement(])(']')
          PsiElement(])(']')
    PsiWhiteSpace('\n\n')
    ScTrait: Sorted
      AnnotationsList
        <empty list>
      Modifiers
        PsiElement(sealed)('sealed')
      PsiWhiteSpace(' ')
      PsiElement(trait)('trait')
      PsiWhiteSpace(' ')
      PsiElement(identifier)('Sorted')
      ExtendsBlock
        <empty list>
    PsiWhiteSpace('\n\n\n')
    ScClass: KollFlitzSortedIndexedSeq
      DocComment
        ScPsiDocToken(DOC_COMMENT_START)('/**')
        ScDocParagraph
          ScPsiDocToken(DOC_WHITESPACE)(' ')
          ScPsiDocToken(DOC_COMMENT_DATA)('Enrichment methods for random access collections.')
          ScPsiDocToken(DOC_WHITESPACE)(' ')
        ScPsiDocToken(DOC_COMMENT_END)('*/')
      PsiWhiteSpace('\n')
      AnnotationsList
        <empty list>
      Modifiers
        PsiElement(implicit)('implicit')
        PsiWhiteSpace(' ')
        PsiElement(final)('final')
      PsiWhiteSpace(' ')
      PsiElement(class)('class')
      PsiWhiteSpace(' ')
      PsiElement(identifier)('KollFlitzSortedIndexedSeq')
      TypeParameterClause
        PsiElement([)('[')
        TypeParameter: A
          PsiElement(identifier)('A')
        PsiElement(,)(',')
        PsiWhiteSpace(' ')
        TypeParameter: CC
          PsiElement(identifier)('CC')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: _
              PsiElement(_)('_')
            PsiElement(])(']')
        PsiElement(,)(',')
        PsiWhiteSpace(' ')
        TypeParameter: Repr
          PsiElement(identifier)('Repr')
        PsiElement(])(']')
      PrimaryConstructor
        AnnotationsList
          <empty list>
        Modifiers
          <empty list>
        Parameters
          ParametersClause
            PsiElement(()('(')
            ClassParameter: self
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              PsiElement(identifier)('self')
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              ParameterType
                InfixType: SeqOps[A, CC, Repr] @@ Sorted
                  ParametrizedType: SeqOps[A, CC, Repr]
                    SimpleType: SeqOps
                      CodeReferenceElement: SeqOps
                        PsiElement(identifier)('SeqOps')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: A
                        CodeReferenceElement: A
                          PsiElement(identifier)('A')
                      PsiElement(,)(',')
                      PsiWhiteSpace(' ')
                      SimpleType: CC
                        CodeReferenceElement: CC
                          PsiElement(identifier)('CC')
                      PsiElement(,)(',')
                      PsiWhiteSpace(' ')
                      SimpleType: Repr
                        CodeReferenceElement: Repr
                          PsiElement(identifier)('Repr')
                      PsiElement(])(']')
                  PsiWhiteSpace(' ')
                  CodeReferenceElement: @@
                    PsiElement(identifier)('@@')
                  PsiWhiteSpace(' ')
                  SimpleType: Sorted
                    CodeReferenceElement: Sorted
                      PsiElement(identifier)('Sorted')
            PsiElement())(')')
      PsiWhiteSpace('\n  ')
      ExtendsBlock
        PsiElement(extends)('extends')
        PsiWhiteSpace(' ')
        TemplateParents
          ConstructorInvocation
            SimpleType: AnyVal
              CodeReferenceElement: AnyVal
                PsiElement(identifier)('AnyVal')
        PsiWhiteSpace(' ')
        ScTemplateBody
          PsiElement({)('{')
          PsiWhiteSpace('\n\n  ')
          ScFunctionDefinition: percentile
            DocComment
              ScPsiDocToken(DOC_COMMENT_START)('/**')
              ScDocParagraph
                ScPsiDocToken(DOC_WHITESPACE)(' ')
                ScPsiDocToken(DOC_COMMENT_DATA)('Nearest percentile (rounded index, no interpolation).')
                ScPsiDocToken(DOC_WHITESPACE)(' ')
              ScPsiDocToken(DOC_COMMENT_END)('*/')
            PsiWhiteSpace('\n  ')
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(def)('def')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('percentile')
            Parameters
              ParametersClause
                PsiElement(()('(')
                Parameter: n
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(identifier)('n')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    SimpleType: Int
                      CodeReferenceElement: Int
                        PsiElement(identifier)('Int')
                PsiElement())(')')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            SimpleType: A
              CodeReferenceElement: A
                PsiElement(identifier)('A')
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace(' ')
            MethodCall
              ReferenceExpression: self
                PsiElement(identifier)('self')
              ArgumentList
                PsiElement(()('(')
                InfixExpression
                  ExpressionInParenthesis
                    PsiElement(()('(')
                    InfixExpression
                      InfixExpression
                        ReferenceExpression: self.size
                          ReferenceExpression: self
                            PsiElement(identifier)('self')
                          PsiElement(.)('.')
                          PsiElement(identifier)('size')
                        PsiWhiteSpace(' ')
                        ReferenceExpression: *
                          PsiElement(identifier)('*')
                        PsiWhiteSpace(' ')
                        ReferenceExpression: n
                          PsiElement(identifier)('n')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: -
                        PsiElement(identifier)('-')
                      PsiWhiteSpace(' ')
                      IntegerLiteral
                        PsiElement(integer)('50')
                    PsiElement())(')')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: /
                    PsiElement(identifier)('/')
                  PsiWhiteSpace(' ')
                  IntegerLiteral
                    PsiElement(integer)('100')
                PsiElement())(')')
          PsiWhiteSpace('\n\n  ')
          ScFunctionDefinition: median
            DocComment
              ScPsiDocToken(DOC_COMMENT_START)('/**')
              ScDocParagraph
                ScPsiDocToken(DOC_WHITESPACE)(' ')
                ScPsiDocToken(DOC_COMMENT_DATA)('Median found by rounding the index (no interpolation).')
                ScPsiDocToken(DOC_WHITESPACE)(' ')
              ScPsiDocToken(DOC_COMMENT_END)('*/')
            PsiWhiteSpace('\n  ')
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(def)('def')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('median')
            Parameters
              <empty list>
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            SimpleType: A
              CodeReferenceElement: A
                PsiElement(identifier)('A')
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace(' ')
            MethodCall
              ReferenceExpression: percentile
                PsiElement(identifier)('percentile')
              ArgumentList
                PsiElement(()('(')
                IntegerLiteral
                  PsiElement(integer)('50')
                PsiElement())(')')
          PsiWhiteSpace('\n')
          PsiElement(})('}')
