val x: Function1[Int, Int] { def apply(arg: Int): Int } = x => x
val x1 = x
val y = x.apply(arg = 1)
-----
ScalaFile
  ScPatternDefinition: x
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(val)('val')
    PsiWhiteSpace(' ')
    ListOfPatterns
      ReferencePattern: x
        PsiElement(identifier)('x')
    PsiElement(:)(':')
    PsiWhiteSpace(' ')
    CompoundType: Function1[Int, Int] { def apply(arg: Int): Int }
      ParametrizedType: Function1[Int, Int]
        SimpleType: Function1
          CodeReferenceElement: Function1
            PsiElement(identifier)('Function1')
        TypeArgumentsList
          PsiElement([)('[')
          SimpleType: Int
            CodeReferenceElement: Int
              PsiElement(identifier)('Int')
          PsiElement(,)(',')
          PsiWhiteSpace(' ')
          SimpleType: Int
            CodeReferenceElement: Int
              PsiElement(identifier)('Int')
          PsiElement(])(']')
      PsiWhiteSpace(' ')
      Refinement
        PsiElement({)('{')
        PsiWhiteSpace(' ')
        ScFunctionDeclaration: apply
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('apply')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: arg
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('arg')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Int
                    CodeReferenceElement: Int
                      PsiElement(identifier)('Int')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Int
            CodeReferenceElement: Int
              PsiElement(identifier)('Int')
        PsiWhiteSpace(' ')
        PsiElement(})('}')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    FunctionExpression
      Parameters
        ParametersClause
          Parameter: x
            PsiElement(identifier)('x')
      PsiWhiteSpace(' ')
      PsiElement(=>)('=>')
      PsiWhiteSpace(' ')
      ReferenceExpression: x
        PsiElement(identifier)('x')
  PsiWhiteSpace('\n')
  ScPatternDefinition: x1
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(val)('val')
    PsiWhiteSpace(' ')
    ListOfPatterns
      ReferencePattern: x1
        PsiElement(identifier)('x1')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    ReferenceExpression: x
      PsiElement(identifier)('x')
  PsiWhiteSpace('\n')
  ScPatternDefinition: y
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(val)('val')
    PsiWhiteSpace(' ')
    ListOfPatterns
      ReferencePattern: y
        PsiElement(identifier)('y')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    MethodCall
      ReferenceExpression: x.apply
        ReferenceExpression: x
          PsiElement(identifier)('x')
        PsiElement(.)('.')
        PsiElement(identifier)('apply')
      ArgumentList
        PsiElement(()('(')
        AssignStatement
          ReferenceExpression: arg
            PsiElement(identifier)('arg')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          IntegerLiteral
            PsiElement(integer)('1')
        PsiElement())(')')
