object K0 {

  type T = String

  opaque type ProductInstances[F[_], T] = ErasedProductInstances[F[T]]

  inline def summonAsArray[F[_], T]: Array[Any] = ???
  inline def mkProductInstances[F[_], T]: ProductInstances[F, T] =
    new ErasedProductInstances(summonAsArray[F, T]).asInstanceOf[ProductInstances[F, T]]

  val x: T = ""

  inline def foo(x: T): T = "foo".asInstanceOf[T]
}

final class ErasedProductInstances[FT](is0: => Array[Any])

trait Monoid[A]
case class ISB(i: Int)

object Test {
  K0.foo(K0.x)
  K0.mkProductInstances[Monoid, ISB]

}
-----
ScalaFile
  ScObject: K0
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('K0')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n\n  ')
        ScTypeAliasDefinition: T
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('T')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          SimpleType: String
            CodeReferenceElement: String
              PsiElement(identifier)('String')
        PsiWhiteSpace('\n\n  ')
        ScTypeAliasDefinition: ProductInstances
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(opaque)('opaque')
          PsiWhiteSpace(' ')
          PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('ProductInstances')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: F
              PsiElement(identifier)('F')
              TypeParameterClause
                PsiElement([)('[')
                TypeParameter: _
                  PsiElement(_)('_')
                PsiElement(])(']')
            PsiElement(,)(',')
            PsiWhiteSpace(' ')
            TypeParameter: T
              PsiElement(identifier)('T')
            PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ParametrizedType: ErasedProductInstances[F[T]]
            SimpleType: ErasedProductInstances
              CodeReferenceElement: ErasedProductInstances
                PsiElement(identifier)('ErasedProductInstances')
            TypeArgumentsList
              PsiElement([)('[')
              ParametrizedType: F[T]
                SimpleType: F
                  CodeReferenceElement: F
                    PsiElement(identifier)('F')
                TypeArgumentsList
                  PsiElement([)('[')
                  SimpleType: T
                    CodeReferenceElement: T
                      PsiElement(identifier)('T')
                  PsiElement(])(']')
              PsiElement(])(']')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: summonAsArray
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(inline)('inline')
          PsiWhiteSpace(' ')
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('summonAsArray')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: F
              PsiElement(identifier)('F')
              TypeParameterClause
                PsiElement([)('[')
                TypeParameter: _
                  PsiElement(_)('_')
                PsiElement(])(']')
            PsiElement(,)(',')
            PsiWhiteSpace(' ')
            TypeParameter: T
              PsiElement(identifier)('T')
            PsiElement(])(']')
          Parameters
            <empty list>
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: Array[Any]
            SimpleType: Array
              CodeReferenceElement: Array
                PsiElement(identifier)('Array')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: Any
                CodeReferenceElement: Any
                  PsiElement(identifier)('Any')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: ???
            PsiElement(identifier)('???')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: mkProductInstances
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(inline)('inline')
          PsiWhiteSpace(' ')
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('mkProductInstances')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: F
              PsiElement(identifier)('F')
              TypeParameterClause
                PsiElement([)('[')
                TypeParameter: _
                  PsiElement(_)('_')
                PsiElement(])(']')
            PsiElement(,)(',')
            PsiWhiteSpace(' ')
            TypeParameter: T
              PsiElement(identifier)('T')
            PsiElement(])(']')
          Parameters
            <empty list>
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: ProductInstances[F, T]
            SimpleType: ProductInstances
              CodeReferenceElement: ProductInstances
                PsiElement(identifier)('ProductInstances')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: F
                CodeReferenceElement: F
                  PsiElement(identifier)('F')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              SimpleType: T
                CodeReferenceElement: T
                  PsiElement(identifier)('T')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace('\n    ')
          GenericCall
            ReferenceExpression: new ErasedProductInstances(summonAsArray[F, T]).asInstanceOf
              ScNewTemplateDefinition: <anonymous>
                PsiElement(new)('new')
                PsiWhiteSpace(' ')
                ExtendsBlock
                  TemplateParents
                    ConstructorInvocation
                      SimpleType: ErasedProductInstances
                        CodeReferenceElement: ErasedProductInstances
                          PsiElement(identifier)('ErasedProductInstances')
                      ArgumentList
                        PsiElement(()('(')
                        GenericCall
                          ReferenceExpression: summonAsArray
                            PsiElement(identifier)('summonAsArray')
                          TypeArgumentsList
                            PsiElement([)('[')
                            SimpleType: F
                              CodeReferenceElement: F
                                PsiElement(identifier)('F')
                            PsiElement(,)(',')
                            PsiWhiteSpace(' ')
                            SimpleType: T
                              CodeReferenceElement: T
                                PsiElement(identifier)('T')
                            PsiElement(])(']')
                        PsiElement())(')')
              PsiElement(.)('.')
              PsiElement(identifier)('asInstanceOf')
            TypeArgumentsList
              PsiElement([)('[')
              ParametrizedType: ProductInstances[F, T]
                SimpleType: ProductInstances
                  CodeReferenceElement: ProductInstances
                    PsiElement(identifier)('ProductInstances')
                TypeArgumentsList
                  PsiElement([)('[')
                  SimpleType: F
                    CodeReferenceElement: F
                      PsiElement(identifier)('F')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  SimpleType: T
                    CodeReferenceElement: T
                      PsiElement(identifier)('T')
                  PsiElement(])(']')
              PsiElement(])(']')
        PsiWhiteSpace('\n\n  ')
        ScPatternDefinition: x
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: x
              PsiElement(identifier)('x')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: T
            CodeReferenceElement: T
              PsiElement(identifier)('T')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          StringLiteral
            PsiElement(string content)('""')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: foo
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(inline)('inline')
          PsiWhiteSpace(' ')
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('foo')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: x
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: T
                    CodeReferenceElement: T
                      PsiElement(identifier)('T')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: T
            CodeReferenceElement: T
              PsiElement(identifier)('T')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          GenericCall
            ReferenceExpression: "foo".asInstanceOf
              StringLiteral
                PsiElement(string content)('"foo"')
              PsiElement(.)('.')
              PsiElement(identifier)('asInstanceOf')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: T
                CodeReferenceElement: T
                  PsiElement(identifier)('T')
              PsiElement(])(']')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScClass: ErasedProductInstances
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(final)('final')
    PsiWhiteSpace(' ')
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('ErasedProductInstances')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: FT
        PsiElement(identifier)('FT')
      PsiElement(])(']')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        ParametersClause
          PsiElement(()('(')
          ClassParameter: is0
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(identifier)('is0')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            ParameterType
              PsiElement(=>)('=>')
              PsiWhiteSpace(' ')
              ParametrizedType: Array[Any]
                SimpleType: Array
                  CodeReferenceElement: Array
                    PsiElement(identifier)('Array')
                TypeArgumentsList
                  PsiElement([)('[')
                  SimpleType: Any
                    CodeReferenceElement: Any
                      PsiElement(identifier)('Any')
                  PsiElement(])(']')
          PsiElement())(')')
    ExtendsBlock
      <empty list>
  PsiWhiteSpace('\n\n')
  ScTrait: Monoid
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Monoid')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: A
        PsiElement(identifier)('A')
      PsiElement(])(']')
    ExtendsBlock
      <empty list>
  PsiWhiteSpace('\n')
  ScClass: ISB
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(case)('case')
    PsiWhiteSpace(' ')
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('ISB')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        ParametersClause
          PsiElement(()('(')
          ClassParameter: i
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(identifier)('i')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            ParameterType
              SimpleType: Int
                CodeReferenceElement: Int
                  PsiElement(identifier)('Int')
          PsiElement())(')')
    ExtendsBlock
      <empty list>
  PsiWhiteSpace('\n\n')
  ScObject: Test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        MethodCall
          ReferenceExpression: K0.foo
            ReferenceExpression: K0
              PsiElement(identifier)('K0')
            PsiElement(.)('.')
            PsiElement(identifier)('foo')
          ArgumentList
            PsiElement(()('(')
            ReferenceExpression: K0.x
              ReferenceExpression: K0
                PsiElement(identifier)('K0')
              PsiElement(.)('.')
              PsiElement(identifier)('x')
            PsiElement())(')')
        PsiWhiteSpace('\n  ')
        GenericCall
          ReferenceExpression: K0.mkProductInstances
            ReferenceExpression: K0
              PsiElement(identifier)('K0')
            PsiElement(.)('.')
            PsiElement(identifier)('mkProductInstances')
          TypeArgumentsList
            PsiElement([)('[')
            SimpleType: Monoid
              CodeReferenceElement: Monoid
                PsiElement(identifier)('Monoid')
            PsiElement(,)(',')
            PsiWhiteSpace(' ')
            SimpleType: ISB
              CodeReferenceElement: ISB
                PsiElement(identifier)('ISB')
            PsiElement(])(']')
        PsiWhiteSpace('\n\n')
        PsiElement(})('}')
