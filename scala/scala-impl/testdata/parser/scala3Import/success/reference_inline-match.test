package inlinematch

class Test {

  transparent inline def g(x: Any): Any = inline x match {
    case x: String => (x, x) // Tuple2[String, String](x, x)
    case x: Double => x
  }

  val t1: 1.0d = g(1.0d) // Has type 1.0d which is a subtype of Double
  val t2: (String, String) = g("test") // Has type (String, String)

  trait Nat
  case object Zero extends Nat
  case class Succ[N <: Nat](n: N) extends Nat

  transparent inline def toInt(n: Nat): Int = inline n match {
    case Zero => 0
    case Succ(n1) => toInt(n1) + 1
  }

  final val natTwo = toInt(Succ(Succ(Zero)))
  val intTwo: 2 = natTwo
}
-----
ScalaFile
  ScPackaging
    PsiElement(package)('package')
    PsiWhiteSpace(' ')
    CodeReferenceElement: inlinematch
      PsiElement(identifier)('inlinematch')
    PsiWhiteSpace('\n\n')
    ScClass: Test
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      PsiElement(class)('class')
      PsiWhiteSpace(' ')
      PsiElement(identifier)('Test')
      PrimaryConstructor
        AnnotationsList
          <empty list>
        Modifiers
          <empty list>
        Parameters
          <empty list>
      PsiWhiteSpace(' ')
      ExtendsBlock
        ScTemplateBody
          PsiElement({)('{')
          PsiWhiteSpace('\n\n  ')
          ScFunctionDefinition: g
            AnnotationsList
              <empty list>
            Modifiers
              PsiElement(transparent)('transparent')
              PsiWhiteSpace(' ')
              PsiElement(inline)('inline')
            PsiWhiteSpace(' ')
            PsiElement(def)('def')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('g')
            Parameters
              ParametersClause
                PsiElement(()('(')
                Parameter: x
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(identifier)('x')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    SimpleType: Any
                      CodeReferenceElement: Any
                        PsiElement(identifier)('Any')
                PsiElement())(')')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            SimpleType: Any
              CodeReferenceElement: Any
                PsiElement(identifier)('Any')
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace(' ')
            MatchStatement
              PsiElement(inline)('inline')
              PsiWhiteSpace(' ')
              ReferenceExpression: x
                PsiElement(identifier)('x')
              PsiWhiteSpace(' ')
              PsiElement(match)('match')
              PsiWhiteSpace(' ')
              PsiElement({)('{')
              PsiWhiteSpace('\n    ')
              CaseClauses
                CaseClause
                  PsiElement(case)('case')
                  PsiWhiteSpace(' ')
                  Scala3 TypedPattern
                    ReferencePattern: x
                      PsiElement(identifier)('x')
                    PsiElement(:)(':')
                    PsiWhiteSpace(' ')
                    TypePattern
                      SimpleType: String
                        CodeReferenceElement: String
                          PsiElement(identifier)('String')
                  PsiWhiteSpace(' ')
                  PsiElement(=>)('=>')
                  PsiWhiteSpace(' ')
                  BlockOfExpressions
                    Tuple
                      PsiElement(()('(')
                      ReferenceExpression: x
                        PsiElement(identifier)('x')
                      PsiElement(,)(',')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: x
                        PsiElement(identifier)('x')
                      PsiElement())(')')
                PsiWhiteSpace(' ')
                PsiComment(comment)('// Tuple2[String, String](x, x)')
                PsiWhiteSpace('\n    ')
                CaseClause
                  PsiElement(case)('case')
                  PsiWhiteSpace(' ')
                  Scala3 TypedPattern
                    ReferencePattern: x
                      PsiElement(identifier)('x')
                    PsiElement(:)(':')
                    PsiWhiteSpace(' ')
                    TypePattern
                      SimpleType: Double
                        CodeReferenceElement: Double
                          PsiElement(identifier)('Double')
                  PsiWhiteSpace(' ')
                  PsiElement(=>)('=>')
                  PsiWhiteSpace(' ')
                  BlockOfExpressions
                    ReferenceExpression: x
                      PsiElement(identifier)('x')
              PsiWhiteSpace('\n  ')
              PsiElement(})('}')
          PsiWhiteSpace('\n\n  ')
          ScPatternDefinition: t1
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(val)('val')
            PsiWhiteSpace(' ')
            ListOfPatterns
              ReferencePattern: t1
                PsiElement(identifier)('t1')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            LiteralType: 1.0d
              DoubleLiteral
                PsiElement(double)('1.0d')
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace(' ')
            MethodCall
              ReferenceExpression: g
                PsiElement(identifier)('g')
              ArgumentList
                PsiElement(()('(')
                DoubleLiteral
                  PsiElement(double)('1.0d')
                PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiComment(comment)('// Has type 1.0d which is a subtype of Double')
          PsiWhiteSpace('\n  ')
          ScPatternDefinition: t2
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(val)('val')
            PsiWhiteSpace(' ')
            ListOfPatterns
              ReferencePattern: t2
                PsiElement(identifier)('t2')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            TupleType: (String, String)
              PsiElement(()('(')
              TypesList
                SimpleType: String
                  CodeReferenceElement: String
                    PsiElement(identifier)('String')
                PsiElement(,)(',')
                PsiWhiteSpace(' ')
                SimpleType: String
                  CodeReferenceElement: String
                    PsiElement(identifier)('String')
              PsiElement())(')')
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace(' ')
            MethodCall
              ReferenceExpression: g
                PsiElement(identifier)('g')
              ArgumentList
                PsiElement(()('(')
                StringLiteral
                  PsiElement(string content)('"test"')
                PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiComment(comment)('// Has type (String, String)')
          PsiWhiteSpace('\n\n  ')
          ScTrait: Nat
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(trait)('trait')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('Nat')
            ExtendsBlock
              <empty list>
          PsiWhiteSpace('\n  ')
          ScObject: Zero
            AnnotationsList
              <empty list>
            Modifiers
              PsiElement(case)('case')
            PsiWhiteSpace(' ')
            PsiElement(object)('object')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('Zero')
            PsiWhiteSpace(' ')
            ExtendsBlock
              PsiElement(extends)('extends')
              PsiWhiteSpace(' ')
              TemplateParents
                ConstructorInvocation
                  SimpleType: Nat
                    CodeReferenceElement: Nat
                      PsiElement(identifier)('Nat')
          PsiWhiteSpace('\n  ')
          ScClass: Succ
            AnnotationsList
              <empty list>
            Modifiers
              PsiElement(case)('case')
            PsiWhiteSpace(' ')
            PsiElement(class)('class')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('Succ')
            TypeParameterClause
              PsiElement([)('[')
              TypeParameter: N
                PsiElement(identifier)('N')
                PsiWhiteSpace(' ')
                PsiElement(<:)('<:')
                PsiWhiteSpace(' ')
                SimpleType: Nat
                  CodeReferenceElement: Nat
                    PsiElement(identifier)('Nat')
              PsiElement(])(']')
            PrimaryConstructor
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              Parameters
                ParametersClause
                  PsiElement(()('(')
                  ClassParameter: n
                    AnnotationsList
                      <empty list>
                    Modifiers
                      <empty list>
                    PsiElement(identifier)('n')
                    PsiElement(:)(':')
                    PsiWhiteSpace(' ')
                    ParameterType
                      SimpleType: N
                        CodeReferenceElement: N
                          PsiElement(identifier)('N')
                  PsiElement())(')')
            PsiWhiteSpace(' ')
            ExtendsBlock
              PsiElement(extends)('extends')
              PsiWhiteSpace(' ')
              TemplateParents
                ConstructorInvocation
                  SimpleType: Nat
                    CodeReferenceElement: Nat
                      PsiElement(identifier)('Nat')
          PsiWhiteSpace('\n\n  ')
          ScFunctionDefinition: toInt
            AnnotationsList
              <empty list>
            Modifiers
              PsiElement(transparent)('transparent')
              PsiWhiteSpace(' ')
              PsiElement(inline)('inline')
            PsiWhiteSpace(' ')
            PsiElement(def)('def')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('toInt')
            Parameters
              ParametersClause
                PsiElement(()('(')
                Parameter: n
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(identifier)('n')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    SimpleType: Nat
                      CodeReferenceElement: Nat
                        PsiElement(identifier)('Nat')
                PsiElement())(')')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            SimpleType: Int
              CodeReferenceElement: Int
                PsiElement(identifier)('Int')
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace(' ')
            MatchStatement
              PsiElement(inline)('inline')
              PsiWhiteSpace(' ')
              ReferenceExpression: n
                PsiElement(identifier)('n')
              PsiWhiteSpace(' ')
              PsiElement(match)('match')
              PsiWhiteSpace(' ')
              PsiElement({)('{')
              PsiWhiteSpace('\n    ')
              CaseClauses
                CaseClause
                  PsiElement(case)('case')
                  PsiWhiteSpace(' ')
                  StableElementPattern
                    ReferenceExpression: Zero
                      PsiElement(identifier)('Zero')
                  PsiWhiteSpace(' ')
                  PsiElement(=>)('=>')
                  PsiWhiteSpace(' ')
                  BlockOfExpressions
                    IntegerLiteral
                      PsiElement(integer)('0')
                PsiWhiteSpace('\n    ')
                CaseClause
                  PsiElement(case)('case')
                  PsiWhiteSpace(' ')
                  ConstructorPattern
                    CodeReferenceElement: Succ
                      PsiElement(identifier)('Succ')
                    Pattern Argument List
                      PsiElement(()('(')
                      ReferencePattern: n1
                        PsiElement(identifier)('n1')
                      PsiElement())(')')
                  PsiWhiteSpace(' ')
                  PsiElement(=>)('=>')
                  PsiWhiteSpace(' ')
                  BlockOfExpressions
                    InfixExpression
                      MethodCall
                        ReferenceExpression: toInt
                          PsiElement(identifier)('toInt')
                        ArgumentList
                          PsiElement(()('(')
                          ReferenceExpression: n1
                            PsiElement(identifier)('n1')
                          PsiElement())(')')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: +
                        PsiElement(identifier)('+')
                      PsiWhiteSpace(' ')
                      IntegerLiteral
                        PsiElement(integer)('1')
              PsiWhiteSpace('\n  ')
              PsiElement(})('}')
          PsiWhiteSpace('\n\n  ')
          ScPatternDefinition: natTwo
            AnnotationsList
              <empty list>
            Modifiers
              PsiElement(final)('final')
            PsiWhiteSpace(' ')
            PsiElement(val)('val')
            PsiWhiteSpace(' ')
            ListOfPatterns
              ReferencePattern: natTwo
                PsiElement(identifier)('natTwo')
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace(' ')
            MethodCall
              ReferenceExpression: toInt
                PsiElement(identifier)('toInt')
              ArgumentList
                PsiElement(()('(')
                MethodCall
                  ReferenceExpression: Succ
                    PsiElement(identifier)('Succ')
                  ArgumentList
                    PsiElement(()('(')
                    MethodCall
                      ReferenceExpression: Succ
                        PsiElement(identifier)('Succ')
                      ArgumentList
                        PsiElement(()('(')
                        ReferenceExpression: Zero
                          PsiElement(identifier)('Zero')
                        PsiElement())(')')
                    PsiElement())(')')
                PsiElement())(')')
          PsiWhiteSpace('\n  ')
          ScPatternDefinition: intTwo
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(val)('val')
            PsiWhiteSpace(' ')
            ListOfPatterns
              ReferencePattern: intTwo
                PsiElement(identifier)('intTwo')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            LiteralType: 2
              IntegerLiteral
                PsiElement(integer)('2')
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace(' ')
            ReferenceExpression: natTwo
              PsiElement(identifier)('natTwo')
          PsiWhiteSpace('\n')
          PsiElement(})('}')
