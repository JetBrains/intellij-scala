object Bug {
  abstract class FChain {
    type T

    def chain(constant:String) =
      new FConstant[this.type](constant, this) //removing [this.type], everything compiles
  }

  case class FConstant[E <: FChain](constant:String, tail:E) extends FChain {
    type T = tail.T
  }

  object FNil extends FChain {
    type T = Unit
  }

}

object Test {
  import Bug.*
  println("Compiles:")
  val a1 = FNil.chain("a").chain("a")
  val a2 = a1.chain("a")

  println("\nDoesn't compile:")
  val a3 = FNil.chain("a").chain("a").chain("a")
  val a4: FConstant[_ <: FConstant[_ <: FConstant[FNil.type]]] = a3
}
-----
ScalaFile
  ScObject: Bug
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Bug')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScClass: FChain
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(abstract)('abstract')
          PsiWhiteSpace(' ')
          PsiElement(class)('class')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('FChain')
          PrimaryConstructor
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            Parameters
              <empty list>
          PsiWhiteSpace(' ')
          ExtendsBlock
            ScTemplateBody
              PsiElement({)('{')
              PsiWhiteSpace('\n    ')
              ScTypeAliasDeclaration: T
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(type)('type')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('T')
              PsiWhiteSpace('\n\n    ')
              ScFunctionDefinition: chain
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(def)('def')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('chain')
                Parameters
                  ParametersClause
                    PsiElement(()('(')
                    Parameter: constant
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(identifier)('constant')
                      PsiElement(:)(':')
                      ParameterType
                        SimpleType: String
                          CodeReferenceElement: String
                            PsiElement(identifier)('String')
                    PsiElement())(')')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace('\n      ')
                ScNewTemplateDefinition: <anonymous>
                  PsiElement(new)('new')
                  PsiWhiteSpace(' ')
                  ExtendsBlock
                    TemplateParents
                      ConstructorInvocation
                        ParametrizedType: FConstant[this.type]
                          SimpleType: FConstant
                            CodeReferenceElement: FConstant
                              PsiElement(identifier)('FConstant')
                          TypeArgumentsList
                            PsiElement([)('[')
                            SimpleType: this.type
                              ThisReference
                                PsiElement(this)('this')
                              PsiElement(.)('.')
                              PsiElement(type)('type')
                            PsiElement(])(']')
                        ArgumentList
                          PsiElement(()('(')
                          ReferenceExpression: constant
                            PsiElement(identifier)('constant')
                          PsiElement(,)(',')
                          PsiWhiteSpace(' ')
                          ThisReference
                            PsiElement(this)('this')
                          PsiElement())(')')
              PsiWhiteSpace(' ')
              PsiComment(comment)('//removing [this.type], everything compiles')
              PsiWhiteSpace('\n  ')
              PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        ScClass: FConstant
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(case)('case')
          PsiWhiteSpace(' ')
          PsiElement(class)('class')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('FConstant')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: E
              PsiElement(identifier)('E')
              PsiWhiteSpace(' ')
              PsiElement(<:)('<:')
              PsiWhiteSpace(' ')
              SimpleType: FChain
                CodeReferenceElement: FChain
                  PsiElement(identifier)('FChain')
            PsiElement(])(']')
          PrimaryConstructor
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            Parameters
              ParametersClause
                PsiElement(()('(')
                ClassParameter: constant
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(identifier)('constant')
                  PsiElement(:)(':')
                  ParameterType
                    SimpleType: String
                      CodeReferenceElement: String
                        PsiElement(identifier)('String')
                PsiElement(,)(',')
                PsiWhiteSpace(' ')
                ClassParameter: tail
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(identifier)('tail')
                  PsiElement(:)(':')
                  ParameterType
                    SimpleType: E
                      CodeReferenceElement: E
                        PsiElement(identifier)('E')
                PsiElement())(')')
          PsiWhiteSpace(' ')
          ExtendsBlock
            PsiElement(extends)('extends')
            PsiWhiteSpace(' ')
            TemplateParents
              ConstructorInvocation
                SimpleType: FChain
                  CodeReferenceElement: FChain
                    PsiElement(identifier)('FChain')
            PsiWhiteSpace(' ')
            ScTemplateBody
              PsiElement({)('{')
              PsiWhiteSpace('\n    ')
              ScTypeAliasDefinition: T
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(type)('type')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('T')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                SimpleType: tail.T
                  CodeReferenceElement: tail.T
                    CodeReferenceElement: tail
                      PsiElement(identifier)('tail')
                    PsiElement(.)('.')
                    PsiElement(identifier)('T')
              PsiWhiteSpace('\n  ')
              PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        ScObject: FNil
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(object)('object')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('FNil')
          PsiWhiteSpace(' ')
          ExtendsBlock
            PsiElement(extends)('extends')
            PsiWhiteSpace(' ')
            TemplateParents
              ConstructorInvocation
                SimpleType: FChain
                  CodeReferenceElement: FChain
                    PsiElement(identifier)('FChain')
            PsiWhiteSpace(' ')
            ScTemplateBody
              PsiElement({)('{')
              PsiWhiteSpace('\n    ')
              ScTypeAliasDefinition: T
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(type)('type')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('T')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                SimpleType: Unit
                  CodeReferenceElement: Unit
                    PsiElement(identifier)('Unit')
              PsiWhiteSpace('\n  ')
              PsiElement(})('}')
        PsiWhiteSpace('\n\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScObject: Test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScImportStatement
          PsiElement(import)('import')
          PsiWhiteSpace(' ')
          ImportExpression
            CodeReferenceElement: Bug
              PsiElement(identifier)('Bug')
            PsiElement(.)('.')
            PsiElement(*)('*')
        PsiWhiteSpace('\n  ')
        MethodCall
          ReferenceExpression: println
            PsiElement(identifier)('println')
          ArgumentList
            PsiElement(()('(')
            StringLiteral
              PsiElement(string content)('"Compiles:"')
            PsiElement())(')')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: a1
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: a1
              PsiElement(identifier)('a1')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: FNil.chain("a").chain
              MethodCall
                ReferenceExpression: FNil.chain
                  ReferenceExpression: FNil
                    PsiElement(identifier)('FNil')
                  PsiElement(.)('.')
                  PsiElement(identifier)('chain')
                ArgumentList
                  PsiElement(()('(')
                  StringLiteral
                    PsiElement(string content)('"a"')
                  PsiElement())(')')
              PsiElement(.)('.')
              PsiElement(identifier)('chain')
            ArgumentList
              PsiElement(()('(')
              StringLiteral
                PsiElement(string content)('"a"')
              PsiElement())(')')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: a2
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: a2
              PsiElement(identifier)('a2')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: a1.chain
              ReferenceExpression: a1
                PsiElement(identifier)('a1')
              PsiElement(.)('.')
              PsiElement(identifier)('chain')
            ArgumentList
              PsiElement(()('(')
              StringLiteral
                PsiElement(string content)('"a"')
              PsiElement())(')')
        PsiWhiteSpace('\n\n  ')
        MethodCall
          ReferenceExpression: println
            PsiElement(identifier)('println')
          ArgumentList
            PsiElement(()('(')
            StringLiteral
              PsiElement(string content)('"\nDoesn't compile:"')
            PsiElement())(')')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: a3
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: a3
              PsiElement(identifier)('a3')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: FNil.chain("a").chain("a").chain
              MethodCall
                ReferenceExpression: FNil.chain("a").chain
                  MethodCall
                    ReferenceExpression: FNil.chain
                      ReferenceExpression: FNil
                        PsiElement(identifier)('FNil')
                      PsiElement(.)('.')
                      PsiElement(identifier)('chain')
                    ArgumentList
                      PsiElement(()('(')
                      StringLiteral
                        PsiElement(string content)('"a"')
                      PsiElement())(')')
                  PsiElement(.)('.')
                  PsiElement(identifier)('chain')
                ArgumentList
                  PsiElement(()('(')
                  StringLiteral
                    PsiElement(string content)('"a"')
                  PsiElement())(')')
              PsiElement(.)('.')
              PsiElement(identifier)('chain')
            ArgumentList
              PsiElement(()('(')
              StringLiteral
                PsiElement(string content)('"a"')
              PsiElement())(')')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: a4
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: a4
              PsiElement(identifier)('a4')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: FConstant[_ <: FConstant[_ <: FConstant[FNil.type]]]
            SimpleType: FConstant
              CodeReferenceElement: FConstant
                PsiElement(identifier)('FConstant')
            TypeArgumentsList
              PsiElement([)('[')
              WildcardType: _ <: FConstant[_ <: FConstant[FNil.type]]
                PsiElement(_)('_')
                PsiWhiteSpace(' ')
                PsiElement(<:)('<:')
                PsiWhiteSpace(' ')
                ParametrizedType: FConstant[_ <: FConstant[FNil.type]]
                  SimpleType: FConstant
                    CodeReferenceElement: FConstant
                      PsiElement(identifier)('FConstant')
                  TypeArgumentsList
                    PsiElement([)('[')
                    WildcardType: _ <: FConstant[FNil.type]
                      PsiElement(_)('_')
                      PsiWhiteSpace(' ')
                      PsiElement(<:)('<:')
                      PsiWhiteSpace(' ')
                      ParametrizedType: FConstant[FNil.type]
                        SimpleType: FConstant
                          CodeReferenceElement: FConstant
                            PsiElement(identifier)('FConstant')
                        TypeArgumentsList
                          PsiElement([)('[')
                          SimpleType: FNil.type
                            CodeReferenceElement: FNil
                              PsiElement(identifier)('FNil')
                            PsiElement(.)('.')
                            PsiElement(type)('type')
                          PsiElement(])(']')
                    PsiElement(])(']')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: a3
            PsiElement(identifier)('a3')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
