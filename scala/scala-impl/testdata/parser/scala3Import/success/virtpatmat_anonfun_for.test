trait Foo {
  def bla = {
    val tvs = "tvs"
    Nil.foreach(x => x match {
      case _ => println(tvs)
    })
  }
}
-----
ScalaFile
  ScTrait: Foo
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Foo')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: bla
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('bla')
          Parameters
            <empty list>
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          BlockExpression
            PsiElement({)('{')
            PsiWhiteSpace('\n    ')
            ScPatternDefinition: tvs
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              ListOfPatterns
                ReferencePattern: tvs
                  PsiElement(identifier)('tvs')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              StringLiteral
                PsiElement(string content)('"tvs"')
            PsiWhiteSpace('\n    ')
            MethodCall
              ReferenceExpression: Nil.foreach
                ReferenceExpression: Nil
                  PsiElement(identifier)('Nil')
                PsiElement(.)('.')
                PsiElement(identifier)('foreach')
              ArgumentList
                PsiElement(()('(')
                FunctionExpression
                  Parameters
                    ParametersClause
                      Parameter: x
                        PsiElement(identifier)('x')
                  PsiWhiteSpace(' ')
                  PsiElement(=>)('=>')
                  PsiWhiteSpace(' ')
                  MatchStatement
                    ReferenceExpression: x
                      PsiElement(identifier)('x')
                    PsiWhiteSpace(' ')
                    PsiElement(match)('match')
                    PsiWhiteSpace(' ')
                    PsiElement({)('{')
                    PsiWhiteSpace('\n      ')
                    CaseClauses
                      CaseClause
                        PsiElement(case)('case')
                        PsiWhiteSpace(' ')
                        WildcardPattern
                          PsiElement(_)('_')
                        PsiWhiteSpace(' ')
                        PsiElement(=>)('=>')
                        PsiWhiteSpace(' ')
                        BlockOfExpressions
                          MethodCall
                            ReferenceExpression: println
                              PsiElement(identifier)('println')
                            ArgumentList
                              PsiElement(()('(')
                              ReferenceExpression: tvs
                                PsiElement(identifier)('tvs')
                              PsiElement())(')')
                    PsiWhiteSpace('\n    ')
                    PsiElement(})('}')
                PsiElement())(')')
            PsiWhiteSpace('\n  ')
            PsiElement(})('}')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
