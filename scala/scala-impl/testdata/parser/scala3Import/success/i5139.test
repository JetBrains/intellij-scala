trait A
trait B

class Base{
  def m(ab: A&B) = ab
}
class Derived extends Base{
  override def m(ab: B&A) = ab // unexpected error
}
-----
ScalaFile
  ScTrait: A
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('A')
    ExtendsBlock
      <empty list>
  PsiWhiteSpace('\n')
  ScTrait: B
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('B')
    ExtendsBlock
      <empty list>
  PsiWhiteSpace('\n\n')
  ScClass: Base
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Base')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: m
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('m')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: ab
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('ab')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  InfixType: A&B
                    SimpleType: A
                      CodeReferenceElement: A
                        PsiElement(identifier)('A')
                    CodeReferenceElement: &
                      PsiElement(identifier)('&')
                    SimpleType: B
                      CodeReferenceElement: B
                        PsiElement(identifier)('B')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: ab
            PsiElement(identifier)('ab')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n')
  ScClass: Derived
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Derived')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          SimpleType: Base
            CodeReferenceElement: Base
              PsiElement(identifier)('Base')
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: m
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(override)('override')
          PsiWhiteSpace(' ')
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('m')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: ab
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('ab')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  InfixType: B&A
                    SimpleType: B
                      CodeReferenceElement: B
                        PsiElement(identifier)('B')
                    CodeReferenceElement: &
                      PsiElement(identifier)('&')
                    SimpleType: A
                      CodeReferenceElement: A
                        PsiElement(identifier)('A')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: ab
            PsiElement(identifier)('ab')
        PsiWhiteSpace(' ')
        PsiComment(comment)('// unexpected error')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
