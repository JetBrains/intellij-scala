


import collection.*



object Test {

  class AlarmingBuffer[T] extends mutable.ArrayBuffer[T] {
    override def sizeHint(x: Int): Unit = {
      println("Received a size hint: " + x)
      super.sizeHint(x)
    }
  }

  def main(args: Array[String]): Unit = {
    val iteratorBuilder = (new AlarmingBuffer[Int]) mapResult {
      res => res.iterator
    }

    iteratorBuilder.sizeHint(10)
    iteratorBuilder ++= (0 until 10)
    iteratorBuilder.result().foreach(println)
  }

}
-----
ScalaFile
  ScImportStatement
    PsiElement(import)('import')
    PsiWhiteSpace(' ')
    ImportExpression
      CodeReferenceElement: collection
        PsiElement(identifier)('collection')
      PsiElement(.)('.')
      PsiElement(*)('*')
  PsiWhiteSpace('\n\n\n\n')
  ScObject: Test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n\n  ')
        ScClass: AlarmingBuffer
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(class)('class')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('AlarmingBuffer')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: T
              PsiElement(identifier)('T')
            PsiElement(])(']')
          PrimaryConstructor
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            Parameters
              <empty list>
          PsiWhiteSpace(' ')
          ExtendsBlock
            PsiElement(extends)('extends')
            PsiWhiteSpace(' ')
            TemplateParents
              ConstructorInvocation
                ParametrizedType: mutable.ArrayBuffer[T]
                  SimpleType: mutable.ArrayBuffer
                    CodeReferenceElement: mutable.ArrayBuffer
                      CodeReferenceElement: mutable
                        PsiElement(identifier)('mutable')
                      PsiElement(.)('.')
                      PsiElement(identifier)('ArrayBuffer')
                  TypeArgumentsList
                    PsiElement([)('[')
                    SimpleType: T
                      CodeReferenceElement: T
                        PsiElement(identifier)('T')
                    PsiElement(])(']')
            PsiWhiteSpace(' ')
            ScTemplateBody
              PsiElement({)('{')
              PsiWhiteSpace('\n    ')
              ScFunctionDefinition: sizeHint
                AnnotationsList
                  <empty list>
                Modifiers
                  PsiElement(override)('override')
                PsiWhiteSpace(' ')
                PsiElement(def)('def')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('sizeHint')
                Parameters
                  ParametersClause
                    PsiElement(()('(')
                    Parameter: x
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(identifier)('x')
                      PsiElement(:)(':')
                      PsiWhiteSpace(' ')
                      ParameterType
                        SimpleType: Int
                          CodeReferenceElement: Int
                            PsiElement(identifier)('Int')
                    PsiElement())(')')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                SimpleType: Unit
                  CodeReferenceElement: Unit
                    PsiElement(identifier)('Unit')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                BlockExpression
                  PsiElement({)('{')
                  PsiWhiteSpace('\n      ')
                  MethodCall
                    ReferenceExpression: println
                      PsiElement(identifier)('println')
                    ArgumentList
                      PsiElement(()('(')
                      InfixExpression
                        StringLiteral
                          PsiElement(string content)('"Received a size hint: "')
                        PsiWhiteSpace(' ')
                        ReferenceExpression: +
                          PsiElement(identifier)('+')
                        PsiWhiteSpace(' ')
                        ReferenceExpression: x
                          PsiElement(identifier)('x')
                      PsiElement())(')')
                  PsiWhiteSpace('\n      ')
                  MethodCall
                    ReferenceExpression: super.sizeHint
                      SuperReference
                        PsiElement(super)('super')
                      PsiElement(.)('.')
                      PsiElement(identifier)('sizeHint')
                    ArgumentList
                      PsiElement(()('(')
                      ReferenceExpression: x
                        PsiElement(identifier)('x')
                      PsiElement())(')')
                  PsiWhiteSpace('\n    ')
                  PsiElement(})('}')
              PsiWhiteSpace('\n  ')
              PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: main
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('main')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: args
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('args')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  ParametrizedType: Array[String]
                    SimpleType: Array
                      CodeReferenceElement: Array
                        PsiElement(identifier)('Array')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: String
                        CodeReferenceElement: String
                          PsiElement(identifier)('String')
                      PsiElement(])(']')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Unit
            CodeReferenceElement: Unit
              PsiElement(identifier)('Unit')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          BlockExpression
            PsiElement({)('{')
            PsiWhiteSpace('\n    ')
            ScPatternDefinition: iteratorBuilder
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              ListOfPatterns
                ReferencePattern: iteratorBuilder
                  PsiElement(identifier)('iteratorBuilder')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              InfixExpression
                ExpressionInParenthesis
                  PsiElement(()('(')
                  ScNewTemplateDefinition: <anonymous>
                    PsiElement(new)('new')
                    PsiWhiteSpace(' ')
                    ExtendsBlock
                      TemplateParents
                        ConstructorInvocation
                          ParametrizedType: AlarmingBuffer[Int]
                            SimpleType: AlarmingBuffer
                              CodeReferenceElement: AlarmingBuffer
                                PsiElement(identifier)('AlarmingBuffer')
                            TypeArgumentsList
                              PsiElement([)('[')
                              SimpleType: Int
                                CodeReferenceElement: Int
                                  PsiElement(identifier)('Int')
                              PsiElement(])(']')
                  PsiElement())(')')
                PsiWhiteSpace(' ')
                ReferenceExpression: mapResult
                  PsiElement(identifier)('mapResult')
                PsiWhiteSpace(' ')
                BlockExpression
                  PsiElement({)('{')
                  PsiWhiteSpace('\n      ')
                  FunctionExpression
                    Parameters
                      ParametersClause
                        Parameter: res
                          PsiElement(identifier)('res')
                    PsiWhiteSpace(' ')
                    PsiElement(=>)('=>')
                    PsiWhiteSpace(' ')
                    BlockOfExpressions
                      ReferenceExpression: res.iterator
                        ReferenceExpression: res
                          PsiElement(identifier)('res')
                        PsiElement(.)('.')
                        PsiElement(identifier)('iterator')
                  PsiWhiteSpace('\n    ')
                  PsiElement(})('}')
            PsiWhiteSpace('\n\n    ')
            MethodCall
              ReferenceExpression: iteratorBuilder.sizeHint
                ReferenceExpression: iteratorBuilder
                  PsiElement(identifier)('iteratorBuilder')
                PsiElement(.)('.')
                PsiElement(identifier)('sizeHint')
              ArgumentList
                PsiElement(()('(')
                IntegerLiteral
                  PsiElement(integer)('10')
                PsiElement())(')')
            PsiWhiteSpace('\n    ')
            InfixExpression
              ReferenceExpression: iteratorBuilder
                PsiElement(identifier)('iteratorBuilder')
              PsiWhiteSpace(' ')
              ReferenceExpression: ++=
                PsiElement(identifier)('++=')
              PsiWhiteSpace(' ')
              ExpressionInParenthesis
                PsiElement(()('(')
                InfixExpression
                  IntegerLiteral
                    PsiElement(integer)('0')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: until
                    PsiElement(identifier)('until')
                  PsiWhiteSpace(' ')
                  IntegerLiteral
                    PsiElement(integer)('10')
                PsiElement())(')')
            PsiWhiteSpace('\n    ')
            MethodCall
              ReferenceExpression: iteratorBuilder.result().foreach
                MethodCall
                  ReferenceExpression: iteratorBuilder.result
                    ReferenceExpression: iteratorBuilder
                      PsiElement(identifier)('iteratorBuilder')
                    PsiElement(.)('.')
                    PsiElement(identifier)('result')
                  ArgumentList
                    PsiElement(()('(')
                    PsiElement())(')')
                PsiElement(.)('.')
                PsiElement(identifier)('foreach')
              ArgumentList
                PsiElement(()('(')
                ReferenceExpression: println
                  PsiElement(identifier)('println')
                PsiElement())(')')
            PsiWhiteSpace('\n  ')
            PsiElement(})('}')
        PsiWhiteSpace('\n\n')
        PsiElement(})('}')
