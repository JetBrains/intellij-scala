class Has[A]
trait X
trait Y
trait Z

abstract class Test {
  def x: Has[X] | (Has[Y] & Has[Z])
  val y: Has[? >: (X & Y) | (X & Z) <: (X | Y) & (X | Z)] = x

  def foo[T <: Has[_]](has: T): T = has
  foo(x)
}

// +

trait ZLayer[-RIn, +E, +ROut <: Has[_]] {
  def >>>[E1 >: E, ROut2 <: Has[_]](that: ZLayer[ROut, E1, ROut2]): ZLayer[RIn, E1, ROut2]
  def ++[E1 >: E, RIn2, ROut1 >: ROut <: Has[_], ROut2 <: Has[_]](that: ZLayer[RIn2, E1, ROut2]): ZLayer[RIn with RIn2, E1, ROut1 with ROut2]
}
object ZLayer {
  type NoDeps[+E, +B <: Has[_]] = ZLayer[Any, E, B]
}

type ServiceA = Has[ServiceA.Service]
object ServiceA {
  trait Service
  val live: ZLayer.NoDeps[Nothing, ServiceA] = ???
}

type ServiceB = Has[ServiceB.Service]
object ServiceB {
  trait Service
  val live: ZLayer.NoDeps[Nothing, ServiceB] = ???
}

type ServiceC = Has[ServiceC.Service]
object ServiceC {
  trait Service
  val live: ZLayer.NoDeps[Nothing, ServiceC] = ???
}

type ServiceD = Has[ServiceD.Service]
object ServiceD {
  trait Service
  val live: ZLayer.NoDeps[ServiceC, ServiceD with ServiceC] = ???
}

val combined =
    ServiceA.live >>>
      (ServiceB.live ++ (ServiceC.live >>> ServiceD.live))

// +

class Outer {
  class Elem
}

abstract class Test2 {
  val o1: Outer = ???
  val o2: Outer = ???
  val o3: Outer = ???

  val x: o1.Elem | (o2.Elem & o3.Elem)
  def foo[T <: Outer#Elem](has: T): T = ???
  foo(x)
}
-----
ScalaFile
  ScClass: Has
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Has')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: A
        PsiElement(identifier)('A')
      PsiElement(])(']')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    ExtendsBlock
      <empty list>
  PsiWhiteSpace('\n')
  ScTrait: X
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('X')
    ExtendsBlock
      <empty list>
  PsiWhiteSpace('\n')
  ScTrait: Y
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Y')
    ExtendsBlock
      <empty list>
  PsiWhiteSpace('\n')
  ScTrait: Z
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Z')
    ExtendsBlock
      <empty list>
  PsiWhiteSpace('\n\n')
  ScClass: Test
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(abstract)('abstract')
    PsiWhiteSpace(' ')
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDeclaration: x
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('x')
          Parameters
            <empty list>
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          InfixType: Has[X] | (Has[Y] & Has[Z])
            ParametrizedType: Has[X]
              SimpleType: Has
                CodeReferenceElement: Has
                  PsiElement(identifier)('Has')
              TypeArgumentsList
                PsiElement([)('[')
                SimpleType: X
                  CodeReferenceElement: X
                    PsiElement(identifier)('X')
                PsiElement(])(']')
            PsiWhiteSpace(' ')
            CodeReferenceElement: |
              PsiElement(identifier)('|')
            PsiWhiteSpace(' ')
            TypeInParenthesis: (Has[Y] & Has[Z])
              PsiElement(()('(')
              InfixType: Has[Y] & Has[Z]
                ParametrizedType: Has[Y]
                  SimpleType: Has
                    CodeReferenceElement: Has
                      PsiElement(identifier)('Has')
                  TypeArgumentsList
                    PsiElement([)('[')
                    SimpleType: Y
                      CodeReferenceElement: Y
                        PsiElement(identifier)('Y')
                    PsiElement(])(']')
                PsiWhiteSpace(' ')
                CodeReferenceElement: &
                  PsiElement(identifier)('&')
                PsiWhiteSpace(' ')
                ParametrizedType: Has[Z]
                  SimpleType: Has
                    CodeReferenceElement: Has
                      PsiElement(identifier)('Has')
                  TypeArgumentsList
                    PsiElement([)('[')
                    SimpleType: Z
                      CodeReferenceElement: Z
                        PsiElement(identifier)('Z')
                    PsiElement(])(']')
              PsiElement())(')')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: y
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: y
              PsiElement(identifier)('y')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: Has[? >: (X & Y) | (X & Z) <: (X | Y) & (X | Z)]
            SimpleType: Has
              CodeReferenceElement: Has
                PsiElement(identifier)('Has')
            TypeArgumentsList
              PsiElement([)('[')
              WildcardType: ? >: (X & Y) | (X & Z) <: (X | Y) & (X | Z)
                PsiElement(?)('?')
                PsiWhiteSpace(' ')
                PsiElement(>:)('>:')
                PsiWhiteSpace(' ')
                InfixType: (X & Y) | (X & Z)
                  TypeInParenthesis: (X & Y)
                    PsiElement(()('(')
                    InfixType: X & Y
                      SimpleType: X
                        CodeReferenceElement: X
                          PsiElement(identifier)('X')
                      PsiWhiteSpace(' ')
                      CodeReferenceElement: &
                        PsiElement(identifier)('&')
                      PsiWhiteSpace(' ')
                      SimpleType: Y
                        CodeReferenceElement: Y
                          PsiElement(identifier)('Y')
                    PsiElement())(')')
                  PsiWhiteSpace(' ')
                  CodeReferenceElement: |
                    PsiElement(identifier)('|')
                  PsiWhiteSpace(' ')
                  TypeInParenthesis: (X & Z)
                    PsiElement(()('(')
                    InfixType: X & Z
                      SimpleType: X
                        CodeReferenceElement: X
                          PsiElement(identifier)('X')
                      PsiWhiteSpace(' ')
                      CodeReferenceElement: &
                        PsiElement(identifier)('&')
                      PsiWhiteSpace(' ')
                      SimpleType: Z
                        CodeReferenceElement: Z
                          PsiElement(identifier)('Z')
                    PsiElement())(')')
                PsiWhiteSpace(' ')
                PsiElement(<:)('<:')
                PsiWhiteSpace(' ')
                InfixType: (X | Y) & (X | Z)
                  TypeInParenthesis: (X | Y)
                    PsiElement(()('(')
                    InfixType: X | Y
                      SimpleType: X
                        CodeReferenceElement: X
                          PsiElement(identifier)('X')
                      PsiWhiteSpace(' ')
                      CodeReferenceElement: |
                        PsiElement(identifier)('|')
                      PsiWhiteSpace(' ')
                      SimpleType: Y
                        CodeReferenceElement: Y
                          PsiElement(identifier)('Y')
                    PsiElement())(')')
                  PsiWhiteSpace(' ')
                  CodeReferenceElement: &
                    PsiElement(identifier)('&')
                  PsiWhiteSpace(' ')
                  TypeInParenthesis: (X | Z)
                    PsiElement(()('(')
                    InfixType: X | Z
                      SimpleType: X
                        CodeReferenceElement: X
                          PsiElement(identifier)('X')
                      PsiWhiteSpace(' ')
                      CodeReferenceElement: |
                        PsiElement(identifier)('|')
                      PsiWhiteSpace(' ')
                      SimpleType: Z
                        CodeReferenceElement: Z
                          PsiElement(identifier)('Z')
                    PsiElement())(')')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: x
            PsiElement(identifier)('x')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: foo
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('foo')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: T
              PsiElement(identifier)('T')
              PsiWhiteSpace(' ')
              PsiElement(<:)('<:')
              PsiWhiteSpace(' ')
              ParametrizedType: Has[_]
                SimpleType: Has
                  CodeReferenceElement: Has
                    PsiElement(identifier)('Has')
                TypeArgumentsList
                  PsiElement([)('[')
                  WildcardType: _
                    PsiElement(_)('_')
                  PsiElement(])(']')
            PsiElement(])(']')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: has
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('has')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: T
                    CodeReferenceElement: T
                      PsiElement(identifier)('T')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: T
            CodeReferenceElement: T
              PsiElement(identifier)('T')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: has
            PsiElement(identifier)('has')
        PsiWhiteSpace('\n  ')
        MethodCall
          ReferenceExpression: foo
            PsiElement(identifier)('foo')
          ArgumentList
            PsiElement(()('(')
            ReferenceExpression: x
              PsiElement(identifier)('x')
            PsiElement())(')')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  PsiComment(comment)('// +')
  PsiWhiteSpace('\n\n')
  ScTrait: ZLayer
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('ZLayer')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: RIn
        PsiElement(identifier)('-')
        PsiElement(identifier)('RIn')
      PsiElement(,)(',')
      PsiWhiteSpace(' ')
      TypeParameter: E
        PsiElement(identifier)('+')
        PsiElement(identifier)('E')
      PsiElement(,)(',')
      PsiWhiteSpace(' ')
      TypeParameter: ROut
        PsiElement(identifier)('+')
        PsiElement(identifier)('ROut')
        PsiWhiteSpace(' ')
        PsiElement(<:)('<:')
        PsiWhiteSpace(' ')
        ParametrizedType: Has[_]
          SimpleType: Has
            CodeReferenceElement: Has
              PsiElement(identifier)('Has')
          TypeArgumentsList
            PsiElement([)('[')
            WildcardType: _
              PsiElement(_)('_')
            PsiElement(])(']')
      PsiElement(])(']')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDeclaration: >>>
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('>>>')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: E1
              PsiElement(identifier)('E1')
              PsiWhiteSpace(' ')
              PsiElement(>:)('>:')
              PsiWhiteSpace(' ')
              SimpleType: E
                CodeReferenceElement: E
                  PsiElement(identifier)('E')
            PsiElement(,)(',')
            PsiWhiteSpace(' ')
            TypeParameter: ROut2
              PsiElement(identifier)('ROut2')
              PsiWhiteSpace(' ')
              PsiElement(<:)('<:')
              PsiWhiteSpace(' ')
              ParametrizedType: Has[_]
                SimpleType: Has
                  CodeReferenceElement: Has
                    PsiElement(identifier)('Has')
                TypeArgumentsList
                  PsiElement([)('[')
                  WildcardType: _
                    PsiElement(_)('_')
                  PsiElement(])(']')
            PsiElement(])(']')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: that
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('that')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  ParametrizedType: ZLayer[ROut, E1, ROut2]
                    SimpleType: ZLayer
                      CodeReferenceElement: ZLayer
                        PsiElement(identifier)('ZLayer')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: ROut
                        CodeReferenceElement: ROut
                          PsiElement(identifier)('ROut')
                      PsiElement(,)(',')
                      PsiWhiteSpace(' ')
                      SimpleType: E1
                        CodeReferenceElement: E1
                          PsiElement(identifier)('E1')
                      PsiElement(,)(',')
                      PsiWhiteSpace(' ')
                      SimpleType: ROut2
                        CodeReferenceElement: ROut2
                          PsiElement(identifier)('ROut2')
                      PsiElement(])(']')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: ZLayer[RIn, E1, ROut2]
            SimpleType: ZLayer
              CodeReferenceElement: ZLayer
                PsiElement(identifier)('ZLayer')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: RIn
                CodeReferenceElement: RIn
                  PsiElement(identifier)('RIn')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              SimpleType: E1
                CodeReferenceElement: E1
                  PsiElement(identifier)('E1')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              SimpleType: ROut2
                CodeReferenceElement: ROut2
                  PsiElement(identifier)('ROut2')
              PsiElement(])(']')
        PsiWhiteSpace('\n  ')
        ScFunctionDeclaration: ++
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('++')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: E1
              PsiElement(identifier)('E1')
              PsiWhiteSpace(' ')
              PsiElement(>:)('>:')
              PsiWhiteSpace(' ')
              SimpleType: E
                CodeReferenceElement: E
                  PsiElement(identifier)('E')
            PsiElement(,)(',')
            PsiWhiteSpace(' ')
            TypeParameter: RIn2
              PsiElement(identifier)('RIn2')
            PsiElement(,)(',')
            PsiWhiteSpace(' ')
            TypeParameter: ROut1
              PsiElement(identifier)('ROut1')
              PsiWhiteSpace(' ')
              PsiElement(>:)('>:')
              PsiWhiteSpace(' ')
              SimpleType: ROut
                CodeReferenceElement: ROut
                  PsiElement(identifier)('ROut')
              PsiWhiteSpace(' ')
              PsiElement(<:)('<:')
              PsiWhiteSpace(' ')
              ParametrizedType: Has[_]
                SimpleType: Has
                  CodeReferenceElement: Has
                    PsiElement(identifier)('Has')
                TypeArgumentsList
                  PsiElement([)('[')
                  WildcardType: _
                    PsiElement(_)('_')
                  PsiElement(])(']')
            PsiElement(,)(',')
            PsiWhiteSpace(' ')
            TypeParameter: ROut2
              PsiElement(identifier)('ROut2')
              PsiWhiteSpace(' ')
              PsiElement(<:)('<:')
              PsiWhiteSpace(' ')
              ParametrizedType: Has[_]
                SimpleType: Has
                  CodeReferenceElement: Has
                    PsiElement(identifier)('Has')
                TypeArgumentsList
                  PsiElement([)('[')
                  WildcardType: _
                    PsiElement(_)('_')
                  PsiElement(])(']')
            PsiElement(])(']')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: that
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('that')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  ParametrizedType: ZLayer[RIn2, E1, ROut2]
                    SimpleType: ZLayer
                      CodeReferenceElement: ZLayer
                        PsiElement(identifier)('ZLayer')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: RIn2
                        CodeReferenceElement: RIn2
                          PsiElement(identifier)('RIn2')
                      PsiElement(,)(',')
                      PsiWhiteSpace(' ')
                      SimpleType: E1
                        CodeReferenceElement: E1
                          PsiElement(identifier)('E1')
                      PsiElement(,)(',')
                      PsiWhiteSpace(' ')
                      SimpleType: ROut2
                        CodeReferenceElement: ROut2
                          PsiElement(identifier)('ROut2')
                      PsiElement(])(']')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: ZLayer[RIn with RIn2, E1, ROut1 with ROut2]
            SimpleType: ZLayer
              CodeReferenceElement: ZLayer
                PsiElement(identifier)('ZLayer')
            TypeArgumentsList
              PsiElement([)('[')
              CompoundType: RIn with RIn2
                SimpleType: RIn
                  CodeReferenceElement: RIn
                    PsiElement(identifier)('RIn')
                PsiWhiteSpace(' ')
                PsiElement(with)('with')
                PsiWhiteSpace(' ')
                SimpleType: RIn2
                  CodeReferenceElement: RIn2
                    PsiElement(identifier)('RIn2')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              SimpleType: E1
                CodeReferenceElement: E1
                  PsiElement(identifier)('E1')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              CompoundType: ROut1 with ROut2
                SimpleType: ROut1
                  CodeReferenceElement: ROut1
                    PsiElement(identifier)('ROut1')
                PsiWhiteSpace(' ')
                PsiElement(with)('with')
                PsiWhiteSpace(' ')
                SimpleType: ROut2
                  CodeReferenceElement: ROut2
                    PsiElement(identifier)('ROut2')
              PsiElement(])(']')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n')
  ScObject: ZLayer
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('ZLayer')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScTypeAliasDefinition: NoDeps
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('NoDeps')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: E
              PsiElement(identifier)('+')
              PsiElement(identifier)('E')
            PsiElement(,)(',')
            PsiWhiteSpace(' ')
            TypeParameter: B
              PsiElement(identifier)('+')
              PsiElement(identifier)('B')
              PsiWhiteSpace(' ')
              PsiElement(<:)('<:')
              PsiWhiteSpace(' ')
              ParametrizedType: Has[_]
                SimpleType: Has
                  CodeReferenceElement: Has
                    PsiElement(identifier)('Has')
                TypeArgumentsList
                  PsiElement([)('[')
                  WildcardType: _
                    PsiElement(_)('_')
                  PsiElement(])(']')
            PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ParametrizedType: ZLayer[Any, E, B]
            SimpleType: ZLayer
              CodeReferenceElement: ZLayer
                PsiElement(identifier)('ZLayer')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: Any
                CodeReferenceElement: Any
                  PsiElement(identifier)('Any')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              SimpleType: E
                CodeReferenceElement: E
                  PsiElement(identifier)('E')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              SimpleType: B
                CodeReferenceElement: B
                  PsiElement(identifier)('B')
              PsiElement(])(']')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScTypeAliasDefinition: ServiceA
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(type)('type')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('ServiceA')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    ParametrizedType: Has[ServiceA.Service]
      SimpleType: Has
        CodeReferenceElement: Has
          PsiElement(identifier)('Has')
      TypeArgumentsList
        PsiElement([)('[')
        SimpleType: ServiceA.Service
          CodeReferenceElement: ServiceA.Service
            CodeReferenceElement: ServiceA
              PsiElement(identifier)('ServiceA')
            PsiElement(.)('.')
            PsiElement(identifier)('Service')
        PsiElement(])(']')
  PsiWhiteSpace('\n')
  ScObject: ServiceA
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('ServiceA')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScTrait: Service
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(trait)('trait')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Service')
          ExtendsBlock
            <empty list>
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: live
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: live
              PsiElement(identifier)('live')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: ZLayer.NoDeps[Nothing, ServiceA]
            SimpleType: ZLayer.NoDeps
              CodeReferenceElement: ZLayer.NoDeps
                CodeReferenceElement: ZLayer
                  PsiElement(identifier)('ZLayer')
                PsiElement(.)('.')
                PsiElement(identifier)('NoDeps')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: Nothing
                CodeReferenceElement: Nothing
                  PsiElement(identifier)('Nothing')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              SimpleType: ServiceA
                CodeReferenceElement: ServiceA
                  PsiElement(identifier)('ServiceA')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: ???
            PsiElement(identifier)('???')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScTypeAliasDefinition: ServiceB
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(type)('type')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('ServiceB')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    ParametrizedType: Has[ServiceB.Service]
      SimpleType: Has
        CodeReferenceElement: Has
          PsiElement(identifier)('Has')
      TypeArgumentsList
        PsiElement([)('[')
        SimpleType: ServiceB.Service
          CodeReferenceElement: ServiceB.Service
            CodeReferenceElement: ServiceB
              PsiElement(identifier)('ServiceB')
            PsiElement(.)('.')
            PsiElement(identifier)('Service')
        PsiElement(])(']')
  PsiWhiteSpace('\n')
  ScObject: ServiceB
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('ServiceB')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScTrait: Service
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(trait)('trait')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Service')
          ExtendsBlock
            <empty list>
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: live
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: live
              PsiElement(identifier)('live')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: ZLayer.NoDeps[Nothing, ServiceB]
            SimpleType: ZLayer.NoDeps
              CodeReferenceElement: ZLayer.NoDeps
                CodeReferenceElement: ZLayer
                  PsiElement(identifier)('ZLayer')
                PsiElement(.)('.')
                PsiElement(identifier)('NoDeps')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: Nothing
                CodeReferenceElement: Nothing
                  PsiElement(identifier)('Nothing')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              SimpleType: ServiceB
                CodeReferenceElement: ServiceB
                  PsiElement(identifier)('ServiceB')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: ???
            PsiElement(identifier)('???')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScTypeAliasDefinition: ServiceC
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(type)('type')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('ServiceC')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    ParametrizedType: Has[ServiceC.Service]
      SimpleType: Has
        CodeReferenceElement: Has
          PsiElement(identifier)('Has')
      TypeArgumentsList
        PsiElement([)('[')
        SimpleType: ServiceC.Service
          CodeReferenceElement: ServiceC.Service
            CodeReferenceElement: ServiceC
              PsiElement(identifier)('ServiceC')
            PsiElement(.)('.')
            PsiElement(identifier)('Service')
        PsiElement(])(']')
  PsiWhiteSpace('\n')
  ScObject: ServiceC
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('ServiceC')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScTrait: Service
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(trait)('trait')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Service')
          ExtendsBlock
            <empty list>
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: live
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: live
              PsiElement(identifier)('live')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: ZLayer.NoDeps[Nothing, ServiceC]
            SimpleType: ZLayer.NoDeps
              CodeReferenceElement: ZLayer.NoDeps
                CodeReferenceElement: ZLayer
                  PsiElement(identifier)('ZLayer')
                PsiElement(.)('.')
                PsiElement(identifier)('NoDeps')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: Nothing
                CodeReferenceElement: Nothing
                  PsiElement(identifier)('Nothing')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              SimpleType: ServiceC
                CodeReferenceElement: ServiceC
                  PsiElement(identifier)('ServiceC')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: ???
            PsiElement(identifier)('???')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScTypeAliasDefinition: ServiceD
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(type)('type')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('ServiceD')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    ParametrizedType: Has[ServiceD.Service]
      SimpleType: Has
        CodeReferenceElement: Has
          PsiElement(identifier)('Has')
      TypeArgumentsList
        PsiElement([)('[')
        SimpleType: ServiceD.Service
          CodeReferenceElement: ServiceD.Service
            CodeReferenceElement: ServiceD
              PsiElement(identifier)('ServiceD')
            PsiElement(.)('.')
            PsiElement(identifier)('Service')
        PsiElement(])(']')
  PsiWhiteSpace('\n')
  ScObject: ServiceD
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('ServiceD')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScTrait: Service
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(trait)('trait')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Service')
          ExtendsBlock
            <empty list>
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: live
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: live
              PsiElement(identifier)('live')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: ZLayer.NoDeps[ServiceC, ServiceD with ServiceC]
            SimpleType: ZLayer.NoDeps
              CodeReferenceElement: ZLayer.NoDeps
                CodeReferenceElement: ZLayer
                  PsiElement(identifier)('ZLayer')
                PsiElement(.)('.')
                PsiElement(identifier)('NoDeps')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: ServiceC
                CodeReferenceElement: ServiceC
                  PsiElement(identifier)('ServiceC')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              CompoundType: ServiceD with ServiceC
                SimpleType: ServiceD
                  CodeReferenceElement: ServiceD
                    PsiElement(identifier)('ServiceD')
                PsiWhiteSpace(' ')
                PsiElement(with)('with')
                PsiWhiteSpace(' ')
                SimpleType: ServiceC
                  CodeReferenceElement: ServiceC
                    PsiElement(identifier)('ServiceC')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: ???
            PsiElement(identifier)('???')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScPatternDefinition: combined
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(val)('val')
    PsiWhiteSpace(' ')
    ListOfPatterns
      ReferencePattern: combined
        PsiElement(identifier)('combined')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace('\n    ')
    InfixExpression
      ReferenceExpression: ServiceA.live
        ReferenceExpression: ServiceA
          PsiElement(identifier)('ServiceA')
        PsiElement(.)('.')
        PsiElement(identifier)('live')
      PsiWhiteSpace(' ')
      ReferenceExpression: >>>
        PsiElement(identifier)('>>>')
      PsiWhiteSpace('\n      ')
      ExpressionInParenthesis
        PsiElement(()('(')
        InfixExpression
          ReferenceExpression: ServiceB.live
            ReferenceExpression: ServiceB
              PsiElement(identifier)('ServiceB')
            PsiElement(.)('.')
            PsiElement(identifier)('live')
          PsiWhiteSpace(' ')
          ReferenceExpression: ++
            PsiElement(identifier)('++')
          PsiWhiteSpace(' ')
          ExpressionInParenthesis
            PsiElement(()('(')
            InfixExpression
              ReferenceExpression: ServiceC.live
                ReferenceExpression: ServiceC
                  PsiElement(identifier)('ServiceC')
                PsiElement(.)('.')
                PsiElement(identifier)('live')
              PsiWhiteSpace(' ')
              ReferenceExpression: >>>
                PsiElement(identifier)('>>>')
              PsiWhiteSpace(' ')
              ReferenceExpression: ServiceD.live
                ReferenceExpression: ServiceD
                  PsiElement(identifier)('ServiceD')
                PsiElement(.)('.')
                PsiElement(identifier)('live')
            PsiElement())(')')
        PsiElement())(')')
  PsiWhiteSpace('\n\n')
  PsiComment(comment)('// +')
  PsiWhiteSpace('\n\n')
  ScClass: Outer
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Outer')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScClass: Elem
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(class)('class')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Elem')
          PrimaryConstructor
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            Parameters
              <empty list>
          ExtendsBlock
            <empty list>
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScClass: Test2
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(abstract)('abstract')
    PsiWhiteSpace(' ')
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test2')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: o1
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: o1
              PsiElement(identifier)('o1')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Outer
            CodeReferenceElement: Outer
              PsiElement(identifier)('Outer')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: ???
            PsiElement(identifier)('???')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: o2
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: o2
              PsiElement(identifier)('o2')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Outer
            CodeReferenceElement: Outer
              PsiElement(identifier)('Outer')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: ???
            PsiElement(identifier)('???')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: o3
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: o3
              PsiElement(identifier)('o3')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Outer
            CodeReferenceElement: Outer
              PsiElement(identifier)('Outer')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: ???
            PsiElement(identifier)('???')
        PsiWhiteSpace('\n\n  ')
        ScValueDeclaration: x
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfIdentifiers
            Field identifier: x
              PsiElement(identifier)('x')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          InfixType: o1.Elem | (o2.Elem & o3.Elem)
            SimpleType: o1.Elem
              CodeReferenceElement: o1.Elem
                CodeReferenceElement: o1
                  PsiElement(identifier)('o1')
                PsiElement(.)('.')
                PsiElement(identifier)('Elem')
            PsiWhiteSpace(' ')
            CodeReferenceElement: |
              PsiElement(identifier)('|')
            PsiWhiteSpace(' ')
            TypeInParenthesis: (o2.Elem & o3.Elem)
              PsiElement(()('(')
              InfixType: o2.Elem & o3.Elem
                SimpleType: o2.Elem
                  CodeReferenceElement: o2.Elem
                    CodeReferenceElement: o2
                      PsiElement(identifier)('o2')
                    PsiElement(.)('.')
                    PsiElement(identifier)('Elem')
                PsiWhiteSpace(' ')
                CodeReferenceElement: &
                  PsiElement(identifier)('&')
                PsiWhiteSpace(' ')
                SimpleType: o3.Elem
                  CodeReferenceElement: o3.Elem
                    CodeReferenceElement: o3
                      PsiElement(identifier)('o3')
                    PsiElement(.)('.')
                    PsiElement(identifier)('Elem')
              PsiElement())(')')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: foo
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('foo')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: T
              PsiElement(identifier)('T')
              PsiWhiteSpace(' ')
              PsiElement(<:)('<:')
              PsiWhiteSpace(' ')
              TypeProjection: Outer#Elem
                SimpleType: Outer
                  CodeReferenceElement: Outer
                    PsiElement(identifier)('Outer')
                PsiElement(#)('#')
                PsiElement(identifier)('Elem')
            PsiElement(])(']')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: has
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('has')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: T
                    CodeReferenceElement: T
                      PsiElement(identifier)('T')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: T
            CodeReferenceElement: T
              PsiElement(identifier)('T')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: ???
            PsiElement(identifier)('???')
        PsiWhiteSpace('\n  ')
        MethodCall
          ReferenceExpression: foo
            PsiElement(identifier)('foo')
          ArgumentList
            PsiElement(()('(')
            ReferenceExpression: x
              PsiElement(identifier)('x')
            PsiElement())(')')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
