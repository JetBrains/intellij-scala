sealed trait TermConstraint {
  final def neg: TermConstraint = this match {
    case Neg(c) => c
    case c: PositiveTermConstraint => Neg(c)
  }
}
case class Neg(c: PositiveTermConstraint) extends TermConstraint
sealed trait PositiveTermConstraint extends TermConstraint

case object Dummy extends PositiveTermConstraint
-----
ScalaFile
  ScTrait: TermConstraint
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(sealed)('sealed')
    PsiWhiteSpace(' ')
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('TermConstraint')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: neg
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(final)('final')
          PsiWhiteSpace(' ')
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('neg')
          Parameters
            <empty list>
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: TermConstraint
            CodeReferenceElement: TermConstraint
              PsiElement(identifier)('TermConstraint')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MatchStatement
            ThisReference
              PsiElement(this)('this')
            PsiWhiteSpace(' ')
            PsiElement(match)('match')
            PsiWhiteSpace(' ')
            PsiElement({)('{')
            PsiWhiteSpace('\n    ')
            CaseClauses
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                ConstructorPattern
                  CodeReferenceElement: Neg
                    PsiElement(identifier)('Neg')
                  Pattern Argument List
                    PsiElement(()('(')
                    ReferencePattern: c
                      PsiElement(identifier)('c')
                    PsiElement())(')')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                BlockOfExpressions
                  ReferenceExpression: c
                    PsiElement(identifier)('c')
              PsiWhiteSpace('\n    ')
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                Scala3 TypedPattern
                  ReferencePattern: c
                    PsiElement(identifier)('c')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  TypePattern
                    SimpleType: PositiveTermConstraint
                      CodeReferenceElement: PositiveTermConstraint
                        PsiElement(identifier)('PositiveTermConstraint')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                BlockOfExpressions
                  MethodCall
                    ReferenceExpression: Neg
                      PsiElement(identifier)('Neg')
                    ArgumentList
                      PsiElement(()('(')
                      ReferenceExpression: c
                        PsiElement(identifier)('c')
                      PsiElement())(')')
            PsiWhiteSpace('\n  ')
            PsiElement(})('}')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n')
  ScClass: Neg
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(case)('case')
    PsiWhiteSpace(' ')
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Neg')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        ParametersClause
          PsiElement(()('(')
          ClassParameter: c
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(identifier)('c')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            ParameterType
              SimpleType: PositiveTermConstraint
                CodeReferenceElement: PositiveTermConstraint
                  PsiElement(identifier)('PositiveTermConstraint')
          PsiElement())(')')
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          SimpleType: TermConstraint
            CodeReferenceElement: TermConstraint
              PsiElement(identifier)('TermConstraint')
  PsiWhiteSpace('\n')
  ScTrait: PositiveTermConstraint
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(sealed)('sealed')
    PsiWhiteSpace(' ')
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('PositiveTermConstraint')
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          SimpleType: TermConstraint
            CodeReferenceElement: TermConstraint
              PsiElement(identifier)('TermConstraint')
  PsiWhiteSpace('\n\n')
  ScObject: Dummy
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(case)('case')
    PsiWhiteSpace(' ')
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Dummy')
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          SimpleType: PositiveTermConstraint
            CodeReferenceElement: PositiveTermConstraint
              PsiElement(identifier)('PositiveTermConstraint')
