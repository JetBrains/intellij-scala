import java.beans.Transient
import annotation.unchecked.uncheckedVariance

class Test {

// testing combinations of annotation syntax

  @SuppressWarnings(Array("hi")) def foo() = ??? // evalutation of annotation on type cannot be deferred as requires implicit resolution(only generic Array$.apply applies here)

  @SuppressWarnings(Array("hi", "foo")) def foo2() = ??? //can be deferred as there is a non-generic method

  @SuppressWarnings(Array("hi")) def foo3() = ??? // can be written in java and is serialized this way in bytecode. doesn't typecheck

  @Transient(false) def bar = ???

  @Transient() def baz = ???

// testing annotations in types

  class A
  trait B

  val x: A @uncheckedVariance with B @uncheckedVariance = ???

  class C extends A @uncheckedVariance () with B @uncheckedVariance { val x = 10 }

  val f: (Int => Int) @uncheckedVariance = ???
}

-----
ScalaFile
  ScImportStatement
    PsiElement(import)('import')
    PsiWhiteSpace(' ')
    ImportExpression
      CodeReferenceElement: java.beans.Transient
        CodeReferenceElement: java.beans
          CodeReferenceElement: java
            PsiElement(identifier)('java')
          PsiElement(.)('.')
          PsiElement(identifier)('beans')
        PsiElement(.)('.')
        PsiElement(identifier)('Transient')
  PsiWhiteSpace('\n')
  ScImportStatement
    PsiElement(import)('import')
    PsiWhiteSpace(' ')
    ImportExpression
      CodeReferenceElement: annotation.unchecked.uncheckedVariance
        CodeReferenceElement: annotation.unchecked
          CodeReferenceElement: annotation
            PsiElement(identifier)('annotation')
          PsiElement(.)('.')
          PsiElement(identifier)('unchecked')
        PsiElement(.)('.')
        PsiElement(identifier)('uncheckedVariance')
  PsiWhiteSpace('\n\n')
  ScClass: Test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n\n')
        PsiComment(comment)('// testing combinations of annotation syntax')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: foo
          AnnotationsList
            Annotation
              PsiElement(@)('@')
              AnnotationExpression
                ConstructorInvocation
                  SimpleType: SuppressWarnings
                    CodeReferenceElement: SuppressWarnings
                      PsiElement(identifier)('SuppressWarnings')
                  ArgumentList
                    PsiElement(()('(')
                    MethodCall
                      ReferenceExpression: Array
                        PsiElement(identifier)('Array')
                      ArgumentList
                        PsiElement(()('(')
                        StringLiteral
                          PsiElement(string content)('"hi"')
                        PsiElement())(')')
                    PsiElement())(')')
          Modifiers
            <empty list>
          PsiWhiteSpace(' ')
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('foo')
          Parameters
            ParametersClause
              PsiElement(()('(')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: ???
            PsiElement(identifier)('???')
        PsiWhiteSpace(' ')
        PsiComment(comment)('// evalutation of annotation on type cannot be deferred as requires implicit resolution(only generic Array$.apply applies here)')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: foo2
          AnnotationsList
            Annotation
              PsiElement(@)('@')
              AnnotationExpression
                ConstructorInvocation
                  SimpleType: SuppressWarnings
                    CodeReferenceElement: SuppressWarnings
                      PsiElement(identifier)('SuppressWarnings')
                  ArgumentList
                    PsiElement(()('(')
                    MethodCall
                      ReferenceExpression: Array
                        PsiElement(identifier)('Array')
                      ArgumentList
                        PsiElement(()('(')
                        StringLiteral
                          PsiElement(string content)('"hi"')
                        PsiElement(,)(',')
                        PsiWhiteSpace(' ')
                        StringLiteral
                          PsiElement(string content)('"foo"')
                        PsiElement())(')')
                    PsiElement())(')')
          Modifiers
            <empty list>
          PsiWhiteSpace(' ')
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('foo2')
          Parameters
            ParametersClause
              PsiElement(()('(')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: ???
            PsiElement(identifier)('???')
        PsiWhiteSpace(' ')
        PsiComment(comment)('//can be deferred as there is a non-generic method')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: foo3
          AnnotationsList
            Annotation
              PsiElement(@)('@')
              AnnotationExpression
                ConstructorInvocation
                  SimpleType: SuppressWarnings
                    CodeReferenceElement: SuppressWarnings
                      PsiElement(identifier)('SuppressWarnings')
                  ArgumentList
                    PsiElement(()('(')
                    MethodCall
                      ReferenceExpression: Array
                        PsiElement(identifier)('Array')
                      ArgumentList
                        PsiElement(()('(')
                        StringLiteral
                          PsiElement(string content)('"hi"')
                        PsiElement())(')')
                    PsiElement())(')')
          Modifiers
            <empty list>
          PsiWhiteSpace(' ')
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('foo3')
          Parameters
            ParametersClause
              PsiElement(()('(')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: ???
            PsiElement(identifier)('???')
        PsiWhiteSpace(' ')
        PsiComment(comment)('// can be written in java and is serialized this way in bytecode. doesn't typecheck')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: bar
          AnnotationsList
            Annotation
              PsiElement(@)('@')
              AnnotationExpression
                ConstructorInvocation
                  SimpleType: Transient
                    CodeReferenceElement: Transient
                      PsiElement(identifier)('Transient')
                  ArgumentList
                    PsiElement(()('(')
                    BooleanLiteral
                      PsiElement(false)('false')
                    PsiElement())(')')
          Modifiers
            <empty list>
          PsiWhiteSpace(' ')
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('bar')
          Parameters
            <empty list>
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: ???
            PsiElement(identifier)('???')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: baz
          AnnotationsList
            Annotation
              PsiElement(@)('@')
              AnnotationExpression
                ConstructorInvocation
                  SimpleType: Transient
                    CodeReferenceElement: Transient
                      PsiElement(identifier)('Transient')
                  ArgumentList
                    PsiElement(()('(')
                    PsiElement())(')')
          Modifiers
            <empty list>
          PsiWhiteSpace(' ')
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('baz')
          Parameters
            <empty list>
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: ???
            PsiElement(identifier)('???')
        PsiWhiteSpace('\n\n')
        PsiComment(comment)('// testing annotations in types')
        PsiWhiteSpace('\n\n  ')
        ScClass: A
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(class)('class')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('A')
          PrimaryConstructor
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            Parameters
              <empty list>
          ExtendsBlock
            <empty list>
        PsiWhiteSpace('\n  ')
        ScTrait: B
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(trait)('trait')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('B')
          ExtendsBlock
            <empty list>
        PsiWhiteSpace('\n\n  ')
        ScPatternDefinition: x
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: x
              PsiElement(identifier)('x')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          CompoundType: A @uncheckedVariance with B @uncheckedVariance
            TypeWithAnnotation: A @uncheckedVariance
              SimpleType: A
                CodeReferenceElement: A
                  PsiElement(identifier)('A')
              PsiWhiteSpace(' ')
              AnnotationsList
                Annotation
                  PsiElement(@)('@')
                  AnnotationExpression
                    ConstructorInvocation
                      SimpleType: uncheckedVariance
                        CodeReferenceElement: uncheckedVariance
                          PsiElement(identifier)('uncheckedVariance')
            PsiWhiteSpace(' ')
            PsiElement(with)('with')
            PsiWhiteSpace(' ')
            TypeWithAnnotation: B @uncheckedVariance
              SimpleType: B
                CodeReferenceElement: B
                  PsiElement(identifier)('B')
              PsiWhiteSpace(' ')
              AnnotationsList
                Annotation
                  PsiElement(@)('@')
                  AnnotationExpression
                    ConstructorInvocation
                      SimpleType: uncheckedVariance
                        CodeReferenceElement: uncheckedVariance
                          PsiElement(identifier)('uncheckedVariance')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: ???
            PsiElement(identifier)('???')
        PsiWhiteSpace('\n\n  ')
        ScClass: C
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(class)('class')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('C')
          PrimaryConstructor
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            Parameters
              <empty list>
          PsiWhiteSpace(' ')
          ExtendsBlock
            PsiElement(extends)('extends')
            PsiWhiteSpace(' ')
            TemplateParents
              ConstructorInvocation
                TypeWithAnnotation: A @uncheckedVariance ()
                  SimpleType: A
                    CodeReferenceElement: A
                      PsiElement(identifier)('A')
                  PsiWhiteSpace(' ')
                  AnnotationsList
                    Annotation
                      PsiElement(@)('@')
                      AnnotationExpression
                        ConstructorInvocation
                          SimpleType: uncheckedVariance
                            CodeReferenceElement: uncheckedVariance
                              PsiElement(identifier)('uncheckedVariance')
                          PsiWhiteSpace(' ')
                          ArgumentList
                            PsiElement(()('(')
                            PsiElement())(')')
              PsiWhiteSpace(' ')
              PsiElement(with)('with')
              PsiWhiteSpace(' ')
              ConstructorInvocation
                TypeWithAnnotation: B @uncheckedVariance
                  SimpleType: B
                    CodeReferenceElement: B
                      PsiElement(identifier)('B')
                  PsiWhiteSpace(' ')
                  AnnotationsList
                    Annotation
                      PsiElement(@)('@')
                      AnnotationExpression
                        ConstructorInvocation
                          SimpleType: uncheckedVariance
                            CodeReferenceElement: uncheckedVariance
                              PsiElement(identifier)('uncheckedVariance')
            PsiWhiteSpace(' ')
            ScTemplateBody
              PsiElement({)('{')
              PsiWhiteSpace(' ')
              ScPatternDefinition: x
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(val)('val')
                PsiWhiteSpace(' ')
                ListOfPatterns
                  ReferencePattern: x
                    PsiElement(identifier)('x')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                IntegerLiteral
                  PsiElement(integer)('10')
              PsiWhiteSpace(' ')
              PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        ScPatternDefinition: f
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: f
              PsiElement(identifier)('f')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          TypeWithAnnotation: (Int => Int) @uncheckedVariance
            TypeInParenthesis: (Int => Int)
              PsiElement(()('(')
              FunctionalType: Int => Int
                SimpleType: Int
                  CodeReferenceElement: Int
                    PsiElement(identifier)('Int')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                SimpleType: Int
                  CodeReferenceElement: Int
                    PsiElement(identifier)('Int')
              PsiElement())(')')
            PsiWhiteSpace(' ')
            AnnotationsList
              Annotation
                PsiElement(@)('@')
                AnnotationExpression
                  ConstructorInvocation
                    SimpleType: uncheckedVariance
                      CodeReferenceElement: uncheckedVariance
                        PsiElement(identifier)('uncheckedVariance')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: ???
            PsiElement(identifier)('???')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
