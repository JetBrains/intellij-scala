object Test {

  case class Bar[A](a: A)
  trait Toto[A, B]

  ////////////////////////////////////////////////
  // PoC of controlled KindPolymorphism in Scala
  //
  // The idea is NOT to provide universal kind-polymorphism that would be a bad idea anyway
  // but to bring a "controlled" kind-polymorphism relying on accepted kinds defined by type class implicits
  // Thus, kind-polymorphism is strictly scoped to your domain and is what you expect to be, nothing else.
  //
  // `Ykind-polymorphism` flag aims at deferring just a bit Scalac type inference when encountering AnyKind higher bounds
  // without losing any strictness in the final typing.
  // `<: AnyKind` type-bound is purely technicaland totally eliminated after erasure. There is not type associated to it.
  //
  // Here are code-samples that work now:
  //    - basic kind polymorphism controlled by implicits
  //    - Kindness proofs based on type classes (specially SameKind)
  //    - Kind-Polymorphic list (on type & value) (2 different implementations)
  //    - Some weird cases we don't want the compiler to authorize

  ////////////////////////////////////////////////
  // Basic Kind polymorphism sample
  trait Foo[T <: AnyKind] { type Out ; def id(t: Out): Out = t }

  object Foo {
    implicit def foo0[T]: Foo[T] { type Out = T } = new Foo[T] { type Out = T }
    implicit def foo1[T[_]]: Foo[T] { type Out = T[Any] } = new Foo[T] { type Out = T[Any] }
    implicit def foo2[T[_, _]]: Foo[T] { type Out = T[Any, Any] } = new Foo[T] { type Out = T[Any, Any] }
  }

  def foo[T <: AnyKind](implicit f: Foo[T]): f.type = f
  foo[Int].id(23)
  foo[List].id(List[Any](1, 2, 3))
  foo[Map].id(Map[Any, Any](1 -> "toto", 2 -> "tata", 3 -> "tutu"))

  ////////////////////////////////////////////////
  // Is a type M Kinded as you want ?
  trait Kinded[M <: AnyKind] { type Out <: AnyKind }
  object Kinded {
    type Aux[M <: AnyKind, Out0 <: AnyKind] = Kinded[M] { type Out = Out0 }

    implicit def kinded0[M]: Aux[M, M] = new Kinded[M] { type Out = M }
    implicit def kinded1[M[_]]: Aux[M, M] = new Kinded[M] { type Out[t] = M[t] }
    implicit def kinded2[M[_, _]]: Aux[M, M] = new Kinded[M] { type Out[t, u] = M[t, u] }
  }

  implicitly[Kinded.Aux[Int, Int]]
  implicitly[Kinded.Aux[List, List]]
  implicitly[Kinded.Aux[Map, Map]]

  ////////////////////////////////////////////////
  // Extract Kind from a type
  trait Kinder[MA] { type M <: AnyKind; type Args <: HList }
  object Kinder extends KinderLowerImplicits {
    type Aux[MA, M0 <: AnyKind, Args0 <: HList] = Kinder[MA] { type M = M0; type Args = Args0 }

    implicit def kinder1[M0[_], A0]: Kinder.Aux[M0[A0], M0, A0 :: HNil] = new Kinder[M0[A0]] { type M[t] = M0[t]; type Args = A0 :: HNil }
  }

  trait KinderLowerImplicits {
    implicit def kinder2[M0[_, _], A0, B0]: Kinder.Aux[M0[A0, B0], M0, A0 :: B0 :: HNil] = new Kinder[M0[A0, B0]] { type M[t, u] = M0[t, u]; type Args = A0 :: B0 :: HNil }
    implicit def kinder0[A]: Kinder.Aux[A, A, HNil] = new Kinder[A] { type M = A; type Args = HNil }
  }

  ////////////////////////////////////////////////
  //IsoKindness Test
  trait SameKind[M <: AnyKind, M2 <: AnyKind]
  object SameKind {

    implicit def sameKind0[A, B]: SameKind[A, B] = new {}
    implicit def sameKind01[M1[_], M2[_]]: SameKind[M1, M2] = new {}
    implicit def sameKind02[M1[_, _], M2[_, _]]: SameKind[M1, M2] = new {}
  }

  def sameKind[M1 <: AnyKind, M2 <: AnyKind](implicit sameKind: SameKind[M1, M2]) = sameKind

  sameKind[Int, String]     // OK
  sameKind[List, Bar]       // OK
  sameKind[Map, Toto]       // OK

  // sameKind[List, String] // KO
  // sameKind[Map, List]    // KO
  // sameKind[Map, Boolean] // KO



  ////////////////////////////////////////////////
  // Kind-Polymorphic List style

  // Classic Heterogenous List used in KindPolymorphic List
  sealed trait HList
  final case class ::[+H, +T <: HList](head : H, tail : T) extends HList
  sealed trait HNil extends HList
  case object HNil extends HNil

  object New {
    // The Kind Polymorphic List
    sealed trait KPList

    sealed trait KPNil extends KPList
    case object KPNil extends KPNil {
      def :::[H, M <: AnyKind, HL <: HList](h:H)(implicit kinder: Kinder.Aux[H, M, HL]) =
        New.:::(h, KPNil)
    }

    sealed case class :::[H, T <: KPList, M <: AnyKind, HL0 <: HList](
      head: H
    , tail: T
    )(implicit val kinder: Kinder.Aux[H, M, HL0]) extends KPList

    final case class KPListOps[L <: KPList](l : L) {
      def :::[H, M <: AnyKind, HL <: HList](h:H)(implicit kinder: Kinder.Aux[H, M, HL]) =
        New.:::(h, l)
    }

    implicit def kplistOps[L <: KPList](l: L): KPListOps[L] = new KPListOps(l)

    val kl = Bar(5) ::: "toto" ::: List(1, 2, 3) ::: Map("toto" -> 1L, "tata" -> 2L) ::: KPNil

    val h: Bar[Int] = kl.head
    val h2: String = kl.tail.head
    val h3: List[Int] = kl.tail.tail.head
    val h4: Map[String, Long] = kl.tail.tail.tail.head

  }


  ////////////////////////////////////////////////
  // SPECIAL CASES
  // def foo0[F <: AnyKind]: F = null.asInstanceOf[F]  // error: F cannot be used as a value type
  // val i = foo0[Int]
  // val li = foo0[List[Int]]
  // foo0[List]                // KO -> neg
  // val l = foo0[List]        // KO -> neg

  // def foo1[F <: AnyKind, A <: AnyKind]: F[A] = ??? // KO

  // def foo2: AnyKind = ??? // KO


  // Older implementation Kind-Polymorphic List but I prefer the one above
  object Old {

    // The Kind Polymorphic List
    sealed trait KPList

    sealed trait KPNil extends KPList
    case object KPNil extends KPNil

    sealed trait :::[H <: AnyKind, T <: KPList] extends KPList
    trait KPCons[M <: AnyKind, T <: KPList] extends :::[M, T]  {
      type HL <: HList
      type H
      def head: H
      def tail: T
    }

    object KPCons {
      type Aux[M <: AnyKind, T <: KPList, H0, HL0 <: HList] = KPCons[M, T] { type H = H0; type HL = HL0 }
      // Polymorphic
      trait Apply[M <: AnyKind, A <: HList] { type Out }
      object Apply {
        type Aux[M <: AnyKind, A <: HList, Out0] = Apply[M, A] { type Out = Out0 }
        implicit def apply0[M]: Aux[M, HNil, M] = new Apply[M, HNil] { type Out = M }
        implicit def apply1[M[_], A]: Aux[M, A :: HNil, M[A]] = new Apply[M, A :: HNil] { type Out = M[A] }
        implicit def apply2[M[_, _], A, B]: Aux[M, A :: B :: HNil, M[A, B]] = new Apply[M, A :: B :: HNil] { type Out = M[A, B] }
      }

      trait Unapply[M <: AnyKind, O] { type Out <: HList }
      object Unapply {
        type Aux[M <: AnyKind, O, Out0 <: HList] = Unapply[M, O] { type Out = Out0 }

        implicit def unapply0[M]: Aux[M, M, HNil] = new Unapply[M, M] { type Out = HNil }
        implicit def unapply1[M[_], A0]: Unapply.Aux[M, M[A0], A0 :: HNil] = new Unapply[M, M[A0]] { type Out = A0 :: HNil }
        implicit def unapply2[M[_, _], A0, B0]: Aux[M, M[A0, B0], A0 :: B0 :: HNil] = new Unapply[M, M[A0, B0]] { type Out = A0 :: B0 :: HNil }
      }

      // the list builder
      trait KPConsBuilder[M <: AnyKind] {
        def apply[H0, HL0 <: HList, T <: KPList](head0: H0, tail0: T)(implicit unap: Unapply.Aux[M, H0, HL0]): KPCons.Aux[M, T, H0, HL0] = new KPCons[M, T] {
          type HL = HL0
          type H = H0
          val head: H = head0
          val tail: T = tail0
        }
      }

      def apply[M <: AnyKind] = new KPConsBuilder[M] {}
    }


    // Let's create some kind-polymorphic list
    val kl =
      KPCons[Bar](
        Bar(5)
      , KPCons[String](
          "toto"
        , KPCons[List](
            List(1, 2, 3)
          , KPCons[Map](
              Map("toto" -> 1L, "tata" -> 2L)
            , KPNil
            )
          )
        )
      )

    val h: Bar[Int] = kl.head
    val h2: String = kl.tail.head
    val h3: List[Int] = kl.tail.tail.head
    val h4: Map[String, Long] = kl.tail.tail.tail.head

  }

}
-----
ScalaFile
  ScObject: Test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n\n  ')
        ScClass: Bar
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(case)('case')
          PsiWhiteSpace(' ')
          PsiElement(class)('class')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Bar')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: A
              PsiElement(identifier)('A')
            PsiElement(])(']')
          PrimaryConstructor
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            Parameters
              ParametersClause
                PsiElement(()('(')
                ClassParameter: a
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(identifier)('a')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    SimpleType: A
                      CodeReferenceElement: A
                        PsiElement(identifier)('A')
                PsiElement())(')')
          ExtendsBlock
            <empty list>
        PsiWhiteSpace('\n  ')
        ScTrait: Toto
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(trait)('trait')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Toto')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: A
              PsiElement(identifier)('A')
            PsiElement(,)(',')
            PsiWhiteSpace(' ')
            TypeParameter: B
              PsiElement(identifier)('B')
            PsiElement(])(']')
          ExtendsBlock
            <empty list>
        PsiWhiteSpace('\n\n  ')
        PsiComment(comment)('////////////////////////////////////////////////')
        PsiWhiteSpace('\n  ')
        PsiComment(comment)('// PoC of controlled KindPolymorphism in Scala')
        PsiWhiteSpace('\n  ')
        PsiComment(comment)('//')
        PsiWhiteSpace('\n  ')
        PsiComment(comment)('// The idea is NOT to provide universal kind-polymorphism that would be a bad idea anyway')
        PsiWhiteSpace('\n  ')
        PsiComment(comment)('// but to bring a "controlled" kind-polymorphism relying on accepted kinds defined by type class implicits')
        PsiWhiteSpace('\n  ')
        PsiComment(comment)('// Thus, kind-polymorphism is strictly scoped to your domain and is what you expect to be, nothing else.')
        PsiWhiteSpace('\n  ')
        PsiComment(comment)('//')
        PsiWhiteSpace('\n  ')
        PsiComment(comment)('// `Ykind-polymorphism` flag aims at deferring just a bit Scalac type inference when encountering AnyKind higher bounds')
        PsiWhiteSpace('\n  ')
        PsiComment(comment)('// without losing any strictness in the final typing.')
        PsiWhiteSpace('\n  ')
        PsiComment(comment)('// `<: AnyKind` type-bound is purely technicaland totally eliminated after erasure. There is not type associated to it.')
        PsiWhiteSpace('\n  ')
        PsiComment(comment)('//')
        PsiWhiteSpace('\n  ')
        PsiComment(comment)('// Here are code-samples that work now:')
        PsiWhiteSpace('\n  ')
        PsiComment(comment)('//    - basic kind polymorphism controlled by implicits')
        PsiWhiteSpace('\n  ')
        PsiComment(comment)('//    - Kindness proofs based on type classes (specially SameKind)')
        PsiWhiteSpace('\n  ')
        PsiComment(comment)('//    - Kind-Polymorphic list (on type & value) (2 different implementations)')
        PsiWhiteSpace('\n  ')
        PsiComment(comment)('//    - Some weird cases we don't want the compiler to authorize')
        PsiWhiteSpace('\n\n  ')
        ScTrait: Foo
          PsiComment(comment)('////////////////////////////////////////////////')
          PsiWhiteSpace('\n  ')
          PsiComment(comment)('// Basic Kind polymorphism sample')
          PsiWhiteSpace('\n  ')
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(trait)('trait')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Foo')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: T
              PsiElement(identifier)('T')
              PsiWhiteSpace(' ')
              PsiElement(<:)('<:')
              PsiWhiteSpace(' ')
              SimpleType: AnyKind
                CodeReferenceElement: AnyKind
                  PsiElement(identifier)('AnyKind')
            PsiElement(])(']')
          PsiWhiteSpace(' ')
          ExtendsBlock
            ScTemplateBody
              PsiElement({)('{')
              PsiWhiteSpace(' ')
              ScTypeAliasDeclaration: Out
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(type)('type')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('Out')
              PsiWhiteSpace(' ')
              PsiElement(;)(';')
              PsiWhiteSpace(' ')
              ScFunctionDefinition: id
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(def)('def')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('id')
                Parameters
                  ParametersClause
                    PsiElement(()('(')
                    Parameter: t
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(identifier)('t')
                      PsiElement(:)(':')
                      PsiWhiteSpace(' ')
                      ParameterType
                        SimpleType: Out
                          CodeReferenceElement: Out
                            PsiElement(identifier)('Out')
                    PsiElement())(')')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                SimpleType: Out
                  CodeReferenceElement: Out
                    PsiElement(identifier)('Out')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                ReferenceExpression: t
                  PsiElement(identifier)('t')
              PsiWhiteSpace(' ')
              PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        ScObject: Foo
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(object)('object')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Foo')
          PsiWhiteSpace(' ')
          ExtendsBlock
            ScTemplateBody
              PsiElement({)('{')
              PsiWhiteSpace('\n    ')
              ScFunctionDefinition: foo0
                AnnotationsList
                  <empty list>
                Modifiers
                  PsiElement(implicit)('implicit')
                PsiWhiteSpace(' ')
                PsiElement(def)('def')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('foo0')
                TypeParameterClause
                  PsiElement([)('[')
                  TypeParameter: T
                    PsiElement(identifier)('T')
                  PsiElement(])(']')
                Parameters
                  <empty list>
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                CompoundType: Foo[T] { type Out = T }
                  ParametrizedType: Foo[T]
                    SimpleType: Foo
                      CodeReferenceElement: Foo
                        PsiElement(identifier)('Foo')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: T
                        CodeReferenceElement: T
                          PsiElement(identifier)('T')
                      PsiElement(])(']')
                  PsiWhiteSpace(' ')
                  Refinement
                    PsiElement({)('{')
                    PsiWhiteSpace(' ')
                    ScTypeAliasDefinition: Out
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(type)('type')
                      PsiWhiteSpace(' ')
                      PsiElement(identifier)('Out')
                      PsiWhiteSpace(' ')
                      PsiElement(=)('=')
                      PsiWhiteSpace(' ')
                      SimpleType: T
                        CodeReferenceElement: T
                          PsiElement(identifier)('T')
                    PsiWhiteSpace(' ')
                    PsiElement(})('}')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                ScNewTemplateDefinition: <anonymous>
                  PsiElement(new)('new')
                  PsiWhiteSpace(' ')
                  ExtendsBlock
                    TemplateParents
                      ConstructorInvocation
                        ParametrizedType: Foo[T]
                          SimpleType: Foo
                            CodeReferenceElement: Foo
                              PsiElement(identifier)('Foo')
                          TypeArgumentsList
                            PsiElement([)('[')
                            SimpleType: T
                              CodeReferenceElement: T
                                PsiElement(identifier)('T')
                            PsiElement(])(']')
                    PsiWhiteSpace(' ')
                    ScTemplateBody
                      PsiElement({)('{')
                      PsiWhiteSpace(' ')
                      ScTypeAliasDefinition: Out
                        AnnotationsList
                          <empty list>
                        Modifiers
                          <empty list>
                        PsiElement(type)('type')
                        PsiWhiteSpace(' ')
                        PsiElement(identifier)('Out')
                        PsiWhiteSpace(' ')
                        PsiElement(=)('=')
                        PsiWhiteSpace(' ')
                        SimpleType: T
                          CodeReferenceElement: T
                            PsiElement(identifier)('T')
                      PsiWhiteSpace(' ')
                      PsiElement(})('}')
              PsiWhiteSpace('\n    ')
              ScFunctionDefinition: foo1
                AnnotationsList
                  <empty list>
                Modifiers
                  PsiElement(implicit)('implicit')
                PsiWhiteSpace(' ')
                PsiElement(def)('def')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('foo1')
                TypeParameterClause
                  PsiElement([)('[')
                  TypeParameter: T
                    PsiElement(identifier)('T')
                    TypeParameterClause
                      PsiElement([)('[')
                      TypeParameter: _
                        PsiElement(_)('_')
                      PsiElement(])(']')
                  PsiElement(])(']')
                Parameters
                  <empty list>
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                CompoundType: Foo[T] { type Out = T[Any] }
                  ParametrizedType: Foo[T]
                    SimpleType: Foo
                      CodeReferenceElement: Foo
                        PsiElement(identifier)('Foo')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: T
                        CodeReferenceElement: T
                          PsiElement(identifier)('T')
                      PsiElement(])(']')
                  PsiWhiteSpace(' ')
                  Refinement
                    PsiElement({)('{')
                    PsiWhiteSpace(' ')
                    ScTypeAliasDefinition: Out
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(type)('type')
                      PsiWhiteSpace(' ')
                      PsiElement(identifier)('Out')
                      PsiWhiteSpace(' ')
                      PsiElement(=)('=')
                      PsiWhiteSpace(' ')
                      ParametrizedType: T[Any]
                        SimpleType: T
                          CodeReferenceElement: T
                            PsiElement(identifier)('T')
                        TypeArgumentsList
                          PsiElement([)('[')
                          SimpleType: Any
                            CodeReferenceElement: Any
                              PsiElement(identifier)('Any')
                          PsiElement(])(']')
                    PsiWhiteSpace(' ')
                    PsiElement(})('}')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                ScNewTemplateDefinition: <anonymous>
                  PsiElement(new)('new')
                  PsiWhiteSpace(' ')
                  ExtendsBlock
                    TemplateParents
                      ConstructorInvocation
                        ParametrizedType: Foo[T]
                          SimpleType: Foo
                            CodeReferenceElement: Foo
                              PsiElement(identifier)('Foo')
                          TypeArgumentsList
                            PsiElement([)('[')
                            SimpleType: T
                              CodeReferenceElement: T
                                PsiElement(identifier)('T')
                            PsiElement(])(']')
                    PsiWhiteSpace(' ')
                    ScTemplateBody
                      PsiElement({)('{')
                      PsiWhiteSpace(' ')
                      ScTypeAliasDefinition: Out
                        AnnotationsList
                          <empty list>
                        Modifiers
                          <empty list>
                        PsiElement(type)('type')
                        PsiWhiteSpace(' ')
                        PsiElement(identifier)('Out')
                        PsiWhiteSpace(' ')
                        PsiElement(=)('=')
                        PsiWhiteSpace(' ')
                        ParametrizedType: T[Any]
                          SimpleType: T
                            CodeReferenceElement: T
                              PsiElement(identifier)('T')
                          TypeArgumentsList
                            PsiElement([)('[')
                            SimpleType: Any
                              CodeReferenceElement: Any
                                PsiElement(identifier)('Any')
                            PsiElement(])(']')
                      PsiWhiteSpace(' ')
                      PsiElement(})('}')
              PsiWhiteSpace('\n    ')
              ScFunctionDefinition: foo2
                AnnotationsList
                  <empty list>
                Modifiers
                  PsiElement(implicit)('implicit')
                PsiWhiteSpace(' ')
                PsiElement(def)('def')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('foo2')
                TypeParameterClause
                  PsiElement([)('[')
                  TypeParameter: T
                    PsiElement(identifier)('T')
                    TypeParameterClause
                      PsiElement([)('[')
                      TypeParameter: _
                        PsiElement(_)('_')
                      PsiElement(,)(',')
                      PsiWhiteSpace(' ')
                      TypeParameter: _
                        PsiElement(_)('_')
                      PsiElement(])(']')
                  PsiElement(])(']')
                Parameters
                  <empty list>
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                CompoundType: Foo[T] { type Out = T[Any, Any] }
                  ParametrizedType: Foo[T]
                    SimpleType: Foo
                      CodeReferenceElement: Foo
                        PsiElement(identifier)('Foo')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: T
                        CodeReferenceElement: T
                          PsiElement(identifier)('T')
                      PsiElement(])(']')
                  PsiWhiteSpace(' ')
                  Refinement
                    PsiElement({)('{')
                    PsiWhiteSpace(' ')
                    ScTypeAliasDefinition: Out
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(type)('type')
                      PsiWhiteSpace(' ')
                      PsiElement(identifier)('Out')
                      PsiWhiteSpace(' ')
                      PsiElement(=)('=')
                      PsiWhiteSpace(' ')
                      ParametrizedType: T[Any, Any]
                        SimpleType: T
                          CodeReferenceElement: T
                            PsiElement(identifier)('T')
                        TypeArgumentsList
                          PsiElement([)('[')
                          SimpleType: Any
                            CodeReferenceElement: Any
                              PsiElement(identifier)('Any')
                          PsiElement(,)(',')
                          PsiWhiteSpace(' ')
                          SimpleType: Any
                            CodeReferenceElement: Any
                              PsiElement(identifier)('Any')
                          PsiElement(])(']')
                    PsiWhiteSpace(' ')
                    PsiElement(})('}')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                ScNewTemplateDefinition: <anonymous>
                  PsiElement(new)('new')
                  PsiWhiteSpace(' ')
                  ExtendsBlock
                    TemplateParents
                      ConstructorInvocation
                        ParametrizedType: Foo[T]
                          SimpleType: Foo
                            CodeReferenceElement: Foo
                              PsiElement(identifier)('Foo')
                          TypeArgumentsList
                            PsiElement([)('[')
                            SimpleType: T
                              CodeReferenceElement: T
                                PsiElement(identifier)('T')
                            PsiElement(])(']')
                    PsiWhiteSpace(' ')
                    ScTemplateBody
                      PsiElement({)('{')
                      PsiWhiteSpace(' ')
                      ScTypeAliasDefinition: Out
                        AnnotationsList
                          <empty list>
                        Modifiers
                          <empty list>
                        PsiElement(type)('type')
                        PsiWhiteSpace(' ')
                        PsiElement(identifier)('Out')
                        PsiWhiteSpace(' ')
                        PsiElement(=)('=')
                        PsiWhiteSpace(' ')
                        ParametrizedType: T[Any, Any]
                          SimpleType: T
                            CodeReferenceElement: T
                              PsiElement(identifier)('T')
                          TypeArgumentsList
                            PsiElement([)('[')
                            SimpleType: Any
                              CodeReferenceElement: Any
                                PsiElement(identifier)('Any')
                            PsiElement(,)(',')
                            PsiWhiteSpace(' ')
                            SimpleType: Any
                              CodeReferenceElement: Any
                                PsiElement(identifier)('Any')
                            PsiElement(])(']')
                      PsiWhiteSpace(' ')
                      PsiElement(})('}')
              PsiWhiteSpace('\n  ')
              PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: foo
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('foo')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: T
              PsiElement(identifier)('T')
              PsiWhiteSpace(' ')
              PsiElement(<:)('<:')
              PsiWhiteSpace(' ')
              SimpleType: AnyKind
                CodeReferenceElement: AnyKind
                  PsiElement(identifier)('AnyKind')
            PsiElement(])(']')
          Parameters
            ParametersClause
              PsiElement(()('(')
              PsiElement(implicit)('implicit')
              PsiWhiteSpace(' ')
              Parameter: f
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('f')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  ParametrizedType: Foo[T]
                    SimpleType: Foo
                      CodeReferenceElement: Foo
                        PsiElement(identifier)('Foo')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: T
                        CodeReferenceElement: T
                          PsiElement(identifier)('T')
                      PsiElement(])(']')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: f.type
            CodeReferenceElement: f
              PsiElement(identifier)('f')
            PsiElement(.)('.')
            PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: f
            PsiElement(identifier)('f')
        PsiWhiteSpace('\n  ')
        MethodCall
          ReferenceExpression: foo[Int].id
            GenericCall
              ReferenceExpression: foo
                PsiElement(identifier)('foo')
              TypeArgumentsList
                PsiElement([)('[')
                SimpleType: Int
                  CodeReferenceElement: Int
                    PsiElement(identifier)('Int')
                PsiElement(])(']')
            PsiElement(.)('.')
            PsiElement(identifier)('id')
          ArgumentList
            PsiElement(()('(')
            IntegerLiteral
              PsiElement(integer)('23')
            PsiElement())(')')
        PsiWhiteSpace('\n  ')
        MethodCall
          ReferenceExpression: foo[List].id
            GenericCall
              ReferenceExpression: foo
                PsiElement(identifier)('foo')
              TypeArgumentsList
                PsiElement([)('[')
                SimpleType: List
                  CodeReferenceElement: List
                    PsiElement(identifier)('List')
                PsiElement(])(']')
            PsiElement(.)('.')
            PsiElement(identifier)('id')
          ArgumentList
            PsiElement(()('(')
            MethodCall
              GenericCall
                ReferenceExpression: List
                  PsiElement(identifier)('List')
                TypeArgumentsList
                  PsiElement([)('[')
                  SimpleType: Any
                    CodeReferenceElement: Any
                      PsiElement(identifier)('Any')
                  PsiElement(])(']')
              ArgumentList
                PsiElement(()('(')
                IntegerLiteral
                  PsiElement(integer)('1')
                PsiElement(,)(',')
                PsiWhiteSpace(' ')
                IntegerLiteral
                  PsiElement(integer)('2')
                PsiElement(,)(',')
                PsiWhiteSpace(' ')
                IntegerLiteral
                  PsiElement(integer)('3')
                PsiElement())(')')
            PsiElement())(')')
        PsiWhiteSpace('\n  ')
        MethodCall
          ReferenceExpression: foo[Map].id
            GenericCall
              ReferenceExpression: foo
                PsiElement(identifier)('foo')
              TypeArgumentsList
                PsiElement([)('[')
                SimpleType: Map
                  CodeReferenceElement: Map
                    PsiElement(identifier)('Map')
                PsiElement(])(']')
            PsiElement(.)('.')
            PsiElement(identifier)('id')
          ArgumentList
            PsiElement(()('(')
            MethodCall
              GenericCall
                ReferenceExpression: Map
                  PsiElement(identifier)('Map')
                TypeArgumentsList
                  PsiElement([)('[')
                  SimpleType: Any
                    CodeReferenceElement: Any
                      PsiElement(identifier)('Any')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  SimpleType: Any
                    CodeReferenceElement: Any
                      PsiElement(identifier)('Any')
                  PsiElement(])(']')
              ArgumentList
                PsiElement(()('(')
                InfixExpression
                  IntegerLiteral
                    PsiElement(integer)('1')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: ->
                    PsiElement(identifier)('->')
                  PsiWhiteSpace(' ')
                  StringLiteral
                    PsiElement(string content)('"toto"')
                PsiElement(,)(',')
                PsiWhiteSpace(' ')
                InfixExpression
                  IntegerLiteral
                    PsiElement(integer)('2')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: ->
                    PsiElement(identifier)('->')
                  PsiWhiteSpace(' ')
                  StringLiteral
                    PsiElement(string content)('"tata"')
                PsiElement(,)(',')
                PsiWhiteSpace(' ')
                InfixExpression
                  IntegerLiteral
                    PsiElement(integer)('3')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: ->
                    PsiElement(identifier)('->')
                  PsiWhiteSpace(' ')
                  StringLiteral
                    PsiElement(string content)('"tutu"')
                PsiElement())(')')
            PsiElement())(')')
        PsiWhiteSpace('\n\n  ')
        ScTrait: Kinded
          PsiComment(comment)('////////////////////////////////////////////////')
          PsiWhiteSpace('\n  ')
          PsiComment(comment)('// Is a type M Kinded as you want ?')
          PsiWhiteSpace('\n  ')
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(trait)('trait')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Kinded')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: M
              PsiElement(identifier)('M')
              PsiWhiteSpace(' ')
              PsiElement(<:)('<:')
              PsiWhiteSpace(' ')
              SimpleType: AnyKind
                CodeReferenceElement: AnyKind
                  PsiElement(identifier)('AnyKind')
            PsiElement(])(']')
          PsiWhiteSpace(' ')
          ExtendsBlock
            ScTemplateBody
              PsiElement({)('{')
              PsiWhiteSpace(' ')
              ScTypeAliasDeclaration: Out
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(type)('type')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('Out')
                PsiWhiteSpace(' ')
                PsiElement(<:)('<:')
                PsiWhiteSpace(' ')
                SimpleType: AnyKind
                  CodeReferenceElement: AnyKind
                    PsiElement(identifier)('AnyKind')
              PsiWhiteSpace(' ')
              PsiElement(})('}')
        PsiWhiteSpace('\n  ')
        ScObject: Kinded
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(object)('object')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Kinded')
          PsiWhiteSpace(' ')
          ExtendsBlock
            ScTemplateBody
              PsiElement({)('{')
              PsiWhiteSpace('\n    ')
              ScTypeAliasDefinition: Aux
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(type)('type')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('Aux')
                TypeParameterClause
                  PsiElement([)('[')
                  TypeParameter: M
                    PsiElement(identifier)('M')
                    PsiWhiteSpace(' ')
                    PsiElement(<:)('<:')
                    PsiWhiteSpace(' ')
                    SimpleType: AnyKind
                      CodeReferenceElement: AnyKind
                        PsiElement(identifier)('AnyKind')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  TypeParameter: Out0
                    PsiElement(identifier)('Out0')
                    PsiWhiteSpace(' ')
                    PsiElement(<:)('<:')
                    PsiWhiteSpace(' ')
                    SimpleType: AnyKind
                      CodeReferenceElement: AnyKind
                        PsiElement(identifier)('AnyKind')
                  PsiElement(])(']')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                CompoundType: Kinded[M] { type Out = Out0 }
                  ParametrizedType: Kinded[M]
                    SimpleType: Kinded
                      CodeReferenceElement: Kinded
                        PsiElement(identifier)('Kinded')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: M
                        CodeReferenceElement: M
                          PsiElement(identifier)('M')
                      PsiElement(])(']')
                  PsiWhiteSpace(' ')
                  Refinement
                    PsiElement({)('{')
                    PsiWhiteSpace(' ')
                    ScTypeAliasDefinition: Out
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(type)('type')
                      PsiWhiteSpace(' ')
                      PsiElement(identifier)('Out')
                      PsiWhiteSpace(' ')
                      PsiElement(=)('=')
                      PsiWhiteSpace(' ')
                      SimpleType: Out0
                        CodeReferenceElement: Out0
                          PsiElement(identifier)('Out0')
                    PsiWhiteSpace(' ')
                    PsiElement(})('}')
              PsiWhiteSpace('\n\n    ')
              ScFunctionDefinition: kinded0
                AnnotationsList
                  <empty list>
                Modifiers
                  PsiElement(implicit)('implicit')
                PsiWhiteSpace(' ')
                PsiElement(def)('def')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('kinded0')
                TypeParameterClause
                  PsiElement([)('[')
                  TypeParameter: M
                    PsiElement(identifier)('M')
                  PsiElement(])(']')
                Parameters
                  <empty list>
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParametrizedType: Aux[M, M]
                  SimpleType: Aux
                    CodeReferenceElement: Aux
                      PsiElement(identifier)('Aux')
                  TypeArgumentsList
                    PsiElement([)('[')
                    SimpleType: M
                      CodeReferenceElement: M
                        PsiElement(identifier)('M')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    SimpleType: M
                      CodeReferenceElement: M
                        PsiElement(identifier)('M')
                    PsiElement(])(']')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                ScNewTemplateDefinition: <anonymous>
                  PsiElement(new)('new')
                  PsiWhiteSpace(' ')
                  ExtendsBlock
                    TemplateParents
                      ConstructorInvocation
                        ParametrizedType: Kinded[M]
                          SimpleType: Kinded
                            CodeReferenceElement: Kinded
                              PsiElement(identifier)('Kinded')
                          TypeArgumentsList
                            PsiElement([)('[')
                            SimpleType: M
                              CodeReferenceElement: M
                                PsiElement(identifier)('M')
                            PsiElement(])(']')
                    PsiWhiteSpace(' ')
                    ScTemplateBody
                      PsiElement({)('{')
                      PsiWhiteSpace(' ')
                      ScTypeAliasDefinition: Out
                        AnnotationsList
                          <empty list>
                        Modifiers
                          <empty list>
                        PsiElement(type)('type')
                        PsiWhiteSpace(' ')
                        PsiElement(identifier)('Out')
                        PsiWhiteSpace(' ')
                        PsiElement(=)('=')
                        PsiWhiteSpace(' ')
                        SimpleType: M
                          CodeReferenceElement: M
                            PsiElement(identifier)('M')
                      PsiWhiteSpace(' ')
                      PsiElement(})('}')
              PsiWhiteSpace('\n    ')
              ScFunctionDefinition: kinded1
                AnnotationsList
                  <empty list>
                Modifiers
                  PsiElement(implicit)('implicit')
                PsiWhiteSpace(' ')
                PsiElement(def)('def')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('kinded1')
                TypeParameterClause
                  PsiElement([)('[')
                  TypeParameter: M
                    PsiElement(identifier)('M')
                    TypeParameterClause
                      PsiElement([)('[')
                      TypeParameter: _
                        PsiElement(_)('_')
                      PsiElement(])(']')
                  PsiElement(])(']')
                Parameters
                  <empty list>
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParametrizedType: Aux[M, M]
                  SimpleType: Aux
                    CodeReferenceElement: Aux
                      PsiElement(identifier)('Aux')
                  TypeArgumentsList
                    PsiElement([)('[')
                    SimpleType: M
                      CodeReferenceElement: M
                        PsiElement(identifier)('M')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    SimpleType: M
                      CodeReferenceElement: M
                        PsiElement(identifier)('M')
                    PsiElement(])(']')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                ScNewTemplateDefinition: <anonymous>
                  PsiElement(new)('new')
                  PsiWhiteSpace(' ')
                  ExtendsBlock
                    TemplateParents
                      ConstructorInvocation
                        ParametrizedType: Kinded[M]
                          SimpleType: Kinded
                            CodeReferenceElement: Kinded
                              PsiElement(identifier)('Kinded')
                          TypeArgumentsList
                            PsiElement([)('[')
                            SimpleType: M
                              CodeReferenceElement: M
                                PsiElement(identifier)('M')
                            PsiElement(])(']')
                    PsiWhiteSpace(' ')
                    ScTemplateBody
                      PsiElement({)('{')
                      PsiWhiteSpace(' ')
                      ScTypeAliasDefinition: Out
                        AnnotationsList
                          <empty list>
                        Modifiers
                          <empty list>
                        PsiElement(type)('type')
                        PsiWhiteSpace(' ')
                        PsiElement(identifier)('Out')
                        TypeParameterClause
                          PsiElement([)('[')
                          TypeParameter: t
                            PsiElement(identifier)('t')
                          PsiElement(])(']')
                        PsiWhiteSpace(' ')
                        PsiElement(=)('=')
                        PsiWhiteSpace(' ')
                        ParametrizedType: M[t]
                          SimpleType: M
                            CodeReferenceElement: M
                              PsiElement(identifier)('M')
                          TypeArgumentsList
                            PsiElement([)('[')
                            SimpleType: t
                              CodeReferenceElement: t
                                PsiElement(identifier)('t')
                            PsiElement(])(']')
                      PsiWhiteSpace(' ')
                      PsiElement(})('}')
              PsiWhiteSpace('\n    ')
              ScFunctionDefinition: kinded2
                AnnotationsList
                  <empty list>
                Modifiers
                  PsiElement(implicit)('implicit')
                PsiWhiteSpace(' ')
                PsiElement(def)('def')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('kinded2')
                TypeParameterClause
                  PsiElement([)('[')
                  TypeParameter: M
                    PsiElement(identifier)('M')
                    TypeParameterClause
                      PsiElement([)('[')
                      TypeParameter: _
                        PsiElement(_)('_')
                      PsiElement(,)(',')
                      PsiWhiteSpace(' ')
                      TypeParameter: _
                        PsiElement(_)('_')
                      PsiElement(])(']')
                  PsiElement(])(']')
                Parameters
                  <empty list>
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParametrizedType: Aux[M, M]
                  SimpleType: Aux
                    CodeReferenceElement: Aux
                      PsiElement(identifier)('Aux')
                  TypeArgumentsList
                    PsiElement([)('[')
                    SimpleType: M
                      CodeReferenceElement: M
                        PsiElement(identifier)('M')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    SimpleType: M
                      CodeReferenceElement: M
                        PsiElement(identifier)('M')
                    PsiElement(])(']')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                ScNewTemplateDefinition: <anonymous>
                  PsiElement(new)('new')
                  PsiWhiteSpace(' ')
                  ExtendsBlock
                    TemplateParents
                      ConstructorInvocation
                        ParametrizedType: Kinded[M]
                          SimpleType: Kinded
                            CodeReferenceElement: Kinded
                              PsiElement(identifier)('Kinded')
                          TypeArgumentsList
                            PsiElement([)('[')
                            SimpleType: M
                              CodeReferenceElement: M
                                PsiElement(identifier)('M')
                            PsiElement(])(']')
                    PsiWhiteSpace(' ')
                    ScTemplateBody
                      PsiElement({)('{')
                      PsiWhiteSpace(' ')
                      ScTypeAliasDefinition: Out
                        AnnotationsList
                          <empty list>
                        Modifiers
                          <empty list>
                        PsiElement(type)('type')
                        PsiWhiteSpace(' ')
                        PsiElement(identifier)('Out')
                        TypeParameterClause
                          PsiElement([)('[')
                          TypeParameter: t
                            PsiElement(identifier)('t')
                          PsiElement(,)(',')
                          PsiWhiteSpace(' ')
                          TypeParameter: u
                            PsiElement(identifier)('u')
                          PsiElement(])(']')
                        PsiWhiteSpace(' ')
                        PsiElement(=)('=')
                        PsiWhiteSpace(' ')
                        ParametrizedType: M[t, u]
                          SimpleType: M
                            CodeReferenceElement: M
                              PsiElement(identifier)('M')
                          TypeArgumentsList
                            PsiElement([)('[')
                            SimpleType: t
                              CodeReferenceElement: t
                                PsiElement(identifier)('t')
                            PsiElement(,)(',')
                            PsiWhiteSpace(' ')
                            SimpleType: u
                              CodeReferenceElement: u
                                PsiElement(identifier)('u')
                            PsiElement(])(']')
                      PsiWhiteSpace(' ')
                      PsiElement(})('}')
              PsiWhiteSpace('\n  ')
              PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        GenericCall
          ReferenceExpression: implicitly
            PsiElement(identifier)('implicitly')
          TypeArgumentsList
            PsiElement([)('[')
            ParametrizedType: Kinded.Aux[Int, Int]
              SimpleType: Kinded.Aux
                CodeReferenceElement: Kinded.Aux
                  CodeReferenceElement: Kinded
                    PsiElement(identifier)('Kinded')
                  PsiElement(.)('.')
                  PsiElement(identifier)('Aux')
              TypeArgumentsList
                PsiElement([)('[')
                SimpleType: Int
                  CodeReferenceElement: Int
                    PsiElement(identifier)('Int')
                PsiElement(,)(',')
                PsiWhiteSpace(' ')
                SimpleType: Int
                  CodeReferenceElement: Int
                    PsiElement(identifier)('Int')
                PsiElement(])(']')
            PsiElement(])(']')
        PsiWhiteSpace('\n  ')
        GenericCall
          ReferenceExpression: implicitly
            PsiElement(identifier)('implicitly')
          TypeArgumentsList
            PsiElement([)('[')
            ParametrizedType: Kinded.Aux[List, List]
              SimpleType: Kinded.Aux
                CodeReferenceElement: Kinded.Aux
                  CodeReferenceElement: Kinded
                    PsiElement(identifier)('Kinded')
                  PsiElement(.)('.')
                  PsiElement(identifier)('Aux')
              TypeArgumentsList
                PsiElement([)('[')
                SimpleType: List
                  CodeReferenceElement: List
                    PsiElement(identifier)('List')
                PsiElement(,)(',')
                PsiWhiteSpace(' ')
                SimpleType: List
                  CodeReferenceElement: List
                    PsiElement(identifier)('List')
                PsiElement(])(']')
            PsiElement(])(']')
        PsiWhiteSpace('\n  ')
        GenericCall
          ReferenceExpression: implicitly
            PsiElement(identifier)('implicitly')
          TypeArgumentsList
            PsiElement([)('[')
            ParametrizedType: Kinded.Aux[Map, Map]
              SimpleType: Kinded.Aux
                CodeReferenceElement: Kinded.Aux
                  CodeReferenceElement: Kinded
                    PsiElement(identifier)('Kinded')
                  PsiElement(.)('.')
                  PsiElement(identifier)('Aux')
              TypeArgumentsList
                PsiElement([)('[')
                SimpleType: Map
                  CodeReferenceElement: Map
                    PsiElement(identifier)('Map')
                PsiElement(,)(',')
                PsiWhiteSpace(' ')
                SimpleType: Map
                  CodeReferenceElement: Map
                    PsiElement(identifier)('Map')
                PsiElement(])(']')
            PsiElement(])(']')
        PsiWhiteSpace('\n\n  ')
        ScTrait: Kinder
          PsiComment(comment)('////////////////////////////////////////////////')
          PsiWhiteSpace('\n  ')
          PsiComment(comment)('// Extract Kind from a type')
          PsiWhiteSpace('\n  ')
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(trait)('trait')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Kinder')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: MA
              PsiElement(identifier)('MA')
            PsiElement(])(']')
          PsiWhiteSpace(' ')
          ExtendsBlock
            ScTemplateBody
              PsiElement({)('{')
              PsiWhiteSpace(' ')
              ScTypeAliasDeclaration: M
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(type)('type')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('M')
                PsiWhiteSpace(' ')
                PsiElement(<:)('<:')
                PsiWhiteSpace(' ')
                SimpleType: AnyKind
                  CodeReferenceElement: AnyKind
                    PsiElement(identifier)('AnyKind')
              PsiElement(;)(';')
              PsiWhiteSpace(' ')
              ScTypeAliasDeclaration: Args
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(type)('type')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('Args')
                PsiWhiteSpace(' ')
                PsiElement(<:)('<:')
                PsiWhiteSpace(' ')
                SimpleType: HList
                  CodeReferenceElement: HList
                    PsiElement(identifier)('HList')
              PsiWhiteSpace(' ')
              PsiElement(})('}')
        PsiWhiteSpace('\n  ')
        ScObject: Kinder
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(object)('object')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Kinder')
          PsiWhiteSpace(' ')
          ExtendsBlock
            PsiElement(extends)('extends')
            PsiWhiteSpace(' ')
            TemplateParents
              ConstructorInvocation
                SimpleType: KinderLowerImplicits
                  CodeReferenceElement: KinderLowerImplicits
                    PsiElement(identifier)('KinderLowerImplicits')
            PsiWhiteSpace(' ')
            ScTemplateBody
              PsiElement({)('{')
              PsiWhiteSpace('\n    ')
              ScTypeAliasDefinition: Aux
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(type)('type')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('Aux')
                TypeParameterClause
                  PsiElement([)('[')
                  TypeParameter: MA
                    PsiElement(identifier)('MA')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  TypeParameter: M0
                    PsiElement(identifier)('M0')
                    PsiWhiteSpace(' ')
                    PsiElement(<:)('<:')
                    PsiWhiteSpace(' ')
                    SimpleType: AnyKind
                      CodeReferenceElement: AnyKind
                        PsiElement(identifier)('AnyKind')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  TypeParameter: Args0
                    PsiElement(identifier)('Args0')
                    PsiWhiteSpace(' ')
                    PsiElement(<:)('<:')
                    PsiWhiteSpace(' ')
                    SimpleType: HList
                      CodeReferenceElement: HList
                        PsiElement(identifier)('HList')
                  PsiElement(])(']')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                CompoundType: Kinder[MA] { type M = M0; type Args = Args0 }
                  ParametrizedType: Kinder[MA]
                    SimpleType: Kinder
                      CodeReferenceElement: Kinder
                        PsiElement(identifier)('Kinder')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: MA
                        CodeReferenceElement: MA
                          PsiElement(identifier)('MA')
                      PsiElement(])(']')
                  PsiWhiteSpace(' ')
                  Refinement
                    PsiElement({)('{')
                    PsiWhiteSpace(' ')
                    ScTypeAliasDefinition: M
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(type)('type')
                      PsiWhiteSpace(' ')
                      PsiElement(identifier)('M')
                      PsiWhiteSpace(' ')
                      PsiElement(=)('=')
                      PsiWhiteSpace(' ')
                      SimpleType: M0
                        CodeReferenceElement: M0
                          PsiElement(identifier)('M0')
                    PsiElement(;)(';')
                    PsiWhiteSpace(' ')
                    ScTypeAliasDefinition: Args
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(type)('type')
                      PsiWhiteSpace(' ')
                      PsiElement(identifier)('Args')
                      PsiWhiteSpace(' ')
                      PsiElement(=)('=')
                      PsiWhiteSpace(' ')
                      SimpleType: Args0
                        CodeReferenceElement: Args0
                          PsiElement(identifier)('Args0')
                    PsiWhiteSpace(' ')
                    PsiElement(})('}')
              PsiWhiteSpace('\n\n    ')
              ScFunctionDefinition: kinder1
                AnnotationsList
                  <empty list>
                Modifiers
                  PsiElement(implicit)('implicit')
                PsiWhiteSpace(' ')
                PsiElement(def)('def')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('kinder1')
                TypeParameterClause
                  PsiElement([)('[')
                  TypeParameter: M0
                    PsiElement(identifier)('M0')
                    TypeParameterClause
                      PsiElement([)('[')
                      TypeParameter: _
                        PsiElement(_)('_')
                      PsiElement(])(']')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  TypeParameter: A0
                    PsiElement(identifier)('A0')
                  PsiElement(])(']')
                Parameters
                  <empty list>
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParametrizedType: Kinder.Aux[M0[A0], M0, A0 :: HNil]
                  SimpleType: Kinder.Aux
                    CodeReferenceElement: Kinder.Aux
                      CodeReferenceElement: Kinder
                        PsiElement(identifier)('Kinder')
                      PsiElement(.)('.')
                      PsiElement(identifier)('Aux')
                  TypeArgumentsList
                    PsiElement([)('[')
                    ParametrizedType: M0[A0]
                      SimpleType: M0
                        CodeReferenceElement: M0
                          PsiElement(identifier)('M0')
                      TypeArgumentsList
                        PsiElement([)('[')
                        SimpleType: A0
                          CodeReferenceElement: A0
                            PsiElement(identifier)('A0')
                        PsiElement(])(']')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    SimpleType: M0
                      CodeReferenceElement: M0
                        PsiElement(identifier)('M0')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    InfixType: A0 :: HNil
                      SimpleType: A0
                        CodeReferenceElement: A0
                          PsiElement(identifier)('A0')
                      PsiWhiteSpace(' ')
                      CodeReferenceElement: ::
                        PsiElement(identifier)('::')
                      PsiWhiteSpace(' ')
                      SimpleType: HNil
                        CodeReferenceElement: HNil
                          PsiElement(identifier)('HNil')
                    PsiElement(])(']')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                ScNewTemplateDefinition: <anonymous>
                  PsiElement(new)('new')
                  PsiWhiteSpace(' ')
                  ExtendsBlock
                    TemplateParents
                      ConstructorInvocation
                        ParametrizedType: Kinder[M0[A0]]
                          SimpleType: Kinder
                            CodeReferenceElement: Kinder
                              PsiElement(identifier)('Kinder')
                          TypeArgumentsList
                            PsiElement([)('[')
                            ParametrizedType: M0[A0]
                              SimpleType: M0
                                CodeReferenceElement: M0
                                  PsiElement(identifier)('M0')
                              TypeArgumentsList
                                PsiElement([)('[')
                                SimpleType: A0
                                  CodeReferenceElement: A0
                                    PsiElement(identifier)('A0')
                                PsiElement(])(']')
                            PsiElement(])(']')
                    PsiWhiteSpace(' ')
                    ScTemplateBody
                      PsiElement({)('{')
                      PsiWhiteSpace(' ')
                      ScTypeAliasDefinition: M
                        AnnotationsList
                          <empty list>
                        Modifiers
                          <empty list>
                        PsiElement(type)('type')
                        PsiWhiteSpace(' ')
                        PsiElement(identifier)('M')
                        TypeParameterClause
                          PsiElement([)('[')
                          TypeParameter: t
                            PsiElement(identifier)('t')
                          PsiElement(])(']')
                        PsiWhiteSpace(' ')
                        PsiElement(=)('=')
                        PsiWhiteSpace(' ')
                        ParametrizedType: M0[t]
                          SimpleType: M0
                            CodeReferenceElement: M0
                              PsiElement(identifier)('M0')
                          TypeArgumentsList
                            PsiElement([)('[')
                            SimpleType: t
                              CodeReferenceElement: t
                                PsiElement(identifier)('t')
                            PsiElement(])(']')
                      PsiElement(;)(';')
                      PsiWhiteSpace(' ')
                      ScTypeAliasDefinition: Args
                        AnnotationsList
                          <empty list>
                        Modifiers
                          <empty list>
                        PsiElement(type)('type')
                        PsiWhiteSpace(' ')
                        PsiElement(identifier)('Args')
                        PsiWhiteSpace(' ')
                        PsiElement(=)('=')
                        PsiWhiteSpace(' ')
                        InfixType: A0 :: HNil
                          SimpleType: A0
                            CodeReferenceElement: A0
                              PsiElement(identifier)('A0')
                          PsiWhiteSpace(' ')
                          CodeReferenceElement: ::
                            PsiElement(identifier)('::')
                          PsiWhiteSpace(' ')
                          SimpleType: HNil
                            CodeReferenceElement: HNil
                              PsiElement(identifier)('HNil')
                      PsiWhiteSpace(' ')
                      PsiElement(})('}')
              PsiWhiteSpace('\n  ')
              PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        ScTrait: KinderLowerImplicits
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(trait)('trait')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('KinderLowerImplicits')
          PsiWhiteSpace(' ')
          ExtendsBlock
            ScTemplateBody
              PsiElement({)('{')
              PsiWhiteSpace('\n    ')
              ScFunctionDefinition: kinder2
                AnnotationsList
                  <empty list>
                Modifiers
                  PsiElement(implicit)('implicit')
                PsiWhiteSpace(' ')
                PsiElement(def)('def')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('kinder2')
                TypeParameterClause
                  PsiElement([)('[')
                  TypeParameter: M0
                    PsiElement(identifier)('M0')
                    TypeParameterClause
                      PsiElement([)('[')
                      TypeParameter: _
                        PsiElement(_)('_')
                      PsiElement(,)(',')
                      PsiWhiteSpace(' ')
                      TypeParameter: _
                        PsiElement(_)('_')
                      PsiElement(])(']')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  TypeParameter: A0
                    PsiElement(identifier)('A0')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  TypeParameter: B0
                    PsiElement(identifier)('B0')
                  PsiElement(])(']')
                Parameters
                  <empty list>
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParametrizedType: Kinder.Aux[M0[A0, B0], M0, A0 :: B0 :: HNil]
                  SimpleType: Kinder.Aux
                    CodeReferenceElement: Kinder.Aux
                      CodeReferenceElement: Kinder
                        PsiElement(identifier)('Kinder')
                      PsiElement(.)('.')
                      PsiElement(identifier)('Aux')
                  TypeArgumentsList
                    PsiElement([)('[')
                    ParametrizedType: M0[A0, B0]
                      SimpleType: M0
                        CodeReferenceElement: M0
                          PsiElement(identifier)('M0')
                      TypeArgumentsList
                        PsiElement([)('[')
                        SimpleType: A0
                          CodeReferenceElement: A0
                            PsiElement(identifier)('A0')
                        PsiElement(,)(',')
                        PsiWhiteSpace(' ')
                        SimpleType: B0
                          CodeReferenceElement: B0
                            PsiElement(identifier)('B0')
                        PsiElement(])(']')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    SimpleType: M0
                      CodeReferenceElement: M0
                        PsiElement(identifier)('M0')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    InfixType: A0 :: B0 :: HNil
                      SimpleType: A0
                        CodeReferenceElement: A0
                          PsiElement(identifier)('A0')
                      PsiWhiteSpace(' ')
                      CodeReferenceElement: ::
                        PsiElement(identifier)('::')
                      PsiWhiteSpace(' ')
                      InfixType: B0 :: HNil
                        SimpleType: B0
                          CodeReferenceElement: B0
                            PsiElement(identifier)('B0')
                        PsiWhiteSpace(' ')
                        CodeReferenceElement: ::
                          PsiElement(identifier)('::')
                        PsiWhiteSpace(' ')
                        SimpleType: HNil
                          CodeReferenceElement: HNil
                            PsiElement(identifier)('HNil')
                    PsiElement(])(']')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                ScNewTemplateDefinition: <anonymous>
                  PsiElement(new)('new')
                  PsiWhiteSpace(' ')
                  ExtendsBlock
                    TemplateParents
                      ConstructorInvocation
                        ParametrizedType: Kinder[M0[A0, B0]]
                          SimpleType: Kinder
                            CodeReferenceElement: Kinder
                              PsiElement(identifier)('Kinder')
                          TypeArgumentsList
                            PsiElement([)('[')
                            ParametrizedType: M0[A0, B0]
                              SimpleType: M0
                                CodeReferenceElement: M0
                                  PsiElement(identifier)('M0')
                              TypeArgumentsList
                                PsiElement([)('[')
                                SimpleType: A0
                                  CodeReferenceElement: A0
                                    PsiElement(identifier)('A0')
                                PsiElement(,)(',')
                                PsiWhiteSpace(' ')
                                SimpleType: B0
                                  CodeReferenceElement: B0
                                    PsiElement(identifier)('B0')
                                PsiElement(])(']')
                            PsiElement(])(']')
                    PsiWhiteSpace(' ')
                    ScTemplateBody
                      PsiElement({)('{')
                      PsiWhiteSpace(' ')
                      ScTypeAliasDefinition: M
                        AnnotationsList
                          <empty list>
                        Modifiers
                          <empty list>
                        PsiElement(type)('type')
                        PsiWhiteSpace(' ')
                        PsiElement(identifier)('M')
                        TypeParameterClause
                          PsiElement([)('[')
                          TypeParameter: t
                            PsiElement(identifier)('t')
                          PsiElement(,)(',')
                          PsiWhiteSpace(' ')
                          TypeParameter: u
                            PsiElement(identifier)('u')
                          PsiElement(])(']')
                        PsiWhiteSpace(' ')
                        PsiElement(=)('=')
                        PsiWhiteSpace(' ')
                        ParametrizedType: M0[t, u]
                          SimpleType: M0
                            CodeReferenceElement: M0
                              PsiElement(identifier)('M0')
                          TypeArgumentsList
                            PsiElement([)('[')
                            SimpleType: t
                              CodeReferenceElement: t
                                PsiElement(identifier)('t')
                            PsiElement(,)(',')
                            PsiWhiteSpace(' ')
                            SimpleType: u
                              CodeReferenceElement: u
                                PsiElement(identifier)('u')
                            PsiElement(])(']')
                      PsiElement(;)(';')
                      PsiWhiteSpace(' ')
                      ScTypeAliasDefinition: Args
                        AnnotationsList
                          <empty list>
                        Modifiers
                          <empty list>
                        PsiElement(type)('type')
                        PsiWhiteSpace(' ')
                        PsiElement(identifier)('Args')
                        PsiWhiteSpace(' ')
                        PsiElement(=)('=')
                        PsiWhiteSpace(' ')
                        InfixType: A0 :: B0 :: HNil
                          SimpleType: A0
                            CodeReferenceElement: A0
                              PsiElement(identifier)('A0')
                          PsiWhiteSpace(' ')
                          CodeReferenceElement: ::
                            PsiElement(identifier)('::')
                          PsiWhiteSpace(' ')
                          InfixType: B0 :: HNil
                            SimpleType: B0
                              CodeReferenceElement: B0
                                PsiElement(identifier)('B0')
                            PsiWhiteSpace(' ')
                            CodeReferenceElement: ::
                              PsiElement(identifier)('::')
                            PsiWhiteSpace(' ')
                            SimpleType: HNil
                              CodeReferenceElement: HNil
                                PsiElement(identifier)('HNil')
                      PsiWhiteSpace(' ')
                      PsiElement(})('}')
              PsiWhiteSpace('\n    ')
              ScFunctionDefinition: kinder0
                AnnotationsList
                  <empty list>
                Modifiers
                  PsiElement(implicit)('implicit')
                PsiWhiteSpace(' ')
                PsiElement(def)('def')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('kinder0')
                TypeParameterClause
                  PsiElement([)('[')
                  TypeParameter: A
                    PsiElement(identifier)('A')
                  PsiElement(])(']')
                Parameters
                  <empty list>
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParametrizedType: Kinder.Aux[A, A, HNil]
                  SimpleType: Kinder.Aux
                    CodeReferenceElement: Kinder.Aux
                      CodeReferenceElement: Kinder
                        PsiElement(identifier)('Kinder')
                      PsiElement(.)('.')
                      PsiElement(identifier)('Aux')
                  TypeArgumentsList
                    PsiElement([)('[')
                    SimpleType: A
                      CodeReferenceElement: A
                        PsiElement(identifier)('A')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    SimpleType: A
                      CodeReferenceElement: A
                        PsiElement(identifier)('A')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    SimpleType: HNil
                      CodeReferenceElement: HNil
                        PsiElement(identifier)('HNil')
                    PsiElement(])(']')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                ScNewTemplateDefinition: <anonymous>
                  PsiElement(new)('new')
                  PsiWhiteSpace(' ')
                  ExtendsBlock
                    TemplateParents
                      ConstructorInvocation
                        ParametrizedType: Kinder[A]
                          SimpleType: Kinder
                            CodeReferenceElement: Kinder
                              PsiElement(identifier)('Kinder')
                          TypeArgumentsList
                            PsiElement([)('[')
                            SimpleType: A
                              CodeReferenceElement: A
                                PsiElement(identifier)('A')
                            PsiElement(])(']')
                    PsiWhiteSpace(' ')
                    ScTemplateBody
                      PsiElement({)('{')
                      PsiWhiteSpace(' ')
                      ScTypeAliasDefinition: M
                        AnnotationsList
                          <empty list>
                        Modifiers
                          <empty list>
                        PsiElement(type)('type')
                        PsiWhiteSpace(' ')
                        PsiElement(identifier)('M')
                        PsiWhiteSpace(' ')
                        PsiElement(=)('=')
                        PsiWhiteSpace(' ')
                        SimpleType: A
                          CodeReferenceElement: A
                            PsiElement(identifier)('A')
                      PsiElement(;)(';')
                      PsiWhiteSpace(' ')
                      ScTypeAliasDefinition: Args
                        AnnotationsList
                          <empty list>
                        Modifiers
                          <empty list>
                        PsiElement(type)('type')
                        PsiWhiteSpace(' ')
                        PsiElement(identifier)('Args')
                        PsiWhiteSpace(' ')
                        PsiElement(=)('=')
                        PsiWhiteSpace(' ')
                        SimpleType: HNil
                          CodeReferenceElement: HNil
                            PsiElement(identifier)('HNil')
                      PsiWhiteSpace(' ')
                      PsiElement(})('}')
              PsiWhiteSpace('\n  ')
              PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        ScTrait: SameKind
          PsiComment(comment)('////////////////////////////////////////////////')
          PsiWhiteSpace('\n  ')
          PsiComment(comment)('//IsoKindness Test')
          PsiWhiteSpace('\n  ')
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(trait)('trait')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('SameKind')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: M
              PsiElement(identifier)('M')
              PsiWhiteSpace(' ')
              PsiElement(<:)('<:')
              PsiWhiteSpace(' ')
              SimpleType: AnyKind
                CodeReferenceElement: AnyKind
                  PsiElement(identifier)('AnyKind')
            PsiElement(,)(',')
            PsiWhiteSpace(' ')
            TypeParameter: M2
              PsiElement(identifier)('M2')
              PsiWhiteSpace(' ')
              PsiElement(<:)('<:')
              PsiWhiteSpace(' ')
              SimpleType: AnyKind
                CodeReferenceElement: AnyKind
                  PsiElement(identifier)('AnyKind')
            PsiElement(])(']')
          ExtendsBlock
            <empty list>
        PsiWhiteSpace('\n  ')
        ScObject: SameKind
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(object)('object')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('SameKind')
          PsiWhiteSpace(' ')
          ExtendsBlock
            ScTemplateBody
              PsiElement({)('{')
              PsiWhiteSpace('\n\n    ')
              ScFunctionDefinition: sameKind0
                AnnotationsList
                  <empty list>
                Modifiers
                  PsiElement(implicit)('implicit')
                PsiWhiteSpace(' ')
                PsiElement(def)('def')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('sameKind0')
                TypeParameterClause
                  PsiElement([)('[')
                  TypeParameter: A
                    PsiElement(identifier)('A')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  TypeParameter: B
                    PsiElement(identifier)('B')
                  PsiElement(])(']')
                Parameters
                  <empty list>
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParametrizedType: SameKind[A, B]
                  SimpleType: SameKind
                    CodeReferenceElement: SameKind
                      PsiElement(identifier)('SameKind')
                  TypeArgumentsList
                    PsiElement([)('[')
                    SimpleType: A
                      CodeReferenceElement: A
                        PsiElement(identifier)('A')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    SimpleType: B
                      CodeReferenceElement: B
                        PsiElement(identifier)('B')
                    PsiElement(])(']')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                ScNewTemplateDefinition: <anonymous>
                  PsiElement(new)('new')
                  PsiWhiteSpace(' ')
                  ExtendsBlock
                    ScTemplateBody
                      PsiElement({)('{')
                      PsiElement(})('}')
              PsiWhiteSpace('\n    ')
              ScFunctionDefinition: sameKind01
                AnnotationsList
                  <empty list>
                Modifiers
                  PsiElement(implicit)('implicit')
                PsiWhiteSpace(' ')
                PsiElement(def)('def')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('sameKind01')
                TypeParameterClause
                  PsiElement([)('[')
                  TypeParameter: M1
                    PsiElement(identifier)('M1')
                    TypeParameterClause
                      PsiElement([)('[')
                      TypeParameter: _
                        PsiElement(_)('_')
                      PsiElement(])(']')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  TypeParameter: M2
                    PsiElement(identifier)('M2')
                    TypeParameterClause
                      PsiElement([)('[')
                      TypeParameter: _
                        PsiElement(_)('_')
                      PsiElement(])(']')
                  PsiElement(])(']')
                Parameters
                  <empty list>
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParametrizedType: SameKind[M1, M2]
                  SimpleType: SameKind
                    CodeReferenceElement: SameKind
                      PsiElement(identifier)('SameKind')
                  TypeArgumentsList
                    PsiElement([)('[')
                    SimpleType: M1
                      CodeReferenceElement: M1
                        PsiElement(identifier)('M1')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    SimpleType: M2
                      CodeReferenceElement: M2
                        PsiElement(identifier)('M2')
                    PsiElement(])(']')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                ScNewTemplateDefinition: <anonymous>
                  PsiElement(new)('new')
                  PsiWhiteSpace(' ')
                  ExtendsBlock
                    ScTemplateBody
                      PsiElement({)('{')
                      PsiElement(})('}')
              PsiWhiteSpace('\n    ')
              ScFunctionDefinition: sameKind02
                AnnotationsList
                  <empty list>
                Modifiers
                  PsiElement(implicit)('implicit')
                PsiWhiteSpace(' ')
                PsiElement(def)('def')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('sameKind02')
                TypeParameterClause
                  PsiElement([)('[')
                  TypeParameter: M1
                    PsiElement(identifier)('M1')
                    TypeParameterClause
                      PsiElement([)('[')
                      TypeParameter: _
                        PsiElement(_)('_')
                      PsiElement(,)(',')
                      PsiWhiteSpace(' ')
                      TypeParameter: _
                        PsiElement(_)('_')
                      PsiElement(])(']')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  TypeParameter: M2
                    PsiElement(identifier)('M2')
                    TypeParameterClause
                      PsiElement([)('[')
                      TypeParameter: _
                        PsiElement(_)('_')
                      PsiElement(,)(',')
                      PsiWhiteSpace(' ')
                      TypeParameter: _
                        PsiElement(_)('_')
                      PsiElement(])(']')
                  PsiElement(])(']')
                Parameters
                  <empty list>
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParametrizedType: SameKind[M1, M2]
                  SimpleType: SameKind
                    CodeReferenceElement: SameKind
                      PsiElement(identifier)('SameKind')
                  TypeArgumentsList
                    PsiElement([)('[')
                    SimpleType: M1
                      CodeReferenceElement: M1
                        PsiElement(identifier)('M1')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    SimpleType: M2
                      CodeReferenceElement: M2
                        PsiElement(identifier)('M2')
                    PsiElement(])(']')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                ScNewTemplateDefinition: <anonymous>
                  PsiElement(new)('new')
                  PsiWhiteSpace(' ')
                  ExtendsBlock
                    ScTemplateBody
                      PsiElement({)('{')
                      PsiElement(})('}')
              PsiWhiteSpace('\n  ')
              PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: sameKind
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('sameKind')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: M1
              PsiElement(identifier)('M1')
              PsiWhiteSpace(' ')
              PsiElement(<:)('<:')
              PsiWhiteSpace(' ')
              SimpleType: AnyKind
                CodeReferenceElement: AnyKind
                  PsiElement(identifier)('AnyKind')
            PsiElement(,)(',')
            PsiWhiteSpace(' ')
            TypeParameter: M2
              PsiElement(identifier)('M2')
              PsiWhiteSpace(' ')
              PsiElement(<:)('<:')
              PsiWhiteSpace(' ')
              SimpleType: AnyKind
                CodeReferenceElement: AnyKind
                  PsiElement(identifier)('AnyKind')
            PsiElement(])(']')
          Parameters
            ParametersClause
              PsiElement(()('(')
              PsiElement(implicit)('implicit')
              PsiWhiteSpace(' ')
              Parameter: sameKind
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('sameKind')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  ParametrizedType: SameKind[M1, M2]
                    SimpleType: SameKind
                      CodeReferenceElement: SameKind
                        PsiElement(identifier)('SameKind')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: M1
                        CodeReferenceElement: M1
                          PsiElement(identifier)('M1')
                      PsiElement(,)(',')
                      PsiWhiteSpace(' ')
                      SimpleType: M2
                        CodeReferenceElement: M2
                          PsiElement(identifier)('M2')
                      PsiElement(])(']')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: sameKind
            PsiElement(identifier)('sameKind')
        PsiWhiteSpace('\n\n  ')
        GenericCall
          ReferenceExpression: sameKind
            PsiElement(identifier)('sameKind')
          TypeArgumentsList
            PsiElement([)('[')
            SimpleType: Int
              CodeReferenceElement: Int
                PsiElement(identifier)('Int')
            PsiElement(,)(',')
            PsiWhiteSpace(' ')
            SimpleType: String
              CodeReferenceElement: String
                PsiElement(identifier)('String')
            PsiElement(])(']')
        PsiWhiteSpace('     ')
        PsiComment(comment)('// OK')
        PsiWhiteSpace('\n  ')
        GenericCall
          ReferenceExpression: sameKind
            PsiElement(identifier)('sameKind')
          TypeArgumentsList
            PsiElement([)('[')
            SimpleType: List
              CodeReferenceElement: List
                PsiElement(identifier)('List')
            PsiElement(,)(',')
            PsiWhiteSpace(' ')
            SimpleType: Bar
              CodeReferenceElement: Bar
                PsiElement(identifier)('Bar')
            PsiElement(])(']')
        PsiWhiteSpace('       ')
        PsiComment(comment)('// OK')
        PsiWhiteSpace('\n  ')
        GenericCall
          ReferenceExpression: sameKind
            PsiElement(identifier)('sameKind')
          TypeArgumentsList
            PsiElement([)('[')
            SimpleType: Map
              CodeReferenceElement: Map
                PsiElement(identifier)('Map')
            PsiElement(,)(',')
            PsiWhiteSpace(' ')
            SimpleType: Toto
              CodeReferenceElement: Toto
                PsiElement(identifier)('Toto')
            PsiElement(])(']')
        PsiWhiteSpace('       ')
        PsiComment(comment)('// OK')
        PsiWhiteSpace('\n\n  ')
        PsiComment(comment)('// sameKind[List, String] // KO')
        PsiWhiteSpace('\n  ')
        PsiComment(comment)('// sameKind[Map, List]    // KO')
        PsiWhiteSpace('\n  ')
        PsiComment(comment)('// sameKind[Map, Boolean] // KO')
        PsiWhiteSpace('\n\n\n\n  ')
        PsiComment(comment)('////////////////////////////////////////////////')
        PsiWhiteSpace('\n  ')
        PsiComment(comment)('// Kind-Polymorphic List style')
        PsiWhiteSpace('\n\n  ')
        ScTrait: HList
          PsiComment(comment)('// Classic Heterogenous List used in KindPolymorphic List')
          PsiWhiteSpace('\n  ')
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(sealed)('sealed')
          PsiWhiteSpace(' ')
          PsiElement(trait)('trait')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('HList')
          ExtendsBlock
            <empty list>
        PsiWhiteSpace('\n  ')
        ScClass: ::
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(final)('final')
            PsiWhiteSpace(' ')
            PsiElement(case)('case')
          PsiWhiteSpace(' ')
          PsiElement(class)('class')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('::')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: H
              PsiElement(identifier)('+')
              PsiElement(identifier)('H')
            PsiElement(,)(',')
            PsiWhiteSpace(' ')
            TypeParameter: T
              PsiElement(identifier)('+')
              PsiElement(identifier)('T')
              PsiWhiteSpace(' ')
              PsiElement(<:)('<:')
              PsiWhiteSpace(' ')
              SimpleType: HList
                CodeReferenceElement: HList
                  PsiElement(identifier)('HList')
            PsiElement(])(']')
          PrimaryConstructor
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            Parameters
              ParametersClause
                PsiElement(()('(')
                ClassParameter: head
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(identifier)('head')
                  PsiWhiteSpace(' ')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    SimpleType: H
                      CodeReferenceElement: H
                        PsiElement(identifier)('H')
                PsiElement(,)(',')
                PsiWhiteSpace(' ')
                ClassParameter: tail
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(identifier)('tail')
                  PsiWhiteSpace(' ')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    SimpleType: T
                      CodeReferenceElement: T
                        PsiElement(identifier)('T')
                PsiElement())(')')
          PsiWhiteSpace(' ')
          ExtendsBlock
            PsiElement(extends)('extends')
            PsiWhiteSpace(' ')
            TemplateParents
              ConstructorInvocation
                SimpleType: HList
                  CodeReferenceElement: HList
                    PsiElement(identifier)('HList')
        PsiWhiteSpace('\n  ')
        ScTrait: HNil
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(sealed)('sealed')
          PsiWhiteSpace(' ')
          PsiElement(trait)('trait')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('HNil')
          PsiWhiteSpace(' ')
          ExtendsBlock
            PsiElement(extends)('extends')
            PsiWhiteSpace(' ')
            TemplateParents
              ConstructorInvocation
                SimpleType: HList
                  CodeReferenceElement: HList
                    PsiElement(identifier)('HList')
        PsiWhiteSpace('\n  ')
        ScObject: HNil
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(case)('case')
          PsiWhiteSpace(' ')
          PsiElement(object)('object')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('HNil')
          PsiWhiteSpace(' ')
          ExtendsBlock
            PsiElement(extends)('extends')
            PsiWhiteSpace(' ')
            TemplateParents
              ConstructorInvocation
                SimpleType: HNil
                  CodeReferenceElement: HNil
                    PsiElement(identifier)('HNil')
        PsiWhiteSpace('\n\n  ')
        ScObject: New
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(object)('object')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('New')
          PsiWhiteSpace(' ')
          ExtendsBlock
            ScTemplateBody
              PsiElement({)('{')
              PsiWhiteSpace('\n    ')
              ScTrait: KPList
                PsiComment(comment)('// The Kind Polymorphic List')
                PsiWhiteSpace('\n    ')
                AnnotationsList
                  <empty list>
                Modifiers
                  PsiElement(sealed)('sealed')
                PsiWhiteSpace(' ')
                PsiElement(trait)('trait')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('KPList')
                ExtendsBlock
                  <empty list>
              PsiWhiteSpace('\n\n    ')
              ScTrait: KPNil
                AnnotationsList
                  <empty list>
                Modifiers
                  PsiElement(sealed)('sealed')
                PsiWhiteSpace(' ')
                PsiElement(trait)('trait')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('KPNil')
                PsiWhiteSpace(' ')
                ExtendsBlock
                  PsiElement(extends)('extends')
                  PsiWhiteSpace(' ')
                  TemplateParents
                    ConstructorInvocation
                      SimpleType: KPList
                        CodeReferenceElement: KPList
                          PsiElement(identifier)('KPList')
              PsiWhiteSpace('\n    ')
              ScObject: KPNil
                AnnotationsList
                  <empty list>
                Modifiers
                  PsiElement(case)('case')
                PsiWhiteSpace(' ')
                PsiElement(object)('object')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('KPNil')
                PsiWhiteSpace(' ')
                ExtendsBlock
                  PsiElement(extends)('extends')
                  PsiWhiteSpace(' ')
                  TemplateParents
                    ConstructorInvocation
                      SimpleType: KPNil
                        CodeReferenceElement: KPNil
                          PsiElement(identifier)('KPNil')
                  PsiWhiteSpace(' ')
                  ScTemplateBody
                    PsiElement({)('{')
                    PsiWhiteSpace('\n      ')
                    ScFunctionDefinition: :::
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(def)('def')
                      PsiWhiteSpace(' ')
                      PsiElement(identifier)(':::')
                      TypeParameterClause
                        PsiElement([)('[')
                        TypeParameter: H
                          PsiElement(identifier)('H')
                        PsiElement(,)(',')
                        PsiWhiteSpace(' ')
                        TypeParameter: M
                          PsiElement(identifier)('M')
                          PsiWhiteSpace(' ')
                          PsiElement(<:)('<:')
                          PsiWhiteSpace(' ')
                          SimpleType: AnyKind
                            CodeReferenceElement: AnyKind
                              PsiElement(identifier)('AnyKind')
                        PsiElement(,)(',')
                        PsiWhiteSpace(' ')
                        TypeParameter: HL
                          PsiElement(identifier)('HL')
                          PsiWhiteSpace(' ')
                          PsiElement(<:)('<:')
                          PsiWhiteSpace(' ')
                          SimpleType: HList
                            CodeReferenceElement: HList
                              PsiElement(identifier)('HList')
                        PsiElement(])(']')
                      Parameters
                        ParametersClause
                          PsiElement(()('(')
                          Parameter: h
                            AnnotationsList
                              <empty list>
                            Modifiers
                              <empty list>
                            PsiElement(identifier)('h')
                            PsiElement(:)(':')
                            ParameterType
                              SimpleType: H
                                CodeReferenceElement: H
                                  PsiElement(identifier)('H')
                          PsiElement())(')')
                        ParametersClause
                          PsiElement(()('(')
                          PsiElement(implicit)('implicit')
                          PsiWhiteSpace(' ')
                          Parameter: kinder
                            AnnotationsList
                              <empty list>
                            Modifiers
                              <empty list>
                            PsiElement(identifier)('kinder')
                            PsiElement(:)(':')
                            PsiWhiteSpace(' ')
                            ParameterType
                              ParametrizedType: Kinder.Aux[H, M, HL]
                                SimpleType: Kinder.Aux
                                  CodeReferenceElement: Kinder.Aux
                                    CodeReferenceElement: Kinder
                                      PsiElement(identifier)('Kinder')
                                    PsiElement(.)('.')
                                    PsiElement(identifier)('Aux')
                                TypeArgumentsList
                                  PsiElement([)('[')
                                  SimpleType: H
                                    CodeReferenceElement: H
                                      PsiElement(identifier)('H')
                                  PsiElement(,)(',')
                                  PsiWhiteSpace(' ')
                                  SimpleType: M
                                    CodeReferenceElement: M
                                      PsiElement(identifier)('M')
                                  PsiElement(,)(',')
                                  PsiWhiteSpace(' ')
                                  SimpleType: HL
                                    CodeReferenceElement: HL
                                      PsiElement(identifier)('HL')
                                  PsiElement(])(']')
                          PsiElement())(')')
                      PsiWhiteSpace(' ')
                      PsiElement(=)('=')
                      PsiWhiteSpace('\n        ')
                      MethodCall
                        ReferenceExpression: New.:::
                          ReferenceExpression: New
                            PsiElement(identifier)('New')
                          PsiElement(.)('.')
                          PsiElement(identifier)(':::')
                        ArgumentList
                          PsiElement(()('(')
                          ReferenceExpression: h
                            PsiElement(identifier)('h')
                          PsiElement(,)(',')
                          PsiWhiteSpace(' ')
                          ReferenceExpression: KPNil
                            PsiElement(identifier)('KPNil')
                          PsiElement())(')')
                    PsiWhiteSpace('\n    ')
                    PsiElement(})('}')
              PsiWhiteSpace('\n\n    ')
              ScClass: :::
                AnnotationsList
                  <empty list>
                Modifiers
                  PsiElement(sealed)('sealed')
                  PsiWhiteSpace(' ')
                  PsiElement(case)('case')
                PsiWhiteSpace(' ')
                PsiElement(class)('class')
                PsiWhiteSpace(' ')
                PsiElement(identifier)(':::')
                TypeParameterClause
                  PsiElement([)('[')
                  TypeParameter: H
                    PsiElement(identifier)('H')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  TypeParameter: T
                    PsiElement(identifier)('T')
                    PsiWhiteSpace(' ')
                    PsiElement(<:)('<:')
                    PsiWhiteSpace(' ')
                    SimpleType: KPList
                      CodeReferenceElement: KPList
                        PsiElement(identifier)('KPList')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  TypeParameter: M
                    PsiElement(identifier)('M')
                    PsiWhiteSpace(' ')
                    PsiElement(<:)('<:')
                    PsiWhiteSpace(' ')
                    SimpleType: AnyKind
                      CodeReferenceElement: AnyKind
                        PsiElement(identifier)('AnyKind')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  TypeParameter: HL0
                    PsiElement(identifier)('HL0')
                    PsiWhiteSpace(' ')
                    PsiElement(<:)('<:')
                    PsiWhiteSpace(' ')
                    SimpleType: HList
                      CodeReferenceElement: HList
                        PsiElement(identifier)('HList')
                  PsiElement(])(']')
                PrimaryConstructor
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  Parameters
                    ParametersClause
                      PsiElement(()('(')
                      PsiWhiteSpace('\n      ')
                      ClassParameter: head
                        AnnotationsList
                          <empty list>
                        Modifiers
                          <empty list>
                        PsiElement(identifier)('head')
                        PsiElement(:)(':')
                        PsiWhiteSpace(' ')
                        ParameterType
                          SimpleType: H
                            CodeReferenceElement: H
                              PsiElement(identifier)('H')
                      PsiWhiteSpace('\n    ')
                      PsiElement(,)(',')
                      PsiWhiteSpace(' ')
                      ClassParameter: tail
                        AnnotationsList
                          <empty list>
                        Modifiers
                          <empty list>
                        PsiElement(identifier)('tail')
                        PsiElement(:)(':')
                        PsiWhiteSpace(' ')
                        ParameterType
                          SimpleType: T
                            CodeReferenceElement: T
                              PsiElement(identifier)('T')
                      PsiWhiteSpace('\n    ')
                      PsiElement())(')')
                    ParametersClause
                      PsiElement(()('(')
                      PsiElement(implicit)('implicit')
                      PsiWhiteSpace(' ')
                      ClassParameter: kinder
                        AnnotationsList
                          <empty list>
                        Modifiers
                          <empty list>
                        PsiElement(val)('val')
                        PsiWhiteSpace(' ')
                        PsiElement(identifier)('kinder')
                        PsiElement(:)(':')
                        PsiWhiteSpace(' ')
                        ParameterType
                          ParametrizedType: Kinder.Aux[H, M, HL0]
                            SimpleType: Kinder.Aux
                              CodeReferenceElement: Kinder.Aux
                                CodeReferenceElement: Kinder
                                  PsiElement(identifier)('Kinder')
                                PsiElement(.)('.')
                                PsiElement(identifier)('Aux')
                            TypeArgumentsList
                              PsiElement([)('[')
                              SimpleType: H
                                CodeReferenceElement: H
                                  PsiElement(identifier)('H')
                              PsiElement(,)(',')
                              PsiWhiteSpace(' ')
                              SimpleType: M
                                CodeReferenceElement: M
                                  PsiElement(identifier)('M')
                              PsiElement(,)(',')
                              PsiWhiteSpace(' ')
                              SimpleType: HL0
                                CodeReferenceElement: HL0
                                  PsiElement(identifier)('HL0')
                              PsiElement(])(']')
                      PsiElement())(')')
                PsiWhiteSpace(' ')
                ExtendsBlock
                  PsiElement(extends)('extends')
                  PsiWhiteSpace(' ')
                  TemplateParents
                    ConstructorInvocation
                      SimpleType: KPList
                        CodeReferenceElement: KPList
                          PsiElement(identifier)('KPList')
              PsiWhiteSpace('\n\n    ')
              ScClass: KPListOps
                AnnotationsList
                  <empty list>
                Modifiers
                  PsiElement(final)('final')
                  PsiWhiteSpace(' ')
                  PsiElement(case)('case')
                PsiWhiteSpace(' ')
                PsiElement(class)('class')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('KPListOps')
                TypeParameterClause
                  PsiElement([)('[')
                  TypeParameter: L
                    PsiElement(identifier)('L')
                    PsiWhiteSpace(' ')
                    PsiElement(<:)('<:')
                    PsiWhiteSpace(' ')
                    SimpleType: KPList
                      CodeReferenceElement: KPList
                        PsiElement(identifier)('KPList')
                  PsiElement(])(']')
                PrimaryConstructor
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  Parameters
                    ParametersClause
                      PsiElement(()('(')
                      ClassParameter: l
                        AnnotationsList
                          <empty list>
                        Modifiers
                          <empty list>
                        PsiElement(identifier)('l')
                        PsiWhiteSpace(' ')
                        PsiElement(:)(':')
                        PsiWhiteSpace(' ')
                        ParameterType
                          SimpleType: L
                            CodeReferenceElement: L
                              PsiElement(identifier)('L')
                      PsiElement())(')')
                PsiWhiteSpace(' ')
                ExtendsBlock
                  ScTemplateBody
                    PsiElement({)('{')
                    PsiWhiteSpace('\n      ')
                    ScFunctionDefinition: :::
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(def)('def')
                      PsiWhiteSpace(' ')
                      PsiElement(identifier)(':::')
                      TypeParameterClause
                        PsiElement([)('[')
                        TypeParameter: H
                          PsiElement(identifier)('H')
                        PsiElement(,)(',')
                        PsiWhiteSpace(' ')
                        TypeParameter: M
                          PsiElement(identifier)('M')
                          PsiWhiteSpace(' ')
                          PsiElement(<:)('<:')
                          PsiWhiteSpace(' ')
                          SimpleType: AnyKind
                            CodeReferenceElement: AnyKind
                              PsiElement(identifier)('AnyKind')
                        PsiElement(,)(',')
                        PsiWhiteSpace(' ')
                        TypeParameter: HL
                          PsiElement(identifier)('HL')
                          PsiWhiteSpace(' ')
                          PsiElement(<:)('<:')
                          PsiWhiteSpace(' ')
                          SimpleType: HList
                            CodeReferenceElement: HList
                              PsiElement(identifier)('HList')
                        PsiElement(])(']')
                      Parameters
                        ParametersClause
                          PsiElement(()('(')
                          Parameter: h
                            AnnotationsList
                              <empty list>
                            Modifiers
                              <empty list>
                            PsiElement(identifier)('h')
                            PsiElement(:)(':')
                            ParameterType
                              SimpleType: H
                                CodeReferenceElement: H
                                  PsiElement(identifier)('H')
                          PsiElement())(')')
                        ParametersClause
                          PsiElement(()('(')
                          PsiElement(implicit)('implicit')
                          PsiWhiteSpace(' ')
                          Parameter: kinder
                            AnnotationsList
                              <empty list>
                            Modifiers
                              <empty list>
                            PsiElement(identifier)('kinder')
                            PsiElement(:)(':')
                            PsiWhiteSpace(' ')
                            ParameterType
                              ParametrizedType: Kinder.Aux[H, M, HL]
                                SimpleType: Kinder.Aux
                                  CodeReferenceElement: Kinder.Aux
                                    CodeReferenceElement: Kinder
                                      PsiElement(identifier)('Kinder')
                                    PsiElement(.)('.')
                                    PsiElement(identifier)('Aux')
                                TypeArgumentsList
                                  PsiElement([)('[')
                                  SimpleType: H
                                    CodeReferenceElement: H
                                      PsiElement(identifier)('H')
                                  PsiElement(,)(',')
                                  PsiWhiteSpace(' ')
                                  SimpleType: M
                                    CodeReferenceElement: M
                                      PsiElement(identifier)('M')
                                  PsiElement(,)(',')
                                  PsiWhiteSpace(' ')
                                  SimpleType: HL
                                    CodeReferenceElement: HL
                                      PsiElement(identifier)('HL')
                                  PsiElement(])(']')
                          PsiElement())(')')
                      PsiWhiteSpace(' ')
                      PsiElement(=)('=')
                      PsiWhiteSpace('\n        ')
                      MethodCall
                        ReferenceExpression: New.:::
                          ReferenceExpression: New
                            PsiElement(identifier)('New')
                          PsiElement(.)('.')
                          PsiElement(identifier)(':::')
                        ArgumentList
                          PsiElement(()('(')
                          ReferenceExpression: h
                            PsiElement(identifier)('h')
                          PsiElement(,)(',')
                          PsiWhiteSpace(' ')
                          ReferenceExpression: l
                            PsiElement(identifier)('l')
                          PsiElement())(')')
                    PsiWhiteSpace('\n    ')
                    PsiElement(})('}')
              PsiWhiteSpace('\n\n    ')
              ScFunctionDefinition: kplistOps
                AnnotationsList
                  <empty list>
                Modifiers
                  PsiElement(implicit)('implicit')
                PsiWhiteSpace(' ')
                PsiElement(def)('def')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('kplistOps')
                TypeParameterClause
                  PsiElement([)('[')
                  TypeParameter: L
                    PsiElement(identifier)('L')
                    PsiWhiteSpace(' ')
                    PsiElement(<:)('<:')
                    PsiWhiteSpace(' ')
                    SimpleType: KPList
                      CodeReferenceElement: KPList
                        PsiElement(identifier)('KPList')
                  PsiElement(])(']')
                Parameters
                  ParametersClause
                    PsiElement(()('(')
                    Parameter: l
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(identifier)('l')
                      PsiElement(:)(':')
                      PsiWhiteSpace(' ')
                      ParameterType
                        SimpleType: L
                          CodeReferenceElement: L
                            PsiElement(identifier)('L')
                    PsiElement())(')')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParametrizedType: KPListOps[L]
                  SimpleType: KPListOps
                    CodeReferenceElement: KPListOps
                      PsiElement(identifier)('KPListOps')
                  TypeArgumentsList
                    PsiElement([)('[')
                    SimpleType: L
                      CodeReferenceElement: L
                        PsiElement(identifier)('L')
                    PsiElement(])(']')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                ScNewTemplateDefinition: <anonymous>
                  PsiElement(new)('new')
                  PsiWhiteSpace(' ')
                  ExtendsBlock
                    TemplateParents
                      ConstructorInvocation
                        SimpleType: KPListOps
                          CodeReferenceElement: KPListOps
                            PsiElement(identifier)('KPListOps')
                        ArgumentList
                          PsiElement(()('(')
                          ReferenceExpression: l
                            PsiElement(identifier)('l')
                          PsiElement())(')')
              PsiWhiteSpace('\n\n    ')
              ScPatternDefinition: kl
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(val)('val')
                PsiWhiteSpace(' ')
                ListOfPatterns
                  ReferencePattern: kl
                    PsiElement(identifier)('kl')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                InfixExpression
                  MethodCall
                    ReferenceExpression: Bar
                      PsiElement(identifier)('Bar')
                    ArgumentList
                      PsiElement(()('(')
                      IntegerLiteral
                        PsiElement(integer)('5')
                      PsiElement())(')')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: :::
                    PsiElement(identifier)(':::')
                  PsiWhiteSpace(' ')
                  InfixExpression
                    StringLiteral
                      PsiElement(string content)('"toto"')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: :::
                      PsiElement(identifier)(':::')
                    PsiWhiteSpace(' ')
                    InfixExpression
                      MethodCall
                        ReferenceExpression: List
                          PsiElement(identifier)('List')
                        ArgumentList
                          PsiElement(()('(')
                          IntegerLiteral
                            PsiElement(integer)('1')
                          PsiElement(,)(',')
                          PsiWhiteSpace(' ')
                          IntegerLiteral
                            PsiElement(integer)('2')
                          PsiElement(,)(',')
                          PsiWhiteSpace(' ')
                          IntegerLiteral
                            PsiElement(integer)('3')
                          PsiElement())(')')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: :::
                        PsiElement(identifier)(':::')
                      PsiWhiteSpace(' ')
                      InfixExpression
                        MethodCall
                          ReferenceExpression: Map
                            PsiElement(identifier)('Map')
                          ArgumentList
                            PsiElement(()('(')
                            InfixExpression
                              StringLiteral
                                PsiElement(string content)('"toto"')
                              PsiWhiteSpace(' ')
                              ReferenceExpression: ->
                                PsiElement(identifier)('->')
                              PsiWhiteSpace(' ')
                              LongLiteral
                                PsiElement(long)('1L')
                            PsiElement(,)(',')
                            PsiWhiteSpace(' ')
                            InfixExpression
                              StringLiteral
                                PsiElement(string content)('"tata"')
                              PsiWhiteSpace(' ')
                              ReferenceExpression: ->
                                PsiElement(identifier)('->')
                              PsiWhiteSpace(' ')
                              LongLiteral
                                PsiElement(long)('2L')
                            PsiElement())(')')
                        PsiWhiteSpace(' ')
                        ReferenceExpression: :::
                          PsiElement(identifier)(':::')
                        PsiWhiteSpace(' ')
                        ReferenceExpression: KPNil
                          PsiElement(identifier)('KPNil')
              PsiWhiteSpace('\n\n    ')
              ScPatternDefinition: h
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(val)('val')
                PsiWhiteSpace(' ')
                ListOfPatterns
                  ReferencePattern: h
                    PsiElement(identifier)('h')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParametrizedType: Bar[Int]
                  SimpleType: Bar
                    CodeReferenceElement: Bar
                      PsiElement(identifier)('Bar')
                  TypeArgumentsList
                    PsiElement([)('[')
                    SimpleType: Int
                      CodeReferenceElement: Int
                        PsiElement(identifier)('Int')
                    PsiElement(])(']')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                ReferenceExpression: kl.head
                  ReferenceExpression: kl
                    PsiElement(identifier)('kl')
                  PsiElement(.)('.')
                  PsiElement(identifier)('head')
              PsiWhiteSpace('\n    ')
              ScPatternDefinition: h2
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(val)('val')
                PsiWhiteSpace(' ')
                ListOfPatterns
                  ReferencePattern: h2
                    PsiElement(identifier)('h2')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                SimpleType: String
                  CodeReferenceElement: String
                    PsiElement(identifier)('String')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                ReferenceExpression: kl.tail.head
                  ReferenceExpression: kl.tail
                    ReferenceExpression: kl
                      PsiElement(identifier)('kl')
                    PsiElement(.)('.')
                    PsiElement(identifier)('tail')
                  PsiElement(.)('.')
                  PsiElement(identifier)('head')
              PsiWhiteSpace('\n    ')
              ScPatternDefinition: h3
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(val)('val')
                PsiWhiteSpace(' ')
                ListOfPatterns
                  ReferencePattern: h3
                    PsiElement(identifier)('h3')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParametrizedType: List[Int]
                  SimpleType: List
                    CodeReferenceElement: List
                      PsiElement(identifier)('List')
                  TypeArgumentsList
                    PsiElement([)('[')
                    SimpleType: Int
                      CodeReferenceElement: Int
                        PsiElement(identifier)('Int')
                    PsiElement(])(']')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                ReferenceExpression: kl.tail.tail.head
                  ReferenceExpression: kl.tail.tail
                    ReferenceExpression: kl.tail
                      ReferenceExpression: kl
                        PsiElement(identifier)('kl')
                      PsiElement(.)('.')
                      PsiElement(identifier)('tail')
                    PsiElement(.)('.')
                    PsiElement(identifier)('tail')
                  PsiElement(.)('.')
                  PsiElement(identifier)('head')
              PsiWhiteSpace('\n    ')
              ScPatternDefinition: h4
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(val)('val')
                PsiWhiteSpace(' ')
                ListOfPatterns
                  ReferencePattern: h4
                    PsiElement(identifier)('h4')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParametrizedType: Map[String, Long]
                  SimpleType: Map
                    CodeReferenceElement: Map
                      PsiElement(identifier)('Map')
                  TypeArgumentsList
                    PsiElement([)('[')
                    SimpleType: String
                      CodeReferenceElement: String
                        PsiElement(identifier)('String')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    SimpleType: Long
                      CodeReferenceElement: Long
                        PsiElement(identifier)('Long')
                    PsiElement(])(']')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                ReferenceExpression: kl.tail.tail.tail.head
                  ReferenceExpression: kl.tail.tail.tail
                    ReferenceExpression: kl.tail.tail
                      ReferenceExpression: kl.tail
                        ReferenceExpression: kl
                          PsiElement(identifier)('kl')
                        PsiElement(.)('.')
                        PsiElement(identifier)('tail')
                      PsiElement(.)('.')
                      PsiElement(identifier)('tail')
                    PsiElement(.)('.')
                    PsiElement(identifier)('tail')
                  PsiElement(.)('.')
                  PsiElement(identifier)('head')
              PsiWhiteSpace('\n\n  ')
              PsiElement(})('}')
        PsiWhiteSpace('\n\n\n  ')
        PsiComment(comment)('////////////////////////////////////////////////')
        PsiWhiteSpace('\n  ')
        PsiComment(comment)('// SPECIAL CASES')
        PsiWhiteSpace('\n  ')
        PsiComment(comment)('// def foo0[F <: AnyKind]: F = null.asInstanceOf[F]  // error: F cannot be used as a value type')
        PsiWhiteSpace('\n  ')
        PsiComment(comment)('// val i = foo0[Int]')
        PsiWhiteSpace('\n  ')
        PsiComment(comment)('// val li = foo0[List[Int]]')
        PsiWhiteSpace('\n  ')
        PsiComment(comment)('// foo0[List]                // KO -> neg')
        PsiWhiteSpace('\n  ')
        PsiComment(comment)('// val l = foo0[List]        // KO -> neg')
        PsiWhiteSpace('\n\n  ')
        PsiComment(comment)('// def foo1[F <: AnyKind, A <: AnyKind]: F[A] = ??? // KO')
        PsiWhiteSpace('\n\n  ')
        PsiComment(comment)('// def foo2: AnyKind = ??? // KO')
        PsiWhiteSpace('\n\n\n  ')
        ScObject: Old
          PsiComment(comment)('// Older implementation Kind-Polymorphic List but I prefer the one above')
          PsiWhiteSpace('\n  ')
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(object)('object')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Old')
          PsiWhiteSpace(' ')
          ExtendsBlock
            ScTemplateBody
              PsiElement({)('{')
              PsiWhiteSpace('\n\n    ')
              ScTrait: KPList
                PsiComment(comment)('// The Kind Polymorphic List')
                PsiWhiteSpace('\n    ')
                AnnotationsList
                  <empty list>
                Modifiers
                  PsiElement(sealed)('sealed')
                PsiWhiteSpace(' ')
                PsiElement(trait)('trait')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('KPList')
                ExtendsBlock
                  <empty list>
              PsiWhiteSpace('\n\n    ')
              ScTrait: KPNil
                AnnotationsList
                  <empty list>
                Modifiers
                  PsiElement(sealed)('sealed')
                PsiWhiteSpace(' ')
                PsiElement(trait)('trait')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('KPNil')
                PsiWhiteSpace(' ')
                ExtendsBlock
                  PsiElement(extends)('extends')
                  PsiWhiteSpace(' ')
                  TemplateParents
                    ConstructorInvocation
                      SimpleType: KPList
                        CodeReferenceElement: KPList
                          PsiElement(identifier)('KPList')
              PsiWhiteSpace('\n    ')
              ScObject: KPNil
                AnnotationsList
                  <empty list>
                Modifiers
                  PsiElement(case)('case')
                PsiWhiteSpace(' ')
                PsiElement(object)('object')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('KPNil')
                PsiWhiteSpace(' ')
                ExtendsBlock
                  PsiElement(extends)('extends')
                  PsiWhiteSpace(' ')
                  TemplateParents
                    ConstructorInvocation
                      SimpleType: KPNil
                        CodeReferenceElement: KPNil
                          PsiElement(identifier)('KPNil')
              PsiWhiteSpace('\n\n    ')
              ScTrait: :::
                AnnotationsList
                  <empty list>
                Modifiers
                  PsiElement(sealed)('sealed')
                PsiWhiteSpace(' ')
                PsiElement(trait)('trait')
                PsiWhiteSpace(' ')
                PsiElement(identifier)(':::')
                TypeParameterClause
                  PsiElement([)('[')
                  TypeParameter: H
                    PsiElement(identifier)('H')
                    PsiWhiteSpace(' ')
                    PsiElement(<:)('<:')
                    PsiWhiteSpace(' ')
                    SimpleType: AnyKind
                      CodeReferenceElement: AnyKind
                        PsiElement(identifier)('AnyKind')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  TypeParameter: T
                    PsiElement(identifier)('T')
                    PsiWhiteSpace(' ')
                    PsiElement(<:)('<:')
                    PsiWhiteSpace(' ')
                    SimpleType: KPList
                      CodeReferenceElement: KPList
                        PsiElement(identifier)('KPList')
                  PsiElement(])(']')
                PsiWhiteSpace(' ')
                ExtendsBlock
                  PsiElement(extends)('extends')
                  PsiWhiteSpace(' ')
                  TemplateParents
                    ConstructorInvocation
                      SimpleType: KPList
                        CodeReferenceElement: KPList
                          PsiElement(identifier)('KPList')
              PsiWhiteSpace('\n    ')
              ScTrait: KPCons
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(trait)('trait')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('KPCons')
                TypeParameterClause
                  PsiElement([)('[')
                  TypeParameter: M
                    PsiElement(identifier)('M')
                    PsiWhiteSpace(' ')
                    PsiElement(<:)('<:')
                    PsiWhiteSpace(' ')
                    SimpleType: AnyKind
                      CodeReferenceElement: AnyKind
                        PsiElement(identifier)('AnyKind')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  TypeParameter: T
                    PsiElement(identifier)('T')
                    PsiWhiteSpace(' ')
                    PsiElement(<:)('<:')
                    PsiWhiteSpace(' ')
                    SimpleType: KPList
                      CodeReferenceElement: KPList
                        PsiElement(identifier)('KPList')
                  PsiElement(])(']')
                PsiWhiteSpace(' ')
                ExtendsBlock
                  PsiElement(extends)('extends')
                  PsiWhiteSpace(' ')
                  TemplateParents
                    ConstructorInvocation
                      ParametrizedType: :::[M, T]
                        SimpleType: :::
                          CodeReferenceElement: :::
                            PsiElement(identifier)(':::')
                        TypeArgumentsList
                          PsiElement([)('[')
                          SimpleType: M
                            CodeReferenceElement: M
                              PsiElement(identifier)('M')
                          PsiElement(,)(',')
                          PsiWhiteSpace(' ')
                          SimpleType: T
                            CodeReferenceElement: T
                              PsiElement(identifier)('T')
                          PsiElement(])(']')
                  PsiWhiteSpace('  ')
                  ScTemplateBody
                    PsiElement({)('{')
                    PsiWhiteSpace('\n      ')
                    ScTypeAliasDeclaration: HL
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(type)('type')
                      PsiWhiteSpace(' ')
                      PsiElement(identifier)('HL')
                      PsiWhiteSpace(' ')
                      PsiElement(<:)('<:')
                      PsiWhiteSpace(' ')
                      SimpleType: HList
                        CodeReferenceElement: HList
                          PsiElement(identifier)('HList')
                    PsiWhiteSpace('\n      ')
                    ScTypeAliasDeclaration: H
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(type)('type')
                      PsiWhiteSpace(' ')
                      PsiElement(identifier)('H')
                    PsiWhiteSpace('\n      ')
                    ScFunctionDeclaration: head
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(def)('def')
                      PsiWhiteSpace(' ')
                      PsiElement(identifier)('head')
                      Parameters
                        <empty list>
                      PsiElement(:)(':')
                      PsiWhiteSpace(' ')
                      SimpleType: H
                        CodeReferenceElement: H
                          PsiElement(identifier)('H')
                    PsiWhiteSpace('\n      ')
                    ScFunctionDeclaration: tail
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(def)('def')
                      PsiWhiteSpace(' ')
                      PsiElement(identifier)('tail')
                      Parameters
                        <empty list>
                      PsiElement(:)(':')
                      PsiWhiteSpace(' ')
                      SimpleType: T
                        CodeReferenceElement: T
                          PsiElement(identifier)('T')
                    PsiWhiteSpace('\n    ')
                    PsiElement(})('}')
              PsiWhiteSpace('\n\n    ')
              ScObject: KPCons
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(object)('object')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('KPCons')
                PsiWhiteSpace(' ')
                ExtendsBlock
                  ScTemplateBody
                    PsiElement({)('{')
                    PsiWhiteSpace('\n      ')
                    ScTypeAliasDefinition: Aux
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(type)('type')
                      PsiWhiteSpace(' ')
                      PsiElement(identifier)('Aux')
                      TypeParameterClause
                        PsiElement([)('[')
                        TypeParameter: M
                          PsiElement(identifier)('M')
                          PsiWhiteSpace(' ')
                          PsiElement(<:)('<:')
                          PsiWhiteSpace(' ')
                          SimpleType: AnyKind
                            CodeReferenceElement: AnyKind
                              PsiElement(identifier)('AnyKind')
                        PsiElement(,)(',')
                        PsiWhiteSpace(' ')
                        TypeParameter: T
                          PsiElement(identifier)('T')
                          PsiWhiteSpace(' ')
                          PsiElement(<:)('<:')
                          PsiWhiteSpace(' ')
                          SimpleType: KPList
                            CodeReferenceElement: KPList
                              PsiElement(identifier)('KPList')
                        PsiElement(,)(',')
                        PsiWhiteSpace(' ')
                        TypeParameter: H0
                          PsiElement(identifier)('H0')
                        PsiElement(,)(',')
                        PsiWhiteSpace(' ')
                        TypeParameter: HL0
                          PsiElement(identifier)('HL0')
                          PsiWhiteSpace(' ')
                          PsiElement(<:)('<:')
                          PsiWhiteSpace(' ')
                          SimpleType: HList
                            CodeReferenceElement: HList
                              PsiElement(identifier)('HList')
                        PsiElement(])(']')
                      PsiWhiteSpace(' ')
                      PsiElement(=)('=')
                      PsiWhiteSpace(' ')
                      CompoundType: KPCons[M, T] { type H = H0; type HL = HL0 }
                        ParametrizedType: KPCons[M, T]
                          SimpleType: KPCons
                            CodeReferenceElement: KPCons
                              PsiElement(identifier)('KPCons')
                          TypeArgumentsList
                            PsiElement([)('[')
                            SimpleType: M
                              CodeReferenceElement: M
                                PsiElement(identifier)('M')
                            PsiElement(,)(',')
                            PsiWhiteSpace(' ')
                            SimpleType: T
                              CodeReferenceElement: T
                                PsiElement(identifier)('T')
                            PsiElement(])(']')
                        PsiWhiteSpace(' ')
                        Refinement
                          PsiElement({)('{')
                          PsiWhiteSpace(' ')
                          ScTypeAliasDefinition: H
                            AnnotationsList
                              <empty list>
                            Modifiers
                              <empty list>
                            PsiElement(type)('type')
                            PsiWhiteSpace(' ')
                            PsiElement(identifier)('H')
                            PsiWhiteSpace(' ')
                            PsiElement(=)('=')
                            PsiWhiteSpace(' ')
                            SimpleType: H0
                              CodeReferenceElement: H0
                                PsiElement(identifier)('H0')
                          PsiElement(;)(';')
                          PsiWhiteSpace(' ')
                          ScTypeAliasDefinition: HL
                            AnnotationsList
                              <empty list>
                            Modifiers
                              <empty list>
                            PsiElement(type)('type')
                            PsiWhiteSpace(' ')
                            PsiElement(identifier)('HL')
                            PsiWhiteSpace(' ')
                            PsiElement(=)('=')
                            PsiWhiteSpace(' ')
                            SimpleType: HL0
                              CodeReferenceElement: HL0
                                PsiElement(identifier)('HL0')
                          PsiWhiteSpace(' ')
                          PsiElement(})('}')
                    PsiWhiteSpace('\n      ')
                    ScTrait: Apply
                      PsiComment(comment)('// Polymorphic')
                      PsiWhiteSpace('\n      ')
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(trait)('trait')
                      PsiWhiteSpace(' ')
                      PsiElement(identifier)('Apply')
                      TypeParameterClause
                        PsiElement([)('[')
                        TypeParameter: M
                          PsiElement(identifier)('M')
                          PsiWhiteSpace(' ')
                          PsiElement(<:)('<:')
                          PsiWhiteSpace(' ')
                          SimpleType: AnyKind
                            CodeReferenceElement: AnyKind
                              PsiElement(identifier)('AnyKind')
                        PsiElement(,)(',')
                        PsiWhiteSpace(' ')
                        TypeParameter: A
                          PsiElement(identifier)('A')
                          PsiWhiteSpace(' ')
                          PsiElement(<:)('<:')
                          PsiWhiteSpace(' ')
                          SimpleType: HList
                            CodeReferenceElement: HList
                              PsiElement(identifier)('HList')
                        PsiElement(])(']')
                      PsiWhiteSpace(' ')
                      ExtendsBlock
                        ScTemplateBody
                          PsiElement({)('{')
                          PsiWhiteSpace(' ')
                          ScTypeAliasDeclaration: Out
                            AnnotationsList
                              <empty list>
                            Modifiers
                              <empty list>
                            PsiElement(type)('type')
                            PsiWhiteSpace(' ')
                            PsiElement(identifier)('Out')
                          PsiWhiteSpace(' ')
                          PsiElement(})('}')
                    PsiWhiteSpace('\n      ')
                    ScObject: Apply
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(object)('object')
                      PsiWhiteSpace(' ')
                      PsiElement(identifier)('Apply')
                      PsiWhiteSpace(' ')
                      ExtendsBlock
                        ScTemplateBody
                          PsiElement({)('{')
                          PsiWhiteSpace('\n        ')
                          ScTypeAliasDefinition: Aux
                            AnnotationsList
                              <empty list>
                            Modifiers
                              <empty list>
                            PsiElement(type)('type')
                            PsiWhiteSpace(' ')
                            PsiElement(identifier)('Aux')
                            TypeParameterClause
                              PsiElement([)('[')
                              TypeParameter: M
                                PsiElement(identifier)('M')
                                PsiWhiteSpace(' ')
                                PsiElement(<:)('<:')
                                PsiWhiteSpace(' ')
                                SimpleType: AnyKind
                                  CodeReferenceElement: AnyKind
                                    PsiElement(identifier)('AnyKind')
                              PsiElement(,)(',')
                              PsiWhiteSpace(' ')
                              TypeParameter: A
                                PsiElement(identifier)('A')
                                PsiWhiteSpace(' ')
                                PsiElement(<:)('<:')
                                PsiWhiteSpace(' ')
                                SimpleType: HList
                                  CodeReferenceElement: HList
                                    PsiElement(identifier)('HList')
                              PsiElement(,)(',')
                              PsiWhiteSpace(' ')
                              TypeParameter: Out0
                                PsiElement(identifier)('Out0')
                              PsiElement(])(']')
                            PsiWhiteSpace(' ')
                            PsiElement(=)('=')
                            PsiWhiteSpace(' ')
                            CompoundType: Apply[M, A] { type Out = Out0 }
                              ParametrizedType: Apply[M, A]
                                SimpleType: Apply
                                  CodeReferenceElement: Apply
                                    PsiElement(identifier)('Apply')
                                TypeArgumentsList
                                  PsiElement([)('[')
                                  SimpleType: M
                                    CodeReferenceElement: M
                                      PsiElement(identifier)('M')
                                  PsiElement(,)(',')
                                  PsiWhiteSpace(' ')
                                  SimpleType: A
                                    CodeReferenceElement: A
                                      PsiElement(identifier)('A')
                                  PsiElement(])(']')
                              PsiWhiteSpace(' ')
                              Refinement
                                PsiElement({)('{')
                                PsiWhiteSpace(' ')
                                ScTypeAliasDefinition: Out
                                  AnnotationsList
                                    <empty list>
                                  Modifiers
                                    <empty list>
                                  PsiElement(type)('type')
                                  PsiWhiteSpace(' ')
                                  PsiElement(identifier)('Out')
                                  PsiWhiteSpace(' ')
                                  PsiElement(=)('=')
                                  PsiWhiteSpace(' ')
                                  SimpleType: Out0
                                    CodeReferenceElement: Out0
                                      PsiElement(identifier)('Out0')
                                PsiWhiteSpace(' ')
                                PsiElement(})('}')
                          PsiWhiteSpace('\n        ')
                          ScFunctionDefinition: apply0
                            AnnotationsList
                              <empty list>
                            Modifiers
                              PsiElement(implicit)('implicit')
                            PsiWhiteSpace(' ')
                            PsiElement(def)('def')
                            PsiWhiteSpace(' ')
                            PsiElement(identifier)('apply0')
                            TypeParameterClause
                              PsiElement([)('[')
                              TypeParameter: M
                                PsiElement(identifier)('M')
                              PsiElement(])(']')
                            Parameters
                              <empty list>
                            PsiElement(:)(':')
                            PsiWhiteSpace(' ')
                            ParametrizedType: Aux[M, HNil, M]
                              SimpleType: Aux
                                CodeReferenceElement: Aux
                                  PsiElement(identifier)('Aux')
                              TypeArgumentsList
                                PsiElement([)('[')
                                SimpleType: M
                                  CodeReferenceElement: M
                                    PsiElement(identifier)('M')
                                PsiElement(,)(',')
                                PsiWhiteSpace(' ')
                                SimpleType: HNil
                                  CodeReferenceElement: HNil
                                    PsiElement(identifier)('HNil')
                                PsiElement(,)(',')
                                PsiWhiteSpace(' ')
                                SimpleType: M
                                  CodeReferenceElement: M
                                    PsiElement(identifier)('M')
                                PsiElement(])(']')
                            PsiWhiteSpace(' ')
                            PsiElement(=)('=')
                            PsiWhiteSpace(' ')
                            ScNewTemplateDefinition: <anonymous>
                              PsiElement(new)('new')
                              PsiWhiteSpace(' ')
                              ExtendsBlock
                                TemplateParents
                                  ConstructorInvocation
                                    ParametrizedType: Apply[M, HNil]
                                      SimpleType: Apply
                                        CodeReferenceElement: Apply
                                          PsiElement(identifier)('Apply')
                                      TypeArgumentsList
                                        PsiElement([)('[')
                                        SimpleType: M
                                          CodeReferenceElement: M
                                            PsiElement(identifier)('M')
                                        PsiElement(,)(',')
                                        PsiWhiteSpace(' ')
                                        SimpleType: HNil
                                          CodeReferenceElement: HNil
                                            PsiElement(identifier)('HNil')
                                        PsiElement(])(']')
                                PsiWhiteSpace(' ')
                                ScTemplateBody
                                  PsiElement({)('{')
                                  PsiWhiteSpace(' ')
                                  ScTypeAliasDefinition: Out
                                    AnnotationsList
                                      <empty list>
                                    Modifiers
                                      <empty list>
                                    PsiElement(type)('type')
                                    PsiWhiteSpace(' ')
                                    PsiElement(identifier)('Out')
                                    PsiWhiteSpace(' ')
                                    PsiElement(=)('=')
                                    PsiWhiteSpace(' ')
                                    SimpleType: M
                                      CodeReferenceElement: M
                                        PsiElement(identifier)('M')
                                  PsiWhiteSpace(' ')
                                  PsiElement(})('}')
                          PsiWhiteSpace('\n        ')
                          ScFunctionDefinition: apply1
                            AnnotationsList
                              <empty list>
                            Modifiers
                              PsiElement(implicit)('implicit')
                            PsiWhiteSpace(' ')
                            PsiElement(def)('def')
                            PsiWhiteSpace(' ')
                            PsiElement(identifier)('apply1')
                            TypeParameterClause
                              PsiElement([)('[')
                              TypeParameter: M
                                PsiElement(identifier)('M')
                                TypeParameterClause
                                  PsiElement([)('[')
                                  TypeParameter: _
                                    PsiElement(_)('_')
                                  PsiElement(])(']')
                              PsiElement(,)(',')
                              PsiWhiteSpace(' ')
                              TypeParameter: A
                                PsiElement(identifier)('A')
                              PsiElement(])(']')
                            Parameters
                              <empty list>
                            PsiElement(:)(':')
                            PsiWhiteSpace(' ')
                            ParametrizedType: Aux[M, A :: HNil, M[A]]
                              SimpleType: Aux
                                CodeReferenceElement: Aux
                                  PsiElement(identifier)('Aux')
                              TypeArgumentsList
                                PsiElement([)('[')
                                SimpleType: M
                                  CodeReferenceElement: M
                                    PsiElement(identifier)('M')
                                PsiElement(,)(',')
                                PsiWhiteSpace(' ')
                                InfixType: A :: HNil
                                  SimpleType: A
                                    CodeReferenceElement: A
                                      PsiElement(identifier)('A')
                                  PsiWhiteSpace(' ')
                                  CodeReferenceElement: ::
                                    PsiElement(identifier)('::')
                                  PsiWhiteSpace(' ')
                                  SimpleType: HNil
                                    CodeReferenceElement: HNil
                                      PsiElement(identifier)('HNil')
                                PsiElement(,)(',')
                                PsiWhiteSpace(' ')
                                ParametrizedType: M[A]
                                  SimpleType: M
                                    CodeReferenceElement: M
                                      PsiElement(identifier)('M')
                                  TypeArgumentsList
                                    PsiElement([)('[')
                                    SimpleType: A
                                      CodeReferenceElement: A
                                        PsiElement(identifier)('A')
                                    PsiElement(])(']')
                                PsiElement(])(']')
                            PsiWhiteSpace(' ')
                            PsiElement(=)('=')
                            PsiWhiteSpace(' ')
                            ScNewTemplateDefinition: <anonymous>
                              PsiElement(new)('new')
                              PsiWhiteSpace(' ')
                              ExtendsBlock
                                TemplateParents
                                  ConstructorInvocation
                                    ParametrizedType: Apply[M, A :: HNil]
                                      SimpleType: Apply
                                        CodeReferenceElement: Apply
                                          PsiElement(identifier)('Apply')
                                      TypeArgumentsList
                                        PsiElement([)('[')
                                        SimpleType: M
                                          CodeReferenceElement: M
                                            PsiElement(identifier)('M')
                                        PsiElement(,)(',')
                                        PsiWhiteSpace(' ')
                                        InfixType: A :: HNil
                                          SimpleType: A
                                            CodeReferenceElement: A
                                              PsiElement(identifier)('A')
                                          PsiWhiteSpace(' ')
                                          CodeReferenceElement: ::
                                            PsiElement(identifier)('::')
                                          PsiWhiteSpace(' ')
                                          SimpleType: HNil
                                            CodeReferenceElement: HNil
                                              PsiElement(identifier)('HNil')
                                        PsiElement(])(']')
                                PsiWhiteSpace(' ')
                                ScTemplateBody
                                  PsiElement({)('{')
                                  PsiWhiteSpace(' ')
                                  ScTypeAliasDefinition: Out
                                    AnnotationsList
                                      <empty list>
                                    Modifiers
                                      <empty list>
                                    PsiElement(type)('type')
                                    PsiWhiteSpace(' ')
                                    PsiElement(identifier)('Out')
                                    PsiWhiteSpace(' ')
                                    PsiElement(=)('=')
                                    PsiWhiteSpace(' ')
                                    ParametrizedType: M[A]
                                      SimpleType: M
                                        CodeReferenceElement: M
                                          PsiElement(identifier)('M')
                                      TypeArgumentsList
                                        PsiElement([)('[')
                                        SimpleType: A
                                          CodeReferenceElement: A
                                            PsiElement(identifier)('A')
                                        PsiElement(])(']')
                                  PsiWhiteSpace(' ')
                                  PsiElement(})('}')
                          PsiWhiteSpace('\n        ')
                          ScFunctionDefinition: apply2
                            AnnotationsList
                              <empty list>
                            Modifiers
                              PsiElement(implicit)('implicit')
                            PsiWhiteSpace(' ')
                            PsiElement(def)('def')
                            PsiWhiteSpace(' ')
                            PsiElement(identifier)('apply2')
                            TypeParameterClause
                              PsiElement([)('[')
                              TypeParameter: M
                                PsiElement(identifier)('M')
                                TypeParameterClause
                                  PsiElement([)('[')
                                  TypeParameter: _
                                    PsiElement(_)('_')
                                  PsiElement(,)(',')
                                  PsiWhiteSpace(' ')
                                  TypeParameter: _
                                    PsiElement(_)('_')
                                  PsiElement(])(']')
                              PsiElement(,)(',')
                              PsiWhiteSpace(' ')
                              TypeParameter: A
                                PsiElement(identifier)('A')
                              PsiElement(,)(',')
                              PsiWhiteSpace(' ')
                              TypeParameter: B
                                PsiElement(identifier)('B')
                              PsiElement(])(']')
                            Parameters
                              <empty list>
                            PsiElement(:)(':')
                            PsiWhiteSpace(' ')
                            ParametrizedType: Aux[M, A :: B :: HNil, M[A, B]]
                              SimpleType: Aux
                                CodeReferenceElement: Aux
                                  PsiElement(identifier)('Aux')
                              TypeArgumentsList
                                PsiElement([)('[')
                                SimpleType: M
                                  CodeReferenceElement: M
                                    PsiElement(identifier)('M')
                                PsiElement(,)(',')
                                PsiWhiteSpace(' ')
                                InfixType: A :: B :: HNil
                                  SimpleType: A
                                    CodeReferenceElement: A
                                      PsiElement(identifier)('A')
                                  PsiWhiteSpace(' ')
                                  CodeReferenceElement: ::
                                    PsiElement(identifier)('::')
                                  PsiWhiteSpace(' ')
                                  InfixType: B :: HNil
                                    SimpleType: B
                                      CodeReferenceElement: B
                                        PsiElement(identifier)('B')
                                    PsiWhiteSpace(' ')
                                    CodeReferenceElement: ::
                                      PsiElement(identifier)('::')
                                    PsiWhiteSpace(' ')
                                    SimpleType: HNil
                                      CodeReferenceElement: HNil
                                        PsiElement(identifier)('HNil')
                                PsiElement(,)(',')
                                PsiWhiteSpace(' ')
                                ParametrizedType: M[A, B]
                                  SimpleType: M
                                    CodeReferenceElement: M
                                      PsiElement(identifier)('M')
                                  TypeArgumentsList
                                    PsiElement([)('[')
                                    SimpleType: A
                                      CodeReferenceElement: A
                                        PsiElement(identifier)('A')
                                    PsiElement(,)(',')
                                    PsiWhiteSpace(' ')
                                    SimpleType: B
                                      CodeReferenceElement: B
                                        PsiElement(identifier)('B')
                                    PsiElement(])(']')
                                PsiElement(])(']')
                            PsiWhiteSpace(' ')
                            PsiElement(=)('=')
                            PsiWhiteSpace(' ')
                            ScNewTemplateDefinition: <anonymous>
                              PsiElement(new)('new')
                              PsiWhiteSpace(' ')
                              ExtendsBlock
                                TemplateParents
                                  ConstructorInvocation
                                    ParametrizedType: Apply[M, A :: B :: HNil]
                                      SimpleType: Apply
                                        CodeReferenceElement: Apply
                                          PsiElement(identifier)('Apply')
                                      TypeArgumentsList
                                        PsiElement([)('[')
                                        SimpleType: M
                                          CodeReferenceElement: M
                                            PsiElement(identifier)('M')
                                        PsiElement(,)(',')
                                        PsiWhiteSpace(' ')
                                        InfixType: A :: B :: HNil
                                          SimpleType: A
                                            CodeReferenceElement: A
                                              PsiElement(identifier)('A')
                                          PsiWhiteSpace(' ')
                                          CodeReferenceElement: ::
                                            PsiElement(identifier)('::')
                                          PsiWhiteSpace(' ')
                                          InfixType: B :: HNil
                                            SimpleType: B
                                              CodeReferenceElement: B
                                                PsiElement(identifier)('B')
                                            PsiWhiteSpace(' ')
                                            CodeReferenceElement: ::
                                              PsiElement(identifier)('::')
                                            PsiWhiteSpace(' ')
                                            SimpleType: HNil
                                              CodeReferenceElement: HNil
                                                PsiElement(identifier)('HNil')
                                        PsiElement(])(']')
                                PsiWhiteSpace(' ')
                                ScTemplateBody
                                  PsiElement({)('{')
                                  PsiWhiteSpace(' ')
                                  ScTypeAliasDefinition: Out
                                    AnnotationsList
                                      <empty list>
                                    Modifiers
                                      <empty list>
                                    PsiElement(type)('type')
                                    PsiWhiteSpace(' ')
                                    PsiElement(identifier)('Out')
                                    PsiWhiteSpace(' ')
                                    PsiElement(=)('=')
                                    PsiWhiteSpace(' ')
                                    ParametrizedType: M[A, B]
                                      SimpleType: M
                                        CodeReferenceElement: M
                                          PsiElement(identifier)('M')
                                      TypeArgumentsList
                                        PsiElement([)('[')
                                        SimpleType: A
                                          CodeReferenceElement: A
                                            PsiElement(identifier)('A')
                                        PsiElement(,)(',')
                                        PsiWhiteSpace(' ')
                                        SimpleType: B
                                          CodeReferenceElement: B
                                            PsiElement(identifier)('B')
                                        PsiElement(])(']')
                                  PsiWhiteSpace(' ')
                                  PsiElement(})('}')
                          PsiWhiteSpace('\n      ')
                          PsiElement(})('}')
                    PsiWhiteSpace('\n\n      ')
                    ScTrait: Unapply
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(trait)('trait')
                      PsiWhiteSpace(' ')
                      PsiElement(identifier)('Unapply')
                      TypeParameterClause
                        PsiElement([)('[')
                        TypeParameter: M
                          PsiElement(identifier)('M')
                          PsiWhiteSpace(' ')
                          PsiElement(<:)('<:')
                          PsiWhiteSpace(' ')
                          SimpleType: AnyKind
                            CodeReferenceElement: AnyKind
                              PsiElement(identifier)('AnyKind')
                        PsiElement(,)(',')
                        PsiWhiteSpace(' ')
                        TypeParameter: O
                          PsiElement(identifier)('O')
                        PsiElement(])(']')
                      PsiWhiteSpace(' ')
                      ExtendsBlock
                        ScTemplateBody
                          PsiElement({)('{')
                          PsiWhiteSpace(' ')
                          ScTypeAliasDeclaration: Out
                            AnnotationsList
                              <empty list>
                            Modifiers
                              <empty list>
                            PsiElement(type)('type')
                            PsiWhiteSpace(' ')
                            PsiElement(identifier)('Out')
                            PsiWhiteSpace(' ')
                            PsiElement(<:)('<:')
                            PsiWhiteSpace(' ')
                            SimpleType: HList
                              CodeReferenceElement: HList
                                PsiElement(identifier)('HList')
                          PsiWhiteSpace(' ')
                          PsiElement(})('}')
                    PsiWhiteSpace('\n      ')
                    ScObject: Unapply
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(object)('object')
                      PsiWhiteSpace(' ')
                      PsiElement(identifier)('Unapply')
                      PsiWhiteSpace(' ')
                      ExtendsBlock
                        ScTemplateBody
                          PsiElement({)('{')
                          PsiWhiteSpace('\n        ')
                          ScTypeAliasDefinition: Aux
                            AnnotationsList
                              <empty list>
                            Modifiers
                              <empty list>
                            PsiElement(type)('type')
                            PsiWhiteSpace(' ')
                            PsiElement(identifier)('Aux')
                            TypeParameterClause
                              PsiElement([)('[')
                              TypeParameter: M
                                PsiElement(identifier)('M')
                                PsiWhiteSpace(' ')
                                PsiElement(<:)('<:')
                                PsiWhiteSpace(' ')
                                SimpleType: AnyKind
                                  CodeReferenceElement: AnyKind
                                    PsiElement(identifier)('AnyKind')
                              PsiElement(,)(',')
                              PsiWhiteSpace(' ')
                              TypeParameter: O
                                PsiElement(identifier)('O')
                              PsiElement(,)(',')
                              PsiWhiteSpace(' ')
                              TypeParameter: Out0
                                PsiElement(identifier)('Out0')
                                PsiWhiteSpace(' ')
                                PsiElement(<:)('<:')
                                PsiWhiteSpace(' ')
                                SimpleType: HList
                                  CodeReferenceElement: HList
                                    PsiElement(identifier)('HList')
                              PsiElement(])(']')
                            PsiWhiteSpace(' ')
                            PsiElement(=)('=')
                            PsiWhiteSpace(' ')
                            CompoundType: Unapply[M, O] { type Out = Out0 }
                              ParametrizedType: Unapply[M, O]
                                SimpleType: Unapply
                                  CodeReferenceElement: Unapply
                                    PsiElement(identifier)('Unapply')
                                TypeArgumentsList
                                  PsiElement([)('[')
                                  SimpleType: M
                                    CodeReferenceElement: M
                                      PsiElement(identifier)('M')
                                  PsiElement(,)(',')
                                  PsiWhiteSpace(' ')
                                  SimpleType: O
                                    CodeReferenceElement: O
                                      PsiElement(identifier)('O')
                                  PsiElement(])(']')
                              PsiWhiteSpace(' ')
                              Refinement
                                PsiElement({)('{')
                                PsiWhiteSpace(' ')
                                ScTypeAliasDefinition: Out
                                  AnnotationsList
                                    <empty list>
                                  Modifiers
                                    <empty list>
                                  PsiElement(type)('type')
                                  PsiWhiteSpace(' ')
                                  PsiElement(identifier)('Out')
                                  PsiWhiteSpace(' ')
                                  PsiElement(=)('=')
                                  PsiWhiteSpace(' ')
                                  SimpleType: Out0
                                    CodeReferenceElement: Out0
                                      PsiElement(identifier)('Out0')
                                PsiWhiteSpace(' ')
                                PsiElement(})('}')
                          PsiWhiteSpace('\n\n        ')
                          ScFunctionDefinition: unapply0
                            AnnotationsList
                              <empty list>
                            Modifiers
                              PsiElement(implicit)('implicit')
                            PsiWhiteSpace(' ')
                            PsiElement(def)('def')
                            PsiWhiteSpace(' ')
                            PsiElement(identifier)('unapply0')
                            TypeParameterClause
                              PsiElement([)('[')
                              TypeParameter: M
                                PsiElement(identifier)('M')
                              PsiElement(])(']')
                            Parameters
                              <empty list>
                            PsiElement(:)(':')
                            PsiWhiteSpace(' ')
                            ParametrizedType: Aux[M, M, HNil]
                              SimpleType: Aux
                                CodeReferenceElement: Aux
                                  PsiElement(identifier)('Aux')
                              TypeArgumentsList
                                PsiElement([)('[')
                                SimpleType: M
                                  CodeReferenceElement: M
                                    PsiElement(identifier)('M')
                                PsiElement(,)(',')
                                PsiWhiteSpace(' ')
                                SimpleType: M
                                  CodeReferenceElement: M
                                    PsiElement(identifier)('M')
                                PsiElement(,)(',')
                                PsiWhiteSpace(' ')
                                SimpleType: HNil
                                  CodeReferenceElement: HNil
                                    PsiElement(identifier)('HNil')
                                PsiElement(])(']')
                            PsiWhiteSpace(' ')
                            PsiElement(=)('=')
                            PsiWhiteSpace(' ')
                            ScNewTemplateDefinition: <anonymous>
                              PsiElement(new)('new')
                              PsiWhiteSpace(' ')
                              ExtendsBlock
                                TemplateParents
                                  ConstructorInvocation
                                    ParametrizedType: Unapply[M, M]
                                      SimpleType: Unapply
                                        CodeReferenceElement: Unapply
                                          PsiElement(identifier)('Unapply')
                                      TypeArgumentsList
                                        PsiElement([)('[')
                                        SimpleType: M
                                          CodeReferenceElement: M
                                            PsiElement(identifier)('M')
                                        PsiElement(,)(',')
                                        PsiWhiteSpace(' ')
                                        SimpleType: M
                                          CodeReferenceElement: M
                                            PsiElement(identifier)('M')
                                        PsiElement(])(']')
                                PsiWhiteSpace(' ')
                                ScTemplateBody
                                  PsiElement({)('{')
                                  PsiWhiteSpace(' ')
                                  ScTypeAliasDefinition: Out
                                    AnnotationsList
                                      <empty list>
                                    Modifiers
                                      <empty list>
                                    PsiElement(type)('type')
                                    PsiWhiteSpace(' ')
                                    PsiElement(identifier)('Out')
                                    PsiWhiteSpace(' ')
                                    PsiElement(=)('=')
                                    PsiWhiteSpace(' ')
                                    SimpleType: HNil
                                      CodeReferenceElement: HNil
                                        PsiElement(identifier)('HNil')
                                  PsiWhiteSpace(' ')
                                  PsiElement(})('}')
                          PsiWhiteSpace('\n        ')
                          ScFunctionDefinition: unapply1
                            AnnotationsList
                              <empty list>
                            Modifiers
                              PsiElement(implicit)('implicit')
                            PsiWhiteSpace(' ')
                            PsiElement(def)('def')
                            PsiWhiteSpace(' ')
                            PsiElement(identifier)('unapply1')
                            TypeParameterClause
                              PsiElement([)('[')
                              TypeParameter: M
                                PsiElement(identifier)('M')
                                TypeParameterClause
                                  PsiElement([)('[')
                                  TypeParameter: _
                                    PsiElement(_)('_')
                                  PsiElement(])(']')
                              PsiElement(,)(',')
                              PsiWhiteSpace(' ')
                              TypeParameter: A0
                                PsiElement(identifier)('A0')
                              PsiElement(])(']')
                            Parameters
                              <empty list>
                            PsiElement(:)(':')
                            PsiWhiteSpace(' ')
                            ParametrizedType: Unapply.Aux[M, M[A0], A0 :: HNil]
                              SimpleType: Unapply.Aux
                                CodeReferenceElement: Unapply.Aux
                                  CodeReferenceElement: Unapply
                                    PsiElement(identifier)('Unapply')
                                  PsiElement(.)('.')
                                  PsiElement(identifier)('Aux')
                              TypeArgumentsList
                                PsiElement([)('[')
                                SimpleType: M
                                  CodeReferenceElement: M
                                    PsiElement(identifier)('M')
                                PsiElement(,)(',')
                                PsiWhiteSpace(' ')
                                ParametrizedType: M[A0]
                                  SimpleType: M
                                    CodeReferenceElement: M
                                      PsiElement(identifier)('M')
                                  TypeArgumentsList
                                    PsiElement([)('[')
                                    SimpleType: A0
                                      CodeReferenceElement: A0
                                        PsiElement(identifier)('A0')
                                    PsiElement(])(']')
                                PsiElement(,)(',')
                                PsiWhiteSpace(' ')
                                InfixType: A0 :: HNil
                                  SimpleType: A0
                                    CodeReferenceElement: A0
                                      PsiElement(identifier)('A0')
                                  PsiWhiteSpace(' ')
                                  CodeReferenceElement: ::
                                    PsiElement(identifier)('::')
                                  PsiWhiteSpace(' ')
                                  SimpleType: HNil
                                    CodeReferenceElement: HNil
                                      PsiElement(identifier)('HNil')
                                PsiElement(])(']')
                            PsiWhiteSpace(' ')
                            PsiElement(=)('=')
                            PsiWhiteSpace(' ')
                            ScNewTemplateDefinition: <anonymous>
                              PsiElement(new)('new')
                              PsiWhiteSpace(' ')
                              ExtendsBlock
                                TemplateParents
                                  ConstructorInvocation
                                    ParametrizedType: Unapply[M, M[A0]]
                                      SimpleType: Unapply
                                        CodeReferenceElement: Unapply
                                          PsiElement(identifier)('Unapply')
                                      TypeArgumentsList
                                        PsiElement([)('[')
                                        SimpleType: M
                                          CodeReferenceElement: M
                                            PsiElement(identifier)('M')
                                        PsiElement(,)(',')
                                        PsiWhiteSpace(' ')
                                        ParametrizedType: M[A0]
                                          SimpleType: M
                                            CodeReferenceElement: M
                                              PsiElement(identifier)('M')
                                          TypeArgumentsList
                                            PsiElement([)('[')
                                            SimpleType: A0
                                              CodeReferenceElement: A0
                                                PsiElement(identifier)('A0')
                                            PsiElement(])(']')
                                        PsiElement(])(']')
                                PsiWhiteSpace(' ')
                                ScTemplateBody
                                  PsiElement({)('{')
                                  PsiWhiteSpace(' ')
                                  ScTypeAliasDefinition: Out
                                    AnnotationsList
                                      <empty list>
                                    Modifiers
                                      <empty list>
                                    PsiElement(type)('type')
                                    PsiWhiteSpace(' ')
                                    PsiElement(identifier)('Out')
                                    PsiWhiteSpace(' ')
                                    PsiElement(=)('=')
                                    PsiWhiteSpace(' ')
                                    InfixType: A0 :: HNil
                                      SimpleType: A0
                                        CodeReferenceElement: A0
                                          PsiElement(identifier)('A0')
                                      PsiWhiteSpace(' ')
                                      CodeReferenceElement: ::
                                        PsiElement(identifier)('::')
                                      PsiWhiteSpace(' ')
                                      SimpleType: HNil
                                        CodeReferenceElement: HNil
                                          PsiElement(identifier)('HNil')
                                  PsiWhiteSpace(' ')
                                  PsiElement(})('}')
                          PsiWhiteSpace('\n        ')
                          ScFunctionDefinition: unapply2
                            AnnotationsList
                              <empty list>
                            Modifiers
                              PsiElement(implicit)('implicit')
                            PsiWhiteSpace(' ')
                            PsiElement(def)('def')
                            PsiWhiteSpace(' ')
                            PsiElement(identifier)('unapply2')
                            TypeParameterClause
                              PsiElement([)('[')
                              TypeParameter: M
                                PsiElement(identifier)('M')
                                TypeParameterClause
                                  PsiElement([)('[')
                                  TypeParameter: _
                                    PsiElement(_)('_')
                                  PsiElement(,)(',')
                                  PsiWhiteSpace(' ')
                                  TypeParameter: _
                                    PsiElement(_)('_')
                                  PsiElement(])(']')
                              PsiElement(,)(',')
                              PsiWhiteSpace(' ')
                              TypeParameter: A0
                                PsiElement(identifier)('A0')
                              PsiElement(,)(',')
                              PsiWhiteSpace(' ')
                              TypeParameter: B0
                                PsiElement(identifier)('B0')
                              PsiElement(])(']')
                            Parameters
                              <empty list>
                            PsiElement(:)(':')
                            PsiWhiteSpace(' ')
                            ParametrizedType: Aux[M, M[A0, B0], A0 :: B0 :: HNil]
                              SimpleType: Aux
                                CodeReferenceElement: Aux
                                  PsiElement(identifier)('Aux')
                              TypeArgumentsList
                                PsiElement([)('[')
                                SimpleType: M
                                  CodeReferenceElement: M
                                    PsiElement(identifier)('M')
                                PsiElement(,)(',')
                                PsiWhiteSpace(' ')
                                ParametrizedType: M[A0, B0]
                                  SimpleType: M
                                    CodeReferenceElement: M
                                      PsiElement(identifier)('M')
                                  TypeArgumentsList
                                    PsiElement([)('[')
                                    SimpleType: A0
                                      CodeReferenceElement: A0
                                        PsiElement(identifier)('A0')
                                    PsiElement(,)(',')
                                    PsiWhiteSpace(' ')
                                    SimpleType: B0
                                      CodeReferenceElement: B0
                                        PsiElement(identifier)('B0')
                                    PsiElement(])(']')
                                PsiElement(,)(',')
                                PsiWhiteSpace(' ')
                                InfixType: A0 :: B0 :: HNil
                                  SimpleType: A0
                                    CodeReferenceElement: A0
                                      PsiElement(identifier)('A0')
                                  PsiWhiteSpace(' ')
                                  CodeReferenceElement: ::
                                    PsiElement(identifier)('::')
                                  PsiWhiteSpace(' ')
                                  InfixType: B0 :: HNil
                                    SimpleType: B0
                                      CodeReferenceElement: B0
                                        PsiElement(identifier)('B0')
                                    PsiWhiteSpace(' ')
                                    CodeReferenceElement: ::
                                      PsiElement(identifier)('::')
                                    PsiWhiteSpace(' ')
                                    SimpleType: HNil
                                      CodeReferenceElement: HNil
                                        PsiElement(identifier)('HNil')
                                PsiElement(])(']')
                            PsiWhiteSpace(' ')
                            PsiElement(=)('=')
                            PsiWhiteSpace(' ')
                            ScNewTemplateDefinition: <anonymous>
                              PsiElement(new)('new')
                              PsiWhiteSpace(' ')
                              ExtendsBlock
                                TemplateParents
                                  ConstructorInvocation
                                    ParametrizedType: Unapply[M, M[A0, B0]]
                                      SimpleType: Unapply
                                        CodeReferenceElement: Unapply
                                          PsiElement(identifier)('Unapply')
                                      TypeArgumentsList
                                        PsiElement([)('[')
                                        SimpleType: M
                                          CodeReferenceElement: M
                                            PsiElement(identifier)('M')
                                        PsiElement(,)(',')
                                        PsiWhiteSpace(' ')
                                        ParametrizedType: M[A0, B0]
                                          SimpleType: M
                                            CodeReferenceElement: M
                                              PsiElement(identifier)('M')
                                          TypeArgumentsList
                                            PsiElement([)('[')
                                            SimpleType: A0
                                              CodeReferenceElement: A0
                                                PsiElement(identifier)('A0')
                                            PsiElement(,)(',')
                                            PsiWhiteSpace(' ')
                                            SimpleType: B0
                                              CodeReferenceElement: B0
                                                PsiElement(identifier)('B0')
                                            PsiElement(])(']')
                                        PsiElement(])(']')
                                PsiWhiteSpace(' ')
                                ScTemplateBody
                                  PsiElement({)('{')
                                  PsiWhiteSpace(' ')
                                  ScTypeAliasDefinition: Out
                                    AnnotationsList
                                      <empty list>
                                    Modifiers
                                      <empty list>
                                    PsiElement(type)('type')
                                    PsiWhiteSpace(' ')
                                    PsiElement(identifier)('Out')
                                    PsiWhiteSpace(' ')
                                    PsiElement(=)('=')
                                    PsiWhiteSpace(' ')
                                    InfixType: A0 :: B0 :: HNil
                                      SimpleType: A0
                                        CodeReferenceElement: A0
                                          PsiElement(identifier)('A0')
                                      PsiWhiteSpace(' ')
                                      CodeReferenceElement: ::
                                        PsiElement(identifier)('::')
                                      PsiWhiteSpace(' ')
                                      InfixType: B0 :: HNil
                                        SimpleType: B0
                                          CodeReferenceElement: B0
                                            PsiElement(identifier)('B0')
                                        PsiWhiteSpace(' ')
                                        CodeReferenceElement: ::
                                          PsiElement(identifier)('::')
                                        PsiWhiteSpace(' ')
                                        SimpleType: HNil
                                          CodeReferenceElement: HNil
                                            PsiElement(identifier)('HNil')
                                  PsiWhiteSpace(' ')
                                  PsiElement(})('}')
                          PsiWhiteSpace('\n      ')
                          PsiElement(})('}')
                    PsiWhiteSpace('\n\n      ')
                    ScTrait: KPConsBuilder
                      PsiComment(comment)('// the list builder')
                      PsiWhiteSpace('\n      ')
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(trait)('trait')
                      PsiWhiteSpace(' ')
                      PsiElement(identifier)('KPConsBuilder')
                      TypeParameterClause
                        PsiElement([)('[')
                        TypeParameter: M
                          PsiElement(identifier)('M')
                          PsiWhiteSpace(' ')
                          PsiElement(<:)('<:')
                          PsiWhiteSpace(' ')
                          SimpleType: AnyKind
                            CodeReferenceElement: AnyKind
                              PsiElement(identifier)('AnyKind')
                        PsiElement(])(']')
                      PsiWhiteSpace(' ')
                      ExtendsBlock
                        ScTemplateBody
                          PsiElement({)('{')
                          PsiWhiteSpace('\n        ')
                          ScFunctionDefinition: apply
                            AnnotationsList
                              <empty list>
                            Modifiers
                              <empty list>
                            PsiElement(def)('def')
                            PsiWhiteSpace(' ')
                            PsiElement(identifier)('apply')
                            TypeParameterClause
                              PsiElement([)('[')
                              TypeParameter: H0
                                PsiElement(identifier)('H0')
                              PsiElement(,)(',')
                              PsiWhiteSpace(' ')
                              TypeParameter: HL0
                                PsiElement(identifier)('HL0')
                                PsiWhiteSpace(' ')
                                PsiElement(<:)('<:')
                                PsiWhiteSpace(' ')
                                SimpleType: HList
                                  CodeReferenceElement: HList
                                    PsiElement(identifier)('HList')
                              PsiElement(,)(',')
                              PsiWhiteSpace(' ')
                              TypeParameter: T
                                PsiElement(identifier)('T')
                                PsiWhiteSpace(' ')
                                PsiElement(<:)('<:')
                                PsiWhiteSpace(' ')
                                SimpleType: KPList
                                  CodeReferenceElement: KPList
                                    PsiElement(identifier)('KPList')
                              PsiElement(])(']')
                            Parameters
                              ParametersClause
                                PsiElement(()('(')
                                Parameter: head0
                                  AnnotationsList
                                    <empty list>
                                  Modifiers
                                    <empty list>
                                  PsiElement(identifier)('head0')
                                  PsiElement(:)(':')
                                  PsiWhiteSpace(' ')
                                  ParameterType
                                    SimpleType: H0
                                      CodeReferenceElement: H0
                                        PsiElement(identifier)('H0')
                                PsiElement(,)(',')
                                PsiWhiteSpace(' ')
                                Parameter: tail0
                                  AnnotationsList
                                    <empty list>
                                  Modifiers
                                    <empty list>
                                  PsiElement(identifier)('tail0')
                                  PsiElement(:)(':')
                                  PsiWhiteSpace(' ')
                                  ParameterType
                                    SimpleType: T
                                      CodeReferenceElement: T
                                        PsiElement(identifier)('T')
                                PsiElement())(')')
                              ParametersClause
                                PsiElement(()('(')
                                PsiElement(implicit)('implicit')
                                PsiWhiteSpace(' ')
                                Parameter: unap
                                  AnnotationsList
                                    <empty list>
                                  Modifiers
                                    <empty list>
                                  PsiElement(identifier)('unap')
                                  PsiElement(:)(':')
                                  PsiWhiteSpace(' ')
                                  ParameterType
                                    ParametrizedType: Unapply.Aux[M, H0, HL0]
                                      SimpleType: Unapply.Aux
                                        CodeReferenceElement: Unapply.Aux
                                          CodeReferenceElement: Unapply
                                            PsiElement(identifier)('Unapply')
                                          PsiElement(.)('.')
                                          PsiElement(identifier)('Aux')
                                      TypeArgumentsList
                                        PsiElement([)('[')
                                        SimpleType: M
                                          CodeReferenceElement: M
                                            PsiElement(identifier)('M')
                                        PsiElement(,)(',')
                                        PsiWhiteSpace(' ')
                                        SimpleType: H0
                                          CodeReferenceElement: H0
                                            PsiElement(identifier)('H0')
                                        PsiElement(,)(',')
                                        PsiWhiteSpace(' ')
                                        SimpleType: HL0
                                          CodeReferenceElement: HL0
                                            PsiElement(identifier)('HL0')
                                        PsiElement(])(']')
                                PsiElement())(')')
                            PsiElement(:)(':')
                            PsiWhiteSpace(' ')
                            ParametrizedType: KPCons.Aux[M, T, H0, HL0]
                              SimpleType: KPCons.Aux
                                CodeReferenceElement: KPCons.Aux
                                  CodeReferenceElement: KPCons
                                    PsiElement(identifier)('KPCons')
                                  PsiElement(.)('.')
                                  PsiElement(identifier)('Aux')
                              TypeArgumentsList
                                PsiElement([)('[')
                                SimpleType: M
                                  CodeReferenceElement: M
                                    PsiElement(identifier)('M')
                                PsiElement(,)(',')
                                PsiWhiteSpace(' ')
                                SimpleType: T
                                  CodeReferenceElement: T
                                    PsiElement(identifier)('T')
                                PsiElement(,)(',')
                                PsiWhiteSpace(' ')
                                SimpleType: H0
                                  CodeReferenceElement: H0
                                    PsiElement(identifier)('H0')
                                PsiElement(,)(',')
                                PsiWhiteSpace(' ')
                                SimpleType: HL0
                                  CodeReferenceElement: HL0
                                    PsiElement(identifier)('HL0')
                                PsiElement(])(']')
                            PsiWhiteSpace(' ')
                            PsiElement(=)('=')
                            PsiWhiteSpace(' ')
                            ScNewTemplateDefinition: <anonymous>
                              PsiElement(new)('new')
                              PsiWhiteSpace(' ')
                              ExtendsBlock
                                TemplateParents
                                  ConstructorInvocation
                                    ParametrizedType: KPCons[M, T]
                                      SimpleType: KPCons
                                        CodeReferenceElement: KPCons
                                          PsiElement(identifier)('KPCons')
                                      TypeArgumentsList
                                        PsiElement([)('[')
                                        SimpleType: M
                                          CodeReferenceElement: M
                                            PsiElement(identifier)('M')
                                        PsiElement(,)(',')
                                        PsiWhiteSpace(' ')
                                        SimpleType: T
                                          CodeReferenceElement: T
                                            PsiElement(identifier)('T')
                                        PsiElement(])(']')
                                PsiWhiteSpace(' ')
                                ScTemplateBody
                                  PsiElement({)('{')
                                  PsiWhiteSpace('\n          ')
                                  ScTypeAliasDefinition: HL
                                    AnnotationsList
                                      <empty list>
                                    Modifiers
                                      <empty list>
                                    PsiElement(type)('type')
                                    PsiWhiteSpace(' ')
                                    PsiElement(identifier)('HL')
                                    PsiWhiteSpace(' ')
                                    PsiElement(=)('=')
                                    PsiWhiteSpace(' ')
                                    SimpleType: HL0
                                      CodeReferenceElement: HL0
                                        PsiElement(identifier)('HL0')
                                  PsiWhiteSpace('\n          ')
                                  ScTypeAliasDefinition: H
                                    AnnotationsList
                                      <empty list>
                                    Modifiers
                                      <empty list>
                                    PsiElement(type)('type')
                                    PsiWhiteSpace(' ')
                                    PsiElement(identifier)('H')
                                    PsiWhiteSpace(' ')
                                    PsiElement(=)('=')
                                    PsiWhiteSpace(' ')
                                    SimpleType: H0
                                      CodeReferenceElement: H0
                                        PsiElement(identifier)('H0')
                                  PsiWhiteSpace('\n          ')
                                  ScPatternDefinition: head
                                    AnnotationsList
                                      <empty list>
                                    Modifiers
                                      <empty list>
                                    PsiElement(val)('val')
                                    PsiWhiteSpace(' ')
                                    ListOfPatterns
                                      ReferencePattern: head
                                        PsiElement(identifier)('head')
                                    PsiElement(:)(':')
                                    PsiWhiteSpace(' ')
                                    SimpleType: H
                                      CodeReferenceElement: H
                                        PsiElement(identifier)('H')
                                    PsiWhiteSpace(' ')
                                    PsiElement(=)('=')
                                    PsiWhiteSpace(' ')
                                    ReferenceExpression: head0
                                      PsiElement(identifier)('head0')
                                  PsiWhiteSpace('\n          ')
                                  ScPatternDefinition: tail
                                    AnnotationsList
                                      <empty list>
                                    Modifiers
                                      <empty list>
                                    PsiElement(val)('val')
                                    PsiWhiteSpace(' ')
                                    ListOfPatterns
                                      ReferencePattern: tail
                                        PsiElement(identifier)('tail')
                                    PsiElement(:)(':')
                                    PsiWhiteSpace(' ')
                                    SimpleType: T
                                      CodeReferenceElement: T
                                        PsiElement(identifier)('T')
                                    PsiWhiteSpace(' ')
                                    PsiElement(=)('=')
                                    PsiWhiteSpace(' ')
                                    ReferenceExpression: tail0
                                      PsiElement(identifier)('tail0')
                                  PsiWhiteSpace('\n        ')
                                  PsiElement(})('}')
                          PsiWhiteSpace('\n      ')
                          PsiElement(})('}')
                    PsiWhiteSpace('\n\n      ')
                    ScFunctionDefinition: apply
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(def)('def')
                      PsiWhiteSpace(' ')
                      PsiElement(identifier)('apply')
                      TypeParameterClause
                        PsiElement([)('[')
                        TypeParameter: M
                          PsiElement(identifier)('M')
                          PsiWhiteSpace(' ')
                          PsiElement(<:)('<:')
                          PsiWhiteSpace(' ')
                          SimpleType: AnyKind
                            CodeReferenceElement: AnyKind
                              PsiElement(identifier)('AnyKind')
                        PsiElement(])(']')
                      Parameters
                        <empty list>
                      PsiWhiteSpace(' ')
                      PsiElement(=)('=')
                      PsiWhiteSpace(' ')
                      ScNewTemplateDefinition: <anonymous>
                        PsiElement(new)('new')
                        PsiWhiteSpace(' ')
                        ExtendsBlock
                          TemplateParents
                            ConstructorInvocation
                              ParametrizedType: KPConsBuilder[M]
                                SimpleType: KPConsBuilder
                                  CodeReferenceElement: KPConsBuilder
                                    PsiElement(identifier)('KPConsBuilder')
                                TypeArgumentsList
                                  PsiElement([)('[')
                                  SimpleType: M
                                    CodeReferenceElement: M
                                      PsiElement(identifier)('M')
                                  PsiElement(])(']')
                          PsiWhiteSpace(' ')
                          ScTemplateBody
                            PsiElement({)('{')
                            PsiElement(})('}')
                    PsiWhiteSpace('\n    ')
                    PsiElement(})('}')
              PsiWhiteSpace('\n\n\n    ')
              ScPatternDefinition: kl
                PsiComment(comment)('// Let's create some kind-polymorphic list')
                PsiWhiteSpace('\n    ')
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(val)('val')
                PsiWhiteSpace(' ')
                ListOfPatterns
                  ReferencePattern: kl
                    PsiElement(identifier)('kl')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace('\n      ')
                MethodCall
                  GenericCall
                    ReferenceExpression: KPCons
                      PsiElement(identifier)('KPCons')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: Bar
                        CodeReferenceElement: Bar
                          PsiElement(identifier)('Bar')
                      PsiElement(])(']')
                  ArgumentList
                    PsiElement(()('(')
                    PsiWhiteSpace('\n        ')
                    MethodCall
                      ReferenceExpression: Bar
                        PsiElement(identifier)('Bar')
                      ArgumentList
                        PsiElement(()('(')
                        IntegerLiteral
                          PsiElement(integer)('5')
                        PsiElement())(')')
                    PsiWhiteSpace('\n      ')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    MethodCall
                      GenericCall
                        ReferenceExpression: KPCons
                          PsiElement(identifier)('KPCons')
                        TypeArgumentsList
                          PsiElement([)('[')
                          SimpleType: String
                            CodeReferenceElement: String
                              PsiElement(identifier)('String')
                          PsiElement(])(']')
                      ArgumentList
                        PsiElement(()('(')
                        PsiWhiteSpace('\n          ')
                        StringLiteral
                          PsiElement(string content)('"toto"')
                        PsiWhiteSpace('\n        ')
                        PsiElement(,)(',')
                        PsiWhiteSpace(' ')
                        MethodCall
                          GenericCall
                            ReferenceExpression: KPCons
                              PsiElement(identifier)('KPCons')
                            TypeArgumentsList
                              PsiElement([)('[')
                              SimpleType: List
                                CodeReferenceElement: List
                                  PsiElement(identifier)('List')
                              PsiElement(])(']')
                          ArgumentList
                            PsiElement(()('(')
                            PsiWhiteSpace('\n            ')
                            MethodCall
                              ReferenceExpression: List
                                PsiElement(identifier)('List')
                              ArgumentList
                                PsiElement(()('(')
                                IntegerLiteral
                                  PsiElement(integer)('1')
                                PsiElement(,)(',')
                                PsiWhiteSpace(' ')
                                IntegerLiteral
                                  PsiElement(integer)('2')
                                PsiElement(,)(',')
                                PsiWhiteSpace(' ')
                                IntegerLiteral
                                  PsiElement(integer)('3')
                                PsiElement())(')')
                            PsiWhiteSpace('\n          ')
                            PsiElement(,)(',')
                            PsiWhiteSpace(' ')
                            MethodCall
                              GenericCall
                                ReferenceExpression: KPCons
                                  PsiElement(identifier)('KPCons')
                                TypeArgumentsList
                                  PsiElement([)('[')
                                  SimpleType: Map
                                    CodeReferenceElement: Map
                                      PsiElement(identifier)('Map')
                                  PsiElement(])(']')
                              ArgumentList
                                PsiElement(()('(')
                                PsiWhiteSpace('\n              ')
                                MethodCall
                                  ReferenceExpression: Map
                                    PsiElement(identifier)('Map')
                                  ArgumentList
                                    PsiElement(()('(')
                                    InfixExpression
                                      StringLiteral
                                        PsiElement(string content)('"toto"')
                                      PsiWhiteSpace(' ')
                                      ReferenceExpression: ->
                                        PsiElement(identifier)('->')
                                      PsiWhiteSpace(' ')
                                      LongLiteral
                                        PsiElement(long)('1L')
                                    PsiElement(,)(',')
                                    PsiWhiteSpace(' ')
                                    InfixExpression
                                      StringLiteral
                                        PsiElement(string content)('"tata"')
                                      PsiWhiteSpace(' ')
                                      ReferenceExpression: ->
                                        PsiElement(identifier)('->')
                                      PsiWhiteSpace(' ')
                                      LongLiteral
                                        PsiElement(long)('2L')
                                    PsiElement())(')')
                                PsiWhiteSpace('\n            ')
                                PsiElement(,)(',')
                                PsiWhiteSpace(' ')
                                ReferenceExpression: KPNil
                                  PsiElement(identifier)('KPNil')
                                PsiWhiteSpace('\n            ')
                                PsiElement())(')')
                            PsiWhiteSpace('\n          ')
                            PsiElement())(')')
                        PsiWhiteSpace('\n        ')
                        PsiElement())(')')
                    PsiWhiteSpace('\n      ')
                    PsiElement())(')')
              PsiWhiteSpace('\n\n    ')
              ScPatternDefinition: h
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(val)('val')
                PsiWhiteSpace(' ')
                ListOfPatterns
                  ReferencePattern: h
                    PsiElement(identifier)('h')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParametrizedType: Bar[Int]
                  SimpleType: Bar
                    CodeReferenceElement: Bar
                      PsiElement(identifier)('Bar')
                  TypeArgumentsList
                    PsiElement([)('[')
                    SimpleType: Int
                      CodeReferenceElement: Int
                        PsiElement(identifier)('Int')
                    PsiElement(])(']')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                ReferenceExpression: kl.head
                  ReferenceExpression: kl
                    PsiElement(identifier)('kl')
                  PsiElement(.)('.')
                  PsiElement(identifier)('head')
              PsiWhiteSpace('\n    ')
              ScPatternDefinition: h2
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(val)('val')
                PsiWhiteSpace(' ')
                ListOfPatterns
                  ReferencePattern: h2
                    PsiElement(identifier)('h2')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                SimpleType: String
                  CodeReferenceElement: String
                    PsiElement(identifier)('String')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                ReferenceExpression: kl.tail.head
                  ReferenceExpression: kl.tail
                    ReferenceExpression: kl
                      PsiElement(identifier)('kl')
                    PsiElement(.)('.')
                    PsiElement(identifier)('tail')
                  PsiElement(.)('.')
                  PsiElement(identifier)('head')
              PsiWhiteSpace('\n    ')
              ScPatternDefinition: h3
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(val)('val')
                PsiWhiteSpace(' ')
                ListOfPatterns
                  ReferencePattern: h3
                    PsiElement(identifier)('h3')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParametrizedType: List[Int]
                  SimpleType: List
                    CodeReferenceElement: List
                      PsiElement(identifier)('List')
                  TypeArgumentsList
                    PsiElement([)('[')
                    SimpleType: Int
                      CodeReferenceElement: Int
                        PsiElement(identifier)('Int')
                    PsiElement(])(']')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                ReferenceExpression: kl.tail.tail.head
                  ReferenceExpression: kl.tail.tail
                    ReferenceExpression: kl.tail
                      ReferenceExpression: kl
                        PsiElement(identifier)('kl')
                      PsiElement(.)('.')
                      PsiElement(identifier)('tail')
                    PsiElement(.)('.')
                    PsiElement(identifier)('tail')
                  PsiElement(.)('.')
                  PsiElement(identifier)('head')
              PsiWhiteSpace('\n    ')
              ScPatternDefinition: h4
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(val)('val')
                PsiWhiteSpace(' ')
                ListOfPatterns
                  ReferencePattern: h4
                    PsiElement(identifier)('h4')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParametrizedType: Map[String, Long]
                  SimpleType: Map
                    CodeReferenceElement: Map
                      PsiElement(identifier)('Map')
                  TypeArgumentsList
                    PsiElement([)('[')
                    SimpleType: String
                      CodeReferenceElement: String
                        PsiElement(identifier)('String')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    SimpleType: Long
                      CodeReferenceElement: Long
                        PsiElement(identifier)('Long')
                    PsiElement(])(']')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                ReferenceExpression: kl.tail.tail.tail.head
                  ReferenceExpression: kl.tail.tail.tail
                    ReferenceExpression: kl.tail.tail
                      ReferenceExpression: kl.tail
                        ReferenceExpression: kl
                          PsiElement(identifier)('kl')
                        PsiElement(.)('.')
                        PsiElement(identifier)('tail')
                      PsiElement(.)('.')
                      PsiElement(identifier)('tail')
                    PsiElement(.)('.')
                    PsiElement(identifier)('tail')
                  PsiElement(.)('.')
                  PsiElement(identifier)('head')
              PsiWhiteSpace('\n\n  ')
              PsiElement(})('}')
        PsiWhiteSpace('\n\n')
        PsiElement(})('}')
