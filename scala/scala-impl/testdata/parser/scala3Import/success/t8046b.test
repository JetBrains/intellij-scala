trait One {
  type Op[A]
  type Alias = Op[Int]
}

trait Two extends One {
  trait Op[A] extends M[A]
  //(a: Alias) => a.value.toChar               // okay
                                             // (=> A).asSeenFrom(a.type, trait M): => Int
  class View2 extends Alias { value.toChar } // toChar is not a member of type parameter A
                                             // (=> A).asSeenFrom(View2.this.type, trait M): => A

  // override type Alias = Op[Int]           // works with this
}

trait M[A] { def value: A = sys.error("") }
-----
ScalaFile
  ScTrait: One
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('One')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScTypeAliasDeclaration: Op
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Op')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: A
              PsiElement(identifier)('A')
            PsiElement(])(']')
        PsiWhiteSpace('\n  ')
        ScTypeAliasDefinition: Alias
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Alias')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ParametrizedType: Op[Int]
            SimpleType: Op
              CodeReferenceElement: Op
                PsiElement(identifier)('Op')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: Int
                CodeReferenceElement: Int
                  PsiElement(identifier)('Int')
              PsiElement(])(']')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScTrait: Two
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Two')
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          SimpleType: One
            CodeReferenceElement: One
              PsiElement(identifier)('One')
      PsiWhiteSpace(' ')
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScTrait: Op
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(trait)('trait')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Op')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: A
              PsiElement(identifier)('A')
            PsiElement(])(']')
          PsiWhiteSpace(' ')
          ExtendsBlock
            PsiElement(extends)('extends')
            PsiWhiteSpace(' ')
            TemplateParents
              ConstructorInvocation
                ParametrizedType: M[A]
                  SimpleType: M
                    CodeReferenceElement: M
                      PsiElement(identifier)('M')
                  TypeArgumentsList
                    PsiElement([)('[')
                    SimpleType: A
                      CodeReferenceElement: A
                        PsiElement(identifier)('A')
                    PsiElement(])(']')
        PsiWhiteSpace('\n  ')
        ScClass: View2
          PsiComment(comment)('//(a: Alias) => a.value.toChar               // okay')
          PsiWhiteSpace('\n                                             ')
          PsiComment(comment)('// (=> A).asSeenFrom(a.type, trait M): => Int')
          PsiWhiteSpace('\n  ')
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(class)('class')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('View2')
          PrimaryConstructor
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            Parameters
              <empty list>
          PsiWhiteSpace(' ')
          ExtendsBlock
            PsiElement(extends)('extends')
            PsiWhiteSpace(' ')
            TemplateParents
              ConstructorInvocation
                SimpleType: Alias
                  CodeReferenceElement: Alias
                    PsiElement(identifier)('Alias')
            PsiWhiteSpace(' ')
            ScTemplateBody
              PsiElement({)('{')
              PsiWhiteSpace(' ')
              ReferenceExpression: value.toChar
                ReferenceExpression: value
                  PsiElement(identifier)('value')
                PsiElement(.)('.')
                PsiElement(identifier)('toChar')
              PsiWhiteSpace(' ')
              PsiElement(})('}')
        PsiWhiteSpace(' ')
        PsiComment(comment)('// toChar is not a member of type parameter A')
        PsiWhiteSpace('\n                                             ')
        PsiComment(comment)('// (=> A).asSeenFrom(View2.this.type, trait M): => A')
        PsiWhiteSpace('\n\n  ')
        PsiComment(comment)('// override type Alias = Op[Int]           // works with this')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScTrait: M
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('M')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: A
        PsiElement(identifier)('A')
      PsiElement(])(']')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace(' ')
        ScFunctionDefinition: value
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('value')
          Parameters
            <empty list>
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: A
            CodeReferenceElement: A
              PsiElement(identifier)('A')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: sys.error
              ReferenceExpression: sys
                PsiElement(identifier)('sys')
              PsiElement(.)('.')
              PsiElement(identifier)('error')
            ArgumentList
              PsiElement(()('(')
              StringLiteral
                PsiElement(string content)('""')
              PsiElement())(')')
        PsiWhiteSpace(' ')
        PsiElement(})('}')
