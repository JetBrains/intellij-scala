object O {
  class AC(code: => Unit)

  val action = new AC({mode = ???}) {}

  def mode: AnyRef = ???
  def mode_=(em: AnyRef): Unit = {}
}
-----
ScalaFile
  ScObject: O
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('O')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScClass: AC
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(class)('class')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('AC')
          PrimaryConstructor
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            Parameters
              ParametersClause
                PsiElement(()('(')
                ClassParameter: code
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(identifier)('code')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    PsiElement(=>)('=>')
                    PsiWhiteSpace(' ')
                    SimpleType: Unit
                      CodeReferenceElement: Unit
                        PsiElement(identifier)('Unit')
                PsiElement())(')')
          ExtendsBlock
            <empty list>
        PsiWhiteSpace('\n\n  ')
        ScPatternDefinition: action
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: action
              PsiElement(identifier)('action')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ScNewTemplateDefinition: <anonymous>
            PsiElement(new)('new')
            PsiWhiteSpace(' ')
            ExtendsBlock
              TemplateParents
                ConstructorInvocation
                  SimpleType: AC
                    CodeReferenceElement: AC
                      PsiElement(identifier)('AC')
                  ArgumentList
                    PsiElement(()('(')
                    BlockExpression
                      PsiElement({)('{')
                      AssignStatement
                        ReferenceExpression: mode
                          PsiElement(identifier)('mode')
                        PsiWhiteSpace(' ')
                        PsiElement(=)('=')
                        PsiWhiteSpace(' ')
                        ReferenceExpression: ???
                          PsiElement(identifier)('???')
                      PsiElement(})('}')
                    PsiElement())(')')
              PsiWhiteSpace(' ')
              ScTemplateBody
                PsiElement({)('{')
                PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: mode
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('mode')
          Parameters
            <empty list>
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: AnyRef
            CodeReferenceElement: AnyRef
              PsiElement(identifier)('AnyRef')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: ???
            PsiElement(identifier)('???')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: mode_=
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('mode_=')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: em
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('em')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: AnyRef
                    CodeReferenceElement: AnyRef
                      PsiElement(identifier)('AnyRef')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Unit
            CodeReferenceElement: Unit
              PsiElement(identifier)('Unit')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          BlockExpression
            PsiElement({)('{')
            PsiElement(})('}')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
