object Test {
  def +[T](x: T): String = "x"
  `+`[Int](6): String // Parser can treat + as identifier when backquoted and followed by a type argument
  `+`(6): String // Parser can treat + as identifier when backquoted and followed by a parenthesized argument
  +(6): Int // Parser prioritizes + as unary when possible
}
-----
ScalaFile
  ScObject: Test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: +
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('+')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: T
              PsiElement(identifier)('T')
            PsiElement(])(']')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: x
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: T
                    CodeReferenceElement: T
                      PsiElement(identifier)('T')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: String
            CodeReferenceElement: String
              PsiElement(identifier)('String')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          StringLiteral
            PsiElement(string content)('"x"')
        PsiWhiteSpace('\n  ')
        TypedExpression
          MethodCall
            GenericCall
              ReferenceExpression: `+`
                PsiElement(identifier)('`+`')
              TypeArgumentsList
                PsiElement([)('[')
                SimpleType: Int
                  CodeReferenceElement: Int
                    PsiElement(identifier)('Int')
                PsiElement(])(']')
            ArgumentList
              PsiElement(()('(')
              IntegerLiteral
                PsiElement(integer)('6')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: String
            CodeReferenceElement: String
              PsiElement(identifier)('String')
        PsiWhiteSpace(' ')
        PsiComment(comment)('// Parser can treat + as identifier when backquoted and followed by a type argument')
        PsiWhiteSpace('\n  ')
        TypedExpression
          MethodCall
            ReferenceExpression: `+`
              PsiElement(identifier)('`+`')
            ArgumentList
              PsiElement(()('(')
              IntegerLiteral
                PsiElement(integer)('6')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: String
            CodeReferenceElement: String
              PsiElement(identifier)('String')
        PsiWhiteSpace(' ')
        PsiComment(comment)('// Parser can treat + as identifier when backquoted and followed by a parenthesized argument')
        PsiWhiteSpace('\n  ')
        TypedExpression
          PrefixExpression
            ReferenceExpression: +
              PsiElement(identifier)('+')
            ExpressionInParenthesis
              PsiElement(()('(')
              IntegerLiteral
                PsiElement(integer)('6')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Int
            CodeReferenceElement: Int
              PsiElement(identifier)('Int')
        PsiWhiteSpace(' ')
        PsiComment(comment)('// Parser prioritizes + as unary when possible')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
