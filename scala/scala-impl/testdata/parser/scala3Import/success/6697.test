object Test {
  sealed trait Off
  case class Of[sup, sub <: sup]() extends Off
  type Sup[O <: Off] = O match { case Of[sup, sub] => sup }
  type Sub[O <: Off] = O match { case Of[sup, sub] => sub }
  type Copy[O <: Off] = Of[Sup[O], Sub[O]]  // error
}
-----
ScalaFile
  ScObject: Test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScTrait: Off
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(sealed)('sealed')
          PsiWhiteSpace(' ')
          PsiElement(trait)('trait')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Off')
          ExtendsBlock
            <empty list>
        PsiWhiteSpace('\n  ')
        ScClass: Of
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(case)('case')
          PsiWhiteSpace(' ')
          PsiElement(class)('class')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Of')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: sup
              PsiElement(identifier)('sup')
            PsiElement(,)(',')
            PsiWhiteSpace(' ')
            TypeParameter: sub
              PsiElement(identifier)('sub')
              PsiWhiteSpace(' ')
              PsiElement(<:)('<:')
              PsiWhiteSpace(' ')
              SimpleType: sup
                CodeReferenceElement: sup
                  PsiElement(identifier)('sup')
            PsiElement(])(']')
          PrimaryConstructor
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            Parameters
              ParametersClause
                PsiElement(()('(')
                PsiElement())(')')
          PsiWhiteSpace(' ')
          ExtendsBlock
            PsiElement(extends)('extends')
            PsiWhiteSpace(' ')
            TemplateParents
              ConstructorInvocation
                SimpleType: Off
                  CodeReferenceElement: Off
                    PsiElement(identifier)('Off')
        PsiWhiteSpace('\n  ')
        ScTypeAliasDefinition: Sup
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Sup')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: O
              PsiElement(identifier)('O')
              PsiWhiteSpace(' ')
              PsiElement(<:)('<:')
              PsiWhiteSpace(' ')
              SimpleType: Off
                CodeReferenceElement: Off
                  PsiElement(identifier)('Off')
            PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MatchType: O match { case Of[sup, sub] => sup }
            SimpleType: O
              CodeReferenceElement: O
                PsiElement(identifier)('O')
            PsiWhiteSpace(' ')
            PsiElement(match)('match')
            PsiWhiteSpace(' ')
            PsiElement({)('{')
            PsiWhiteSpace(' ')
            ScMatchTypeCasesImpl(match type cases)
              ScMatchTypeCaseImpl(match type case)
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                ParametrizedType: Of[sup, sub]
                  SimpleType: Of
                    CodeReferenceElement: Of
                      PsiElement(identifier)('Of')
                  TypeArgumentsList
                    PsiElement([)('[')
                    TypeVariable: sup
                      PsiElement(identifier)('sup')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    TypeVariable: sub
                      PsiElement(identifier)('sub')
                    PsiElement(])(']')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                SimpleType: sup
                  CodeReferenceElement: sup
                    PsiElement(identifier)('sup')
            PsiWhiteSpace(' ')
            PsiElement(})('}')
        PsiWhiteSpace('\n  ')
        ScTypeAliasDefinition: Sub
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Sub')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: O
              PsiElement(identifier)('O')
              PsiWhiteSpace(' ')
              PsiElement(<:)('<:')
              PsiWhiteSpace(' ')
              SimpleType: Off
                CodeReferenceElement: Off
                  PsiElement(identifier)('Off')
            PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MatchType: O match { case Of[sup, sub] => sub }
            SimpleType: O
              CodeReferenceElement: O
                PsiElement(identifier)('O')
            PsiWhiteSpace(' ')
            PsiElement(match)('match')
            PsiWhiteSpace(' ')
            PsiElement({)('{')
            PsiWhiteSpace(' ')
            ScMatchTypeCasesImpl(match type cases)
              ScMatchTypeCaseImpl(match type case)
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                ParametrizedType: Of[sup, sub]
                  SimpleType: Of
                    CodeReferenceElement: Of
                      PsiElement(identifier)('Of')
                  TypeArgumentsList
                    PsiElement([)('[')
                    TypeVariable: sup
                      PsiElement(identifier)('sup')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    TypeVariable: sub
                      PsiElement(identifier)('sub')
                    PsiElement(])(']')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                SimpleType: sub
                  CodeReferenceElement: sub
                    PsiElement(identifier)('sub')
            PsiWhiteSpace(' ')
            PsiElement(})('}')
        PsiWhiteSpace('\n  ')
        ScTypeAliasDefinition: Copy
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Copy')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: O
              PsiElement(identifier)('O')
              PsiWhiteSpace(' ')
              PsiElement(<:)('<:')
              PsiWhiteSpace(' ')
              SimpleType: Off
                CodeReferenceElement: Off
                  PsiElement(identifier)('Off')
            PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ParametrizedType: Of[Sup[O], Sub[O]]
            SimpleType: Of
              CodeReferenceElement: Of
                PsiElement(identifier)('Of')
            TypeArgumentsList
              PsiElement([)('[')
              ParametrizedType: Sup[O]
                SimpleType: Sup
                  CodeReferenceElement: Sup
                    PsiElement(identifier)('Sup')
                TypeArgumentsList
                  PsiElement([)('[')
                  SimpleType: O
                    CodeReferenceElement: O
                      PsiElement(identifier)('O')
                  PsiElement(])(']')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              ParametrizedType: Sub[O]
                SimpleType: Sub
                  CodeReferenceElement: Sub
                    PsiElement(identifier)('Sub')
                TypeArgumentsList
                  PsiElement([)('[')
                  SimpleType: O
                    CodeReferenceElement: O
                      PsiElement(identifier)('O')
                  PsiElement(])(']')
              PsiElement(])(']')
        PsiWhiteSpace('  ')
        PsiComment(comment)('// error')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
