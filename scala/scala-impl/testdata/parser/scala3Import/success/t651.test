package test;

trait Test3 {
  trait MatchableImpl {
    trait MatchImpl;
  }

  trait BracePairImpl {
    trait BraceImpl extends MatchableImpl {
      private object MyMatch1 extends MatchImpl;
      protected def match0 : MatchImpl = MyMatch1;

    }
  }
}
-----
ScalaFile
  ScPackaging
    PsiElement(package)('package')
    PsiWhiteSpace(' ')
    CodeReferenceElement: test
      PsiElement(identifier)('test')
    PsiElement(;)(';')
    PsiWhiteSpace('\n\n')
    ScTrait: Test3
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      PsiElement(trait)('trait')
      PsiWhiteSpace(' ')
      PsiElement(identifier)('Test3')
      PsiWhiteSpace(' ')
      ExtendsBlock
        ScTemplateBody
          PsiElement({)('{')
          PsiWhiteSpace('\n  ')
          ScTrait: MatchableImpl
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(trait)('trait')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('MatchableImpl')
            PsiWhiteSpace(' ')
            ExtendsBlock
              ScTemplateBody
                PsiElement({)('{')
                PsiWhiteSpace('\n    ')
                ScTrait: MatchImpl
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(trait)('trait')
                  PsiWhiteSpace(' ')
                  PsiElement(identifier)('MatchImpl')
                  ExtendsBlock
                    <empty list>
                PsiElement(;)(';')
                PsiWhiteSpace('\n  ')
                PsiElement(})('}')
          PsiWhiteSpace('\n\n  ')
          ScTrait: BracePairImpl
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(trait)('trait')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('BracePairImpl')
            PsiWhiteSpace(' ')
            ExtendsBlock
              ScTemplateBody
                PsiElement({)('{')
                PsiWhiteSpace('\n    ')
                ScTrait: BraceImpl
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(trait)('trait')
                  PsiWhiteSpace(' ')
                  PsiElement(identifier)('BraceImpl')
                  PsiWhiteSpace(' ')
                  ExtendsBlock
                    PsiElement(extends)('extends')
                    PsiWhiteSpace(' ')
                    TemplateParents
                      ConstructorInvocation
                        SimpleType: MatchableImpl
                          CodeReferenceElement: MatchableImpl
                            PsiElement(identifier)('MatchableImpl')
                    PsiWhiteSpace(' ')
                    ScTemplateBody
                      PsiElement({)('{')
                      PsiWhiteSpace('\n      ')
                      ScObject: MyMatch1
                        AnnotationsList
                          <empty list>
                        Modifiers
                          AccessModifier
                            PsiElement(private)('private')
                        PsiWhiteSpace(' ')
                        PsiElement(object)('object')
                        PsiWhiteSpace(' ')
                        PsiElement(identifier)('MyMatch1')
                        PsiWhiteSpace(' ')
                        ExtendsBlock
                          PsiElement(extends)('extends')
                          PsiWhiteSpace(' ')
                          TemplateParents
                            ConstructorInvocation
                              SimpleType: MatchImpl
                                CodeReferenceElement: MatchImpl
                                  PsiElement(identifier)('MatchImpl')
                      PsiElement(;)(';')
                      PsiWhiteSpace('\n      ')
                      ScFunctionDefinition: match0
                        AnnotationsList
                          <empty list>
                        Modifiers
                          AccessModifier
                            PsiElement(protected)('protected')
                        PsiWhiteSpace(' ')
                        PsiElement(def)('def')
                        PsiWhiteSpace(' ')
                        PsiElement(identifier)('match0')
                        Parameters
                          <empty list>
                        PsiWhiteSpace(' ')
                        PsiElement(:)(':')
                        PsiWhiteSpace(' ')
                        SimpleType: MatchImpl
                          CodeReferenceElement: MatchImpl
                            PsiElement(identifier)('MatchImpl')
                        PsiWhiteSpace(' ')
                        PsiElement(=)('=')
                        PsiWhiteSpace(' ')
                        ReferenceExpression: MyMatch1
                          PsiElement(identifier)('MyMatch1')
                      PsiElement(;)(';')
                      PsiWhiteSpace('\n\n    ')
                      PsiElement(})('}')
                PsiWhiteSpace('\n  ')
                PsiElement(})('}')
          PsiWhiteSpace('\n')
          PsiElement(})('}')
