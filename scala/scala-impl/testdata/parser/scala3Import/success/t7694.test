trait A
trait B

trait L[A2, B2 <: A2] {
  def bar(a: Any, b: Any) = 0
}

object Lub {
  // use named args transforms to include TypeTree(<lub.tpe>) in the AST before refchecks.
  def foo(a: L[_, _], b: Any) = 0

  foo(b = 0, a = if (true) (null: L[A, A]) else (null: L[B, B]))

  (if (true) (null: L[A, A]) else (null: L[B, B])).bar(b = 0, a = 0)
}

/*
The LUB ends up as:

TypeRef(
  TypeSymbol(
    abstract trait L#7038[A2#7039, B2#7040 <: A2#7039] extends AnyRef#2197

  )
  args = List(
    AbstractTypeRef(
      AbstractType(
        type _1#13680 >: A#7036 with B#7037 <: Object#1752
      )
    )
    AbstractTypeRef(
      AbstractType(
        type _2#13681 >: A#7036 with B#7037 <: Object#1752
      )
    )
  )
)

Note that type _2#13681 is *not* bound by _1#13680
*/
-----
ScalaFile
  ScTrait: A
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('A')
    ExtendsBlock
      <empty list>
  PsiWhiteSpace('\n')
  ScTrait: B
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('B')
    ExtendsBlock
      <empty list>
  PsiWhiteSpace('\n\n')
  ScTrait: L
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('L')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: A2
        PsiElement(identifier)('A2')
      PsiElement(,)(',')
      PsiWhiteSpace(' ')
      TypeParameter: B2
        PsiElement(identifier)('B2')
        PsiWhiteSpace(' ')
        PsiElement(<:)('<:')
        PsiWhiteSpace(' ')
        SimpleType: A2
          CodeReferenceElement: A2
            PsiElement(identifier)('A2')
      PsiElement(])(']')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: bar
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('bar')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: a
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('a')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Any
                    CodeReferenceElement: Any
                      PsiElement(identifier)('Any')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              Parameter: b
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('b')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Any
                    CodeReferenceElement: Any
                      PsiElement(identifier)('Any')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          IntegerLiteral
            PsiElement(integer)('0')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScObject: Lub
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Lub')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: foo
          PsiComment(comment)('// use named args transforms to include TypeTree(<lub.tpe>) in the AST before refchecks.')
          PsiWhiteSpace('\n  ')
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('foo')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: a
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('a')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  ParametrizedType: L[_, _]
                    SimpleType: L
                      CodeReferenceElement: L
                        PsiElement(identifier)('L')
                    TypeArgumentsList
                      PsiElement([)('[')
                      WildcardType: _
                        PsiElement(_)('_')
                      PsiElement(,)(',')
                      PsiWhiteSpace(' ')
                      WildcardType: _
                        PsiElement(_)('_')
                      PsiElement(])(']')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              Parameter: b
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('b')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Any
                    CodeReferenceElement: Any
                      PsiElement(identifier)('Any')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          IntegerLiteral
            PsiElement(integer)('0')
        PsiWhiteSpace('\n\n  ')
        MethodCall
          ReferenceExpression: foo
            PsiElement(identifier)('foo')
          ArgumentList
            PsiElement(()('(')
            AssignStatement
              ReferenceExpression: b
                PsiElement(identifier)('b')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              IntegerLiteral
                PsiElement(integer)('0')
            PsiElement(,)(',')
            PsiWhiteSpace(' ')
            AssignStatement
              ReferenceExpression: a
                PsiElement(identifier)('a')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              IfStatement
                PsiElement(if)('if')
                PsiWhiteSpace(' ')
                PsiElement(()('(')
                BooleanLiteral
                  PsiElement(true)('true')
                PsiElement())(')')
                PsiWhiteSpace(' ')
                ExpressionInParenthesis
                  PsiElement(()('(')
                  TypedExpression
                    NullLiteral
                      PsiElement(null)('null')
                    PsiElement(:)(':')
                    PsiWhiteSpace(' ')
                    ParametrizedType: L[A, A]
                      SimpleType: L
                        CodeReferenceElement: L
                          PsiElement(identifier)('L')
                      TypeArgumentsList
                        PsiElement([)('[')
                        SimpleType: A
                          CodeReferenceElement: A
                            PsiElement(identifier)('A')
                        PsiElement(,)(',')
                        PsiWhiteSpace(' ')
                        SimpleType: A
                          CodeReferenceElement: A
                            PsiElement(identifier)('A')
                        PsiElement(])(']')
                  PsiElement())(')')
                PsiWhiteSpace(' ')
                PsiElement(else)('else')
                PsiWhiteSpace(' ')
                ExpressionInParenthesis
                  PsiElement(()('(')
                  TypedExpression
                    NullLiteral
                      PsiElement(null)('null')
                    PsiElement(:)(':')
                    PsiWhiteSpace(' ')
                    ParametrizedType: L[B, B]
                      SimpleType: L
                        CodeReferenceElement: L
                          PsiElement(identifier)('L')
                      TypeArgumentsList
                        PsiElement([)('[')
                        SimpleType: B
                          CodeReferenceElement: B
                            PsiElement(identifier)('B')
                        PsiElement(,)(',')
                        PsiWhiteSpace(' ')
                        SimpleType: B
                          CodeReferenceElement: B
                            PsiElement(identifier)('B')
                        PsiElement(])(']')
                  PsiElement())(')')
            PsiElement())(')')
        PsiWhiteSpace('\n\n  ')
        MethodCall
          ReferenceExpression: (if (true) (null: L[A, A]) else (null: L[B, B])).bar
            ExpressionInParenthesis
              PsiElement(()('(')
              IfStatement
                PsiElement(if)('if')
                PsiWhiteSpace(' ')
                PsiElement(()('(')
                BooleanLiteral
                  PsiElement(true)('true')
                PsiElement())(')')
                PsiWhiteSpace(' ')
                ExpressionInParenthesis
                  PsiElement(()('(')
                  TypedExpression
                    NullLiteral
                      PsiElement(null)('null')
                    PsiElement(:)(':')
                    PsiWhiteSpace(' ')
                    ParametrizedType: L[A, A]
                      SimpleType: L
                        CodeReferenceElement: L
                          PsiElement(identifier)('L')
                      TypeArgumentsList
                        PsiElement([)('[')
                        SimpleType: A
                          CodeReferenceElement: A
                            PsiElement(identifier)('A')
                        PsiElement(,)(',')
                        PsiWhiteSpace(' ')
                        SimpleType: A
                          CodeReferenceElement: A
                            PsiElement(identifier)('A')
                        PsiElement(])(']')
                  PsiElement())(')')
                PsiWhiteSpace(' ')
                PsiElement(else)('else')
                PsiWhiteSpace(' ')
                ExpressionInParenthesis
                  PsiElement(()('(')
                  TypedExpression
                    NullLiteral
                      PsiElement(null)('null')
                    PsiElement(:)(':')
                    PsiWhiteSpace(' ')
                    ParametrizedType: L[B, B]
                      SimpleType: L
                        CodeReferenceElement: L
                          PsiElement(identifier)('L')
                      TypeArgumentsList
                        PsiElement([)('[')
                        SimpleType: B
                          CodeReferenceElement: B
                            PsiElement(identifier)('B')
                        PsiElement(,)(',')
                        PsiWhiteSpace(' ')
                        SimpleType: B
                          CodeReferenceElement: B
                            PsiElement(identifier)('B')
                        PsiElement(])(']')
                  PsiElement())(')')
              PsiElement())(')')
            PsiElement(.)('.')
            PsiElement(identifier)('bar')
          ArgumentList
            PsiElement(()('(')
            AssignStatement
              ReferenceExpression: b
                PsiElement(identifier)('b')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              IntegerLiteral
                PsiElement(integer)('0')
            PsiElement(,)(',')
            PsiWhiteSpace(' ')
            AssignStatement
              ReferenceExpression: a
                PsiElement(identifier)('a')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              IntegerLiteral
                PsiElement(integer)('0')
            PsiElement())(')')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  PsiComment(BlockComment)('/*\nThe LUB ends up as:\n\nTypeRef(\n  TypeSymbol(\n    abstract trait L#7038[A2#7039, B2#7040 <: A2#7039] extends AnyRef#2197\n\n  )\n  args = List(\n    AbstractTypeRef(\n      AbstractType(\n        type _1#13680 >: A#7036 with B#7037 <: Object#1752\n      )\n    )\n    AbstractTypeRef(\n      AbstractType(\n        type _2#13681 >: A#7036 with B#7037 <: Object#1752\n      )\n    )\n  )\n)\n\nNote that type _2#13681 is *not* bound by _1#13680\n*/')
