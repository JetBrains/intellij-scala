object test {
  def make[m[x], b]: m[b] = sys.error("foo")
  val lst: List[Int] = make[List, Int]
}
-----
ScalaFile
  ScObject: test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('test')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: make
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('make')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: m
              PsiElement(identifier)('m')
              TypeParameterClause
                PsiElement([)('[')
                TypeParameter: x
                  PsiElement(identifier)('x')
                PsiElement(])(']')
            PsiElement(,)(',')
            PsiWhiteSpace(' ')
            TypeParameter: b
              PsiElement(identifier)('b')
            PsiElement(])(']')
          Parameters
            <empty list>
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: m[b]
            SimpleType: m
              CodeReferenceElement: m
                PsiElement(identifier)('m')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: b
                CodeReferenceElement: b
                  PsiElement(identifier)('b')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: sys.error
              ReferenceExpression: sys
                PsiElement(identifier)('sys')
              PsiElement(.)('.')
              PsiElement(identifier)('error')
            ArgumentList
              PsiElement(()('(')
              StringLiteral
                PsiElement(string content)('"foo"')
              PsiElement())(')')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: lst
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: lst
              PsiElement(identifier)('lst')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: List[Int]
            SimpleType: List
              CodeReferenceElement: List
                PsiElement(identifier)('List')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: Int
                CodeReferenceElement: Int
                  PsiElement(identifier)('Int')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          GenericCall
            ReferenceExpression: make
              PsiElement(identifier)('make')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: List
                CodeReferenceElement: List
                  PsiElement(identifier)('List')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              SimpleType: Int
                CodeReferenceElement: Int
                  PsiElement(identifier)('Int')
              PsiElement(])(']')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
