trait Txn[T <: Txn[T]]

trait Elem[T <: Txn[T]]

sealed trait State[+T]
final case class Done[T <: Txn[T]](elem: Elem[T]) extends State[T]
case object Busy extends State[Nothing]

trait Test[Out <: Txn[Out]] {
  def apply(opt: Option[State[Out]]): Any = opt match {
    case Some(state) =>
      state match {
        case Done(out)  => "foo"    // problem here
        case Busy       => throw new IllegalStateException("Cyclic object graph")
      }

    case None => "bar"
  }
}
-----
ScalaFile
  ScTrait: Txn
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Txn')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: T
        PsiElement(identifier)('T')
        PsiWhiteSpace(' ')
        PsiElement(<:)('<:')
        PsiWhiteSpace(' ')
        ParametrizedType: Txn[T]
          SimpleType: Txn
            CodeReferenceElement: Txn
              PsiElement(identifier)('Txn')
          TypeArgumentsList
            PsiElement([)('[')
            SimpleType: T
              CodeReferenceElement: T
                PsiElement(identifier)('T')
            PsiElement(])(']')
      PsiElement(])(']')
    ExtendsBlock
      <empty list>
  PsiWhiteSpace('\n\n')
  ScTrait: Elem
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Elem')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: T
        PsiElement(identifier)('T')
        PsiWhiteSpace(' ')
        PsiElement(<:)('<:')
        PsiWhiteSpace(' ')
        ParametrizedType: Txn[T]
          SimpleType: Txn
            CodeReferenceElement: Txn
              PsiElement(identifier)('Txn')
          TypeArgumentsList
            PsiElement([)('[')
            SimpleType: T
              CodeReferenceElement: T
                PsiElement(identifier)('T')
            PsiElement(])(']')
      PsiElement(])(']')
    ExtendsBlock
      <empty list>
  PsiWhiteSpace('\n\n')
  ScTrait: State
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(sealed)('sealed')
    PsiWhiteSpace(' ')
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('State')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: T
        PsiElement(identifier)('+')
        PsiElement(identifier)('T')
      PsiElement(])(']')
    ExtendsBlock
      <empty list>
  PsiWhiteSpace('\n')
  ScClass: Done
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(final)('final')
      PsiWhiteSpace(' ')
      PsiElement(case)('case')
    PsiWhiteSpace(' ')
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Done')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: T
        PsiElement(identifier)('T')
        PsiWhiteSpace(' ')
        PsiElement(<:)('<:')
        PsiWhiteSpace(' ')
        ParametrizedType: Txn[T]
          SimpleType: Txn
            CodeReferenceElement: Txn
              PsiElement(identifier)('Txn')
          TypeArgumentsList
            PsiElement([)('[')
            SimpleType: T
              CodeReferenceElement: T
                PsiElement(identifier)('T')
            PsiElement(])(']')
      PsiElement(])(']')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        ParametersClause
          PsiElement(()('(')
          ClassParameter: elem
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(identifier)('elem')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            ParameterType
              ParametrizedType: Elem[T]
                SimpleType: Elem
                  CodeReferenceElement: Elem
                    PsiElement(identifier)('Elem')
                TypeArgumentsList
                  PsiElement([)('[')
                  SimpleType: T
                    CodeReferenceElement: T
                      PsiElement(identifier)('T')
                  PsiElement(])(']')
          PsiElement())(')')
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          ParametrizedType: State[T]
            SimpleType: State
              CodeReferenceElement: State
                PsiElement(identifier)('State')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: T
                CodeReferenceElement: T
                  PsiElement(identifier)('T')
              PsiElement(])(']')
  PsiWhiteSpace('\n')
  ScObject: Busy
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(case)('case')
    PsiWhiteSpace(' ')
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Busy')
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          ParametrizedType: State[Nothing]
            SimpleType: State
              CodeReferenceElement: State
                PsiElement(identifier)('State')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: Nothing
                CodeReferenceElement: Nothing
                  PsiElement(identifier)('Nothing')
              PsiElement(])(']')
  PsiWhiteSpace('\n\n')
  ScTrait: Test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: Out
        PsiElement(identifier)('Out')
        PsiWhiteSpace(' ')
        PsiElement(<:)('<:')
        PsiWhiteSpace(' ')
        ParametrizedType: Txn[Out]
          SimpleType: Txn
            CodeReferenceElement: Txn
              PsiElement(identifier)('Txn')
          TypeArgumentsList
            PsiElement([)('[')
            SimpleType: Out
              CodeReferenceElement: Out
                PsiElement(identifier)('Out')
            PsiElement(])(']')
      PsiElement(])(']')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: apply
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('apply')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: opt
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('opt')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  ParametrizedType: Option[State[Out]]
                    SimpleType: Option
                      CodeReferenceElement: Option
                        PsiElement(identifier)('Option')
                    TypeArgumentsList
                      PsiElement([)('[')
                      ParametrizedType: State[Out]
                        SimpleType: State
                          CodeReferenceElement: State
                            PsiElement(identifier)('State')
                        TypeArgumentsList
                          PsiElement([)('[')
                          SimpleType: Out
                            CodeReferenceElement: Out
                              PsiElement(identifier)('Out')
                          PsiElement(])(']')
                      PsiElement(])(']')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Any
            CodeReferenceElement: Any
              PsiElement(identifier)('Any')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MatchStatement
            ReferenceExpression: opt
              PsiElement(identifier)('opt')
            PsiWhiteSpace(' ')
            PsiElement(match)('match')
            PsiWhiteSpace(' ')
            PsiElement({)('{')
            PsiWhiteSpace('\n    ')
            CaseClauses
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                ConstructorPattern
                  CodeReferenceElement: Some
                    PsiElement(identifier)('Some')
                  Pattern Argument List
                    PsiElement(()('(')
                    ReferencePattern: state
                      PsiElement(identifier)('state')
                    PsiElement())(')')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace('\n      ')
                BlockOfExpressions
                  MatchStatement
                    ReferenceExpression: state
                      PsiElement(identifier)('state')
                    PsiWhiteSpace(' ')
                    PsiElement(match)('match')
                    PsiWhiteSpace(' ')
                    PsiElement({)('{')
                    PsiWhiteSpace('\n        ')
                    CaseClauses
                      CaseClause
                        PsiElement(case)('case')
                        PsiWhiteSpace(' ')
                        ConstructorPattern
                          CodeReferenceElement: Done
                            PsiElement(identifier)('Done')
                          Pattern Argument List
                            PsiElement(()('(')
                            ReferencePattern: out
                              PsiElement(identifier)('out')
                            PsiElement())(')')
                        PsiWhiteSpace('  ')
                        PsiElement(=>)('=>')
                        PsiWhiteSpace(' ')
                        BlockOfExpressions
                          StringLiteral
                            PsiElement(string content)('"foo"')
                      PsiWhiteSpace('    ')
                      PsiComment(comment)('// problem here')
                      PsiWhiteSpace('\n        ')
                      CaseClause
                        PsiElement(case)('case')
                        PsiWhiteSpace(' ')
                        StableElementPattern
                          ReferenceExpression: Busy
                            PsiElement(identifier)('Busy')
                        PsiWhiteSpace('       ')
                        PsiElement(=>)('=>')
                        PsiWhiteSpace(' ')
                        BlockOfExpressions
                          ThrowStatement
                            PsiElement(throw)('throw')
                            PsiWhiteSpace(' ')
                            ScNewTemplateDefinition: <anonymous>
                              PsiElement(new)('new')
                              PsiWhiteSpace(' ')
                              ExtendsBlock
                                TemplateParents
                                  ConstructorInvocation
                                    SimpleType: IllegalStateException
                                      CodeReferenceElement: IllegalStateException
                                        PsiElement(identifier)('IllegalStateException')
                                    ArgumentList
                                      PsiElement(()('(')
                                      StringLiteral
                                        PsiElement(string content)('"Cyclic object graph"')
                                      PsiElement())(')')
                    PsiWhiteSpace('\n      ')
                    PsiElement(})('}')
              PsiWhiteSpace('\n\n    ')
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                StableElementPattern
                  ReferenceExpression: None
                    PsiElement(identifier)('None')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                BlockOfExpressions
                  StringLiteral
                    PsiElement(string content)('"bar"')
            PsiWhiteSpace('\n  ')
            PsiElement(})('}')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
