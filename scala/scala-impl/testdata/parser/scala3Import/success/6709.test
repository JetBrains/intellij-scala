object Foo {
  type LeafElem[X] = X match {
    case String      => Char
    case Array[t]    => LeafElem[t]
    case Iterable[t] => LeafElem[t]
    case AnyVal      => X
  }

  def leafElem[X](x: X): LeafElem[X] =
    x match {
      case x: String      => x.charAt(0)
      case x: Array[t]    => leafElem(x(0))
      case x: Iterable[t] => leafElem(x.head)
      case _: AnyVal      => x
    }

  def leafElem2[X](x: X): LeafElem[X] =
    x match {
      case _: String   => leafElem[X](x)
      case w: Array[t] => leafElem[X](x)
    }
}

object Bar {
  import compiletime.ops.int.S

  type Plus[A <: Int, B <: Int] <: Int =
    A match {
      case 0    => B
      case S[p] => S[Plus[p, B]]
    }

  def plus[A <: Int, B <: Int](a: A, b: B): Plus[A, B] =
    a match {
      case _: 0    => b
      case a: S[p] => succ(plus(pred(a), b))
    }

  def pred[X <: Int](x: S[X]): X = (x - 1).asInstanceOf
  def succ[X <: Int](x: X): S[X] = (x + 1).asInstanceOf

  val nine: 9 = plus[4, 5](4, 5)
}

object Main {
  enum BinNat {
    case Zero
    // 2n + 1
    case Odd[N <: BinNat](n: N)
    // 2(n + 1)
    case Even[N <: BinNat](n: N)
  }

  import BinNat.*

  type Inc[N <: BinNat] <: BinNat =
    N match {
      case Zero.type => Odd[Zero.type]
      case Odd[n]    => Even[n]
      case Even[n]   => Odd[Inc[n]]
    }

  def inc[N <: BinNat](b: N): Inc[N] =
    b match {
      case _: Zero.type => new Odd(Zero)
      case o: Odd[n]    => new Even(o.n)
      case e: Even[n]   =>
        // 2(n + 1) + 1 = 2(inc(n)) + 1
        new Odd(inc(e.n))
    }
}
-----
ScalaFile
  ScObject: Foo
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Foo')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScTypeAliasDefinition: LeafElem
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('LeafElem')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: X
              PsiElement(identifier)('X')
            PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MatchType: X match {
    case String      => Char
    case Array[t]    => LeafElem[t]
    case Iterable[t] => LeafElem[t]
    case AnyVal      => X
  }
            SimpleType: X
              CodeReferenceElement: X
                PsiElement(identifier)('X')
            PsiWhiteSpace(' ')
            PsiElement(match)('match')
            PsiWhiteSpace(' ')
            PsiElement({)('{')
            PsiWhiteSpace('\n    ')
            ScMatchTypeCasesImpl(match type cases)
              ScMatchTypeCaseImpl(match type case)
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                SimpleType: String
                  CodeReferenceElement: String
                    PsiElement(identifier)('String')
                PsiWhiteSpace('      ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                SimpleType: Char
                  CodeReferenceElement: Char
                    PsiElement(identifier)('Char')
              PsiWhiteSpace('\n    ')
              ScMatchTypeCaseImpl(match type case)
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                ParametrizedType: Array[t]
                  SimpleType: Array
                    CodeReferenceElement: Array
                      PsiElement(identifier)('Array')
                  TypeArgumentsList
                    PsiElement([)('[')
                    TypeVariable: t
                      PsiElement(identifier)('t')
                    PsiElement(])(']')
                PsiWhiteSpace('    ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                ParametrizedType: LeafElem[t]
                  SimpleType: LeafElem
                    CodeReferenceElement: LeafElem
                      PsiElement(identifier)('LeafElem')
                  TypeArgumentsList
                    PsiElement([)('[')
                    SimpleType: t
                      CodeReferenceElement: t
                        PsiElement(identifier)('t')
                    PsiElement(])(']')
              PsiWhiteSpace('\n    ')
              ScMatchTypeCaseImpl(match type case)
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                ParametrizedType: Iterable[t]
                  SimpleType: Iterable
                    CodeReferenceElement: Iterable
                      PsiElement(identifier)('Iterable')
                  TypeArgumentsList
                    PsiElement([)('[')
                    TypeVariable: t
                      PsiElement(identifier)('t')
                    PsiElement(])(']')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                ParametrizedType: LeafElem[t]
                  SimpleType: LeafElem
                    CodeReferenceElement: LeafElem
                      PsiElement(identifier)('LeafElem')
                  TypeArgumentsList
                    PsiElement([)('[')
                    SimpleType: t
                      CodeReferenceElement: t
                        PsiElement(identifier)('t')
                    PsiElement(])(']')
              PsiWhiteSpace('\n    ')
              ScMatchTypeCaseImpl(match type case)
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                SimpleType: AnyVal
                  CodeReferenceElement: AnyVal
                    PsiElement(identifier)('AnyVal')
                PsiWhiteSpace('      ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                SimpleType: X
                  CodeReferenceElement: X
                    PsiElement(identifier)('X')
            PsiWhiteSpace('\n  ')
            PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: leafElem
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('leafElem')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: X
              PsiElement(identifier)('X')
            PsiElement(])(']')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: x
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: X
                    CodeReferenceElement: X
                      PsiElement(identifier)('X')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: LeafElem[X]
            SimpleType: LeafElem
              CodeReferenceElement: LeafElem
                PsiElement(identifier)('LeafElem')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: X
                CodeReferenceElement: X
                  PsiElement(identifier)('X')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace('\n    ')
          MatchStatement
            ReferenceExpression: x
              PsiElement(identifier)('x')
            PsiWhiteSpace(' ')
            PsiElement(match)('match')
            PsiWhiteSpace(' ')
            PsiElement({)('{')
            PsiWhiteSpace('\n      ')
            CaseClauses
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                Scala3 TypedPattern
                  ReferencePattern: x
                    PsiElement(identifier)('x')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  TypePattern
                    SimpleType: String
                      CodeReferenceElement: String
                        PsiElement(identifier)('String')
                PsiWhiteSpace('      ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                BlockOfExpressions
                  MethodCall
                    ReferenceExpression: x.charAt
                      ReferenceExpression: x
                        PsiElement(identifier)('x')
                      PsiElement(.)('.')
                      PsiElement(identifier)('charAt')
                    ArgumentList
                      PsiElement(()('(')
                      IntegerLiteral
                        PsiElement(integer)('0')
                      PsiElement())(')')
              PsiWhiteSpace('\n      ')
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                Scala3 TypedPattern
                  ReferencePattern: x
                    PsiElement(identifier)('x')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  TypePattern
                    ParametrizedType: Array[t]
                      SimpleType: Array
                        CodeReferenceElement: Array
                          PsiElement(identifier)('Array')
                      TypeArgumentsList
                        PsiElement([)('[')
                        TypeVariable: t
                          PsiElement(identifier)('t')
                        PsiElement(])(']')
                PsiWhiteSpace('    ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                BlockOfExpressions
                  MethodCall
                    ReferenceExpression: leafElem
                      PsiElement(identifier)('leafElem')
                    ArgumentList
                      PsiElement(()('(')
                      MethodCall
                        ReferenceExpression: x
                          PsiElement(identifier)('x')
                        ArgumentList
                          PsiElement(()('(')
                          IntegerLiteral
                            PsiElement(integer)('0')
                          PsiElement())(')')
                      PsiElement())(')')
              PsiWhiteSpace('\n      ')
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                Scala3 TypedPattern
                  ReferencePattern: x
                    PsiElement(identifier)('x')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  TypePattern
                    ParametrizedType: Iterable[t]
                      SimpleType: Iterable
                        CodeReferenceElement: Iterable
                          PsiElement(identifier)('Iterable')
                      TypeArgumentsList
                        PsiElement([)('[')
                        TypeVariable: t
                          PsiElement(identifier)('t')
                        PsiElement(])(']')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                BlockOfExpressions
                  MethodCall
                    ReferenceExpression: leafElem
                      PsiElement(identifier)('leafElem')
                    ArgumentList
                      PsiElement(()('(')
                      ReferenceExpression: x.head
                        ReferenceExpression: x
                          PsiElement(identifier)('x')
                        PsiElement(.)('.')
                        PsiElement(identifier)('head')
                      PsiElement())(')')
              PsiWhiteSpace('\n      ')
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                Scala3 TypedPattern
                  WildcardPattern
                    PsiElement(_)('_')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  TypePattern
                    SimpleType: AnyVal
                      CodeReferenceElement: AnyVal
                        PsiElement(identifier)('AnyVal')
                PsiWhiteSpace('      ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                BlockOfExpressions
                  ReferenceExpression: x
                    PsiElement(identifier)('x')
            PsiWhiteSpace('\n    ')
            PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: leafElem2
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('leafElem2')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: X
              PsiElement(identifier)('X')
            PsiElement(])(']')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: x
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: X
                    CodeReferenceElement: X
                      PsiElement(identifier)('X')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: LeafElem[X]
            SimpleType: LeafElem
              CodeReferenceElement: LeafElem
                PsiElement(identifier)('LeafElem')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: X
                CodeReferenceElement: X
                  PsiElement(identifier)('X')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace('\n    ')
          MatchStatement
            ReferenceExpression: x
              PsiElement(identifier)('x')
            PsiWhiteSpace(' ')
            PsiElement(match)('match')
            PsiWhiteSpace(' ')
            PsiElement({)('{')
            PsiWhiteSpace('\n      ')
            CaseClauses
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                Scala3 TypedPattern
                  WildcardPattern
                    PsiElement(_)('_')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  TypePattern
                    SimpleType: String
                      CodeReferenceElement: String
                        PsiElement(identifier)('String')
                PsiWhiteSpace('   ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                BlockOfExpressions
                  MethodCall
                    GenericCall
                      ReferenceExpression: leafElem
                        PsiElement(identifier)('leafElem')
                      TypeArgumentsList
                        PsiElement([)('[')
                        SimpleType: X
                          CodeReferenceElement: X
                            PsiElement(identifier)('X')
                        PsiElement(])(']')
                    ArgumentList
                      PsiElement(()('(')
                      ReferenceExpression: x
                        PsiElement(identifier)('x')
                      PsiElement())(')')
              PsiWhiteSpace('\n      ')
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                Scala3 TypedPattern
                  ReferencePattern: w
                    PsiElement(identifier)('w')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  TypePattern
                    ParametrizedType: Array[t]
                      SimpleType: Array
                        CodeReferenceElement: Array
                          PsiElement(identifier)('Array')
                      TypeArgumentsList
                        PsiElement([)('[')
                        TypeVariable: t
                          PsiElement(identifier)('t')
                        PsiElement(])(']')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                BlockOfExpressions
                  MethodCall
                    GenericCall
                      ReferenceExpression: leafElem
                        PsiElement(identifier)('leafElem')
                      TypeArgumentsList
                        PsiElement([)('[')
                        SimpleType: X
                          CodeReferenceElement: X
                            PsiElement(identifier)('X')
                        PsiElement(])(']')
                    ArgumentList
                      PsiElement(()('(')
                      ReferenceExpression: x
                        PsiElement(identifier)('x')
                      PsiElement())(')')
            PsiWhiteSpace('\n    ')
            PsiElement(})('}')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScObject: Bar
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Bar')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScImportStatement
          PsiElement(import)('import')
          PsiWhiteSpace(' ')
          ImportExpression
            CodeReferenceElement: compiletime.ops.int.S
              CodeReferenceElement: compiletime.ops.int
                CodeReferenceElement: compiletime.ops
                  CodeReferenceElement: compiletime
                    PsiElement(identifier)('compiletime')
                  PsiElement(.)('.')
                  PsiElement(identifier)('ops')
                PsiElement(.)('.')
                PsiElement(identifier)('int')
              PsiElement(.)('.')
              PsiElement(identifier)('S')
        PsiWhiteSpace('\n\n  ')
        ScTypeAliasDefinition: Plus
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Plus')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: A
              PsiElement(identifier)('A')
              PsiWhiteSpace(' ')
              PsiElement(<:)('<:')
              PsiWhiteSpace(' ')
              SimpleType: Int
                CodeReferenceElement: Int
                  PsiElement(identifier)('Int')
            PsiElement(,)(',')
            PsiWhiteSpace(' ')
            TypeParameter: B
              PsiElement(identifier)('B')
              PsiWhiteSpace(' ')
              PsiElement(<:)('<:')
              PsiWhiteSpace(' ')
              SimpleType: Int
                CodeReferenceElement: Int
                  PsiElement(identifier)('Int')
            PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(<:)('<:')
          PsiWhiteSpace(' ')
          SimpleType: Int
            CodeReferenceElement: Int
              PsiElement(identifier)('Int')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace('\n    ')
          MatchType: A match {
      case 0    => B
      case S[p] => S[Plus[p, B]]
    }
            SimpleType: A
              CodeReferenceElement: A
                PsiElement(identifier)('A')
            PsiWhiteSpace(' ')
            PsiElement(match)('match')
            PsiWhiteSpace(' ')
            PsiElement({)('{')
            PsiWhiteSpace('\n      ')
            ScMatchTypeCasesImpl(match type cases)
              ScMatchTypeCaseImpl(match type case)
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                LiteralType: 0
                  IntegerLiteral
                    PsiElement(integer)('0')
                PsiWhiteSpace('    ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                SimpleType: B
                  CodeReferenceElement: B
                    PsiElement(identifier)('B')
              PsiWhiteSpace('\n      ')
              ScMatchTypeCaseImpl(match type case)
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                ParametrizedType: S[p]
                  SimpleType: S
                    CodeReferenceElement: S
                      PsiElement(identifier)('S')
                  TypeArgumentsList
                    PsiElement([)('[')
                    TypeVariable: p
                      PsiElement(identifier)('p')
                    PsiElement(])(']')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                ParametrizedType: S[Plus[p, B]]
                  SimpleType: S
                    CodeReferenceElement: S
                      PsiElement(identifier)('S')
                  TypeArgumentsList
                    PsiElement([)('[')
                    ParametrizedType: Plus[p, B]
                      SimpleType: Plus
                        CodeReferenceElement: Plus
                          PsiElement(identifier)('Plus')
                      TypeArgumentsList
                        PsiElement([)('[')
                        SimpleType: p
                          CodeReferenceElement: p
                            PsiElement(identifier)('p')
                        PsiElement(,)(',')
                        PsiWhiteSpace(' ')
                        SimpleType: B
                          CodeReferenceElement: B
                            PsiElement(identifier)('B')
                        PsiElement(])(']')
                    PsiElement(])(']')
            PsiWhiteSpace('\n    ')
            PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: plus
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('plus')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: A
              PsiElement(identifier)('A')
              PsiWhiteSpace(' ')
              PsiElement(<:)('<:')
              PsiWhiteSpace(' ')
              SimpleType: Int
                CodeReferenceElement: Int
                  PsiElement(identifier)('Int')
            PsiElement(,)(',')
            PsiWhiteSpace(' ')
            TypeParameter: B
              PsiElement(identifier)('B')
              PsiWhiteSpace(' ')
              PsiElement(<:)('<:')
              PsiWhiteSpace(' ')
              SimpleType: Int
                CodeReferenceElement: Int
                  PsiElement(identifier)('Int')
            PsiElement(])(']')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: a
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('a')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: A
                    CodeReferenceElement: A
                      PsiElement(identifier)('A')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              Parameter: b
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('b')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: B
                    CodeReferenceElement: B
                      PsiElement(identifier)('B')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: Plus[A, B]
            SimpleType: Plus
              CodeReferenceElement: Plus
                PsiElement(identifier)('Plus')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: A
                CodeReferenceElement: A
                  PsiElement(identifier)('A')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              SimpleType: B
                CodeReferenceElement: B
                  PsiElement(identifier)('B')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace('\n    ')
          MatchStatement
            ReferenceExpression: a
              PsiElement(identifier)('a')
            PsiWhiteSpace(' ')
            PsiElement(match)('match')
            PsiWhiteSpace(' ')
            PsiElement({)('{')
            PsiWhiteSpace('\n      ')
            CaseClauses
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                Scala3 TypedPattern
                  WildcardPattern
                    PsiElement(_)('_')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  TypePattern
                    LiteralType: 0
                      IntegerLiteral
                        PsiElement(integer)('0')
                PsiWhiteSpace('    ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                BlockOfExpressions
                  ReferenceExpression: b
                    PsiElement(identifier)('b')
              PsiWhiteSpace('\n      ')
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                Scala3 TypedPattern
                  ReferencePattern: a
                    PsiElement(identifier)('a')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  TypePattern
                    ParametrizedType: S[p]
                      SimpleType: S
                        CodeReferenceElement: S
                          PsiElement(identifier)('S')
                      TypeArgumentsList
                        PsiElement([)('[')
                        TypeVariable: p
                          PsiElement(identifier)('p')
                        PsiElement(])(']')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                BlockOfExpressions
                  MethodCall
                    ReferenceExpression: succ
                      PsiElement(identifier)('succ')
                    ArgumentList
                      PsiElement(()('(')
                      MethodCall
                        ReferenceExpression: plus
                          PsiElement(identifier)('plus')
                        ArgumentList
                          PsiElement(()('(')
                          MethodCall
                            ReferenceExpression: pred
                              PsiElement(identifier)('pred')
                            ArgumentList
                              PsiElement(()('(')
                              ReferenceExpression: a
                                PsiElement(identifier)('a')
                              PsiElement())(')')
                          PsiElement(,)(',')
                          PsiWhiteSpace(' ')
                          ReferenceExpression: b
                            PsiElement(identifier)('b')
                          PsiElement())(')')
                      PsiElement())(')')
            PsiWhiteSpace('\n    ')
            PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: pred
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('pred')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: X
              PsiElement(identifier)('X')
              PsiWhiteSpace(' ')
              PsiElement(<:)('<:')
              PsiWhiteSpace(' ')
              SimpleType: Int
                CodeReferenceElement: Int
                  PsiElement(identifier)('Int')
            PsiElement(])(']')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: x
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  ParametrizedType: S[X]
                    SimpleType: S
                      CodeReferenceElement: S
                        PsiElement(identifier)('S')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: X
                        CodeReferenceElement: X
                          PsiElement(identifier)('X')
                      PsiElement(])(']')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: X
            CodeReferenceElement: X
              PsiElement(identifier)('X')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: (x - 1).asInstanceOf
            ExpressionInParenthesis
              PsiElement(()('(')
              InfixExpression
                ReferenceExpression: x
                  PsiElement(identifier)('x')
                PsiWhiteSpace(' ')
                ReferenceExpression: -
                  PsiElement(identifier)('-')
                PsiWhiteSpace(' ')
                IntegerLiteral
                  PsiElement(integer)('1')
              PsiElement())(')')
            PsiElement(.)('.')
            PsiElement(identifier)('asInstanceOf')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: succ
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('succ')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: X
              PsiElement(identifier)('X')
              PsiWhiteSpace(' ')
              PsiElement(<:)('<:')
              PsiWhiteSpace(' ')
              SimpleType: Int
                CodeReferenceElement: Int
                  PsiElement(identifier)('Int')
            PsiElement(])(']')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: x
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: X
                    CodeReferenceElement: X
                      PsiElement(identifier)('X')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: S[X]
            SimpleType: S
              CodeReferenceElement: S
                PsiElement(identifier)('S')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: X
                CodeReferenceElement: X
                  PsiElement(identifier)('X')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: (x + 1).asInstanceOf
            ExpressionInParenthesis
              PsiElement(()('(')
              InfixExpression
                ReferenceExpression: x
                  PsiElement(identifier)('x')
                PsiWhiteSpace(' ')
                ReferenceExpression: +
                  PsiElement(identifier)('+')
                PsiWhiteSpace(' ')
                IntegerLiteral
                  PsiElement(integer)('1')
              PsiElement())(')')
            PsiElement(.)('.')
            PsiElement(identifier)('asInstanceOf')
        PsiWhiteSpace('\n\n  ')
        ScPatternDefinition: nine
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: nine
              PsiElement(identifier)('nine')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          LiteralType: 9
            IntegerLiteral
              PsiElement(integer)('9')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            GenericCall
              ReferenceExpression: plus
                PsiElement(identifier)('plus')
              TypeArgumentsList
                PsiElement([)('[')
                LiteralType: 4
                  IntegerLiteral
                    PsiElement(integer)('4')
                PsiElement(,)(',')
                PsiWhiteSpace(' ')
                LiteralType: 5
                  IntegerLiteral
                    PsiElement(integer)('5')
                PsiElement(])(']')
            ArgumentList
              PsiElement(()('(')
              IntegerLiteral
                PsiElement(integer)('4')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              IntegerLiteral
                PsiElement(integer)('5')
              PsiElement())(')')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScObject: Main
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Main')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScEnum: BinNat
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(enum)('enum')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('BinNat')
          PrimaryConstructor
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            Parameters
              <empty list>
          PsiWhiteSpace(' ')
          ExtendsBlock
            ScTemplateBody
              PsiElement({)('{')
              PsiWhiteSpace('\n    ')
              ScEnumCases: Zero
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                ScEnumSingletonCase: Zero
                  PsiElement(identifier)('Zero')
                  ExtendsBlock
                    <empty list>
              PsiWhiteSpace('\n    ')
              ScEnumCases: Odd
                PsiComment(comment)('// 2n + 1')
                PsiWhiteSpace('\n    ')
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                ScEnumClassCase: Odd
                  PsiElement(identifier)('Odd')
                  TypeParameterClause
                    PsiElement([)('[')
                    TypeParameter: N
                      PsiElement(identifier)('N')
                      PsiWhiteSpace(' ')
                      PsiElement(<:)('<:')
                      PsiWhiteSpace(' ')
                      SimpleType: BinNat
                        CodeReferenceElement: BinNat
                          PsiElement(identifier)('BinNat')
                    PsiElement(])(']')
                  PrimaryConstructor
                    AnnotationsList
                      <empty list>
                    Modifiers
                      <empty list>
                    Parameters
                      ParametersClause
                        PsiElement(()('(')
                        ClassParameter: n
                          AnnotationsList
                            <empty list>
                          Modifiers
                            <empty list>
                          PsiElement(identifier)('n')
                          PsiElement(:)(':')
                          PsiWhiteSpace(' ')
                          ParameterType
                            SimpleType: N
                              CodeReferenceElement: N
                                PsiElement(identifier)('N')
                        PsiElement())(')')
                  ExtendsBlock
                    <empty list>
              PsiWhiteSpace('\n    ')
              ScEnumCases: Even
                PsiComment(comment)('// 2(n + 1)')
                PsiWhiteSpace('\n    ')
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                ScEnumClassCase: Even
                  PsiElement(identifier)('Even')
                  TypeParameterClause
                    PsiElement([)('[')
                    TypeParameter: N
                      PsiElement(identifier)('N')
                      PsiWhiteSpace(' ')
                      PsiElement(<:)('<:')
                      PsiWhiteSpace(' ')
                      SimpleType: BinNat
                        CodeReferenceElement: BinNat
                          PsiElement(identifier)('BinNat')
                    PsiElement(])(']')
                  PrimaryConstructor
                    AnnotationsList
                      <empty list>
                    Modifiers
                      <empty list>
                    Parameters
                      ParametersClause
                        PsiElement(()('(')
                        ClassParameter: n
                          AnnotationsList
                            <empty list>
                          Modifiers
                            <empty list>
                          PsiElement(identifier)('n')
                          PsiElement(:)(':')
                          PsiWhiteSpace(' ')
                          ParameterType
                            SimpleType: N
                              CodeReferenceElement: N
                                PsiElement(identifier)('N')
                        PsiElement())(')')
                  ExtendsBlock
                    <empty list>
              PsiWhiteSpace('\n  ')
              PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        ScImportStatement
          PsiElement(import)('import')
          PsiWhiteSpace(' ')
          ImportExpression
            CodeReferenceElement: BinNat
              PsiElement(identifier)('BinNat')
            PsiElement(.)('.')
            PsiElement(*)('*')
        PsiWhiteSpace('\n\n  ')
        ScTypeAliasDefinition: Inc
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Inc')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: N
              PsiElement(identifier)('N')
              PsiWhiteSpace(' ')
              PsiElement(<:)('<:')
              PsiWhiteSpace(' ')
              SimpleType: BinNat
                CodeReferenceElement: BinNat
                  PsiElement(identifier)('BinNat')
            PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(<:)('<:')
          PsiWhiteSpace(' ')
          SimpleType: BinNat
            CodeReferenceElement: BinNat
              PsiElement(identifier)('BinNat')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace('\n    ')
          MatchType: N match {
      case Zero.type => Odd[Zero.type]
      case Odd[n]    => Even[n]
      case Even[n]   => Odd[Inc[n]]
    }
            SimpleType: N
              CodeReferenceElement: N
                PsiElement(identifier)('N')
            PsiWhiteSpace(' ')
            PsiElement(match)('match')
            PsiWhiteSpace(' ')
            PsiElement({)('{')
            PsiWhiteSpace('\n      ')
            ScMatchTypeCasesImpl(match type cases)
              ScMatchTypeCaseImpl(match type case)
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                SimpleType: Zero.type
                  CodeReferenceElement: Zero
                    PsiElement(identifier)('Zero')
                  PsiElement(.)('.')
                  PsiElement(type)('type')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                ParametrizedType: Odd[Zero.type]
                  SimpleType: Odd
                    CodeReferenceElement: Odd
                      PsiElement(identifier)('Odd')
                  TypeArgumentsList
                    PsiElement([)('[')
                    SimpleType: Zero.type
                      CodeReferenceElement: Zero
                        PsiElement(identifier)('Zero')
                      PsiElement(.)('.')
                      PsiElement(type)('type')
                    PsiElement(])(']')
              PsiWhiteSpace('\n      ')
              ScMatchTypeCaseImpl(match type case)
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                ParametrizedType: Odd[n]
                  SimpleType: Odd
                    CodeReferenceElement: Odd
                      PsiElement(identifier)('Odd')
                  TypeArgumentsList
                    PsiElement([)('[')
                    TypeVariable: n
                      PsiElement(identifier)('n')
                    PsiElement(])(']')
                PsiWhiteSpace('    ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                ParametrizedType: Even[n]
                  SimpleType: Even
                    CodeReferenceElement: Even
                      PsiElement(identifier)('Even')
                  TypeArgumentsList
                    PsiElement([)('[')
                    SimpleType: n
                      CodeReferenceElement: n
                        PsiElement(identifier)('n')
                    PsiElement(])(']')
              PsiWhiteSpace('\n      ')
              ScMatchTypeCaseImpl(match type case)
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                ParametrizedType: Even[n]
                  SimpleType: Even
                    CodeReferenceElement: Even
                      PsiElement(identifier)('Even')
                  TypeArgumentsList
                    PsiElement([)('[')
                    TypeVariable: n
                      PsiElement(identifier)('n')
                    PsiElement(])(']')
                PsiWhiteSpace('   ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                ParametrizedType: Odd[Inc[n]]
                  SimpleType: Odd
                    CodeReferenceElement: Odd
                      PsiElement(identifier)('Odd')
                  TypeArgumentsList
                    PsiElement([)('[')
                    ParametrizedType: Inc[n]
                      SimpleType: Inc
                        CodeReferenceElement: Inc
                          PsiElement(identifier)('Inc')
                      TypeArgumentsList
                        PsiElement([)('[')
                        SimpleType: n
                          CodeReferenceElement: n
                            PsiElement(identifier)('n')
                        PsiElement(])(']')
                    PsiElement(])(']')
            PsiWhiteSpace('\n    ')
            PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: inc
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('inc')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: N
              PsiElement(identifier)('N')
              PsiWhiteSpace(' ')
              PsiElement(<:)('<:')
              PsiWhiteSpace(' ')
              SimpleType: BinNat
                CodeReferenceElement: BinNat
                  PsiElement(identifier)('BinNat')
            PsiElement(])(']')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: b
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('b')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: N
                    CodeReferenceElement: N
                      PsiElement(identifier)('N')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: Inc[N]
            SimpleType: Inc
              CodeReferenceElement: Inc
                PsiElement(identifier)('Inc')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: N
                CodeReferenceElement: N
                  PsiElement(identifier)('N')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace('\n    ')
          MatchStatement
            ReferenceExpression: b
              PsiElement(identifier)('b')
            PsiWhiteSpace(' ')
            PsiElement(match)('match')
            PsiWhiteSpace(' ')
            PsiElement({)('{')
            PsiWhiteSpace('\n      ')
            CaseClauses
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                Scala3 TypedPattern
                  WildcardPattern
                    PsiElement(_)('_')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  TypePattern
                    SimpleType: Zero.type
                      CodeReferenceElement: Zero
                        PsiElement(identifier)('Zero')
                      PsiElement(.)('.')
                      PsiElement(type)('type')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                BlockOfExpressions
                  ScNewTemplateDefinition: <anonymous>
                    PsiElement(new)('new')
                    PsiWhiteSpace(' ')
                    ExtendsBlock
                      TemplateParents
                        ConstructorInvocation
                          SimpleType: Odd
                            CodeReferenceElement: Odd
                              PsiElement(identifier)('Odd')
                          ArgumentList
                            PsiElement(()('(')
                            ReferenceExpression: Zero
                              PsiElement(identifier)('Zero')
                            PsiElement())(')')
              PsiWhiteSpace('\n      ')
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                Scala3 TypedPattern
                  ReferencePattern: o
                    PsiElement(identifier)('o')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  TypePattern
                    ParametrizedType: Odd[n]
                      SimpleType: Odd
                        CodeReferenceElement: Odd
                          PsiElement(identifier)('Odd')
                      TypeArgumentsList
                        PsiElement([)('[')
                        TypeVariable: n
                          PsiElement(identifier)('n')
                        PsiElement(])(']')
                PsiWhiteSpace('    ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                BlockOfExpressions
                  ScNewTemplateDefinition: <anonymous>
                    PsiElement(new)('new')
                    PsiWhiteSpace(' ')
                    ExtendsBlock
                      TemplateParents
                        ConstructorInvocation
                          SimpleType: Even
                            CodeReferenceElement: Even
                              PsiElement(identifier)('Even')
                          ArgumentList
                            PsiElement(()('(')
                            ReferenceExpression: o.n
                              ReferenceExpression: o
                                PsiElement(identifier)('o')
                              PsiElement(.)('.')
                              PsiElement(identifier)('n')
                            PsiElement())(')')
              PsiWhiteSpace('\n      ')
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                Scala3 TypedPattern
                  ReferencePattern: e
                    PsiElement(identifier)('e')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  TypePattern
                    ParametrizedType: Even[n]
                      SimpleType: Even
                        CodeReferenceElement: Even
                          PsiElement(identifier)('Even')
                      TypeArgumentsList
                        PsiElement([)('[')
                        TypeVariable: n
                          PsiElement(identifier)('n')
                        PsiElement(])(']')
                PsiWhiteSpace('   ')
                PsiElement(=>)('=>')
                PsiWhiteSpace('\n        ')
                PsiComment(comment)('// 2(n + 1) + 1 = 2(inc(n)) + 1')
                PsiWhiteSpace('\n        ')
                BlockOfExpressions
                  ScNewTemplateDefinition: <anonymous>
                    PsiElement(new)('new')
                    PsiWhiteSpace(' ')
                    ExtendsBlock
                      TemplateParents
                        ConstructorInvocation
                          SimpleType: Odd
                            CodeReferenceElement: Odd
                              PsiElement(identifier)('Odd')
                          ArgumentList
                            PsiElement(()('(')
                            MethodCall
                              ReferenceExpression: inc
                                PsiElement(identifier)('inc')
                              ArgumentList
                                PsiElement(()('(')
                                ReferenceExpression: e.n
                                  ReferenceExpression: e
                                    PsiElement(identifier)('e')
                                  PsiElement(.)('.')
                                  PsiElement(identifier)('n')
                                PsiElement())(')')
                            PsiElement())(')')
            PsiWhiteSpace('\n    ')
            PsiElement(})('}')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
