trait TestInferrence[T] {

  def getInt(t: T): Int

}

object TestIntInferrence extends TestInferrence[Int] {
  override def getInt(i: Int) = i
}

object InferrenceTest {

  def createNumberHandler[T](
    testInfer: TestInferrence[T] = TestIntInferrence,
    handlers: Map[String, T => Unit] = Map.empty,
  ): T => Unit = {

    (t: T) => {
      testInfer.getInt(t)
      ()
    }

  }
}

class InferrenceTest {

  val handler = InferrenceTest.createNumberHandler()

}
-----
ScalaFile
  ScTrait: TestInferrence
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('TestInferrence')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: T
        PsiElement(identifier)('T')
      PsiElement(])(']')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDeclaration: getInt
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('getInt')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: t
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('t')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: T
                    CodeReferenceElement: T
                      PsiElement(identifier)('T')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Int
            CodeReferenceElement: Int
              PsiElement(identifier)('Int')
        PsiWhiteSpace('\n\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScObject: TestIntInferrence
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('TestIntInferrence')
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          ParametrizedType: TestInferrence[Int]
            SimpleType: TestInferrence
              CodeReferenceElement: TestInferrence
                PsiElement(identifier)('TestInferrence')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: Int
                CodeReferenceElement: Int
                  PsiElement(identifier)('Int')
              PsiElement(])(']')
      PsiWhiteSpace(' ')
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: getInt
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(override)('override')
          PsiWhiteSpace(' ')
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('getInt')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: i
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('i')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Int
                    CodeReferenceElement: Int
                      PsiElement(identifier)('Int')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: i
            PsiElement(identifier)('i')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScObject: InferrenceTest
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('InferrenceTest')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: createNumberHandler
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('createNumberHandler')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: T
              PsiElement(identifier)('T')
            PsiElement(])(']')
          Parameters
            ParametersClause
              PsiElement(()('(')
              PsiWhiteSpace('\n    ')
              Parameter: testInfer
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('testInfer')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  ParametrizedType: TestInferrence[T]
                    SimpleType: TestInferrence
                      CodeReferenceElement: TestInferrence
                        PsiElement(identifier)('TestInferrence')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: T
                        CodeReferenceElement: T
                          PsiElement(identifier)('T')
                      PsiElement(])(']')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                ReferenceExpression: TestIntInferrence
                  PsiElement(identifier)('TestIntInferrence')
              PsiElement(,)(',')
              PsiWhiteSpace('\n    ')
              Parameter: handlers
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('handlers')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  ParametrizedType: Map[String, T => Unit]
                    SimpleType: Map
                      CodeReferenceElement: Map
                        PsiElement(identifier)('Map')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: String
                        CodeReferenceElement: String
                          PsiElement(identifier)('String')
                      PsiElement(,)(',')
                      PsiWhiteSpace(' ')
                      FunctionalType: T => Unit
                        SimpleType: T
                          CodeReferenceElement: T
                            PsiElement(identifier)('T')
                        PsiWhiteSpace(' ')
                        PsiElement(=>)('=>')
                        PsiWhiteSpace(' ')
                        SimpleType: Unit
                          CodeReferenceElement: Unit
                            PsiElement(identifier)('Unit')
                      PsiElement(])(']')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                ReferenceExpression: Map.empty
                  ReferenceExpression: Map
                    PsiElement(identifier)('Map')
                  PsiElement(.)('.')
                  PsiElement(identifier)('empty')
              PsiElement(,)(',')
              PsiWhiteSpace('\n  ')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          FunctionalType: T => Unit
            SimpleType: T
              CodeReferenceElement: T
                PsiElement(identifier)('T')
            PsiWhiteSpace(' ')
            PsiElement(=>)('=>')
            PsiWhiteSpace(' ')
            SimpleType: Unit
              CodeReferenceElement: Unit
                PsiElement(identifier)('Unit')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          BlockExpression
            PsiElement({)('{')
            PsiWhiteSpace('\n\n    ')
            FunctionExpression
              Parameters
                ParametersClause
                  PsiElement(()('(')
                  Parameter: t
                    AnnotationsList
                      <empty list>
                    PsiElement(identifier)('t')
                    PsiElement(:)(':')
                    PsiWhiteSpace(' ')
                    ParameterType
                      SimpleType: T
                        CodeReferenceElement: T
                          PsiElement(identifier)('T')
                  PsiElement())(')')
              PsiWhiteSpace(' ')
              PsiElement(=>)('=>')
              PsiWhiteSpace(' ')
              BlockOfExpressions
                BlockExpression
                  PsiElement({)('{')
                  PsiWhiteSpace('\n      ')
                  MethodCall
                    ReferenceExpression: testInfer.getInt
                      ReferenceExpression: testInfer
                        PsiElement(identifier)('testInfer')
                      PsiElement(.)('.')
                      PsiElement(identifier)('getInt')
                    ArgumentList
                      PsiElement(()('(')
                      ReferenceExpression: t
                        PsiElement(identifier)('t')
                      PsiElement())(')')
                  PsiWhiteSpace('\n      ')
                  UnitExpression
                    PsiElement(()('(')
                    PsiElement())(')')
                  PsiWhiteSpace('\n    ')
                  PsiElement(})('}')
            PsiWhiteSpace('\n\n  ')
            PsiElement(})('}')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScClass: InferrenceTest
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('InferrenceTest')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n\n  ')
        ScPatternDefinition: handler
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: handler
              PsiElement(identifier)('handler')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: InferrenceTest.createNumberHandler
              ReferenceExpression: InferrenceTest
                PsiElement(identifier)('InferrenceTest')
              PsiElement(.)('.')
              PsiElement(identifier)('createNumberHandler')
            ArgumentList
              PsiElement(()('(')
              PsiElement())(')')
        PsiWhiteSpace('\n\n')
        PsiElement(})('}')
