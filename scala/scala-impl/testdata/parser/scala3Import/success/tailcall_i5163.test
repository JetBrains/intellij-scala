import annotation.tailrec

class UnrolledBuffer {
  def remove(idx: Int): Unit = ()
  @tailrec final def remove(idx: Int, count: Int): Unit =
    if (count > 0) {
      remove(idx) // ok: not a recursive call
      remove(idx, count - 1)
    }
}
-----
ScalaFile
  ScImportStatement
    PsiElement(import)('import')
    PsiWhiteSpace(' ')
    ImportExpression
      CodeReferenceElement: annotation.tailrec
        CodeReferenceElement: annotation
          PsiElement(identifier)('annotation')
        PsiElement(.)('.')
        PsiElement(identifier)('tailrec')
  PsiWhiteSpace('\n\n')
  ScClass: UnrolledBuffer
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('UnrolledBuffer')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: remove
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('remove')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: idx
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('idx')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Int
                    CodeReferenceElement: Int
                      PsiElement(identifier)('Int')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Unit
            CodeReferenceElement: Unit
              PsiElement(identifier)('Unit')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          UnitExpression
            PsiElement(()('(')
            PsiElement())(')')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: remove
          AnnotationsList
            Annotation
              PsiElement(@)('@')
              AnnotationExpression
                ConstructorInvocation
                  SimpleType: tailrec
                    CodeReferenceElement: tailrec
                      PsiElement(identifier)('tailrec')
          PsiWhiteSpace(' ')
          Modifiers
            PsiElement(final)('final')
          PsiWhiteSpace(' ')
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('remove')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: idx
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('idx')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Int
                    CodeReferenceElement: Int
                      PsiElement(identifier)('Int')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              Parameter: count
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('count')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Int
                    CodeReferenceElement: Int
                      PsiElement(identifier)('Int')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Unit
            CodeReferenceElement: Unit
              PsiElement(identifier)('Unit')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace('\n    ')
          IfStatement
            PsiElement(if)('if')
            PsiWhiteSpace(' ')
            PsiElement(()('(')
            InfixExpression
              ReferenceExpression: count
                PsiElement(identifier)('count')
              PsiWhiteSpace(' ')
              ReferenceExpression: >
                PsiElement(identifier)('>')
              PsiWhiteSpace(' ')
              IntegerLiteral
                PsiElement(integer)('0')
            PsiElement())(')')
            PsiWhiteSpace(' ')
            BlockExpression
              PsiElement({)('{')
              PsiWhiteSpace('\n      ')
              MethodCall
                ReferenceExpression: remove
                  PsiElement(identifier)('remove')
                ArgumentList
                  PsiElement(()('(')
                  ReferenceExpression: idx
                    PsiElement(identifier)('idx')
                  PsiElement())(')')
              PsiWhiteSpace(' ')
              PsiComment(comment)('// ok: not a recursive call')
              PsiWhiteSpace('\n      ')
              MethodCall
                ReferenceExpression: remove
                  PsiElement(identifier)('remove')
                ArgumentList
                  PsiElement(()('(')
                  ReferenceExpression: idx
                    PsiElement(identifier)('idx')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  InfixExpression
                    ReferenceExpression: count
                      PsiElement(identifier)('count')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: -
                      PsiElement(identifier)('-')
                    PsiWhiteSpace(' ')
                    IntegerLiteral
                      PsiElement(integer)('1')
                  PsiElement())(')')
              PsiWhiteSpace('\n    ')
              PsiElement(})('}')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
