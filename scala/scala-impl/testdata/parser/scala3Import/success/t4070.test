package a {
  // method before classes
  trait Foo {
    def crash(x: Dingus[_]): Unit = x match { case m: Bippy[tv] => () }

    class Dingus[T]
    class Bippy[CC[X] <: Seq[X]]() extends Dingus[CC[Int]]
  }
}

package b {
  // classes before method
  trait Foo {
    class Dingus[T]
    class Bippy[CC[X] <: Seq[X]]() extends Dingus[CC[Int]]

    def crash(x: Dingus[_]): Unit = x match { case m: Bippy[tv] => () }
  }
}


/*
// With crash below the clasess:
% scalac -Dscalac.debug.tvar ./a.scala
[    create] ?_$1                     ( In Foo#crash )
[   setInst] tv[Int]                  ( In Foo#crash, _$1=tv[Int] )
[    create] tv[Int]                  ( In Foo#crash )
[     clone] tv[Int]                  ( Foo#crash )

// With crash above the classes:
% scalac -Dscalac.debug.tvar ./a.scala
[    create] ?tv                      ( In Foo#crash )
./a.scala:2: error: Invalid type application in TypeVar: List(), List(Int)
  def crash(x: Dingus[_]): Unit = x match { case m: Bippy[tv] => () }
                                                  ^
one error found
*/
-----
ScalaFile
  ScPackaging
    PsiElement(package)('package')
    PsiWhiteSpace(' ')
    CodeReferenceElement: a
      PsiElement(identifier)('a')
    PsiWhiteSpace(' ')
    PsiElement({)('{')
    PsiWhiteSpace('\n  ')
    ScTrait: Foo
      PsiComment(comment)('// method before classes')
      PsiWhiteSpace('\n  ')
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      PsiElement(trait)('trait')
      PsiWhiteSpace(' ')
      PsiElement(identifier)('Foo')
      PsiWhiteSpace(' ')
      ExtendsBlock
        ScTemplateBody
          PsiElement({)('{')
          PsiWhiteSpace('\n    ')
          ScFunctionDefinition: crash
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(def)('def')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('crash')
            Parameters
              ParametersClause
                PsiElement(()('(')
                Parameter: x
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(identifier)('x')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    ParametrizedType: Dingus[_]
                      SimpleType: Dingus
                        CodeReferenceElement: Dingus
                          PsiElement(identifier)('Dingus')
                      TypeArgumentsList
                        PsiElement([)('[')
                        WildcardType: _
                          PsiElement(_)('_')
                        PsiElement(])(']')
                PsiElement())(')')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            SimpleType: Unit
              CodeReferenceElement: Unit
                PsiElement(identifier)('Unit')
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace(' ')
            MatchStatement
              ReferenceExpression: x
                PsiElement(identifier)('x')
              PsiWhiteSpace(' ')
              PsiElement(match)('match')
              PsiWhiteSpace(' ')
              PsiElement({)('{')
              PsiWhiteSpace(' ')
              CaseClauses
                CaseClause
                  PsiElement(case)('case')
                  PsiWhiteSpace(' ')
                  Scala3 TypedPattern
                    ReferencePattern: m
                      PsiElement(identifier)('m')
                    PsiElement(:)(':')
                    PsiWhiteSpace(' ')
                    TypePattern
                      ParametrizedType: Bippy[tv]
                        SimpleType: Bippy
                          CodeReferenceElement: Bippy
                            PsiElement(identifier)('Bippy')
                        TypeArgumentsList
                          PsiElement([)('[')
                          TypeVariable: tv
                            PsiElement(identifier)('tv')
                          PsiElement(])(']')
                  PsiWhiteSpace(' ')
                  PsiElement(=>)('=>')
                  PsiWhiteSpace(' ')
                  BlockOfExpressions
                    UnitExpression
                      PsiElement(()('(')
                      PsiElement())(')')
              PsiWhiteSpace(' ')
              PsiElement(})('}')
          PsiWhiteSpace('\n\n    ')
          ScClass: Dingus
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(class)('class')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('Dingus')
            TypeParameterClause
              PsiElement([)('[')
              TypeParameter: T
                PsiElement(identifier)('T')
              PsiElement(])(']')
            PrimaryConstructor
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              Parameters
                <empty list>
            ExtendsBlock
              <empty list>
          PsiWhiteSpace('\n    ')
          ScClass: Bippy
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(class)('class')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('Bippy')
            TypeParameterClause
              PsiElement([)('[')
              TypeParameter: CC
                PsiElement(identifier)('CC')
                TypeParameterClause
                  PsiElement([)('[')
                  TypeParameter: X
                    PsiElement(identifier)('X')
                  PsiElement(])(']')
                PsiWhiteSpace(' ')
                PsiElement(<:)('<:')
                PsiWhiteSpace(' ')
                ParametrizedType: Seq[X]
                  SimpleType: Seq
                    CodeReferenceElement: Seq
                      PsiElement(identifier)('Seq')
                  TypeArgumentsList
                    PsiElement([)('[')
                    SimpleType: X
                      CodeReferenceElement: X
                        PsiElement(identifier)('X')
                    PsiElement(])(']')
              PsiElement(])(']')
            PrimaryConstructor
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              Parameters
                ParametersClause
                  PsiElement(()('(')
                  PsiElement())(')')
            PsiWhiteSpace(' ')
            ExtendsBlock
              PsiElement(extends)('extends')
              PsiWhiteSpace(' ')
              TemplateParents
                ConstructorInvocation
                  ParametrizedType: Dingus[CC[Int]]
                    SimpleType: Dingus
                      CodeReferenceElement: Dingus
                        PsiElement(identifier)('Dingus')
                    TypeArgumentsList
                      PsiElement([)('[')
                      ParametrizedType: CC[Int]
                        SimpleType: CC
                          CodeReferenceElement: CC
                            PsiElement(identifier)('CC')
                        TypeArgumentsList
                          PsiElement([)('[')
                          SimpleType: Int
                            CodeReferenceElement: Int
                              PsiElement(identifier)('Int')
                          PsiElement(])(']')
                      PsiElement(])(']')
          PsiWhiteSpace('\n  ')
          PsiElement(})('}')
    PsiWhiteSpace('\n')
    PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScPackaging
    PsiElement(package)('package')
    PsiWhiteSpace(' ')
    CodeReferenceElement: b
      PsiElement(identifier)('b')
    PsiWhiteSpace(' ')
    PsiElement({)('{')
    PsiWhiteSpace('\n  ')
    ScTrait: Foo
      PsiComment(comment)('// classes before method')
      PsiWhiteSpace('\n  ')
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      PsiElement(trait)('trait')
      PsiWhiteSpace(' ')
      PsiElement(identifier)('Foo')
      PsiWhiteSpace(' ')
      ExtendsBlock
        ScTemplateBody
          PsiElement({)('{')
          PsiWhiteSpace('\n    ')
          ScClass: Dingus
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(class)('class')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('Dingus')
            TypeParameterClause
              PsiElement([)('[')
              TypeParameter: T
                PsiElement(identifier)('T')
              PsiElement(])(']')
            PrimaryConstructor
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              Parameters
                <empty list>
            ExtendsBlock
              <empty list>
          PsiWhiteSpace('\n    ')
          ScClass: Bippy
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(class)('class')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('Bippy')
            TypeParameterClause
              PsiElement([)('[')
              TypeParameter: CC
                PsiElement(identifier)('CC')
                TypeParameterClause
                  PsiElement([)('[')
                  TypeParameter: X
                    PsiElement(identifier)('X')
                  PsiElement(])(']')
                PsiWhiteSpace(' ')
                PsiElement(<:)('<:')
                PsiWhiteSpace(' ')
                ParametrizedType: Seq[X]
                  SimpleType: Seq
                    CodeReferenceElement: Seq
                      PsiElement(identifier)('Seq')
                  TypeArgumentsList
                    PsiElement([)('[')
                    SimpleType: X
                      CodeReferenceElement: X
                        PsiElement(identifier)('X')
                    PsiElement(])(']')
              PsiElement(])(']')
            PrimaryConstructor
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              Parameters
                ParametersClause
                  PsiElement(()('(')
                  PsiElement())(')')
            PsiWhiteSpace(' ')
            ExtendsBlock
              PsiElement(extends)('extends')
              PsiWhiteSpace(' ')
              TemplateParents
                ConstructorInvocation
                  ParametrizedType: Dingus[CC[Int]]
                    SimpleType: Dingus
                      CodeReferenceElement: Dingus
                        PsiElement(identifier)('Dingus')
                    TypeArgumentsList
                      PsiElement([)('[')
                      ParametrizedType: CC[Int]
                        SimpleType: CC
                          CodeReferenceElement: CC
                            PsiElement(identifier)('CC')
                        TypeArgumentsList
                          PsiElement([)('[')
                          SimpleType: Int
                            CodeReferenceElement: Int
                              PsiElement(identifier)('Int')
                          PsiElement(])(']')
                      PsiElement(])(']')
          PsiWhiteSpace('\n\n    ')
          ScFunctionDefinition: crash
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(def)('def')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('crash')
            Parameters
              ParametersClause
                PsiElement(()('(')
                Parameter: x
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(identifier)('x')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    ParametrizedType: Dingus[_]
                      SimpleType: Dingus
                        CodeReferenceElement: Dingus
                          PsiElement(identifier)('Dingus')
                      TypeArgumentsList
                        PsiElement([)('[')
                        WildcardType: _
                          PsiElement(_)('_')
                        PsiElement(])(']')
                PsiElement())(')')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            SimpleType: Unit
              CodeReferenceElement: Unit
                PsiElement(identifier)('Unit')
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace(' ')
            MatchStatement
              ReferenceExpression: x
                PsiElement(identifier)('x')
              PsiWhiteSpace(' ')
              PsiElement(match)('match')
              PsiWhiteSpace(' ')
              PsiElement({)('{')
              PsiWhiteSpace(' ')
              CaseClauses
                CaseClause
                  PsiElement(case)('case')
                  PsiWhiteSpace(' ')
                  Scala3 TypedPattern
                    ReferencePattern: m
                      PsiElement(identifier)('m')
                    PsiElement(:)(':')
                    PsiWhiteSpace(' ')
                    TypePattern
                      ParametrizedType: Bippy[tv]
                        SimpleType: Bippy
                          CodeReferenceElement: Bippy
                            PsiElement(identifier)('Bippy')
                        TypeArgumentsList
                          PsiElement([)('[')
                          TypeVariable: tv
                            PsiElement(identifier)('tv')
                          PsiElement(])(']')
                  PsiWhiteSpace(' ')
                  PsiElement(=>)('=>')
                  PsiWhiteSpace(' ')
                  BlockOfExpressions
                    UnitExpression
                      PsiElement(()('(')
                      PsiElement())(')')
              PsiWhiteSpace(' ')
              PsiElement(})('}')
          PsiWhiteSpace('\n  ')
          PsiElement(})('}')
    PsiWhiteSpace('\n')
    PsiElement(})('}')
  PsiWhiteSpace('\n\n\n')
  PsiComment(BlockComment)('/*\n// With crash below the clasess:\n% scalac -Dscalac.debug.tvar ./a.scala\n[    create] ?_$1                     ( In Foo#crash )\n[   setInst] tv[Int]                  ( In Foo#crash, _$1=tv[Int] )\n[    create] tv[Int]                  ( In Foo#crash )\n[     clone] tv[Int]                  ( Foo#crash )\n\n// With crash above the classes:\n% scalac -Dscalac.debug.tvar ./a.scala\n[    create] ?tv                      ( In Foo#crash )\n./a.scala:2: error: Invalid type application in TypeVar: List(), List(Int)\n  def crash(x: Dingus[_]): Unit = x match { case m: Bippy[tv] => () }\n                                                  ^\none error found\n*/')
