trait AbsFun[@specialized -A, @specialized +B] {
  def apply(x: A): B
}

trait MyPartialFunction[-A, +B] extends AnyRef with AbsFun[A, B]

trait ColMap[A, +B] extends MyPartialFunction[A, B] /*with Collection[(A, B)] */

trait ColSorted[K,+A] extends ColRanged[K,A]

trait ColSortedMap[K,+E] extends ColMap[K,E] with ColSorted[K,Tuple2[K,E]]

trait MutMap[A, B] extends AnyRef
      with ColMap[A, B]

trait ColRanged[K, +A] //extends Iterable[A]

trait JclRanged[K,A] extends ColRanged[K,A] //with MutableIterable[A] {

trait JclMap[K,E] extends /*collection.jcl.MutableIterable[Tuple2[K,E]] with*/ MutMap[K,E]

trait JclSorted[K,A] extends ColSorted[K,A] with JclRanged[K,A]

trait JclSortedMap[K,E] extends ColSortedMap[K,E] with JclMap[K,E] with JclSorted[K,Tuple2[K,E]]

class Foo[A, B] extends JclSortedMap[A, B] {
  def apply(x: A): B = sys.error("NYI")
}

class Bar {
  val x: Foo[Int, Int] = new Foo[Int, Int]
  x.apply(0)
}
-----
ScalaFile
  ScTrait: AbsFun
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('AbsFun')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: A
        AnnotationsList
          Annotation
            PsiElement(@)('@')
            AnnotationExpression
              ConstructorInvocation
                SimpleType: specialized
                  CodeReferenceElement: specialized
                    PsiElement(identifier)('specialized')
        PsiWhiteSpace(' ')
        PsiElement(identifier)('-')
        PsiElement(identifier)('A')
      PsiElement(,)(',')
      PsiWhiteSpace(' ')
      TypeParameter: B
        AnnotationsList
          Annotation
            PsiElement(@)('@')
            AnnotationExpression
              ConstructorInvocation
                SimpleType: specialized
                  CodeReferenceElement: specialized
                    PsiElement(identifier)('specialized')
        PsiWhiteSpace(' ')
        PsiElement(identifier)('+')
        PsiElement(identifier)('B')
      PsiElement(])(']')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDeclaration: apply
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('apply')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: x
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: A
                    CodeReferenceElement: A
                      PsiElement(identifier)('A')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: B
            CodeReferenceElement: B
              PsiElement(identifier)('B')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScTrait: MyPartialFunction
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('MyPartialFunction')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: A
        PsiElement(identifier)('-')
        PsiElement(identifier)('A')
      PsiElement(,)(',')
      PsiWhiteSpace(' ')
      TypeParameter: B
        PsiElement(identifier)('+')
        PsiElement(identifier)('B')
      PsiElement(])(']')
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          SimpleType: AnyRef
            CodeReferenceElement: AnyRef
              PsiElement(identifier)('AnyRef')
        PsiWhiteSpace(' ')
        PsiElement(with)('with')
        PsiWhiteSpace(' ')
        ConstructorInvocation
          ParametrizedType: AbsFun[A, B]
            SimpleType: AbsFun
              CodeReferenceElement: AbsFun
                PsiElement(identifier)('AbsFun')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: A
                CodeReferenceElement: A
                  PsiElement(identifier)('A')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              SimpleType: B
                CodeReferenceElement: B
                  PsiElement(identifier)('B')
              PsiElement(])(']')
  PsiWhiteSpace('\n\n')
  ScTrait: ColMap
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('ColMap')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: A
        PsiElement(identifier)('A')
      PsiElement(,)(',')
      PsiWhiteSpace(' ')
      TypeParameter: B
        PsiElement(identifier)('+')
        PsiElement(identifier)('B')
      PsiElement(])(']')
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          ParametrizedType: MyPartialFunction[A, B]
            SimpleType: MyPartialFunction
              CodeReferenceElement: MyPartialFunction
                PsiElement(identifier)('MyPartialFunction')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: A
                CodeReferenceElement: A
                  PsiElement(identifier)('A')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              SimpleType: B
                CodeReferenceElement: B
                  PsiElement(identifier)('B')
              PsiElement(])(']')
  PsiWhiteSpace(' ')
  PsiComment(BlockComment)('/*with Collection[(A, B)] */')
  PsiWhiteSpace('\n\n')
  ScTrait: ColSorted
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('ColSorted')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: K
        PsiElement(identifier)('K')
      PsiElement(,)(',')
      TypeParameter: A
        PsiElement(identifier)('+')
        PsiElement(identifier)('A')
      PsiElement(])(']')
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          ParametrizedType: ColRanged[K,A]
            SimpleType: ColRanged
              CodeReferenceElement: ColRanged
                PsiElement(identifier)('ColRanged')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: K
                CodeReferenceElement: K
                  PsiElement(identifier)('K')
              PsiElement(,)(',')
              SimpleType: A
                CodeReferenceElement: A
                  PsiElement(identifier)('A')
              PsiElement(])(']')
  PsiWhiteSpace('\n\n')
  ScTrait: ColSortedMap
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('ColSortedMap')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: K
        PsiElement(identifier)('K')
      PsiElement(,)(',')
      TypeParameter: E
        PsiElement(identifier)('+')
        PsiElement(identifier)('E')
      PsiElement(])(']')
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          ParametrizedType: ColMap[K,E]
            SimpleType: ColMap
              CodeReferenceElement: ColMap
                PsiElement(identifier)('ColMap')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: K
                CodeReferenceElement: K
                  PsiElement(identifier)('K')
              PsiElement(,)(',')
              SimpleType: E
                CodeReferenceElement: E
                  PsiElement(identifier)('E')
              PsiElement(])(']')
        PsiWhiteSpace(' ')
        PsiElement(with)('with')
        PsiWhiteSpace(' ')
        ConstructorInvocation
          ParametrizedType: ColSorted[K,Tuple2[K,E]]
            SimpleType: ColSorted
              CodeReferenceElement: ColSorted
                PsiElement(identifier)('ColSorted')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: K
                CodeReferenceElement: K
                  PsiElement(identifier)('K')
              PsiElement(,)(',')
              ParametrizedType: Tuple2[K,E]
                SimpleType: Tuple2
                  CodeReferenceElement: Tuple2
                    PsiElement(identifier)('Tuple2')
                TypeArgumentsList
                  PsiElement([)('[')
                  SimpleType: K
                    CodeReferenceElement: K
                      PsiElement(identifier)('K')
                  PsiElement(,)(',')
                  SimpleType: E
                    CodeReferenceElement: E
                      PsiElement(identifier)('E')
                  PsiElement(])(']')
              PsiElement(])(']')
  PsiWhiteSpace('\n\n')
  ScTrait: MutMap
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('MutMap')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: A
        PsiElement(identifier)('A')
      PsiElement(,)(',')
      PsiWhiteSpace(' ')
      TypeParameter: B
        PsiElement(identifier)('B')
      PsiElement(])(']')
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          SimpleType: AnyRef
            CodeReferenceElement: AnyRef
              PsiElement(identifier)('AnyRef')
        PsiWhiteSpace('\n      ')
        PsiElement(with)('with')
        PsiWhiteSpace(' ')
        ConstructorInvocation
          ParametrizedType: ColMap[A, B]
            SimpleType: ColMap
              CodeReferenceElement: ColMap
                PsiElement(identifier)('ColMap')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: A
                CodeReferenceElement: A
                  PsiElement(identifier)('A')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              SimpleType: B
                CodeReferenceElement: B
                  PsiElement(identifier)('B')
              PsiElement(])(']')
  PsiWhiteSpace('\n\n')
  ScTrait: ColRanged
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('ColRanged')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: K
        PsiElement(identifier)('K')
      PsiElement(,)(',')
      PsiWhiteSpace(' ')
      TypeParameter: A
        PsiElement(identifier)('+')
        PsiElement(identifier)('A')
      PsiElement(])(']')
    ExtendsBlock
      <empty list>
  PsiWhiteSpace(' ')
  PsiComment(comment)('//extends Iterable[A]')
  PsiWhiteSpace('\n\n')
  ScTrait: JclRanged
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('JclRanged')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: K
        PsiElement(identifier)('K')
      PsiElement(,)(',')
      TypeParameter: A
        PsiElement(identifier)('A')
      PsiElement(])(']')
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          ParametrizedType: ColRanged[K,A]
            SimpleType: ColRanged
              CodeReferenceElement: ColRanged
                PsiElement(identifier)('ColRanged')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: K
                CodeReferenceElement: K
                  PsiElement(identifier)('K')
              PsiElement(,)(',')
              SimpleType: A
                CodeReferenceElement: A
                  PsiElement(identifier)('A')
              PsiElement(])(']')
  PsiWhiteSpace(' ')
  PsiComment(comment)('//with MutableIterable[A] {')
  PsiWhiteSpace('\n\n')
  ScTrait: JclMap
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('JclMap')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: K
        PsiElement(identifier)('K')
      PsiElement(,)(',')
      TypeParameter: E
        PsiElement(identifier)('E')
      PsiElement(])(']')
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      PsiComment(BlockComment)('/*collection.jcl.MutableIterable[Tuple2[K,E]] with*/')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          ParametrizedType: MutMap[K,E]
            SimpleType: MutMap
              CodeReferenceElement: MutMap
                PsiElement(identifier)('MutMap')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: K
                CodeReferenceElement: K
                  PsiElement(identifier)('K')
              PsiElement(,)(',')
              SimpleType: E
                CodeReferenceElement: E
                  PsiElement(identifier)('E')
              PsiElement(])(']')
  PsiWhiteSpace('\n\n')
  ScTrait: JclSorted
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('JclSorted')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: K
        PsiElement(identifier)('K')
      PsiElement(,)(',')
      TypeParameter: A
        PsiElement(identifier)('A')
      PsiElement(])(']')
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          ParametrizedType: ColSorted[K,A]
            SimpleType: ColSorted
              CodeReferenceElement: ColSorted
                PsiElement(identifier)('ColSorted')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: K
                CodeReferenceElement: K
                  PsiElement(identifier)('K')
              PsiElement(,)(',')
              SimpleType: A
                CodeReferenceElement: A
                  PsiElement(identifier)('A')
              PsiElement(])(']')
        PsiWhiteSpace(' ')
        PsiElement(with)('with')
        PsiWhiteSpace(' ')
        ConstructorInvocation
          ParametrizedType: JclRanged[K,A]
            SimpleType: JclRanged
              CodeReferenceElement: JclRanged
                PsiElement(identifier)('JclRanged')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: K
                CodeReferenceElement: K
                  PsiElement(identifier)('K')
              PsiElement(,)(',')
              SimpleType: A
                CodeReferenceElement: A
                  PsiElement(identifier)('A')
              PsiElement(])(']')
  PsiWhiteSpace('\n\n')
  ScTrait: JclSortedMap
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('JclSortedMap')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: K
        PsiElement(identifier)('K')
      PsiElement(,)(',')
      TypeParameter: E
        PsiElement(identifier)('E')
      PsiElement(])(']')
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          ParametrizedType: ColSortedMap[K,E]
            SimpleType: ColSortedMap
              CodeReferenceElement: ColSortedMap
                PsiElement(identifier)('ColSortedMap')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: K
                CodeReferenceElement: K
                  PsiElement(identifier)('K')
              PsiElement(,)(',')
              SimpleType: E
                CodeReferenceElement: E
                  PsiElement(identifier)('E')
              PsiElement(])(']')
        PsiWhiteSpace(' ')
        PsiElement(with)('with')
        PsiWhiteSpace(' ')
        ConstructorInvocation
          ParametrizedType: JclMap[K,E]
            SimpleType: JclMap
              CodeReferenceElement: JclMap
                PsiElement(identifier)('JclMap')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: K
                CodeReferenceElement: K
                  PsiElement(identifier)('K')
              PsiElement(,)(',')
              SimpleType: E
                CodeReferenceElement: E
                  PsiElement(identifier)('E')
              PsiElement(])(']')
        PsiWhiteSpace(' ')
        PsiElement(with)('with')
        PsiWhiteSpace(' ')
        ConstructorInvocation
          ParametrizedType: JclSorted[K,Tuple2[K,E]]
            SimpleType: JclSorted
              CodeReferenceElement: JclSorted
                PsiElement(identifier)('JclSorted')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: K
                CodeReferenceElement: K
                  PsiElement(identifier)('K')
              PsiElement(,)(',')
              ParametrizedType: Tuple2[K,E]
                SimpleType: Tuple2
                  CodeReferenceElement: Tuple2
                    PsiElement(identifier)('Tuple2')
                TypeArgumentsList
                  PsiElement([)('[')
                  SimpleType: K
                    CodeReferenceElement: K
                      PsiElement(identifier)('K')
                  PsiElement(,)(',')
                  SimpleType: E
                    CodeReferenceElement: E
                      PsiElement(identifier)('E')
                  PsiElement(])(']')
              PsiElement(])(']')
  PsiWhiteSpace('\n\n')
  ScClass: Foo
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Foo')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: A
        PsiElement(identifier)('A')
      PsiElement(,)(',')
      PsiWhiteSpace(' ')
      TypeParameter: B
        PsiElement(identifier)('B')
      PsiElement(])(']')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          ParametrizedType: JclSortedMap[A, B]
            SimpleType: JclSortedMap
              CodeReferenceElement: JclSortedMap
                PsiElement(identifier)('JclSortedMap')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: A
                CodeReferenceElement: A
                  PsiElement(identifier)('A')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              SimpleType: B
                CodeReferenceElement: B
                  PsiElement(identifier)('B')
              PsiElement(])(']')
      PsiWhiteSpace(' ')
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: apply
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('apply')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: x
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: A
                    CodeReferenceElement: A
                      PsiElement(identifier)('A')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: B
            CodeReferenceElement: B
              PsiElement(identifier)('B')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: sys.error
              ReferenceExpression: sys
                PsiElement(identifier)('sys')
              PsiElement(.)('.')
              PsiElement(identifier)('error')
            ArgumentList
              PsiElement(()('(')
              StringLiteral
                PsiElement(string content)('"NYI"')
              PsiElement())(')')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScClass: Bar
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Bar')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: x
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: x
              PsiElement(identifier)('x')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: Foo[Int, Int]
            SimpleType: Foo
              CodeReferenceElement: Foo
                PsiElement(identifier)('Foo')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: Int
                CodeReferenceElement: Int
                  PsiElement(identifier)('Int')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              SimpleType: Int
                CodeReferenceElement: Int
                  PsiElement(identifier)('Int')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ScNewTemplateDefinition: <anonymous>
            PsiElement(new)('new')
            PsiWhiteSpace(' ')
            ExtendsBlock
              TemplateParents
                ConstructorInvocation
                  ParametrizedType: Foo[Int, Int]
                    SimpleType: Foo
                      CodeReferenceElement: Foo
                        PsiElement(identifier)('Foo')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: Int
                        CodeReferenceElement: Int
                          PsiElement(identifier)('Int')
                      PsiElement(,)(',')
                      PsiWhiteSpace(' ')
                      SimpleType: Int
                        CodeReferenceElement: Int
                          PsiElement(identifier)('Int')
                      PsiElement(])(']')
        PsiWhiteSpace('\n  ')
        MethodCall
          ReferenceExpression: x.apply
            ReferenceExpression: x
              PsiElement(identifier)('x')
            PsiElement(.)('.')
            PsiElement(identifier)('apply')
          ArgumentList
            PsiElement(()('(')
            IntegerLiteral
              PsiElement(integer)('0')
            PsiElement())(')')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
