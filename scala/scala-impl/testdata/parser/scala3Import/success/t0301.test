package fos

abstract class Expr
case class Var() extends Expr

object Analyzer {
  def substitution(expr: Expr, cls: (Var,Var)): Expr =
    expr match {
      case cls._2 => cls._1  // source of the error
      case _ => expr
    }
}
-----
ScalaFile
  ScPackaging
    PsiElement(package)('package')
    PsiWhiteSpace(' ')
    CodeReferenceElement: fos
      PsiElement(identifier)('fos')
    PsiWhiteSpace('\n\n')
    ScClass: Expr
      AnnotationsList
        <empty list>
      Modifiers
        PsiElement(abstract)('abstract')
      PsiWhiteSpace(' ')
      PsiElement(class)('class')
      PsiWhiteSpace(' ')
      PsiElement(identifier)('Expr')
      PrimaryConstructor
        AnnotationsList
          <empty list>
        Modifiers
          <empty list>
        Parameters
          <empty list>
      ExtendsBlock
        <empty list>
    PsiWhiteSpace('\n')
    ScClass: Var
      AnnotationsList
        <empty list>
      Modifiers
        PsiElement(case)('case')
      PsiWhiteSpace(' ')
      PsiElement(class)('class')
      PsiWhiteSpace(' ')
      PsiElement(identifier)('Var')
      PrimaryConstructor
        AnnotationsList
          <empty list>
        Modifiers
          <empty list>
        Parameters
          ParametersClause
            PsiElement(()('(')
            PsiElement())(')')
      PsiWhiteSpace(' ')
      ExtendsBlock
        PsiElement(extends)('extends')
        PsiWhiteSpace(' ')
        TemplateParents
          ConstructorInvocation
            SimpleType: Expr
              CodeReferenceElement: Expr
                PsiElement(identifier)('Expr')
    PsiWhiteSpace('\n\n')
    ScObject: Analyzer
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      PsiElement(object)('object')
      PsiWhiteSpace(' ')
      PsiElement(identifier)('Analyzer')
      PsiWhiteSpace(' ')
      ExtendsBlock
        ScTemplateBody
          PsiElement({)('{')
          PsiWhiteSpace('\n  ')
          ScFunctionDefinition: substitution
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(def)('def')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('substitution')
            Parameters
              ParametersClause
                PsiElement(()('(')
                Parameter: expr
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(identifier)('expr')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    SimpleType: Expr
                      CodeReferenceElement: Expr
                        PsiElement(identifier)('Expr')
                PsiElement(,)(',')
                PsiWhiteSpace(' ')
                Parameter: cls
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(identifier)('cls')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    TupleType: (Var,Var)
                      PsiElement(()('(')
                      TypesList
                        SimpleType: Var
                          CodeReferenceElement: Var
                            PsiElement(identifier)('Var')
                        PsiElement(,)(',')
                        SimpleType: Var
                          CodeReferenceElement: Var
                            PsiElement(identifier)('Var')
                      PsiElement())(')')
                PsiElement())(')')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            SimpleType: Expr
              CodeReferenceElement: Expr
                PsiElement(identifier)('Expr')
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace('\n    ')
            MatchStatement
              ReferenceExpression: expr
                PsiElement(identifier)('expr')
              PsiWhiteSpace(' ')
              PsiElement(match)('match')
              PsiWhiteSpace(' ')
              PsiElement({)('{')
              PsiWhiteSpace('\n      ')
              CaseClauses
                CaseClause
                  PsiElement(case)('case')
                  PsiWhiteSpace(' ')
                  StableElementPattern
                    ReferenceExpression: cls._2
                      ReferenceExpression: cls
                        PsiElement(identifier)('cls')
                      PsiElement(.)('.')
                      PsiElement(identifier)('_2')
                  PsiWhiteSpace(' ')
                  PsiElement(=>)('=>')
                  PsiWhiteSpace(' ')
                  BlockOfExpressions
                    ReferenceExpression: cls._1
                      ReferenceExpression: cls
                        PsiElement(identifier)('cls')
                      PsiElement(.)('.')
                      PsiElement(identifier)('_1')
                PsiWhiteSpace('  ')
                PsiComment(comment)('// source of the error')
                PsiWhiteSpace('\n      ')
                CaseClause
                  PsiElement(case)('case')
                  PsiWhiteSpace(' ')
                  WildcardPattern
                    PsiElement(_)('_')
                  PsiWhiteSpace(' ')
                  PsiElement(=>)('=>')
                  PsiWhiteSpace(' ')
                  BlockOfExpressions
                    ReferenceExpression: expr
                      PsiElement(identifier)('expr')
              PsiWhiteSpace('\n    ')
              PsiElement(})('}')
          PsiWhiteSpace('\n')
          PsiElement(})('}')
