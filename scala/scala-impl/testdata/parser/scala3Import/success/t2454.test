package am;

trait One[M[_]] {
  val x : Int
}

trait Two[M[_,_]] {
  val x : Int
}

object Test {
  // Works.
  val x = new Two[Map] {
    val x = 5
  }

  val o = new One[java.util.List] {
    val x = 1
  }

  // Does not work
  val y = new Two[java.util.concurrent.ConcurrentHashMap] {
    val x = 3
  }
}
-----
ScalaFile
  ScPackaging
    PsiElement(package)('package')
    PsiWhiteSpace(' ')
    CodeReferenceElement: am
      PsiElement(identifier)('am')
    PsiElement(;)(';')
    PsiWhiteSpace('\n\n')
    ScTrait: One
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      PsiElement(trait)('trait')
      PsiWhiteSpace(' ')
      PsiElement(identifier)('One')
      TypeParameterClause
        PsiElement([)('[')
        TypeParameter: M
          PsiElement(identifier)('M')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: _
              PsiElement(_)('_')
            PsiElement(])(']')
        PsiElement(])(']')
      PsiWhiteSpace(' ')
      ExtendsBlock
        ScTemplateBody
          PsiElement({)('{')
          PsiWhiteSpace('\n  ')
          ScValueDeclaration: x
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(val)('val')
            PsiWhiteSpace(' ')
            ListOfIdentifiers
              Field identifier: x
                PsiElement(identifier)('x')
            PsiWhiteSpace(' ')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            SimpleType: Int
              CodeReferenceElement: Int
                PsiElement(identifier)('Int')
          PsiWhiteSpace('\n')
          PsiElement(})('}')
    PsiWhiteSpace('\n\n')
    ScTrait: Two
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      PsiElement(trait)('trait')
      PsiWhiteSpace(' ')
      PsiElement(identifier)('Two')
      TypeParameterClause
        PsiElement([)('[')
        TypeParameter: M
          PsiElement(identifier)('M')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: _
              PsiElement(_)('_')
            PsiElement(,)(',')
            TypeParameter: _
              PsiElement(_)('_')
            PsiElement(])(']')
        PsiElement(])(']')
      PsiWhiteSpace(' ')
      ExtendsBlock
        ScTemplateBody
          PsiElement({)('{')
          PsiWhiteSpace('\n  ')
          ScValueDeclaration: x
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(val)('val')
            PsiWhiteSpace(' ')
            ListOfIdentifiers
              Field identifier: x
                PsiElement(identifier)('x')
            PsiWhiteSpace(' ')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            SimpleType: Int
              CodeReferenceElement: Int
                PsiElement(identifier)('Int')
          PsiWhiteSpace('\n')
          PsiElement(})('}')
    PsiWhiteSpace('\n\n')
    ScObject: Test
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      PsiElement(object)('object')
      PsiWhiteSpace(' ')
      PsiElement(identifier)('Test')
      PsiWhiteSpace(' ')
      ExtendsBlock
        ScTemplateBody
          PsiElement({)('{')
          PsiWhiteSpace('\n  ')
          ScPatternDefinition: x
            PsiComment(comment)('// Works.')
            PsiWhiteSpace('\n  ')
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(val)('val')
            PsiWhiteSpace(' ')
            ListOfPatterns
              ReferencePattern: x
                PsiElement(identifier)('x')
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace(' ')
            ScNewTemplateDefinition: <anonymous>
              PsiElement(new)('new')
              PsiWhiteSpace(' ')
              ExtendsBlock
                TemplateParents
                  ConstructorInvocation
                    ParametrizedType: Two[Map]
                      SimpleType: Two
                        CodeReferenceElement: Two
                          PsiElement(identifier)('Two')
                      TypeArgumentsList
                        PsiElement([)('[')
                        SimpleType: Map
                          CodeReferenceElement: Map
                            PsiElement(identifier)('Map')
                        PsiElement(])(']')
                PsiWhiteSpace(' ')
                ScTemplateBody
                  PsiElement({)('{')
                  PsiWhiteSpace('\n    ')
                  ScPatternDefinition: x
                    AnnotationsList
                      <empty list>
                    Modifiers
                      <empty list>
                    PsiElement(val)('val')
                    PsiWhiteSpace(' ')
                    ListOfPatterns
                      ReferencePattern: x
                        PsiElement(identifier)('x')
                    PsiWhiteSpace(' ')
                    PsiElement(=)('=')
                    PsiWhiteSpace(' ')
                    IntegerLiteral
                      PsiElement(integer)('5')
                  PsiWhiteSpace('\n  ')
                  PsiElement(})('}')
          PsiWhiteSpace('\n\n  ')
          ScPatternDefinition: o
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(val)('val')
            PsiWhiteSpace(' ')
            ListOfPatterns
              ReferencePattern: o
                PsiElement(identifier)('o')
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace(' ')
            ScNewTemplateDefinition: <anonymous>
              PsiElement(new)('new')
              PsiWhiteSpace(' ')
              ExtendsBlock
                TemplateParents
                  ConstructorInvocation
                    ParametrizedType: One[java.util.List]
                      SimpleType: One
                        CodeReferenceElement: One
                          PsiElement(identifier)('One')
                      TypeArgumentsList
                        PsiElement([)('[')
                        SimpleType: java.util.List
                          CodeReferenceElement: java.util.List
                            CodeReferenceElement: java.util
                              CodeReferenceElement: java
                                PsiElement(identifier)('java')
                              PsiElement(.)('.')
                              PsiElement(identifier)('util')
                            PsiElement(.)('.')
                            PsiElement(identifier)('List')
                        PsiElement(])(']')
                PsiWhiteSpace(' ')
                ScTemplateBody
                  PsiElement({)('{')
                  PsiWhiteSpace('\n    ')
                  ScPatternDefinition: x
                    AnnotationsList
                      <empty list>
                    Modifiers
                      <empty list>
                    PsiElement(val)('val')
                    PsiWhiteSpace(' ')
                    ListOfPatterns
                      ReferencePattern: x
                        PsiElement(identifier)('x')
                    PsiWhiteSpace(' ')
                    PsiElement(=)('=')
                    PsiWhiteSpace(' ')
                    IntegerLiteral
                      PsiElement(integer)('1')
                  PsiWhiteSpace('\n  ')
                  PsiElement(})('}')
          PsiWhiteSpace('\n\n  ')
          ScPatternDefinition: y
            PsiComment(comment)('// Does not work')
            PsiWhiteSpace('\n  ')
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(val)('val')
            PsiWhiteSpace(' ')
            ListOfPatterns
              ReferencePattern: y
                PsiElement(identifier)('y')
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace(' ')
            ScNewTemplateDefinition: <anonymous>
              PsiElement(new)('new')
              PsiWhiteSpace(' ')
              ExtendsBlock
                TemplateParents
                  ConstructorInvocation
                    ParametrizedType: Two[java.util.concurrent.ConcurrentHashMap]
                      SimpleType: Two
                        CodeReferenceElement: Two
                          PsiElement(identifier)('Two')
                      TypeArgumentsList
                        PsiElement([)('[')
                        SimpleType: java.util.concurrent.ConcurrentHashMap
                          CodeReferenceElement: java.util.concurrent.ConcurrentHashMap
                            CodeReferenceElement: java.util.concurrent
                              CodeReferenceElement: java.util
                                CodeReferenceElement: java
                                  PsiElement(identifier)('java')
                                PsiElement(.)('.')
                                PsiElement(identifier)('util')
                              PsiElement(.)('.')
                              PsiElement(identifier)('concurrent')
                            PsiElement(.)('.')
                            PsiElement(identifier)('ConcurrentHashMap')
                        PsiElement(])(']')
                PsiWhiteSpace(' ')
                ScTemplateBody
                  PsiElement({)('{')
                  PsiWhiteSpace('\n    ')
                  ScPatternDefinition: x
                    AnnotationsList
                      <empty list>
                    Modifiers
                      <empty list>
                    PsiElement(val)('val')
                    PsiWhiteSpace(' ')
                    ListOfPatterns
                      ReferencePattern: x
                        PsiElement(identifier)('x')
                    PsiWhiteSpace(' ')
                    PsiElement(=)('=')
                    PsiWhiteSpace(' ')
                    IntegerLiteral
                      PsiElement(integer)('3')
                  PsiWhiteSpace('\n  ')
                  PsiElement(})('}')
          PsiWhiteSpace('\n')
          PsiElement(})('}')
