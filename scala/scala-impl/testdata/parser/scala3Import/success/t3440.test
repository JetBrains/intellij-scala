object test {
  abstract class SampleFormat1 {
    def readerFactory: Any
  }

  case object Int8 extends SampleFormat1 {
    def readerFactory = sys.error("")
  }
  case object Int16 extends SampleFormat1 {
    def readerFactory = sys.error("")
  }

  (new {}: Any) match {
   case 8   => Int8
   case 16  => Int16
   case _   => sys.error("")
  }
}
-----
ScalaFile
  ScObject: test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('test')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScClass: SampleFormat1
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(abstract)('abstract')
          PsiWhiteSpace(' ')
          PsiElement(class)('class')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('SampleFormat1')
          PrimaryConstructor
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            Parameters
              <empty list>
          PsiWhiteSpace(' ')
          ExtendsBlock
            ScTemplateBody
              PsiElement({)('{')
              PsiWhiteSpace('\n    ')
              ScFunctionDeclaration: readerFactory
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(def)('def')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('readerFactory')
                Parameters
                  <empty list>
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                SimpleType: Any
                  CodeReferenceElement: Any
                    PsiElement(identifier)('Any')
              PsiWhiteSpace('\n  ')
              PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        ScObject: Int8
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(case)('case')
          PsiWhiteSpace(' ')
          PsiElement(object)('object')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Int8')
          PsiWhiteSpace(' ')
          ExtendsBlock
            PsiElement(extends)('extends')
            PsiWhiteSpace(' ')
            TemplateParents
              ConstructorInvocation
                SimpleType: SampleFormat1
                  CodeReferenceElement: SampleFormat1
                    PsiElement(identifier)('SampleFormat1')
            PsiWhiteSpace(' ')
            ScTemplateBody
              PsiElement({)('{')
              PsiWhiteSpace('\n    ')
              ScFunctionDefinition: readerFactory
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(def)('def')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('readerFactory')
                Parameters
                  <empty list>
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                MethodCall
                  ReferenceExpression: sys.error
                    ReferenceExpression: sys
                      PsiElement(identifier)('sys')
                    PsiElement(.)('.')
                    PsiElement(identifier)('error')
                  ArgumentList
                    PsiElement(()('(')
                    StringLiteral
                      PsiElement(string content)('""')
                    PsiElement())(')')
              PsiWhiteSpace('\n  ')
              PsiElement(})('}')
        PsiWhiteSpace('\n  ')
        ScObject: Int16
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(case)('case')
          PsiWhiteSpace(' ')
          PsiElement(object)('object')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Int16')
          PsiWhiteSpace(' ')
          ExtendsBlock
            PsiElement(extends)('extends')
            PsiWhiteSpace(' ')
            TemplateParents
              ConstructorInvocation
                SimpleType: SampleFormat1
                  CodeReferenceElement: SampleFormat1
                    PsiElement(identifier)('SampleFormat1')
            PsiWhiteSpace(' ')
            ScTemplateBody
              PsiElement({)('{')
              PsiWhiteSpace('\n    ')
              ScFunctionDefinition: readerFactory
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(def)('def')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('readerFactory')
                Parameters
                  <empty list>
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                MethodCall
                  ReferenceExpression: sys.error
                    ReferenceExpression: sys
                      PsiElement(identifier)('sys')
                    PsiElement(.)('.')
                    PsiElement(identifier)('error')
                  ArgumentList
                    PsiElement(()('(')
                    StringLiteral
                      PsiElement(string content)('""')
                    PsiElement())(')')
              PsiWhiteSpace('\n  ')
              PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        MatchStatement
          ExpressionInParenthesis
            PsiElement(()('(')
            TypedExpression
              ScNewTemplateDefinition: <anonymous>
                PsiElement(new)('new')
                PsiWhiteSpace(' ')
                ExtendsBlock
                  ScTemplateBody
                    PsiElement({)('{')
                    PsiElement(})('}')
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              SimpleType: Any
                CodeReferenceElement: Any
                  PsiElement(identifier)('Any')
            PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(match)('match')
          PsiWhiteSpace(' ')
          PsiElement({)('{')
          PsiWhiteSpace('\n   ')
          CaseClauses
            CaseClause
              PsiElement(case)('case')
              PsiWhiteSpace(' ')
              LiteralPattern
                IntegerLiteral
                  PsiElement(integer)('8')
              PsiWhiteSpace('   ')
              PsiElement(=>)('=>')
              PsiWhiteSpace(' ')
              BlockOfExpressions
                ReferenceExpression: Int8
                  PsiElement(identifier)('Int8')
            PsiWhiteSpace('\n   ')
            CaseClause
              PsiElement(case)('case')
              PsiWhiteSpace(' ')
              LiteralPattern
                IntegerLiteral
                  PsiElement(integer)('16')
              PsiWhiteSpace('  ')
              PsiElement(=>)('=>')
              PsiWhiteSpace(' ')
              BlockOfExpressions
                ReferenceExpression: Int16
                  PsiElement(identifier)('Int16')
            PsiWhiteSpace('\n   ')
            CaseClause
              PsiElement(case)('case')
              PsiWhiteSpace(' ')
              WildcardPattern
                PsiElement(_)('_')
              PsiWhiteSpace('   ')
              PsiElement(=>)('=>')
              PsiWhiteSpace(' ')
              BlockOfExpressions
                MethodCall
                  ReferenceExpression: sys.error
                    ReferenceExpression: sys
                      PsiElement(identifier)('sys')
                    PsiElement(.)('.')
                    PsiElement(identifier)('error')
                  ArgumentList
                    PsiElement(()('(')
                    StringLiteral
                      PsiElement(string content)('""')
                    PsiElement())(')')
          PsiWhiteSpace('\n  ')
          PsiElement(})('}')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
