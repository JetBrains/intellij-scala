object Unpair {
  class Inv[T]

  type Head[X] = X match {
    case Tuple2[a, b] => a
  }

  def unpair[X <: Tuple2[Any, Any]]: Head[X] = ???
}
-----
ScalaFile
  ScObject: Unpair
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Unpair')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScClass: Inv
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(class)('class')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Inv')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: T
              PsiElement(identifier)('T')
            PsiElement(])(']')
          PrimaryConstructor
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            Parameters
              <empty list>
          ExtendsBlock
            <empty list>
        PsiWhiteSpace('\n\n  ')
        ScTypeAliasDefinition: Head
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Head')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: X
              PsiElement(identifier)('X')
            PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MatchType: X match {
    case Tuple2[a, b] => a
  }
            SimpleType: X
              CodeReferenceElement: X
                PsiElement(identifier)('X')
            PsiWhiteSpace(' ')
            PsiElement(match)('match')
            PsiWhiteSpace(' ')
            PsiElement({)('{')
            PsiWhiteSpace('\n    ')
            ScMatchTypeCasesImpl(match type cases)
              ScMatchTypeCaseImpl(match type case)
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                ParametrizedType: Tuple2[a, b]
                  SimpleType: Tuple2
                    CodeReferenceElement: Tuple2
                      PsiElement(identifier)('Tuple2')
                  TypeArgumentsList
                    PsiElement([)('[')
                    TypeVariable: a
                      PsiElement(identifier)('a')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    TypeVariable: b
                      PsiElement(identifier)('b')
                    PsiElement(])(']')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                SimpleType: a
                  CodeReferenceElement: a
                    PsiElement(identifier)('a')
            PsiWhiteSpace('\n  ')
            PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: unpair
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('unpair')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: X
              PsiElement(identifier)('X')
              PsiWhiteSpace(' ')
              PsiElement(<:)('<:')
              PsiWhiteSpace(' ')
              ParametrizedType: Tuple2[Any, Any]
                SimpleType: Tuple2
                  CodeReferenceElement: Tuple2
                    PsiElement(identifier)('Tuple2')
                TypeArgumentsList
                  PsiElement([)('[')
                  SimpleType: Any
                    CodeReferenceElement: Any
                      PsiElement(identifier)('Any')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  SimpleType: Any
                    CodeReferenceElement: Any
                      PsiElement(identifier)('Any')
                  PsiElement(])(']')
            PsiElement(])(']')
          Parameters
            <empty list>
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: Head[X]
            SimpleType: Head
              CodeReferenceElement: Head
                PsiElement(identifier)('Head')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: X
                CodeReferenceElement: X
                  PsiElement(identifier)('X')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: ???
            PsiElement(identifier)('???')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
