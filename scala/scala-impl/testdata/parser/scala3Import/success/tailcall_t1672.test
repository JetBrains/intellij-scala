// moved to pending.
/* Tail calls translates this program to:

final lazy object Test1672: Test1672$ = new Test1672$()
  final class Test1672$()  extends Object() { this: Test1672$.type =>
    @tailrec def bar: (x: Int)(y: Int)Nothing = {
      def tailLabel2: ($this: Test1672$.type)(x: Int)(y: Int)Nothing = {
        try {
          throw new scala.package.RuntimeException()
        } catch {
          def $anonfun: (x$1: Throwable)Nothing =
            x$1 match {
              case _: scala.package.Throwable =>
                tailLabel2($this)(x)(y)
            }
          closure($anonfun)
        }
      }
      tailLabel2(Test1672$.this)(x)(y)
    }
  }

Note the tail call to taillabel2 from the local method $anonfun.
LambdaLift doe snot know how to deal wioth this.
*/

object Test1672 {
  @annotation.tailrec
  def bar(x: Int)(y: Int) : Nothing = {
    try {
      throw new RuntimeException
    } catch {
      case _: Throwable => bar(x)(y)
    }
  }
}
-----
ScalaFile
  PsiComment(comment)('// moved to pending.')
  PsiWhiteSpace('\n')
  PsiComment(BlockComment)('/* Tail calls translates this program to:\n\nfinal lazy object Test1672: Test1672$ = new Test1672$()\n  final class Test1672$()  extends Object() { this: Test1672$.type =>\n    @tailrec def bar: (x: Int)(y: Int)Nothing = {\n      def tailLabel2: ($this: Test1672$.type)(x: Int)(y: Int)Nothing = {\n        try {\n          throw new scala.package.RuntimeException()\n        } catch {\n          def $anonfun: (x$1: Throwable)Nothing =\n            x$1 match {\n              case _: scala.package.Throwable =>\n                tailLabel2($this)(x)(y)\n            }\n          closure($anonfun)\n        }\n      }\n      tailLabel2(Test1672$.this)(x)(y)\n    }\n  }\n\nNote the tail call to taillabel2 from the local method $anonfun.\nLambdaLift doe snot know how to deal wioth this.\n*/')
  PsiWhiteSpace('\n\n')
  ScObject: Test1672
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test1672')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: bar
          AnnotationsList
            Annotation
              PsiElement(@)('@')
              AnnotationExpression
                ConstructorInvocation
                  SimpleType: annotation.tailrec
                    CodeReferenceElement: annotation.tailrec
                      CodeReferenceElement: annotation
                        PsiElement(identifier)('annotation')
                      PsiElement(.)('.')
                      PsiElement(identifier)('tailrec')
          Modifiers
            <empty list>
          PsiWhiteSpace('\n  ')
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('bar')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: x
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Int
                    CodeReferenceElement: Int
                      PsiElement(identifier)('Int')
              PsiElement())(')')
            ParametersClause
              PsiElement(()('(')
              Parameter: y
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('y')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Int
                    CodeReferenceElement: Int
                      PsiElement(identifier)('Int')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Nothing
            CodeReferenceElement: Nothing
              PsiElement(identifier)('Nothing')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          BlockExpression
            PsiElement({)('{')
            PsiWhiteSpace('\n    ')
            TryStatement
              PsiElement(try)('try')
              PsiWhiteSpace(' ')
              BlockExpression
                PsiElement({)('{')
                PsiWhiteSpace('\n      ')
                ThrowStatement
                  PsiElement(throw)('throw')
                  PsiWhiteSpace(' ')
                  ScNewTemplateDefinition: <anonymous>
                    PsiElement(new)('new')
                    PsiWhiteSpace(' ')
                    ExtendsBlock
                      TemplateParents
                        ConstructorInvocation
                          SimpleType: RuntimeException
                            CodeReferenceElement: RuntimeException
                              PsiElement(identifier)('RuntimeException')
                PsiWhiteSpace('\n    ')
                PsiElement(})('}')
              PsiWhiteSpace(' ')
              CatchBlock
                PsiElement(catch)('catch')
                PsiWhiteSpace(' ')
                BlockExpression
                  PsiElement({)('{')
                  PsiWhiteSpace('\n      ')
                  CaseClauses
                    CaseClause
                      PsiElement(case)('case')
                      PsiWhiteSpace(' ')
                      Scala3 TypedPattern
                        WildcardPattern
                          PsiElement(_)('_')
                        PsiElement(:)(':')
                        PsiWhiteSpace(' ')
                        TypePattern
                          SimpleType: Throwable
                            CodeReferenceElement: Throwable
                              PsiElement(identifier)('Throwable')
                      PsiWhiteSpace(' ')
                      PsiElement(=>)('=>')
                      PsiWhiteSpace(' ')
                      BlockOfExpressions
                        MethodCall
                          MethodCall
                            ReferenceExpression: bar
                              PsiElement(identifier)('bar')
                            ArgumentList
                              PsiElement(()('(')
                              ReferenceExpression: x
                                PsiElement(identifier)('x')
                              PsiElement())(')')
                          ArgumentList
                            PsiElement(()('(')
                            ReferenceExpression: y
                              PsiElement(identifier)('y')
                            PsiElement())(')')
                  PsiWhiteSpace('\n    ')
                  PsiElement(})('}')
            PsiWhiteSpace('\n  ')
            PsiElement(})('}')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
