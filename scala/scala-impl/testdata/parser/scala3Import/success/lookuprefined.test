class C { type T; type U }

trait Test {

  val x1: (C { type U = T; type T = String }) # U
  val x2: (C { type U = T } {type T = String }) # U

  val y1: String = x1
  val y2: String = x2
}
-----
ScalaFile
  ScClass: C
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('C')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace(' ')
        ScTypeAliasDeclaration: T
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('T')
        PsiElement(;)(';')
        PsiWhiteSpace(' ')
        ScTypeAliasDeclaration: U
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('U')
        PsiWhiteSpace(' ')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScTrait: Test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n\n  ')
        ScValueDeclaration: x1
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfIdentifiers
            Field identifier: x1
              PsiElement(identifier)('x1')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          TypeProjection: (C { type U = T; type T = String }) # U
            TypeInParenthesis: (C { type U = T; type T = String })
              PsiElement(()('(')
              CompoundType: C { type U = T; type T = String }
                SimpleType: C
                  CodeReferenceElement: C
                    PsiElement(identifier)('C')
                PsiWhiteSpace(' ')
                Refinement
                  PsiElement({)('{')
                  PsiWhiteSpace(' ')
                  ScTypeAliasDefinition: U
                    AnnotationsList
                      <empty list>
                    Modifiers
                      <empty list>
                    PsiElement(type)('type')
                    PsiWhiteSpace(' ')
                    PsiElement(identifier)('U')
                    PsiWhiteSpace(' ')
                    PsiElement(=)('=')
                    PsiWhiteSpace(' ')
                    SimpleType: T
                      CodeReferenceElement: T
                        PsiElement(identifier)('T')
                  PsiElement(;)(';')
                  PsiWhiteSpace(' ')
                  ScTypeAliasDefinition: T
                    AnnotationsList
                      <empty list>
                    Modifiers
                      <empty list>
                    PsiElement(type)('type')
                    PsiWhiteSpace(' ')
                    PsiElement(identifier)('T')
                    PsiWhiteSpace(' ')
                    PsiElement(=)('=')
                    PsiWhiteSpace(' ')
                    SimpleType: String
                      CodeReferenceElement: String
                        PsiElement(identifier)('String')
                  PsiWhiteSpace(' ')
                  PsiElement(})('}')
              PsiElement())(')')
            PsiWhiteSpace(' ')
            PsiElement(#)('#')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('U')
        PsiWhiteSpace('\n  ')
        ScValueDeclaration: x2
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfIdentifiers
            Field identifier: x2
              PsiElement(identifier)('x2')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          TypeProjection: (C { type U = T } {type T = String }) # U
            TypeInParenthesis: (C { type U = T } {type T = String })
              PsiElement(()('(')
              CompoundType: C { type U = T } {type T = String }
                SimpleType: C
                  CodeReferenceElement: C
                    PsiElement(identifier)('C')
                PsiWhiteSpace(' ')
                Refinement
                  PsiElement({)('{')
                  PsiWhiteSpace(' ')
                  ScTypeAliasDefinition: U
                    AnnotationsList
                      <empty list>
                    Modifiers
                      <empty list>
                    PsiElement(type)('type')
                    PsiWhiteSpace(' ')
                    PsiElement(identifier)('U')
                    PsiWhiteSpace(' ')
                    PsiElement(=)('=')
                    PsiWhiteSpace(' ')
                    SimpleType: T
                      CodeReferenceElement: T
                        PsiElement(identifier)('T')
                  PsiWhiteSpace(' ')
                  PsiElement(})('}')
                PsiWhiteSpace(' ')
                Refinement
                  PsiElement({)('{')
                  ScTypeAliasDefinition: T
                    AnnotationsList
                      <empty list>
                    Modifiers
                      <empty list>
                    PsiElement(type)('type')
                    PsiWhiteSpace(' ')
                    PsiElement(identifier)('T')
                    PsiWhiteSpace(' ')
                    PsiElement(=)('=')
                    PsiWhiteSpace(' ')
                    SimpleType: String
                      CodeReferenceElement: String
                        PsiElement(identifier)('String')
                  PsiWhiteSpace(' ')
                  PsiElement(})('}')
              PsiElement())(')')
            PsiWhiteSpace(' ')
            PsiElement(#)('#')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('U')
        PsiWhiteSpace('\n\n  ')
        ScPatternDefinition: y1
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: y1
              PsiElement(identifier)('y1')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: String
            CodeReferenceElement: String
              PsiElement(identifier)('String')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: x1
            PsiElement(identifier)('x1')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: y2
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: y2
              PsiElement(identifier)('y2')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: String
            CodeReferenceElement: String
              PsiElement(identifier)('String')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: x2
            PsiElement(identifier)('x2')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
