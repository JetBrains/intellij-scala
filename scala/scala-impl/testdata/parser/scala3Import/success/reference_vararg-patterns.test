package varargPatterns
object t1 extends App {
  val List(1, 2, xs *) = List(1, 2, 3)
  println(xs)
  val List(1, 2, _ *) = List(1, 2, 3)
}
@main def Test =
  val arr = Array(0, 1, 2, 3)
  val lst = List(arr*)                  // vararg splice argument
  lst match
    case List(0, 1, xs*) => println(xs)   // binds xs to Seq(2, 3)
    case List(1, _*) =>                   // wildcard pattern
-----
ScalaFile
  ScPackaging
    PsiElement(package)('package')
    PsiWhiteSpace(' ')
    CodeReferenceElement: varargPatterns
      PsiElement(identifier)('varargPatterns')
    PsiWhiteSpace('\n')
    ScObject: t1
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      PsiElement(object)('object')
      PsiWhiteSpace(' ')
      PsiElement(identifier)('t1')
      PsiWhiteSpace(' ')
      ExtendsBlock
        PsiElement(extends)('extends')
        PsiWhiteSpace(' ')
        TemplateParents
          ConstructorInvocation
            SimpleType: App
              CodeReferenceElement: App
                PsiElement(identifier)('App')
        PsiWhiteSpace(' ')
        ScTemplateBody
          PsiElement({)('{')
          PsiWhiteSpace('\n  ')
          ScPatternDefinition: xs
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(val)('val')
            PsiWhiteSpace(' ')
            ListOfPatterns
              ConstructorPattern
                CodeReferenceElement: List
                  PsiElement(identifier)('List')
                Pattern Argument List
                  PsiElement(()('(')
                  LiteralPattern
                    IntegerLiteral
                      PsiElement(integer)('1')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  LiteralPattern
                    IntegerLiteral
                      PsiElement(integer)('2')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  SequenceWildcardPattern: xs
                    PsiElement(identifier)('xs')
                    PsiWhiteSpace(' ')
                    PsiElement(identifier)('*')
                  PsiElement())(')')
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace(' ')
            MethodCall
              ReferenceExpression: List
                PsiElement(identifier)('List')
              ArgumentList
                PsiElement(()('(')
                IntegerLiteral
                  PsiElement(integer)('1')
                PsiElement(,)(',')
                PsiWhiteSpace(' ')
                IntegerLiteral
                  PsiElement(integer)('2')
                PsiElement(,)(',')
                PsiWhiteSpace(' ')
                IntegerLiteral
                  PsiElement(integer)('3')
                PsiElement())(')')
          PsiWhiteSpace('\n  ')
          MethodCall
            ReferenceExpression: println
              PsiElement(identifier)('println')
            ArgumentList
              PsiElement(()('(')
              ReferenceExpression: xs
                PsiElement(identifier)('xs')
              PsiElement())(')')
          PsiWhiteSpace('\n  ')
          ScPatternDefinition
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(val)('val')
            PsiWhiteSpace(' ')
            ListOfPatterns
              ConstructorPattern
                CodeReferenceElement: List
                  PsiElement(identifier)('List')
                Pattern Argument List
                  PsiElement(()('(')
                  LiteralPattern
                    IntegerLiteral
                      PsiElement(integer)('1')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  LiteralPattern
                    IntegerLiteral
                      PsiElement(integer)('2')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  SequenceWildcardPattern: _
                    PsiElement(_)('_')
                    PsiWhiteSpace(' ')
                    PsiElement(identifier)('*')
                  PsiElement())(')')
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace(' ')
            MethodCall
              ReferenceExpression: List
                PsiElement(identifier)('List')
              ArgumentList
                PsiElement(()('(')
                IntegerLiteral
                  PsiElement(integer)('1')
                PsiElement(,)(',')
                PsiWhiteSpace(' ')
                IntegerLiteral
                  PsiElement(integer)('2')
                PsiElement(,)(',')
                PsiWhiteSpace(' ')
                IntegerLiteral
                  PsiElement(integer)('3')
                PsiElement())(')')
          PsiWhiteSpace('\n')
          PsiElement(})('}')
    PsiWhiteSpace('\n')
    ScFunctionDefinition: Test
      AnnotationsList
        Annotation
          PsiElement(@)('@')
          AnnotationExpression
            ConstructorInvocation
              SimpleType: main
                CodeReferenceElement: main
                  PsiElement(identifier)('main')
      Modifiers
        <empty list>
      PsiWhiteSpace(' ')
      PsiElement(def)('def')
      PsiWhiteSpace(' ')
      PsiElement(identifier)('Test')
      Parameters
        <empty list>
      PsiWhiteSpace(' ')
      PsiElement(=)('=')
      BlockExpression
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: arr
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: arr
              PsiElement(identifier)('arr')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: Array
              PsiElement(identifier)('Array')
            ArgumentList
              PsiElement(()('(')
              IntegerLiteral
                PsiElement(integer)('0')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              IntegerLiteral
                PsiElement(integer)('1')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              IntegerLiteral
                PsiElement(integer)('2')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              IntegerLiteral
                PsiElement(integer)('3')
              PsiElement())(')')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: lst
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: lst
              PsiElement(identifier)('lst')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: List
              PsiElement(identifier)('List')
            ArgumentList
              PsiElement(()('(')
              TypedExpression
                ReferenceExpression: arr
                  PsiElement(identifier)('arr')
                SequenceArgumentType
                  PsiElement(identifier)('*')
              PsiElement())(')')
        PsiWhiteSpace('                  ')
        PsiComment(comment)('// vararg splice argument')
        PsiWhiteSpace('\n  ')
        MatchStatement
          ReferenceExpression: lst
            PsiElement(identifier)('lst')
          PsiWhiteSpace(' ')
          PsiElement(match)('match')
          PsiWhiteSpace('\n    ')
          CaseClauses
            CaseClause
              PsiElement(case)('case')
              PsiWhiteSpace(' ')
              ConstructorPattern
                CodeReferenceElement: List
                  PsiElement(identifier)('List')
                Pattern Argument List
                  PsiElement(()('(')
                  LiteralPattern
                    IntegerLiteral
                      PsiElement(integer)('0')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  LiteralPattern
                    IntegerLiteral
                      PsiElement(integer)('1')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  SequenceWildcardPattern: xs
                    PsiElement(identifier)('xs')
                    PsiElement(identifier)('*')
                  PsiElement())(')')
              PsiWhiteSpace(' ')
              PsiElement(=>)('=>')
              PsiWhiteSpace(' ')
              BlockOfExpressions
                MethodCall
                  ReferenceExpression: println
                    PsiElement(identifier)('println')
                  ArgumentList
                    PsiElement(()('(')
                    ReferenceExpression: xs
                      PsiElement(identifier)('xs')
                    PsiElement())(')')
            PsiWhiteSpace('   ')
            PsiComment(comment)('// binds xs to Seq(2, 3)')
            PsiWhiteSpace('\n    ')
            CaseClause
              PsiElement(case)('case')
              PsiWhiteSpace(' ')
              ConstructorPattern
                CodeReferenceElement: List
                  PsiElement(identifier)('List')
                Pattern Argument List
                  PsiElement(()('(')
                  LiteralPattern
                    IntegerLiteral
                      PsiElement(integer)('1')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  SequenceWildcardPattern: _
                    PsiElement(_)('_')
                    PsiElement(identifier)('*')
                  PsiElement())(')')
              PsiWhiteSpace(' ')
              PsiElement(=>)('=>')
              BlockOfExpressions
                <empty list>
  PsiWhiteSpace('                   ')
  PsiComment(comment)('// wildcard pattern')
