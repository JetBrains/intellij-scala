import scala.quoted.*

object MyMatcher {
  def unapply(expr: Expr[Any])(using Quotes): Option[Expr[Int]] = ???
}

object MyMatcher2 {
  def unapply(expr: Expr[Int])(using Quotes): Boolean = ???
}

def foo(x: Any): Unit = ???
def bar(x: Int): Int = ???

def oneLevel(expr: Expr[Any])(using Quotes): Expr[Int] = expr match
  case '{ foo(${MyMatcher(y@MyMatcher2())}) } => y

def twoLevel(expr: Expr[Any])(using Quotes): Expr[Int] = expr match
  case '{ foo(${MyMatcher('{ bar(${y@MyMatcher2()}).getClass}) }) } => y

def bindQuote(expr: Expr[Any])(using Quotes): Expr[Int] = expr match
  case '{ foo(${y@'{bar($_)}})} => y

def noop(expr: Expr[Any])(using Quotes): Expr[Int] = expr match
  case '{ bar(${ '{ $y }  }) } => y
-----
ScalaFile
  ScImportStatement
    PsiElement(import)('import')
    PsiWhiteSpace(' ')
    ImportExpression
      CodeReferenceElement: scala.quoted
        CodeReferenceElement: scala
          PsiElement(identifier)('scala')
        PsiElement(.)('.')
        PsiElement(identifier)('quoted')
      PsiElement(.)('.')
      PsiElement(*)('*')
  PsiWhiteSpace('\n\n')
  ScObject: MyMatcher
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('MyMatcher')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: unapply
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('unapply')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: expr
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('expr')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  ParametrizedType: Expr[Any]
                    SimpleType: Expr
                      CodeReferenceElement: Expr
                        PsiElement(identifier)('Expr')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: Any
                        CodeReferenceElement: Any
                          PsiElement(identifier)('Any')
                      PsiElement(])(']')
              PsiElement())(')')
            ParametersClause
              PsiElement(()('(')
              PsiElement(using)('using')
              PsiWhiteSpace(' ')
              Parameter: <anonymous>
                ParameterType
                  SimpleType: Quotes
                    CodeReferenceElement: Quotes
                      PsiElement(identifier)('Quotes')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: Option[Expr[Int]]
            SimpleType: Option
              CodeReferenceElement: Option
                PsiElement(identifier)('Option')
            TypeArgumentsList
              PsiElement([)('[')
              ParametrizedType: Expr[Int]
                SimpleType: Expr
                  CodeReferenceElement: Expr
                    PsiElement(identifier)('Expr')
                TypeArgumentsList
                  PsiElement([)('[')
                  SimpleType: Int
                    CodeReferenceElement: Int
                      PsiElement(identifier)('Int')
                  PsiElement(])(']')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: ???
            PsiElement(identifier)('???')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScObject: MyMatcher2
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('MyMatcher2')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: unapply
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('unapply')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: expr
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('expr')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  ParametrizedType: Expr[Int]
                    SimpleType: Expr
                      CodeReferenceElement: Expr
                        PsiElement(identifier)('Expr')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: Int
                        CodeReferenceElement: Int
                          PsiElement(identifier)('Int')
                      PsiElement(])(']')
              PsiElement())(')')
            ParametersClause
              PsiElement(()('(')
              PsiElement(using)('using')
              PsiWhiteSpace(' ')
              Parameter: <anonymous>
                ParameterType
                  SimpleType: Quotes
                    CodeReferenceElement: Quotes
                      PsiElement(identifier)('Quotes')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Boolean
            CodeReferenceElement: Boolean
              PsiElement(identifier)('Boolean')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: ???
            PsiElement(identifier)('???')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScFunctionDefinition: foo
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(def)('def')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('foo')
    Parameters
      ParametersClause
        PsiElement(()('(')
        Parameter: x
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(identifier)('x')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParameterType
            SimpleType: Any
              CodeReferenceElement: Any
                PsiElement(identifier)('Any')
        PsiElement())(')')
    PsiElement(:)(':')
    PsiWhiteSpace(' ')
    SimpleType: Unit
      CodeReferenceElement: Unit
        PsiElement(identifier)('Unit')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    ReferenceExpression: ???
      PsiElement(identifier)('???')
  PsiWhiteSpace('\n')
  ScFunctionDefinition: bar
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(def)('def')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('bar')
    Parameters
      ParametersClause
        PsiElement(()('(')
        Parameter: x
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(identifier)('x')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParameterType
            SimpleType: Int
              CodeReferenceElement: Int
                PsiElement(identifier)('Int')
        PsiElement())(')')
    PsiElement(:)(':')
    PsiWhiteSpace(' ')
    SimpleType: Int
      CodeReferenceElement: Int
        PsiElement(identifier)('Int')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    ReferenceExpression: ???
      PsiElement(identifier)('???')
  PsiWhiteSpace('\n\n')
  ScFunctionDefinition: oneLevel
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(def)('def')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('oneLevel')
    Parameters
      ParametersClause
        PsiElement(()('(')
        Parameter: expr
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(identifier)('expr')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParameterType
            ParametrizedType: Expr[Any]
              SimpleType: Expr
                CodeReferenceElement: Expr
                  PsiElement(identifier)('Expr')
              TypeArgumentsList
                PsiElement([)('[')
                SimpleType: Any
                  CodeReferenceElement: Any
                    PsiElement(identifier)('Any')
                PsiElement(])(']')
        PsiElement())(')')
      ParametersClause
        PsiElement(()('(')
        PsiElement(using)('using')
        PsiWhiteSpace(' ')
        Parameter: <anonymous>
          ParameterType
            SimpleType: Quotes
              CodeReferenceElement: Quotes
                PsiElement(identifier)('Quotes')
        PsiElement())(')')
    PsiElement(:)(':')
    PsiWhiteSpace(' ')
    ParametrizedType: Expr[Int]
      SimpleType: Expr
        CodeReferenceElement: Expr
          PsiElement(identifier)('Expr')
      TypeArgumentsList
        PsiElement([)('[')
        SimpleType: Int
          CodeReferenceElement: Int
            PsiElement(identifier)('Int')
        PsiElement(])(']')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    MatchStatement
      ReferenceExpression: expr
        PsiElement(identifier)('expr')
      PsiWhiteSpace(' ')
      PsiElement(match)('match')
      PsiWhiteSpace('\n  ')
      CaseClauses
        CaseClause
          PsiElement(case)('case')
          PsiWhiteSpace(' ')
          QuotedPattern
            QuotedBlock
              PsiElement(')(''')
              PsiElement({)('{')
              PsiWhiteSpace(' ')
              MethodCall
                ReferenceExpression: foo
                  PsiElement(identifier)('foo')
                ArgumentList
                  PsiElement(()('(')
                  SplicedPatternExpression
                    PsiElement($)('$')
                    PsiElement({)('{')
                    ConstructorPattern
                      CodeReferenceElement: MyMatcher
                        PsiElement(identifier)('MyMatcher')
                      Pattern Argument List
                        PsiElement(()('(')
                        NamingPattern: y
                          PsiElement(identifier)('y')
                          PsiElement(@)('@')
                          ConstructorPattern
                            CodeReferenceElement: MyMatcher2
                              PsiElement(identifier)('MyMatcher2')
                            Pattern Argument List
                              PsiElement(()('(')
                              PsiElement())(')')
                        PsiElement())(')')
                    PsiElement(})('}')
                  PsiElement())(')')
              PsiWhiteSpace(' ')
              PsiElement(})('}')
          PsiWhiteSpace(' ')
          PsiElement(=>)('=>')
          PsiWhiteSpace(' ')
          BlockOfExpressions
            ReferenceExpression: y
              PsiElement(identifier)('y')
  PsiWhiteSpace('\n\n')
  ScFunctionDefinition: twoLevel
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(def)('def')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('twoLevel')
    Parameters
      ParametersClause
        PsiElement(()('(')
        Parameter: expr
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(identifier)('expr')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParameterType
            ParametrizedType: Expr[Any]
              SimpleType: Expr
                CodeReferenceElement: Expr
                  PsiElement(identifier)('Expr')
              TypeArgumentsList
                PsiElement([)('[')
                SimpleType: Any
                  CodeReferenceElement: Any
                    PsiElement(identifier)('Any')
                PsiElement(])(']')
        PsiElement())(')')
      ParametersClause
        PsiElement(()('(')
        PsiElement(using)('using')
        PsiWhiteSpace(' ')
        Parameter: <anonymous>
          ParameterType
            SimpleType: Quotes
              CodeReferenceElement: Quotes
                PsiElement(identifier)('Quotes')
        PsiElement())(')')
    PsiElement(:)(':')
    PsiWhiteSpace(' ')
    ParametrizedType: Expr[Int]
      SimpleType: Expr
        CodeReferenceElement: Expr
          PsiElement(identifier)('Expr')
      TypeArgumentsList
        PsiElement([)('[')
        SimpleType: Int
          CodeReferenceElement: Int
            PsiElement(identifier)('Int')
        PsiElement(])(']')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    MatchStatement
      ReferenceExpression: expr
        PsiElement(identifier)('expr')
      PsiWhiteSpace(' ')
      PsiElement(match)('match')
      PsiWhiteSpace('\n  ')
      CaseClauses
        CaseClause
          PsiElement(case)('case')
          PsiWhiteSpace(' ')
          QuotedPattern
            QuotedBlock
              PsiElement(')(''')
              PsiElement({)('{')
              PsiWhiteSpace(' ')
              MethodCall
                ReferenceExpression: foo
                  PsiElement(identifier)('foo')
                ArgumentList
                  PsiElement(()('(')
                  SplicedPatternExpression
                    PsiElement($)('$')
                    PsiElement({)('{')
                    ConstructorPattern
                      CodeReferenceElement: MyMatcher
                        PsiElement(identifier)('MyMatcher')
                      Pattern Argument List
                        PsiElement(()('(')
                        QuotedPattern
                          QuotedBlock
                            PsiElement(')(''')
                            PsiElement({)('{')
                            PsiWhiteSpace(' ')
                            ReferenceExpression: bar(${y@MyMatcher2()}).getClass
                              MethodCall
                                ReferenceExpression: bar
                                  PsiElement(identifier)('bar')
                                ArgumentList
                                  PsiElement(()('(')
                                  SplicedPatternExpression
                                    PsiElement($)('$')
                                    PsiElement({)('{')
                                    NamingPattern: y
                                      PsiElement(identifier)('y')
                                      PsiElement(@)('@')
                                      ConstructorPattern
                                        CodeReferenceElement: MyMatcher2
                                          PsiElement(identifier)('MyMatcher2')
                                        Pattern Argument List
                                          PsiElement(()('(')
                                          PsiElement())(')')
                                    PsiElement(})('}')
                                  PsiElement())(')')
                              PsiElement(.)('.')
                              PsiElement(identifier)('getClass')
                            PsiElement(})('}')
                        PsiElement())(')')
                    PsiWhiteSpace(' ')
                    PsiElement(})('}')
                  PsiElement())(')')
              PsiWhiteSpace(' ')
              PsiElement(})('}')
          PsiWhiteSpace(' ')
          PsiElement(=>)('=>')
          PsiWhiteSpace(' ')
          BlockOfExpressions
            ReferenceExpression: y
              PsiElement(identifier)('y')
  PsiWhiteSpace('\n\n')
  ScFunctionDefinition: bindQuote
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(def)('def')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('bindQuote')
    Parameters
      ParametersClause
        PsiElement(()('(')
        Parameter: expr
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(identifier)('expr')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParameterType
            ParametrizedType: Expr[Any]
              SimpleType: Expr
                CodeReferenceElement: Expr
                  PsiElement(identifier)('Expr')
              TypeArgumentsList
                PsiElement([)('[')
                SimpleType: Any
                  CodeReferenceElement: Any
                    PsiElement(identifier)('Any')
                PsiElement(])(']')
        PsiElement())(')')
      ParametersClause
        PsiElement(()('(')
        PsiElement(using)('using')
        PsiWhiteSpace(' ')
        Parameter: <anonymous>
          ParameterType
            SimpleType: Quotes
              CodeReferenceElement: Quotes
                PsiElement(identifier)('Quotes')
        PsiElement())(')')
    PsiElement(:)(':')
    PsiWhiteSpace(' ')
    ParametrizedType: Expr[Int]
      SimpleType: Expr
        CodeReferenceElement: Expr
          PsiElement(identifier)('Expr')
      TypeArgumentsList
        PsiElement([)('[')
        SimpleType: Int
          CodeReferenceElement: Int
            PsiElement(identifier)('Int')
        PsiElement(])(']')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    MatchStatement
      ReferenceExpression: expr
        PsiElement(identifier)('expr')
      PsiWhiteSpace(' ')
      PsiElement(match)('match')
      PsiWhiteSpace('\n  ')
      CaseClauses
        CaseClause
          PsiElement(case)('case')
          PsiWhiteSpace(' ')
          QuotedPattern
            QuotedBlock
              PsiElement(')(''')
              PsiElement({)('{')
              PsiWhiteSpace(' ')
              MethodCall
                ReferenceExpression: foo
                  PsiElement(identifier)('foo')
                ArgumentList
                  PsiElement(()('(')
                  SplicedPatternExpression
                    PsiElement($)('$')
                    PsiElement({)('{')
                    NamingPattern: y
                      PsiElement(identifier)('y')
                      PsiElement(@)('@')
                      QuotedPattern
                        QuotedBlock
                          PsiElement(')(''')
                          PsiElement({)('{')
                          MethodCall
                            ReferenceExpression: bar
                              PsiElement(identifier)('bar')
                            ArgumentList
                              PsiElement(()('(')
                              ReferenceExpression: $_
                                PsiElement(identifier)('$_')
                              PsiElement())(')')
                          PsiElement(})('}')
                    PsiElement(})('}')
                  PsiElement())(')')
              PsiElement(})('}')
          PsiWhiteSpace(' ')
          PsiElement(=>)('=>')
          PsiWhiteSpace(' ')
          BlockOfExpressions
            ReferenceExpression: y
              PsiElement(identifier)('y')
  PsiWhiteSpace('\n\n')
  ScFunctionDefinition: noop
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(def)('def')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('noop')
    Parameters
      ParametersClause
        PsiElement(()('(')
        Parameter: expr
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(identifier)('expr')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParameterType
            ParametrizedType: Expr[Any]
              SimpleType: Expr
                CodeReferenceElement: Expr
                  PsiElement(identifier)('Expr')
              TypeArgumentsList
                PsiElement([)('[')
                SimpleType: Any
                  CodeReferenceElement: Any
                    PsiElement(identifier)('Any')
                PsiElement(])(']')
        PsiElement())(')')
      ParametersClause
        PsiElement(()('(')
        PsiElement(using)('using')
        PsiWhiteSpace(' ')
        Parameter: <anonymous>
          ParameterType
            SimpleType: Quotes
              CodeReferenceElement: Quotes
                PsiElement(identifier)('Quotes')
        PsiElement())(')')
    PsiElement(:)(':')
    PsiWhiteSpace(' ')
    ParametrizedType: Expr[Int]
      SimpleType: Expr
        CodeReferenceElement: Expr
          PsiElement(identifier)('Expr')
      TypeArgumentsList
        PsiElement([)('[')
        SimpleType: Int
          CodeReferenceElement: Int
            PsiElement(identifier)('Int')
        PsiElement(])(']')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    MatchStatement
      ReferenceExpression: expr
        PsiElement(identifier)('expr')
      PsiWhiteSpace(' ')
      PsiElement(match)('match')
      PsiWhiteSpace('\n  ')
      CaseClauses
        CaseClause
          PsiElement(case)('case')
          PsiWhiteSpace(' ')
          QuotedPattern
            QuotedBlock
              PsiElement(')(''')
              PsiElement({)('{')
              PsiWhiteSpace(' ')
              MethodCall
                ReferenceExpression: bar
                  PsiElement(identifier)('bar')
                ArgumentList
                  PsiElement(()('(')
                  SplicedPatternExpression
                    PsiElement($)('$')
                    PsiElement({)('{')
                    PsiWhiteSpace(' ')
                    QuotedPattern
                      QuotedBlock
                        PsiElement(')(''')
                        PsiElement({)('{')
                        PsiWhiteSpace(' ')
                        ReferenceExpression: $y
                          PsiElement(identifier)('$y')
                        PsiWhiteSpace(' ')
                        PsiElement(})('}')
                    PsiWhiteSpace('  ')
                    PsiElement(})('}')
                  PsiElement())(')')
              PsiWhiteSpace(' ')
              PsiElement(})('}')
          PsiWhiteSpace(' ')
          PsiElement(=>)('=>')
          PsiWhiteSpace(' ')
          BlockOfExpressions
            ReferenceExpression: y
              PsiElement(identifier)('y')
