import scala.compiletime.erasedValue

type Foo = Foo.type
object Foo

inline def fooErased[T] = inline erasedValue[T] match { case _ => }
val f = fooErased[Foo]
-----
ScalaFile
  ScImportStatement
    PsiElement(import)('import')
    PsiWhiteSpace(' ')
    ImportExpression
      CodeReferenceElement: scala.compiletime.erasedValue
        CodeReferenceElement: scala.compiletime
          CodeReferenceElement: scala
            PsiElement(identifier)('scala')
          PsiElement(.)('.')
          PsiElement(identifier)('compiletime')
        PsiElement(.)('.')
        PsiElement(identifier)('erasedValue')
  PsiWhiteSpace('\n\n')
  ScTypeAliasDefinition: Foo
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(type)('type')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Foo')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    SimpleType: Foo.type
      CodeReferenceElement: Foo
        PsiElement(identifier)('Foo')
      PsiElement(.)('.')
      PsiElement(type)('type')
  PsiWhiteSpace('\n')
  ScObject: Foo
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Foo')
    ExtendsBlock
      <empty list>
  PsiWhiteSpace('\n\n')
  ScFunctionDefinition: fooErased
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(inline)('inline')
    PsiWhiteSpace(' ')
    PsiElement(def)('def')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('fooErased')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: T
        PsiElement(identifier)('T')
      PsiElement(])(']')
    Parameters
      <empty list>
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    MatchStatement
      PsiElement(inline)('inline')
      PsiWhiteSpace(' ')
      GenericCall
        ReferenceExpression: erasedValue
          PsiElement(identifier)('erasedValue')
        TypeArgumentsList
          PsiElement([)('[')
          SimpleType: T
            CodeReferenceElement: T
              PsiElement(identifier)('T')
          PsiElement(])(']')
      PsiWhiteSpace(' ')
      PsiElement(match)('match')
      PsiWhiteSpace(' ')
      PsiElement({)('{')
      PsiWhiteSpace(' ')
      CaseClauses
        CaseClause
          PsiElement(case)('case')
          PsiWhiteSpace(' ')
          WildcardPattern
            PsiElement(_)('_')
          PsiWhiteSpace(' ')
          PsiElement(=>)('=>')
          BlockOfExpressions
            <empty list>
      PsiWhiteSpace(' ')
      PsiElement(})('}')
  PsiWhiteSpace('\n')
  ScPatternDefinition: f
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(val)('val')
    PsiWhiteSpace(' ')
    ListOfPatterns
      ReferencePattern: f
        PsiElement(identifier)('f')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    GenericCall
      ReferenceExpression: fooErased
        PsiElement(identifier)('fooErased')
      TypeArgumentsList
        PsiElement([)('[')
        SimpleType: Foo
          CodeReferenceElement: Foo
            PsiElement(identifier)('Foo')
        PsiElement(])(']')
