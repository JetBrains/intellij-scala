class C { type T }

object Main {

  //val a: implicit Int => Int = implicit (x: Int) => x
  //val b: Int => Int = a

  def main(args: Array[String]): Unit = {
    val choose: (c: C) ?=> Set[Int] = Set.empty
    val b0: (C) => Set[Int] = choose(using _)
    val b1: (c: C) => Set[Int] = choose(using _)
    def applyF(f: (c: C) => Set[Int]) = f(new C{type T=Int})
    //applyF(choose)
  }
}
-----
ScalaFile
  ScClass: C
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('C')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace(' ')
        ScTypeAliasDeclaration: T
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('T')
        PsiWhiteSpace(' ')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScObject: Main
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Main')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n\n  ')
        PsiComment(comment)('//val a: implicit Int => Int = implicit (x: Int) => x')
        PsiWhiteSpace('\n  ')
        PsiComment(comment)('//val b: Int => Int = a')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: main
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('main')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: args
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('args')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  ParametrizedType: Array[String]
                    SimpleType: Array
                      CodeReferenceElement: Array
                        PsiElement(identifier)('Array')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: String
                        CodeReferenceElement: String
                          PsiElement(identifier)('String')
                      PsiElement(])(']')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Unit
            CodeReferenceElement: Unit
              PsiElement(identifier)('Unit')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          BlockExpression
            PsiElement({)('{')
            PsiWhiteSpace('\n    ')
            ScPatternDefinition: choose
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              ListOfPatterns
                ReferencePattern: choose
                  PsiElement(identifier)('choose')
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              DependentFunctionType: (c: C) ?=> Set[Int]
                ParametersClause
                  PsiElement(()('(')
                  Parameter: c
                    PsiElement(identifier)('c')
                    PsiElement(:)(':')
                    PsiWhiteSpace(' ')
                    SimpleType: C
                      CodeReferenceElement: C
                        PsiElement(identifier)('C')
                  PsiElement())(')')
                PsiWhiteSpace(' ')
                PsiElement(?=>)('?=>')
                PsiWhiteSpace(' ')
                ParametrizedType: Set[Int]
                  SimpleType: Set
                    CodeReferenceElement: Set
                      PsiElement(identifier)('Set')
                  TypeArgumentsList
                    PsiElement([)('[')
                    SimpleType: Int
                      CodeReferenceElement: Int
                        PsiElement(identifier)('Int')
                    PsiElement(])(']')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              ReferenceExpression: Set.empty
                ReferenceExpression: Set
                  PsiElement(identifier)('Set')
                PsiElement(.)('.')
                PsiElement(identifier)('empty')
            PsiWhiteSpace('\n    ')
            ScPatternDefinition: b0
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              ListOfPatterns
                ReferencePattern: b0
                  PsiElement(identifier)('b0')
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              FunctionalType: (C) => Set[Int]
                TypeInParenthesis: (C)
                  PsiElement(()('(')
                  SimpleType: C
                    CodeReferenceElement: C
                      PsiElement(identifier)('C')
                  PsiElement())(')')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                ParametrizedType: Set[Int]
                  SimpleType: Set
                    CodeReferenceElement: Set
                      PsiElement(identifier)('Set')
                  TypeArgumentsList
                    PsiElement([)('[')
                    SimpleType: Int
                      CodeReferenceElement: Int
                        PsiElement(identifier)('Int')
                    PsiElement(])(']')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              MethodCall
                ReferenceExpression: choose
                  PsiElement(identifier)('choose')
                ArgumentList
                  PsiElement(()('(')
                  PsiElement(using)('using')
                  PsiWhiteSpace(' ')
                  UnderscoreSection
                    PsiElement(_)('_')
                  PsiElement())(')')
            PsiWhiteSpace('\n    ')
            ScPatternDefinition: b1
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              ListOfPatterns
                ReferencePattern: b1
                  PsiElement(identifier)('b1')
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              DependentFunctionType: (c: C) => Set[Int]
                ParametersClause
                  PsiElement(()('(')
                  Parameter: c
                    PsiElement(identifier)('c')
                    PsiElement(:)(':')
                    PsiWhiteSpace(' ')
                    SimpleType: C
                      CodeReferenceElement: C
                        PsiElement(identifier)('C')
                  PsiElement())(')')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                ParametrizedType: Set[Int]
                  SimpleType: Set
                    CodeReferenceElement: Set
                      PsiElement(identifier)('Set')
                  TypeArgumentsList
                    PsiElement([)('[')
                    SimpleType: Int
                      CodeReferenceElement: Int
                        PsiElement(identifier)('Int')
                    PsiElement(])(']')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              MethodCall
                ReferenceExpression: choose
                  PsiElement(identifier)('choose')
                ArgumentList
                  PsiElement(()('(')
                  PsiElement(using)('using')
                  PsiWhiteSpace(' ')
                  UnderscoreSection
                    PsiElement(_)('_')
                  PsiElement())(')')
            PsiWhiteSpace('\n    ')
            ScFunctionDefinition: applyF
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(def)('def')
              PsiWhiteSpace(' ')
              PsiElement(identifier)('applyF')
              Parameters
                ParametersClause
                  PsiElement(()('(')
                  Parameter: f
                    AnnotationsList
                      <empty list>
                    Modifiers
                      <empty list>
                    PsiElement(identifier)('f')
                    PsiElement(:)(':')
                    PsiWhiteSpace(' ')
                    ParameterType
                      DependentFunctionType: (c: C) => Set[Int]
                        ParametersClause
                          PsiElement(()('(')
                          Parameter: c
                            PsiElement(identifier)('c')
                            PsiElement(:)(':')
                            PsiWhiteSpace(' ')
                            SimpleType: C
                              CodeReferenceElement: C
                                PsiElement(identifier)('C')
                          PsiElement())(')')
                        PsiWhiteSpace(' ')
                        PsiElement(=>)('=>')
                        PsiWhiteSpace(' ')
                        ParametrizedType: Set[Int]
                          SimpleType: Set
                            CodeReferenceElement: Set
                              PsiElement(identifier)('Set')
                          TypeArgumentsList
                            PsiElement([)('[')
                            SimpleType: Int
                              CodeReferenceElement: Int
                                PsiElement(identifier)('Int')
                            PsiElement(])(']')
                  PsiElement())(')')
              PsiWhiteSpace(' ')
              PsiElement(=)('=')
              PsiWhiteSpace(' ')
              MethodCall
                ReferenceExpression: f
                  PsiElement(identifier)('f')
                ArgumentList
                  PsiElement(()('(')
                  ScNewTemplateDefinition: <anonymous>
                    PsiElement(new)('new')
                    PsiWhiteSpace(' ')
                    ExtendsBlock
                      TemplateParents
                        ConstructorInvocation
                          SimpleType: C
                            CodeReferenceElement: C
                              PsiElement(identifier)('C')
                      ScTemplateBody
                        PsiElement({)('{')
                        ScTypeAliasDefinition: T
                          AnnotationsList
                            <empty list>
                          Modifiers
                            <empty list>
                          PsiElement(type)('type')
                          PsiWhiteSpace(' ')
                          PsiElement(identifier)('T')
                          PsiElement(=)('=')
                          SimpleType: Int
                            CodeReferenceElement: Int
                              PsiElement(identifier)('Int')
                        PsiElement(})('}')
                  PsiElement())(')')
            PsiWhiteSpace('\n    ')
            PsiComment(comment)('//applyF(choose)')
            PsiWhiteSpace('\n  ')
            PsiElement(})('}')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
