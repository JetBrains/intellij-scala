object Test {
  @annotation.tailrec
  def foo(i: Unit ?=> Int): Unit ?=> Int =
    if (i == 0)
      0
    else
      foo(i - 1)
}
-----
ScalaFile
  ScObject: Test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: foo
          AnnotationsList
            Annotation
              PsiElement(@)('@')
              AnnotationExpression
                ConstructorInvocation
                  SimpleType: annotation.tailrec
                    CodeReferenceElement: annotation.tailrec
                      CodeReferenceElement: annotation
                        PsiElement(identifier)('annotation')
                      PsiElement(.)('.')
                      PsiElement(identifier)('tailrec')
          Modifiers
            <empty list>
          PsiWhiteSpace('\n  ')
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('foo')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: i
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('i')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  FunctionalType: Unit ?=> Int
                    SimpleType: Unit
                      CodeReferenceElement: Unit
                        PsiElement(identifier)('Unit')
                    PsiWhiteSpace(' ')
                    PsiElement(?=>)('?=>')
                    PsiWhiteSpace(' ')
                    SimpleType: Int
                      CodeReferenceElement: Int
                        PsiElement(identifier)('Int')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          FunctionalType: Unit ?=> Int
            SimpleType: Unit
              CodeReferenceElement: Unit
                PsiElement(identifier)('Unit')
            PsiWhiteSpace(' ')
            PsiElement(?=>)('?=>')
            PsiWhiteSpace(' ')
            SimpleType: Int
              CodeReferenceElement: Int
                PsiElement(identifier)('Int')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace('\n    ')
          IfStatement
            PsiElement(if)('if')
            PsiWhiteSpace(' ')
            PsiElement(()('(')
            InfixExpression
              ReferenceExpression: i
                PsiElement(identifier)('i')
              PsiWhiteSpace(' ')
              ReferenceExpression: ==
                PsiElement(identifier)('==')
              PsiWhiteSpace(' ')
              IntegerLiteral
                PsiElement(integer)('0')
            PsiElement())(')')
            PsiWhiteSpace('\n      ')
            IntegerLiteral
              PsiElement(integer)('0')
            PsiWhiteSpace('\n    ')
            PsiElement(else)('else')
            PsiWhiteSpace('\n      ')
            MethodCall
              ReferenceExpression: foo
                PsiElement(identifier)('foo')
              ArgumentList
                PsiElement(()('(')
                InfixExpression
                  ReferenceExpression: i
                    PsiElement(identifier)('i')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: -
                    PsiElement(identifier)('-')
                  PsiWhiteSpace(' ')
                  IntegerLiteral
                    PsiElement(integer)('1')
                PsiElement())(')')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
