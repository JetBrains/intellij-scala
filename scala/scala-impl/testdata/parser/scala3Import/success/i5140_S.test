class S {
  val j = new J()
  val x: Array[Dog] = ???
  // Check that the java varargs for `foo` gets typed as `Array[_ <: Animal]`.
  // Otherwise, the call below would fail in -Ycheck:elimRepeated because arrays are invariant before erasure.
  // This is unsound but allowed.
  j.foo(x*)
  j.foo(new Dog, new Dog)
}
-----
ScalaFile
  ScClass: S
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('S')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: j
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: j
              PsiElement(identifier)('j')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ScNewTemplateDefinition: <anonymous>
            PsiElement(new)('new')
            PsiWhiteSpace(' ')
            ExtendsBlock
              TemplateParents
                ConstructorInvocation
                  SimpleType: J
                    CodeReferenceElement: J
                      PsiElement(identifier)('J')
                  ArgumentList
                    PsiElement(()('(')
                    PsiElement())(')')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: x
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: x
              PsiElement(identifier)('x')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: Array[Dog]
            SimpleType: Array
              CodeReferenceElement: Array
                PsiElement(identifier)('Array')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: Dog
                CodeReferenceElement: Dog
                  PsiElement(identifier)('Dog')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: ???
            PsiElement(identifier)('???')
        PsiWhiteSpace('\n  ')
        PsiComment(comment)('// Check that the java varargs for `foo` gets typed as `Array[_ <: Animal]`.')
        PsiWhiteSpace('\n  ')
        PsiComment(comment)('// Otherwise, the call below would fail in -Ycheck:elimRepeated because arrays are invariant before erasure.')
        PsiWhiteSpace('\n  ')
        PsiComment(comment)('// This is unsound but allowed.')
        PsiWhiteSpace('\n  ')
        MethodCall
          ReferenceExpression: j.foo
            ReferenceExpression: j
              PsiElement(identifier)('j')
            PsiElement(.)('.')
            PsiElement(identifier)('foo')
          ArgumentList
            PsiElement(()('(')
            TypedExpression
              ReferenceExpression: x
                PsiElement(identifier)('x')
              SequenceArgumentType
                PsiElement(identifier)('*')
            PsiElement())(')')
        PsiWhiteSpace('\n  ')
        MethodCall
          ReferenceExpression: j.foo
            ReferenceExpression: j
              PsiElement(identifier)('j')
            PsiElement(.)('.')
            PsiElement(identifier)('foo')
          ArgumentList
            PsiElement(()('(')
            ScNewTemplateDefinition: <anonymous>
              PsiElement(new)('new')
              PsiWhiteSpace(' ')
              ExtendsBlock
                TemplateParents
                  ConstructorInvocation
                    SimpleType: Dog
                      CodeReferenceElement: Dog
                        PsiElement(identifier)('Dog')
            PsiElement(,)(',')
            PsiWhiteSpace(' ')
            ScNewTemplateDefinition: <anonymous>
              PsiElement(new)('new')
              PsiWhiteSpace(' ')
              ExtendsBlock
                TemplateParents
                  ConstructorInvocation
                    SimpleType: Dog
                      CodeReferenceElement: Dog
                        PsiElement(identifier)('Dog')
            PsiElement())(')')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
