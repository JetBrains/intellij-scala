import scala.language.implicitConversions

class Ops[A](a: A) {
  def bar: Unit = ()
}

implicit def toOps[A](a: A): Ops[A] = new Ops[A](a)

type Id[A] = A

class Foo[A](val value: Id[A]) {
  def same: Foo[A] = new Foo[A](value)
  def map[B](f: A => B): Foo[B] = new Foo[B](f(value))
}

val x: Int = 1
val foo: Foo[Int] = new Foo(1)

val res1 = x.bar
val res2 = foo.value.bar
val res3 = foo.same.value.bar
val res4 = foo.map[Int](_ + 1).value.bar
val res5 = foo.map(_ + 1).value.bar
-----
ScalaFile
  ScImportStatement
    PsiElement(import)('import')
    PsiWhiteSpace(' ')
    ImportExpression
      CodeReferenceElement: scala.language.implicitConversions
        CodeReferenceElement: scala.language
          CodeReferenceElement: scala
            PsiElement(identifier)('scala')
          PsiElement(.)('.')
          PsiElement(identifier)('language')
        PsiElement(.)('.')
        PsiElement(identifier)('implicitConversions')
  PsiWhiteSpace('\n\n')
  ScClass: Ops
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Ops')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: A
        PsiElement(identifier)('A')
      PsiElement(])(']')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        ParametersClause
          PsiElement(()('(')
          ClassParameter: a
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(identifier)('a')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            ParameterType
              SimpleType: A
                CodeReferenceElement: A
                  PsiElement(identifier)('A')
          PsiElement())(')')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: bar
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('bar')
          Parameters
            <empty list>
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Unit
            CodeReferenceElement: Unit
              PsiElement(identifier)('Unit')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          UnitExpression
            PsiElement(()('(')
            PsiElement())(')')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScFunctionDefinition: toOps
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(implicit)('implicit')
    PsiWhiteSpace(' ')
    PsiElement(def)('def')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('toOps')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: A
        PsiElement(identifier)('A')
      PsiElement(])(']')
    Parameters
      ParametersClause
        PsiElement(()('(')
        Parameter: a
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(identifier)('a')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParameterType
            SimpleType: A
              CodeReferenceElement: A
                PsiElement(identifier)('A')
        PsiElement())(')')
    PsiElement(:)(':')
    PsiWhiteSpace(' ')
    ParametrizedType: Ops[A]
      SimpleType: Ops
        CodeReferenceElement: Ops
          PsiElement(identifier)('Ops')
      TypeArgumentsList
        PsiElement([)('[')
        SimpleType: A
          CodeReferenceElement: A
            PsiElement(identifier)('A')
        PsiElement(])(']')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    ScNewTemplateDefinition: <anonymous>
      PsiElement(new)('new')
      PsiWhiteSpace(' ')
      ExtendsBlock
        TemplateParents
          ConstructorInvocation
            ParametrizedType: Ops[A]
              SimpleType: Ops
                CodeReferenceElement: Ops
                  PsiElement(identifier)('Ops')
              TypeArgumentsList
                PsiElement([)('[')
                SimpleType: A
                  CodeReferenceElement: A
                    PsiElement(identifier)('A')
                PsiElement(])(']')
            ArgumentList
              PsiElement(()('(')
              ReferenceExpression: a
                PsiElement(identifier)('a')
              PsiElement())(')')
  PsiWhiteSpace('\n\n')
  ScTypeAliasDefinition: Id
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(type)('type')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Id')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: A
        PsiElement(identifier)('A')
      PsiElement(])(']')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    SimpleType: A
      CodeReferenceElement: A
        PsiElement(identifier)('A')
  PsiWhiteSpace('\n\n')
  ScClass: Foo
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Foo')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: A
        PsiElement(identifier)('A')
      PsiElement(])(']')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        ParametersClause
          PsiElement(()('(')
          ClassParameter: value
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(val)('val')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('value')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            ParameterType
              ParametrizedType: Id[A]
                SimpleType: Id
                  CodeReferenceElement: Id
                    PsiElement(identifier)('Id')
                TypeArgumentsList
                  PsiElement([)('[')
                  SimpleType: A
                    CodeReferenceElement: A
                      PsiElement(identifier)('A')
                  PsiElement(])(']')
          PsiElement())(')')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: same
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('same')
          Parameters
            <empty list>
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: Foo[A]
            SimpleType: Foo
              CodeReferenceElement: Foo
                PsiElement(identifier)('Foo')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: A
                CodeReferenceElement: A
                  PsiElement(identifier)('A')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ScNewTemplateDefinition: <anonymous>
            PsiElement(new)('new')
            PsiWhiteSpace(' ')
            ExtendsBlock
              TemplateParents
                ConstructorInvocation
                  ParametrizedType: Foo[A]
                    SimpleType: Foo
                      CodeReferenceElement: Foo
                        PsiElement(identifier)('Foo')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: A
                        CodeReferenceElement: A
                          PsiElement(identifier)('A')
                      PsiElement(])(']')
                  ArgumentList
                    PsiElement(()('(')
                    ReferenceExpression: value
                      PsiElement(identifier)('value')
                    PsiElement())(')')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: map
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('map')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: B
              PsiElement(identifier)('B')
            PsiElement(])(']')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: f
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('f')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  FunctionalType: A => B
                    SimpleType: A
                      CodeReferenceElement: A
                        PsiElement(identifier)('A')
                    PsiWhiteSpace(' ')
                    PsiElement(=>)('=>')
                    PsiWhiteSpace(' ')
                    SimpleType: B
                      CodeReferenceElement: B
                        PsiElement(identifier)('B')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: Foo[B]
            SimpleType: Foo
              CodeReferenceElement: Foo
                PsiElement(identifier)('Foo')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: B
                CodeReferenceElement: B
                  PsiElement(identifier)('B')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ScNewTemplateDefinition: <anonymous>
            PsiElement(new)('new')
            PsiWhiteSpace(' ')
            ExtendsBlock
              TemplateParents
                ConstructorInvocation
                  ParametrizedType: Foo[B]
                    SimpleType: Foo
                      CodeReferenceElement: Foo
                        PsiElement(identifier)('Foo')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: B
                        CodeReferenceElement: B
                          PsiElement(identifier)('B')
                      PsiElement(])(']')
                  ArgumentList
                    PsiElement(()('(')
                    MethodCall
                      ReferenceExpression: f
                        PsiElement(identifier)('f')
                      ArgumentList
                        PsiElement(()('(')
                        ReferenceExpression: value
                          PsiElement(identifier)('value')
                        PsiElement())(')')
                    PsiElement())(')')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScPatternDefinition: x
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(val)('val')
    PsiWhiteSpace(' ')
    ListOfPatterns
      ReferencePattern: x
        PsiElement(identifier)('x')
    PsiElement(:)(':')
    PsiWhiteSpace(' ')
    SimpleType: Int
      CodeReferenceElement: Int
        PsiElement(identifier)('Int')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    IntegerLiteral
      PsiElement(integer)('1')
  PsiWhiteSpace('\n')
  ScPatternDefinition: foo
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(val)('val')
    PsiWhiteSpace(' ')
    ListOfPatterns
      ReferencePattern: foo
        PsiElement(identifier)('foo')
    PsiElement(:)(':')
    PsiWhiteSpace(' ')
    ParametrizedType: Foo[Int]
      SimpleType: Foo
        CodeReferenceElement: Foo
          PsiElement(identifier)('Foo')
      TypeArgumentsList
        PsiElement([)('[')
        SimpleType: Int
          CodeReferenceElement: Int
            PsiElement(identifier)('Int')
        PsiElement(])(']')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    ScNewTemplateDefinition: <anonymous>
      PsiElement(new)('new')
      PsiWhiteSpace(' ')
      ExtendsBlock
        TemplateParents
          ConstructorInvocation
            SimpleType: Foo
              CodeReferenceElement: Foo
                PsiElement(identifier)('Foo')
            ArgumentList
              PsiElement(()('(')
              IntegerLiteral
                PsiElement(integer)('1')
              PsiElement())(')')
  PsiWhiteSpace('\n\n')
  ScPatternDefinition: res1
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(val)('val')
    PsiWhiteSpace(' ')
    ListOfPatterns
      ReferencePattern: res1
        PsiElement(identifier)('res1')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    ReferenceExpression: x.bar
      ReferenceExpression: x
        PsiElement(identifier)('x')
      PsiElement(.)('.')
      PsiElement(identifier)('bar')
  PsiWhiteSpace('\n')
  ScPatternDefinition: res2
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(val)('val')
    PsiWhiteSpace(' ')
    ListOfPatterns
      ReferencePattern: res2
        PsiElement(identifier)('res2')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    ReferenceExpression: foo.value.bar
      ReferenceExpression: foo.value
        ReferenceExpression: foo
          PsiElement(identifier)('foo')
        PsiElement(.)('.')
        PsiElement(identifier)('value')
      PsiElement(.)('.')
      PsiElement(identifier)('bar')
  PsiWhiteSpace('\n')
  ScPatternDefinition: res3
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(val)('val')
    PsiWhiteSpace(' ')
    ListOfPatterns
      ReferencePattern: res3
        PsiElement(identifier)('res3')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    ReferenceExpression: foo.same.value.bar
      ReferenceExpression: foo.same.value
        ReferenceExpression: foo.same
          ReferenceExpression: foo
            PsiElement(identifier)('foo')
          PsiElement(.)('.')
          PsiElement(identifier)('same')
        PsiElement(.)('.')
        PsiElement(identifier)('value')
      PsiElement(.)('.')
      PsiElement(identifier)('bar')
  PsiWhiteSpace('\n')
  ScPatternDefinition: res4
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(val)('val')
    PsiWhiteSpace(' ')
    ListOfPatterns
      ReferencePattern: res4
        PsiElement(identifier)('res4')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    ReferenceExpression: foo.map[Int](_ + 1).value.bar
      ReferenceExpression: foo.map[Int](_ + 1).value
        MethodCall
          GenericCall
            ReferenceExpression: foo.map
              ReferenceExpression: foo
                PsiElement(identifier)('foo')
              PsiElement(.)('.')
              PsiElement(identifier)('map')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: Int
                CodeReferenceElement: Int
                  PsiElement(identifier)('Int')
              PsiElement(])(']')
          ArgumentList
            PsiElement(()('(')
            InfixExpression
              UnderscoreSection
                PsiElement(_)('_')
              PsiWhiteSpace(' ')
              ReferenceExpression: +
                PsiElement(identifier)('+')
              PsiWhiteSpace(' ')
              IntegerLiteral
                PsiElement(integer)('1')
            PsiElement())(')')
        PsiElement(.)('.')
        PsiElement(identifier)('value')
      PsiElement(.)('.')
      PsiElement(identifier)('bar')
  PsiWhiteSpace('\n')
  ScPatternDefinition: res5
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(val)('val')
    PsiWhiteSpace(' ')
    ListOfPatterns
      ReferencePattern: res5
        PsiElement(identifier)('res5')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    ReferenceExpression: foo.map(_ + 1).value.bar
      ReferenceExpression: foo.map(_ + 1).value
        MethodCall
          ReferenceExpression: foo.map
            ReferenceExpression: foo
              PsiElement(identifier)('foo')
            PsiElement(.)('.')
            PsiElement(identifier)('map')
          ArgumentList
            PsiElement(()('(')
            InfixExpression
              UnderscoreSection
                PsiElement(_)('_')
              PsiWhiteSpace(' ')
              ReferenceExpression: +
                PsiElement(identifier)('+')
              PsiWhiteSpace(' ')
              IntegerLiteral
                PsiElement(integer)('1')
            PsiElement())(')')
        PsiElement(.)('.')
        PsiElement(identifier)('value')
      PsiElement(.)('.')
      PsiElement(identifier)('bar')
