object A {
  val x1: 3 | 4 = 3
  val x2: 3 | 4 = 4
  val x3: 3 | 4 = if (???) 3 else 4
}

// The following example is from issue #1551
object Test1 {
  sealed trait Fence[+T, +S]
  case object End extends Fence[Nothing, Nothing]
  case class Post[+T, +S](value: T, next: Panel[T, S] | End.type) extends Fence[T, S]
  case class Panel[+T, +S](value: S, next: Post[T, S]) extends Fence[T, S]

  val fence = Post(1, Panel("two", Post(3, End)))
}
-----
ScalaFile
  ScObject: A
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('A')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: x1
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: x1
              PsiElement(identifier)('x1')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          InfixType: 3 | 4
            LiteralType: 3
              IntegerLiteral
                PsiElement(integer)('3')
            PsiWhiteSpace(' ')
            CodeReferenceElement: |
              PsiElement(identifier)('|')
            PsiWhiteSpace(' ')
            LiteralType: 4
              IntegerLiteral
                PsiElement(integer)('4')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          IntegerLiteral
            PsiElement(integer)('3')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: x2
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: x2
              PsiElement(identifier)('x2')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          InfixType: 3 | 4
            LiteralType: 3
              IntegerLiteral
                PsiElement(integer)('3')
            PsiWhiteSpace(' ')
            CodeReferenceElement: |
              PsiElement(identifier)('|')
            PsiWhiteSpace(' ')
            LiteralType: 4
              IntegerLiteral
                PsiElement(integer)('4')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          IntegerLiteral
            PsiElement(integer)('4')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: x3
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: x3
              PsiElement(identifier)('x3')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          InfixType: 3 | 4
            LiteralType: 3
              IntegerLiteral
                PsiElement(integer)('3')
            PsiWhiteSpace(' ')
            CodeReferenceElement: |
              PsiElement(identifier)('|')
            PsiWhiteSpace(' ')
            LiteralType: 4
              IntegerLiteral
                PsiElement(integer)('4')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          IfStatement
            PsiElement(if)('if')
            PsiWhiteSpace(' ')
            PsiElement(()('(')
            ReferenceExpression: ???
              PsiElement(identifier)('???')
            PsiElement())(')')
            PsiWhiteSpace(' ')
            IntegerLiteral
              PsiElement(integer)('3')
            PsiWhiteSpace(' ')
            PsiElement(else)('else')
            PsiWhiteSpace(' ')
            IntegerLiteral
              PsiElement(integer)('4')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScObject: Test1
    PsiComment(comment)('// The following example is from issue #1551')
    PsiWhiteSpace('\n')
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test1')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScTrait: Fence
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(sealed)('sealed')
          PsiWhiteSpace(' ')
          PsiElement(trait)('trait')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Fence')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: T
              PsiElement(identifier)('+')
              PsiElement(identifier)('T')
            PsiElement(,)(',')
            PsiWhiteSpace(' ')
            TypeParameter: S
              PsiElement(identifier)('+')
              PsiElement(identifier)('S')
            PsiElement(])(']')
          ExtendsBlock
            <empty list>
        PsiWhiteSpace('\n  ')
        ScObject: End
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(case)('case')
          PsiWhiteSpace(' ')
          PsiElement(object)('object')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('End')
          PsiWhiteSpace(' ')
          ExtendsBlock
            PsiElement(extends)('extends')
            PsiWhiteSpace(' ')
            TemplateParents
              ConstructorInvocation
                ParametrizedType: Fence[Nothing, Nothing]
                  SimpleType: Fence
                    CodeReferenceElement: Fence
                      PsiElement(identifier)('Fence')
                  TypeArgumentsList
                    PsiElement([)('[')
                    SimpleType: Nothing
                      CodeReferenceElement: Nothing
                        PsiElement(identifier)('Nothing')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    SimpleType: Nothing
                      CodeReferenceElement: Nothing
                        PsiElement(identifier)('Nothing')
                    PsiElement(])(']')
        PsiWhiteSpace('\n  ')
        ScClass: Post
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(case)('case')
          PsiWhiteSpace(' ')
          PsiElement(class)('class')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Post')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: T
              PsiElement(identifier)('+')
              PsiElement(identifier)('T')
            PsiElement(,)(',')
            PsiWhiteSpace(' ')
            TypeParameter: S
              PsiElement(identifier)('+')
              PsiElement(identifier)('S')
            PsiElement(])(']')
          PrimaryConstructor
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            Parameters
              ParametersClause
                PsiElement(()('(')
                ClassParameter: value
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(identifier)('value')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    SimpleType: T
                      CodeReferenceElement: T
                        PsiElement(identifier)('T')
                PsiElement(,)(',')
                PsiWhiteSpace(' ')
                ClassParameter: next
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(identifier)('next')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    InfixType: Panel[T, S] | End.type
                      ParametrizedType: Panel[T, S]
                        SimpleType: Panel
                          CodeReferenceElement: Panel
                            PsiElement(identifier)('Panel')
                        TypeArgumentsList
                          PsiElement([)('[')
                          SimpleType: T
                            CodeReferenceElement: T
                              PsiElement(identifier)('T')
                          PsiElement(,)(',')
                          PsiWhiteSpace(' ')
                          SimpleType: S
                            CodeReferenceElement: S
                              PsiElement(identifier)('S')
                          PsiElement(])(']')
                      PsiWhiteSpace(' ')
                      CodeReferenceElement: |
                        PsiElement(identifier)('|')
                      PsiWhiteSpace(' ')
                      SimpleType: End.type
                        CodeReferenceElement: End
                          PsiElement(identifier)('End')
                        PsiElement(.)('.')
                        PsiElement(type)('type')
                PsiElement())(')')
          PsiWhiteSpace(' ')
          ExtendsBlock
            PsiElement(extends)('extends')
            PsiWhiteSpace(' ')
            TemplateParents
              ConstructorInvocation
                ParametrizedType: Fence[T, S]
                  SimpleType: Fence
                    CodeReferenceElement: Fence
                      PsiElement(identifier)('Fence')
                  TypeArgumentsList
                    PsiElement([)('[')
                    SimpleType: T
                      CodeReferenceElement: T
                        PsiElement(identifier)('T')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    SimpleType: S
                      CodeReferenceElement: S
                        PsiElement(identifier)('S')
                    PsiElement(])(']')
        PsiWhiteSpace('\n  ')
        ScClass: Panel
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(case)('case')
          PsiWhiteSpace(' ')
          PsiElement(class)('class')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Panel')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: T
              PsiElement(identifier)('+')
              PsiElement(identifier)('T')
            PsiElement(,)(',')
            PsiWhiteSpace(' ')
            TypeParameter: S
              PsiElement(identifier)('+')
              PsiElement(identifier)('S')
            PsiElement(])(']')
          PrimaryConstructor
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            Parameters
              ParametersClause
                PsiElement(()('(')
                ClassParameter: value
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(identifier)('value')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    SimpleType: S
                      CodeReferenceElement: S
                        PsiElement(identifier)('S')
                PsiElement(,)(',')
                PsiWhiteSpace(' ')
                ClassParameter: next
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(identifier)('next')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    ParametrizedType: Post[T, S]
                      SimpleType: Post
                        CodeReferenceElement: Post
                          PsiElement(identifier)('Post')
                      TypeArgumentsList
                        PsiElement([)('[')
                        SimpleType: T
                          CodeReferenceElement: T
                            PsiElement(identifier)('T')
                        PsiElement(,)(',')
                        PsiWhiteSpace(' ')
                        SimpleType: S
                          CodeReferenceElement: S
                            PsiElement(identifier)('S')
                        PsiElement(])(']')
                PsiElement())(')')
          PsiWhiteSpace(' ')
          ExtendsBlock
            PsiElement(extends)('extends')
            PsiWhiteSpace(' ')
            TemplateParents
              ConstructorInvocation
                ParametrizedType: Fence[T, S]
                  SimpleType: Fence
                    CodeReferenceElement: Fence
                      PsiElement(identifier)('Fence')
                  TypeArgumentsList
                    PsiElement([)('[')
                    SimpleType: T
                      CodeReferenceElement: T
                        PsiElement(identifier)('T')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    SimpleType: S
                      CodeReferenceElement: S
                        PsiElement(identifier)('S')
                    PsiElement(])(']')
        PsiWhiteSpace('\n\n  ')
        ScPatternDefinition: fence
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: fence
              PsiElement(identifier)('fence')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: Post
              PsiElement(identifier)('Post')
            ArgumentList
              PsiElement(()('(')
              IntegerLiteral
                PsiElement(integer)('1')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              MethodCall
                ReferenceExpression: Panel
                  PsiElement(identifier)('Panel')
                ArgumentList
                  PsiElement(()('(')
                  StringLiteral
                    PsiElement(string content)('"two"')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  MethodCall
                    ReferenceExpression: Post
                      PsiElement(identifier)('Post')
                    ArgumentList
                      PsiElement(()('(')
                      IntegerLiteral
                        PsiElement(integer)('3')
                      PsiElement(,)(',')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: End
                        PsiElement(identifier)('End')
                      PsiElement())(')')
                  PsiElement())(')')
              PsiElement())(')')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
