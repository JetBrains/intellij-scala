trait Y
trait Z extends Y
class X[+A <: Y]

object Test {
  def f1(x: X[_ <: Y]) = x match {
    case _: X[Any] => // looks a little funny; `Any` is outside the bounds for `A`
  }
  def f2(x: X[_ <: Y]) = x match {
    case _: X[Y]   => // looks better, let's allow this (too)
  }

  // NonLocalReturnControl[_] warnings
  def foo: Int = List(0).foldLeft(0){case _ => return 0}
}
-----
ScalaFile
  ScTrait: Y
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Y')
    ExtendsBlock
      <empty list>
  PsiWhiteSpace('\n')
  ScTrait: Z
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Z')
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          SimpleType: Y
            CodeReferenceElement: Y
              PsiElement(identifier)('Y')
  PsiWhiteSpace('\n')
  ScClass: X
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('X')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: A
        PsiElement(identifier)('+')
        PsiElement(identifier)('A')
        PsiWhiteSpace(' ')
        PsiElement(<:)('<:')
        PsiWhiteSpace(' ')
        SimpleType: Y
          CodeReferenceElement: Y
            PsiElement(identifier)('Y')
      PsiElement(])(']')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    ExtendsBlock
      <empty list>
  PsiWhiteSpace('\n\n')
  ScObject: Test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: f1
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('f1')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: x
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  ParametrizedType: X[_ <: Y]
                    SimpleType: X
                      CodeReferenceElement: X
                        PsiElement(identifier)('X')
                    TypeArgumentsList
                      PsiElement([)('[')
                      WildcardType: _ <: Y
                        PsiElement(_)('_')
                        PsiWhiteSpace(' ')
                        PsiElement(<:)('<:')
                        PsiWhiteSpace(' ')
                        SimpleType: Y
                          CodeReferenceElement: Y
                            PsiElement(identifier)('Y')
                      PsiElement(])(']')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MatchStatement
            ReferenceExpression: x
              PsiElement(identifier)('x')
            PsiWhiteSpace(' ')
            PsiElement(match)('match')
            PsiWhiteSpace(' ')
            PsiElement({)('{')
            PsiWhiteSpace('\n    ')
            CaseClauses
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                Scala3 TypedPattern
                  WildcardPattern
                    PsiElement(_)('_')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  TypePattern
                    ParametrizedType: X[Any]
                      SimpleType: X
                        CodeReferenceElement: X
                          PsiElement(identifier)('X')
                      TypeArgumentsList
                        PsiElement([)('[')
                        SimpleType: Any
                          CodeReferenceElement: Any
                            PsiElement(identifier)('Any')
                        PsiElement(])(']')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                BlockOfExpressions
                  <empty list>
            PsiWhiteSpace(' ')
            PsiComment(comment)('// looks a little funny; `Any` is outside the bounds for `A`')
            PsiWhiteSpace('\n  ')
            PsiElement(})('}')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: f2
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('f2')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: x
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  ParametrizedType: X[_ <: Y]
                    SimpleType: X
                      CodeReferenceElement: X
                        PsiElement(identifier)('X')
                    TypeArgumentsList
                      PsiElement([)('[')
                      WildcardType: _ <: Y
                        PsiElement(_)('_')
                        PsiWhiteSpace(' ')
                        PsiElement(<:)('<:')
                        PsiWhiteSpace(' ')
                        SimpleType: Y
                          CodeReferenceElement: Y
                            PsiElement(identifier)('Y')
                      PsiElement(])(']')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MatchStatement
            ReferenceExpression: x
              PsiElement(identifier)('x')
            PsiWhiteSpace(' ')
            PsiElement(match)('match')
            PsiWhiteSpace(' ')
            PsiElement({)('{')
            PsiWhiteSpace('\n    ')
            CaseClauses
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                Scala3 TypedPattern
                  WildcardPattern
                    PsiElement(_)('_')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  TypePattern
                    ParametrizedType: X[Y]
                      SimpleType: X
                        CodeReferenceElement: X
                          PsiElement(identifier)('X')
                      TypeArgumentsList
                        PsiElement([)('[')
                        SimpleType: Y
                          CodeReferenceElement: Y
                            PsiElement(identifier)('Y')
                        PsiElement(])(']')
                PsiWhiteSpace('   ')
                PsiElement(=>)('=>')
                BlockOfExpressions
                  <empty list>
            PsiWhiteSpace(' ')
            PsiComment(comment)('// looks better, let's allow this (too)')
            PsiWhiteSpace('\n  ')
            PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: foo
          PsiComment(comment)('// NonLocalReturnControl[_] warnings')
          PsiWhiteSpace('\n  ')
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('foo')
          Parameters
            <empty list>
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Int
            CodeReferenceElement: Int
              PsiElement(identifier)('Int')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            MethodCall
              ReferenceExpression: List(0).foldLeft
                MethodCall
                  ReferenceExpression: List
                    PsiElement(identifier)('List')
                  ArgumentList
                    PsiElement(()('(')
                    IntegerLiteral
                      PsiElement(integer)('0')
                    PsiElement())(')')
                PsiElement(.)('.')
                PsiElement(identifier)('foldLeft')
              ArgumentList
                PsiElement(()('(')
                IntegerLiteral
                  PsiElement(integer)('0')
                PsiElement())(')')
            ArgumentList
              BlockExpression
                PsiElement({)('{')
                CaseClauses
                  CaseClause
                    PsiElement(case)('case')
                    PsiWhiteSpace(' ')
                    WildcardPattern
                      PsiElement(_)('_')
                    PsiWhiteSpace(' ')
                    PsiElement(=>)('=>')
                    PsiWhiteSpace(' ')
                    BlockOfExpressions
                      ReturnStatement
                        PsiElement(return)('return')
                        PsiWhiteSpace(' ')
                        IntegerLiteral
                          PsiElement(integer)('0')
                PsiElement(})('}')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
