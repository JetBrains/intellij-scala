object Test {
  List(1, 2, 3, 4) match {
    case List(1, 2, xs*) =>
      val ys: Seq[Int] = xs
      println(ys)
  }

  val List(1, 2, x*) = List(1, 2, 3, 4)
}
-----
ScalaFile
  ScObject: Test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        MatchStatement
          MethodCall
            ReferenceExpression: List
              PsiElement(identifier)('List')
            ArgumentList
              PsiElement(()('(')
              IntegerLiteral
                PsiElement(integer)('1')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              IntegerLiteral
                PsiElement(integer)('2')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              IntegerLiteral
                PsiElement(integer)('3')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              IntegerLiteral
                PsiElement(integer)('4')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(match)('match')
          PsiWhiteSpace(' ')
          PsiElement({)('{')
          PsiWhiteSpace('\n    ')
          CaseClauses
            CaseClause
              PsiElement(case)('case')
              PsiWhiteSpace(' ')
              ConstructorPattern
                CodeReferenceElement: List
                  PsiElement(identifier)('List')
                Pattern Argument List
                  PsiElement(()('(')
                  LiteralPattern
                    IntegerLiteral
                      PsiElement(integer)('1')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  LiteralPattern
                    IntegerLiteral
                      PsiElement(integer)('2')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  SequenceWildcardPattern: xs
                    PsiElement(identifier)('xs')
                    PsiElement(identifier)('*')
                  PsiElement())(')')
              PsiWhiteSpace(' ')
              PsiElement(=>)('=>')
              PsiWhiteSpace('\n      ')
              BlockOfExpressions
                ScPatternDefinition: ys
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(val)('val')
                  PsiWhiteSpace(' ')
                  ListOfPatterns
                    ReferencePattern: ys
                      PsiElement(identifier)('ys')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParametrizedType: Seq[Int]
                    SimpleType: Seq
                      CodeReferenceElement: Seq
                        PsiElement(identifier)('Seq')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: Int
                        CodeReferenceElement: Int
                          PsiElement(identifier)('Int')
                      PsiElement(])(']')
                  PsiWhiteSpace(' ')
                  PsiElement(=)('=')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: xs
                    PsiElement(identifier)('xs')
                PsiWhiteSpace('\n      ')
                MethodCall
                  ReferenceExpression: println
                    PsiElement(identifier)('println')
                  ArgumentList
                    PsiElement(()('(')
                    ReferenceExpression: ys
                      PsiElement(identifier)('ys')
                    PsiElement())(')')
          PsiWhiteSpace('\n  ')
          PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        ScPatternDefinition: x
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ConstructorPattern
              CodeReferenceElement: List
                PsiElement(identifier)('List')
              Pattern Argument List
                PsiElement(()('(')
                LiteralPattern
                  IntegerLiteral
                    PsiElement(integer)('1')
                PsiElement(,)(',')
                PsiWhiteSpace(' ')
                LiteralPattern
                  IntegerLiteral
                    PsiElement(integer)('2')
                PsiElement(,)(',')
                PsiWhiteSpace(' ')
                SequenceWildcardPattern: x
                  PsiElement(identifier)('x')
                  PsiElement(identifier)('*')
                PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: List
              PsiElement(identifier)('List')
            ArgumentList
              PsiElement(()('(')
              IntegerLiteral
                PsiElement(integer)('1')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              IntegerLiteral
                PsiElement(integer)('2')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              IntegerLiteral
                PsiElement(integer)('3')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              IntegerLiteral
                PsiElement(integer)('4')
              PsiElement())(')')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
