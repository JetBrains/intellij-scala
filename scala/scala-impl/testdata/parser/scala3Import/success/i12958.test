import scala.quoted.*

package mylib:
  object Export:
    transparent inline def exported: Any = 1

  object Import:
    transparent inline def imported: Any = 1

  export Export.*


import mylib.*
import Import.*
object Test:
  val oneFail : 1 = exported //error
  val oneWork : 1 = imported //works
-----
ScalaFile
  ScImportStatement
    PsiElement(import)('import')
    PsiWhiteSpace(' ')
    ImportExpression
      CodeReferenceElement: scala.quoted
        CodeReferenceElement: scala
          PsiElement(identifier)('scala')
        PsiElement(.)('.')
        PsiElement(identifier)('quoted')
      PsiElement(.)('.')
      PsiElement(*)('*')
  PsiWhiteSpace('\n\n')
  ScPackaging
    PsiElement(package)('package')
    PsiWhiteSpace(' ')
    CodeReferenceElement: mylib
      PsiElement(identifier)('mylib')
    PsiElement(:)(':')
    PsiWhiteSpace('\n  ')
    ScObject: Export
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      PsiElement(object)('object')
      PsiWhiteSpace(' ')
      PsiElement(identifier)('Export')
      ExtendsBlock
        ScTemplateBody
          PsiElement(:)(':')
          PsiWhiteSpace('\n    ')
          ScFunctionDefinition: exported
            AnnotationsList
              <empty list>
            Modifiers
              PsiElement(transparent)('transparent')
              PsiWhiteSpace(' ')
              PsiElement(inline)('inline')
            PsiWhiteSpace(' ')
            PsiElement(def)('def')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('exported')
            Parameters
              <empty list>
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            SimpleType: Any
              CodeReferenceElement: Any
                PsiElement(identifier)('Any')
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace(' ')
            IntegerLiteral
              PsiElement(integer)('1')
    PsiWhiteSpace('\n\n  ')
    ScObject: Import
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      PsiElement(object)('object')
      PsiWhiteSpace(' ')
      PsiElement(identifier)('Import')
      ExtendsBlock
        ScTemplateBody
          PsiElement(:)(':')
          PsiWhiteSpace('\n    ')
          ScFunctionDefinition: imported
            AnnotationsList
              <empty list>
            Modifiers
              PsiElement(transparent)('transparent')
              PsiWhiteSpace(' ')
              PsiElement(inline)('inline')
            PsiWhiteSpace(' ')
            PsiElement(def)('def')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('imported')
            Parameters
              <empty list>
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            SimpleType: Any
              CodeReferenceElement: Any
                PsiElement(identifier)('Any')
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace(' ')
            IntegerLiteral
              PsiElement(integer)('1')
    PsiWhiteSpace('\n\n  ')
    ScExportStatement
      PsiElement(export)('export')
      PsiWhiteSpace(' ')
      ImportExpression
        CodeReferenceElement: Export
          PsiElement(identifier)('Export')
        PsiElement(.)('.')
        PsiElement(*)('*')
  PsiWhiteSpace('\n\n\n')
  ScImportStatement
    PsiElement(import)('import')
    PsiWhiteSpace(' ')
    ImportExpression
      CodeReferenceElement: mylib
        PsiElement(identifier)('mylib')
      PsiElement(.)('.')
      PsiElement(*)('*')
  PsiWhiteSpace('\n')
  ScImportStatement
    PsiElement(import)('import')
    PsiWhiteSpace(' ')
    ImportExpression
      CodeReferenceElement: Import
        PsiElement(identifier)('Import')
      PsiElement(.)('.')
      PsiElement(*)('*')
  PsiWhiteSpace('\n')
  ScObject: Test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test')
    ExtendsBlock
      ScTemplateBody
        PsiElement(:)(':')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: oneFail
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: oneFail
              PsiElement(identifier)('oneFail')
          PsiWhiteSpace(' ')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          LiteralType: 1
            IntegerLiteral
              PsiElement(integer)('1')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: exported
            PsiElement(identifier)('exported')
        PsiWhiteSpace(' ')
        PsiComment(comment)('//error')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: oneWork
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: oneWork
              PsiElement(identifier)('oneWork')
          PsiWhiteSpace(' ')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          LiteralType: 1
            IntegerLiteral
              PsiElement(integer)('1')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: imported
            PsiElement(identifier)('imported')
  PsiWhiteSpace(' ')
  PsiComment(comment)('//works')
