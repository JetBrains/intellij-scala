import language.higherKinds

trait Foo[A <: AnyRef] {
  type Repr
  def f(a: A): Repr
  def g(a: A): Option[Repr]

  type M[X]
  def m(a: A): M[a.type]

  type Id[X] = X
  def n(a: A): Id[(Repr, M[a.type])]

}

object Foo {
  type Aux[A <: AnyRef, B] = Foo[A] { type Repr = B; type M[X] = Int }

}

object Main extends App {
  def mapWithFoo[A <: AnyRef, B](as: List[A])(implicit foo: Foo.Aux[A, B]) = {
    // Should be Eta expandable because the result type of `f` is not
    // dependant on the value, it is just `B`.
    as map foo.f
    as map foo.g
    as map foo.m
    as map foo.n
  }
}
-----
ScalaFile
  ScImportStatement
    PsiElement(import)('import')
    PsiWhiteSpace(' ')
    ImportExpression
      CodeReferenceElement: language.higherKinds
        CodeReferenceElement: language
          PsiElement(identifier)('language')
        PsiElement(.)('.')
        PsiElement(identifier)('higherKinds')
  PsiWhiteSpace('\n\n')
  ScTrait: Foo
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Foo')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: A
        PsiElement(identifier)('A')
        PsiWhiteSpace(' ')
        PsiElement(<:)('<:')
        PsiWhiteSpace(' ')
        SimpleType: AnyRef
          CodeReferenceElement: AnyRef
            PsiElement(identifier)('AnyRef')
      PsiElement(])(']')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScTypeAliasDeclaration: Repr
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Repr')
        PsiWhiteSpace('\n  ')
        ScFunctionDeclaration: f
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('f')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: a
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('a')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: A
                    CodeReferenceElement: A
                      PsiElement(identifier)('A')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Repr
            CodeReferenceElement: Repr
              PsiElement(identifier)('Repr')
        PsiWhiteSpace('\n  ')
        ScFunctionDeclaration: g
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('g')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: a
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('a')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: A
                    CodeReferenceElement: A
                      PsiElement(identifier)('A')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: Option[Repr]
            SimpleType: Option
              CodeReferenceElement: Option
                PsiElement(identifier)('Option')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: Repr
                CodeReferenceElement: Repr
                  PsiElement(identifier)('Repr')
              PsiElement(])(']')
        PsiWhiteSpace('\n\n  ')
        ScTypeAliasDeclaration: M
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('M')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: X
              PsiElement(identifier)('X')
            PsiElement(])(']')
        PsiWhiteSpace('\n  ')
        ScFunctionDeclaration: m
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('m')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: a
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('a')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: A
                    CodeReferenceElement: A
                      PsiElement(identifier)('A')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: M[a.type]
            SimpleType: M
              CodeReferenceElement: M
                PsiElement(identifier)('M')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: a.type
                CodeReferenceElement: a
                  PsiElement(identifier)('a')
                PsiElement(.)('.')
                PsiElement(type)('type')
              PsiElement(])(']')
        PsiWhiteSpace('\n\n  ')
        ScTypeAliasDefinition: Id
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Id')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: X
              PsiElement(identifier)('X')
            PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          SimpleType: X
            CodeReferenceElement: X
              PsiElement(identifier)('X')
        PsiWhiteSpace('\n  ')
        ScFunctionDeclaration: n
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('n')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: a
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('a')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: A
                    CodeReferenceElement: A
                      PsiElement(identifier)('A')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: Id[(Repr, M[a.type])]
            SimpleType: Id
              CodeReferenceElement: Id
                PsiElement(identifier)('Id')
            TypeArgumentsList
              PsiElement([)('[')
              TupleType: (Repr, M[a.type])
                PsiElement(()('(')
                TypesList
                  SimpleType: Repr
                    CodeReferenceElement: Repr
                      PsiElement(identifier)('Repr')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  ParametrizedType: M[a.type]
                    SimpleType: M
                      CodeReferenceElement: M
                        PsiElement(identifier)('M')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: a.type
                        CodeReferenceElement: a
                          PsiElement(identifier)('a')
                        PsiElement(.)('.')
                        PsiElement(type)('type')
                      PsiElement(])(']')
                PsiElement())(')')
              PsiElement(])(']')
        PsiWhiteSpace('\n\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScObject: Foo
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Foo')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScTypeAliasDefinition: Aux
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Aux')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: A
              PsiElement(identifier)('A')
              PsiWhiteSpace(' ')
              PsiElement(<:)('<:')
              PsiWhiteSpace(' ')
              SimpleType: AnyRef
                CodeReferenceElement: AnyRef
                  PsiElement(identifier)('AnyRef')
            PsiElement(,)(',')
            PsiWhiteSpace(' ')
            TypeParameter: B
              PsiElement(identifier)('B')
            PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          CompoundType: Foo[A] { type Repr = B; type M[X] = Int }
            ParametrizedType: Foo[A]
              SimpleType: Foo
                CodeReferenceElement: Foo
                  PsiElement(identifier)('Foo')
              TypeArgumentsList
                PsiElement([)('[')
                SimpleType: A
                  CodeReferenceElement: A
                    PsiElement(identifier)('A')
                PsiElement(])(']')
            PsiWhiteSpace(' ')
            Refinement
              PsiElement({)('{')
              PsiWhiteSpace(' ')
              ScTypeAliasDefinition: Repr
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(type)('type')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('Repr')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                SimpleType: B
                  CodeReferenceElement: B
                    PsiElement(identifier)('B')
              PsiElement(;)(';')
              PsiWhiteSpace(' ')
              ScTypeAliasDefinition: M
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(type)('type')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('M')
                TypeParameterClause
                  PsiElement([)('[')
                  TypeParameter: X
                    PsiElement(identifier)('X')
                  PsiElement(])(']')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                SimpleType: Int
                  CodeReferenceElement: Int
                    PsiElement(identifier)('Int')
              PsiWhiteSpace(' ')
              PsiElement(})('}')
        PsiWhiteSpace('\n\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScObject: Main
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Main')
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          SimpleType: App
            CodeReferenceElement: App
              PsiElement(identifier)('App')
      PsiWhiteSpace(' ')
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: mapWithFoo
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('mapWithFoo')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: A
              PsiElement(identifier)('A')
              PsiWhiteSpace(' ')
              PsiElement(<:)('<:')
              PsiWhiteSpace(' ')
              SimpleType: AnyRef
                CodeReferenceElement: AnyRef
                  PsiElement(identifier)('AnyRef')
            PsiElement(,)(',')
            PsiWhiteSpace(' ')
            TypeParameter: B
              PsiElement(identifier)('B')
            PsiElement(])(']')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: as
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('as')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  ParametrizedType: List[A]
                    SimpleType: List
                      CodeReferenceElement: List
                        PsiElement(identifier)('List')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: A
                        CodeReferenceElement: A
                          PsiElement(identifier)('A')
                      PsiElement(])(']')
              PsiElement())(')')
            ParametersClause
              PsiElement(()('(')
              PsiElement(implicit)('implicit')
              PsiWhiteSpace(' ')
              Parameter: foo
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('foo')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  ParametrizedType: Foo.Aux[A, B]
                    SimpleType: Foo.Aux
                      CodeReferenceElement: Foo.Aux
                        CodeReferenceElement: Foo
                          PsiElement(identifier)('Foo')
                        PsiElement(.)('.')
                        PsiElement(identifier)('Aux')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: A
                        CodeReferenceElement: A
                          PsiElement(identifier)('A')
                      PsiElement(,)(',')
                      PsiWhiteSpace(' ')
                      SimpleType: B
                        CodeReferenceElement: B
                          PsiElement(identifier)('B')
                      PsiElement(])(']')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          BlockExpression
            PsiElement({)('{')
            PsiWhiteSpace('\n    ')
            PsiComment(comment)('// Should be Eta expandable because the result type of `f` is not')
            PsiWhiteSpace('\n    ')
            PsiComment(comment)('// dependant on the value, it is just `B`.')
            PsiWhiteSpace('\n    ')
            InfixExpression
              ReferenceExpression: as
                PsiElement(identifier)('as')
              PsiWhiteSpace(' ')
              ReferenceExpression: map
                PsiElement(identifier)('map')
              PsiWhiteSpace(' ')
              ReferenceExpression: foo.f
                ReferenceExpression: foo
                  PsiElement(identifier)('foo')
                PsiElement(.)('.')
                PsiElement(identifier)('f')
            PsiWhiteSpace('\n    ')
            InfixExpression
              ReferenceExpression: as
                PsiElement(identifier)('as')
              PsiWhiteSpace(' ')
              ReferenceExpression: map
                PsiElement(identifier)('map')
              PsiWhiteSpace(' ')
              ReferenceExpression: foo.g
                ReferenceExpression: foo
                  PsiElement(identifier)('foo')
                PsiElement(.)('.')
                PsiElement(identifier)('g')
            PsiWhiteSpace('\n    ')
            InfixExpression
              ReferenceExpression: as
                PsiElement(identifier)('as')
              PsiWhiteSpace(' ')
              ReferenceExpression: map
                PsiElement(identifier)('map')
              PsiWhiteSpace(' ')
              ReferenceExpression: foo.m
                ReferenceExpression: foo
                  PsiElement(identifier)('foo')
                PsiElement(.)('.')
                PsiElement(identifier)('m')
            PsiWhiteSpace('\n    ')
            InfixExpression
              ReferenceExpression: as
                PsiElement(identifier)('as')
              PsiWhiteSpace(' ')
              ReferenceExpression: map
                PsiElement(identifier)('map')
              PsiWhiteSpace(' ')
              ReferenceExpression: foo.n
                ReferenceExpression: foo
                  PsiElement(identifier)('foo')
                PsiElement(.)('.')
                PsiElement(identifier)('n')
            PsiWhiteSpace('\n  ')
            PsiElement(})('}')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
