case class LazyList[T](headThunk: () => T, tailThunk: () => LazyList[T]){
  lazy val head = headThunk()
  lazy val tail = tailThunk()
}

object ~: {
  def unapply[T](x: LazyList[T]) = Some((x.head, x.tail))
}

object MinimizedMatchFail {
  val ll = LazyList(() => 1, () => LazyList(() => 2, () => ???))

  ll match {
    case lb ~: rest => println("success")
  }
}
-----
ScalaFile
  ScClass: LazyList
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(case)('case')
    PsiWhiteSpace(' ')
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('LazyList')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: T
        PsiElement(identifier)('T')
      PsiElement(])(']')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        ParametersClause
          PsiElement(()('(')
          ClassParameter: headThunk
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(identifier)('headThunk')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            ParameterType
              FunctionalType: () => T
                TypeInParenthesis: ()
                  PsiElement(()('(')
                  PsiElement())(')')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                SimpleType: T
                  CodeReferenceElement: T
                    PsiElement(identifier)('T')
          PsiElement(,)(',')
          PsiWhiteSpace(' ')
          ClassParameter: tailThunk
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(identifier)('tailThunk')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            ParameterType
              FunctionalType: () => LazyList[T]
                TypeInParenthesis: ()
                  PsiElement(()('(')
                  PsiElement())(')')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                ParametrizedType: LazyList[T]
                  SimpleType: LazyList
                    CodeReferenceElement: LazyList
                      PsiElement(identifier)('LazyList')
                  TypeArgumentsList
                    PsiElement([)('[')
                    SimpleType: T
                      CodeReferenceElement: T
                        PsiElement(identifier)('T')
                    PsiElement(])(']')
          PsiElement())(')')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: head
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(lazy)('lazy')
          PsiWhiteSpace(' ')
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: head
              PsiElement(identifier)('head')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: headThunk
              PsiElement(identifier)('headThunk')
            ArgumentList
              PsiElement(()('(')
              PsiElement())(')')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: tail
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(lazy)('lazy')
          PsiWhiteSpace(' ')
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: tail
              PsiElement(identifier)('tail')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: tailThunk
              PsiElement(identifier)('tailThunk')
            ArgumentList
              PsiElement(()('(')
              PsiElement())(')')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScObject: ~:
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('~:')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: unapply
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('unapply')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: T
              PsiElement(identifier)('T')
            PsiElement(])(']')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: x
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  ParametrizedType: LazyList[T]
                    SimpleType: LazyList
                      CodeReferenceElement: LazyList
                        PsiElement(identifier)('LazyList')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: T
                        CodeReferenceElement: T
                          PsiElement(identifier)('T')
                      PsiElement(])(']')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: Some
              PsiElement(identifier)('Some')
            ArgumentList
              PsiElement(()('(')
              Tuple
                PsiElement(()('(')
                ReferenceExpression: x.head
                  ReferenceExpression: x
                    PsiElement(identifier)('x')
                  PsiElement(.)('.')
                  PsiElement(identifier)('head')
                PsiElement(,)(',')
                PsiWhiteSpace(' ')
                ReferenceExpression: x.tail
                  ReferenceExpression: x
                    PsiElement(identifier)('x')
                  PsiElement(.)('.')
                  PsiElement(identifier)('tail')
                PsiElement())(')')
              PsiElement())(')')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScObject: MinimizedMatchFail
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('MinimizedMatchFail')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: ll
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: ll
              PsiElement(identifier)('ll')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: LazyList
              PsiElement(identifier)('LazyList')
            ArgumentList
              PsiElement(()('(')
              FunctionExpression
                Parameters
                  ParametersClause
                    PsiElement(()('(')
                    PsiElement())(')')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                IntegerLiteral
                  PsiElement(integer)('1')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              FunctionExpression
                Parameters
                  ParametersClause
                    PsiElement(()('(')
                    PsiElement())(')')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                MethodCall
                  ReferenceExpression: LazyList
                    PsiElement(identifier)('LazyList')
                  ArgumentList
                    PsiElement(()('(')
                    FunctionExpression
                      Parameters
                        ParametersClause
                          PsiElement(()('(')
                          PsiElement())(')')
                      PsiWhiteSpace(' ')
                      PsiElement(=>)('=>')
                      PsiWhiteSpace(' ')
                      IntegerLiteral
                        PsiElement(integer)('2')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    FunctionExpression
                      Parameters
                        ParametersClause
                          PsiElement(()('(')
                          PsiElement())(')')
                      PsiWhiteSpace(' ')
                      PsiElement(=>)('=>')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: ???
                        PsiElement(identifier)('???')
                    PsiElement())(')')
              PsiElement())(')')
        PsiWhiteSpace('\n\n  ')
        MatchStatement
          ReferenceExpression: ll
            PsiElement(identifier)('ll')
          PsiWhiteSpace(' ')
          PsiElement(match)('match')
          PsiWhiteSpace(' ')
          PsiElement({)('{')
          PsiWhiteSpace('\n    ')
          CaseClauses
            CaseClause
              PsiElement(case)('case')
              PsiWhiteSpace(' ')
              InfixPattern
                ReferencePattern: lb
                  PsiElement(identifier)('lb')
                PsiWhiteSpace(' ')
                CodeReferenceElement: ~:
                  PsiElement(identifier)('~:')
                PsiWhiteSpace(' ')
                ReferencePattern: rest
                  PsiElement(identifier)('rest')
              PsiWhiteSpace(' ')
              PsiElement(=>)('=>')
              PsiWhiteSpace(' ')
              BlockOfExpressions
                MethodCall
                  ReferenceExpression: println
                    PsiElement(identifier)('println')
                  ArgumentList
                    PsiElement(()('(')
                    StringLiteral
                      PsiElement(string content)('"success"')
                    PsiElement())(')')
          PsiWhiteSpace('\n  ')
          PsiElement(})('}')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
