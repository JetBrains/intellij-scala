/*
 * Scala (https://www.scala-lang.org)
 *
 * Copyright EPFL and Lightbend, Inc.
 *
 * Licensed under Apache License 2.0
 * (http://www.apache.org/licenses/LICENSE-2.0).
 *
 * See the NOTICE file distributed with this work for
 * additional information regarding copyright ownership.
 */

package scala

import java.lang.StringBuilder as JLSBuilder
import scala.annotation.tailrec

/** This class provides the basic mechanism to do String Interpolation.
 * String Interpolation allows users
 * to embed variable references directly in *processed* string literals.
 * Here's an example:
 * {{{
 *   val name = "James"
 *   println(s"Hello, \$name")  // Hello, James
 * }}}
 *
 * Any processed string literal is rewritten as an instantiation and
 * method call against this class.   For example:
 * {{{
 *   s"Hello, \$name"
 * }}}
 *
 * is rewritten to be:
 *
 * {{{
 *   StringContext("Hello, ", "").s(name)
 * }}}
 *
 * By default, this class provides the `raw`, `s` and `f` methods as
 * available interpolators.
 *
 * To provide your own string interpolator, create an implicit class
 * which adds a method to `StringContext`.  Here's an example:
 * {{{
 *    implicit class JsonHelper(private val sc: StringContext) extends AnyVal {
 *      def json(args: Any*): JSONObject = ...
 *    }
 *    val x: JSONObject = json"{ a: \$a }"
 * }}}
 *
 *  Here the `JsonHelper` extension class implicitly adds the `json` method to
 *  `StringContext` which can be used for `json` string literals.
 *
 *  @param   parts  The parts that make up the interpolated string,
 *                  without the expressions that get inserted by interpolation.
 */
case class StringContext(parts: String*) {

  import StringContext.{checkLengths as scCheckLengths, glob, standardInterpolator as scStandardInterpolator}

  @deprecated("use same-named method on StringContext companion object", "2.13.0")
  def checkLengths(args: scala.collection.Seq[Any]): Unit = scCheckLengths(args, parts)

  /** The simple string interpolator.
   *
   *  It inserts its arguments between corresponding parts of the string context.
   *  It also treats standard escape sequences as defined in the Scala specification.
   *  Here's an example of usage:
   *  {{{
   *    val name = "James"
   *    println(s"Hello, \$name")  // Hello, James
   *  }}}
   *  In this example, the expression \$name is replaced with the `toString` of the
   *  variable `name`.
   *  The `s` interpolator can take the `toString` of any arbitrary expression within
   *  a `\${}` block, for example:
   *  {{{
   *    println(s"1 + 1 = \${1 + 1}")
   *  }}}
   *  will print the string `1 + 1 = 2`.
   *
   *  @param `args` The arguments to be inserted into the resulting string.
   *  @throws IllegalArgumentException
   *          if the number of `parts` in the enclosing `StringContext` does not exceed
   *          the number of arguments `arg` by exactly 1.
   *  @throws StringContext.InvalidEscapeException
   *          if a `parts` string contains a backslash (`\`) character
   *          that does not start a valid escape sequence.
   *  @note   The Scala compiler may replace a call to this method with an equivalent, but more efficient,
   *          use of a StringBuilder.
   */
  def s(args: Any*): String = ??? // fasttracked to scala.tools.reflect.FastStringInterpolator::interpolateS
  object s {
    /** The simple string matcher.
     *
     *  Attempts to match the input string to the given interpolated patterns via
     *  a naive globbing, that is the reverse of the simple interpolator.
     *
     *  Here is an example usage:
     *
     *  {{{
     *    val s"Hello, \$name" = "Hello, James"
     *    println(name)  // "James"
     *  }}}
     *
     *  In this example, the string "James" ends up matching the location where the pattern
     *  `\$name` is positioned, and thus ends up bound to that variable.
     *
     *  Multiple matches are supported:
     *
     *  {{{
     *    val s"\$greeting, \$name" = "Hello, James"
     *    println(greeting)  // "Hello"
     *    println(name)  // "James"
     *  }}}
     *
     *  And the `s` matcher can match an arbitrary pattern within the `\${}` block, for example:
     *
     *  {{{
     *    val TimeSplitter = "([0-9]+)[.:]([0-9]+)".r
     *    val s"The time is \${TimeSplitter(hours, mins)}" = "The time is 10.50"
     *    println(hours) // 10
     *    println(mins) // 50
     *  }}}
     *
     *  Here, we use the `TimeSplitter` regex within the `s` matcher, further splitting the
     *  matched string "10.50" into its constituent parts
     */
    def unapplySeq(s: String): Option[Seq[String]] = glob(parts, s)
  }
  /** The raw string interpolator.
   *
   *  It inserts its arguments between corresponding parts of the string context.
   *  As opposed to the simple string interpolator `s`, this one does not treat
   *  standard escape sequences as defined in the Scala specification.
   *
   *  For example, the raw processed string `raw"a\nb"` is equal to the scala string `"a\\nb"`.
   *
   *  ''Note:'' Even when using the raw interpolator, Scala will process Unicode escapes.
   *  Unicode processing in the raw interpolator is deprecated as of scala 2.13.2 and
   *  will be removed in the future
   *  For example:
   *  {{{
   *    scala> raw"\u005cu0023"
   *    res0: String = #
   *  }}}
   *
   *  @param `args` The arguments to be inserted into the resulting string.
   *  @throws IllegalArgumentException
   *          if the number of `parts` in the enclosing `StringContext` does not exceed
   *          the number of arguments `arg` by exactly 1.
   *  @note   The Scala compiler may replace a call to this method with an equivalent, but more efficient,
   *          use of a StringBuilder.
   */
  def raw(args: Any*): String = ??? // fasttracked to scala.tools.reflect.FastStringInterpolator::interpolateRaw

  @deprecated("Use the static method StringContext.standardInterpolator instead of the instance method", "2.13.0")
  def standardInterpolator(process: String => String, args: Seq[Any]): String = scStandardInterpolator(process, args, parts)

  /** The formatted string interpolator.
   *
   *  It inserts its arguments between corresponding parts of the string context.
   *  It also treats standard escape sequences as defined in the Scala specification.
   *  Finally, if an interpolated expression is followed by a `parts` string
   *  that starts with a formatting specifier, the expression is formatted according to that
   *  specifier. All specifiers allowed in Java format strings are handled, and in the same
   *  way they are treated in Java.
   *
   *  For example:
   *  {{{
   *    val height = 1.9d
   *    val name = "James"
   *    println(f"\$name%s is \$height%2.2f meters tall")  // James is 1.90 meters tall
   *  }}}
   *
   *  @param `args` The arguments to be inserted into the resulting string.
   *  @throws IllegalArgumentException
   *          if the number of `parts` in the enclosing `StringContext` does not exceed
   *          the number of arguments `arg` by exactly 1.
   *  @throws StringContext.InvalidEscapeException
   *          if a `parts` string contains a backslash (`\`) character
   *          that does not start a valid escape sequence.
   *
   *  Note: The `f` method works by assembling a format string from all the `parts` strings and using
   *  `java.lang.String.format` to format all arguments with that format string. The format string is
   *  obtained by concatenating all `parts` strings, and performing two transformations:
   *
   *   1. Let a _formatting position_ be a start of any `parts` string except the first one.
   *      If a formatting position does not refer to a `%` character (which is assumed to
   *      start a format specifier), then the string format specifier `%s` is inserted.
   *
   *   2. Any `%` characters not in formatting positions must begin one of the conversions
   *      `%%` (the literal percent) or `%n` (the platform-specific line separator).
   */
  def f[A >: Any](args: A*): String = ??? // fasttracked to scala.tools.reflect.FormatInterpolator::interpolateF
}

object StringContext {
  /**
    * Linear time glob-matching implementation.
    * Adapted from https://research.swtch.com/glob
    *
    * @param patternChunks The non-wildcard portions of the input pattern,
    *                      separated by wildcards
    * @param input The input you wish to match against
    * @return None if there is no match, Some containing the sequence of matched
    *         wildcard strings if there is a match
    */
  def glob(patternChunks: Seq[String], input: String): Option[Seq[String]] = {
    var patternIndex = 0
    var inputIndex = 0
    var nextPatternIndex = 0
    var nextInputIndex = 0

    val numWildcards = patternChunks.length - 1
    val matchStarts = Array.fill(numWildcards)(-1)
    val matchEnds = Array.fill(numWildcards)(-1)

    val nameLength = input.length
    // The final pattern is as long as all the chunks, separated by 1-character
    // glob-wildcard placeholders
    val patternLength = {
      var n = numWildcards
      for(chunk <- patternChunks) {
        n += chunk.length
      }
      n
    }

    // Convert the input pattern chunks into a single sequence of shorts; each
    // non-negative short represents a character, while -1 represents a glob wildcard
    val pattern = {
      val arr = new Array[Short](patternLength)
      var i = 0
      var first = true
      for(chunk <- patternChunks) {
        if (first) first = false
        else {
          arr(i) = -1
          i += 1
        }
        for(c <- chunk) {
          arr(i) = c.toShort
          i += 1
        }
      }
      arr
    }

    // Lookup table for each character in the pattern to check whether or not
    // it refers to a glob wildcard; a non-negative integer indicates which
    // glob wildcard it represents, while -1 means it doesn't represent any
    val matchIndices = {
      val arr = Array.fill(patternLength + 1)(-1)
      var i = 0
      var j = 0
      for(chunk <- patternChunks) {
        if (j < numWildcards) {
          i += chunk.length
          arr(i) = j
          i += 1
          j += 1
        }
      }
      arr
    }

    while(patternIndex < patternLength || inputIndex < nameLength) {
      matchIndices(patternIndex) match {
        case -1 => // do nothing
        case n =>
          matchStarts(n) = matchStarts(n) match {
            case -1 => inputIndex
            case s => math.min(s, inputIndex)
          }
          matchEnds(n) = matchEnds(n) match {
            case -1 => inputIndex
            case s => math.max(s, inputIndex)
          }
      }

      val continue = if (patternIndex < patternLength) {
        val c = pattern(patternIndex)
        c match {
          case -1 =>  // zero-or-more-character wildcard
            // Try to match at nx. If that doesn't work out, restart at nx+1 next.
            nextPatternIndex = patternIndex
            nextInputIndex = inputIndex + 1
            patternIndex += 1
            true
          case _ => // ordinary character
            if (inputIndex < nameLength && input(inputIndex) == c) {
              patternIndex += 1
              inputIndex += 1
              true
            } else {
              false
            }
        }
      } else false

      // Mismatch. Maybe restart.
      if (!continue) {
        if (0 < nextInputIndex && nextInputIndex <= nameLength) {
          patternIndex = nextPatternIndex
          inputIndex = nextInputIndex
        } else {
          return None
        }
      }
    }

    // Matched all of pattern to all of name. Success.
    Some(collection.immutable.ArraySeq.unsafeWrapArray(
      Array.tabulate(patternChunks.length - 1)(n => input.slice(matchStarts(n), matchEnds(n)))
    ))
  }

  /** An exception that is thrown if a string contains a backslash (`\`) character
   *  that does not start a valid escape sequence.
   *  @param  str   The offending string
   *  @param  index   The index of the offending backslash character in `str`.
   */
  class InvalidEscapeException(str: String, val index: Int) extends IllegalArgumentException(
    s"""invalid escape ${
      require(index >= 0 && index < str.length)
      val ok = s"""[\\b, \\t, \\n, \\f, \\r, \\\\, \\", \\', \\uxxxx]"""
      if (index == str.length - 1) "at terminal" else s"'\\${str(index + 1)}' not one of $ok at"
    } index $index in "$str". Use \\\\ for literal \\."""
  )

  protected[scala] class InvalidUnicodeEscapeException(str: String, val escapeStart: Int, val index: Int) extends IllegalArgumentException(
    s"""invalid unicode escape at index $index of $str"""
  )

  private[this] def readUEscape(src: String, startindex: Int): (Char, Int) = {
    val len = src.length()
    def loop(uindex: Int): (Char, Int) = {
      def loopCP(dindex: Int, codepoint: Int): (Char, Int) = {
        //supports BMP + surrogate escapes
        //but only in four hex-digit code units (uxxxx)
        if(dindex >= 4) {
          val usRead = uindex - startindex
          val digitsRead = dindex
          (codepoint.asInstanceOf[Char], usRead + digitsRead)
        }
        else if (dindex + uindex >= len)
          throw new InvalidUnicodeEscapeException(src, startindex, uindex + dindex)
        else {
          val ch = src(dindex + uindex)
          val e = ch.asDigit
          if(e >= 0 && e <= 15) loopCP(dindex + 1, (codepoint << 4) + e)
          else throw new InvalidUnicodeEscapeException(src, startindex, uindex + dindex)
        }
      }
      if(uindex >= len) throw new InvalidUnicodeEscapeException(src, startindex, uindex - 1)
      //allow one or more `u` characters between the
      //backslash and the code unit
      else if(src(uindex) == 'u') loop(uindex + 1)
      else loopCP(0, 0)
    }
    loop(startindex)
  }

  /** Expands standard Scala escape sequences in a string.
   *  Escape sequences are:
   *   control: `\b`, `\t`, `\n`, `\f`, `\r`
   *   escape:  `\\`, `\"`, `\'`
   *
   *  @param  str  A string that may contain escape sequences
   *  @return The string with all escape sequences expanded.
   */
  @deprecated("use processEscapes", "2.13.0")
  def treatEscapes(str: String): String = processEscapes(str)

  /** Expands standard Scala escape sequences in a string.
   *  Escape sequences are:
   *   control: `\b`, `\t`, `\n`, `\f`, `\r`
   *   escape:  `\\`, `\"`, `\'`
   *
   *  @param  str  A string that may contain escape sequences
   *  @return The string with all escape sequences expanded.
   */
  def processEscapes(str: String): String =
    str indexOf '\\' match {
      case -1 => str
      case  i => replace(str, i)
    }

  protected[scala] def processUnicode(str: String): String =
    str indexOf "\\" match {
      case i if i == -1 || i >= (str.length() - 5) => str
      case i => replaceU(str, i)
    }

  //replace escapes with given first escape
  private[this] def replace(str: String, first: Int): String = {
    val len = str.length()
    val b = new JLSBuilder
    // append replacement starting at index `i`, with `next` backslash
    @tailrec def loop(i: Int, next: Int): String = {
      if (next >= 0) {
        //require(str(next) == '\\')
        if (next > i) b.append(str, i, next)
          var idx = next + 1
          if (idx >= len) throw new InvalidEscapeException(str, next)
          val c = str(idx) match {
            case 'u'  => 'u'
            case 'b'  => '\b'
            case 't'  => '\t'
            case 'n'  => '\n'
            case 'f'  => '\f'
            case 'r'  => '\r'
            case '"'  => '"'
            case '\'' => '\''
            case '\\' => '\\'
            case _    => throw new InvalidEscapeException(str, next)
          }
          val (ch, advance) = if (c == 'u') readUEscape(str, idx)
                              else (c, 1)
          idx += advance
          b append ch
          loop(idx, str.indexOf('\\', idx))
        } else {
          if (i < len) b.append(str, i, len)
          b.toString
        }
      }
      loop(0, first)
    }

  //replace escapes with given first escape
  private[this] def replaceU(str: String, first: Int): String = {
    val len = str.length()
    val b = new JLSBuilder
    // append replacement starting at index `i`, with `next` backslash
    @tailrec def loop(i: Int, next: Int): String = {
      if (next >= 0) {
        //require(str(next) == '\\')
        if (next > i) b.append(str, i, next)
        var idx = next + 1
        if (idx >= len) {
          if (idx == len) b.append('\\')
          b.toString()
        }
        else {
          val (ch, advance) = str(idx) match {
            case 'u'  => readUEscape(str, idx)
            case chr  => {
              b.append('\\')
              (chr, 1)
            }
          }
          idx += advance
          b.append(ch)
          loop(idx, str.indexOf('\\', idx))
        }
      } else {
        if (i < len) b.append(str, i, len)
        b.toString()
      }
    }
    loop(0, first)
  }

  def standardInterpolator(process: String => String, args: scala.collection.Seq[Any], parts: Seq[String]): String = {
    StringContext.checkLengths(args, parts)
    val pi = parts.iterator
    val ai = args.iterator
    val bldr = new JLSBuilder(process(pi.next()))
    while (ai.hasNext) {
      bldr append ai.next()
      bldr append process(pi.next())
    }
    bldr.toString
  }

  /** Checks that the length of the given argument `args` is one less than the number
   *  of `parts` supplied to the `StringContext`.
   *
   *  @throws IllegalArgumentException  if this is not the case.
   */
  def checkLengths(args: scala.collection.Seq[Any], parts: Seq[String]): Unit =
    if (parts.length != args.length + 1)
      throw new IllegalArgumentException("wrong number of arguments ("+ args.length
        +") for interpolated string with "+ parts.length +" parts")

}
-----
ScalaFile
  PsiComment(BlockComment)('/*\n * Scala (https://www.scala-lang.org)\n *\n * Copyright EPFL and Lightbend, Inc.\n *\n * Licensed under Apache License 2.0\n * (http://www.apache.org/licenses/LICENSE-2.0).\n *\n * See the NOTICE file distributed with this work for\n * additional information regarding copyright ownership.\n */')
  PsiWhiteSpace('\n\n')
  ScPackaging
    PsiElement(package)('package')
    PsiWhiteSpace(' ')
    CodeReferenceElement: scala
      PsiElement(identifier)('scala')
    PsiWhiteSpace('\n\n')
    ScImportStatement
      PsiElement(import)('import')
      PsiWhiteSpace(' ')
      ImportExpression
        CodeReferenceElement: java.lang
          CodeReferenceElement: java
            PsiElement(identifier)('java')
          PsiElement(.)('.')
          PsiElement(identifier)('lang')
        PsiElement(.)('.')
        ImportSelectors
          ImportSelector
            CodeReferenceElement: StringBuilder
              PsiElement(identifier)('StringBuilder')
            PsiWhiteSpace(' ')
            PsiElement(as)('as')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('JLSBuilder')
    PsiWhiteSpace('\n')
    ScImportStatement
      PsiElement(import)('import')
      PsiWhiteSpace(' ')
      ImportExpression
        CodeReferenceElement: scala.annotation.tailrec
          CodeReferenceElement: scala.annotation
            CodeReferenceElement: scala
              PsiElement(identifier)('scala')
            PsiElement(.)('.')
            PsiElement(identifier)('annotation')
          PsiElement(.)('.')
          PsiElement(identifier)('tailrec')
    PsiWhiteSpace('\n\n')
    ScClass: StringContext
      DocComment
        ScPsiDocToken(DOC_COMMENT_START)('/**')
        ScDocParagraph
          ScPsiDocToken(DOC_WHITESPACE)(' ')
          ScPsiDocToken(DOC_COMMENT_DATA)('This class provides the basic mechanism to do String Interpolation.')
          ScPsiDocToken(DOC_WHITESPACE)('\n ')
          ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
          ScPsiDocToken(DOC_WHITESPACE)(' ')
          ScPsiDocToken(DOC_COMMENT_DATA)('String Interpolation allows users')
          ScPsiDocToken(DOC_WHITESPACE)('\n ')
          ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
          ScPsiDocToken(DOC_WHITESPACE)(' ')
          ScPsiDocToken(DOC_COMMENT_DATA)('to embed variable references directly in *processed* string literals.')
          ScPsiDocToken(DOC_WHITESPACE)('\n ')
          ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
          ScPsiDocToken(DOC_WHITESPACE)(' ')
          ScPsiDocToken(DOC_COMMENT_DATA)('Here's an example:')
          ScPsiDocToken(DOC_WHITESPACE)('\n ')
          ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
          ScPsiDocToken(DOC_WHITESPACE)(' ')
          InnerCodeElement
            ScPsiDocToken(DOC_INNER_CODE_TAG)('{{{')
            ScPsiDocToken(DOC_WHITESPACE)('\n ')
            ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
            ScPsiDocToken(DOC_INNER_CODE)('   val name = "James"')
            ScPsiDocToken(DOC_WHITESPACE)('\n ')
            ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
            ScPsiDocToken(DOC_INNER_CODE)('   println(s"Hello, \$name")  // Hello, James')
            ScPsiDocToken(DOC_WHITESPACE)('\n ')
            ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
            ScPsiDocToken(DOC_INNER_CODE)(' ')
            ScPsiDocToken(DOC_INNER_CLOSE_CODE_TAG)('}}}')
          ScPsiDocToken(DOC_WHITESPACE)('\n ')
          ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
          ScPsiDocToken(DOC_WHITESPACE)('\n ')
          ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
        ScDocParagraph
          ScPsiDocToken(DOC_WHITESPACE)(' ')
          ScPsiDocToken(DOC_COMMENT_DATA)('Any processed string literal is rewritten as an instantiation and')
          ScPsiDocToken(DOC_WHITESPACE)('\n ')
          ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
          ScPsiDocToken(DOC_WHITESPACE)(' ')
          ScPsiDocToken(DOC_COMMENT_DATA)('method call against this class.   For example:')
          ScPsiDocToken(DOC_WHITESPACE)('\n ')
          ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
          ScPsiDocToken(DOC_WHITESPACE)(' ')
          InnerCodeElement
            ScPsiDocToken(DOC_INNER_CODE_TAG)('{{{')
            ScPsiDocToken(DOC_WHITESPACE)('\n ')
            ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
            ScPsiDocToken(DOC_INNER_CODE)('   s"Hello, \$name"')
            ScPsiDocToken(DOC_WHITESPACE)('\n ')
            ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
            ScPsiDocToken(DOC_INNER_CODE)(' ')
            ScPsiDocToken(DOC_INNER_CLOSE_CODE_TAG)('}}}')
          ScPsiDocToken(DOC_WHITESPACE)('\n ')
          ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
          ScPsiDocToken(DOC_WHITESPACE)('\n ')
          ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
        ScDocParagraph
          ScPsiDocToken(DOC_WHITESPACE)(' ')
          ScPsiDocToken(DOC_COMMENT_DATA)('is rewritten to be:')
          ScPsiDocToken(DOC_WHITESPACE)('\n ')
          ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
          ScPsiDocToken(DOC_WHITESPACE)('\n ')
          ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
        ScDocParagraph
          ScPsiDocToken(DOC_WHITESPACE)(' ')
          InnerCodeElement
            ScPsiDocToken(DOC_INNER_CODE_TAG)('{{{')
            ScPsiDocToken(DOC_WHITESPACE)('\n ')
            ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
            ScPsiDocToken(DOC_INNER_CODE)('   StringContext("Hello, ", "").s(name)')
            ScPsiDocToken(DOC_WHITESPACE)('\n ')
            ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
            ScPsiDocToken(DOC_INNER_CODE)(' ')
            ScPsiDocToken(DOC_INNER_CLOSE_CODE_TAG)('}}}')
          ScPsiDocToken(DOC_WHITESPACE)('\n ')
          ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
          ScPsiDocToken(DOC_WHITESPACE)('\n ')
          ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
        ScDocParagraph
          ScPsiDocToken(DOC_WHITESPACE)(' ')
          ScPsiDocToken(DOC_COMMENT_DATA)('By default, this class provides the ')
          DocSyntaxElement 8
            ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
            ScPsiDocToken(DOC_COMMENT_DATA)('raw')
            ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
          ScPsiDocToken(DOC_COMMENT_DATA)(', ')
          DocSyntaxElement 8
            ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
            ScPsiDocToken(DOC_COMMENT_DATA)('s')
            ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
          ScPsiDocToken(DOC_COMMENT_DATA)(' and ')
          DocSyntaxElement 8
            ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
            ScPsiDocToken(DOC_COMMENT_DATA)('f')
            ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
          ScPsiDocToken(DOC_COMMENT_DATA)(' methods as')
          ScPsiDocToken(DOC_WHITESPACE)('\n ')
          ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
          ScPsiDocToken(DOC_WHITESPACE)(' ')
          ScPsiDocToken(DOC_COMMENT_DATA)('available interpolators.')
          ScPsiDocToken(DOC_WHITESPACE)('\n ')
          ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
          ScPsiDocToken(DOC_WHITESPACE)('\n ')
          ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
        ScDocParagraph
          ScPsiDocToken(DOC_WHITESPACE)(' ')
          ScPsiDocToken(DOC_COMMENT_DATA)('To provide your own string interpolator, create an implicit class')
          ScPsiDocToken(DOC_WHITESPACE)('\n ')
          ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
          ScPsiDocToken(DOC_WHITESPACE)(' ')
          ScPsiDocToken(DOC_COMMENT_DATA)('which adds a method to ')
          DocSyntaxElement 8
            ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
            ScPsiDocToken(DOC_COMMENT_DATA)('StringContext')
            ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
          ScPsiDocToken(DOC_COMMENT_DATA)('.  Here's an example:')
          ScPsiDocToken(DOC_WHITESPACE)('\n ')
          ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
          ScPsiDocToken(DOC_WHITESPACE)(' ')
          InnerCodeElement
            ScPsiDocToken(DOC_INNER_CODE_TAG)('{{{')
            ScPsiDocToken(DOC_WHITESPACE)('\n ')
            ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
            ScPsiDocToken(DOC_INNER_CODE)('    implicit class JsonHelper(private val sc: StringContext) extends AnyVal {')
            ScPsiDocToken(DOC_WHITESPACE)('\n ')
            ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
            ScPsiDocToken(DOC_INNER_CODE)('      def json(args: Any*): JSONObject = ...')
            ScPsiDocToken(DOC_WHITESPACE)('\n ')
            ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
            ScPsiDocToken(DOC_INNER_CODE)('    }')
            ScPsiDocToken(DOC_WHITESPACE)('\n ')
            ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
            ScPsiDocToken(DOC_INNER_CODE)('    val x: JSONObject = json"{ a: \$a }"')
            ScPsiDocToken(DOC_WHITESPACE)('\n ')
            ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
            ScPsiDocToken(DOC_INNER_CODE)(' ')
            ScPsiDocToken(DOC_INNER_CLOSE_CODE_TAG)('}}}')
          ScPsiDocToken(DOC_WHITESPACE)('\n ')
          ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
          ScPsiDocToken(DOC_WHITESPACE)('\n ')
          ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
        ScDocParagraph
          ScPsiDocToken(DOC_WHITESPACE)('  ')
          ScPsiDocToken(DOC_COMMENT_DATA)('Here the ')
          DocSyntaxElement 8
            ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
            ScPsiDocToken(DOC_COMMENT_DATA)('JsonHelper')
            ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
          ScPsiDocToken(DOC_COMMENT_DATA)(' extension class implicitly adds the ')
          DocSyntaxElement 8
            ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
            ScPsiDocToken(DOC_COMMENT_DATA)('json')
            ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
          ScPsiDocToken(DOC_COMMENT_DATA)(' method to')
          ScPsiDocToken(DOC_WHITESPACE)('\n ')
          ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
          ScPsiDocToken(DOC_WHITESPACE)('  ')
          DocSyntaxElement 8
            ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
            ScPsiDocToken(DOC_COMMENT_DATA)('StringContext')
            ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
          ScPsiDocToken(DOC_COMMENT_DATA)(' which can be used for ')
          DocSyntaxElement 8
            ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
            ScPsiDocToken(DOC_COMMENT_DATA)('json')
            ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
          ScPsiDocToken(DOC_COMMENT_DATA)(' string literals.')
          ScPsiDocToken(DOC_WHITESPACE)('\n ')
          ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
          ScPsiDocToken(DOC_WHITESPACE)('\n ')
          ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
        DocTag
          ScPsiDocToken(DOC_WHITESPACE)('  ')
          ScPsiDocToken(DOC_TAG_NAME)('@param')
          ScPsiDocToken(DOC_WHITESPACE)('   ')
          ScalaDocTagValue: parts
            ScPsiDocToken(DOC_TAG_VALUE_TOKEN)('parts')
          ScDocParagraph
            ScPsiDocToken(DOC_WHITESPACE)('  ')
            ScPsiDocToken(DOC_COMMENT_DATA)('The parts that make up the interpolated string,')
            ScPsiDocToken(DOC_WHITESPACE)('\n ')
            ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
            ScPsiDocToken(DOC_WHITESPACE)('                  ')
            ScPsiDocToken(DOC_COMMENT_DATA)('without the expressions that get inserted by interpolation.')
            ScPsiDocToken(DOC_WHITESPACE)('\n ')
        ScPsiDocToken(DOC_COMMENT_END)('*/')
      PsiWhiteSpace('\n')
      AnnotationsList
        <empty list>
      Modifiers
        PsiElement(case)('case')
      PsiWhiteSpace(' ')
      PsiElement(class)('class')
      PsiWhiteSpace(' ')
      PsiElement(identifier)('StringContext')
      PrimaryConstructor
        AnnotationsList
          <empty list>
        Modifiers
          <empty list>
        Parameters
          ParametersClause
            PsiElement(()('(')
            ClassParameter: parts
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(identifier)('parts')
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              ParameterType
                SimpleType: String
                  CodeReferenceElement: String
                    PsiElement(identifier)('String')
                PsiElement(identifier)('*')
            PsiElement())(')')
      PsiWhiteSpace(' ')
      ExtendsBlock
        ScTemplateBody
          PsiElement({)('{')
          PsiWhiteSpace('\n\n  ')
          ScImportStatement
            PsiElement(import)('import')
            PsiWhiteSpace(' ')
            ImportExpression
              CodeReferenceElement: StringContext
                PsiElement(identifier)('StringContext')
              PsiElement(.)('.')
              ImportSelectors
                PsiElement({)('{')
                ImportSelector
                  CodeReferenceElement: checkLengths
                    PsiElement(identifier)('checkLengths')
                  PsiWhiteSpace(' ')
                  PsiElement(as)('as')
                  PsiWhiteSpace(' ')
                  PsiElement(identifier)('scCheckLengths')
                PsiElement(,)(',')
                PsiWhiteSpace(' ')
                ImportSelector
                  CodeReferenceElement: glob
                    PsiElement(identifier)('glob')
                PsiElement(,)(',')
                PsiWhiteSpace(' ')
                ImportSelector
                  CodeReferenceElement: standardInterpolator
                    PsiElement(identifier)('standardInterpolator')
                  PsiWhiteSpace(' ')
                  PsiElement(as)('as')
                  PsiWhiteSpace(' ')
                  PsiElement(identifier)('scStandardInterpolator')
                PsiElement(})('}')
          PsiWhiteSpace('\n\n  ')
          ScFunctionDefinition: checkLengths
            AnnotationsList
              Annotation
                PsiElement(@)('@')
                AnnotationExpression
                  ConstructorInvocation
                    SimpleType: deprecated
                      CodeReferenceElement: deprecated
                        PsiElement(identifier)('deprecated')
                    ArgumentList
                      PsiElement(()('(')
                      StringLiteral
                        PsiElement(string content)('"use same-named method on StringContext companion object"')
                      PsiElement(,)(',')
                      PsiWhiteSpace(' ')
                      StringLiteral
                        PsiElement(string content)('"2.13.0"')
                      PsiElement())(')')
            Modifiers
              <empty list>
            PsiWhiteSpace('\n  ')
            PsiElement(def)('def')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('checkLengths')
            Parameters
              ParametersClause
                PsiElement(()('(')
                Parameter: args
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(identifier)('args')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    ParametrizedType: scala.collection.Seq[Any]
                      SimpleType: scala.collection.Seq
                        CodeReferenceElement: scala.collection.Seq
                          CodeReferenceElement: scala.collection
                            CodeReferenceElement: scala
                              PsiElement(identifier)('scala')
                            PsiElement(.)('.')
                            PsiElement(identifier)('collection')
                          PsiElement(.)('.')
                          PsiElement(identifier)('Seq')
                      TypeArgumentsList
                        PsiElement([)('[')
                        SimpleType: Any
                          CodeReferenceElement: Any
                            PsiElement(identifier)('Any')
                        PsiElement(])(']')
                PsiElement())(')')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            SimpleType: Unit
              CodeReferenceElement: Unit
                PsiElement(identifier)('Unit')
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace(' ')
            MethodCall
              ReferenceExpression: scCheckLengths
                PsiElement(identifier)('scCheckLengths')
              ArgumentList
                PsiElement(()('(')
                ReferenceExpression: args
                  PsiElement(identifier)('args')
                PsiElement(,)(',')
                PsiWhiteSpace(' ')
                ReferenceExpression: parts
                  PsiElement(identifier)('parts')
                PsiElement())(')')
          PsiWhiteSpace('\n\n  ')
          ScFunctionDefinition: s
            DocComment
              ScPsiDocToken(DOC_COMMENT_START)('/**')
              ScDocParagraph
                ScPsiDocToken(DOC_WHITESPACE)(' ')
                ScPsiDocToken(DOC_COMMENT_DATA)('The simple string interpolator.')
                ScPsiDocToken(DOC_WHITESPACE)('\n   ')
                ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
                ScPsiDocToken(DOC_WHITESPACE)('\n   ')
                ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
              ScDocParagraph
                ScPsiDocToken(DOC_WHITESPACE)('  ')
                ScPsiDocToken(DOC_COMMENT_DATA)('It inserts its arguments between corresponding parts of the string context.')
                ScPsiDocToken(DOC_WHITESPACE)('\n   ')
                ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
                ScPsiDocToken(DOC_WHITESPACE)('  ')
                ScPsiDocToken(DOC_COMMENT_DATA)('It also treats standard escape sequences as defined in the Scala specification.')
                ScPsiDocToken(DOC_WHITESPACE)('\n   ')
                ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
                ScPsiDocToken(DOC_WHITESPACE)('  ')
                ScPsiDocToken(DOC_COMMENT_DATA)('Here's an example of usage:')
                ScPsiDocToken(DOC_WHITESPACE)('\n   ')
                ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
                ScPsiDocToken(DOC_WHITESPACE)('  ')
                InnerCodeElement
                  ScPsiDocToken(DOC_INNER_CODE_TAG)('{{{')
                  ScPsiDocToken(DOC_WHITESPACE)('\n   ')
                  ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
                  ScPsiDocToken(DOC_INNER_CODE)('    val name = "James"')
                  ScPsiDocToken(DOC_WHITESPACE)('\n   ')
                  ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
                  ScPsiDocToken(DOC_INNER_CODE)('    println(s"Hello, \$name")  // Hello, James')
                  ScPsiDocToken(DOC_WHITESPACE)('\n   ')
                  ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
                  ScPsiDocToken(DOC_INNER_CODE)('  ')
                  ScPsiDocToken(DOC_INNER_CLOSE_CODE_TAG)('}}}')
                ScPsiDocToken(DOC_WHITESPACE)('\n   ')
                ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
                ScPsiDocToken(DOC_WHITESPACE)('  ')
                ScPsiDocToken(DOC_COMMENT_DATA)('In this example, the expression \$name is replaced with the ')
                DocSyntaxElement 8
                  ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                  ScPsiDocToken(DOC_COMMENT_DATA)('toString')
                  ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                ScPsiDocToken(DOC_COMMENT_DATA)(' of the')
                ScPsiDocToken(DOC_WHITESPACE)('\n   ')
                ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
                ScPsiDocToken(DOC_WHITESPACE)('  ')
                ScPsiDocToken(DOC_COMMENT_DATA)('variable ')
                DocSyntaxElement 8
                  ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                  ScPsiDocToken(DOC_COMMENT_DATA)('name')
                  ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                ScPsiDocToken(DOC_COMMENT_DATA)('.')
                ScPsiDocToken(DOC_WHITESPACE)('\n   ')
                ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
                ScPsiDocToken(DOC_WHITESPACE)('  ')
                ScPsiDocToken(DOC_COMMENT_DATA)('The ')
                DocSyntaxElement 8
                  ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                  ScPsiDocToken(DOC_COMMENT_DATA)('s')
                  ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                ScPsiDocToken(DOC_COMMENT_DATA)(' interpolator can take the ')
                DocSyntaxElement 8
                  ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                  ScPsiDocToken(DOC_COMMENT_DATA)('toString')
                  ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                ScPsiDocToken(DOC_COMMENT_DATA)(' of any arbitrary expression within')
                ScPsiDocToken(DOC_WHITESPACE)('\n   ')
                ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
                ScPsiDocToken(DOC_WHITESPACE)('  ')
                ScPsiDocToken(DOC_COMMENT_DATA)('a ')
                DocSyntaxElement 8
                  ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                  ScPsiDocToken(DOC_COMMENT_DATA)('\${}')
                  ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                ScPsiDocToken(DOC_COMMENT_DATA)(' block, for example:')
                ScPsiDocToken(DOC_WHITESPACE)('\n   ')
                ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
                ScPsiDocToken(DOC_WHITESPACE)('  ')
                InnerCodeElement
                  ScPsiDocToken(DOC_INNER_CODE_TAG)('{{{')
                  ScPsiDocToken(DOC_WHITESPACE)('\n   ')
                  ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
                  ScPsiDocToken(DOC_INNER_CODE)('    println(s"1 + 1 = \${1 + 1}")')
                  ScPsiDocToken(DOC_WHITESPACE)('\n   ')
                  ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
                  ScPsiDocToken(DOC_INNER_CODE)('  ')
                  ScPsiDocToken(DOC_INNER_CLOSE_CODE_TAG)('}}}')
                ScPsiDocToken(DOC_WHITESPACE)('\n   ')
                ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
                ScPsiDocToken(DOC_WHITESPACE)('  ')
                ScPsiDocToken(DOC_COMMENT_DATA)('will print the string ')
                DocSyntaxElement 8
                  ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                  ScPsiDocToken(DOC_COMMENT_DATA)('1 + 1 ')
                  ScPsiDocToken(DOC_COMMENT_DATA)('=')
                  ScPsiDocToken(DOC_COMMENT_DATA)(' 2')
                  ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                ScPsiDocToken(DOC_COMMENT_DATA)('.')
                ScPsiDocToken(DOC_WHITESPACE)('\n   ')
                ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
                ScPsiDocToken(DOC_WHITESPACE)('\n   ')
                ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
              DocTag
                ScPsiDocToken(DOC_WHITESPACE)('  ')
                ScPsiDocToken(DOC_TAG_NAME)('@param')
                ScPsiDocToken(DOC_WHITESPACE)(' ')
                ScalaDocTagValue: `args`
                  ScPsiDocToken(DOC_TAG_VALUE_TOKEN)('`args`')
                ScDocParagraph
                  ScPsiDocToken(DOC_WHITESPACE)(' ')
                  ScPsiDocToken(DOC_COMMENT_DATA)('The arguments to be inserted into the resulting string.')
                  ScPsiDocToken(DOC_WHITESPACE)('\n   ')
                  ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
              DocTag
                ScPsiDocToken(DOC_WHITESPACE)('  ')
                ScPsiDocToken(DOC_TAG_NAME)('@throws')
                ScPsiDocToken(DOC_WHITESPACE)(' ')
                CodeReferenceElement (scala doc throws): IllegalArgumentException
                  PsiElement(identifier)('IllegalArgumentException')
                ScPsiDocToken(DOC_WHITESPACE)('\n   ')
                ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
                ScDocParagraph
                  ScPsiDocToken(DOC_WHITESPACE)('          ')
                  ScPsiDocToken(DOC_COMMENT_DATA)('if the number of ')
                  DocSyntaxElement 8
                    ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                    ScPsiDocToken(DOC_COMMENT_DATA)('parts')
                    ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                  ScPsiDocToken(DOC_COMMENT_DATA)(' in the enclosing ')
                  DocSyntaxElement 8
                    ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                    ScPsiDocToken(DOC_COMMENT_DATA)('StringContext')
                    ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                  ScPsiDocToken(DOC_COMMENT_DATA)(' does not exceed')
                  ScPsiDocToken(DOC_WHITESPACE)('\n   ')
                  ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
                  ScPsiDocToken(DOC_WHITESPACE)('          ')
                  ScPsiDocToken(DOC_COMMENT_DATA)('the number of arguments ')
                  DocSyntaxElement 8
                    ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                    ScPsiDocToken(DOC_COMMENT_DATA)('arg')
                    ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                  ScPsiDocToken(DOC_COMMENT_DATA)(' by exactly 1.')
                  ScPsiDocToken(DOC_WHITESPACE)('\n   ')
                  ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
              DocTag
                ScPsiDocToken(DOC_WHITESPACE)('  ')
                ScPsiDocToken(DOC_TAG_NAME)('@throws')
                ScPsiDocToken(DOC_WHITESPACE)(' ')
                CodeReferenceElement (scala doc throws): StringContext.InvalidEscapeException
                  CodeReferenceElement (scala doc throws): StringContext
                    PsiElement(identifier)('StringContext')
                  PsiElement(.)('.')
                  PsiElement(identifier)('InvalidEscapeException')
                ScPsiDocToken(DOC_WHITESPACE)('\n   ')
                ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
                ScDocParagraph
                  ScPsiDocToken(DOC_WHITESPACE)('          ')
                  ScPsiDocToken(DOC_COMMENT_DATA)('if a ')
                  DocSyntaxElement 8
                    ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                    ScPsiDocToken(DOC_COMMENT_DATA)('parts')
                    ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                  ScPsiDocToken(DOC_COMMENT_DATA)(' string contains a backslash (')
                  DocSyntaxElement 8
                    ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                    ScPsiDocToken(DOC_COMMENT_DATA)('\')
                    ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                  ScPsiDocToken(DOC_COMMENT_DATA)(') character')
                  ScPsiDocToken(DOC_WHITESPACE)('\n   ')
                  ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
                  ScPsiDocToken(DOC_WHITESPACE)('          ')
                  ScPsiDocToken(DOC_COMMENT_DATA)('that does not start a valid escape sequence.')
                  ScPsiDocToken(DOC_WHITESPACE)('\n   ')
                  ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
              DocTag
                ScPsiDocToken(DOC_WHITESPACE)('  ')
                ScPsiDocToken(DOC_TAG_NAME)('@note')
                ScDocParagraph
                  ScPsiDocToken(DOC_WHITESPACE)('   ')
                  ScPsiDocToken(DOC_COMMENT_DATA)('The Scala compiler may replace a call to this method with an equivalent, but more efficient,')
                  ScPsiDocToken(DOC_WHITESPACE)('\n   ')
                  ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
                  ScPsiDocToken(DOC_WHITESPACE)('          ')
                  ScPsiDocToken(DOC_COMMENT_DATA)('use of a StringBuilder.')
                  ScPsiDocToken(DOC_WHITESPACE)('\n   ')
              ScPsiDocToken(DOC_COMMENT_END)('*/')
            PsiWhiteSpace('\n  ')
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(def)('def')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('s')
            Parameters
              ParametersClause
                PsiElement(()('(')
                Parameter: args
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(identifier)('args')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    SimpleType: Any
                      CodeReferenceElement: Any
                        PsiElement(identifier)('Any')
                    PsiElement(identifier)('*')
                PsiElement())(')')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            SimpleType: String
              CodeReferenceElement: String
                PsiElement(identifier)('String')
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace(' ')
            ReferenceExpression: ???
              PsiElement(identifier)('???')
          PsiWhiteSpace(' ')
          PsiComment(comment)('// fasttracked to scala.tools.reflect.FastStringInterpolator::interpolateS')
          PsiWhiteSpace('\n  ')
          ScObject: s
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(object)('object')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('s')
            PsiWhiteSpace(' ')
            ExtendsBlock
              ScTemplateBody
                PsiElement({)('{')
                PsiWhiteSpace('\n    ')
                ScFunctionDefinition: unapplySeq
                  DocComment
                    ScPsiDocToken(DOC_COMMENT_START)('/**')
                    ScDocParagraph
                      ScPsiDocToken(DOC_WHITESPACE)(' ')
                      ScPsiDocToken(DOC_COMMENT_DATA)('The simple string matcher.')
                      ScPsiDocToken(DOC_WHITESPACE)('\n     ')
                      ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
                      ScPsiDocToken(DOC_WHITESPACE)('\n     ')
                      ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
                    ScDocParagraph
                      ScPsiDocToken(DOC_WHITESPACE)('  ')
                      ScPsiDocToken(DOC_COMMENT_DATA)('Attempts to match the input string to the given interpolated patterns via')
                      ScPsiDocToken(DOC_WHITESPACE)('\n     ')
                      ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
                      ScPsiDocToken(DOC_WHITESPACE)('  ')
                      ScPsiDocToken(DOC_COMMENT_DATA)('a naive globbing, that is the reverse of the simple interpolator.')
                      ScPsiDocToken(DOC_WHITESPACE)('\n     ')
                      ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
                      ScPsiDocToken(DOC_WHITESPACE)('\n     ')
                      ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
                    ScDocParagraph
                      ScPsiDocToken(DOC_WHITESPACE)('  ')
                      ScPsiDocToken(DOC_COMMENT_DATA)('Here is an example usage:')
                      ScPsiDocToken(DOC_WHITESPACE)('\n     ')
                      ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
                      ScPsiDocToken(DOC_WHITESPACE)('\n     ')
                      ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
                    ScDocParagraph
                      ScPsiDocToken(DOC_WHITESPACE)('  ')
                      InnerCodeElement
                        ScPsiDocToken(DOC_INNER_CODE_TAG)('{{{')
                        ScPsiDocToken(DOC_WHITESPACE)('\n     ')
                        ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
                        ScPsiDocToken(DOC_INNER_CODE)('    val s"Hello, \$name" = "Hello, James"')
                        ScPsiDocToken(DOC_WHITESPACE)('\n     ')
                        ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
                        ScPsiDocToken(DOC_INNER_CODE)('    println(name)  // "James"')
                        ScPsiDocToken(DOC_WHITESPACE)('\n     ')
                        ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
                        ScPsiDocToken(DOC_INNER_CODE)('  ')
                        ScPsiDocToken(DOC_INNER_CLOSE_CODE_TAG)('}}}')
                      ScPsiDocToken(DOC_WHITESPACE)('\n     ')
                      ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
                      ScPsiDocToken(DOC_WHITESPACE)('\n     ')
                      ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
                    ScDocParagraph
                      ScPsiDocToken(DOC_WHITESPACE)('  ')
                      ScPsiDocToken(DOC_COMMENT_DATA)('In this example, the string "James" ends up matching the location where the pattern')
                      ScPsiDocToken(DOC_WHITESPACE)('\n     ')
                      ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
                      ScPsiDocToken(DOC_WHITESPACE)('  ')
                      DocSyntaxElement 8
                        ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                        ScPsiDocToken(DOC_COMMENT_DATA)('\$name')
                        ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                      ScPsiDocToken(DOC_WHITESPACE)(' ')
                      ScPsiDocToken(DOC_COMMENT_DATA)('is positioned, and thus ends up bound to that variable.')
                      ScPsiDocToken(DOC_WHITESPACE)('\n     ')
                      ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
                      ScPsiDocToken(DOC_WHITESPACE)('\n     ')
                      ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
                    ScDocParagraph
                      ScPsiDocToken(DOC_WHITESPACE)('  ')
                      ScPsiDocToken(DOC_COMMENT_DATA)('Multiple matches are supported:')
                      ScPsiDocToken(DOC_WHITESPACE)('\n     ')
                      ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
                      ScPsiDocToken(DOC_WHITESPACE)('\n     ')
                      ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
                    ScDocParagraph
                      ScPsiDocToken(DOC_WHITESPACE)('  ')
                      InnerCodeElement
                        ScPsiDocToken(DOC_INNER_CODE_TAG)('{{{')
                        ScPsiDocToken(DOC_WHITESPACE)('\n     ')
                        ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
                        ScPsiDocToken(DOC_INNER_CODE)('    val s"\$greeting, \$name" = "Hello, James"')
                        ScPsiDocToken(DOC_WHITESPACE)('\n     ')
                        ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
                        ScPsiDocToken(DOC_INNER_CODE)('    println(greeting)  // "Hello"')
                        ScPsiDocToken(DOC_WHITESPACE)('\n     ')
                        ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
                        ScPsiDocToken(DOC_INNER_CODE)('    println(name)  // "James"')
                        ScPsiDocToken(DOC_WHITESPACE)('\n     ')
                        ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
                        ScPsiDocToken(DOC_INNER_CODE)('  ')
                        ScPsiDocToken(DOC_INNER_CLOSE_CODE_TAG)('}}}')
                      ScPsiDocToken(DOC_WHITESPACE)('\n     ')
                      ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
                      ScPsiDocToken(DOC_WHITESPACE)('\n     ')
                      ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
                    ScDocParagraph
                      ScPsiDocToken(DOC_WHITESPACE)('  ')
                      ScPsiDocToken(DOC_COMMENT_DATA)('And the ')
                      DocSyntaxElement 8
                        ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                        ScPsiDocToken(DOC_COMMENT_DATA)('s')
                        ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                      ScPsiDocToken(DOC_COMMENT_DATA)(' matcher can match an arbitrary pattern within the ')
                      DocSyntaxElement 8
                        ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                        ScPsiDocToken(DOC_COMMENT_DATA)('\${}')
                        ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                      ScPsiDocToken(DOC_COMMENT_DATA)(' block, for example:')
                      ScPsiDocToken(DOC_WHITESPACE)('\n     ')
                      ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
                      ScPsiDocToken(DOC_WHITESPACE)('\n     ')
                      ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
                    ScDocParagraph
                      ScPsiDocToken(DOC_WHITESPACE)('  ')
                      InnerCodeElement
                        ScPsiDocToken(DOC_INNER_CODE_TAG)('{{{')
                        ScPsiDocToken(DOC_WHITESPACE)('\n     ')
                        ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
                        ScPsiDocToken(DOC_INNER_CODE)('    val TimeSplitter = "([0-9]+)[.:]([0-9]+)".r')
                        ScPsiDocToken(DOC_WHITESPACE)('\n     ')
                        ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
                        ScPsiDocToken(DOC_INNER_CODE)('    val s"The time is \${TimeSplitter(hours, mins)}" = "The time is 10.50"')
                        ScPsiDocToken(DOC_WHITESPACE)('\n     ')
                        ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
                        ScPsiDocToken(DOC_INNER_CODE)('    println(hours) // 10')
                        ScPsiDocToken(DOC_WHITESPACE)('\n     ')
                        ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
                        ScPsiDocToken(DOC_INNER_CODE)('    println(mins) // 50')
                        ScPsiDocToken(DOC_WHITESPACE)('\n     ')
                        ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
                        ScPsiDocToken(DOC_INNER_CODE)('  ')
                        ScPsiDocToken(DOC_INNER_CLOSE_CODE_TAG)('}}}')
                      ScPsiDocToken(DOC_WHITESPACE)('\n     ')
                      ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
                      ScPsiDocToken(DOC_WHITESPACE)('\n     ')
                      ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
                    ScDocParagraph
                      ScPsiDocToken(DOC_WHITESPACE)('  ')
                      ScPsiDocToken(DOC_COMMENT_DATA)('Here, we use the ')
                      DocSyntaxElement 8
                        ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                        ScPsiDocToken(DOC_COMMENT_DATA)('TimeSplitter')
                        ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                      ScPsiDocToken(DOC_COMMENT_DATA)(' regex within the ')
                      DocSyntaxElement 8
                        ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                        ScPsiDocToken(DOC_COMMENT_DATA)('s')
                        ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                      ScPsiDocToken(DOC_COMMENT_DATA)(' matcher, further splitting the')
                      ScPsiDocToken(DOC_WHITESPACE)('\n     ')
                      ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
                      ScPsiDocToken(DOC_WHITESPACE)('  ')
                      ScPsiDocToken(DOC_COMMENT_DATA)('matched string "10.50" into its constituent parts')
                      ScPsiDocToken(DOC_WHITESPACE)('\n     ')
                    ScPsiDocToken(DOC_COMMENT_END)('*/')
                  PsiWhiteSpace('\n    ')
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(def)('def')
                  PsiWhiteSpace(' ')
                  PsiElement(identifier)('unapplySeq')
                  Parameters
                    ParametersClause
                      PsiElement(()('(')
                      Parameter: s
                        AnnotationsList
                          <empty list>
                        Modifiers
                          <empty list>
                        PsiElement(identifier)('s')
                        PsiElement(:)(':')
                        PsiWhiteSpace(' ')
                        ParameterType
                          SimpleType: String
                            CodeReferenceElement: String
                              PsiElement(identifier)('String')
                      PsiElement())(')')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParametrizedType: Option[Seq[String]]
                    SimpleType: Option
                      CodeReferenceElement: Option
                        PsiElement(identifier)('Option')
                    TypeArgumentsList
                      PsiElement([)('[')
                      ParametrizedType: Seq[String]
                        SimpleType: Seq
                          CodeReferenceElement: Seq
                            PsiElement(identifier)('Seq')
                        TypeArgumentsList
                          PsiElement([)('[')
                          SimpleType: String
                            CodeReferenceElement: String
                              PsiElement(identifier)('String')
                          PsiElement(])(']')
                      PsiElement(])(']')
                  PsiWhiteSpace(' ')
                  PsiElement(=)('=')
                  PsiWhiteSpace(' ')
                  MethodCall
                    ReferenceExpression: glob
                      PsiElement(identifier)('glob')
                    ArgumentList
                      PsiElement(()('(')
                      ReferenceExpression: parts
                        PsiElement(identifier)('parts')
                      PsiElement(,)(',')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: s
                        PsiElement(identifier)('s')
                      PsiElement())(')')
                PsiWhiteSpace('\n  ')
                PsiElement(})('}')
          PsiWhiteSpace('\n  ')
          ScFunctionDefinition: raw
            DocComment
              ScPsiDocToken(DOC_COMMENT_START)('/**')
              ScDocParagraph
                ScPsiDocToken(DOC_WHITESPACE)(' ')
                ScPsiDocToken(DOC_COMMENT_DATA)('The raw string interpolator.')
                ScPsiDocToken(DOC_WHITESPACE)('\n   ')
                ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
                ScPsiDocToken(DOC_WHITESPACE)('\n   ')
                ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
              ScDocParagraph
                ScPsiDocToken(DOC_WHITESPACE)('  ')
                ScPsiDocToken(DOC_COMMENT_DATA)('It inserts its arguments between corresponding parts of the string context.')
                ScPsiDocToken(DOC_WHITESPACE)('\n   ')
                ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
                ScPsiDocToken(DOC_WHITESPACE)('  ')
                ScPsiDocToken(DOC_COMMENT_DATA)('As opposed to the simple string interpolator ')
                DocSyntaxElement 8
                  ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                  ScPsiDocToken(DOC_COMMENT_DATA)('s')
                  ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                ScPsiDocToken(DOC_COMMENT_DATA)(', this one does not treat')
                ScPsiDocToken(DOC_WHITESPACE)('\n   ')
                ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
                ScPsiDocToken(DOC_WHITESPACE)('  ')
                ScPsiDocToken(DOC_COMMENT_DATA)('standard escape sequences as defined in the Scala specification.')
                ScPsiDocToken(DOC_WHITESPACE)('\n   ')
                ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
                ScPsiDocToken(DOC_WHITESPACE)('\n   ')
                ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
              ScDocParagraph
                ScPsiDocToken(DOC_WHITESPACE)('  ')
                ScPsiDocToken(DOC_COMMENT_DATA)('For example, the raw processed string ')
                DocSyntaxElement 8
                  ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                  ScPsiDocToken(DOC_COMMENT_DATA)('raw"a\nb"')
                  ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                ScPsiDocToken(DOC_COMMENT_DATA)(' is equal to the scala string ')
                DocSyntaxElement 8
                  ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                  ScPsiDocToken(DOC_COMMENT_DATA)('"a\\nb"')
                  ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                ScPsiDocToken(DOC_COMMENT_DATA)('.')
                ScPsiDocToken(DOC_WHITESPACE)('\n   ')
                ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
                ScPsiDocToken(DOC_WHITESPACE)('\n   ')
                ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
              ScDocParagraph
                ScPsiDocToken(DOC_WHITESPACE)('  ')
                DocSyntaxElement 2
                  ScPsiDocToken(DOC_ITALIC_TAG 2)('''')
                  ScPsiDocToken(DOC_COMMENT_DATA)('Note:')
                  ScPsiDocToken(DOC_ITALIC_TAG 2)('''')
                ScPsiDocToken(DOC_COMMENT_DATA)(' Even when using the raw interpolator, Scala will process Unicode escapes.')
                ScPsiDocToken(DOC_WHITESPACE)('\n   ')
                ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
                ScPsiDocToken(DOC_WHITESPACE)('  ')
                ScPsiDocToken(DOC_COMMENT_DATA)('Unicode processing in the raw interpolator is deprecated as of scala 2.13.2 and')
                ScPsiDocToken(DOC_WHITESPACE)('\n   ')
                ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
                ScPsiDocToken(DOC_WHITESPACE)('  ')
                ScPsiDocToken(DOC_COMMENT_DATA)('will be removed in the future')
                ScPsiDocToken(DOC_WHITESPACE)('\n   ')
                ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
                ScPsiDocToken(DOC_WHITESPACE)('  ')
                ScPsiDocToken(DOC_COMMENT_DATA)('For example:')
                ScPsiDocToken(DOC_WHITESPACE)('\n   ')
                ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
                ScPsiDocToken(DOC_WHITESPACE)('  ')
                InnerCodeElement
                  ScPsiDocToken(DOC_INNER_CODE_TAG)('{{{')
                  ScPsiDocToken(DOC_WHITESPACE)('\n   ')
                  ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
                  ScPsiDocToken(DOC_INNER_CODE)('    scala> raw"\u005cu0023"')
                  ScPsiDocToken(DOC_WHITESPACE)('\n   ')
                  ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
                  ScPsiDocToken(DOC_INNER_CODE)('    res0: String = #')
                  ScPsiDocToken(DOC_WHITESPACE)('\n   ')
                  ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
                  ScPsiDocToken(DOC_INNER_CODE)('  ')
                  ScPsiDocToken(DOC_INNER_CLOSE_CODE_TAG)('}}}')
                ScPsiDocToken(DOC_WHITESPACE)('\n   ')
                ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
                ScPsiDocToken(DOC_WHITESPACE)('\n   ')
                ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
              DocTag
                ScPsiDocToken(DOC_WHITESPACE)('  ')
                ScPsiDocToken(DOC_TAG_NAME)('@param')
                ScPsiDocToken(DOC_WHITESPACE)(' ')
                ScalaDocTagValue: `args`
                  ScPsiDocToken(DOC_TAG_VALUE_TOKEN)('`args`')
                ScDocParagraph
                  ScPsiDocToken(DOC_WHITESPACE)(' ')
                  ScPsiDocToken(DOC_COMMENT_DATA)('The arguments to be inserted into the resulting string.')
                  ScPsiDocToken(DOC_WHITESPACE)('\n   ')
                  ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
              DocTag
                ScPsiDocToken(DOC_WHITESPACE)('  ')
                ScPsiDocToken(DOC_TAG_NAME)('@throws')
                ScPsiDocToken(DOC_WHITESPACE)(' ')
                CodeReferenceElement (scala doc throws): IllegalArgumentException
                  PsiElement(identifier)('IllegalArgumentException')
                ScPsiDocToken(DOC_WHITESPACE)('\n   ')
                ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
                ScDocParagraph
                  ScPsiDocToken(DOC_WHITESPACE)('          ')
                  ScPsiDocToken(DOC_COMMENT_DATA)('if the number of ')
                  DocSyntaxElement 8
                    ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                    ScPsiDocToken(DOC_COMMENT_DATA)('parts')
                    ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                  ScPsiDocToken(DOC_COMMENT_DATA)(' in the enclosing ')
                  DocSyntaxElement 8
                    ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                    ScPsiDocToken(DOC_COMMENT_DATA)('StringContext')
                    ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                  ScPsiDocToken(DOC_COMMENT_DATA)(' does not exceed')
                  ScPsiDocToken(DOC_WHITESPACE)('\n   ')
                  ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
                  ScPsiDocToken(DOC_WHITESPACE)('          ')
                  ScPsiDocToken(DOC_COMMENT_DATA)('the number of arguments ')
                  DocSyntaxElement 8
                    ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                    ScPsiDocToken(DOC_COMMENT_DATA)('arg')
                    ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                  ScPsiDocToken(DOC_COMMENT_DATA)(' by exactly 1.')
                  ScPsiDocToken(DOC_WHITESPACE)('\n   ')
                  ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
              DocTag
                ScPsiDocToken(DOC_WHITESPACE)('  ')
                ScPsiDocToken(DOC_TAG_NAME)('@note')
                ScDocParagraph
                  ScPsiDocToken(DOC_WHITESPACE)('   ')
                  ScPsiDocToken(DOC_COMMENT_DATA)('The Scala compiler may replace a call to this method with an equivalent, but more efficient,')
                  ScPsiDocToken(DOC_WHITESPACE)('\n   ')
                  ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
                  ScPsiDocToken(DOC_WHITESPACE)('          ')
                  ScPsiDocToken(DOC_COMMENT_DATA)('use of a StringBuilder.')
                  ScPsiDocToken(DOC_WHITESPACE)('\n   ')
              ScPsiDocToken(DOC_COMMENT_END)('*/')
            PsiWhiteSpace('\n  ')
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(def)('def')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('raw')
            Parameters
              ParametersClause
                PsiElement(()('(')
                Parameter: args
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(identifier)('args')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    SimpleType: Any
                      CodeReferenceElement: Any
                        PsiElement(identifier)('Any')
                    PsiElement(identifier)('*')
                PsiElement())(')')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            SimpleType: String
              CodeReferenceElement: String
                PsiElement(identifier)('String')
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace(' ')
            ReferenceExpression: ???
              PsiElement(identifier)('???')
          PsiWhiteSpace(' ')
          PsiComment(comment)('// fasttracked to scala.tools.reflect.FastStringInterpolator::interpolateRaw')
          PsiWhiteSpace('\n\n  ')
          ScFunctionDefinition: standardInterpolator
            AnnotationsList
              Annotation
                PsiElement(@)('@')
                AnnotationExpression
                  ConstructorInvocation
                    SimpleType: deprecated
                      CodeReferenceElement: deprecated
                        PsiElement(identifier)('deprecated')
                    ArgumentList
                      PsiElement(()('(')
                      StringLiteral
                        PsiElement(string content)('"Use the static method StringContext.standardInterpolator instead of the instance method"')
                      PsiElement(,)(',')
                      PsiWhiteSpace(' ')
                      StringLiteral
                        PsiElement(string content)('"2.13.0"')
                      PsiElement())(')')
            Modifiers
              <empty list>
            PsiWhiteSpace('\n  ')
            PsiElement(def)('def')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('standardInterpolator')
            Parameters
              ParametersClause
                PsiElement(()('(')
                Parameter: process
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(identifier)('process')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    FunctionalType: String => String
                      SimpleType: String
                        CodeReferenceElement: String
                          PsiElement(identifier)('String')
                      PsiWhiteSpace(' ')
                      PsiElement(=>)('=>')
                      PsiWhiteSpace(' ')
                      SimpleType: String
                        CodeReferenceElement: String
                          PsiElement(identifier)('String')
                PsiElement(,)(',')
                PsiWhiteSpace(' ')
                Parameter: args
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(identifier)('args')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    ParametrizedType: Seq[Any]
                      SimpleType: Seq
                        CodeReferenceElement: Seq
                          PsiElement(identifier)('Seq')
                      TypeArgumentsList
                        PsiElement([)('[')
                        SimpleType: Any
                          CodeReferenceElement: Any
                            PsiElement(identifier)('Any')
                        PsiElement(])(']')
                PsiElement())(')')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            SimpleType: String
              CodeReferenceElement: String
                PsiElement(identifier)('String')
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace(' ')
            MethodCall
              ReferenceExpression: scStandardInterpolator
                PsiElement(identifier)('scStandardInterpolator')
              ArgumentList
                PsiElement(()('(')
                ReferenceExpression: process
                  PsiElement(identifier)('process')
                PsiElement(,)(',')
                PsiWhiteSpace(' ')
                ReferenceExpression: args
                  PsiElement(identifier)('args')
                PsiElement(,)(',')
                PsiWhiteSpace(' ')
                ReferenceExpression: parts
                  PsiElement(identifier)('parts')
                PsiElement())(')')
          PsiWhiteSpace('\n\n  ')
          ScFunctionDefinition: f
            DocComment
              ScPsiDocToken(DOC_COMMENT_START)('/**')
              ScDocParagraph
                ScPsiDocToken(DOC_WHITESPACE)(' ')
                ScPsiDocToken(DOC_COMMENT_DATA)('The formatted string interpolator.')
                ScPsiDocToken(DOC_WHITESPACE)('\n   ')
                ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
                ScPsiDocToken(DOC_WHITESPACE)('\n   ')
                ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
              ScDocParagraph
                ScPsiDocToken(DOC_WHITESPACE)('  ')
                ScPsiDocToken(DOC_COMMENT_DATA)('It inserts its arguments between corresponding parts of the string context.')
                ScPsiDocToken(DOC_WHITESPACE)('\n   ')
                ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
                ScPsiDocToken(DOC_WHITESPACE)('  ')
                ScPsiDocToken(DOC_COMMENT_DATA)('It also treats standard escape sequences as defined in the Scala specification.')
                ScPsiDocToken(DOC_WHITESPACE)('\n   ')
                ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
                ScPsiDocToken(DOC_WHITESPACE)('  ')
                ScPsiDocToken(DOC_COMMENT_DATA)('Finally, if an interpolated expression is followed by a ')
                DocSyntaxElement 8
                  ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                  ScPsiDocToken(DOC_COMMENT_DATA)('parts')
                  ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                ScPsiDocToken(DOC_COMMENT_DATA)(' string')
                ScPsiDocToken(DOC_WHITESPACE)('\n   ')
                ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
                ScPsiDocToken(DOC_WHITESPACE)('  ')
                ScPsiDocToken(DOC_COMMENT_DATA)('that starts with a formatting specifier, the expression is formatted according to that')
                ScPsiDocToken(DOC_WHITESPACE)('\n   ')
                ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
                ScPsiDocToken(DOC_WHITESPACE)('  ')
                ScPsiDocToken(DOC_COMMENT_DATA)('specifier. All specifiers allowed in Java format strings are handled, and in the same')
                ScPsiDocToken(DOC_WHITESPACE)('\n   ')
                ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
                ScPsiDocToken(DOC_WHITESPACE)('  ')
                ScPsiDocToken(DOC_COMMENT_DATA)('way they are treated in Java.')
                ScPsiDocToken(DOC_WHITESPACE)('\n   ')
                ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
                ScPsiDocToken(DOC_WHITESPACE)('\n   ')
                ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
              ScDocParagraph
                ScPsiDocToken(DOC_WHITESPACE)('  ')
                ScPsiDocToken(DOC_COMMENT_DATA)('For example:')
                ScPsiDocToken(DOC_WHITESPACE)('\n   ')
                ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
                ScPsiDocToken(DOC_WHITESPACE)('  ')
                InnerCodeElement
                  ScPsiDocToken(DOC_INNER_CODE_TAG)('{{{')
                  ScPsiDocToken(DOC_WHITESPACE)('\n   ')
                  ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
                  ScPsiDocToken(DOC_INNER_CODE)('    val height = 1.9d')
                  ScPsiDocToken(DOC_WHITESPACE)('\n   ')
                  ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
                  ScPsiDocToken(DOC_INNER_CODE)('    val name = "James"')
                  ScPsiDocToken(DOC_WHITESPACE)('\n   ')
                  ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
                  ScPsiDocToken(DOC_INNER_CODE)('    println(f"\$name%s is \$height%2.2f meters tall")  // James is 1.90 meters tall')
                  ScPsiDocToken(DOC_WHITESPACE)('\n   ')
                  ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
                  ScPsiDocToken(DOC_INNER_CODE)('  ')
                  ScPsiDocToken(DOC_INNER_CLOSE_CODE_TAG)('}}}')
                ScPsiDocToken(DOC_WHITESPACE)('\n   ')
                ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
                ScPsiDocToken(DOC_WHITESPACE)('\n   ')
                ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
              DocTag
                ScPsiDocToken(DOC_WHITESPACE)('  ')
                ScPsiDocToken(DOC_TAG_NAME)('@param')
                ScPsiDocToken(DOC_WHITESPACE)(' ')
                ScalaDocTagValue: `args`
                  ScPsiDocToken(DOC_TAG_VALUE_TOKEN)('`args`')
                ScDocParagraph
                  ScPsiDocToken(DOC_WHITESPACE)(' ')
                  ScPsiDocToken(DOC_COMMENT_DATA)('The arguments to be inserted into the resulting string.')
                  ScPsiDocToken(DOC_WHITESPACE)('\n   ')
                  ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
              DocTag
                ScPsiDocToken(DOC_WHITESPACE)('  ')
                ScPsiDocToken(DOC_TAG_NAME)('@throws')
                ScPsiDocToken(DOC_WHITESPACE)(' ')
                CodeReferenceElement (scala doc throws): IllegalArgumentException
                  PsiElement(identifier)('IllegalArgumentException')
                ScPsiDocToken(DOC_WHITESPACE)('\n   ')
                ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
                ScDocParagraph
                  ScPsiDocToken(DOC_WHITESPACE)('          ')
                  ScPsiDocToken(DOC_COMMENT_DATA)('if the number of ')
                  DocSyntaxElement 8
                    ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                    ScPsiDocToken(DOC_COMMENT_DATA)('parts')
                    ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                  ScPsiDocToken(DOC_COMMENT_DATA)(' in the enclosing ')
                  DocSyntaxElement 8
                    ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                    ScPsiDocToken(DOC_COMMENT_DATA)('StringContext')
                    ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                  ScPsiDocToken(DOC_COMMENT_DATA)(' does not exceed')
                  ScPsiDocToken(DOC_WHITESPACE)('\n   ')
                  ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
                  ScPsiDocToken(DOC_WHITESPACE)('          ')
                  ScPsiDocToken(DOC_COMMENT_DATA)('the number of arguments ')
                  DocSyntaxElement 8
                    ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                    ScPsiDocToken(DOC_COMMENT_DATA)('arg')
                    ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                  ScPsiDocToken(DOC_COMMENT_DATA)(' by exactly 1.')
                  ScPsiDocToken(DOC_WHITESPACE)('\n   ')
                  ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
              DocTag
                ScPsiDocToken(DOC_WHITESPACE)('  ')
                ScPsiDocToken(DOC_TAG_NAME)('@throws')
                ScPsiDocToken(DOC_WHITESPACE)(' ')
                CodeReferenceElement (scala doc throws): StringContext.InvalidEscapeException
                  CodeReferenceElement (scala doc throws): StringContext
                    PsiElement(identifier)('StringContext')
                  PsiElement(.)('.')
                  PsiElement(identifier)('InvalidEscapeException')
                ScPsiDocToken(DOC_WHITESPACE)('\n   ')
                ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
                ScDocParagraph
                  ScPsiDocToken(DOC_WHITESPACE)('          ')
                  ScPsiDocToken(DOC_COMMENT_DATA)('if a ')
                  DocSyntaxElement 8
                    ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                    ScPsiDocToken(DOC_COMMENT_DATA)('parts')
                    ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                  ScPsiDocToken(DOC_COMMENT_DATA)(' string contains a backslash (')
                  DocSyntaxElement 8
                    ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                    ScPsiDocToken(DOC_COMMENT_DATA)('\')
                    ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                  ScPsiDocToken(DOC_COMMENT_DATA)(') character')
                  ScPsiDocToken(DOC_WHITESPACE)('\n   ')
                  ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
                  ScPsiDocToken(DOC_WHITESPACE)('          ')
                  ScPsiDocToken(DOC_COMMENT_DATA)('that does not start a valid escape sequence.')
                  ScPsiDocToken(DOC_WHITESPACE)('\n   ')
                  ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
                  ScPsiDocToken(DOC_WHITESPACE)('\n   ')
                  ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
                ScDocParagraph
                  ScPsiDocToken(DOC_WHITESPACE)('  ')
                  ScPsiDocToken(DOC_COMMENT_DATA)('Note: The ')
                  DocSyntaxElement 8
                    ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                    ScPsiDocToken(DOC_COMMENT_DATA)('f')
                    ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                  ScPsiDocToken(DOC_COMMENT_DATA)(' method works by assembling a format string from all the ')
                  DocSyntaxElement 8
                    ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                    ScPsiDocToken(DOC_COMMENT_DATA)('parts')
                    ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                  ScPsiDocToken(DOC_COMMENT_DATA)(' strings and using')
                  ScPsiDocToken(DOC_WHITESPACE)('\n   ')
                  ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
                  ScPsiDocToken(DOC_WHITESPACE)('  ')
                  DocSyntaxElement 8
                    ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                    ScPsiDocToken(DOC_COMMENT_DATA)('java.lang.String.format')
                    ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                  ScPsiDocToken(DOC_COMMENT_DATA)(' to format all arguments with that format string. The format string is')
                  ScPsiDocToken(DOC_WHITESPACE)('\n   ')
                  ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
                  ScPsiDocToken(DOC_WHITESPACE)('  ')
                  ScPsiDocToken(DOC_COMMENT_DATA)('obtained by concatenating all ')
                  DocSyntaxElement 8
                    ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                    ScPsiDocToken(DOC_COMMENT_DATA)('parts')
                    ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                  ScPsiDocToken(DOC_COMMENT_DATA)(' strings, and performing two transformations:')
                  ScPsiDocToken(DOC_WHITESPACE)('\n   ')
                  ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
                  ScPsiDocToken(DOC_WHITESPACE)('\n   ')
                  ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
                ScDocList
                  ScPsiDocToken(DOC_WHITESPACE)('   ')
                  ScDocListItem
                    ScPsiDocToken(DOC_LIST_ITEM_HEAD)('1.')
                    ScPsiDocToken(DOC_WHITESPACE)(' ')
                    ScPsiDocToken(DOC_COMMENT_DATA)('Let a _formatting position_ be a start of any ')
                    DocSyntaxElement 8
                      ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                      ScPsiDocToken(DOC_COMMENT_DATA)('parts')
                      ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                    ScPsiDocToken(DOC_COMMENT_DATA)(' string except the first one.')
                    ScPsiDocToken(DOC_WHITESPACE)('\n   ')
                    ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
                    ScPsiDocToken(DOC_WHITESPACE)('      ')
                    ScPsiDocToken(DOC_COMMENT_DATA)('If a formatting position does not refer to a ')
                    DocSyntaxElement 8
                      ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                      ScPsiDocToken(DOC_COMMENT_DATA)('%')
                      ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                    ScPsiDocToken(DOC_COMMENT_DATA)(' character (which is assumed to')
                    ScPsiDocToken(DOC_WHITESPACE)('\n   ')
                    ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
                    ScPsiDocToken(DOC_WHITESPACE)('      ')
                    ScPsiDocToken(DOC_COMMENT_DATA)('start a format specifier), then the string format specifier ')
                    DocSyntaxElement 8
                      ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                      ScPsiDocToken(DOC_COMMENT_DATA)('%s')
                      ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                    ScPsiDocToken(DOC_COMMENT_DATA)(' is inserted.')
                    ScPsiDocToken(DOC_WHITESPACE)('\n   ')
                    ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
                    ScPsiDocToken(DOC_WHITESPACE)('\n   ')
                    ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
                ScDocParagraph
                  ScPsiDocToken(DOC_WHITESPACE)('   ')
                  ScPsiDocToken(DOC_COMMENT_DATA)('2. Any ')
                  DocSyntaxElement 8
                    ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                    ScPsiDocToken(DOC_COMMENT_DATA)('%')
                    ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                  ScPsiDocToken(DOC_COMMENT_DATA)(' characters not in formatting positions must begin one of the conversions')
                  ScPsiDocToken(DOC_WHITESPACE)('\n   ')
                  ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
                  ScPsiDocToken(DOC_WHITESPACE)('      ')
                  DocSyntaxElement 8
                    ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                    ScPsiDocToken(DOC_COMMENT_DATA)('%%')
                    ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                  ScPsiDocToken(DOC_COMMENT_DATA)(' (the literal percent) or ')
                  DocSyntaxElement 8
                    ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                    ScPsiDocToken(DOC_COMMENT_DATA)('%n')
                    ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                  ScPsiDocToken(DOC_COMMENT_DATA)(' (the platform-specific line separator).')
                  ScPsiDocToken(DOC_WHITESPACE)('\n   ')
              ScPsiDocToken(DOC_COMMENT_END)('*/')
            PsiWhiteSpace('\n  ')
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(def)('def')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('f')
            TypeParameterClause
              PsiElement([)('[')
              TypeParameter: A
                PsiElement(identifier)('A')
                PsiWhiteSpace(' ')
                PsiElement(>:)('>:')
                PsiWhiteSpace(' ')
                SimpleType: Any
                  CodeReferenceElement: Any
                    PsiElement(identifier)('Any')
              PsiElement(])(']')
            Parameters
              ParametersClause
                PsiElement(()('(')
                Parameter: args
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(identifier)('args')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    SimpleType: A
                      CodeReferenceElement: A
                        PsiElement(identifier)('A')
                    PsiElement(identifier)('*')
                PsiElement())(')')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            SimpleType: String
              CodeReferenceElement: String
                PsiElement(identifier)('String')
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace(' ')
            ReferenceExpression: ???
              PsiElement(identifier)('???')
          PsiWhiteSpace(' ')
          PsiComment(comment)('// fasttracked to scala.tools.reflect.FormatInterpolator::interpolateF')
          PsiWhiteSpace('\n')
          PsiElement(})('}')
    PsiWhiteSpace('\n\n')
    ScObject: StringContext
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      PsiElement(object)('object')
      PsiWhiteSpace(' ')
      PsiElement(identifier)('StringContext')
      PsiWhiteSpace(' ')
      ExtendsBlock
        ScTemplateBody
          PsiElement({)('{')
          PsiWhiteSpace('\n  ')
          ScFunctionDefinition: glob
            DocComment
              ScPsiDocToken(DOC_COMMENT_START)('/**')
              ScPsiDocToken(DOC_WHITESPACE)('\n    ')
              ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
              ScDocParagraph
                ScPsiDocToken(DOC_WHITESPACE)(' ')
                ScPsiDocToken(DOC_COMMENT_DATA)('Linear time glob-matching implementation.')
                ScPsiDocToken(DOC_WHITESPACE)('\n    ')
                ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
                ScPsiDocToken(DOC_WHITESPACE)(' ')
                ScPsiDocToken(DOC_COMMENT_DATA)('Adapted from https://research.swtch.com/glob')
                ScPsiDocToken(DOC_WHITESPACE)('\n    ')
                ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
                ScPsiDocToken(DOC_WHITESPACE)('\n    ')
                ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
              DocTag
                ScPsiDocToken(DOC_WHITESPACE)(' ')
                ScPsiDocToken(DOC_TAG_NAME)('@param')
                ScPsiDocToken(DOC_WHITESPACE)(' ')
                ScalaDocTagValue: patternChunks
                  ScPsiDocToken(DOC_TAG_VALUE_TOKEN)('patternChunks')
                ScDocParagraph
                  ScPsiDocToken(DOC_WHITESPACE)(' ')
                  ScPsiDocToken(DOC_COMMENT_DATA)('The non-wildcard portions of the input pattern,')
                  ScPsiDocToken(DOC_WHITESPACE)('\n    ')
                  ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
                  ScPsiDocToken(DOC_WHITESPACE)('                      ')
                  ScPsiDocToken(DOC_COMMENT_DATA)('separated by wildcards')
                  ScPsiDocToken(DOC_WHITESPACE)('\n    ')
                  ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
              DocTag
                ScPsiDocToken(DOC_WHITESPACE)(' ')
                ScPsiDocToken(DOC_TAG_NAME)('@param')
                ScPsiDocToken(DOC_WHITESPACE)(' ')
                ScalaDocTagValue: input
                  ScPsiDocToken(DOC_TAG_VALUE_TOKEN)('input')
                ScDocParagraph
                  ScPsiDocToken(DOC_WHITESPACE)(' ')
                  ScPsiDocToken(DOC_COMMENT_DATA)('The input you wish to match against')
                  ScPsiDocToken(DOC_WHITESPACE)('\n    ')
                  ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
              DocTag
                ScPsiDocToken(DOC_WHITESPACE)(' ')
                ScPsiDocToken(DOC_TAG_NAME)('@return')
                ScDocParagraph
                  ScPsiDocToken(DOC_WHITESPACE)(' ')
                  ScPsiDocToken(DOC_COMMENT_DATA)('None if there is no match, Some containing the sequence of matched')
                  ScPsiDocToken(DOC_WHITESPACE)('\n    ')
                  ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
                  ScPsiDocToken(DOC_WHITESPACE)('         ')
                  ScPsiDocToken(DOC_COMMENT_DATA)('wildcard strings if there is a match')
                  ScPsiDocToken(DOC_WHITESPACE)('\n    ')
              ScPsiDocToken(DOC_COMMENT_END)('*/')
            PsiWhiteSpace('\n  ')
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(def)('def')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('glob')
            Parameters
              ParametersClause
                PsiElement(()('(')
                Parameter: patternChunks
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(identifier)('patternChunks')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    ParametrizedType: Seq[String]
                      SimpleType: Seq
                        CodeReferenceElement: Seq
                          PsiElement(identifier)('Seq')
                      TypeArgumentsList
                        PsiElement([)('[')
                        SimpleType: String
                          CodeReferenceElement: String
                            PsiElement(identifier)('String')
                        PsiElement(])(']')
                PsiElement(,)(',')
                PsiWhiteSpace(' ')
                Parameter: input
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(identifier)('input')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    SimpleType: String
                      CodeReferenceElement: String
                        PsiElement(identifier)('String')
                PsiElement())(')')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            ParametrizedType: Option[Seq[String]]
              SimpleType: Option
                CodeReferenceElement: Option
                  PsiElement(identifier)('Option')
              TypeArgumentsList
                PsiElement([)('[')
                ParametrizedType: Seq[String]
                  SimpleType: Seq
                    CodeReferenceElement: Seq
                      PsiElement(identifier)('Seq')
                  TypeArgumentsList
                    PsiElement([)('[')
                    SimpleType: String
                      CodeReferenceElement: String
                        PsiElement(identifier)('String')
                    PsiElement(])(']')
                PsiElement(])(']')
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace(' ')
            BlockExpression
              PsiElement({)('{')
              PsiWhiteSpace('\n    ')
              ScVariableDefinition: patternIndex
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(var)('var')
                PsiWhiteSpace(' ')
                ListOfPatterns
                  ReferencePattern: patternIndex
                    PsiElement(identifier)('patternIndex')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                IntegerLiteral
                  PsiElement(integer)('0')
              PsiWhiteSpace('\n    ')
              ScVariableDefinition: inputIndex
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(var)('var')
                PsiWhiteSpace(' ')
                ListOfPatterns
                  ReferencePattern: inputIndex
                    PsiElement(identifier)('inputIndex')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                IntegerLiteral
                  PsiElement(integer)('0')
              PsiWhiteSpace('\n    ')
              ScVariableDefinition: nextPatternIndex
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(var)('var')
                PsiWhiteSpace(' ')
                ListOfPatterns
                  ReferencePattern: nextPatternIndex
                    PsiElement(identifier)('nextPatternIndex')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                IntegerLiteral
                  PsiElement(integer)('0')
              PsiWhiteSpace('\n    ')
              ScVariableDefinition: nextInputIndex
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(var)('var')
                PsiWhiteSpace(' ')
                ListOfPatterns
                  ReferencePattern: nextInputIndex
                    PsiElement(identifier)('nextInputIndex')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                IntegerLiteral
                  PsiElement(integer)('0')
              PsiWhiteSpace('\n\n    ')
              ScPatternDefinition: numWildcards
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(val)('val')
                PsiWhiteSpace(' ')
                ListOfPatterns
                  ReferencePattern: numWildcards
                    PsiElement(identifier)('numWildcards')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                InfixExpression
                  ReferenceExpression: patternChunks.length
                    ReferenceExpression: patternChunks
                      PsiElement(identifier)('patternChunks')
                    PsiElement(.)('.')
                    PsiElement(identifier)('length')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: -
                    PsiElement(identifier)('-')
                  PsiWhiteSpace(' ')
                  IntegerLiteral
                    PsiElement(integer)('1')
              PsiWhiteSpace('\n    ')
              ScPatternDefinition: matchStarts
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(val)('val')
                PsiWhiteSpace(' ')
                ListOfPatterns
                  ReferencePattern: matchStarts
                    PsiElement(identifier)('matchStarts')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                MethodCall
                  MethodCall
                    ReferenceExpression: Array.fill
                      ReferenceExpression: Array
                        PsiElement(identifier)('Array')
                      PsiElement(.)('.')
                      PsiElement(identifier)('fill')
                    ArgumentList
                      PsiElement(()('(')
                      ReferenceExpression: numWildcards
                        PsiElement(identifier)('numWildcards')
                      PsiElement())(')')
                  ArgumentList
                    PsiElement(()('(')
                    IntegerLiteral
                      PsiElement(identifier)('-')
                      PsiElement(integer)('1')
                    PsiElement())(')')
              PsiWhiteSpace('\n    ')
              ScPatternDefinition: matchEnds
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(val)('val')
                PsiWhiteSpace(' ')
                ListOfPatterns
                  ReferencePattern: matchEnds
                    PsiElement(identifier)('matchEnds')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                MethodCall
                  MethodCall
                    ReferenceExpression: Array.fill
                      ReferenceExpression: Array
                        PsiElement(identifier)('Array')
                      PsiElement(.)('.')
                      PsiElement(identifier)('fill')
                    ArgumentList
                      PsiElement(()('(')
                      ReferenceExpression: numWildcards
                        PsiElement(identifier)('numWildcards')
                      PsiElement())(')')
                  ArgumentList
                    PsiElement(()('(')
                    IntegerLiteral
                      PsiElement(identifier)('-')
                      PsiElement(integer)('1')
                    PsiElement())(')')
              PsiWhiteSpace('\n\n    ')
              ScPatternDefinition: nameLength
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(val)('val')
                PsiWhiteSpace(' ')
                ListOfPatterns
                  ReferencePattern: nameLength
                    PsiElement(identifier)('nameLength')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                ReferenceExpression: input.length
                  ReferenceExpression: input
                    PsiElement(identifier)('input')
                  PsiElement(.)('.')
                  PsiElement(identifier)('length')
              PsiWhiteSpace('\n    ')
              ScPatternDefinition: patternLength
                PsiComment(comment)('// The final pattern is as long as all the chunks, separated by 1-character')
                PsiWhiteSpace('\n    ')
                PsiComment(comment)('// glob-wildcard placeholders')
                PsiWhiteSpace('\n    ')
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(val)('val')
                PsiWhiteSpace(' ')
                ListOfPatterns
                  ReferencePattern: patternLength
                    PsiElement(identifier)('patternLength')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                BlockExpression
                  PsiElement({)('{')
                  PsiWhiteSpace('\n      ')
                  ScVariableDefinition: n
                    AnnotationsList
                      <empty list>
                    Modifiers
                      <empty list>
                    PsiElement(var)('var')
                    PsiWhiteSpace(' ')
                    ListOfPatterns
                      ReferencePattern: n
                        PsiElement(identifier)('n')
                    PsiWhiteSpace(' ')
                    PsiElement(=)('=')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: numWildcards
                      PsiElement(identifier)('numWildcards')
                  PsiWhiteSpace('\n      ')
                  ForStatement
                    PsiElement(for)('for')
                    PsiElement(()('(')
                    Enumerators
                      Generator
                        ReferencePattern: chunk
                          PsiElement(identifier)('chunk')
                        PsiWhiteSpace(' ')
                        PsiElement(<-)('<-')
                        PsiWhiteSpace(' ')
                        ReferenceExpression: patternChunks
                          PsiElement(identifier)('patternChunks')
                    PsiElement())(')')
                    PsiWhiteSpace(' ')
                    BlockExpression
                      PsiElement({)('{')
                      PsiWhiteSpace('\n        ')
                      InfixExpression
                        ReferenceExpression: n
                          PsiElement(identifier)('n')
                        PsiWhiteSpace(' ')
                        ReferenceExpression: +=
                          PsiElement(identifier)('+=')
                        PsiWhiteSpace(' ')
                        ReferenceExpression: chunk.length
                          ReferenceExpression: chunk
                            PsiElement(identifier)('chunk')
                          PsiElement(.)('.')
                          PsiElement(identifier)('length')
                      PsiWhiteSpace('\n      ')
                      PsiElement(})('}')
                  PsiWhiteSpace('\n      ')
                  ReferenceExpression: n
                    PsiElement(identifier)('n')
                  PsiWhiteSpace('\n    ')
                  PsiElement(})('}')
              PsiWhiteSpace('\n\n    ')
              ScPatternDefinition: pattern
                PsiComment(comment)('// Convert the input pattern chunks into a single sequence of shorts; each')
                PsiWhiteSpace('\n    ')
                PsiComment(comment)('// non-negative short represents a character, while -1 represents a glob wildcard')
                PsiWhiteSpace('\n    ')
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(val)('val')
                PsiWhiteSpace(' ')
                ListOfPatterns
                  ReferencePattern: pattern
                    PsiElement(identifier)('pattern')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                BlockExpression
                  PsiElement({)('{')
                  PsiWhiteSpace('\n      ')
                  ScPatternDefinition: arr
                    AnnotationsList
                      <empty list>
                    Modifiers
                      <empty list>
                    PsiElement(val)('val')
                    PsiWhiteSpace(' ')
                    ListOfPatterns
                      ReferencePattern: arr
                        PsiElement(identifier)('arr')
                    PsiWhiteSpace(' ')
                    PsiElement(=)('=')
                    PsiWhiteSpace(' ')
                    ScNewTemplateDefinition: <anonymous>
                      PsiElement(new)('new')
                      PsiWhiteSpace(' ')
                      ExtendsBlock
                        TemplateParents
                          ConstructorInvocation
                            ParametrizedType: Array[Short]
                              SimpleType: Array
                                CodeReferenceElement: Array
                                  PsiElement(identifier)('Array')
                              TypeArgumentsList
                                PsiElement([)('[')
                                SimpleType: Short
                                  CodeReferenceElement: Short
                                    PsiElement(identifier)('Short')
                                PsiElement(])(']')
                            ArgumentList
                              PsiElement(()('(')
                              ReferenceExpression: patternLength
                                PsiElement(identifier)('patternLength')
                              PsiElement())(')')
                  PsiWhiteSpace('\n      ')
                  ScVariableDefinition: i
                    AnnotationsList
                      <empty list>
                    Modifiers
                      <empty list>
                    PsiElement(var)('var')
                    PsiWhiteSpace(' ')
                    ListOfPatterns
                      ReferencePattern: i
                        PsiElement(identifier)('i')
                    PsiWhiteSpace(' ')
                    PsiElement(=)('=')
                    PsiWhiteSpace(' ')
                    IntegerLiteral
                      PsiElement(integer)('0')
                  PsiWhiteSpace('\n      ')
                  ScVariableDefinition: first
                    AnnotationsList
                      <empty list>
                    Modifiers
                      <empty list>
                    PsiElement(var)('var')
                    PsiWhiteSpace(' ')
                    ListOfPatterns
                      ReferencePattern: first
                        PsiElement(identifier)('first')
                    PsiWhiteSpace(' ')
                    PsiElement(=)('=')
                    PsiWhiteSpace(' ')
                    BooleanLiteral
                      PsiElement(true)('true')
                  PsiWhiteSpace('\n      ')
                  ForStatement
                    PsiElement(for)('for')
                    PsiElement(()('(')
                    Enumerators
                      Generator
                        ReferencePattern: chunk
                          PsiElement(identifier)('chunk')
                        PsiWhiteSpace(' ')
                        PsiElement(<-)('<-')
                        PsiWhiteSpace(' ')
                        ReferenceExpression: patternChunks
                          PsiElement(identifier)('patternChunks')
                    PsiElement())(')')
                    PsiWhiteSpace(' ')
                    BlockExpression
                      PsiElement({)('{')
                      PsiWhiteSpace('\n        ')
                      IfStatement
                        PsiElement(if)('if')
                        PsiWhiteSpace(' ')
                        PsiElement(()('(')
                        ReferenceExpression: first
                          PsiElement(identifier)('first')
                        PsiElement())(')')
                        PsiWhiteSpace(' ')
                        AssignStatement
                          ReferenceExpression: first
                            PsiElement(identifier)('first')
                          PsiWhiteSpace(' ')
                          PsiElement(=)('=')
                          PsiWhiteSpace(' ')
                          BooleanLiteral
                            PsiElement(false)('false')
                        PsiWhiteSpace('\n        ')
                        PsiElement(else)('else')
                        PsiWhiteSpace(' ')
                        BlockExpression
                          PsiElement({)('{')
                          PsiWhiteSpace('\n          ')
                          AssignStatement
                            MethodCall
                              ReferenceExpression: arr
                                PsiElement(identifier)('arr')
                              ArgumentList
                                PsiElement(()('(')
                                ReferenceExpression: i
                                  PsiElement(identifier)('i')
                                PsiElement())(')')
                            PsiWhiteSpace(' ')
                            PsiElement(=)('=')
                            PsiWhiteSpace(' ')
                            IntegerLiteral
                              PsiElement(identifier)('-')
                              PsiElement(integer)('1')
                          PsiWhiteSpace('\n          ')
                          InfixExpression
                            ReferenceExpression: i
                              PsiElement(identifier)('i')
                            PsiWhiteSpace(' ')
                            ReferenceExpression: +=
                              PsiElement(identifier)('+=')
                            PsiWhiteSpace(' ')
                            IntegerLiteral
                              PsiElement(integer)('1')
                          PsiWhiteSpace('\n        ')
                          PsiElement(})('}')
                      PsiWhiteSpace('\n        ')
                      ForStatement
                        PsiElement(for)('for')
                        PsiElement(()('(')
                        Enumerators
                          Generator
                            ReferencePattern: c
                              PsiElement(identifier)('c')
                            PsiWhiteSpace(' ')
                            PsiElement(<-)('<-')
                            PsiWhiteSpace(' ')
                            ReferenceExpression: chunk
                              PsiElement(identifier)('chunk')
                        PsiElement())(')')
                        PsiWhiteSpace(' ')
                        BlockExpression
                          PsiElement({)('{')
                          PsiWhiteSpace('\n          ')
                          AssignStatement
                            MethodCall
                              ReferenceExpression: arr
                                PsiElement(identifier)('arr')
                              ArgumentList
                                PsiElement(()('(')
                                ReferenceExpression: i
                                  PsiElement(identifier)('i')
                                PsiElement())(')')
                            PsiWhiteSpace(' ')
                            PsiElement(=)('=')
                            PsiWhiteSpace(' ')
                            ReferenceExpression: c.toShort
                              ReferenceExpression: c
                                PsiElement(identifier)('c')
                              PsiElement(.)('.')
                              PsiElement(identifier)('toShort')
                          PsiWhiteSpace('\n          ')
                          InfixExpression
                            ReferenceExpression: i
                              PsiElement(identifier)('i')
                            PsiWhiteSpace(' ')
                            ReferenceExpression: +=
                              PsiElement(identifier)('+=')
                            PsiWhiteSpace(' ')
                            IntegerLiteral
                              PsiElement(integer)('1')
                          PsiWhiteSpace('\n        ')
                          PsiElement(})('}')
                      PsiWhiteSpace('\n      ')
                      PsiElement(})('}')
                  PsiWhiteSpace('\n      ')
                  ReferenceExpression: arr
                    PsiElement(identifier)('arr')
                  PsiWhiteSpace('\n    ')
                  PsiElement(})('}')
              PsiWhiteSpace('\n\n    ')
              ScPatternDefinition: matchIndices
                PsiComment(comment)('// Lookup table for each character in the pattern to check whether or not')
                PsiWhiteSpace('\n    ')
                PsiComment(comment)('// it refers to a glob wildcard; a non-negative integer indicates which')
                PsiWhiteSpace('\n    ')
                PsiComment(comment)('// glob wildcard it represents, while -1 means it doesn't represent any')
                PsiWhiteSpace('\n    ')
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(val)('val')
                PsiWhiteSpace(' ')
                ListOfPatterns
                  ReferencePattern: matchIndices
                    PsiElement(identifier)('matchIndices')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                BlockExpression
                  PsiElement({)('{')
                  PsiWhiteSpace('\n      ')
                  ScPatternDefinition: arr
                    AnnotationsList
                      <empty list>
                    Modifiers
                      <empty list>
                    PsiElement(val)('val')
                    PsiWhiteSpace(' ')
                    ListOfPatterns
                      ReferencePattern: arr
                        PsiElement(identifier)('arr')
                    PsiWhiteSpace(' ')
                    PsiElement(=)('=')
                    PsiWhiteSpace(' ')
                    MethodCall
                      MethodCall
                        ReferenceExpression: Array.fill
                          ReferenceExpression: Array
                            PsiElement(identifier)('Array')
                          PsiElement(.)('.')
                          PsiElement(identifier)('fill')
                        ArgumentList
                          PsiElement(()('(')
                          InfixExpression
                            ReferenceExpression: patternLength
                              PsiElement(identifier)('patternLength')
                            PsiWhiteSpace(' ')
                            ReferenceExpression: +
                              PsiElement(identifier)('+')
                            PsiWhiteSpace(' ')
                            IntegerLiteral
                              PsiElement(integer)('1')
                          PsiElement())(')')
                      ArgumentList
                        PsiElement(()('(')
                        IntegerLiteral
                          PsiElement(identifier)('-')
                          PsiElement(integer)('1')
                        PsiElement())(')')
                  PsiWhiteSpace('\n      ')
                  ScVariableDefinition: i
                    AnnotationsList
                      <empty list>
                    Modifiers
                      <empty list>
                    PsiElement(var)('var')
                    PsiWhiteSpace(' ')
                    ListOfPatterns
                      ReferencePattern: i
                        PsiElement(identifier)('i')
                    PsiWhiteSpace(' ')
                    PsiElement(=)('=')
                    PsiWhiteSpace(' ')
                    IntegerLiteral
                      PsiElement(integer)('0')
                  PsiWhiteSpace('\n      ')
                  ScVariableDefinition: j
                    AnnotationsList
                      <empty list>
                    Modifiers
                      <empty list>
                    PsiElement(var)('var')
                    PsiWhiteSpace(' ')
                    ListOfPatterns
                      ReferencePattern: j
                        PsiElement(identifier)('j')
                    PsiWhiteSpace(' ')
                    PsiElement(=)('=')
                    PsiWhiteSpace(' ')
                    IntegerLiteral
                      PsiElement(integer)('0')
                  PsiWhiteSpace('\n      ')
                  ForStatement
                    PsiElement(for)('for')
                    PsiElement(()('(')
                    Enumerators
                      Generator
                        ReferencePattern: chunk
                          PsiElement(identifier)('chunk')
                        PsiWhiteSpace(' ')
                        PsiElement(<-)('<-')
                        PsiWhiteSpace(' ')
                        ReferenceExpression: patternChunks
                          PsiElement(identifier)('patternChunks')
                    PsiElement())(')')
                    PsiWhiteSpace(' ')
                    BlockExpression
                      PsiElement({)('{')
                      PsiWhiteSpace('\n        ')
                      IfStatement
                        PsiElement(if)('if')
                        PsiWhiteSpace(' ')
                        PsiElement(()('(')
                        InfixExpression
                          ReferenceExpression: j
                            PsiElement(identifier)('j')
                          PsiWhiteSpace(' ')
                          ReferenceExpression: <
                            PsiElement(identifier)('<')
                          PsiWhiteSpace(' ')
                          ReferenceExpression: numWildcards
                            PsiElement(identifier)('numWildcards')
                        PsiElement())(')')
                        PsiWhiteSpace(' ')
                        BlockExpression
                          PsiElement({)('{')
                          PsiWhiteSpace('\n          ')
                          InfixExpression
                            ReferenceExpression: i
                              PsiElement(identifier)('i')
                            PsiWhiteSpace(' ')
                            ReferenceExpression: +=
                              PsiElement(identifier)('+=')
                            PsiWhiteSpace(' ')
                            ReferenceExpression: chunk.length
                              ReferenceExpression: chunk
                                PsiElement(identifier)('chunk')
                              PsiElement(.)('.')
                              PsiElement(identifier)('length')
                          PsiWhiteSpace('\n          ')
                          AssignStatement
                            MethodCall
                              ReferenceExpression: arr
                                PsiElement(identifier)('arr')
                              ArgumentList
                                PsiElement(()('(')
                                ReferenceExpression: i
                                  PsiElement(identifier)('i')
                                PsiElement())(')')
                            PsiWhiteSpace(' ')
                            PsiElement(=)('=')
                            PsiWhiteSpace(' ')
                            ReferenceExpression: j
                              PsiElement(identifier)('j')
                          PsiWhiteSpace('\n          ')
                          InfixExpression
                            ReferenceExpression: i
                              PsiElement(identifier)('i')
                            PsiWhiteSpace(' ')
                            ReferenceExpression: +=
                              PsiElement(identifier)('+=')
                            PsiWhiteSpace(' ')
                            IntegerLiteral
                              PsiElement(integer)('1')
                          PsiWhiteSpace('\n          ')
                          InfixExpression
                            ReferenceExpression: j
                              PsiElement(identifier)('j')
                            PsiWhiteSpace(' ')
                            ReferenceExpression: +=
                              PsiElement(identifier)('+=')
                            PsiWhiteSpace(' ')
                            IntegerLiteral
                              PsiElement(integer)('1')
                          PsiWhiteSpace('\n        ')
                          PsiElement(})('}')
                      PsiWhiteSpace('\n      ')
                      PsiElement(})('}')
                  PsiWhiteSpace('\n      ')
                  ReferenceExpression: arr
                    PsiElement(identifier)('arr')
                  PsiWhiteSpace('\n    ')
                  PsiElement(})('}')
              PsiWhiteSpace('\n\n    ')
              WhileStatement
                PsiElement(while)('while')
                PsiElement(()('(')
                InfixExpression
                  InfixExpression
                    ReferenceExpression: patternIndex
                      PsiElement(identifier)('patternIndex')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: <
                      PsiElement(identifier)('<')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: patternLength
                      PsiElement(identifier)('patternLength')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: ||
                    PsiElement(identifier)('||')
                  PsiWhiteSpace(' ')
                  InfixExpression
                    ReferenceExpression: inputIndex
                      PsiElement(identifier)('inputIndex')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: <
                      PsiElement(identifier)('<')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: nameLength
                      PsiElement(identifier)('nameLength')
                PsiElement())(')')
                PsiWhiteSpace(' ')
                BlockExpression
                  PsiElement({)('{')
                  PsiWhiteSpace('\n      ')
                  MatchStatement
                    MethodCall
                      ReferenceExpression: matchIndices
                        PsiElement(identifier)('matchIndices')
                      ArgumentList
                        PsiElement(()('(')
                        ReferenceExpression: patternIndex
                          PsiElement(identifier)('patternIndex')
                        PsiElement())(')')
                    PsiWhiteSpace(' ')
                    PsiElement(match)('match')
                    PsiWhiteSpace(' ')
                    PsiElement({)('{')
                    PsiWhiteSpace('\n        ')
                    CaseClauses
                      CaseClause
                        PsiElement(case)('case')
                        PsiWhiteSpace(' ')
                        LiteralPattern
                          IntegerLiteral
                            PsiElement(identifier)('-')
                            PsiElement(integer)('1')
                        PsiWhiteSpace(' ')
                        PsiElement(=>)('=>')
                        BlockOfExpressions
                          <empty list>
                      PsiWhiteSpace(' ')
                      PsiComment(comment)('// do nothing')
                      PsiWhiteSpace('\n        ')
                      CaseClause
                        PsiElement(case)('case')
                        PsiWhiteSpace(' ')
                        ReferencePattern: n
                          PsiElement(identifier)('n')
                        PsiWhiteSpace(' ')
                        PsiElement(=>)('=>')
                        PsiWhiteSpace('\n          ')
                        BlockOfExpressions
                          AssignStatement
                            MethodCall
                              ReferenceExpression: matchStarts
                                PsiElement(identifier)('matchStarts')
                              ArgumentList
                                PsiElement(()('(')
                                ReferenceExpression: n
                                  PsiElement(identifier)('n')
                                PsiElement())(')')
                            PsiWhiteSpace(' ')
                            PsiElement(=)('=')
                            PsiWhiteSpace(' ')
                            MatchStatement
                              MethodCall
                                ReferenceExpression: matchStarts
                                  PsiElement(identifier)('matchStarts')
                                ArgumentList
                                  PsiElement(()('(')
                                  ReferenceExpression: n
                                    PsiElement(identifier)('n')
                                  PsiElement())(')')
                              PsiWhiteSpace(' ')
                              PsiElement(match)('match')
                              PsiWhiteSpace(' ')
                              PsiElement({)('{')
                              PsiWhiteSpace('\n            ')
                              CaseClauses
                                CaseClause
                                  PsiElement(case)('case')
                                  PsiWhiteSpace(' ')
                                  LiteralPattern
                                    IntegerLiteral
                                      PsiElement(identifier)('-')
                                      PsiElement(integer)('1')
                                  PsiWhiteSpace(' ')
                                  PsiElement(=>)('=>')
                                  PsiWhiteSpace(' ')
                                  BlockOfExpressions
                                    ReferenceExpression: inputIndex
                                      PsiElement(identifier)('inputIndex')
                                PsiWhiteSpace('\n            ')
                                CaseClause
                                  PsiElement(case)('case')
                                  PsiWhiteSpace(' ')
                                  ReferencePattern: s
                                    PsiElement(identifier)('s')
                                  PsiWhiteSpace(' ')
                                  PsiElement(=>)('=>')
                                  PsiWhiteSpace(' ')
                                  BlockOfExpressions
                                    MethodCall
                                      ReferenceExpression: math.min
                                        ReferenceExpression: math
                                          PsiElement(identifier)('math')
                                        PsiElement(.)('.')
                                        PsiElement(identifier)('min')
                                      ArgumentList
                                        PsiElement(()('(')
                                        ReferenceExpression: s
                                          PsiElement(identifier)('s')
                                        PsiElement(,)(',')
                                        PsiWhiteSpace(' ')
                                        ReferenceExpression: inputIndex
                                          PsiElement(identifier)('inputIndex')
                                        PsiElement())(')')
                              PsiWhiteSpace('\n          ')
                              PsiElement(})('}')
                          PsiWhiteSpace('\n          ')
                          AssignStatement
                            MethodCall
                              ReferenceExpression: matchEnds
                                PsiElement(identifier)('matchEnds')
                              ArgumentList
                                PsiElement(()('(')
                                ReferenceExpression: n
                                  PsiElement(identifier)('n')
                                PsiElement())(')')
                            PsiWhiteSpace(' ')
                            PsiElement(=)('=')
                            PsiWhiteSpace(' ')
                            MatchStatement
                              MethodCall
                                ReferenceExpression: matchEnds
                                  PsiElement(identifier)('matchEnds')
                                ArgumentList
                                  PsiElement(()('(')
                                  ReferenceExpression: n
                                    PsiElement(identifier)('n')
                                  PsiElement())(')')
                              PsiWhiteSpace(' ')
                              PsiElement(match)('match')
                              PsiWhiteSpace(' ')
                              PsiElement({)('{')
                              PsiWhiteSpace('\n            ')
                              CaseClauses
                                CaseClause
                                  PsiElement(case)('case')
                                  PsiWhiteSpace(' ')
                                  LiteralPattern
                                    IntegerLiteral
                                      PsiElement(identifier)('-')
                                      PsiElement(integer)('1')
                                  PsiWhiteSpace(' ')
                                  PsiElement(=>)('=>')
                                  PsiWhiteSpace(' ')
                                  BlockOfExpressions
                                    ReferenceExpression: inputIndex
                                      PsiElement(identifier)('inputIndex')
                                PsiWhiteSpace('\n            ')
                                CaseClause
                                  PsiElement(case)('case')
                                  PsiWhiteSpace(' ')
                                  ReferencePattern: s
                                    PsiElement(identifier)('s')
                                  PsiWhiteSpace(' ')
                                  PsiElement(=>)('=>')
                                  PsiWhiteSpace(' ')
                                  BlockOfExpressions
                                    MethodCall
                                      ReferenceExpression: math.max
                                        ReferenceExpression: math
                                          PsiElement(identifier)('math')
                                        PsiElement(.)('.')
                                        PsiElement(identifier)('max')
                                      ArgumentList
                                        PsiElement(()('(')
                                        ReferenceExpression: s
                                          PsiElement(identifier)('s')
                                        PsiElement(,)(',')
                                        PsiWhiteSpace(' ')
                                        ReferenceExpression: inputIndex
                                          PsiElement(identifier)('inputIndex')
                                        PsiElement())(')')
                              PsiWhiteSpace('\n          ')
                              PsiElement(})('}')
                    PsiWhiteSpace('\n      ')
                    PsiElement(})('}')
                  PsiWhiteSpace('\n\n      ')
                  ScPatternDefinition: continue
                    AnnotationsList
                      <empty list>
                    Modifiers
                      <empty list>
                    PsiElement(val)('val')
                    PsiWhiteSpace(' ')
                    ListOfPatterns
                      ReferencePattern: continue
                        PsiElement(identifier)('continue')
                    PsiWhiteSpace(' ')
                    PsiElement(=)('=')
                    PsiWhiteSpace(' ')
                    IfStatement
                      PsiElement(if)('if')
                      PsiWhiteSpace(' ')
                      PsiElement(()('(')
                      InfixExpression
                        ReferenceExpression: patternIndex
                          PsiElement(identifier)('patternIndex')
                        PsiWhiteSpace(' ')
                        ReferenceExpression: <
                          PsiElement(identifier)('<')
                        PsiWhiteSpace(' ')
                        ReferenceExpression: patternLength
                          PsiElement(identifier)('patternLength')
                      PsiElement())(')')
                      PsiWhiteSpace(' ')
                      BlockExpression
                        PsiElement({)('{')
                        PsiWhiteSpace('\n        ')
                        ScPatternDefinition: c
                          AnnotationsList
                            <empty list>
                          Modifiers
                            <empty list>
                          PsiElement(val)('val')
                          PsiWhiteSpace(' ')
                          ListOfPatterns
                            ReferencePattern: c
                              PsiElement(identifier)('c')
                          PsiWhiteSpace(' ')
                          PsiElement(=)('=')
                          PsiWhiteSpace(' ')
                          MethodCall
                            ReferenceExpression: pattern
                              PsiElement(identifier)('pattern')
                            ArgumentList
                              PsiElement(()('(')
                              ReferenceExpression: patternIndex
                                PsiElement(identifier)('patternIndex')
                              PsiElement())(')')
                        PsiWhiteSpace('\n        ')
                        MatchStatement
                          ReferenceExpression: c
                            PsiElement(identifier)('c')
                          PsiWhiteSpace(' ')
                          PsiElement(match)('match')
                          PsiWhiteSpace(' ')
                          PsiElement({)('{')
                          PsiWhiteSpace('\n          ')
                          CaseClauses
                            CaseClause
                              PsiElement(case)('case')
                              PsiWhiteSpace(' ')
                              LiteralPattern
                                IntegerLiteral
                                  PsiElement(identifier)('-')
                                  PsiElement(integer)('1')
                              PsiWhiteSpace(' ')
                              PsiElement(=>)('=>')
                              PsiWhiteSpace('  ')
                              PsiComment(comment)('// zero-or-more-character wildcard')
                              PsiWhiteSpace('\n            ')
                              PsiComment(comment)('// Try to match at nx. If that doesn't work out, restart at nx+1 next.')
                              PsiWhiteSpace('\n            ')
                              BlockOfExpressions
                                AssignStatement
                                  ReferenceExpression: nextPatternIndex
                                    PsiElement(identifier)('nextPatternIndex')
                                  PsiWhiteSpace(' ')
                                  PsiElement(=)('=')
                                  PsiWhiteSpace(' ')
                                  ReferenceExpression: patternIndex
                                    PsiElement(identifier)('patternIndex')
                                PsiWhiteSpace('\n            ')
                                AssignStatement
                                  ReferenceExpression: nextInputIndex
                                    PsiElement(identifier)('nextInputIndex')
                                  PsiWhiteSpace(' ')
                                  PsiElement(=)('=')
                                  PsiWhiteSpace(' ')
                                  InfixExpression
                                    ReferenceExpression: inputIndex
                                      PsiElement(identifier)('inputIndex')
                                    PsiWhiteSpace(' ')
                                    ReferenceExpression: +
                                      PsiElement(identifier)('+')
                                    PsiWhiteSpace(' ')
                                    IntegerLiteral
                                      PsiElement(integer)('1')
                                PsiWhiteSpace('\n            ')
                                InfixExpression
                                  ReferenceExpression: patternIndex
                                    PsiElement(identifier)('patternIndex')
                                  PsiWhiteSpace(' ')
                                  ReferenceExpression: +=
                                    PsiElement(identifier)('+=')
                                  PsiWhiteSpace(' ')
                                  IntegerLiteral
                                    PsiElement(integer)('1')
                                PsiWhiteSpace('\n            ')
                                BooleanLiteral
                                  PsiElement(true)('true')
                            PsiWhiteSpace('\n          ')
                            CaseClause
                              PsiElement(case)('case')
                              PsiWhiteSpace(' ')
                              WildcardPattern
                                PsiElement(_)('_')
                              PsiWhiteSpace(' ')
                              PsiElement(=>)('=>')
                              PsiWhiteSpace(' ')
                              PsiComment(comment)('// ordinary character')
                              PsiWhiteSpace('\n            ')
                              BlockOfExpressions
                                IfStatement
                                  PsiElement(if)('if')
                                  PsiWhiteSpace(' ')
                                  PsiElement(()('(')
                                  InfixExpression
                                    InfixExpression
                                      ReferenceExpression: inputIndex
                                        PsiElement(identifier)('inputIndex')
                                      PsiWhiteSpace(' ')
                                      ReferenceExpression: <
                                        PsiElement(identifier)('<')
                                      PsiWhiteSpace(' ')
                                      ReferenceExpression: nameLength
                                        PsiElement(identifier)('nameLength')
                                    PsiWhiteSpace(' ')
                                    ReferenceExpression: &&
                                      PsiElement(identifier)('&&')
                                    PsiWhiteSpace(' ')
                                    InfixExpression
                                      MethodCall
                                        ReferenceExpression: input
                                          PsiElement(identifier)('input')
                                        ArgumentList
                                          PsiElement(()('(')
                                          ReferenceExpression: inputIndex
                                            PsiElement(identifier)('inputIndex')
                                          PsiElement())(')')
                                      PsiWhiteSpace(' ')
                                      ReferenceExpression: ==
                                        PsiElement(identifier)('==')
                                      PsiWhiteSpace(' ')
                                      ReferenceExpression: c
                                        PsiElement(identifier)('c')
                                  PsiElement())(')')
                                  PsiWhiteSpace(' ')
                                  BlockExpression
                                    PsiElement({)('{')
                                    PsiWhiteSpace('\n              ')
                                    InfixExpression
                                      ReferenceExpression: patternIndex
                                        PsiElement(identifier)('patternIndex')
                                      PsiWhiteSpace(' ')
                                      ReferenceExpression: +=
                                        PsiElement(identifier)('+=')
                                      PsiWhiteSpace(' ')
                                      IntegerLiteral
                                        PsiElement(integer)('1')
                                    PsiWhiteSpace('\n              ')
                                    InfixExpression
                                      ReferenceExpression: inputIndex
                                        PsiElement(identifier)('inputIndex')
                                      PsiWhiteSpace(' ')
                                      ReferenceExpression: +=
                                        PsiElement(identifier)('+=')
                                      PsiWhiteSpace(' ')
                                      IntegerLiteral
                                        PsiElement(integer)('1')
                                    PsiWhiteSpace('\n              ')
                                    BooleanLiteral
                                      PsiElement(true)('true')
                                    PsiWhiteSpace('\n            ')
                                    PsiElement(})('}')
                                  PsiWhiteSpace(' ')
                                  PsiElement(else)('else')
                                  PsiWhiteSpace(' ')
                                  BlockExpression
                                    PsiElement({)('{')
                                    PsiWhiteSpace('\n              ')
                                    BooleanLiteral
                                      PsiElement(false)('false')
                                    PsiWhiteSpace('\n            ')
                                    PsiElement(})('}')
                          PsiWhiteSpace('\n        ')
                          PsiElement(})('}')
                        PsiWhiteSpace('\n      ')
                        PsiElement(})('}')
                      PsiWhiteSpace(' ')
                      PsiElement(else)('else')
                      PsiWhiteSpace(' ')
                      BooleanLiteral
                        PsiElement(false)('false')
                  PsiWhiteSpace('\n\n      ')
                  PsiComment(comment)('// Mismatch. Maybe restart.')
                  PsiWhiteSpace('\n      ')
                  IfStatement
                    PsiElement(if)('if')
                    PsiWhiteSpace(' ')
                    PsiElement(()('(')
                    PrefixExpression
                      ReferenceExpression: !
                        PsiElement(identifier)('!')
                      ReferenceExpression: continue
                        PsiElement(identifier)('continue')
                    PsiElement())(')')
                    PsiWhiteSpace(' ')
                    BlockExpression
                      PsiElement({)('{')
                      PsiWhiteSpace('\n        ')
                      IfStatement
                        PsiElement(if)('if')
                        PsiWhiteSpace(' ')
                        PsiElement(()('(')
                        InfixExpression
                          InfixExpression
                            IntegerLiteral
                              PsiElement(integer)('0')
                            PsiWhiteSpace(' ')
                            ReferenceExpression: <
                              PsiElement(identifier)('<')
                            PsiWhiteSpace(' ')
                            ReferenceExpression: nextInputIndex
                              PsiElement(identifier)('nextInputIndex')
                          PsiWhiteSpace(' ')
                          ReferenceExpression: &&
                            PsiElement(identifier)('&&')
                          PsiWhiteSpace(' ')
                          InfixExpression
                            ReferenceExpression: nextInputIndex
                              PsiElement(identifier)('nextInputIndex')
                            PsiWhiteSpace(' ')
                            ReferenceExpression: <=
                              PsiElement(identifier)('<=')
                            PsiWhiteSpace(' ')
                            ReferenceExpression: nameLength
                              PsiElement(identifier)('nameLength')
                        PsiElement())(')')
                        PsiWhiteSpace(' ')
                        BlockExpression
                          PsiElement({)('{')
                          PsiWhiteSpace('\n          ')
                          AssignStatement
                            ReferenceExpression: patternIndex
                              PsiElement(identifier)('patternIndex')
                            PsiWhiteSpace(' ')
                            PsiElement(=)('=')
                            PsiWhiteSpace(' ')
                            ReferenceExpression: nextPatternIndex
                              PsiElement(identifier)('nextPatternIndex')
                          PsiWhiteSpace('\n          ')
                          AssignStatement
                            ReferenceExpression: inputIndex
                              PsiElement(identifier)('inputIndex')
                            PsiWhiteSpace(' ')
                            PsiElement(=)('=')
                            PsiWhiteSpace(' ')
                            ReferenceExpression: nextInputIndex
                              PsiElement(identifier)('nextInputIndex')
                          PsiWhiteSpace('\n        ')
                          PsiElement(})('}')
                        PsiWhiteSpace(' ')
                        PsiElement(else)('else')
                        PsiWhiteSpace(' ')
                        BlockExpression
                          PsiElement({)('{')
                          PsiWhiteSpace('\n          ')
                          ReturnStatement
                            PsiElement(return)('return')
                            PsiWhiteSpace(' ')
                            ReferenceExpression: None
                              PsiElement(identifier)('None')
                          PsiWhiteSpace('\n        ')
                          PsiElement(})('}')
                      PsiWhiteSpace('\n      ')
                      PsiElement(})('}')
                  PsiWhiteSpace('\n    ')
                  PsiElement(})('}')
              PsiWhiteSpace('\n\n    ')
              PsiComment(comment)('// Matched all of pattern to all of name. Success.')
              PsiWhiteSpace('\n    ')
              MethodCall
                ReferenceExpression: Some
                  PsiElement(identifier)('Some')
                ArgumentList
                  PsiElement(()('(')
                  MethodCall
                    ReferenceExpression: collection.immutable.ArraySeq.unsafeWrapArray
                      ReferenceExpression: collection.immutable.ArraySeq
                        ReferenceExpression: collection.immutable
                          ReferenceExpression: collection
                            PsiElement(identifier)('collection')
                          PsiElement(.)('.')
                          PsiElement(identifier)('immutable')
                        PsiElement(.)('.')
                        PsiElement(identifier)('ArraySeq')
                      PsiElement(.)('.')
                      PsiElement(identifier)('unsafeWrapArray')
                    ArgumentList
                      PsiElement(()('(')
                      PsiWhiteSpace('\n      ')
                      MethodCall
                        MethodCall
                          ReferenceExpression: Array.tabulate
                            ReferenceExpression: Array
                              PsiElement(identifier)('Array')
                            PsiElement(.)('.')
                            PsiElement(identifier)('tabulate')
                          ArgumentList
                            PsiElement(()('(')
                            InfixExpression
                              ReferenceExpression: patternChunks.length
                                ReferenceExpression: patternChunks
                                  PsiElement(identifier)('patternChunks')
                                PsiElement(.)('.')
                                PsiElement(identifier)('length')
                              PsiWhiteSpace(' ')
                              ReferenceExpression: -
                                PsiElement(identifier)('-')
                              PsiWhiteSpace(' ')
                              IntegerLiteral
                                PsiElement(integer)('1')
                            PsiElement())(')')
                        ArgumentList
                          PsiElement(()('(')
                          FunctionExpression
                            Parameters
                              ParametersClause
                                Parameter: n
                                  PsiElement(identifier)('n')
                            PsiWhiteSpace(' ')
                            PsiElement(=>)('=>')
                            PsiWhiteSpace(' ')
                            MethodCall
                              ReferenceExpression: input.slice
                                ReferenceExpression: input
                                  PsiElement(identifier)('input')
                                PsiElement(.)('.')
                                PsiElement(identifier)('slice')
                              ArgumentList
                                PsiElement(()('(')
                                MethodCall
                                  ReferenceExpression: matchStarts
                                    PsiElement(identifier)('matchStarts')
                                  ArgumentList
                                    PsiElement(()('(')
                                    ReferenceExpression: n
                                      PsiElement(identifier)('n')
                                    PsiElement())(')')
                                PsiElement(,)(',')
                                PsiWhiteSpace(' ')
                                MethodCall
                                  ReferenceExpression: matchEnds
                                    PsiElement(identifier)('matchEnds')
                                  ArgumentList
                                    PsiElement(()('(')
                                    ReferenceExpression: n
                                      PsiElement(identifier)('n')
                                    PsiElement())(')')
                                PsiElement())(')')
                          PsiElement())(')')
                      PsiWhiteSpace('\n    ')
                      PsiElement())(')')
                  PsiElement())(')')
              PsiWhiteSpace('\n  ')
              PsiElement(})('}')
          PsiWhiteSpace('\n\n  ')
          ScClass: InvalidEscapeException
            DocComment
              ScPsiDocToken(DOC_COMMENT_START)('/**')
              ScDocParagraph
                ScPsiDocToken(DOC_WHITESPACE)(' ')
                ScPsiDocToken(DOC_COMMENT_DATA)('An exception that is thrown if a string contains a backslash (')
                DocSyntaxElement 8
                  ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                  ScPsiDocToken(DOC_COMMENT_DATA)('\')
                  ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                ScPsiDocToken(DOC_COMMENT_DATA)(') character')
                ScPsiDocToken(DOC_WHITESPACE)('\n   ')
                ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
                ScPsiDocToken(DOC_WHITESPACE)('  ')
                ScPsiDocToken(DOC_COMMENT_DATA)('that does not start a valid escape sequence.')
                ScPsiDocToken(DOC_WHITESPACE)('\n   ')
                ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
              DocTag
                ScPsiDocToken(DOC_WHITESPACE)('  ')
                ScPsiDocToken(DOC_TAG_NAME)('@param')
                ScPsiDocToken(DOC_WHITESPACE)('  ')
                ScalaDocTagValue: str
                  ScPsiDocToken(DOC_TAG_VALUE_TOKEN)('str')
                ScDocParagraph
                  ScPsiDocToken(DOC_WHITESPACE)('   ')
                  ScPsiDocToken(DOC_COMMENT_DATA)('The offending string')
                  ScPsiDocToken(DOC_WHITESPACE)('\n   ')
                  ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
              DocTag
                ScPsiDocToken(DOC_WHITESPACE)('  ')
                ScPsiDocToken(DOC_TAG_NAME)('@param')
                ScPsiDocToken(DOC_WHITESPACE)('  ')
                ScalaDocTagValue: index
                  ScPsiDocToken(DOC_TAG_VALUE_TOKEN)('index')
                ScDocParagraph
                  ScPsiDocToken(DOC_WHITESPACE)('   ')
                  ScPsiDocToken(DOC_COMMENT_DATA)('The index of the offending backslash character in ')
                  DocSyntaxElement 8
                    ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                    ScPsiDocToken(DOC_COMMENT_DATA)('str')
                    ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                  ScPsiDocToken(DOC_COMMENT_DATA)('.')
                  ScPsiDocToken(DOC_WHITESPACE)('\n   ')
              ScPsiDocToken(DOC_COMMENT_END)('*/')
            PsiWhiteSpace('\n  ')
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(class)('class')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('InvalidEscapeException')
            PrimaryConstructor
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              Parameters
                ParametersClause
                  PsiElement(()('(')
                  ClassParameter: str
                    AnnotationsList
                      <empty list>
                    Modifiers
                      <empty list>
                    PsiElement(identifier)('str')
                    PsiElement(:)(':')
                    PsiWhiteSpace(' ')
                    ParameterType
                      SimpleType: String
                        CodeReferenceElement: String
                          PsiElement(identifier)('String')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  ClassParameter: index
                    AnnotationsList
                      <empty list>
                    Modifiers
                      <empty list>
                    PsiElement(val)('val')
                    PsiWhiteSpace(' ')
                    PsiElement(identifier)('index')
                    PsiElement(:)(':')
                    PsiWhiteSpace(' ')
                    ParameterType
                      SimpleType: Int
                        CodeReferenceElement: Int
                          PsiElement(identifier)('Int')
                  PsiElement())(')')
            PsiWhiteSpace(' ')
            ExtendsBlock
              PsiElement(extends)('extends')
              PsiWhiteSpace(' ')
              TemplateParents
                ConstructorInvocation
                  SimpleType: IllegalArgumentException
                    CodeReferenceElement: IllegalArgumentException
                      PsiElement(identifier)('IllegalArgumentException')
                  ArgumentList
                    PsiElement(()('(')
                    PsiWhiteSpace('\n    ')
                    InterpolatedStringLiteral
                      InterpolatedExpressionPrefix: s
                        PsiElement(interpolated string id)('s')
                      PsiElement(interpolated multiline string)('"""invalid escape ')
                      PsiElement(interpolated string injection)('$')
                      BlockExpression
                        PsiElement({)('{')
                        PsiWhiteSpace('\n      ')
                        MethodCall
                          ReferenceExpression: require
                            PsiElement(identifier)('require')
                          ArgumentList
                            PsiElement(()('(')
                            InfixExpression
                              InfixExpression
                                ReferenceExpression: index
                                  PsiElement(identifier)('index')
                                PsiWhiteSpace(' ')
                                ReferenceExpression: >=
                                  PsiElement(identifier)('>=')
                                PsiWhiteSpace(' ')
                                IntegerLiteral
                                  PsiElement(integer)('0')
                              PsiWhiteSpace(' ')
                              ReferenceExpression: &&
                                PsiElement(identifier)('&&')
                              PsiWhiteSpace(' ')
                              InfixExpression
                                ReferenceExpression: index
                                  PsiElement(identifier)('index')
                                PsiWhiteSpace(' ')
                                ReferenceExpression: <
                                  PsiElement(identifier)('<')
                                PsiWhiteSpace(' ')
                                ReferenceExpression: str.length
                                  ReferenceExpression: str
                                    PsiElement(identifier)('str')
                                  PsiElement(.)('.')
                                  PsiElement(identifier)('length')
                            PsiElement())(')')
                        PsiWhiteSpace('\n      ')
                        ScPatternDefinition: ok
                          AnnotationsList
                            <empty list>
                          Modifiers
                            <empty list>
                          PsiElement(val)('val')
                          PsiWhiteSpace(' ')
                          ListOfPatterns
                            ReferencePattern: ok
                              PsiElement(identifier)('ok')
                          PsiWhiteSpace(' ')
                          PsiElement(=)('=')
                          PsiWhiteSpace(' ')
                          InterpolatedStringLiteral
                            InterpolatedExpressionPrefix: s
                              PsiElement(interpolated string id)('s')
                            PsiElement(interpolated multiline string)('"""[\\b, \\t, \\n, \\f, \\r, \\\\, \\", \\', \\uxxxx]')
                            PsiElement(interpolated string end)('"""')
                        PsiWhiteSpace('\n      ')
                        IfStatement
                          PsiElement(if)('if')
                          PsiWhiteSpace(' ')
                          PsiElement(()('(')
                          InfixExpression
                            ReferenceExpression: index
                              PsiElement(identifier)('index')
                            PsiWhiteSpace(' ')
                            ReferenceExpression: ==
                              PsiElement(identifier)('==')
                            PsiWhiteSpace(' ')
                            InfixExpression
                              ReferenceExpression: str.length
                                ReferenceExpression: str
                                  PsiElement(identifier)('str')
                                PsiElement(.)('.')
                                PsiElement(identifier)('length')
                              PsiWhiteSpace(' ')
                              ReferenceExpression: -
                                PsiElement(identifier)('-')
                              PsiWhiteSpace(' ')
                              IntegerLiteral
                                PsiElement(integer)('1')
                          PsiElement())(')')
                          PsiWhiteSpace(' ')
                          StringLiteral
                            PsiElement(string content)('"at terminal"')
                          PsiWhiteSpace(' ')
                          PsiElement(else)('else')
                          PsiWhiteSpace(' ')
                          InterpolatedStringLiteral
                            InterpolatedExpressionPrefix: s
                              PsiElement(interpolated string id)('s')
                            PsiElement(interpolated string)('"'\\')
                            PsiElement(interpolated string injection)('$')
                            BlockExpression
                              PsiElement({)('{')
                              MethodCall
                                ReferenceExpression: str
                                  PsiElement(identifier)('str')
                                ArgumentList
                                  PsiElement(()('(')
                                  InfixExpression
                                    ReferenceExpression: index
                                      PsiElement(identifier)('index')
                                    PsiWhiteSpace(' ')
                                    ReferenceExpression: +
                                      PsiElement(identifier)('+')
                                    PsiWhiteSpace(' ')
                                    IntegerLiteral
                                      PsiElement(integer)('1')
                                  PsiElement())(')')
                              PsiElement(})('}')
                            PsiElement(interpolated string)('' not one of ')
                            PsiElement(interpolated string injection)('$')
                            ReferenceExpression: ok
                              PsiElement(identifier)('ok')
                            PsiElement(interpolated string)(' at')
                            PsiElement(interpolated string end)('"')
                        PsiWhiteSpace('\n    ')
                        PsiElement(})('}')
                      PsiElement(interpolated multiline string)(' index ')
                      PsiElement(interpolated string injection)('$')
                      ReferenceExpression: index
                        PsiElement(identifier)('index')
                      PsiElement(interpolated multiline string)(' in "')
                      PsiElement(interpolated string injection)('$')
                      ReferenceExpression: str
                        PsiElement(identifier)('str')
                      PsiElement(interpolated multiline string)('". Use \\\\ for literal \\.')
                      PsiElement(interpolated string end)('"""')
                    PsiWhiteSpace('\n  ')
                    PsiElement())(')')
          PsiWhiteSpace('\n\n  ')
          ScClass: InvalidUnicodeEscapeException
            AnnotationsList
              <empty list>
            Modifiers
              AccessModifier
                PsiElement(protected)('protected')
                PsiElement([)('[')
                PsiElement(identifier)('scala')
                PsiElement(])(']')
            PsiWhiteSpace(' ')
            PsiElement(class)('class')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('InvalidUnicodeEscapeException')
            PrimaryConstructor
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              Parameters
                ParametersClause
                  PsiElement(()('(')
                  ClassParameter: str
                    AnnotationsList
                      <empty list>
                    Modifiers
                      <empty list>
                    PsiElement(identifier)('str')
                    PsiElement(:)(':')
                    PsiWhiteSpace(' ')
                    ParameterType
                      SimpleType: String
                        CodeReferenceElement: String
                          PsiElement(identifier)('String')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  ClassParameter: escapeStart
                    AnnotationsList
                      <empty list>
                    Modifiers
                      <empty list>
                    PsiElement(val)('val')
                    PsiWhiteSpace(' ')
                    PsiElement(identifier)('escapeStart')
                    PsiElement(:)(':')
                    PsiWhiteSpace(' ')
                    ParameterType
                      SimpleType: Int
                        CodeReferenceElement: Int
                          PsiElement(identifier)('Int')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  ClassParameter: index
                    AnnotationsList
                      <empty list>
                    Modifiers
                      <empty list>
                    PsiElement(val)('val')
                    PsiWhiteSpace(' ')
                    PsiElement(identifier)('index')
                    PsiElement(:)(':')
                    PsiWhiteSpace(' ')
                    ParameterType
                      SimpleType: Int
                        CodeReferenceElement: Int
                          PsiElement(identifier)('Int')
                  PsiElement())(')')
            PsiWhiteSpace(' ')
            ExtendsBlock
              PsiElement(extends)('extends')
              PsiWhiteSpace(' ')
              TemplateParents
                ConstructorInvocation
                  SimpleType: IllegalArgumentException
                    CodeReferenceElement: IllegalArgumentException
                      PsiElement(identifier)('IllegalArgumentException')
                  ArgumentList
                    PsiElement(()('(')
                    PsiWhiteSpace('\n    ')
                    InterpolatedStringLiteral
                      InterpolatedExpressionPrefix: s
                        PsiElement(interpolated string id)('s')
                      PsiElement(interpolated multiline string)('"""invalid unicode escape at index ')
                      PsiElement(interpolated string injection)('$')
                      ReferenceExpression: index
                        PsiElement(identifier)('index')
                      PsiElement(interpolated multiline string)(' of ')
                      PsiElement(interpolated string injection)('$')
                      ReferenceExpression: str
                        PsiElement(identifier)('str')
                      PsiElement(interpolated string end)('"""')
                    PsiWhiteSpace('\n  ')
                    PsiElement())(')')
          PsiWhiteSpace('\n\n  ')
          ScFunctionDefinition: readUEscape
            AnnotationsList
              <empty list>
            Modifiers
              AccessModifier
                PsiElement(private)('private')
                PsiElement([)('[')
                PsiElement(this)('this')
                PsiElement(])(']')
            PsiWhiteSpace(' ')
            PsiElement(def)('def')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('readUEscape')
            Parameters
              ParametersClause
                PsiElement(()('(')
                Parameter: src
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(identifier)('src')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    SimpleType: String
                      CodeReferenceElement: String
                        PsiElement(identifier)('String')
                PsiElement(,)(',')
                PsiWhiteSpace(' ')
                Parameter: startindex
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(identifier)('startindex')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    SimpleType: Int
                      CodeReferenceElement: Int
                        PsiElement(identifier)('Int')
                PsiElement())(')')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            TupleType: (Char, Int)
              PsiElement(()('(')
              TypesList
                SimpleType: Char
                  CodeReferenceElement: Char
                    PsiElement(identifier)('Char')
                PsiElement(,)(',')
                PsiWhiteSpace(' ')
                SimpleType: Int
                  CodeReferenceElement: Int
                    PsiElement(identifier)('Int')
              PsiElement())(')')
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace(' ')
            BlockExpression
              PsiElement({)('{')
              PsiWhiteSpace('\n    ')
              ScPatternDefinition: len
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(val)('val')
                PsiWhiteSpace(' ')
                ListOfPatterns
                  ReferencePattern: len
                    PsiElement(identifier)('len')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                MethodCall
                  ReferenceExpression: src.length
                    ReferenceExpression: src
                      PsiElement(identifier)('src')
                    PsiElement(.)('.')
                    PsiElement(identifier)('length')
                  ArgumentList
                    PsiElement(()('(')
                    PsiElement())(')')
              PsiWhiteSpace('\n    ')
              ScFunctionDefinition: loop
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(def)('def')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('loop')
                Parameters
                  ParametersClause
                    PsiElement(()('(')
                    Parameter: uindex
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(identifier)('uindex')
                      PsiElement(:)(':')
                      PsiWhiteSpace(' ')
                      ParameterType
                        SimpleType: Int
                          CodeReferenceElement: Int
                            PsiElement(identifier)('Int')
                    PsiElement())(')')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                TupleType: (Char, Int)
                  PsiElement(()('(')
                  TypesList
                    SimpleType: Char
                      CodeReferenceElement: Char
                        PsiElement(identifier)('Char')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    SimpleType: Int
                      CodeReferenceElement: Int
                        PsiElement(identifier)('Int')
                  PsiElement())(')')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                BlockExpression
                  PsiElement({)('{')
                  PsiWhiteSpace('\n      ')
                  ScFunctionDefinition: loopCP
                    AnnotationsList
                      <empty list>
                    Modifiers
                      <empty list>
                    PsiElement(def)('def')
                    PsiWhiteSpace(' ')
                    PsiElement(identifier)('loopCP')
                    Parameters
                      ParametersClause
                        PsiElement(()('(')
                        Parameter: dindex
                          AnnotationsList
                            <empty list>
                          Modifiers
                            <empty list>
                          PsiElement(identifier)('dindex')
                          PsiElement(:)(':')
                          PsiWhiteSpace(' ')
                          ParameterType
                            SimpleType: Int
                              CodeReferenceElement: Int
                                PsiElement(identifier)('Int')
                        PsiElement(,)(',')
                        PsiWhiteSpace(' ')
                        Parameter: codepoint
                          AnnotationsList
                            <empty list>
                          Modifiers
                            <empty list>
                          PsiElement(identifier)('codepoint')
                          PsiElement(:)(':')
                          PsiWhiteSpace(' ')
                          ParameterType
                            SimpleType: Int
                              CodeReferenceElement: Int
                                PsiElement(identifier)('Int')
                        PsiElement())(')')
                    PsiElement(:)(':')
                    PsiWhiteSpace(' ')
                    TupleType: (Char, Int)
                      PsiElement(()('(')
                      TypesList
                        SimpleType: Char
                          CodeReferenceElement: Char
                            PsiElement(identifier)('Char')
                        PsiElement(,)(',')
                        PsiWhiteSpace(' ')
                        SimpleType: Int
                          CodeReferenceElement: Int
                            PsiElement(identifier)('Int')
                      PsiElement())(')')
                    PsiWhiteSpace(' ')
                    PsiElement(=)('=')
                    PsiWhiteSpace(' ')
                    BlockExpression
                      PsiElement({)('{')
                      PsiWhiteSpace('\n        ')
                      PsiComment(comment)('//supports BMP + surrogate escapes')
                      PsiWhiteSpace('\n        ')
                      PsiComment(comment)('//but only in four hex-digit code units (uxxxx)')
                      PsiWhiteSpace('\n        ')
                      IfStatement
                        PsiElement(if)('if')
                        PsiElement(()('(')
                        InfixExpression
                          ReferenceExpression: dindex
                            PsiElement(identifier)('dindex')
                          PsiWhiteSpace(' ')
                          ReferenceExpression: >=
                            PsiElement(identifier)('>=')
                          PsiWhiteSpace(' ')
                          IntegerLiteral
                            PsiElement(integer)('4')
                        PsiElement())(')')
                        PsiWhiteSpace(' ')
                        BlockExpression
                          PsiElement({)('{')
                          PsiWhiteSpace('\n          ')
                          ScPatternDefinition: usRead
                            AnnotationsList
                              <empty list>
                            Modifiers
                              <empty list>
                            PsiElement(val)('val')
                            PsiWhiteSpace(' ')
                            ListOfPatterns
                              ReferencePattern: usRead
                                PsiElement(identifier)('usRead')
                            PsiWhiteSpace(' ')
                            PsiElement(=)('=')
                            PsiWhiteSpace(' ')
                            InfixExpression
                              ReferenceExpression: uindex
                                PsiElement(identifier)('uindex')
                              PsiWhiteSpace(' ')
                              ReferenceExpression: -
                                PsiElement(identifier)('-')
                              PsiWhiteSpace(' ')
                              ReferenceExpression: startindex
                                PsiElement(identifier)('startindex')
                          PsiWhiteSpace('\n          ')
                          ScPatternDefinition: digitsRead
                            AnnotationsList
                              <empty list>
                            Modifiers
                              <empty list>
                            PsiElement(val)('val')
                            PsiWhiteSpace(' ')
                            ListOfPatterns
                              ReferencePattern: digitsRead
                                PsiElement(identifier)('digitsRead')
                            PsiWhiteSpace(' ')
                            PsiElement(=)('=')
                            PsiWhiteSpace(' ')
                            ReferenceExpression: dindex
                              PsiElement(identifier)('dindex')
                          PsiWhiteSpace('\n          ')
                          Tuple
                            PsiElement(()('(')
                            GenericCall
                              ReferenceExpression: codepoint.asInstanceOf
                                ReferenceExpression: codepoint
                                  PsiElement(identifier)('codepoint')
                                PsiElement(.)('.')
                                PsiElement(identifier)('asInstanceOf')
                              TypeArgumentsList
                                PsiElement([)('[')
                                SimpleType: Char
                                  CodeReferenceElement: Char
                                    PsiElement(identifier)('Char')
                                PsiElement(])(']')
                            PsiElement(,)(',')
                            PsiWhiteSpace(' ')
                            InfixExpression
                              ReferenceExpression: usRead
                                PsiElement(identifier)('usRead')
                              PsiWhiteSpace(' ')
                              ReferenceExpression: +
                                PsiElement(identifier)('+')
                              PsiWhiteSpace(' ')
                              ReferenceExpression: digitsRead
                                PsiElement(identifier)('digitsRead')
                            PsiElement())(')')
                          PsiWhiteSpace('\n        ')
                          PsiElement(})('}')
                        PsiWhiteSpace('\n        ')
                        PsiElement(else)('else')
                        PsiWhiteSpace(' ')
                        IfStatement
                          PsiElement(if)('if')
                          PsiWhiteSpace(' ')
                          PsiElement(()('(')
                          InfixExpression
                            InfixExpression
                              ReferenceExpression: dindex
                                PsiElement(identifier)('dindex')
                              PsiWhiteSpace(' ')
                              ReferenceExpression: +
                                PsiElement(identifier)('+')
                              PsiWhiteSpace(' ')
                              ReferenceExpression: uindex
                                PsiElement(identifier)('uindex')
                            PsiWhiteSpace(' ')
                            ReferenceExpression: >=
                              PsiElement(identifier)('>=')
                            PsiWhiteSpace(' ')
                            ReferenceExpression: len
                              PsiElement(identifier)('len')
                          PsiElement())(')')
                          PsiWhiteSpace('\n          ')
                          ThrowStatement
                            PsiElement(throw)('throw')
                            PsiWhiteSpace(' ')
                            ScNewTemplateDefinition: <anonymous>
                              PsiElement(new)('new')
                              PsiWhiteSpace(' ')
                              ExtendsBlock
                                TemplateParents
                                  ConstructorInvocation
                                    SimpleType: InvalidUnicodeEscapeException
                                      CodeReferenceElement: InvalidUnicodeEscapeException
                                        PsiElement(identifier)('InvalidUnicodeEscapeException')
                                    ArgumentList
                                      PsiElement(()('(')
                                      ReferenceExpression: src
                                        PsiElement(identifier)('src')
                                      PsiElement(,)(',')
                                      PsiWhiteSpace(' ')
                                      ReferenceExpression: startindex
                                        PsiElement(identifier)('startindex')
                                      PsiElement(,)(',')
                                      PsiWhiteSpace(' ')
                                      InfixExpression
                                        ReferenceExpression: uindex
                                          PsiElement(identifier)('uindex')
                                        PsiWhiteSpace(' ')
                                        ReferenceExpression: +
                                          PsiElement(identifier)('+')
                                        PsiWhiteSpace(' ')
                                        ReferenceExpression: dindex
                                          PsiElement(identifier)('dindex')
                                      PsiElement())(')')
                          PsiWhiteSpace('\n        ')
                          PsiElement(else)('else')
                          PsiWhiteSpace(' ')
                          BlockExpression
                            PsiElement({)('{')
                            PsiWhiteSpace('\n          ')
                            ScPatternDefinition: ch
                              AnnotationsList
                                <empty list>
                              Modifiers
                                <empty list>
                              PsiElement(val)('val')
                              PsiWhiteSpace(' ')
                              ListOfPatterns
                                ReferencePattern: ch
                                  PsiElement(identifier)('ch')
                              PsiWhiteSpace(' ')
                              PsiElement(=)('=')
                              PsiWhiteSpace(' ')
                              MethodCall
                                ReferenceExpression: src
                                  PsiElement(identifier)('src')
                                ArgumentList
                                  PsiElement(()('(')
                                  InfixExpression
                                    ReferenceExpression: dindex
                                      PsiElement(identifier)('dindex')
                                    PsiWhiteSpace(' ')
                                    ReferenceExpression: +
                                      PsiElement(identifier)('+')
                                    PsiWhiteSpace(' ')
                                    ReferenceExpression: uindex
                                      PsiElement(identifier)('uindex')
                                  PsiElement())(')')
                            PsiWhiteSpace('\n          ')
                            ScPatternDefinition: e
                              AnnotationsList
                                <empty list>
                              Modifiers
                                <empty list>
                              PsiElement(val)('val')
                              PsiWhiteSpace(' ')
                              ListOfPatterns
                                ReferencePattern: e
                                  PsiElement(identifier)('e')
                              PsiWhiteSpace(' ')
                              PsiElement(=)('=')
                              PsiWhiteSpace(' ')
                              ReferenceExpression: ch.asDigit
                                ReferenceExpression: ch
                                  PsiElement(identifier)('ch')
                                PsiElement(.)('.')
                                PsiElement(identifier)('asDigit')
                            PsiWhiteSpace('\n          ')
                            IfStatement
                              PsiElement(if)('if')
                              PsiElement(()('(')
                              InfixExpression
                                InfixExpression
                                  ReferenceExpression: e
                                    PsiElement(identifier)('e')
                                  PsiWhiteSpace(' ')
                                  ReferenceExpression: >=
                                    PsiElement(identifier)('>=')
                                  PsiWhiteSpace(' ')
                                  IntegerLiteral
                                    PsiElement(integer)('0')
                                PsiWhiteSpace(' ')
                                ReferenceExpression: &&
                                  PsiElement(identifier)('&&')
                                PsiWhiteSpace(' ')
                                InfixExpression
                                  ReferenceExpression: e
                                    PsiElement(identifier)('e')
                                  PsiWhiteSpace(' ')
                                  ReferenceExpression: <=
                                    PsiElement(identifier)('<=')
                                  PsiWhiteSpace(' ')
                                  IntegerLiteral
                                    PsiElement(integer)('15')
                              PsiElement())(')')
                              PsiWhiteSpace(' ')
                              MethodCall
                                ReferenceExpression: loopCP
                                  PsiElement(identifier)('loopCP')
                                ArgumentList
                                  PsiElement(()('(')
                                  InfixExpression
                                    ReferenceExpression: dindex
                                      PsiElement(identifier)('dindex')
                                    PsiWhiteSpace(' ')
                                    ReferenceExpression: +
                                      PsiElement(identifier)('+')
                                    PsiWhiteSpace(' ')
                                    IntegerLiteral
                                      PsiElement(integer)('1')
                                  PsiElement(,)(',')
                                  PsiWhiteSpace(' ')
                                  InfixExpression
                                    ExpressionInParenthesis
                                      PsiElement(()('(')
                                      InfixExpression
                                        ReferenceExpression: codepoint
                                          PsiElement(identifier)('codepoint')
                                        PsiWhiteSpace(' ')
                                        ReferenceExpression: <<
                                          PsiElement(identifier)('<<')
                                        PsiWhiteSpace(' ')
                                        IntegerLiteral
                                          PsiElement(integer)('4')
                                      PsiElement())(')')
                                    PsiWhiteSpace(' ')
                                    ReferenceExpression: +
                                      PsiElement(identifier)('+')
                                    PsiWhiteSpace(' ')
                                    ReferenceExpression: e
                                      PsiElement(identifier)('e')
                                  PsiElement())(')')
                              PsiWhiteSpace('\n          ')
                              PsiElement(else)('else')
                              PsiWhiteSpace(' ')
                              ThrowStatement
                                PsiElement(throw)('throw')
                                PsiWhiteSpace(' ')
                                ScNewTemplateDefinition: <anonymous>
                                  PsiElement(new)('new')
                                  PsiWhiteSpace(' ')
                                  ExtendsBlock
                                    TemplateParents
                                      ConstructorInvocation
                                        SimpleType: InvalidUnicodeEscapeException
                                          CodeReferenceElement: InvalidUnicodeEscapeException
                                            PsiElement(identifier)('InvalidUnicodeEscapeException')
                                        ArgumentList
                                          PsiElement(()('(')
                                          ReferenceExpression: src
                                            PsiElement(identifier)('src')
                                          PsiElement(,)(',')
                                          PsiWhiteSpace(' ')
                                          ReferenceExpression: startindex
                                            PsiElement(identifier)('startindex')
                                          PsiElement(,)(',')
                                          PsiWhiteSpace(' ')
                                          InfixExpression
                                            ReferenceExpression: uindex
                                              PsiElement(identifier)('uindex')
                                            PsiWhiteSpace(' ')
                                            ReferenceExpression: +
                                              PsiElement(identifier)('+')
                                            PsiWhiteSpace(' ')
                                            ReferenceExpression: dindex
                                              PsiElement(identifier)('dindex')
                                          PsiElement())(')')
                            PsiWhiteSpace('\n        ')
                            PsiElement(})('}')
                      PsiWhiteSpace('\n      ')
                      PsiElement(})('}')
                  PsiWhiteSpace('\n      ')
                  IfStatement
                    PsiElement(if)('if')
                    PsiElement(()('(')
                    InfixExpression
                      ReferenceExpression: uindex
                        PsiElement(identifier)('uindex')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: >=
                        PsiElement(identifier)('>=')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: len
                        PsiElement(identifier)('len')
                    PsiElement())(')')
                    PsiWhiteSpace(' ')
                    ThrowStatement
                      PsiElement(throw)('throw')
                      PsiWhiteSpace(' ')
                      ScNewTemplateDefinition: <anonymous>
                        PsiElement(new)('new')
                        PsiWhiteSpace(' ')
                        ExtendsBlock
                          TemplateParents
                            ConstructorInvocation
                              SimpleType: InvalidUnicodeEscapeException
                                CodeReferenceElement: InvalidUnicodeEscapeException
                                  PsiElement(identifier)('InvalidUnicodeEscapeException')
                              ArgumentList
                                PsiElement(()('(')
                                ReferenceExpression: src
                                  PsiElement(identifier)('src')
                                PsiElement(,)(',')
                                PsiWhiteSpace(' ')
                                ReferenceExpression: startindex
                                  PsiElement(identifier)('startindex')
                                PsiElement(,)(',')
                                PsiWhiteSpace(' ')
                                InfixExpression
                                  ReferenceExpression: uindex
                                    PsiElement(identifier)('uindex')
                                  PsiWhiteSpace(' ')
                                  ReferenceExpression: -
                                    PsiElement(identifier)('-')
                                  PsiWhiteSpace(' ')
                                  IntegerLiteral
                                    PsiElement(integer)('1')
                                PsiElement())(')')
                    PsiWhiteSpace('\n      ')
                    PsiComment(comment)('//allow one or more `u` characters between the')
                    PsiWhiteSpace('\n      ')
                    PsiComment(comment)('//backslash and the code unit')
                    PsiWhiteSpace('\n      ')
                    PsiElement(else)('else')
                    PsiWhiteSpace(' ')
                    IfStatement
                      PsiElement(if)('if')
                      PsiElement(()('(')
                      InfixExpression
                        MethodCall
                          ReferenceExpression: src
                            PsiElement(identifier)('src')
                          ArgumentList
                            PsiElement(()('(')
                            ReferenceExpression: uindex
                              PsiElement(identifier)('uindex')
                            PsiElement())(')')
                        PsiWhiteSpace(' ')
                        ReferenceExpression: ==
                          PsiElement(identifier)('==')
                        PsiWhiteSpace(' ')
                        CharLiteral
                          PsiElement(Character)(''u'')
                      PsiElement())(')')
                      PsiWhiteSpace(' ')
                      MethodCall
                        ReferenceExpression: loop
                          PsiElement(identifier)('loop')
                        ArgumentList
                          PsiElement(()('(')
                          InfixExpression
                            ReferenceExpression: uindex
                              PsiElement(identifier)('uindex')
                            PsiWhiteSpace(' ')
                            ReferenceExpression: +
                              PsiElement(identifier)('+')
                            PsiWhiteSpace(' ')
                            IntegerLiteral
                              PsiElement(integer)('1')
                          PsiElement())(')')
                      PsiWhiteSpace('\n      ')
                      PsiElement(else)('else')
                      PsiWhiteSpace(' ')
                      MethodCall
                        ReferenceExpression: loopCP
                          PsiElement(identifier)('loopCP')
                        ArgumentList
                          PsiElement(()('(')
                          IntegerLiteral
                            PsiElement(integer)('0')
                          PsiElement(,)(',')
                          PsiWhiteSpace(' ')
                          IntegerLiteral
                            PsiElement(integer)('0')
                          PsiElement())(')')
                  PsiWhiteSpace('\n    ')
                  PsiElement(})('}')
              PsiWhiteSpace('\n    ')
              MethodCall
                ReferenceExpression: loop
                  PsiElement(identifier)('loop')
                ArgumentList
                  PsiElement(()('(')
                  ReferenceExpression: startindex
                    PsiElement(identifier)('startindex')
                  PsiElement())(')')
              PsiWhiteSpace('\n  ')
              PsiElement(})('}')
          PsiWhiteSpace('\n\n  ')
          ScFunctionDefinition: treatEscapes
            DocComment
              ScPsiDocToken(DOC_COMMENT_START)('/**')
              ScDocParagraph
                ScPsiDocToken(DOC_WHITESPACE)(' ')
                ScPsiDocToken(DOC_COMMENT_DATA)('Expands standard Scala escape sequences in a string.')
                ScPsiDocToken(DOC_WHITESPACE)('\n   ')
                ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
                ScPsiDocToken(DOC_WHITESPACE)('  ')
                ScPsiDocToken(DOC_COMMENT_DATA)('Escape sequences are:')
                ScPsiDocToken(DOC_WHITESPACE)('\n   ')
                ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
                ScPsiDocToken(DOC_WHITESPACE)('   ')
                ScPsiDocToken(DOC_COMMENT_DATA)('control: ')
                DocSyntaxElement 8
                  ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                  ScPsiDocToken(DOC_COMMENT_DATA)('\b')
                  ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                ScPsiDocToken(DOC_COMMENT_DATA)(', ')
                DocSyntaxElement 8
                  ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                  ScPsiDocToken(DOC_COMMENT_DATA)('\t')
                  ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                ScPsiDocToken(DOC_COMMENT_DATA)(', ')
                DocSyntaxElement 8
                  ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                  ScPsiDocToken(DOC_COMMENT_DATA)('\n')
                  ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                ScPsiDocToken(DOC_COMMENT_DATA)(', ')
                DocSyntaxElement 8
                  ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                  ScPsiDocToken(DOC_COMMENT_DATA)('\f')
                  ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                ScPsiDocToken(DOC_COMMENT_DATA)(', ')
                DocSyntaxElement 8
                  ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                  ScPsiDocToken(DOC_COMMENT_DATA)('\r')
                  ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                ScPsiDocToken(DOC_WHITESPACE)('\n   ')
                ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
                ScPsiDocToken(DOC_WHITESPACE)('   ')
                ScPsiDocToken(DOC_COMMENT_DATA)('escape:  ')
                DocSyntaxElement 8
                  ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                  ScPsiDocToken(DOC_COMMENT_DATA)('\\')
                  ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                ScPsiDocToken(DOC_COMMENT_DATA)(', ')
                DocSyntaxElement 8
                  ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                  ScPsiDocToken(DOC_COMMENT_DATA)('\"')
                  ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                ScPsiDocToken(DOC_COMMENT_DATA)(', ')
                DocSyntaxElement 8
                  ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                  ScPsiDocToken(DOC_COMMENT_DATA)('\'')
                  ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                ScPsiDocToken(DOC_WHITESPACE)('\n   ')
                ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
                ScPsiDocToken(DOC_WHITESPACE)('\n   ')
                ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
              DocTag
                ScPsiDocToken(DOC_WHITESPACE)('  ')
                ScPsiDocToken(DOC_TAG_NAME)('@param')
                ScPsiDocToken(DOC_WHITESPACE)('  ')
                ScalaDocTagValue: str
                  ScPsiDocToken(DOC_TAG_VALUE_TOKEN)('str')
                ScDocParagraph
                  ScPsiDocToken(DOC_WHITESPACE)('  ')
                  ScPsiDocToken(DOC_COMMENT_DATA)('A string that may contain escape sequences')
                  ScPsiDocToken(DOC_WHITESPACE)('\n   ')
                  ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
              DocTag
                ScPsiDocToken(DOC_WHITESPACE)('  ')
                ScPsiDocToken(DOC_TAG_NAME)('@return')
                ScDocParagraph
                  ScPsiDocToken(DOC_WHITESPACE)(' ')
                  ScPsiDocToken(DOC_COMMENT_DATA)('The string with all escape sequences expanded.')
                  ScPsiDocToken(DOC_WHITESPACE)('\n   ')
              ScPsiDocToken(DOC_COMMENT_END)('*/')
            PsiWhiteSpace('\n  ')
            AnnotationsList
              Annotation
                PsiElement(@)('@')
                AnnotationExpression
                  ConstructorInvocation
                    SimpleType: deprecated
                      CodeReferenceElement: deprecated
                        PsiElement(identifier)('deprecated')
                    ArgumentList
                      PsiElement(()('(')
                      StringLiteral
                        PsiElement(string content)('"use processEscapes"')
                      PsiElement(,)(',')
                      PsiWhiteSpace(' ')
                      StringLiteral
                        PsiElement(string content)('"2.13.0"')
                      PsiElement())(')')
            Modifiers
              <empty list>
            PsiWhiteSpace('\n  ')
            PsiElement(def)('def')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('treatEscapes')
            Parameters
              ParametersClause
                PsiElement(()('(')
                Parameter: str
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(identifier)('str')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    SimpleType: String
                      CodeReferenceElement: String
                        PsiElement(identifier)('String')
                PsiElement())(')')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            SimpleType: String
              CodeReferenceElement: String
                PsiElement(identifier)('String')
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace(' ')
            MethodCall
              ReferenceExpression: processEscapes
                PsiElement(identifier)('processEscapes')
              ArgumentList
                PsiElement(()('(')
                ReferenceExpression: str
                  PsiElement(identifier)('str')
                PsiElement())(')')
          PsiWhiteSpace('\n\n  ')
          ScFunctionDefinition: processEscapes
            DocComment
              ScPsiDocToken(DOC_COMMENT_START)('/**')
              ScDocParagraph
                ScPsiDocToken(DOC_WHITESPACE)(' ')
                ScPsiDocToken(DOC_COMMENT_DATA)('Expands standard Scala escape sequences in a string.')
                ScPsiDocToken(DOC_WHITESPACE)('\n   ')
                ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
                ScPsiDocToken(DOC_WHITESPACE)('  ')
                ScPsiDocToken(DOC_COMMENT_DATA)('Escape sequences are:')
                ScPsiDocToken(DOC_WHITESPACE)('\n   ')
                ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
                ScPsiDocToken(DOC_WHITESPACE)('   ')
                ScPsiDocToken(DOC_COMMENT_DATA)('control: ')
                DocSyntaxElement 8
                  ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                  ScPsiDocToken(DOC_COMMENT_DATA)('\b')
                  ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                ScPsiDocToken(DOC_COMMENT_DATA)(', ')
                DocSyntaxElement 8
                  ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                  ScPsiDocToken(DOC_COMMENT_DATA)('\t')
                  ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                ScPsiDocToken(DOC_COMMENT_DATA)(', ')
                DocSyntaxElement 8
                  ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                  ScPsiDocToken(DOC_COMMENT_DATA)('\n')
                  ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                ScPsiDocToken(DOC_COMMENT_DATA)(', ')
                DocSyntaxElement 8
                  ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                  ScPsiDocToken(DOC_COMMENT_DATA)('\f')
                  ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                ScPsiDocToken(DOC_COMMENT_DATA)(', ')
                DocSyntaxElement 8
                  ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                  ScPsiDocToken(DOC_COMMENT_DATA)('\r')
                  ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                ScPsiDocToken(DOC_WHITESPACE)('\n   ')
                ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
                ScPsiDocToken(DOC_WHITESPACE)('   ')
                ScPsiDocToken(DOC_COMMENT_DATA)('escape:  ')
                DocSyntaxElement 8
                  ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                  ScPsiDocToken(DOC_COMMENT_DATA)('\\')
                  ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                ScPsiDocToken(DOC_COMMENT_DATA)(', ')
                DocSyntaxElement 8
                  ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                  ScPsiDocToken(DOC_COMMENT_DATA)('\"')
                  ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                ScPsiDocToken(DOC_COMMENT_DATA)(', ')
                DocSyntaxElement 8
                  ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                  ScPsiDocToken(DOC_COMMENT_DATA)('\'')
                  ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                ScPsiDocToken(DOC_WHITESPACE)('\n   ')
                ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
                ScPsiDocToken(DOC_WHITESPACE)('\n   ')
                ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
              DocTag
                ScPsiDocToken(DOC_WHITESPACE)('  ')
                ScPsiDocToken(DOC_TAG_NAME)('@param')
                ScPsiDocToken(DOC_WHITESPACE)('  ')
                ScalaDocTagValue: str
                  ScPsiDocToken(DOC_TAG_VALUE_TOKEN)('str')
                ScDocParagraph
                  ScPsiDocToken(DOC_WHITESPACE)('  ')
                  ScPsiDocToken(DOC_COMMENT_DATA)('A string that may contain escape sequences')
                  ScPsiDocToken(DOC_WHITESPACE)('\n   ')
                  ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
              DocTag
                ScPsiDocToken(DOC_WHITESPACE)('  ')
                ScPsiDocToken(DOC_TAG_NAME)('@return')
                ScDocParagraph
                  ScPsiDocToken(DOC_WHITESPACE)(' ')
                  ScPsiDocToken(DOC_COMMENT_DATA)('The string with all escape sequences expanded.')
                  ScPsiDocToken(DOC_WHITESPACE)('\n   ')
              ScPsiDocToken(DOC_COMMENT_END)('*/')
            PsiWhiteSpace('\n  ')
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(def)('def')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('processEscapes')
            Parameters
              ParametersClause
                PsiElement(()('(')
                Parameter: str
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(identifier)('str')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    SimpleType: String
                      CodeReferenceElement: String
                        PsiElement(identifier)('String')
                PsiElement())(')')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            SimpleType: String
              CodeReferenceElement: String
                PsiElement(identifier)('String')
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace('\n    ')
            MatchStatement
              InfixExpression
                ReferenceExpression: str
                  PsiElement(identifier)('str')
                PsiWhiteSpace(' ')
                ReferenceExpression: indexOf
                  PsiElement(identifier)('indexOf')
                PsiWhiteSpace(' ')
                CharLiteral
                  PsiElement(Character)(''\\'')
              PsiWhiteSpace(' ')
              PsiElement(match)('match')
              PsiWhiteSpace(' ')
              PsiElement({)('{')
              PsiWhiteSpace('\n      ')
              CaseClauses
                CaseClause
                  PsiElement(case)('case')
                  PsiWhiteSpace(' ')
                  LiteralPattern
                    IntegerLiteral
                      PsiElement(identifier)('-')
                      PsiElement(integer)('1')
                  PsiWhiteSpace(' ')
                  PsiElement(=>)('=>')
                  PsiWhiteSpace(' ')
                  BlockOfExpressions
                    ReferenceExpression: str
                      PsiElement(identifier)('str')
                PsiWhiteSpace('\n      ')
                CaseClause
                  PsiElement(case)('case')
                  PsiWhiteSpace('  ')
                  ReferencePattern: i
                    PsiElement(identifier)('i')
                  PsiWhiteSpace(' ')
                  PsiElement(=>)('=>')
                  PsiWhiteSpace(' ')
                  BlockOfExpressions
                    MethodCall
                      ReferenceExpression: replace
                        PsiElement(identifier)('replace')
                      ArgumentList
                        PsiElement(()('(')
                        ReferenceExpression: str
                          PsiElement(identifier)('str')
                        PsiElement(,)(',')
                        PsiWhiteSpace(' ')
                        ReferenceExpression: i
                          PsiElement(identifier)('i')
                        PsiElement())(')')
              PsiWhiteSpace('\n    ')
              PsiElement(})('}')
          PsiWhiteSpace('\n\n  ')
          ScFunctionDefinition: processUnicode
            AnnotationsList
              <empty list>
            Modifiers
              AccessModifier
                PsiElement(protected)('protected')
                PsiElement([)('[')
                PsiElement(identifier)('scala')
                PsiElement(])(']')
            PsiWhiteSpace(' ')
            PsiElement(def)('def')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('processUnicode')
            Parameters
              ParametersClause
                PsiElement(()('(')
                Parameter: str
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(identifier)('str')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    SimpleType: String
                      CodeReferenceElement: String
                        PsiElement(identifier)('String')
                PsiElement())(')')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            SimpleType: String
              CodeReferenceElement: String
                PsiElement(identifier)('String')
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace('\n    ')
            MatchStatement
              InfixExpression
                ReferenceExpression: str
                  PsiElement(identifier)('str')
                PsiWhiteSpace(' ')
                ReferenceExpression: indexOf
                  PsiElement(identifier)('indexOf')
                PsiWhiteSpace(' ')
                StringLiteral
                  PsiElement(string content)('"\\"')
              PsiWhiteSpace(' ')
              PsiElement(match)('match')
              PsiWhiteSpace(' ')
              PsiElement({)('{')
              PsiWhiteSpace('\n      ')
              CaseClauses
                CaseClause
                  PsiElement(case)('case')
                  PsiWhiteSpace(' ')
                  ReferencePattern: i
                    PsiElement(identifier)('i')
                  PsiWhiteSpace(' ')
                  Guard
                    PsiElement(if)('if')
                    PsiWhiteSpace(' ')
                    InfixExpression
                      InfixExpression
                        ReferenceExpression: i
                          PsiElement(identifier)('i')
                        PsiWhiteSpace(' ')
                        ReferenceExpression: ==
                          PsiElement(identifier)('==')
                        PsiWhiteSpace(' ')
                        IntegerLiteral
                          PsiElement(identifier)('-')
                          PsiElement(integer)('1')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: ||
                        PsiElement(identifier)('||')
                      PsiWhiteSpace(' ')
                      InfixExpression
                        ReferenceExpression: i
                          PsiElement(identifier)('i')
                        PsiWhiteSpace(' ')
                        ReferenceExpression: >=
                          PsiElement(identifier)('>=')
                        PsiWhiteSpace(' ')
                        ExpressionInParenthesis
                          PsiElement(()('(')
                          InfixExpression
                            MethodCall
                              ReferenceExpression: str.length
                                ReferenceExpression: str
                                  PsiElement(identifier)('str')
                                PsiElement(.)('.')
                                PsiElement(identifier)('length')
                              ArgumentList
                                PsiElement(()('(')
                                PsiElement())(')')
                            PsiWhiteSpace(' ')
                            ReferenceExpression: -
                              PsiElement(identifier)('-')
                            PsiWhiteSpace(' ')
                            IntegerLiteral
                              PsiElement(integer)('5')
                          PsiElement())(')')
                  PsiWhiteSpace(' ')
                  PsiElement(=>)('=>')
                  PsiWhiteSpace(' ')
                  BlockOfExpressions
                    ReferenceExpression: str
                      PsiElement(identifier)('str')
                PsiWhiteSpace('\n      ')
                CaseClause
                  PsiElement(case)('case')
                  PsiWhiteSpace(' ')
                  ReferencePattern: i
                    PsiElement(identifier)('i')
                  PsiWhiteSpace(' ')
                  PsiElement(=>)('=>')
                  PsiWhiteSpace(' ')
                  BlockOfExpressions
                    MethodCall
                      ReferenceExpression: replaceU
                        PsiElement(identifier)('replaceU')
                      ArgumentList
                        PsiElement(()('(')
                        ReferenceExpression: str
                          PsiElement(identifier)('str')
                        PsiElement(,)(',')
                        PsiWhiteSpace(' ')
                        ReferenceExpression: i
                          PsiElement(identifier)('i')
                        PsiElement())(')')
              PsiWhiteSpace('\n    ')
              PsiElement(})('}')
          PsiWhiteSpace('\n\n  ')
          ScFunctionDefinition: replace
            PsiComment(comment)('//replace escapes with given first escape')
            PsiWhiteSpace('\n  ')
            AnnotationsList
              <empty list>
            Modifiers
              AccessModifier
                PsiElement(private)('private')
                PsiElement([)('[')
                PsiElement(this)('this')
                PsiElement(])(']')
            PsiWhiteSpace(' ')
            PsiElement(def)('def')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('replace')
            Parameters
              ParametersClause
                PsiElement(()('(')
                Parameter: str
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(identifier)('str')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    SimpleType: String
                      CodeReferenceElement: String
                        PsiElement(identifier)('String')
                PsiElement(,)(',')
                PsiWhiteSpace(' ')
                Parameter: first
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(identifier)('first')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    SimpleType: Int
                      CodeReferenceElement: Int
                        PsiElement(identifier)('Int')
                PsiElement())(')')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            SimpleType: String
              CodeReferenceElement: String
                PsiElement(identifier)('String')
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace(' ')
            BlockExpression
              PsiElement({)('{')
              PsiWhiteSpace('\n    ')
              ScPatternDefinition: len
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(val)('val')
                PsiWhiteSpace(' ')
                ListOfPatterns
                  ReferencePattern: len
                    PsiElement(identifier)('len')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                MethodCall
                  ReferenceExpression: str.length
                    ReferenceExpression: str
                      PsiElement(identifier)('str')
                    PsiElement(.)('.')
                    PsiElement(identifier)('length')
                  ArgumentList
                    PsiElement(()('(')
                    PsiElement())(')')
              PsiWhiteSpace('\n    ')
              ScPatternDefinition: b
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(val)('val')
                PsiWhiteSpace(' ')
                ListOfPatterns
                  ReferencePattern: b
                    PsiElement(identifier)('b')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                ScNewTemplateDefinition: <anonymous>
                  PsiElement(new)('new')
                  PsiWhiteSpace(' ')
                  ExtendsBlock
                    TemplateParents
                      ConstructorInvocation
                        SimpleType: JLSBuilder
                          CodeReferenceElement: JLSBuilder
                            PsiElement(identifier)('JLSBuilder')
              PsiWhiteSpace('\n    ')
              ScFunctionDefinition: loop
                PsiComment(comment)('// append replacement starting at index `i`, with `next` backslash')
                PsiWhiteSpace('\n    ')
                AnnotationsList
                  Annotation
                    PsiElement(@)('@')
                    AnnotationExpression
                      ConstructorInvocation
                        SimpleType: tailrec
                          CodeReferenceElement: tailrec
                            PsiElement(identifier)('tailrec')
                Modifiers
                  <empty list>
                PsiWhiteSpace(' ')
                PsiElement(def)('def')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('loop')
                Parameters
                  ParametersClause
                    PsiElement(()('(')
                    Parameter: i
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(identifier)('i')
                      PsiElement(:)(':')
                      PsiWhiteSpace(' ')
                      ParameterType
                        SimpleType: Int
                          CodeReferenceElement: Int
                            PsiElement(identifier)('Int')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    Parameter: next
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(identifier)('next')
                      PsiElement(:)(':')
                      PsiWhiteSpace(' ')
                      ParameterType
                        SimpleType: Int
                          CodeReferenceElement: Int
                            PsiElement(identifier)('Int')
                    PsiElement())(')')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                SimpleType: String
                  CodeReferenceElement: String
                    PsiElement(identifier)('String')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                BlockExpression
                  PsiElement({)('{')
                  PsiWhiteSpace('\n      ')
                  IfStatement
                    PsiElement(if)('if')
                    PsiWhiteSpace(' ')
                    PsiElement(()('(')
                    InfixExpression
                      ReferenceExpression: next
                        PsiElement(identifier)('next')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: >=
                        PsiElement(identifier)('>=')
                      PsiWhiteSpace(' ')
                      IntegerLiteral
                        PsiElement(integer)('0')
                    PsiElement())(')')
                    PsiWhiteSpace(' ')
                    BlockExpression
                      PsiElement({)('{')
                      PsiWhiteSpace('\n        ')
                      PsiComment(comment)('//require(str(next) == '\\')')
                      PsiWhiteSpace('\n        ')
                      IfStatement
                        PsiElement(if)('if')
                        PsiWhiteSpace(' ')
                        PsiElement(()('(')
                        InfixExpression
                          ReferenceExpression: next
                            PsiElement(identifier)('next')
                          PsiWhiteSpace(' ')
                          ReferenceExpression: >
                            PsiElement(identifier)('>')
                          PsiWhiteSpace(' ')
                          ReferenceExpression: i
                            PsiElement(identifier)('i')
                        PsiElement())(')')
                        PsiWhiteSpace(' ')
                        MethodCall
                          ReferenceExpression: b.append
                            ReferenceExpression: b
                              PsiElement(identifier)('b')
                            PsiElement(.)('.')
                            PsiElement(identifier)('append')
                          ArgumentList
                            PsiElement(()('(')
                            ReferenceExpression: str
                              PsiElement(identifier)('str')
                            PsiElement(,)(',')
                            PsiWhiteSpace(' ')
                            ReferenceExpression: i
                              PsiElement(identifier)('i')
                            PsiElement(,)(',')
                            PsiWhiteSpace(' ')
                            ReferenceExpression: next
                              PsiElement(identifier)('next')
                            PsiElement())(')')
                      PsiWhiteSpace('\n          ')
                      ScVariableDefinition: idx
                        AnnotationsList
                          <empty list>
                        Modifiers
                          <empty list>
                        PsiElement(var)('var')
                        PsiWhiteSpace(' ')
                        ListOfPatterns
                          ReferencePattern: idx
                            PsiElement(identifier)('idx')
                        PsiWhiteSpace(' ')
                        PsiElement(=)('=')
                        PsiWhiteSpace(' ')
                        InfixExpression
                          ReferenceExpression: next
                            PsiElement(identifier)('next')
                          PsiWhiteSpace(' ')
                          ReferenceExpression: +
                            PsiElement(identifier)('+')
                          PsiWhiteSpace(' ')
                          IntegerLiteral
                            PsiElement(integer)('1')
                      PsiWhiteSpace('\n          ')
                      IfStatement
                        PsiElement(if)('if')
                        PsiWhiteSpace(' ')
                        PsiElement(()('(')
                        InfixExpression
                          ReferenceExpression: idx
                            PsiElement(identifier)('idx')
                          PsiWhiteSpace(' ')
                          ReferenceExpression: >=
                            PsiElement(identifier)('>=')
                          PsiWhiteSpace(' ')
                          ReferenceExpression: len
                            PsiElement(identifier)('len')
                        PsiElement())(')')
                        PsiWhiteSpace(' ')
                        ThrowStatement
                          PsiElement(throw)('throw')
                          PsiWhiteSpace(' ')
                          ScNewTemplateDefinition: <anonymous>
                            PsiElement(new)('new')
                            PsiWhiteSpace(' ')
                            ExtendsBlock
                              TemplateParents
                                ConstructorInvocation
                                  SimpleType: InvalidEscapeException
                                    CodeReferenceElement: InvalidEscapeException
                                      PsiElement(identifier)('InvalidEscapeException')
                                  ArgumentList
                                    PsiElement(()('(')
                                    ReferenceExpression: str
                                      PsiElement(identifier)('str')
                                    PsiElement(,)(',')
                                    PsiWhiteSpace(' ')
                                    ReferenceExpression: next
                                      PsiElement(identifier)('next')
                                    PsiElement())(')')
                      PsiWhiteSpace('\n          ')
                      ScPatternDefinition: c
                        AnnotationsList
                          <empty list>
                        Modifiers
                          <empty list>
                        PsiElement(val)('val')
                        PsiWhiteSpace(' ')
                        ListOfPatterns
                          ReferencePattern: c
                            PsiElement(identifier)('c')
                        PsiWhiteSpace(' ')
                        PsiElement(=)('=')
                        PsiWhiteSpace(' ')
                        MatchStatement
                          MethodCall
                            ReferenceExpression: str
                              PsiElement(identifier)('str')
                            ArgumentList
                              PsiElement(()('(')
                              ReferenceExpression: idx
                                PsiElement(identifier)('idx')
                              PsiElement())(')')
                          PsiWhiteSpace(' ')
                          PsiElement(match)('match')
                          PsiWhiteSpace(' ')
                          PsiElement({)('{')
                          PsiWhiteSpace('\n            ')
                          CaseClauses
                            CaseClause
                              PsiElement(case)('case')
                              PsiWhiteSpace(' ')
                              LiteralPattern
                                CharLiteral
                                  PsiElement(Character)(''u'')
                              PsiWhiteSpace('  ')
                              PsiElement(=>)('=>')
                              PsiWhiteSpace(' ')
                              BlockOfExpressions
                                CharLiteral
                                  PsiElement(Character)(''u'')
                            PsiWhiteSpace('\n            ')
                            CaseClause
                              PsiElement(case)('case')
                              PsiWhiteSpace(' ')
                              LiteralPattern
                                CharLiteral
                                  PsiElement(Character)(''b'')
                              PsiWhiteSpace('  ')
                              PsiElement(=>)('=>')
                              PsiWhiteSpace(' ')
                              BlockOfExpressions
                                CharLiteral
                                  PsiElement(Character)(''\b'')
                            PsiWhiteSpace('\n            ')
                            CaseClause
                              PsiElement(case)('case')
                              PsiWhiteSpace(' ')
                              LiteralPattern
                                CharLiteral
                                  PsiElement(Character)(''t'')
                              PsiWhiteSpace('  ')
                              PsiElement(=>)('=>')
                              PsiWhiteSpace(' ')
                              BlockOfExpressions
                                CharLiteral
                                  PsiElement(Character)(''\t'')
                            PsiWhiteSpace('\n            ')
                            CaseClause
                              PsiElement(case)('case')
                              PsiWhiteSpace(' ')
                              LiteralPattern
                                CharLiteral
                                  PsiElement(Character)(''n'')
                              PsiWhiteSpace('  ')
                              PsiElement(=>)('=>')
                              PsiWhiteSpace(' ')
                              BlockOfExpressions
                                CharLiteral
                                  PsiElement(Character)(''\n'')
                            PsiWhiteSpace('\n            ')
                            CaseClause
                              PsiElement(case)('case')
                              PsiWhiteSpace(' ')
                              LiteralPattern
                                CharLiteral
                                  PsiElement(Character)(''f'')
                              PsiWhiteSpace('  ')
                              PsiElement(=>)('=>')
                              PsiWhiteSpace(' ')
                              BlockOfExpressions
                                CharLiteral
                                  PsiElement(Character)(''\f'')
                            PsiWhiteSpace('\n            ')
                            CaseClause
                              PsiElement(case)('case')
                              PsiWhiteSpace(' ')
                              LiteralPattern
                                CharLiteral
                                  PsiElement(Character)(''r'')
                              PsiWhiteSpace('  ')
                              PsiElement(=>)('=>')
                              PsiWhiteSpace(' ')
                              BlockOfExpressions
                                CharLiteral
                                  PsiElement(Character)(''\r'')
                            PsiWhiteSpace('\n            ')
                            CaseClause
                              PsiElement(case)('case')
                              PsiWhiteSpace(' ')
                              LiteralPattern
                                CharLiteral
                                  PsiElement(Character)(''"'')
                              PsiWhiteSpace('  ')
                              PsiElement(=>)('=>')
                              PsiWhiteSpace(' ')
                              BlockOfExpressions
                                CharLiteral
                                  PsiElement(Character)(''"'')
                            PsiWhiteSpace('\n            ')
                            CaseClause
                              PsiElement(case)('case')
                              PsiWhiteSpace(' ')
                              LiteralPattern
                                CharLiteral
                                  PsiElement(Character)(''\''')
                              PsiWhiteSpace(' ')
                              PsiElement(=>)('=>')
                              PsiWhiteSpace(' ')
                              BlockOfExpressions
                                CharLiteral
                                  PsiElement(Character)(''\''')
                            PsiWhiteSpace('\n            ')
                            CaseClause
                              PsiElement(case)('case')
                              PsiWhiteSpace(' ')
                              LiteralPattern
                                CharLiteral
                                  PsiElement(Character)(''\\'')
                              PsiWhiteSpace(' ')
                              PsiElement(=>)('=>')
                              PsiWhiteSpace(' ')
                              BlockOfExpressions
                                CharLiteral
                                  PsiElement(Character)(''\\'')
                            PsiWhiteSpace('\n            ')
                            CaseClause
                              PsiElement(case)('case')
                              PsiWhiteSpace(' ')
                              WildcardPattern
                                PsiElement(_)('_')
                              PsiWhiteSpace('    ')
                              PsiElement(=>)('=>')
                              PsiWhiteSpace(' ')
                              BlockOfExpressions
                                ThrowStatement
                                  PsiElement(throw)('throw')
                                  PsiWhiteSpace(' ')
                                  ScNewTemplateDefinition: <anonymous>
                                    PsiElement(new)('new')
                                    PsiWhiteSpace(' ')
                                    ExtendsBlock
                                      TemplateParents
                                        ConstructorInvocation
                                          SimpleType: InvalidEscapeException
                                            CodeReferenceElement: InvalidEscapeException
                                              PsiElement(identifier)('InvalidEscapeException')
                                          ArgumentList
                                            PsiElement(()('(')
                                            ReferenceExpression: str
                                              PsiElement(identifier)('str')
                                            PsiElement(,)(',')
                                            PsiWhiteSpace(' ')
                                            ReferenceExpression: next
                                              PsiElement(identifier)('next')
                                            PsiElement())(')')
                          PsiWhiteSpace('\n          ')
                          PsiElement(})('}')
                      PsiWhiteSpace('\n          ')
                      ScPatternDefinition: ch, advance
                        AnnotationsList
                          <empty list>
                        Modifiers
                          <empty list>
                        PsiElement(val)('val')
                        PsiWhiteSpace(' ')
                        ListOfPatterns
                          TuplePattern
                            PsiElement(()('(')
                            ArgumentPatterns
                              ReferencePattern: ch
                                PsiElement(identifier)('ch')
                              PsiElement(,)(',')
                              PsiWhiteSpace(' ')
                              ReferencePattern: advance
                                PsiElement(identifier)('advance')
                            PsiElement())(')')
                        PsiWhiteSpace(' ')
                        PsiElement(=)('=')
                        PsiWhiteSpace(' ')
                        IfStatement
                          PsiElement(if)('if')
                          PsiWhiteSpace(' ')
                          PsiElement(()('(')
                          InfixExpression
                            ReferenceExpression: c
                              PsiElement(identifier)('c')
                            PsiWhiteSpace(' ')
                            ReferenceExpression: ==
                              PsiElement(identifier)('==')
                            PsiWhiteSpace(' ')
                            CharLiteral
                              PsiElement(Character)(''u'')
                          PsiElement())(')')
                          PsiWhiteSpace(' ')
                          MethodCall
                            ReferenceExpression: readUEscape
                              PsiElement(identifier)('readUEscape')
                            ArgumentList
                              PsiElement(()('(')
                              ReferenceExpression: str
                                PsiElement(identifier)('str')
                              PsiElement(,)(',')
                              PsiWhiteSpace(' ')
                              ReferenceExpression: idx
                                PsiElement(identifier)('idx')
                              PsiElement())(')')
                          PsiWhiteSpace('\n                              ')
                          PsiElement(else)('else')
                          PsiWhiteSpace(' ')
                          Tuple
                            PsiElement(()('(')
                            ReferenceExpression: c
                              PsiElement(identifier)('c')
                            PsiElement(,)(',')
                            PsiWhiteSpace(' ')
                            IntegerLiteral
                              PsiElement(integer)('1')
                            PsiElement())(')')
                      PsiWhiteSpace('\n          ')
                      InfixExpression
                        ReferenceExpression: idx
                          PsiElement(identifier)('idx')
                        PsiWhiteSpace(' ')
                        ReferenceExpression: +=
                          PsiElement(identifier)('+=')
                        PsiWhiteSpace(' ')
                        ReferenceExpression: advance
                          PsiElement(identifier)('advance')
                      PsiWhiteSpace('\n          ')
                      InfixExpression
                        ReferenceExpression: b
                          PsiElement(identifier)('b')
                        PsiWhiteSpace(' ')
                        ReferenceExpression: append
                          PsiElement(identifier)('append')
                        PsiWhiteSpace(' ')
                        ReferenceExpression: ch
                          PsiElement(identifier)('ch')
                      PsiWhiteSpace('\n          ')
                      MethodCall
                        ReferenceExpression: loop
                          PsiElement(identifier)('loop')
                        ArgumentList
                          PsiElement(()('(')
                          ReferenceExpression: idx
                            PsiElement(identifier)('idx')
                          PsiElement(,)(',')
                          PsiWhiteSpace(' ')
                          MethodCall
                            ReferenceExpression: str.indexOf
                              ReferenceExpression: str
                                PsiElement(identifier)('str')
                              PsiElement(.)('.')
                              PsiElement(identifier)('indexOf')
                            ArgumentList
                              PsiElement(()('(')
                              CharLiteral
                                PsiElement(Character)(''\\'')
                              PsiElement(,)(',')
                              PsiWhiteSpace(' ')
                              ReferenceExpression: idx
                                PsiElement(identifier)('idx')
                              PsiElement())(')')
                          PsiElement())(')')
                      PsiWhiteSpace('\n        ')
                      PsiElement(})('}')
                    PsiWhiteSpace(' ')
                    PsiElement(else)('else')
                    PsiWhiteSpace(' ')
                    BlockExpression
                      PsiElement({)('{')
                      PsiWhiteSpace('\n          ')
                      IfStatement
                        PsiElement(if)('if')
                        PsiWhiteSpace(' ')
                        PsiElement(()('(')
                        InfixExpression
                          ReferenceExpression: i
                            PsiElement(identifier)('i')
                          PsiWhiteSpace(' ')
                          ReferenceExpression: <
                            PsiElement(identifier)('<')
                          PsiWhiteSpace(' ')
                          ReferenceExpression: len
                            PsiElement(identifier)('len')
                        PsiElement())(')')
                        PsiWhiteSpace(' ')
                        MethodCall
                          ReferenceExpression: b.append
                            ReferenceExpression: b
                              PsiElement(identifier)('b')
                            PsiElement(.)('.')
                            PsiElement(identifier)('append')
                          ArgumentList
                            PsiElement(()('(')
                            ReferenceExpression: str
                              PsiElement(identifier)('str')
                            PsiElement(,)(',')
                            PsiWhiteSpace(' ')
                            ReferenceExpression: i
                              PsiElement(identifier)('i')
                            PsiElement(,)(',')
                            PsiWhiteSpace(' ')
                            ReferenceExpression: len
                              PsiElement(identifier)('len')
                            PsiElement())(')')
                      PsiWhiteSpace('\n          ')
                      ReferenceExpression: b.toString
                        ReferenceExpression: b
                          PsiElement(identifier)('b')
                        PsiElement(.)('.')
                        PsiElement(identifier)('toString')
                      PsiWhiteSpace('\n        ')
                      PsiElement(})('}')
                  PsiWhiteSpace('\n      ')
                  PsiElement(})('}')
              PsiWhiteSpace('\n      ')
              MethodCall
                ReferenceExpression: loop
                  PsiElement(identifier)('loop')
                ArgumentList
                  PsiElement(()('(')
                  IntegerLiteral
                    PsiElement(integer)('0')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: first
                    PsiElement(identifier)('first')
                  PsiElement())(')')
              PsiWhiteSpace('\n    ')
              PsiElement(})('}')
          PsiWhiteSpace('\n\n  ')
          ScFunctionDefinition: replaceU
            PsiComment(comment)('//replace escapes with given first escape')
            PsiWhiteSpace('\n  ')
            AnnotationsList
              <empty list>
            Modifiers
              AccessModifier
                PsiElement(private)('private')
                PsiElement([)('[')
                PsiElement(this)('this')
                PsiElement(])(']')
            PsiWhiteSpace(' ')
            PsiElement(def)('def')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('replaceU')
            Parameters
              ParametersClause
                PsiElement(()('(')
                Parameter: str
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(identifier)('str')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    SimpleType: String
                      CodeReferenceElement: String
                        PsiElement(identifier)('String')
                PsiElement(,)(',')
                PsiWhiteSpace(' ')
                Parameter: first
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(identifier)('first')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    SimpleType: Int
                      CodeReferenceElement: Int
                        PsiElement(identifier)('Int')
                PsiElement())(')')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            SimpleType: String
              CodeReferenceElement: String
                PsiElement(identifier)('String')
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace(' ')
            BlockExpression
              PsiElement({)('{')
              PsiWhiteSpace('\n    ')
              ScPatternDefinition: len
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(val)('val')
                PsiWhiteSpace(' ')
                ListOfPatterns
                  ReferencePattern: len
                    PsiElement(identifier)('len')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                MethodCall
                  ReferenceExpression: str.length
                    ReferenceExpression: str
                      PsiElement(identifier)('str')
                    PsiElement(.)('.')
                    PsiElement(identifier)('length')
                  ArgumentList
                    PsiElement(()('(')
                    PsiElement())(')')
              PsiWhiteSpace('\n    ')
              ScPatternDefinition: b
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(val)('val')
                PsiWhiteSpace(' ')
                ListOfPatterns
                  ReferencePattern: b
                    PsiElement(identifier)('b')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                ScNewTemplateDefinition: <anonymous>
                  PsiElement(new)('new')
                  PsiWhiteSpace(' ')
                  ExtendsBlock
                    TemplateParents
                      ConstructorInvocation
                        SimpleType: JLSBuilder
                          CodeReferenceElement: JLSBuilder
                            PsiElement(identifier)('JLSBuilder')
              PsiWhiteSpace('\n    ')
              ScFunctionDefinition: loop
                PsiComment(comment)('// append replacement starting at index `i`, with `next` backslash')
                PsiWhiteSpace('\n    ')
                AnnotationsList
                  Annotation
                    PsiElement(@)('@')
                    AnnotationExpression
                      ConstructorInvocation
                        SimpleType: tailrec
                          CodeReferenceElement: tailrec
                            PsiElement(identifier)('tailrec')
                Modifiers
                  <empty list>
                PsiWhiteSpace(' ')
                PsiElement(def)('def')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('loop')
                Parameters
                  ParametersClause
                    PsiElement(()('(')
                    Parameter: i
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(identifier)('i')
                      PsiElement(:)(':')
                      PsiWhiteSpace(' ')
                      ParameterType
                        SimpleType: Int
                          CodeReferenceElement: Int
                            PsiElement(identifier)('Int')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    Parameter: next
                      AnnotationsList
                        <empty list>
                      Modifiers
                        <empty list>
                      PsiElement(identifier)('next')
                      PsiElement(:)(':')
                      PsiWhiteSpace(' ')
                      ParameterType
                        SimpleType: Int
                          CodeReferenceElement: Int
                            PsiElement(identifier)('Int')
                    PsiElement())(')')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                SimpleType: String
                  CodeReferenceElement: String
                    PsiElement(identifier)('String')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                BlockExpression
                  PsiElement({)('{')
                  PsiWhiteSpace('\n      ')
                  IfStatement
                    PsiElement(if)('if')
                    PsiWhiteSpace(' ')
                    PsiElement(()('(')
                    InfixExpression
                      ReferenceExpression: next
                        PsiElement(identifier)('next')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: >=
                        PsiElement(identifier)('>=')
                      PsiWhiteSpace(' ')
                      IntegerLiteral
                        PsiElement(integer)('0')
                    PsiElement())(')')
                    PsiWhiteSpace(' ')
                    BlockExpression
                      PsiElement({)('{')
                      PsiWhiteSpace('\n        ')
                      PsiComment(comment)('//require(str(next) == '\\')')
                      PsiWhiteSpace('\n        ')
                      IfStatement
                        PsiElement(if)('if')
                        PsiWhiteSpace(' ')
                        PsiElement(()('(')
                        InfixExpression
                          ReferenceExpression: next
                            PsiElement(identifier)('next')
                          PsiWhiteSpace(' ')
                          ReferenceExpression: >
                            PsiElement(identifier)('>')
                          PsiWhiteSpace(' ')
                          ReferenceExpression: i
                            PsiElement(identifier)('i')
                        PsiElement())(')')
                        PsiWhiteSpace(' ')
                        MethodCall
                          ReferenceExpression: b.append
                            ReferenceExpression: b
                              PsiElement(identifier)('b')
                            PsiElement(.)('.')
                            PsiElement(identifier)('append')
                          ArgumentList
                            PsiElement(()('(')
                            ReferenceExpression: str
                              PsiElement(identifier)('str')
                            PsiElement(,)(',')
                            PsiWhiteSpace(' ')
                            ReferenceExpression: i
                              PsiElement(identifier)('i')
                            PsiElement(,)(',')
                            PsiWhiteSpace(' ')
                            ReferenceExpression: next
                              PsiElement(identifier)('next')
                            PsiElement())(')')
                      PsiWhiteSpace('\n        ')
                      ScVariableDefinition: idx
                        AnnotationsList
                          <empty list>
                        Modifiers
                          <empty list>
                        PsiElement(var)('var')
                        PsiWhiteSpace(' ')
                        ListOfPatterns
                          ReferencePattern: idx
                            PsiElement(identifier)('idx')
                        PsiWhiteSpace(' ')
                        PsiElement(=)('=')
                        PsiWhiteSpace(' ')
                        InfixExpression
                          ReferenceExpression: next
                            PsiElement(identifier)('next')
                          PsiWhiteSpace(' ')
                          ReferenceExpression: +
                            PsiElement(identifier)('+')
                          PsiWhiteSpace(' ')
                          IntegerLiteral
                            PsiElement(integer)('1')
                      PsiWhiteSpace('\n        ')
                      IfStatement
                        PsiElement(if)('if')
                        PsiWhiteSpace(' ')
                        PsiElement(()('(')
                        InfixExpression
                          ReferenceExpression: idx
                            PsiElement(identifier)('idx')
                          PsiWhiteSpace(' ')
                          ReferenceExpression: >=
                            PsiElement(identifier)('>=')
                          PsiWhiteSpace(' ')
                          ReferenceExpression: len
                            PsiElement(identifier)('len')
                        PsiElement())(')')
                        PsiWhiteSpace(' ')
                        BlockExpression
                          PsiElement({)('{')
                          PsiWhiteSpace('\n          ')
                          IfStatement
                            PsiElement(if)('if')
                            PsiWhiteSpace(' ')
                            PsiElement(()('(')
                            InfixExpression
                              ReferenceExpression: idx
                                PsiElement(identifier)('idx')
                              PsiWhiteSpace(' ')
                              ReferenceExpression: ==
                                PsiElement(identifier)('==')
                              PsiWhiteSpace(' ')
                              ReferenceExpression: len
                                PsiElement(identifier)('len')
                            PsiElement())(')')
                            PsiWhiteSpace(' ')
                            MethodCall
                              ReferenceExpression: b.append
                                ReferenceExpression: b
                                  PsiElement(identifier)('b')
                                PsiElement(.)('.')
                                PsiElement(identifier)('append')
                              ArgumentList
                                PsiElement(()('(')
                                CharLiteral
                                  PsiElement(Character)(''\\'')
                                PsiElement())(')')
                          PsiWhiteSpace('\n          ')
                          MethodCall
                            ReferenceExpression: b.toString
                              ReferenceExpression: b
                                PsiElement(identifier)('b')
                              PsiElement(.)('.')
                              PsiElement(identifier)('toString')
                            ArgumentList
                              PsiElement(()('(')
                              PsiElement())(')')
                          PsiWhiteSpace('\n        ')
                          PsiElement(})('}')
                        PsiWhiteSpace('\n        ')
                        PsiElement(else)('else')
                        PsiWhiteSpace(' ')
                        BlockExpression
                          PsiElement({)('{')
                          PsiWhiteSpace('\n          ')
                          ScPatternDefinition: ch, advance
                            AnnotationsList
                              <empty list>
                            Modifiers
                              <empty list>
                            PsiElement(val)('val')
                            PsiWhiteSpace(' ')
                            ListOfPatterns
                              TuplePattern
                                PsiElement(()('(')
                                ArgumentPatterns
                                  ReferencePattern: ch
                                    PsiElement(identifier)('ch')
                                  PsiElement(,)(',')
                                  PsiWhiteSpace(' ')
                                  ReferencePattern: advance
                                    PsiElement(identifier)('advance')
                                PsiElement())(')')
                            PsiWhiteSpace(' ')
                            PsiElement(=)('=')
                            PsiWhiteSpace(' ')
                            MatchStatement
                              MethodCall
                                ReferenceExpression: str
                                  PsiElement(identifier)('str')
                                ArgumentList
                                  PsiElement(()('(')
                                  ReferenceExpression: idx
                                    PsiElement(identifier)('idx')
                                  PsiElement())(')')
                              PsiWhiteSpace(' ')
                              PsiElement(match)('match')
                              PsiWhiteSpace(' ')
                              PsiElement({)('{')
                              PsiWhiteSpace('\n            ')
                              CaseClauses
                                CaseClause
                                  PsiElement(case)('case')
                                  PsiWhiteSpace(' ')
                                  LiteralPattern
                                    CharLiteral
                                      PsiElement(Character)(''u'')
                                  PsiWhiteSpace('  ')
                                  PsiElement(=>)('=>')
                                  PsiWhiteSpace(' ')
                                  BlockOfExpressions
                                    MethodCall
                                      ReferenceExpression: readUEscape
                                        PsiElement(identifier)('readUEscape')
                                      ArgumentList
                                        PsiElement(()('(')
                                        ReferenceExpression: str
                                          PsiElement(identifier)('str')
                                        PsiElement(,)(',')
                                        PsiWhiteSpace(' ')
                                        ReferenceExpression: idx
                                          PsiElement(identifier)('idx')
                                        PsiElement())(')')
                                PsiWhiteSpace('\n            ')
                                CaseClause
                                  PsiElement(case)('case')
                                  PsiWhiteSpace(' ')
                                  ReferencePattern: chr
                                    PsiElement(identifier)('chr')
                                  PsiWhiteSpace('  ')
                                  PsiElement(=>)('=>')
                                  PsiWhiteSpace(' ')
                                  BlockOfExpressions
                                    BlockExpression
                                      PsiElement({)('{')
                                      PsiWhiteSpace('\n              ')
                                      MethodCall
                                        ReferenceExpression: b.append
                                          ReferenceExpression: b
                                            PsiElement(identifier)('b')
                                          PsiElement(.)('.')
                                          PsiElement(identifier)('append')
                                        ArgumentList
                                          PsiElement(()('(')
                                          CharLiteral
                                            PsiElement(Character)(''\\'')
                                          PsiElement())(')')
                                      PsiWhiteSpace('\n              ')
                                      Tuple
                                        PsiElement(()('(')
                                        ReferenceExpression: chr
                                          PsiElement(identifier)('chr')
                                        PsiElement(,)(',')
                                        PsiWhiteSpace(' ')
                                        IntegerLiteral
                                          PsiElement(integer)('1')
                                        PsiElement())(')')
                                      PsiWhiteSpace('\n            ')
                                      PsiElement(})('}')
                              PsiWhiteSpace('\n          ')
                              PsiElement(})('}')
                          PsiWhiteSpace('\n          ')
                          InfixExpression
                            ReferenceExpression: idx
                              PsiElement(identifier)('idx')
                            PsiWhiteSpace(' ')
                            ReferenceExpression: +=
                              PsiElement(identifier)('+=')
                            PsiWhiteSpace(' ')
                            ReferenceExpression: advance
                              PsiElement(identifier)('advance')
                          PsiWhiteSpace('\n          ')
                          MethodCall
                            ReferenceExpression: b.append
                              ReferenceExpression: b
                                PsiElement(identifier)('b')
                              PsiElement(.)('.')
                              PsiElement(identifier)('append')
                            ArgumentList
                              PsiElement(()('(')
                              ReferenceExpression: ch
                                PsiElement(identifier)('ch')
                              PsiElement())(')')
                          PsiWhiteSpace('\n          ')
                          MethodCall
                            ReferenceExpression: loop
                              PsiElement(identifier)('loop')
                            ArgumentList
                              PsiElement(()('(')
                              ReferenceExpression: idx
                                PsiElement(identifier)('idx')
                              PsiElement(,)(',')
                              PsiWhiteSpace(' ')
                              MethodCall
                                ReferenceExpression: str.indexOf
                                  ReferenceExpression: str
                                    PsiElement(identifier)('str')
                                  PsiElement(.)('.')
                                  PsiElement(identifier)('indexOf')
                                ArgumentList
                                  PsiElement(()('(')
                                  CharLiteral
                                    PsiElement(Character)(''\\'')
                                  PsiElement(,)(',')
                                  PsiWhiteSpace(' ')
                                  ReferenceExpression: idx
                                    PsiElement(identifier)('idx')
                                  PsiElement())(')')
                              PsiElement())(')')
                          PsiWhiteSpace('\n        ')
                          PsiElement(})('}')
                      PsiWhiteSpace('\n      ')
                      PsiElement(})('}')
                    PsiWhiteSpace(' ')
                    PsiElement(else)('else')
                    PsiWhiteSpace(' ')
                    BlockExpression
                      PsiElement({)('{')
                      PsiWhiteSpace('\n        ')
                      IfStatement
                        PsiElement(if)('if')
                        PsiWhiteSpace(' ')
                        PsiElement(()('(')
                        InfixExpression
                          ReferenceExpression: i
                            PsiElement(identifier)('i')
                          PsiWhiteSpace(' ')
                          ReferenceExpression: <
                            PsiElement(identifier)('<')
                          PsiWhiteSpace(' ')
                          ReferenceExpression: len
                            PsiElement(identifier)('len')
                        PsiElement())(')')
                        PsiWhiteSpace(' ')
                        MethodCall
                          ReferenceExpression: b.append
                            ReferenceExpression: b
                              PsiElement(identifier)('b')
                            PsiElement(.)('.')
                            PsiElement(identifier)('append')
                          ArgumentList
                            PsiElement(()('(')
                            ReferenceExpression: str
                              PsiElement(identifier)('str')
                            PsiElement(,)(',')
                            PsiWhiteSpace(' ')
                            ReferenceExpression: i
                              PsiElement(identifier)('i')
                            PsiElement(,)(',')
                            PsiWhiteSpace(' ')
                            ReferenceExpression: len
                              PsiElement(identifier)('len')
                            PsiElement())(')')
                      PsiWhiteSpace('\n        ')
                      MethodCall
                        ReferenceExpression: b.toString
                          ReferenceExpression: b
                            PsiElement(identifier)('b')
                          PsiElement(.)('.')
                          PsiElement(identifier)('toString')
                        ArgumentList
                          PsiElement(()('(')
                          PsiElement())(')')
                      PsiWhiteSpace('\n      ')
                      PsiElement(})('}')
                  PsiWhiteSpace('\n    ')
                  PsiElement(})('}')
              PsiWhiteSpace('\n    ')
              MethodCall
                ReferenceExpression: loop
                  PsiElement(identifier)('loop')
                ArgumentList
                  PsiElement(()('(')
                  IntegerLiteral
                    PsiElement(integer)('0')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: first
                    PsiElement(identifier)('first')
                  PsiElement())(')')
              PsiWhiteSpace('\n  ')
              PsiElement(})('}')
          PsiWhiteSpace('\n\n  ')
          ScFunctionDefinition: standardInterpolator
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(def)('def')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('standardInterpolator')
            Parameters
              ParametersClause
                PsiElement(()('(')
                Parameter: process
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(identifier)('process')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    FunctionalType: String => String
                      SimpleType: String
                        CodeReferenceElement: String
                          PsiElement(identifier)('String')
                      PsiWhiteSpace(' ')
                      PsiElement(=>)('=>')
                      PsiWhiteSpace(' ')
                      SimpleType: String
                        CodeReferenceElement: String
                          PsiElement(identifier)('String')
                PsiElement(,)(',')
                PsiWhiteSpace(' ')
                Parameter: args
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(identifier)('args')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    ParametrizedType: scala.collection.Seq[Any]
                      SimpleType: scala.collection.Seq
                        CodeReferenceElement: scala.collection.Seq
                          CodeReferenceElement: scala.collection
                            CodeReferenceElement: scala
                              PsiElement(identifier)('scala')
                            PsiElement(.)('.')
                            PsiElement(identifier)('collection')
                          PsiElement(.)('.')
                          PsiElement(identifier)('Seq')
                      TypeArgumentsList
                        PsiElement([)('[')
                        SimpleType: Any
                          CodeReferenceElement: Any
                            PsiElement(identifier)('Any')
                        PsiElement(])(']')
                PsiElement(,)(',')
                PsiWhiteSpace(' ')
                Parameter: parts
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(identifier)('parts')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    ParametrizedType: Seq[String]
                      SimpleType: Seq
                        CodeReferenceElement: Seq
                          PsiElement(identifier)('Seq')
                      TypeArgumentsList
                        PsiElement([)('[')
                        SimpleType: String
                          CodeReferenceElement: String
                            PsiElement(identifier)('String')
                        PsiElement(])(']')
                PsiElement())(')')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            SimpleType: String
              CodeReferenceElement: String
                PsiElement(identifier)('String')
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace(' ')
            BlockExpression
              PsiElement({)('{')
              PsiWhiteSpace('\n    ')
              MethodCall
                ReferenceExpression: StringContext.checkLengths
                  ReferenceExpression: StringContext
                    PsiElement(identifier)('StringContext')
                  PsiElement(.)('.')
                  PsiElement(identifier)('checkLengths')
                ArgumentList
                  PsiElement(()('(')
                  ReferenceExpression: args
                    PsiElement(identifier)('args')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: parts
                    PsiElement(identifier)('parts')
                  PsiElement())(')')
              PsiWhiteSpace('\n    ')
              ScPatternDefinition: pi
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(val)('val')
                PsiWhiteSpace(' ')
                ListOfPatterns
                  ReferencePattern: pi
                    PsiElement(identifier)('pi')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                ReferenceExpression: parts.iterator
                  ReferenceExpression: parts
                    PsiElement(identifier)('parts')
                  PsiElement(.)('.')
                  PsiElement(identifier)('iterator')
              PsiWhiteSpace('\n    ')
              ScPatternDefinition: ai
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(val)('val')
                PsiWhiteSpace(' ')
                ListOfPatterns
                  ReferencePattern: ai
                    PsiElement(identifier)('ai')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                ReferenceExpression: args.iterator
                  ReferenceExpression: args
                    PsiElement(identifier)('args')
                  PsiElement(.)('.')
                  PsiElement(identifier)('iterator')
              PsiWhiteSpace('\n    ')
              ScPatternDefinition: bldr
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(val)('val')
                PsiWhiteSpace(' ')
                ListOfPatterns
                  ReferencePattern: bldr
                    PsiElement(identifier)('bldr')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                ScNewTemplateDefinition: <anonymous>
                  PsiElement(new)('new')
                  PsiWhiteSpace(' ')
                  ExtendsBlock
                    TemplateParents
                      ConstructorInvocation
                        SimpleType: JLSBuilder
                          CodeReferenceElement: JLSBuilder
                            PsiElement(identifier)('JLSBuilder')
                        ArgumentList
                          PsiElement(()('(')
                          MethodCall
                            ReferenceExpression: process
                              PsiElement(identifier)('process')
                            ArgumentList
                              PsiElement(()('(')
                              MethodCall
                                ReferenceExpression: pi.next
                                  ReferenceExpression: pi
                                    PsiElement(identifier)('pi')
                                  PsiElement(.)('.')
                                  PsiElement(identifier)('next')
                                ArgumentList
                                  PsiElement(()('(')
                                  PsiElement())(')')
                              PsiElement())(')')
                          PsiElement())(')')
              PsiWhiteSpace('\n    ')
              WhileStatement
                PsiElement(while)('while')
                PsiWhiteSpace(' ')
                PsiElement(()('(')
                ReferenceExpression: ai.hasNext
                  ReferenceExpression: ai
                    PsiElement(identifier)('ai')
                  PsiElement(.)('.')
                  PsiElement(identifier)('hasNext')
                PsiElement())(')')
                PsiWhiteSpace(' ')
                BlockExpression
                  PsiElement({)('{')
                  PsiWhiteSpace('\n      ')
                  InfixExpression
                    ReferenceExpression: bldr
                      PsiElement(identifier)('bldr')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: append
                      PsiElement(identifier)('append')
                    PsiWhiteSpace(' ')
                    MethodCall
                      ReferenceExpression: ai.next
                        ReferenceExpression: ai
                          PsiElement(identifier)('ai')
                        PsiElement(.)('.')
                        PsiElement(identifier)('next')
                      ArgumentList
                        PsiElement(()('(')
                        PsiElement())(')')
                  PsiWhiteSpace('\n      ')
                  InfixExpression
                    ReferenceExpression: bldr
                      PsiElement(identifier)('bldr')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: append
                      PsiElement(identifier)('append')
                    PsiWhiteSpace(' ')
                    MethodCall
                      ReferenceExpression: process
                        PsiElement(identifier)('process')
                      ArgumentList
                        PsiElement(()('(')
                        MethodCall
                          ReferenceExpression: pi.next
                            ReferenceExpression: pi
                              PsiElement(identifier)('pi')
                            PsiElement(.)('.')
                            PsiElement(identifier)('next')
                          ArgumentList
                            PsiElement(()('(')
                            PsiElement())(')')
                        PsiElement())(')')
                  PsiWhiteSpace('\n    ')
                  PsiElement(})('}')
              PsiWhiteSpace('\n    ')
              ReferenceExpression: bldr.toString
                ReferenceExpression: bldr
                  PsiElement(identifier)('bldr')
                PsiElement(.)('.')
                PsiElement(identifier)('toString')
              PsiWhiteSpace('\n  ')
              PsiElement(})('}')
          PsiWhiteSpace('\n\n  ')
          ScFunctionDefinition: checkLengths
            DocComment
              ScPsiDocToken(DOC_COMMENT_START)('/**')
              ScDocParagraph
                ScPsiDocToken(DOC_WHITESPACE)(' ')
                ScPsiDocToken(DOC_COMMENT_DATA)('Checks that the length of the given argument ')
                DocSyntaxElement 8
                  ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                  ScPsiDocToken(DOC_COMMENT_DATA)('args')
                  ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                ScPsiDocToken(DOC_COMMENT_DATA)(' is one less than the number')
                ScPsiDocToken(DOC_WHITESPACE)('\n   ')
                ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
                ScPsiDocToken(DOC_WHITESPACE)('  ')
                ScPsiDocToken(DOC_COMMENT_DATA)('of ')
                DocSyntaxElement 8
                  ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                  ScPsiDocToken(DOC_COMMENT_DATA)('parts')
                  ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                ScPsiDocToken(DOC_COMMENT_DATA)(' supplied to the ')
                DocSyntaxElement 8
                  ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                  ScPsiDocToken(DOC_COMMENT_DATA)('StringContext')
                  ScPsiDocToken(DOC_MONOSPACE_TAG 8)('`')
                ScPsiDocToken(DOC_COMMENT_DATA)('.')
                ScPsiDocToken(DOC_WHITESPACE)('\n   ')
                ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
                ScPsiDocToken(DOC_WHITESPACE)('\n   ')
                ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
              DocTag
                ScPsiDocToken(DOC_WHITESPACE)('  ')
                ScPsiDocToken(DOC_TAG_NAME)('@throws')
                ScPsiDocToken(DOC_WHITESPACE)(' ')
                CodeReferenceElement (scala doc throws): IllegalArgumentException
                  PsiElement(identifier)('IllegalArgumentException')
                ScDocParagraph
                  ScPsiDocToken(DOC_WHITESPACE)('  ')
                  ScPsiDocToken(DOC_COMMENT_DATA)('if this is not the case.')
                  ScPsiDocToken(DOC_WHITESPACE)('\n   ')
              ScPsiDocToken(DOC_COMMENT_END)('*/')
            PsiWhiteSpace('\n  ')
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(def)('def')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('checkLengths')
            Parameters
              ParametersClause
                PsiElement(()('(')
                Parameter: args
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(identifier)('args')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    ParametrizedType: scala.collection.Seq[Any]
                      SimpleType: scala.collection.Seq
                        CodeReferenceElement: scala.collection.Seq
                          CodeReferenceElement: scala.collection
                            CodeReferenceElement: scala
                              PsiElement(identifier)('scala')
                            PsiElement(.)('.')
                            PsiElement(identifier)('collection')
                          PsiElement(.)('.')
                          PsiElement(identifier)('Seq')
                      TypeArgumentsList
                        PsiElement([)('[')
                        SimpleType: Any
                          CodeReferenceElement: Any
                            PsiElement(identifier)('Any')
                        PsiElement(])(']')
                PsiElement(,)(',')
                PsiWhiteSpace(' ')
                Parameter: parts
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(identifier)('parts')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    ParametrizedType: Seq[String]
                      SimpleType: Seq
                        CodeReferenceElement: Seq
                          PsiElement(identifier)('Seq')
                      TypeArgumentsList
                        PsiElement([)('[')
                        SimpleType: String
                          CodeReferenceElement: String
                            PsiElement(identifier)('String')
                        PsiElement(])(']')
                PsiElement())(')')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            SimpleType: Unit
              CodeReferenceElement: Unit
                PsiElement(identifier)('Unit')
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace('\n    ')
            IfStatement
              PsiElement(if)('if')
              PsiWhiteSpace(' ')
              PsiElement(()('(')
              InfixExpression
                ReferenceExpression: parts.length
                  ReferenceExpression: parts
                    PsiElement(identifier)('parts')
                  PsiElement(.)('.')
                  PsiElement(identifier)('length')
                PsiWhiteSpace(' ')
                ReferenceExpression: !=
                  PsiElement(identifier)('!=')
                PsiWhiteSpace(' ')
                InfixExpression
                  ReferenceExpression: args.length
                    ReferenceExpression: args
                      PsiElement(identifier)('args')
                    PsiElement(.)('.')
                    PsiElement(identifier)('length')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: +
                    PsiElement(identifier)('+')
                  PsiWhiteSpace(' ')
                  IntegerLiteral
                    PsiElement(integer)('1')
              PsiElement())(')')
              PsiWhiteSpace('\n      ')
              ThrowStatement
                PsiElement(throw)('throw')
                PsiWhiteSpace(' ')
                ScNewTemplateDefinition: <anonymous>
                  PsiElement(new)('new')
                  PsiWhiteSpace(' ')
                  ExtendsBlock
                    TemplateParents
                      ConstructorInvocation
                        SimpleType: IllegalArgumentException
                          CodeReferenceElement: IllegalArgumentException
                            PsiElement(identifier)('IllegalArgumentException')
                        ArgumentList
                          PsiElement(()('(')
                          InfixExpression
                            InfixExpression
                              InfixExpression
                                InfixExpression
                                  StringLiteral
                                    PsiElement(string content)('"wrong number of arguments ("')
                                  ReferenceExpression: +
                                    PsiElement(identifier)('+')
                                  PsiWhiteSpace(' ')
                                  ReferenceExpression: args.length
                                    ReferenceExpression: args
                                      PsiElement(identifier)('args')
                                    PsiElement(.)('.')
                                    PsiElement(identifier)('length')
                                PsiWhiteSpace('\n        ')
                                ReferenceExpression: +
                                  PsiElement(identifier)('+')
                                StringLiteral
                                  PsiElement(string content)('") for interpolated string with "')
                              ReferenceExpression: +
                                PsiElement(identifier)('+')
                              PsiWhiteSpace(' ')
                              ReferenceExpression: parts.length
                                ReferenceExpression: parts
                                  PsiElement(identifier)('parts')
                                PsiElement(.)('.')
                                PsiElement(identifier)('length')
                            PsiWhiteSpace(' ')
                            ReferenceExpression: +
                              PsiElement(identifier)('+')
                            StringLiteral
                              PsiElement(string content)('" parts"')
                          PsiElement())(')')
          PsiWhiteSpace('\n\n')
          PsiElement(})('}')
