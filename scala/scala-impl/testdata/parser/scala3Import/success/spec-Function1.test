/*                     __                                               *\
**     ________ ___   / /  ___     Scala API                            **
**    / __/ __// _ | / /  / _ |    (c) 2002-2013, LAMP/EPFL             **
**  __\ \/ /__/ __ |/ /__/ __ |    http://scala-lang.org/               **
** /____/\___/_/ |_/____/_/ | |                                         **
**                          |/                                          **
\*                                                                      */

// generated by genprod on Wed Apr 23 10:06:16 CEST 2008 (with fancy comment) (with extra methods)

package scalabip


/** <p>
 *    Function with 1 parameters.
 *  </p>
 *  <p>
      In the following example the definition of
 *    <code>succ</code> is a shorthand for the anonymous class definition
 *    <code>anonfun1</code>:
 *  </p>
 *  <pre>
 *  <b>object</b> Main <b>extends</b> App {
 *
 *    <b>val</b> succ = (x: Int) => x + 1
 *
 *    <b>val</b> anonfun1 = <b>new</b> Function1[Int, Int] {
 *      <b>def</b> apply(x: Int): Int = x + 1
 *    }
 *
 *    println(succ(0))
 *    println(anonfun1(0))
 *  }</pre>
 */
trait Function1[@specialized -T1, @specialized +R] extends AnyRef { self =>
  def apply(v1:T1): R
  override def toString() = "<function>"

  /** (f compose g)(x) ==  f(g(x))
   */
  def compose[A](g: A => T1): A => R = { x => apply(g(x)) }

  /** (f andThen g)(x) ==  g(f(x))
   */
  def andThen[A](g: R => A): T1 => A = { x => g(apply(x)) }

}
-----
ScalaFile
  PsiComment(BlockComment)('/*                     __                                               *\\n**     ________ ___   / /  ___     Scala API                            **\n**    / __/ __// _ | / /  / _ |    (c) 2002-2013, LAMP/EPFL             **\n**  __\ \/ /__/ __ |/ /__/ __ |    http://scala-lang.org/               **\n** /____/\___/_/ |_/____/_/ | |                                         **\n**                          |/                                          **\n\*                                                                      */')
  PsiWhiteSpace('\n\n')
  PsiComment(comment)('// generated by genprod on Wed Apr 23 10:06:16 CEST 2008 (with fancy comment) (with extra methods)')
  PsiWhiteSpace('\n\n')
  ScPackaging
    PsiElement(package)('package')
    PsiWhiteSpace(' ')
    CodeReferenceElement: scalabip
      PsiElement(identifier)('scalabip')
    PsiWhiteSpace('\n\n\n')
    ScTrait: Function1
      DocComment
        ScPsiDocToken(DOC_COMMENT_START)('/**')
        ScDocParagraph
          ScPsiDocToken(DOC_WHITESPACE)(' ')
          ScPsiDocToken(DOC_COMMENT_DATA)('<p>')
          ScPsiDocToken(DOC_WHITESPACE)('\n ')
          ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
          ScPsiDocToken(DOC_WHITESPACE)('    ')
          ScPsiDocToken(DOC_COMMENT_DATA)('Function with 1 parameters.')
          ScPsiDocToken(DOC_WHITESPACE)('\n ')
          ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
          ScPsiDocToken(DOC_WHITESPACE)('  ')
          ScPsiDocToken(DOC_COMMENT_DATA)('</p>')
          ScPsiDocToken(DOC_WHITESPACE)('\n ')
          ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
          ScPsiDocToken(DOC_WHITESPACE)('  ')
          ScPsiDocToken(DOC_COMMENT_DATA)('<p>')
          ScPsiDocToken(DOC_WHITESPACE)('\n      ')
          ScPsiDocToken(DOC_COMMENT_DATA)('In the following example the definition of')
          ScPsiDocToken(DOC_WHITESPACE)('\n ')
          ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
          ScPsiDocToken(DOC_WHITESPACE)('    ')
          ScPsiDocToken(DOC_COMMENT_DATA)('<code>succ</code> is a shorthand for the anonymous class definition')
          ScPsiDocToken(DOC_WHITESPACE)('\n ')
          ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
          ScPsiDocToken(DOC_WHITESPACE)('    ')
          ScPsiDocToken(DOC_COMMENT_DATA)('<code>anonfun1</code>:')
          ScPsiDocToken(DOC_WHITESPACE)('\n ')
          ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
          ScPsiDocToken(DOC_WHITESPACE)('  ')
          ScPsiDocToken(DOC_COMMENT_DATA)('</p>')
          ScPsiDocToken(DOC_WHITESPACE)('\n ')
          ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
          ScPsiDocToken(DOC_WHITESPACE)('  ')
          ScPsiDocToken(DOC_COMMENT_DATA)('<pre>')
          ScPsiDocToken(DOC_WHITESPACE)('\n ')
          ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
          ScPsiDocToken(DOC_WHITESPACE)('  ')
          ScPsiDocToken(DOC_COMMENT_DATA)('<b>object</b> Main <b>extends</b> App {')
          ScPsiDocToken(DOC_WHITESPACE)('\n ')
          ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
          ScPsiDocToken(DOC_WHITESPACE)('\n ')
          ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
          ScPsiDocToken(DOC_WHITESPACE)('    ')
          ScPsiDocToken(DOC_COMMENT_DATA)('<b>val</b> succ ')
          ScPsiDocToken(DOC_HEADER 256)('=')
          ScPsiDocToken(DOC_COMMENT_DATA)(' (x: Int) ')
          ScPsiDocToken(DOC_HEADER 256)('=')
          ScPsiDocToken(DOC_COMMENT_DATA)('> x + 1')
          ScPsiDocToken(DOC_WHITESPACE)('\n ')
          ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
          ScPsiDocToken(DOC_WHITESPACE)('\n ')
          ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
          ScPsiDocToken(DOC_WHITESPACE)('    ')
          ScPsiDocToken(DOC_COMMENT_DATA)('<b>val</b> anonfun1 ')
          ScPsiDocToken(DOC_HEADER 256)('=')
          ScPsiDocToken(DOC_COMMENT_DATA)(' <b>new</b> Function1[Int, Int] {')
          ScPsiDocToken(DOC_WHITESPACE)('\n ')
          ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
          ScPsiDocToken(DOC_WHITESPACE)('      ')
          ScPsiDocToken(DOC_COMMENT_DATA)('<b>def</b> apply(x: Int): Int ')
          ScPsiDocToken(DOC_HEADER 256)('=')
          ScPsiDocToken(DOC_COMMENT_DATA)(' x + 1')
          ScPsiDocToken(DOC_WHITESPACE)('\n ')
          ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
          ScPsiDocToken(DOC_WHITESPACE)('    ')
          ScPsiDocToken(DOC_COMMENT_DATA)('}')
          ScPsiDocToken(DOC_WHITESPACE)('\n ')
          ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
          ScPsiDocToken(DOC_WHITESPACE)('\n ')
          ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
          ScPsiDocToken(DOC_WHITESPACE)('    ')
          ScPsiDocToken(DOC_COMMENT_DATA)('println(succ(0))')
          ScPsiDocToken(DOC_WHITESPACE)('\n ')
          ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
          ScPsiDocToken(DOC_WHITESPACE)('    ')
          ScPsiDocToken(DOC_COMMENT_DATA)('println(anonfun1(0))')
          ScPsiDocToken(DOC_WHITESPACE)('\n ')
          ScPsiDocToken(DOC_COMMENT_LEADING_ASTERISKS)('*')
          ScPsiDocToken(DOC_WHITESPACE)('  ')
          ScPsiDocToken(DOC_COMMENT_DATA)('}</pre>')
          ScPsiDocToken(DOC_WHITESPACE)('\n ')
        ScPsiDocToken(DOC_COMMENT_END)('*/')
      PsiWhiteSpace('\n')
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      PsiElement(trait)('trait')
      PsiWhiteSpace(' ')
      PsiElement(identifier)('Function1')
      TypeParameterClause
        PsiElement([)('[')
        TypeParameter: T1
          AnnotationsList
            Annotation
              PsiElement(@)('@')
              AnnotationExpression
                ConstructorInvocation
                  SimpleType: specialized
                    CodeReferenceElement: specialized
                      PsiElement(identifier)('specialized')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('-')
          PsiElement(identifier)('T1')
        PsiElement(,)(',')
        PsiWhiteSpace(' ')
        TypeParameter: R
          AnnotationsList
            Annotation
              PsiElement(@)('@')
              AnnotationExpression
                ConstructorInvocation
                  SimpleType: specialized
                    CodeReferenceElement: specialized
                      PsiElement(identifier)('specialized')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('+')
          PsiElement(identifier)('R')
        PsiElement(])(']')
      PsiWhiteSpace(' ')
      ExtendsBlock
        PsiElement(extends)('extends')
        PsiWhiteSpace(' ')
        TemplateParents
          ConstructorInvocation
            SimpleType: AnyRef
              CodeReferenceElement: AnyRef
                PsiElement(identifier)('AnyRef')
        PsiWhiteSpace(' ')
        ScTemplateBody
          PsiElement({)('{')
          PsiWhiteSpace(' ')
          SelfType: self
            PsiElement(identifier)('self')
            PsiWhiteSpace(' ')
            PsiElement(=>)('=>')
          PsiWhiteSpace('\n  ')
          ScFunctionDeclaration: apply
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(def)('def')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('apply')
            Parameters
              ParametersClause
                PsiElement(()('(')
                Parameter: v1
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(identifier)('v1')
                  PsiElement(:)(':')
                  ParameterType
                    SimpleType: T1
                      CodeReferenceElement: T1
                        PsiElement(identifier)('T1')
                PsiElement())(')')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            SimpleType: R
              CodeReferenceElement: R
                PsiElement(identifier)('R')
          PsiWhiteSpace('\n  ')
          ScFunctionDefinition: toString
            AnnotationsList
              <empty list>
            Modifiers
              PsiElement(override)('override')
            PsiWhiteSpace(' ')
            PsiElement(def)('def')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('toString')
            Parameters
              ParametersClause
                PsiElement(()('(')
                PsiElement())(')')
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace(' ')
            StringLiteral
              PsiElement(string content)('"<function>"')
          PsiWhiteSpace('\n\n  ')
          ScFunctionDefinition: compose
            DocComment
              ScPsiDocToken(DOC_COMMENT_START)('/**')
              ScDocParagraph
                ScPsiDocToken(DOC_WHITESPACE)(' ')
                ScPsiDocToken(DOC_COMMENT_DATA)('(f compose g)(x) ')
                ScPsiDocToken(DOC_HEADER 256)('==')
                ScPsiDocToken(DOC_COMMENT_DATA)('  f(g(x))')
                ScPsiDocToken(DOC_WHITESPACE)('\n   ')
              ScPsiDocToken(DOC_COMMENT_END)('*/')
            PsiWhiteSpace('\n  ')
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(def)('def')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('compose')
            TypeParameterClause
              PsiElement([)('[')
              TypeParameter: A
                PsiElement(identifier)('A')
              PsiElement(])(']')
            Parameters
              ParametersClause
                PsiElement(()('(')
                Parameter: g
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(identifier)('g')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    FunctionalType: A => T1
                      SimpleType: A
                        CodeReferenceElement: A
                          PsiElement(identifier)('A')
                      PsiWhiteSpace(' ')
                      PsiElement(=>)('=>')
                      PsiWhiteSpace(' ')
                      SimpleType: T1
                        CodeReferenceElement: T1
                          PsiElement(identifier)('T1')
                PsiElement())(')')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            FunctionalType: A => R
              SimpleType: A
                CodeReferenceElement: A
                  PsiElement(identifier)('A')
              PsiWhiteSpace(' ')
              PsiElement(=>)('=>')
              PsiWhiteSpace(' ')
              SimpleType: R
                CodeReferenceElement: R
                  PsiElement(identifier)('R')
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace(' ')
            BlockExpression
              PsiElement({)('{')
              PsiWhiteSpace(' ')
              FunctionExpression
                Parameters
                  ParametersClause
                    Parameter: x
                      PsiElement(identifier)('x')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                BlockOfExpressions
                  MethodCall
                    ReferenceExpression: apply
                      PsiElement(identifier)('apply')
                    ArgumentList
                      PsiElement(()('(')
                      MethodCall
                        ReferenceExpression: g
                          PsiElement(identifier)('g')
                        ArgumentList
                          PsiElement(()('(')
                          ReferenceExpression: x
                            PsiElement(identifier)('x')
                          PsiElement())(')')
                      PsiElement())(')')
              PsiWhiteSpace(' ')
              PsiElement(})('}')
          PsiWhiteSpace('\n\n  ')
          ScFunctionDefinition: andThen
            DocComment
              ScPsiDocToken(DOC_COMMENT_START)('/**')
              ScDocParagraph
                ScPsiDocToken(DOC_WHITESPACE)(' ')
                ScPsiDocToken(DOC_COMMENT_DATA)('(f andThen g)(x) ')
                ScPsiDocToken(DOC_HEADER 256)('==')
                ScPsiDocToken(DOC_COMMENT_DATA)('  g(f(x))')
                ScPsiDocToken(DOC_WHITESPACE)('\n   ')
              ScPsiDocToken(DOC_COMMENT_END)('*/')
            PsiWhiteSpace('\n  ')
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(def)('def')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('andThen')
            TypeParameterClause
              PsiElement([)('[')
              TypeParameter: A
                PsiElement(identifier)('A')
              PsiElement(])(']')
            Parameters
              ParametersClause
                PsiElement(()('(')
                Parameter: g
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(identifier)('g')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    FunctionalType: R => A
                      SimpleType: R
                        CodeReferenceElement: R
                          PsiElement(identifier)('R')
                      PsiWhiteSpace(' ')
                      PsiElement(=>)('=>')
                      PsiWhiteSpace(' ')
                      SimpleType: A
                        CodeReferenceElement: A
                          PsiElement(identifier)('A')
                PsiElement())(')')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            FunctionalType: T1 => A
              SimpleType: T1
                CodeReferenceElement: T1
                  PsiElement(identifier)('T1')
              PsiWhiteSpace(' ')
              PsiElement(=>)('=>')
              PsiWhiteSpace(' ')
              SimpleType: A
                CodeReferenceElement: A
                  PsiElement(identifier)('A')
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace(' ')
            BlockExpression
              PsiElement({)('{')
              PsiWhiteSpace(' ')
              FunctionExpression
                Parameters
                  ParametersClause
                    Parameter: x
                      PsiElement(identifier)('x')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                BlockOfExpressions
                  MethodCall
                    ReferenceExpression: g
                      PsiElement(identifier)('g')
                    ArgumentList
                      PsiElement(()('(')
                      MethodCall
                        ReferenceExpression: apply
                          PsiElement(identifier)('apply')
                        ArgumentList
                          PsiElement(()('(')
                          ReferenceExpression: x
                            PsiElement(identifier)('x')
                          PsiElement())(')')
                      PsiElement())(')')
              PsiWhiteSpace(' ')
              PsiElement(})('}')
          PsiWhiteSpace('\n\n')
          PsiElement(})('}')
