object App2 {

  inline def power(x: Long, n: Int): Long = {
    if (n == 0)
      1L
    else if (n % 2 == 1)
      x * power(x, n - 1)
    else {
      val y: Long = x * x
      power(y, n / 2)
    }
  }

  val x: Long = 5L

  power(x, 10)

//  def badPower(x: Long, n: Int): Long = {
//    power(x, n) // error:  Maximal number of successive inlines (32) exceeded, Maybe this is caused by a recursive inline method?
//  }

}

object App3 {

  inline def power(x: Long, inline n: Int): Long = {
    if (n == 0)
      1L
    else if (n % 2 == 1)
      x * power(x, n - 1)
    else {
      val y: Long = x * x
      power(y, n / 2)
    }
  }

  val x: Long = 5L
  val n: Int = 10

  power(x, 10)

//  def badPower(x: Long, n: Int): Long = {
//    power(x, n) // error: argument to inline parameter must be a known value
//  }

}


object App4 {

  inline def power(x: Long, n: Int): Long = {
    inline if (n == 0)
      1L
    else inline if (n % 2 == 1)
      x * power(x, n - 1)
    else {
      val y: Long = x * x
      power(y, n / 2)
    }
  }

  val x: Long = 5L
  val n: Int = 10

  power(x, 10)

//  def badPower(x: Long, n: Int): Long = {
//    power(x, n) // error: cannot reduce inline if
//  }

}

-----
ScalaFile
  ScObject: App2
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('App2')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: power
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(inline)('inline')
          PsiWhiteSpace(' ')
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('power')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: x
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Long
                    CodeReferenceElement: Long
                      PsiElement(identifier)('Long')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              Parameter: n
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('n')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Int
                    CodeReferenceElement: Int
                      PsiElement(identifier)('Int')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Long
            CodeReferenceElement: Long
              PsiElement(identifier)('Long')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          BlockExpression
            PsiElement({)('{')
            PsiWhiteSpace('\n    ')
            IfStatement
              PsiElement(if)('if')
              PsiWhiteSpace(' ')
              PsiElement(()('(')
              InfixExpression
                ReferenceExpression: n
                  PsiElement(identifier)('n')
                PsiWhiteSpace(' ')
                ReferenceExpression: ==
                  PsiElement(identifier)('==')
                PsiWhiteSpace(' ')
                IntegerLiteral
                  PsiElement(integer)('0')
              PsiElement())(')')
              PsiWhiteSpace('\n      ')
              LongLiteral
                PsiElement(long)('1L')
              PsiWhiteSpace('\n    ')
              PsiElement(else)('else')
              PsiWhiteSpace(' ')
              IfStatement
                PsiElement(if)('if')
                PsiWhiteSpace(' ')
                PsiElement(()('(')
                InfixExpression
                  InfixExpression
                    ReferenceExpression: n
                      PsiElement(identifier)('n')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: %
                      PsiElement(identifier)('%')
                    PsiWhiteSpace(' ')
                    IntegerLiteral
                      PsiElement(integer)('2')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: ==
                    PsiElement(identifier)('==')
                  PsiWhiteSpace(' ')
                  IntegerLiteral
                    PsiElement(integer)('1')
                PsiElement())(')')
                PsiWhiteSpace('\n      ')
                InfixExpression
                  ReferenceExpression: x
                    PsiElement(identifier)('x')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: *
                    PsiElement(identifier)('*')
                  PsiWhiteSpace(' ')
                  MethodCall
                    ReferenceExpression: power
                      PsiElement(identifier)('power')
                    ArgumentList
                      PsiElement(()('(')
                      ReferenceExpression: x
                        PsiElement(identifier)('x')
                      PsiElement(,)(',')
                      PsiWhiteSpace(' ')
                      InfixExpression
                        ReferenceExpression: n
                          PsiElement(identifier)('n')
                        PsiWhiteSpace(' ')
                        ReferenceExpression: -
                          PsiElement(identifier)('-')
                        PsiWhiteSpace(' ')
                        IntegerLiteral
                          PsiElement(integer)('1')
                      PsiElement())(')')
                PsiWhiteSpace('\n    ')
                PsiElement(else)('else')
                PsiWhiteSpace(' ')
                BlockExpression
                  PsiElement({)('{')
                  PsiWhiteSpace('\n      ')
                  ScPatternDefinition: y
                    AnnotationsList
                      <empty list>
                    Modifiers
                      <empty list>
                    PsiElement(val)('val')
                    PsiWhiteSpace(' ')
                    ListOfPatterns
                      ReferencePattern: y
                        PsiElement(identifier)('y')
                    PsiElement(:)(':')
                    PsiWhiteSpace(' ')
                    SimpleType: Long
                      CodeReferenceElement: Long
                        PsiElement(identifier)('Long')
                    PsiWhiteSpace(' ')
                    PsiElement(=)('=')
                    PsiWhiteSpace(' ')
                    InfixExpression
                      ReferenceExpression: x
                        PsiElement(identifier)('x')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: *
                        PsiElement(identifier)('*')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: x
                        PsiElement(identifier)('x')
                  PsiWhiteSpace('\n      ')
                  MethodCall
                    ReferenceExpression: power
                      PsiElement(identifier)('power')
                    ArgumentList
                      PsiElement(()('(')
                      ReferenceExpression: y
                        PsiElement(identifier)('y')
                      PsiElement(,)(',')
                      PsiWhiteSpace(' ')
                      InfixExpression
                        ReferenceExpression: n
                          PsiElement(identifier)('n')
                        PsiWhiteSpace(' ')
                        ReferenceExpression: /
                          PsiElement(identifier)('/')
                        PsiWhiteSpace(' ')
                        IntegerLiteral
                          PsiElement(integer)('2')
                      PsiElement())(')')
                  PsiWhiteSpace('\n    ')
                  PsiElement(})('}')
            PsiWhiteSpace('\n  ')
            PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        ScPatternDefinition: x
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: x
              PsiElement(identifier)('x')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Long
            CodeReferenceElement: Long
              PsiElement(identifier)('Long')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          LongLiteral
            PsiElement(long)('5L')
        PsiWhiteSpace('\n\n  ')
        MethodCall
          ReferenceExpression: power
            PsiElement(identifier)('power')
          ArgumentList
            PsiElement(()('(')
            ReferenceExpression: x
              PsiElement(identifier)('x')
            PsiElement(,)(',')
            PsiWhiteSpace(' ')
            IntegerLiteral
              PsiElement(integer)('10')
            PsiElement())(')')
        PsiWhiteSpace('\n\n')
        PsiComment(comment)('//  def badPower(x: Long, n: Int): Long = {')
        PsiWhiteSpace('\n')
        PsiComment(comment)('//    power(x, n) // error:  Maximal number of successive inlines (32) exceeded, Maybe this is caused by a recursive inline method?')
        PsiWhiteSpace('\n')
        PsiComment(comment)('//  }')
        PsiWhiteSpace('\n\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScObject: App3
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('App3')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: power
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(inline)('inline')
          PsiWhiteSpace(' ')
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('power')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: x
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Long
                    CodeReferenceElement: Long
                      PsiElement(identifier)('Long')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              Parameter: n
                AnnotationsList
                  <empty list>
                Modifiers
                  PsiElement(inline)('inline')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('n')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Int
                    CodeReferenceElement: Int
                      PsiElement(identifier)('Int')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Long
            CodeReferenceElement: Long
              PsiElement(identifier)('Long')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          BlockExpression
            PsiElement({)('{')
            PsiWhiteSpace('\n    ')
            IfStatement
              PsiElement(if)('if')
              PsiWhiteSpace(' ')
              PsiElement(()('(')
              InfixExpression
                ReferenceExpression: n
                  PsiElement(identifier)('n')
                PsiWhiteSpace(' ')
                ReferenceExpression: ==
                  PsiElement(identifier)('==')
                PsiWhiteSpace(' ')
                IntegerLiteral
                  PsiElement(integer)('0')
              PsiElement())(')')
              PsiWhiteSpace('\n      ')
              LongLiteral
                PsiElement(long)('1L')
              PsiWhiteSpace('\n    ')
              PsiElement(else)('else')
              PsiWhiteSpace(' ')
              IfStatement
                PsiElement(if)('if')
                PsiWhiteSpace(' ')
                PsiElement(()('(')
                InfixExpression
                  InfixExpression
                    ReferenceExpression: n
                      PsiElement(identifier)('n')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: %
                      PsiElement(identifier)('%')
                    PsiWhiteSpace(' ')
                    IntegerLiteral
                      PsiElement(integer)('2')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: ==
                    PsiElement(identifier)('==')
                  PsiWhiteSpace(' ')
                  IntegerLiteral
                    PsiElement(integer)('1')
                PsiElement())(')')
                PsiWhiteSpace('\n      ')
                InfixExpression
                  ReferenceExpression: x
                    PsiElement(identifier)('x')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: *
                    PsiElement(identifier)('*')
                  PsiWhiteSpace(' ')
                  MethodCall
                    ReferenceExpression: power
                      PsiElement(identifier)('power')
                    ArgumentList
                      PsiElement(()('(')
                      ReferenceExpression: x
                        PsiElement(identifier)('x')
                      PsiElement(,)(',')
                      PsiWhiteSpace(' ')
                      InfixExpression
                        ReferenceExpression: n
                          PsiElement(identifier)('n')
                        PsiWhiteSpace(' ')
                        ReferenceExpression: -
                          PsiElement(identifier)('-')
                        PsiWhiteSpace(' ')
                        IntegerLiteral
                          PsiElement(integer)('1')
                      PsiElement())(')')
                PsiWhiteSpace('\n    ')
                PsiElement(else)('else')
                PsiWhiteSpace(' ')
                BlockExpression
                  PsiElement({)('{')
                  PsiWhiteSpace('\n      ')
                  ScPatternDefinition: y
                    AnnotationsList
                      <empty list>
                    Modifiers
                      <empty list>
                    PsiElement(val)('val')
                    PsiWhiteSpace(' ')
                    ListOfPatterns
                      ReferencePattern: y
                        PsiElement(identifier)('y')
                    PsiElement(:)(':')
                    PsiWhiteSpace(' ')
                    SimpleType: Long
                      CodeReferenceElement: Long
                        PsiElement(identifier)('Long')
                    PsiWhiteSpace(' ')
                    PsiElement(=)('=')
                    PsiWhiteSpace(' ')
                    InfixExpression
                      ReferenceExpression: x
                        PsiElement(identifier)('x')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: *
                        PsiElement(identifier)('*')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: x
                        PsiElement(identifier)('x')
                  PsiWhiteSpace('\n      ')
                  MethodCall
                    ReferenceExpression: power
                      PsiElement(identifier)('power')
                    ArgumentList
                      PsiElement(()('(')
                      ReferenceExpression: y
                        PsiElement(identifier)('y')
                      PsiElement(,)(',')
                      PsiWhiteSpace(' ')
                      InfixExpression
                        ReferenceExpression: n
                          PsiElement(identifier)('n')
                        PsiWhiteSpace(' ')
                        ReferenceExpression: /
                          PsiElement(identifier)('/')
                        PsiWhiteSpace(' ')
                        IntegerLiteral
                          PsiElement(integer)('2')
                      PsiElement())(')')
                  PsiWhiteSpace('\n    ')
                  PsiElement(})('}')
            PsiWhiteSpace('\n  ')
            PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        ScPatternDefinition: x
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: x
              PsiElement(identifier)('x')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Long
            CodeReferenceElement: Long
              PsiElement(identifier)('Long')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          LongLiteral
            PsiElement(long)('5L')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: n
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: n
              PsiElement(identifier)('n')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Int
            CodeReferenceElement: Int
              PsiElement(identifier)('Int')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          IntegerLiteral
            PsiElement(integer)('10')
        PsiWhiteSpace('\n\n  ')
        MethodCall
          ReferenceExpression: power
            PsiElement(identifier)('power')
          ArgumentList
            PsiElement(()('(')
            ReferenceExpression: x
              PsiElement(identifier)('x')
            PsiElement(,)(',')
            PsiWhiteSpace(' ')
            IntegerLiteral
              PsiElement(integer)('10')
            PsiElement())(')')
        PsiWhiteSpace('\n\n')
        PsiComment(comment)('//  def badPower(x: Long, n: Int): Long = {')
        PsiWhiteSpace('\n')
        PsiComment(comment)('//    power(x, n) // error: argument to inline parameter must be a known value')
        PsiWhiteSpace('\n')
        PsiComment(comment)('//  }')
        PsiWhiteSpace('\n\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n\n')
  ScObject: App4
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('App4')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: power
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(inline)('inline')
          PsiWhiteSpace(' ')
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('power')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: x
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Long
                    CodeReferenceElement: Long
                      PsiElement(identifier)('Long')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              Parameter: n
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('n')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Int
                    CodeReferenceElement: Int
                      PsiElement(identifier)('Int')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Long
            CodeReferenceElement: Long
              PsiElement(identifier)('Long')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          BlockExpression
            PsiElement({)('{')
            PsiWhiteSpace('\n    ')
            IfStatement
              PsiElement(inline)('inline')
              PsiWhiteSpace(' ')
              PsiElement(if)('if')
              PsiWhiteSpace(' ')
              PsiElement(()('(')
              InfixExpression
                ReferenceExpression: n
                  PsiElement(identifier)('n')
                PsiWhiteSpace(' ')
                ReferenceExpression: ==
                  PsiElement(identifier)('==')
                PsiWhiteSpace(' ')
                IntegerLiteral
                  PsiElement(integer)('0')
              PsiElement())(')')
              PsiWhiteSpace('\n      ')
              LongLiteral
                PsiElement(long)('1L')
              PsiWhiteSpace('\n    ')
              PsiElement(else)('else')
              PsiWhiteSpace(' ')
              IfStatement
                PsiElement(inline)('inline')
                PsiWhiteSpace(' ')
                PsiElement(if)('if')
                PsiWhiteSpace(' ')
                PsiElement(()('(')
                InfixExpression
                  InfixExpression
                    ReferenceExpression: n
                      PsiElement(identifier)('n')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: %
                      PsiElement(identifier)('%')
                    PsiWhiteSpace(' ')
                    IntegerLiteral
                      PsiElement(integer)('2')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: ==
                    PsiElement(identifier)('==')
                  PsiWhiteSpace(' ')
                  IntegerLiteral
                    PsiElement(integer)('1')
                PsiElement())(')')
                PsiWhiteSpace('\n      ')
                InfixExpression
                  ReferenceExpression: x
                    PsiElement(identifier)('x')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: *
                    PsiElement(identifier)('*')
                  PsiWhiteSpace(' ')
                  MethodCall
                    ReferenceExpression: power
                      PsiElement(identifier)('power')
                    ArgumentList
                      PsiElement(()('(')
                      ReferenceExpression: x
                        PsiElement(identifier)('x')
                      PsiElement(,)(',')
                      PsiWhiteSpace(' ')
                      InfixExpression
                        ReferenceExpression: n
                          PsiElement(identifier)('n')
                        PsiWhiteSpace(' ')
                        ReferenceExpression: -
                          PsiElement(identifier)('-')
                        PsiWhiteSpace(' ')
                        IntegerLiteral
                          PsiElement(integer)('1')
                      PsiElement())(')')
                PsiWhiteSpace('\n    ')
                PsiElement(else)('else')
                PsiWhiteSpace(' ')
                BlockExpression
                  PsiElement({)('{')
                  PsiWhiteSpace('\n      ')
                  ScPatternDefinition: y
                    AnnotationsList
                      <empty list>
                    Modifiers
                      <empty list>
                    PsiElement(val)('val')
                    PsiWhiteSpace(' ')
                    ListOfPatterns
                      ReferencePattern: y
                        PsiElement(identifier)('y')
                    PsiElement(:)(':')
                    PsiWhiteSpace(' ')
                    SimpleType: Long
                      CodeReferenceElement: Long
                        PsiElement(identifier)('Long')
                    PsiWhiteSpace(' ')
                    PsiElement(=)('=')
                    PsiWhiteSpace(' ')
                    InfixExpression
                      ReferenceExpression: x
                        PsiElement(identifier)('x')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: *
                        PsiElement(identifier)('*')
                      PsiWhiteSpace(' ')
                      ReferenceExpression: x
                        PsiElement(identifier)('x')
                  PsiWhiteSpace('\n      ')
                  MethodCall
                    ReferenceExpression: power
                      PsiElement(identifier)('power')
                    ArgumentList
                      PsiElement(()('(')
                      ReferenceExpression: y
                        PsiElement(identifier)('y')
                      PsiElement(,)(',')
                      PsiWhiteSpace(' ')
                      InfixExpression
                        ReferenceExpression: n
                          PsiElement(identifier)('n')
                        PsiWhiteSpace(' ')
                        ReferenceExpression: /
                          PsiElement(identifier)('/')
                        PsiWhiteSpace(' ')
                        IntegerLiteral
                          PsiElement(integer)('2')
                      PsiElement())(')')
                  PsiWhiteSpace('\n    ')
                  PsiElement(})('}')
            PsiWhiteSpace('\n  ')
            PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        ScPatternDefinition: x
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: x
              PsiElement(identifier)('x')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Long
            CodeReferenceElement: Long
              PsiElement(identifier)('Long')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          LongLiteral
            PsiElement(long)('5L')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: n
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: n
              PsiElement(identifier)('n')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Int
            CodeReferenceElement: Int
              PsiElement(identifier)('Int')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          IntegerLiteral
            PsiElement(integer)('10')
        PsiWhiteSpace('\n\n  ')
        MethodCall
          ReferenceExpression: power
            PsiElement(identifier)('power')
          ArgumentList
            PsiElement(()('(')
            ReferenceExpression: x
              PsiElement(identifier)('x')
            PsiElement(,)(',')
            PsiWhiteSpace(' ')
            IntegerLiteral
              PsiElement(integer)('10')
            PsiElement())(')')
        PsiWhiteSpace('\n\n')
        PsiComment(comment)('//  def badPower(x: Long, n: Int): Long = {')
        PsiWhiteSpace('\n')
        PsiComment(comment)('//    power(x, n) // error: cannot reduce inline if')
        PsiWhiteSpace('\n')
        PsiComment(comment)('//  }')
        PsiWhiteSpace('\n\n')
        PsiElement(})('}')
