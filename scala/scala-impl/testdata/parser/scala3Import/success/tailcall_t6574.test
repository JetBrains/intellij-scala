class Bad[X, Y](val v: Int) extends AnyVal {
  def vv = v
  @annotation.tailrec final def foo[Z](a: Int)(b: String): Unit = {
    this.foo[Z](a)(b)
  }

  @annotation.tailrec final def differentReceiver : Unit =
   {(); new Bad[X, Y](0)}.differentReceiver

  @annotation.tailrec final def differentReceiver2 : Unit = {
    if (true) {(); new Bad[X, Y](0)}.differentReceiver2
    else {(); new Bad[X, Y](0)}.differentReceiver2
  }

  @annotation.tailrec final def dependent[Z](a: Int)(b: String): b.type = {
    this.dependent[Z](a)(b)
  }
}

class HK[M[_]](val v: Int) extends AnyVal {
  def hk[N[_]]: Unit = if (false) hk[M] else ()
}

-----
ScalaFile
  ScClass: Bad
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Bad')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: X
        PsiElement(identifier)('X')
      PsiElement(,)(',')
      PsiWhiteSpace(' ')
      TypeParameter: Y
        PsiElement(identifier)('Y')
      PsiElement(])(']')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        ParametersClause
          PsiElement(()('(')
          ClassParameter: v
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(val)('val')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('v')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            ParameterType
              SimpleType: Int
                CodeReferenceElement: Int
                  PsiElement(identifier)('Int')
          PsiElement())(')')
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          SimpleType: AnyVal
            CodeReferenceElement: AnyVal
              PsiElement(identifier)('AnyVal')
      PsiWhiteSpace(' ')
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: vv
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('vv')
          Parameters
            <empty list>
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: v
            PsiElement(identifier)('v')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: foo
          AnnotationsList
            Annotation
              PsiElement(@)('@')
              AnnotationExpression
                ConstructorInvocation
                  SimpleType: annotation.tailrec
                    CodeReferenceElement: annotation.tailrec
                      CodeReferenceElement: annotation
                        PsiElement(identifier)('annotation')
                      PsiElement(.)('.')
                      PsiElement(identifier)('tailrec')
          PsiWhiteSpace(' ')
          Modifiers
            PsiElement(final)('final')
          PsiWhiteSpace(' ')
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('foo')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: Z
              PsiElement(identifier)('Z')
            PsiElement(])(']')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: a
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('a')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Int
                    CodeReferenceElement: Int
                      PsiElement(identifier)('Int')
              PsiElement())(')')
            ParametersClause
              PsiElement(()('(')
              Parameter: b
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('b')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: String
                    CodeReferenceElement: String
                      PsiElement(identifier)('String')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Unit
            CodeReferenceElement: Unit
              PsiElement(identifier)('Unit')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          BlockExpression
            PsiElement({)('{')
            PsiWhiteSpace('\n    ')
            MethodCall
              MethodCall
                GenericCall
                  ReferenceExpression: this.foo
                    ThisReference
                      PsiElement(this)('this')
                    PsiElement(.)('.')
                    PsiElement(identifier)('foo')
                  TypeArgumentsList
                    PsiElement([)('[')
                    SimpleType: Z
                      CodeReferenceElement: Z
                        PsiElement(identifier)('Z')
                    PsiElement(])(']')
                ArgumentList
                  PsiElement(()('(')
                  ReferenceExpression: a
                    PsiElement(identifier)('a')
                  PsiElement())(')')
              ArgumentList
                PsiElement(()('(')
                ReferenceExpression: b
                  PsiElement(identifier)('b')
                PsiElement())(')')
            PsiWhiteSpace('\n  ')
            PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: differentReceiver
          AnnotationsList
            Annotation
              PsiElement(@)('@')
              AnnotationExpression
                ConstructorInvocation
                  SimpleType: annotation.tailrec
                    CodeReferenceElement: annotation.tailrec
                      CodeReferenceElement: annotation
                        PsiElement(identifier)('annotation')
                      PsiElement(.)('.')
                      PsiElement(identifier)('tailrec')
          PsiWhiteSpace(' ')
          Modifiers
            PsiElement(final)('final')
          PsiWhiteSpace(' ')
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('differentReceiver')
          Parameters
            <empty list>
          PsiWhiteSpace(' ')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Unit
            CodeReferenceElement: Unit
              PsiElement(identifier)('Unit')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace('\n   ')
          ReferenceExpression: {(); new Bad[X, Y](0)}.differentReceiver
            BlockExpression
              PsiElement({)('{')
              UnitExpression
                PsiElement(()('(')
                PsiElement())(')')
              PsiElement(;)(';')
              PsiWhiteSpace(' ')
              ScNewTemplateDefinition: <anonymous>
                PsiElement(new)('new')
                PsiWhiteSpace(' ')
                ExtendsBlock
                  TemplateParents
                    ConstructorInvocation
                      ParametrizedType: Bad[X, Y]
                        SimpleType: Bad
                          CodeReferenceElement: Bad
                            PsiElement(identifier)('Bad')
                        TypeArgumentsList
                          PsiElement([)('[')
                          SimpleType: X
                            CodeReferenceElement: X
                              PsiElement(identifier)('X')
                          PsiElement(,)(',')
                          PsiWhiteSpace(' ')
                          SimpleType: Y
                            CodeReferenceElement: Y
                              PsiElement(identifier)('Y')
                          PsiElement(])(']')
                      ArgumentList
                        PsiElement(()('(')
                        IntegerLiteral
                          PsiElement(integer)('0')
                        PsiElement())(')')
              PsiElement(})('}')
            PsiElement(.)('.')
            PsiElement(identifier)('differentReceiver')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: differentReceiver2
          AnnotationsList
            Annotation
              PsiElement(@)('@')
              AnnotationExpression
                ConstructorInvocation
                  SimpleType: annotation.tailrec
                    CodeReferenceElement: annotation.tailrec
                      CodeReferenceElement: annotation
                        PsiElement(identifier)('annotation')
                      PsiElement(.)('.')
                      PsiElement(identifier)('tailrec')
          PsiWhiteSpace(' ')
          Modifiers
            PsiElement(final)('final')
          PsiWhiteSpace(' ')
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('differentReceiver2')
          Parameters
            <empty list>
          PsiWhiteSpace(' ')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Unit
            CodeReferenceElement: Unit
              PsiElement(identifier)('Unit')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          BlockExpression
            PsiElement({)('{')
            PsiWhiteSpace('\n    ')
            IfStatement
              PsiElement(if)('if')
              PsiWhiteSpace(' ')
              PsiElement(()('(')
              BooleanLiteral
                PsiElement(true)('true')
              PsiElement())(')')
              PsiWhiteSpace(' ')
              ReferenceExpression: {(); new Bad[X, Y](0)}.differentReceiver2
                BlockExpression
                  PsiElement({)('{')
                  UnitExpression
                    PsiElement(()('(')
                    PsiElement())(')')
                  PsiElement(;)(';')
                  PsiWhiteSpace(' ')
                  ScNewTemplateDefinition: <anonymous>
                    PsiElement(new)('new')
                    PsiWhiteSpace(' ')
                    ExtendsBlock
                      TemplateParents
                        ConstructorInvocation
                          ParametrizedType: Bad[X, Y]
                            SimpleType: Bad
                              CodeReferenceElement: Bad
                                PsiElement(identifier)('Bad')
                            TypeArgumentsList
                              PsiElement([)('[')
                              SimpleType: X
                                CodeReferenceElement: X
                                  PsiElement(identifier)('X')
                              PsiElement(,)(',')
                              PsiWhiteSpace(' ')
                              SimpleType: Y
                                CodeReferenceElement: Y
                                  PsiElement(identifier)('Y')
                              PsiElement(])(']')
                          ArgumentList
                            PsiElement(()('(')
                            IntegerLiteral
                              PsiElement(integer)('0')
                            PsiElement())(')')
                  PsiElement(})('}')
                PsiElement(.)('.')
                PsiElement(identifier)('differentReceiver2')
              PsiWhiteSpace('\n    ')
              PsiElement(else)('else')
              PsiWhiteSpace(' ')
              ReferenceExpression: {(); new Bad[X, Y](0)}.differentReceiver2
                BlockExpression
                  PsiElement({)('{')
                  UnitExpression
                    PsiElement(()('(')
                    PsiElement())(')')
                  PsiElement(;)(';')
                  PsiWhiteSpace(' ')
                  ScNewTemplateDefinition: <anonymous>
                    PsiElement(new)('new')
                    PsiWhiteSpace(' ')
                    ExtendsBlock
                      TemplateParents
                        ConstructorInvocation
                          ParametrizedType: Bad[X, Y]
                            SimpleType: Bad
                              CodeReferenceElement: Bad
                                PsiElement(identifier)('Bad')
                            TypeArgumentsList
                              PsiElement([)('[')
                              SimpleType: X
                                CodeReferenceElement: X
                                  PsiElement(identifier)('X')
                              PsiElement(,)(',')
                              PsiWhiteSpace(' ')
                              SimpleType: Y
                                CodeReferenceElement: Y
                                  PsiElement(identifier)('Y')
                              PsiElement(])(']')
                          ArgumentList
                            PsiElement(()('(')
                            IntegerLiteral
                              PsiElement(integer)('0')
                            PsiElement())(')')
                  PsiElement(})('}')
                PsiElement(.)('.')
                PsiElement(identifier)('differentReceiver2')
            PsiWhiteSpace('\n  ')
            PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: dependent
          AnnotationsList
            Annotation
              PsiElement(@)('@')
              AnnotationExpression
                ConstructorInvocation
                  SimpleType: annotation.tailrec
                    CodeReferenceElement: annotation.tailrec
                      CodeReferenceElement: annotation
                        PsiElement(identifier)('annotation')
                      PsiElement(.)('.')
                      PsiElement(identifier)('tailrec')
          PsiWhiteSpace(' ')
          Modifiers
            PsiElement(final)('final')
          PsiWhiteSpace(' ')
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('dependent')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: Z
              PsiElement(identifier)('Z')
            PsiElement(])(']')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: a
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('a')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Int
                    CodeReferenceElement: Int
                      PsiElement(identifier)('Int')
              PsiElement())(')')
            ParametersClause
              PsiElement(()('(')
              Parameter: b
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('b')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: String
                    CodeReferenceElement: String
                      PsiElement(identifier)('String')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: b.type
            CodeReferenceElement: b
              PsiElement(identifier)('b')
            PsiElement(.)('.')
            PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          BlockExpression
            PsiElement({)('{')
            PsiWhiteSpace('\n    ')
            MethodCall
              MethodCall
                GenericCall
                  ReferenceExpression: this.dependent
                    ThisReference
                      PsiElement(this)('this')
                    PsiElement(.)('.')
                    PsiElement(identifier)('dependent')
                  TypeArgumentsList
                    PsiElement([)('[')
                    SimpleType: Z
                      CodeReferenceElement: Z
                        PsiElement(identifier)('Z')
                    PsiElement(])(']')
                ArgumentList
                  PsiElement(()('(')
                  ReferenceExpression: a
                    PsiElement(identifier)('a')
                  PsiElement())(')')
              ArgumentList
                PsiElement(()('(')
                ReferenceExpression: b
                  PsiElement(identifier)('b')
                PsiElement())(')')
            PsiWhiteSpace('\n  ')
            PsiElement(})('}')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScClass: HK
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('HK')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: M
        PsiElement(identifier)('M')
        TypeParameterClause
          PsiElement([)('[')
          TypeParameter: _
            PsiElement(_)('_')
          PsiElement(])(']')
      PsiElement(])(']')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        ParametersClause
          PsiElement(()('(')
          ClassParameter: v
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(val)('val')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('v')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            ParameterType
              SimpleType: Int
                CodeReferenceElement: Int
                  PsiElement(identifier)('Int')
          PsiElement())(')')
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          SimpleType: AnyVal
            CodeReferenceElement: AnyVal
              PsiElement(identifier)('AnyVal')
      PsiWhiteSpace(' ')
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: hk
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('hk')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: N
              PsiElement(identifier)('N')
              TypeParameterClause
                PsiElement([)('[')
                TypeParameter: _
                  PsiElement(_)('_')
                PsiElement(])(']')
            PsiElement(])(']')
          Parameters
            <empty list>
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Unit
            CodeReferenceElement: Unit
              PsiElement(identifier)('Unit')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          IfStatement
            PsiElement(if)('if')
            PsiWhiteSpace(' ')
            PsiElement(()('(')
            BooleanLiteral
              PsiElement(false)('false')
            PsiElement())(')')
            PsiWhiteSpace(' ')
            GenericCall
              ReferenceExpression: hk
                PsiElement(identifier)('hk')
              TypeArgumentsList
                PsiElement([)('[')
                SimpleType: M
                  CodeReferenceElement: M
                    PsiElement(identifier)('M')
                PsiElement(])(']')
            PsiWhiteSpace(' ')
            PsiElement(else)('else')
            PsiWhiteSpace(' ')
            UnitExpression
              PsiElement(()('(')
              PsiElement())(')')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
