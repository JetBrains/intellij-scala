trait NewType[X]

object Test {
  // change return type to Foo and it compiles.
  implicit def Unwrap[X](n: NewType[X]): X = sys.error("")
  class Foo(val a: Int)
  def test(f: NewType[Foo]) = f.a
}


-----
ScalaFile
  ScTrait: NewType
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('NewType')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: X
        PsiElement(identifier)('X')
      PsiElement(])(']')
    ExtendsBlock
      <empty list>
  PsiWhiteSpace('\n\n')
  ScObject: Test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: Unwrap
          PsiComment(comment)('// change return type to Foo and it compiles.')
          PsiWhiteSpace('\n  ')
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(implicit)('implicit')
          PsiWhiteSpace(' ')
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Unwrap')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: X
              PsiElement(identifier)('X')
            PsiElement(])(']')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: n
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('n')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  ParametrizedType: NewType[X]
                    SimpleType: NewType
                      CodeReferenceElement: NewType
                        PsiElement(identifier)('NewType')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: X
                        CodeReferenceElement: X
                          PsiElement(identifier)('X')
                      PsiElement(])(']')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: X
            CodeReferenceElement: X
              PsiElement(identifier)('X')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: sys.error
              ReferenceExpression: sys
                PsiElement(identifier)('sys')
              PsiElement(.)('.')
              PsiElement(identifier)('error')
            ArgumentList
              PsiElement(()('(')
              StringLiteral
                PsiElement(string content)('""')
              PsiElement())(')')
        PsiWhiteSpace('\n  ')
        ScClass: Foo
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(class)('class')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Foo')
          PrimaryConstructor
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            Parameters
              ParametersClause
                PsiElement(()('(')
                ClassParameter: a
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(val)('val')
                  PsiWhiteSpace(' ')
                  PsiElement(identifier)('a')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    SimpleType: Int
                      CodeReferenceElement: Int
                        PsiElement(identifier)('Int')
                PsiElement())(')')
          ExtendsBlock
            <empty list>
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: test
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('test')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: f
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('f')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  ParametrizedType: NewType[Foo]
                    SimpleType: NewType
                      CodeReferenceElement: NewType
                        PsiElement(identifier)('NewType')
                    TypeArgumentsList
                      PsiElement([)('[')
                      SimpleType: Foo
                        CodeReferenceElement: Foo
                          PsiElement(identifier)('Foo')
                      PsiElement(])(']')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: f.a
            ReferenceExpression: f
              PsiElement(identifier)('f')
            PsiElement(.)('.')
            PsiElement(identifier)('a')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
