trait Expr[T]
  case class IntExpr() extends Expr[Int]

  def flag: Boolean = ???

  def foo[T](ev: Expr[T]): Int | T = ev match
    case IntExpr() =>
      if flag then
        val i: T = ???
        i
      else
        (??? : Int)
-----
ScalaFile
  ScTrait: Expr
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Expr')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: T
        PsiElement(identifier)('T')
      PsiElement(])(']')
    ExtendsBlock
      <empty list>
  PsiWhiteSpace('\n  ')
  ScClass: IntExpr
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(case)('case')
    PsiWhiteSpace(' ')
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('IntExpr')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        ParametersClause
          PsiElement(()('(')
          PsiElement())(')')
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          ParametrizedType: Expr[Int]
            SimpleType: Expr
              CodeReferenceElement: Expr
                PsiElement(identifier)('Expr')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: Int
                CodeReferenceElement: Int
                  PsiElement(identifier)('Int')
              PsiElement(])(']')
  PsiWhiteSpace('\n\n  ')
  ScFunctionDefinition: flag
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(def)('def')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('flag')
    Parameters
      <empty list>
    PsiElement(:)(':')
    PsiWhiteSpace(' ')
    SimpleType: Boolean
      CodeReferenceElement: Boolean
        PsiElement(identifier)('Boolean')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    ReferenceExpression: ???
      PsiElement(identifier)('???')
  PsiWhiteSpace('\n\n  ')
  ScFunctionDefinition: foo
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(def)('def')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('foo')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: T
        PsiElement(identifier)('T')
      PsiElement(])(']')
    Parameters
      ParametersClause
        PsiElement(()('(')
        Parameter: ev
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(identifier)('ev')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParameterType
            ParametrizedType: Expr[T]
              SimpleType: Expr
                CodeReferenceElement: Expr
                  PsiElement(identifier)('Expr')
              TypeArgumentsList
                PsiElement([)('[')
                SimpleType: T
                  CodeReferenceElement: T
                    PsiElement(identifier)('T')
                PsiElement(])(']')
        PsiElement())(')')
    PsiElement(:)(':')
    PsiWhiteSpace(' ')
    InfixType: Int | T
      SimpleType: Int
        CodeReferenceElement: Int
          PsiElement(identifier)('Int')
      PsiWhiteSpace(' ')
      CodeReferenceElement: |
        PsiElement(identifier)('|')
      PsiWhiteSpace(' ')
      SimpleType: T
        CodeReferenceElement: T
          PsiElement(identifier)('T')
    PsiWhiteSpace(' ')
    PsiElement(=)('=')
    PsiWhiteSpace(' ')
    MatchStatement
      ReferenceExpression: ev
        PsiElement(identifier)('ev')
      PsiWhiteSpace(' ')
      PsiElement(match)('match')
      PsiWhiteSpace('\n    ')
      CaseClauses
        CaseClause
          PsiElement(case)('case')
          PsiWhiteSpace(' ')
          ConstructorPattern
            CodeReferenceElement: IntExpr
              PsiElement(identifier)('IntExpr')
            Pattern Argument List
              PsiElement(()('(')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(=>)('=>')
          PsiWhiteSpace('\n      ')
          BlockOfExpressions
            IfStatement
              PsiElement(if)('if')
              PsiWhiteSpace(' ')
              ReferenceExpression: flag
                PsiElement(identifier)('flag')
              PsiWhiteSpace(' ')
              PsiElement(then)('then')
              BlockExpression
                PsiWhiteSpace('\n        ')
                ScPatternDefinition: i
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(val)('val')
                  PsiWhiteSpace(' ')
                  ListOfPatterns
                    ReferencePattern: i
                      PsiElement(identifier)('i')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  SimpleType: T
                    CodeReferenceElement: T
                      PsiElement(identifier)('T')
                  PsiWhiteSpace(' ')
                  PsiElement(=)('=')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: ???
                    PsiElement(identifier)('???')
                PsiWhiteSpace('\n        ')
                ReferenceExpression: i
                  PsiElement(identifier)('i')
              PsiWhiteSpace('\n      ')
              PsiElement(else)('else')
              PsiWhiteSpace('\n        ')
              ExpressionInParenthesis
                PsiElement(()('(')
                TypedExpression
                  ReferenceExpression: ???
                    PsiElement(identifier)('???')
                  PsiWhiteSpace(' ')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  SimpleType: Int
                    CodeReferenceElement: Int
                      PsiElement(identifier)('Int')
                PsiElement())(')')
