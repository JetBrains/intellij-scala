package typeLambdas

object Test {

  type T[+X, Y] = Map[Y, X]

  type CTL = [X] =>> [Y] =>> (X, Y)
  type T3 = CTL[Int][String]

  type T2[+X <: X => X] = Any  // OK - variance is not checked in param bounds
}
-----
ScalaFile
  ScPackaging
    PsiElement(package)('package')
    PsiWhiteSpace(' ')
    CodeReferenceElement: typeLambdas
      PsiElement(identifier)('typeLambdas')
    PsiWhiteSpace('\n\n')
    ScObject: Test
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      PsiElement(object)('object')
      PsiWhiteSpace(' ')
      PsiElement(identifier)('Test')
      PsiWhiteSpace(' ')
      ExtendsBlock
        ScTemplateBody
          PsiElement({)('{')
          PsiWhiteSpace('\n\n  ')
          ScTypeAliasDefinition: T
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(type)('type')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('T')
            TypeParameterClause
              PsiElement([)('[')
              TypeParameter: X
                PsiElement(identifier)('+')
                PsiElement(identifier)('X')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              TypeParameter: Y
                PsiElement(identifier)('Y')
              PsiElement(])(']')
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace(' ')
            ParametrizedType: Map[Y, X]
              SimpleType: Map
                CodeReferenceElement: Map
                  PsiElement(identifier)('Map')
              TypeArgumentsList
                PsiElement([)('[')
                SimpleType: Y
                  CodeReferenceElement: Y
                    PsiElement(identifier)('Y')
                PsiElement(,)(',')
                PsiWhiteSpace(' ')
                SimpleType: X
                  CodeReferenceElement: X
                    PsiElement(identifier)('X')
                PsiElement(])(']')
          PsiWhiteSpace('\n\n  ')
          ScTypeAliasDefinition: CTL
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(type)('type')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('CTL')
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace(' ')
            TypeLambda: [X] =>> [Y] =>> (X, Y)
              TypeParameterClause
                PsiElement([)('[')
                TypeParameter: X
                  PsiElement(identifier)('X')
                PsiElement(])(']')
              PsiWhiteSpace(' ')
              PsiElement(=>>)('=>>')
              PsiWhiteSpace(' ')
              TypeLambda: [Y] =>> (X, Y)
                TypeParameterClause
                  PsiElement([)('[')
                  TypeParameter: Y
                    PsiElement(identifier)('Y')
                  PsiElement(])(']')
                PsiWhiteSpace(' ')
                PsiElement(=>>)('=>>')
                PsiWhiteSpace(' ')
                TupleType: (X, Y)
                  PsiElement(()('(')
                  TypesList
                    SimpleType: X
                      CodeReferenceElement: X
                        PsiElement(identifier)('X')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    SimpleType: Y
                      CodeReferenceElement: Y
                        PsiElement(identifier)('Y')
                  PsiElement())(')')
          PsiWhiteSpace('\n  ')
          ScTypeAliasDefinition: T3
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(type)('type')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('T3')
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace(' ')
            ParametrizedType: CTL[Int][String]
              ParametrizedType: CTL[Int]
                SimpleType: CTL
                  CodeReferenceElement: CTL
                    PsiElement(identifier)('CTL')
                TypeArgumentsList
                  PsiElement([)('[')
                  SimpleType: Int
                    CodeReferenceElement: Int
                      PsiElement(identifier)('Int')
                  PsiElement(])(']')
              TypeArgumentsList
                PsiElement([)('[')
                SimpleType: String
                  CodeReferenceElement: String
                    PsiElement(identifier)('String')
                PsiElement(])(']')
          PsiWhiteSpace('\n\n  ')
          ScTypeAliasDefinition: T2
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(type)('type')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('T2')
            TypeParameterClause
              PsiElement([)('[')
              TypeParameter: X
                PsiElement(identifier)('+')
                PsiElement(identifier)('X')
                PsiWhiteSpace(' ')
                PsiElement(<:)('<:')
                PsiWhiteSpace(' ')
                FunctionalType: X => X
                  SimpleType: X
                    CodeReferenceElement: X
                      PsiElement(identifier)('X')
                  PsiWhiteSpace(' ')
                  PsiElement(=>)('=>')
                  PsiWhiteSpace(' ')
                  SimpleType: X
                    CodeReferenceElement: X
                      PsiElement(identifier)('X')
              PsiElement(])(']')
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace(' ')
            SimpleType: Any
              CodeReferenceElement: Any
                PsiElement(identifier)('Any')
          PsiWhiteSpace('  ')
          PsiComment(comment)('// OK - variance is not checked in param bounds')
          PsiWhiteSpace('\n')
          PsiElement(})('}')
