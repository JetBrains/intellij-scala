class Foo[+A] {
  def count(f: A => Boolean = _ => true): Unit = {}
  // The preceding line is valid, even though the generated default getter
  // has type `A => Boolean` which wouldn't normally pass variance checks
  // because it's equivalent to the following overloads which are valid:
  def count2(f: A => Boolean): Unit = {}
  def count2(): Unit = count(_ => true)
}

class Bar1[+A] extends Foo[A] {
  override def count(f: A => Boolean): Unit = {}
  // This reasoning extends to overrides:
  override def count2(f: A => Boolean): Unit = {}
}

class Bar2[+A] extends Foo[A] {
  override def count(f: A => Boolean = _ => true): Unit = {}
  // ... including overrides which also override the default getter:
  override def count2(f: A => Boolean): Unit = {}
  override def count2(): Unit = count(_ => true)
}

// This can be contrasted with the need for variance checks in
// `protected[this] methods (cf tests/neg/t7093.scala),
// default getters do not have the same problem since they cannot
// appear in arbitrary contexts.


// Crucially, this argument does not apply to situations in which the default
// getter result type is not a subtype of the parameter type, for example (from
// tests/neg/variance.scala):
//
//   class Foo[+A: ClassTag](x: A) {
//     private[this] val elems: Array[A] = Array(x)
//     def f[B](x: Array[B] = elems): Array[B] = x
//   }
//
// If we tried to rewrite this with an overload, it would fail
// compilation:
//
//  def f[B](): Array[B] = f(elems) // error: Found: Array[A], Expected: Array[B]
//
// So we only disable variance checking for default getters whose
// result type is the method parameter type, this is checked by
// `tests/neg/variance.scala`
-----
ScalaFile
  ScClass: Foo
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Foo')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: A
        PsiElement(identifier)('+')
        PsiElement(identifier)('A')
      PsiElement(])(']')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: count
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('count')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: f
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('f')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  FunctionalType: A => Boolean
                    SimpleType: A
                      CodeReferenceElement: A
                        PsiElement(identifier)('A')
                    PsiWhiteSpace(' ')
                    PsiElement(=>)('=>')
                    PsiWhiteSpace(' ')
                    SimpleType: Boolean
                      CodeReferenceElement: Boolean
                        PsiElement(identifier)('Boolean')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                FunctionExpression
                  Parameters
                    ParametersClause
                      Parameter: _
                        PsiElement(_)('_')
                  PsiWhiteSpace(' ')
                  PsiElement(=>)('=>')
                  PsiWhiteSpace(' ')
                  BooleanLiteral
                    PsiElement(true)('true')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Unit
            CodeReferenceElement: Unit
              PsiElement(identifier)('Unit')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          BlockExpression
            PsiElement({)('{')
            PsiElement(})('}')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: count2
          PsiComment(comment)('// The preceding line is valid, even though the generated default getter')
          PsiWhiteSpace('\n  ')
          PsiComment(comment)('// has type `A => Boolean` which wouldn't normally pass variance checks')
          PsiWhiteSpace('\n  ')
          PsiComment(comment)('// because it's equivalent to the following overloads which are valid:')
          PsiWhiteSpace('\n  ')
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('count2')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: f
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('f')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  FunctionalType: A => Boolean
                    SimpleType: A
                      CodeReferenceElement: A
                        PsiElement(identifier)('A')
                    PsiWhiteSpace(' ')
                    PsiElement(=>)('=>')
                    PsiWhiteSpace(' ')
                    SimpleType: Boolean
                      CodeReferenceElement: Boolean
                        PsiElement(identifier)('Boolean')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Unit
            CodeReferenceElement: Unit
              PsiElement(identifier)('Unit')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          BlockExpression
            PsiElement({)('{')
            PsiElement(})('}')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: count2
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('count2')
          Parameters
            ParametersClause
              PsiElement(()('(')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Unit
            CodeReferenceElement: Unit
              PsiElement(identifier)('Unit')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: count
              PsiElement(identifier)('count')
            ArgumentList
              PsiElement(()('(')
              FunctionExpression
                Parameters
                  ParametersClause
                    Parameter: _
                      PsiElement(_)('_')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                BooleanLiteral
                  PsiElement(true)('true')
              PsiElement())(')')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScClass: Bar1
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Bar1')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: A
        PsiElement(identifier)('+')
        PsiElement(identifier)('A')
      PsiElement(])(']')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          ParametrizedType: Foo[A]
            SimpleType: Foo
              CodeReferenceElement: Foo
                PsiElement(identifier)('Foo')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: A
                CodeReferenceElement: A
                  PsiElement(identifier)('A')
              PsiElement(])(']')
      PsiWhiteSpace(' ')
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: count
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(override)('override')
          PsiWhiteSpace(' ')
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('count')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: f
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('f')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  FunctionalType: A => Boolean
                    SimpleType: A
                      CodeReferenceElement: A
                        PsiElement(identifier)('A')
                    PsiWhiteSpace(' ')
                    PsiElement(=>)('=>')
                    PsiWhiteSpace(' ')
                    SimpleType: Boolean
                      CodeReferenceElement: Boolean
                        PsiElement(identifier)('Boolean')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Unit
            CodeReferenceElement: Unit
              PsiElement(identifier)('Unit')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          BlockExpression
            PsiElement({)('{')
            PsiElement(})('}')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: count2
          PsiComment(comment)('// This reasoning extends to overrides:')
          PsiWhiteSpace('\n  ')
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(override)('override')
          PsiWhiteSpace(' ')
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('count2')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: f
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('f')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  FunctionalType: A => Boolean
                    SimpleType: A
                      CodeReferenceElement: A
                        PsiElement(identifier)('A')
                    PsiWhiteSpace(' ')
                    PsiElement(=>)('=>')
                    PsiWhiteSpace(' ')
                    SimpleType: Boolean
                      CodeReferenceElement: Boolean
                        PsiElement(identifier)('Boolean')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Unit
            CodeReferenceElement: Unit
              PsiElement(identifier)('Unit')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          BlockExpression
            PsiElement({)('{')
            PsiElement(})('}')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScClass: Bar2
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Bar2')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: A
        PsiElement(identifier)('+')
        PsiElement(identifier)('A')
      PsiElement(])(']')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          ParametrizedType: Foo[A]
            SimpleType: Foo
              CodeReferenceElement: Foo
                PsiElement(identifier)('Foo')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: A
                CodeReferenceElement: A
                  PsiElement(identifier)('A')
              PsiElement(])(']')
      PsiWhiteSpace(' ')
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: count
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(override)('override')
          PsiWhiteSpace(' ')
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('count')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: f
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('f')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  FunctionalType: A => Boolean
                    SimpleType: A
                      CodeReferenceElement: A
                        PsiElement(identifier)('A')
                    PsiWhiteSpace(' ')
                    PsiElement(=>)('=>')
                    PsiWhiteSpace(' ')
                    SimpleType: Boolean
                      CodeReferenceElement: Boolean
                        PsiElement(identifier)('Boolean')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                FunctionExpression
                  Parameters
                    ParametersClause
                      Parameter: _
                        PsiElement(_)('_')
                  PsiWhiteSpace(' ')
                  PsiElement(=>)('=>')
                  PsiWhiteSpace(' ')
                  BooleanLiteral
                    PsiElement(true)('true')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Unit
            CodeReferenceElement: Unit
              PsiElement(identifier)('Unit')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          BlockExpression
            PsiElement({)('{')
            PsiElement(})('}')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: count2
          PsiComment(comment)('// ... including overrides which also override the default getter:')
          PsiWhiteSpace('\n  ')
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(override)('override')
          PsiWhiteSpace(' ')
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('count2')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: f
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('f')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  FunctionalType: A => Boolean
                    SimpleType: A
                      CodeReferenceElement: A
                        PsiElement(identifier)('A')
                    PsiWhiteSpace(' ')
                    PsiElement(=>)('=>')
                    PsiWhiteSpace(' ')
                    SimpleType: Boolean
                      CodeReferenceElement: Boolean
                        PsiElement(identifier)('Boolean')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Unit
            CodeReferenceElement: Unit
              PsiElement(identifier)('Unit')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          BlockExpression
            PsiElement({)('{')
            PsiElement(})('}')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: count2
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(override)('override')
          PsiWhiteSpace(' ')
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('count2')
          Parameters
            ParametersClause
              PsiElement(()('(')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Unit
            CodeReferenceElement: Unit
              PsiElement(identifier)('Unit')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: count
              PsiElement(identifier)('count')
            ArgumentList
              PsiElement(()('(')
              FunctionExpression
                Parameters
                  ParametersClause
                    Parameter: _
                      PsiElement(_)('_')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                BooleanLiteral
                  PsiElement(true)('true')
              PsiElement())(')')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  PsiComment(comment)('// This can be contrasted with the need for variance checks in')
  PsiWhiteSpace('\n')
  PsiComment(comment)('// `protected[this] methods (cf tests/neg/t7093.scala),')
  PsiWhiteSpace('\n')
  PsiComment(comment)('// default getters do not have the same problem since they cannot')
  PsiWhiteSpace('\n')
  PsiComment(comment)('// appear in arbitrary contexts.')
  PsiWhiteSpace('\n\n\n')
  PsiComment(comment)('// Crucially, this argument does not apply to situations in which the default')
  PsiWhiteSpace('\n')
  PsiComment(comment)('// getter result type is not a subtype of the parameter type, for example (from')
  PsiWhiteSpace('\n')
  PsiComment(comment)('// tests/neg/variance.scala):')
  PsiWhiteSpace('\n')
  PsiComment(comment)('//')
  PsiWhiteSpace('\n')
  PsiComment(comment)('//   class Foo[+A: ClassTag](x: A) {')
  PsiWhiteSpace('\n')
  PsiComment(comment)('//     private[this] val elems: Array[A] = Array(x)')
  PsiWhiteSpace('\n')
  PsiComment(comment)('//     def f[B](x: Array[B] = elems): Array[B] = x')
  PsiWhiteSpace('\n')
  PsiComment(comment)('//   }')
  PsiWhiteSpace('\n')
  PsiComment(comment)('//')
  PsiWhiteSpace('\n')
  PsiComment(comment)('// If we tried to rewrite this with an overload, it would fail')
  PsiWhiteSpace('\n')
  PsiComment(comment)('// compilation:')
  PsiWhiteSpace('\n')
  PsiComment(comment)('//')
  PsiWhiteSpace('\n')
  PsiComment(comment)('//  def f[B](): Array[B] = f(elems) // error: Found: Array[A], Expected: Array[B]')
  PsiWhiteSpace('\n')
  PsiComment(comment)('//')
  PsiWhiteSpace('\n')
  PsiComment(comment)('// So we only disable variance checking for default getters whose')
  PsiWhiteSpace('\n')
  PsiComment(comment)('// result type is the method parameter type, this is checked by')
  PsiWhiteSpace('\n')
  PsiComment(comment)('// `tests/neg/variance.scala`')
