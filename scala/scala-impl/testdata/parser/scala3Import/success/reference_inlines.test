package inlines

object Config {
  inline val logging = true
}

class Logger {
  protected[this] var a = 0
  protected [Logger] var b = 0
  protected var c = 0

}

object Logger {

  private var indent = 0
  private[this] var a = 0
  private[Logger] var b = 0

  inline def log[T](msg: String, indentMargin: => Int)(op: => T): T =
    if (Config.logging) {
      println(s"${"  " * indent}start $msg")
      indent += indentMargin
      val result = op
      indent -= indentMargin
      println(s"${"  " * indent}$msg = $result")
      result
    }
    else op
}

object Test{
  import Logger.*

  var indentSetting = 2

  def factorial(n: BigInt): BigInt = {
    log(s"factorial($n)", indentSetting) {
      if (n == 0) 1
      else n * factorial(n - 1)
    }
  }

  val x = log[String]("some op", indentSetting)(_)

  def main(args: Array[String]): Unit =
    println(factorial(33))
}
-----
ScalaFile
  ScPackaging
    PsiElement(package)('package')
    PsiWhiteSpace(' ')
    CodeReferenceElement: inlines
      PsiElement(identifier)('inlines')
    PsiWhiteSpace('\n\n')
    ScObject: Config
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      PsiElement(object)('object')
      PsiWhiteSpace(' ')
      PsiElement(identifier)('Config')
      PsiWhiteSpace(' ')
      ExtendsBlock
        ScTemplateBody
          PsiElement({)('{')
          PsiWhiteSpace('\n  ')
          ScPatternDefinition: logging
            AnnotationsList
              <empty list>
            Modifiers
              PsiElement(inline)('inline')
            PsiWhiteSpace(' ')
            PsiElement(val)('val')
            PsiWhiteSpace(' ')
            ListOfPatterns
              ReferencePattern: logging
                PsiElement(identifier)('logging')
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace(' ')
            BooleanLiteral
              PsiElement(true)('true')
          PsiWhiteSpace('\n')
          PsiElement(})('}')
    PsiWhiteSpace('\n\n')
    ScClass: Logger
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      PsiElement(class)('class')
      PsiWhiteSpace(' ')
      PsiElement(identifier)('Logger')
      PrimaryConstructor
        AnnotationsList
          <empty list>
        Modifiers
          <empty list>
        Parameters
          <empty list>
      PsiWhiteSpace(' ')
      ExtendsBlock
        ScTemplateBody
          PsiElement({)('{')
          PsiWhiteSpace('\n  ')
          ScVariableDefinition: a
            AnnotationsList
              <empty list>
            Modifiers
              AccessModifier
                PsiElement(protected)('protected')
                PsiElement([)('[')
                PsiElement(this)('this')
                PsiElement(])(']')
            PsiWhiteSpace(' ')
            PsiElement(var)('var')
            PsiWhiteSpace(' ')
            ListOfPatterns
              ReferencePattern: a
                PsiElement(identifier)('a')
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace(' ')
            IntegerLiteral
              PsiElement(integer)('0')
          PsiWhiteSpace('\n  ')
          ScVariableDefinition: b
            AnnotationsList
              <empty list>
            Modifiers
              AccessModifier
                PsiElement(protected)('protected')
                PsiWhiteSpace(' ')
                PsiElement([)('[')
                PsiElement(identifier)('Logger')
                PsiElement(])(']')
            PsiWhiteSpace(' ')
            PsiElement(var)('var')
            PsiWhiteSpace(' ')
            ListOfPatterns
              ReferencePattern: b
                PsiElement(identifier)('b')
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace(' ')
            IntegerLiteral
              PsiElement(integer)('0')
          PsiWhiteSpace('\n  ')
          ScVariableDefinition: c
            AnnotationsList
              <empty list>
            Modifiers
              AccessModifier
                PsiElement(protected)('protected')
            PsiWhiteSpace(' ')
            PsiElement(var)('var')
            PsiWhiteSpace(' ')
            ListOfPatterns
              ReferencePattern: c
                PsiElement(identifier)('c')
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace(' ')
            IntegerLiteral
              PsiElement(integer)('0')
          PsiWhiteSpace('\n\n')
          PsiElement(})('}')
    PsiWhiteSpace('\n\n')
    ScObject: Logger
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      PsiElement(object)('object')
      PsiWhiteSpace(' ')
      PsiElement(identifier)('Logger')
      PsiWhiteSpace(' ')
      ExtendsBlock
        ScTemplateBody
          PsiElement({)('{')
          PsiWhiteSpace('\n\n  ')
          ScVariableDefinition: indent
            AnnotationsList
              <empty list>
            Modifiers
              AccessModifier
                PsiElement(private)('private')
            PsiWhiteSpace(' ')
            PsiElement(var)('var')
            PsiWhiteSpace(' ')
            ListOfPatterns
              ReferencePattern: indent
                PsiElement(identifier)('indent')
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace(' ')
            IntegerLiteral
              PsiElement(integer)('0')
          PsiWhiteSpace('\n  ')
          ScVariableDefinition: a
            AnnotationsList
              <empty list>
            Modifiers
              AccessModifier
                PsiElement(private)('private')
                PsiElement([)('[')
                PsiElement(this)('this')
                PsiElement(])(']')
            PsiWhiteSpace(' ')
            PsiElement(var)('var')
            PsiWhiteSpace(' ')
            ListOfPatterns
              ReferencePattern: a
                PsiElement(identifier)('a')
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace(' ')
            IntegerLiteral
              PsiElement(integer)('0')
          PsiWhiteSpace('\n  ')
          ScVariableDefinition: b
            AnnotationsList
              <empty list>
            Modifiers
              AccessModifier
                PsiElement(private)('private')
                PsiElement([)('[')
                PsiElement(identifier)('Logger')
                PsiElement(])(']')
            PsiWhiteSpace(' ')
            PsiElement(var)('var')
            PsiWhiteSpace(' ')
            ListOfPatterns
              ReferencePattern: b
                PsiElement(identifier)('b')
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace(' ')
            IntegerLiteral
              PsiElement(integer)('0')
          PsiWhiteSpace('\n\n  ')
          ScFunctionDefinition: log
            AnnotationsList
              <empty list>
            Modifiers
              PsiElement(inline)('inline')
            PsiWhiteSpace(' ')
            PsiElement(def)('def')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('log')
            TypeParameterClause
              PsiElement([)('[')
              TypeParameter: T
                PsiElement(identifier)('T')
              PsiElement(])(']')
            Parameters
              ParametersClause
                PsiElement(()('(')
                Parameter: msg
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(identifier)('msg')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    SimpleType: String
                      CodeReferenceElement: String
                        PsiElement(identifier)('String')
                PsiElement(,)(',')
                PsiWhiteSpace(' ')
                Parameter: indentMargin
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(identifier)('indentMargin')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    PsiElement(=>)('=>')
                    PsiWhiteSpace(' ')
                    SimpleType: Int
                      CodeReferenceElement: Int
                        PsiElement(identifier)('Int')
                PsiElement())(')')
              ParametersClause
                PsiElement(()('(')
                Parameter: op
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(identifier)('op')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    PsiElement(=>)('=>')
                    PsiWhiteSpace(' ')
                    SimpleType: T
                      CodeReferenceElement: T
                        PsiElement(identifier)('T')
                PsiElement())(')')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            SimpleType: T
              CodeReferenceElement: T
                PsiElement(identifier)('T')
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace('\n    ')
            IfStatement
              PsiElement(if)('if')
              PsiWhiteSpace(' ')
              PsiElement(()('(')
              ReferenceExpression: Config.logging
                ReferenceExpression: Config
                  PsiElement(identifier)('Config')
                PsiElement(.)('.')
                PsiElement(identifier)('logging')
              PsiElement())(')')
              PsiWhiteSpace(' ')
              BlockExpression
                PsiElement({)('{')
                PsiWhiteSpace('\n      ')
                MethodCall
                  ReferenceExpression: println
                    PsiElement(identifier)('println')
                  ArgumentList
                    PsiElement(()('(')
                    InterpolatedStringLiteral
                      InterpolatedExpressionPrefix: s
                        PsiElement(interpolated string id)('s')
                      PsiElement(interpolated string)('"')
                      PsiElement(interpolated string injection)('$')
                      BlockExpression
                        PsiElement({)('{')
                        InfixExpression
                          StringLiteral
                            PsiElement(string content)('"  "')
                          PsiWhiteSpace(' ')
                          ReferenceExpression: *
                            PsiElement(identifier)('*')
                          PsiWhiteSpace(' ')
                          ReferenceExpression: indent
                            PsiElement(identifier)('indent')
                        PsiElement(})('}')
                      PsiElement(interpolated string)('start ')
                      PsiElement(interpolated string injection)('$')
                      ReferenceExpression: msg
                        PsiElement(identifier)('msg')
                      PsiElement(interpolated string end)('"')
                    PsiElement())(')')
                PsiWhiteSpace('\n      ')
                InfixExpression
                  ReferenceExpression: indent
                    PsiElement(identifier)('indent')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: +=
                    PsiElement(identifier)('+=')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: indentMargin
                    PsiElement(identifier)('indentMargin')
                PsiWhiteSpace('\n      ')
                ScPatternDefinition: result
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(val)('val')
                  PsiWhiteSpace(' ')
                  ListOfPatterns
                    ReferencePattern: result
                      PsiElement(identifier)('result')
                  PsiWhiteSpace(' ')
                  PsiElement(=)('=')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: op
                    PsiElement(identifier)('op')
                PsiWhiteSpace('\n      ')
                InfixExpression
                  ReferenceExpression: indent
                    PsiElement(identifier)('indent')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: -=
                    PsiElement(identifier)('-=')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: indentMargin
                    PsiElement(identifier)('indentMargin')
                PsiWhiteSpace('\n      ')
                MethodCall
                  ReferenceExpression: println
                    PsiElement(identifier)('println')
                  ArgumentList
                    PsiElement(()('(')
                    InterpolatedStringLiteral
                      InterpolatedExpressionPrefix: s
                        PsiElement(interpolated string id)('s')
                      PsiElement(interpolated string)('"')
                      PsiElement(interpolated string injection)('$')
                      BlockExpression
                        PsiElement({)('{')
                        InfixExpression
                          StringLiteral
                            PsiElement(string content)('"  "')
                          PsiWhiteSpace(' ')
                          ReferenceExpression: *
                            PsiElement(identifier)('*')
                          PsiWhiteSpace(' ')
                          ReferenceExpression: indent
                            PsiElement(identifier)('indent')
                        PsiElement(})('}')
                      PsiElement(interpolated string injection)('$')
                      ReferenceExpression: msg
                        PsiElement(identifier)('msg')
                      PsiElement(interpolated string)(' = ')
                      PsiElement(interpolated string injection)('$')
                      ReferenceExpression: result
                        PsiElement(identifier)('result')
                      PsiElement(interpolated string end)('"')
                    PsiElement())(')')
                PsiWhiteSpace('\n      ')
                ReferenceExpression: result
                  PsiElement(identifier)('result')
                PsiWhiteSpace('\n    ')
                PsiElement(})('}')
              PsiWhiteSpace('\n    ')
              PsiElement(else)('else')
              PsiWhiteSpace(' ')
              ReferenceExpression: op
                PsiElement(identifier)('op')
          PsiWhiteSpace('\n')
          PsiElement(})('}')
    PsiWhiteSpace('\n\n')
    ScObject: Test
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      PsiElement(object)('object')
      PsiWhiteSpace(' ')
      PsiElement(identifier)('Test')
      ExtendsBlock
        ScTemplateBody
          PsiElement({)('{')
          PsiWhiteSpace('\n  ')
          ScImportStatement
            PsiElement(import)('import')
            PsiWhiteSpace(' ')
            ImportExpression
              CodeReferenceElement: Logger
                PsiElement(identifier)('Logger')
              PsiElement(.)('.')
              PsiElement(*)('*')
          PsiWhiteSpace('\n\n  ')
          ScVariableDefinition: indentSetting
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(var)('var')
            PsiWhiteSpace(' ')
            ListOfPatterns
              ReferencePattern: indentSetting
                PsiElement(identifier)('indentSetting')
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace(' ')
            IntegerLiteral
              PsiElement(integer)('2')
          PsiWhiteSpace('\n\n  ')
          ScFunctionDefinition: factorial
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(def)('def')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('factorial')
            Parameters
              ParametersClause
                PsiElement(()('(')
                Parameter: n
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(identifier)('n')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    SimpleType: BigInt
                      CodeReferenceElement: BigInt
                        PsiElement(identifier)('BigInt')
                PsiElement())(')')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            SimpleType: BigInt
              CodeReferenceElement: BigInt
                PsiElement(identifier)('BigInt')
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace(' ')
            BlockExpression
              PsiElement({)('{')
              PsiWhiteSpace('\n    ')
              MethodCall
                MethodCall
                  ReferenceExpression: log
                    PsiElement(identifier)('log')
                  ArgumentList
                    PsiElement(()('(')
                    InterpolatedStringLiteral
                      InterpolatedExpressionPrefix: s
                        PsiElement(interpolated string id)('s')
                      PsiElement(interpolated string)('"factorial(')
                      PsiElement(interpolated string injection)('$')
                      ReferenceExpression: n
                        PsiElement(identifier)('n')
                      PsiElement(interpolated string)(')')
                      PsiElement(interpolated string end)('"')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    ReferenceExpression: indentSetting
                      PsiElement(identifier)('indentSetting')
                    PsiElement())(')')
                PsiWhiteSpace(' ')
                ArgumentList
                  BlockExpression
                    PsiElement({)('{')
                    PsiWhiteSpace('\n      ')
                    IfStatement
                      PsiElement(if)('if')
                      PsiWhiteSpace(' ')
                      PsiElement(()('(')
                      InfixExpression
                        ReferenceExpression: n
                          PsiElement(identifier)('n')
                        PsiWhiteSpace(' ')
                        ReferenceExpression: ==
                          PsiElement(identifier)('==')
                        PsiWhiteSpace(' ')
                        IntegerLiteral
                          PsiElement(integer)('0')
                      PsiElement())(')')
                      PsiWhiteSpace(' ')
                      IntegerLiteral
                        PsiElement(integer)('1')
                      PsiWhiteSpace('\n      ')
                      PsiElement(else)('else')
                      PsiWhiteSpace(' ')
                      InfixExpression
                        ReferenceExpression: n
                          PsiElement(identifier)('n')
                        PsiWhiteSpace(' ')
                        ReferenceExpression: *
                          PsiElement(identifier)('*')
                        PsiWhiteSpace(' ')
                        MethodCall
                          ReferenceExpression: factorial
                            PsiElement(identifier)('factorial')
                          ArgumentList
                            PsiElement(()('(')
                            InfixExpression
                              ReferenceExpression: n
                                PsiElement(identifier)('n')
                              PsiWhiteSpace(' ')
                              ReferenceExpression: -
                                PsiElement(identifier)('-')
                              PsiWhiteSpace(' ')
                              IntegerLiteral
                                PsiElement(integer)('1')
                            PsiElement())(')')
                    PsiWhiteSpace('\n    ')
                    PsiElement(})('}')
              PsiWhiteSpace('\n  ')
              PsiElement(})('}')
          PsiWhiteSpace('\n\n  ')
          ScPatternDefinition: x
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(val)('val')
            PsiWhiteSpace(' ')
            ListOfPatterns
              ReferencePattern: x
                PsiElement(identifier)('x')
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace(' ')
            MethodCall
              MethodCall
                GenericCall
                  ReferenceExpression: log
                    PsiElement(identifier)('log')
                  TypeArgumentsList
                    PsiElement([)('[')
                    SimpleType: String
                      CodeReferenceElement: String
                        PsiElement(identifier)('String')
                    PsiElement(])(']')
                ArgumentList
                  PsiElement(()('(')
                  StringLiteral
                    PsiElement(string content)('"some op"')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  ReferenceExpression: indentSetting
                    PsiElement(identifier)('indentSetting')
                  PsiElement())(')')
              ArgumentList
                PsiElement(()('(')
                UnderscoreSection
                  PsiElement(_)('_')
                PsiElement())(')')
          PsiWhiteSpace('\n\n  ')
          ScFunctionDefinition: main
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(def)('def')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('main')
            Parameters
              ParametersClause
                PsiElement(()('(')
                Parameter: args
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(identifier)('args')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    ParametrizedType: Array[String]
                      SimpleType: Array
                        CodeReferenceElement: Array
                          PsiElement(identifier)('Array')
                      TypeArgumentsList
                        PsiElement([)('[')
                        SimpleType: String
                          CodeReferenceElement: String
                            PsiElement(identifier)('String')
                        PsiElement(])(']')
                PsiElement())(')')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            SimpleType: Unit
              CodeReferenceElement: Unit
                PsiElement(identifier)('Unit')
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace('\n    ')
            MethodCall
              ReferenceExpression: println
                PsiElement(identifier)('println')
              ArgumentList
                PsiElement(()('(')
                MethodCall
                  ReferenceExpression: factorial
                    PsiElement(identifier)('factorial')
                  ArgumentList
                    PsiElement(()('(')
                    IntegerLiteral
                      PsiElement(integer)('33')
                    PsiElement())(')')
                PsiElement())(')')
          PsiWhiteSpace('\n')
          PsiElement(})('}')
