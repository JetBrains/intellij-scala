class Reflection(val internal: CompilerInterface) { self => // It works if the self is removed
  opaque type Flags = internal.Flags
  object Flags {
    def EmptyFlags: Flags = internal.Flags_EmptyFlags
  }
}

trait CompilerInterface {
  type Flags
  def Flags_EmptyFlags: Flags
}
-----
ScalaFile
  ScClass: Reflection
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Reflection')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        ParametersClause
          PsiElement(()('(')
          ClassParameter: internal
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(val)('val')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('internal')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            ParameterType
              SimpleType: CompilerInterface
                CodeReferenceElement: CompilerInterface
                  PsiElement(identifier)('CompilerInterface')
          PsiElement())(')')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace(' ')
        SelfType: self
          PsiElement(identifier)('self')
          PsiWhiteSpace(' ')
          PsiElement(=>)('=>')
        PsiWhiteSpace(' ')
        PsiComment(comment)('// It works if the self is removed')
        PsiWhiteSpace('\n  ')
        ScTypeAliasDefinition: Flags
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(opaque)('opaque')
          PsiWhiteSpace(' ')
          PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Flags')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          SimpleType: internal.Flags
            CodeReferenceElement: internal.Flags
              CodeReferenceElement: internal
                PsiElement(identifier)('internal')
              PsiElement(.)('.')
              PsiElement(identifier)('Flags')
        PsiWhiteSpace('\n  ')
        ScObject: Flags
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(object)('object')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Flags')
          PsiWhiteSpace(' ')
          ExtendsBlock
            ScTemplateBody
              PsiElement({)('{')
              PsiWhiteSpace('\n    ')
              ScFunctionDefinition: EmptyFlags
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(def)('def')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('EmptyFlags')
                Parameters
                  <empty list>
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                SimpleType: Flags
                  CodeReferenceElement: Flags
                    PsiElement(identifier)('Flags')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                ReferenceExpression: internal.Flags_EmptyFlags
                  ReferenceExpression: internal
                    PsiElement(identifier)('internal')
                  PsiElement(.)('.')
                  PsiElement(identifier)('Flags_EmptyFlags')
              PsiWhiteSpace('\n  ')
              PsiElement(})('}')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScTrait: CompilerInterface
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('CompilerInterface')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScTypeAliasDeclaration: Flags
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Flags')
        PsiWhiteSpace('\n  ')
        ScFunctionDeclaration: Flags_EmptyFlags
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Flags_EmptyFlags')
          Parameters
            <empty list>
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          SimpleType: Flags
            CodeReferenceElement: Flags
              PsiElement(identifier)('Flags')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
