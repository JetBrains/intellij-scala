// Compile with -rewrite -pascal-style
// Then compile again with -rewrite c-style
// The resulting file is the same as the original one, except for better formatting
object Test {

  val xs = List(1, 2, 3)

  for(x <- xs)yield x * 2

  for(x <- xs)
  yield x * 2

  for{ x <- xs; y <- xs }yield x * y

  for{
    x <- xs
    y <- xs
  }yield x * y

  if(xs == Nil)println("yes")

  if(xs == Nil)
    println("yes")
}
-----
ScalaFile
  ScObject: Test
    PsiComment(comment)('// Compile with -rewrite -pascal-style')
    PsiWhiteSpace('\n')
    PsiComment(comment)('// Then compile again with -rewrite c-style')
    PsiWhiteSpace('\n')
    PsiComment(comment)('// The resulting file is the same as the original one, except for better formatting')
    PsiWhiteSpace('\n')
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n\n  ')
        ScPatternDefinition: xs
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: xs
              PsiElement(identifier)('xs')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MethodCall
            ReferenceExpression: List
              PsiElement(identifier)('List')
            ArgumentList
              PsiElement(()('(')
              IntegerLiteral
                PsiElement(integer)('1')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              IntegerLiteral
                PsiElement(integer)('2')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              IntegerLiteral
                PsiElement(integer)('3')
              PsiElement())(')')
        PsiWhiteSpace('\n\n  ')
        ForStatement
          PsiElement(for)('for')
          PsiElement(()('(')
          Enumerators
            Generator
              ReferencePattern: x
                PsiElement(identifier)('x')
              PsiWhiteSpace(' ')
              PsiElement(<-)('<-')
              PsiWhiteSpace(' ')
              ReferenceExpression: xs
                PsiElement(identifier)('xs')
          PsiElement())(')')
          PsiElement(yield)('yield')
          PsiWhiteSpace(' ')
          InfixExpression
            ReferenceExpression: x
              PsiElement(identifier)('x')
            PsiWhiteSpace(' ')
            ReferenceExpression: *
              PsiElement(identifier)('*')
            PsiWhiteSpace(' ')
            IntegerLiteral
              PsiElement(integer)('2')
        PsiWhiteSpace('\n\n  ')
        ForStatement
          PsiElement(for)('for')
          PsiElement(()('(')
          Enumerators
            Generator
              ReferencePattern: x
                PsiElement(identifier)('x')
              PsiWhiteSpace(' ')
              PsiElement(<-)('<-')
              PsiWhiteSpace(' ')
              ReferenceExpression: xs
                PsiElement(identifier)('xs')
          PsiElement())(')')
          PsiWhiteSpace('\n  ')
          PsiElement(yield)('yield')
          PsiWhiteSpace(' ')
          InfixExpression
            ReferenceExpression: x
              PsiElement(identifier)('x')
            PsiWhiteSpace(' ')
            ReferenceExpression: *
              PsiElement(identifier)('*')
            PsiWhiteSpace(' ')
            IntegerLiteral
              PsiElement(integer)('2')
        PsiWhiteSpace('\n\n  ')
        ForStatement
          PsiElement(for)('for')
          PsiElement({)('{')
          PsiWhiteSpace(' ')
          Enumerators
            Generator
              ReferencePattern: x
                PsiElement(identifier)('x')
              PsiWhiteSpace(' ')
              PsiElement(<-)('<-')
              PsiWhiteSpace(' ')
              ReferenceExpression: xs
                PsiElement(identifier)('xs')
            PsiElement(;)(';')
            PsiWhiteSpace(' ')
            Generator
              ReferencePattern: y
                PsiElement(identifier)('y')
              PsiWhiteSpace(' ')
              PsiElement(<-)('<-')
              PsiWhiteSpace(' ')
              ReferenceExpression: xs
                PsiElement(identifier)('xs')
          PsiWhiteSpace(' ')
          PsiElement(})('}')
          PsiElement(yield)('yield')
          PsiWhiteSpace(' ')
          InfixExpression
            ReferenceExpression: x
              PsiElement(identifier)('x')
            PsiWhiteSpace(' ')
            ReferenceExpression: *
              PsiElement(identifier)('*')
            PsiWhiteSpace(' ')
            ReferenceExpression: y
              PsiElement(identifier)('y')
        PsiWhiteSpace('\n\n  ')
        ForStatement
          PsiElement(for)('for')
          PsiElement({)('{')
          PsiWhiteSpace('\n    ')
          Enumerators
            Generator
              ReferencePattern: x
                PsiElement(identifier)('x')
              PsiWhiteSpace(' ')
              PsiElement(<-)('<-')
              PsiWhiteSpace(' ')
              ReferenceExpression: xs
                PsiElement(identifier)('xs')
            PsiWhiteSpace('\n    ')
            Generator
              ReferencePattern: y
                PsiElement(identifier)('y')
              PsiWhiteSpace(' ')
              PsiElement(<-)('<-')
              PsiWhiteSpace(' ')
              ReferenceExpression: xs
                PsiElement(identifier)('xs')
          PsiWhiteSpace('\n  ')
          PsiElement(})('}')
          PsiElement(yield)('yield')
          PsiWhiteSpace(' ')
          InfixExpression
            ReferenceExpression: x
              PsiElement(identifier)('x')
            PsiWhiteSpace(' ')
            ReferenceExpression: *
              PsiElement(identifier)('*')
            PsiWhiteSpace(' ')
            ReferenceExpression: y
              PsiElement(identifier)('y')
        PsiWhiteSpace('\n\n  ')
        IfStatement
          PsiElement(if)('if')
          PsiElement(()('(')
          InfixExpression
            ReferenceExpression: xs
              PsiElement(identifier)('xs')
            PsiWhiteSpace(' ')
            ReferenceExpression: ==
              PsiElement(identifier)('==')
            PsiWhiteSpace(' ')
            ReferenceExpression: Nil
              PsiElement(identifier)('Nil')
          PsiElement())(')')
          MethodCall
            ReferenceExpression: println
              PsiElement(identifier)('println')
            ArgumentList
              PsiElement(()('(')
              StringLiteral
                PsiElement(string content)('"yes"')
              PsiElement())(')')
        PsiWhiteSpace('\n\n  ')
        IfStatement
          PsiElement(if)('if')
          PsiElement(()('(')
          InfixExpression
            ReferenceExpression: xs
              PsiElement(identifier)('xs')
            PsiWhiteSpace(' ')
            ReferenceExpression: ==
              PsiElement(identifier)('==')
            PsiWhiteSpace(' ')
            ReferenceExpression: Nil
              PsiElement(identifier)('Nil')
          PsiElement())(')')
          PsiWhiteSpace('\n    ')
          MethodCall
            ReferenceExpression: println
              PsiElement(identifier)('println')
            ArgumentList
              PsiElement(()('(')
              StringLiteral
                PsiElement(string content)('"yes"')
              PsiElement())(')')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
