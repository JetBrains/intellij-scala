package t6651

class YouAreYourself[A <: AnyRef](val you: A) extends AnyVal {
  def yourself: you.type = you
}

object Test {
  val s = ""
  val s1: s.type = new YouAreYourself[s.type](s).yourself
}

trait Path {
  type Dep <: AnyRef
}

final class ValueClass[P <: Path](val path: P) extends AnyVal {
  import path.Dep

  def apply(dep: Dep)(d2: dep.type, foo: Int): (Dep, d2.type) = (d2, d2)

  // This generates dodgy code; note `ValueClass.this`:
  //
  // final def bounds$extension[D >: Nothing <: ValueClass.this.path.Dep,
  //                            P >: Nothing <: Path]
  //                            ($this: ValueClass[P])
  //                            (dep: D)
  //                            (d2: dep.type, foo: Int): (D, d2.type) = scala.Tuple2.apply[D, d2.type](d2, d2);
  //
  // Nothing crashes down the line, but it certainly doesn't conform to best-practices.
  //
  // An better alternative would be to add a type parameter for the (singleton) type of
  // the wrapped value.
  def bounds[D <: Dep](dep: D)(d2: dep.type, foo: Int): (D, d2.type) = (d2, d2)
}

-----
ScalaFile
  ScPackaging
    PsiElement(package)('package')
    PsiWhiteSpace(' ')
    CodeReferenceElement: t6651
      PsiElement(identifier)('t6651')
    PsiWhiteSpace('\n\n')
    ScClass: YouAreYourself
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      PsiElement(class)('class')
      PsiWhiteSpace(' ')
      PsiElement(identifier)('YouAreYourself')
      TypeParameterClause
        PsiElement([)('[')
        TypeParameter: A
          PsiElement(identifier)('A')
          PsiWhiteSpace(' ')
          PsiElement(<:)('<:')
          PsiWhiteSpace(' ')
          SimpleType: AnyRef
            CodeReferenceElement: AnyRef
              PsiElement(identifier)('AnyRef')
        PsiElement(])(']')
      PrimaryConstructor
        AnnotationsList
          <empty list>
        Modifiers
          <empty list>
        Parameters
          ParametersClause
            PsiElement(()('(')
            ClassParameter: you
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              PsiElement(identifier)('you')
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              ParameterType
                SimpleType: A
                  CodeReferenceElement: A
                    PsiElement(identifier)('A')
            PsiElement())(')')
      PsiWhiteSpace(' ')
      ExtendsBlock
        PsiElement(extends)('extends')
        PsiWhiteSpace(' ')
        TemplateParents
          ConstructorInvocation
            SimpleType: AnyVal
              CodeReferenceElement: AnyVal
                PsiElement(identifier)('AnyVal')
        PsiWhiteSpace(' ')
        ScTemplateBody
          PsiElement({)('{')
          PsiWhiteSpace('\n  ')
          ScFunctionDefinition: yourself
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(def)('def')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('yourself')
            Parameters
              <empty list>
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            SimpleType: you.type
              CodeReferenceElement: you
                PsiElement(identifier)('you')
              PsiElement(.)('.')
              PsiElement(type)('type')
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace(' ')
            ReferenceExpression: you
              PsiElement(identifier)('you')
          PsiWhiteSpace('\n')
          PsiElement(})('}')
    PsiWhiteSpace('\n\n')
    ScObject: Test
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      PsiElement(object)('object')
      PsiWhiteSpace(' ')
      PsiElement(identifier)('Test')
      PsiWhiteSpace(' ')
      ExtendsBlock
        ScTemplateBody
          PsiElement({)('{')
          PsiWhiteSpace('\n  ')
          ScPatternDefinition: s
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(val)('val')
            PsiWhiteSpace(' ')
            ListOfPatterns
              ReferencePattern: s
                PsiElement(identifier)('s')
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace(' ')
            StringLiteral
              PsiElement(string content)('""')
          PsiWhiteSpace('\n  ')
          ScPatternDefinition: s1
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(val)('val')
            PsiWhiteSpace(' ')
            ListOfPatterns
              ReferencePattern: s1
                PsiElement(identifier)('s1')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            SimpleType: s.type
              CodeReferenceElement: s
                PsiElement(identifier)('s')
              PsiElement(.)('.')
              PsiElement(type)('type')
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace(' ')
            ReferenceExpression: new YouAreYourself[s.type](s).yourself
              ScNewTemplateDefinition: <anonymous>
                PsiElement(new)('new')
                PsiWhiteSpace(' ')
                ExtendsBlock
                  TemplateParents
                    ConstructorInvocation
                      ParametrizedType: YouAreYourself[s.type]
                        SimpleType: YouAreYourself
                          CodeReferenceElement: YouAreYourself
                            PsiElement(identifier)('YouAreYourself')
                        TypeArgumentsList
                          PsiElement([)('[')
                          SimpleType: s.type
                            CodeReferenceElement: s
                              PsiElement(identifier)('s')
                            PsiElement(.)('.')
                            PsiElement(type)('type')
                          PsiElement(])(']')
                      ArgumentList
                        PsiElement(()('(')
                        ReferenceExpression: s
                          PsiElement(identifier)('s')
                        PsiElement())(')')
              PsiElement(.)('.')
              PsiElement(identifier)('yourself')
          PsiWhiteSpace('\n')
          PsiElement(})('}')
    PsiWhiteSpace('\n\n')
    ScTrait: Path
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      PsiElement(trait)('trait')
      PsiWhiteSpace(' ')
      PsiElement(identifier)('Path')
      PsiWhiteSpace(' ')
      ExtendsBlock
        ScTemplateBody
          PsiElement({)('{')
          PsiWhiteSpace('\n  ')
          ScTypeAliasDeclaration: Dep
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(type)('type')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('Dep')
            PsiWhiteSpace(' ')
            PsiElement(<:)('<:')
            PsiWhiteSpace(' ')
            SimpleType: AnyRef
              CodeReferenceElement: AnyRef
                PsiElement(identifier)('AnyRef')
          PsiWhiteSpace('\n')
          PsiElement(})('}')
    PsiWhiteSpace('\n\n')
    ScClass: ValueClass
      AnnotationsList
        <empty list>
      Modifiers
        PsiElement(final)('final')
      PsiWhiteSpace(' ')
      PsiElement(class)('class')
      PsiWhiteSpace(' ')
      PsiElement(identifier)('ValueClass')
      TypeParameterClause
        PsiElement([)('[')
        TypeParameter: P
          PsiElement(identifier)('P')
          PsiWhiteSpace(' ')
          PsiElement(<:)('<:')
          PsiWhiteSpace(' ')
          SimpleType: Path
            CodeReferenceElement: Path
              PsiElement(identifier)('Path')
        PsiElement(])(']')
      PrimaryConstructor
        AnnotationsList
          <empty list>
        Modifiers
          <empty list>
        Parameters
          ParametersClause
            PsiElement(()('(')
            ClassParameter: path
              AnnotationsList
                <empty list>
              Modifiers
                <empty list>
              PsiElement(val)('val')
              PsiWhiteSpace(' ')
              PsiElement(identifier)('path')
              PsiElement(:)(':')
              PsiWhiteSpace(' ')
              ParameterType
                SimpleType: P
                  CodeReferenceElement: P
                    PsiElement(identifier)('P')
            PsiElement())(')')
      PsiWhiteSpace(' ')
      ExtendsBlock
        PsiElement(extends)('extends')
        PsiWhiteSpace(' ')
        TemplateParents
          ConstructorInvocation
            SimpleType: AnyVal
              CodeReferenceElement: AnyVal
                PsiElement(identifier)('AnyVal')
        PsiWhiteSpace(' ')
        ScTemplateBody
          PsiElement({)('{')
          PsiWhiteSpace('\n  ')
          ScImportStatement
            PsiElement(import)('import')
            PsiWhiteSpace(' ')
            ImportExpression
              CodeReferenceElement: path.Dep
                CodeReferenceElement: path
                  PsiElement(identifier)('path')
                PsiElement(.)('.')
                PsiElement(identifier)('Dep')
          PsiWhiteSpace('\n\n  ')
          ScFunctionDefinition: apply
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(def)('def')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('apply')
            Parameters
              ParametersClause
                PsiElement(()('(')
                Parameter: dep
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(identifier)('dep')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    SimpleType: Dep
                      CodeReferenceElement: Dep
                        PsiElement(identifier)('Dep')
                PsiElement())(')')
              ParametersClause
                PsiElement(()('(')
                Parameter: d2
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(identifier)('d2')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    SimpleType: dep.type
                      CodeReferenceElement: dep
                        PsiElement(identifier)('dep')
                      PsiElement(.)('.')
                      PsiElement(type)('type')
                PsiElement(,)(',')
                PsiWhiteSpace(' ')
                Parameter: foo
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(identifier)('foo')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    SimpleType: Int
                      CodeReferenceElement: Int
                        PsiElement(identifier)('Int')
                PsiElement())(')')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            TupleType: (Dep, d2.type)
              PsiElement(()('(')
              TypesList
                SimpleType: Dep
                  CodeReferenceElement: Dep
                    PsiElement(identifier)('Dep')
                PsiElement(,)(',')
                PsiWhiteSpace(' ')
                SimpleType: d2.type
                  CodeReferenceElement: d2
                    PsiElement(identifier)('d2')
                  PsiElement(.)('.')
                  PsiElement(type)('type')
              PsiElement())(')')
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace(' ')
            Tuple
              PsiElement(()('(')
              ReferenceExpression: d2
                PsiElement(identifier)('d2')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              ReferenceExpression: d2
                PsiElement(identifier)('d2')
              PsiElement())(')')
          PsiWhiteSpace('\n\n  ')
          ScFunctionDefinition: bounds
            PsiComment(comment)('// This generates dodgy code; note `ValueClass.this`:')
            PsiWhiteSpace('\n  ')
            PsiComment(comment)('//')
            PsiWhiteSpace('\n  ')
            PsiComment(comment)('// final def bounds$extension[D >: Nothing <: ValueClass.this.path.Dep,')
            PsiWhiteSpace('\n  ')
            PsiComment(comment)('//                            P >: Nothing <: Path]')
            PsiWhiteSpace('\n  ')
            PsiComment(comment)('//                            ($this: ValueClass[P])')
            PsiWhiteSpace('\n  ')
            PsiComment(comment)('//                            (dep: D)')
            PsiWhiteSpace('\n  ')
            PsiComment(comment)('//                            (d2: dep.type, foo: Int): (D, d2.type) = scala.Tuple2.apply[D, d2.type](d2, d2);')
            PsiWhiteSpace('\n  ')
            PsiComment(comment)('//')
            PsiWhiteSpace('\n  ')
            PsiComment(comment)('// Nothing crashes down the line, but it certainly doesn't conform to best-practices.')
            PsiWhiteSpace('\n  ')
            PsiComment(comment)('//')
            PsiWhiteSpace('\n  ')
            PsiComment(comment)('// An better alternative would be to add a type parameter for the (singleton) type of')
            PsiWhiteSpace('\n  ')
            PsiComment(comment)('// the wrapped value.')
            PsiWhiteSpace('\n  ')
            AnnotationsList
              <empty list>
            Modifiers
              <empty list>
            PsiElement(def)('def')
            PsiWhiteSpace(' ')
            PsiElement(identifier)('bounds')
            TypeParameterClause
              PsiElement([)('[')
              TypeParameter: D
                PsiElement(identifier)('D')
                PsiWhiteSpace(' ')
                PsiElement(<:)('<:')
                PsiWhiteSpace(' ')
                SimpleType: Dep
                  CodeReferenceElement: Dep
                    PsiElement(identifier)('Dep')
              PsiElement(])(']')
            Parameters
              ParametersClause
                PsiElement(()('(')
                Parameter: dep
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(identifier)('dep')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    SimpleType: D
                      CodeReferenceElement: D
                        PsiElement(identifier)('D')
                PsiElement())(')')
              ParametersClause
                PsiElement(()('(')
                Parameter: d2
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(identifier)('d2')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    SimpleType: dep.type
                      CodeReferenceElement: dep
                        PsiElement(identifier)('dep')
                      PsiElement(.)('.')
                      PsiElement(type)('type')
                PsiElement(,)(',')
                PsiWhiteSpace(' ')
                Parameter: foo
                  AnnotationsList
                    <empty list>
                  Modifiers
                    <empty list>
                  PsiElement(identifier)('foo')
                  PsiElement(:)(':')
                  PsiWhiteSpace(' ')
                  ParameterType
                    SimpleType: Int
                      CodeReferenceElement: Int
                        PsiElement(identifier)('Int')
                PsiElement())(')')
            PsiElement(:)(':')
            PsiWhiteSpace(' ')
            TupleType: (D, d2.type)
              PsiElement(()('(')
              TypesList
                SimpleType: D
                  CodeReferenceElement: D
                    PsiElement(identifier)('D')
                PsiElement(,)(',')
                PsiWhiteSpace(' ')
                SimpleType: d2.type
                  CodeReferenceElement: d2
                    PsiElement(identifier)('d2')
                  PsiElement(.)('.')
                  PsiElement(type)('type')
              PsiElement())(')')
            PsiWhiteSpace(' ')
            PsiElement(=)('=')
            PsiWhiteSpace(' ')
            Tuple
              PsiElement(()('(')
              ReferenceExpression: d2
                PsiElement(identifier)('d2')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              ReferenceExpression: d2
                PsiElement(identifier)('d2')
              PsiElement())(')')
          PsiWhiteSpace('\n')
          PsiElement(})('}')
