// code *generated* by test/scaladoc/run/SI-5933.scala
// duplicated here because it's related to SI-6925

import language.higherKinds

abstract class Base[M[_, _]] {
  def foo[A, B]: M[(A, B), Any]
}

class Derived extends Base[PartialFunction] {
  def foo[AA, BB] /*: PartialFunction[(A, B) => Any]*/ = { case (a, b) => (a: AA, b: BB) }
}

object Test {
  lazy val lx = { println("hello"); 3 }
  def test1(x: Int = lx) = ???
  def test2(x: Int = lx match { case 0 => 1; case 3 => 4 }) = ???
}
-----
ScalaFile
  PsiComment(comment)('// code *generated* by test/scaladoc/run/SI-5933.scala')
  PsiWhiteSpace('\n')
  PsiComment(comment)('// duplicated here because it's related to SI-6925')
  PsiWhiteSpace('\n\n')
  ScImportStatement
    PsiElement(import)('import')
    PsiWhiteSpace(' ')
    ImportExpression
      CodeReferenceElement: language.higherKinds
        CodeReferenceElement: language
          PsiElement(identifier)('language')
        PsiElement(.)('.')
        PsiElement(identifier)('higherKinds')
  PsiWhiteSpace('\n\n')
  ScClass: Base
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(abstract)('abstract')
    PsiWhiteSpace(' ')
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Base')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: M
        PsiElement(identifier)('M')
        TypeParameterClause
          PsiElement([)('[')
          TypeParameter: _
            PsiElement(_)('_')
          PsiElement(,)(',')
          PsiWhiteSpace(' ')
          TypeParameter: _
            PsiElement(_)('_')
          PsiElement(])(']')
      PsiElement(])(']')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDeclaration: foo
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('foo')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: A
              PsiElement(identifier)('A')
            PsiElement(,)(',')
            PsiWhiteSpace(' ')
            TypeParameter: B
              PsiElement(identifier)('B')
            PsiElement(])(']')
          Parameters
            <empty list>
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: M[(A, B), Any]
            SimpleType: M
              CodeReferenceElement: M
                PsiElement(identifier)('M')
            TypeArgumentsList
              PsiElement([)('[')
              TupleType: (A, B)
                PsiElement(()('(')
                TypesList
                  SimpleType: A
                    CodeReferenceElement: A
                      PsiElement(identifier)('A')
                  PsiElement(,)(',')
                  PsiWhiteSpace(' ')
                  SimpleType: B
                    CodeReferenceElement: B
                      PsiElement(identifier)('B')
                PsiElement())(')')
              PsiElement(,)(',')
              PsiWhiteSpace(' ')
              SimpleType: Any
                CodeReferenceElement: Any
                  PsiElement(identifier)('Any')
              PsiElement(])(']')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScClass: Derived
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Derived')
    PrimaryConstructor
      AnnotationsList
        <empty list>
      Modifiers
        <empty list>
      Parameters
        <empty list>
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      TemplateParents
        ConstructorInvocation
          ParametrizedType: Base[PartialFunction]
            SimpleType: Base
              CodeReferenceElement: Base
                PsiElement(identifier)('Base')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: PartialFunction
                CodeReferenceElement: PartialFunction
                  PsiElement(identifier)('PartialFunction')
              PsiElement(])(']')
      PsiWhiteSpace(' ')
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: foo
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('foo')
          TypeParameterClause
            PsiElement([)('[')
            TypeParameter: AA
              PsiElement(identifier)('AA')
            PsiElement(,)(',')
            PsiWhiteSpace(' ')
            TypeParameter: BB
              PsiElement(identifier)('BB')
            PsiElement(])(']')
          Parameters
            <empty list>
          PsiWhiteSpace(' ')
          PsiComment(BlockComment)('/*: PartialFunction[(A, B) => Any]*/')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          BlockExpression
            PsiElement({)('{')
            PsiWhiteSpace(' ')
            CaseClauses
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                TuplePattern
                  PsiElement(()('(')
                  ArgumentPatterns
                    ReferencePattern: a
                      PsiElement(identifier)('a')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    ReferencePattern: b
                      PsiElement(identifier)('b')
                  PsiElement())(')')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                BlockOfExpressions
                  Tuple
                    PsiElement(()('(')
                    TypedExpression
                      ReferenceExpression: a
                        PsiElement(identifier)('a')
                      PsiElement(:)(':')
                      PsiWhiteSpace(' ')
                      SimpleType: AA
                        CodeReferenceElement: AA
                          PsiElement(identifier)('AA')
                    PsiElement(,)(',')
                    PsiWhiteSpace(' ')
                    TypedExpression
                      ReferenceExpression: b
                        PsiElement(identifier)('b')
                      PsiElement(:)(':')
                      PsiWhiteSpace(' ')
                      SimpleType: BB
                        CodeReferenceElement: BB
                          PsiElement(identifier)('BB')
                    PsiElement())(')')
            PsiWhiteSpace(' ')
            PsiElement(})('}')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiWhiteSpace('\n\n')
  ScObject: Test
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Test')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition: lx
          AnnotationsList
            <empty list>
          Modifiers
            PsiElement(lazy)('lazy')
          PsiWhiteSpace(' ')
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: lx
              PsiElement(identifier)('lx')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          BlockExpression
            PsiElement({)('{')
            PsiWhiteSpace(' ')
            MethodCall
              ReferenceExpression: println
                PsiElement(identifier)('println')
              ArgumentList
                PsiElement(()('(')
                StringLiteral
                  PsiElement(string content)('"hello"')
                PsiElement())(')')
            PsiElement(;)(';')
            PsiWhiteSpace(' ')
            IntegerLiteral
              PsiElement(integer)('3')
            PsiWhiteSpace(' ')
            PsiElement(})('}')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: test1
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('test1')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: x
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Int
                    CodeReferenceElement: Int
                      PsiElement(identifier)('Int')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                ReferenceExpression: lx
                  PsiElement(identifier)('lx')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: ???
            PsiElement(identifier)('???')
        PsiWhiteSpace('\n  ')
        ScFunctionDefinition: test2
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('test2')
          Parameters
            ParametersClause
              PsiElement(()('(')
              Parameter: x
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(identifier)('x')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                ParameterType
                  SimpleType: Int
                    CodeReferenceElement: Int
                      PsiElement(identifier)('Int')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                MatchStatement
                  ReferenceExpression: lx
                    PsiElement(identifier)('lx')
                  PsiWhiteSpace(' ')
                  PsiElement(match)('match')
                  PsiWhiteSpace(' ')
                  PsiElement({)('{')
                  PsiWhiteSpace(' ')
                  CaseClauses
                    CaseClause
                      PsiElement(case)('case')
                      PsiWhiteSpace(' ')
                      LiteralPattern
                        IntegerLiteral
                          PsiElement(integer)('0')
                      PsiWhiteSpace(' ')
                      PsiElement(=>)('=>')
                      PsiWhiteSpace(' ')
                      BlockOfExpressions
                        IntegerLiteral
                          PsiElement(integer)('1')
                        PsiElement(;)(';')
                    PsiWhiteSpace(' ')
                    CaseClause
                      PsiElement(case)('case')
                      PsiWhiteSpace(' ')
                      LiteralPattern
                        IntegerLiteral
                          PsiElement(integer)('3')
                      PsiWhiteSpace(' ')
                      PsiElement(=>)('=>')
                      PsiWhiteSpace(' ')
                      BlockOfExpressions
                        IntegerLiteral
                          PsiElement(integer)('4')
                  PsiWhiteSpace(' ')
                  PsiElement(})('}')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: ???
            PsiElement(identifier)('???')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
