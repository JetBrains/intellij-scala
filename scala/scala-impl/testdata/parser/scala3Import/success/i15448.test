object SelectableBreaks1 {
  object opaques {
    opaque type Pointer[S] <: S = S
    object Pointer {
      implicit class PointerSelectable[S](private val f: Pointer[S]) extends Selectable {
        def selectDynamic(name: String): Any = ???
        def applyDynamic(name: String)(): Any = ???
      }
    }
  }
  import opaques.*

  type Break = AnyRef {
    def boom(): Nothing
  }

  def makeBreak(): Pointer[Break] = ???

  makeBreak().boom()
}

-----
ScalaFile
  ScObject: SelectableBreaks1
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('SelectableBreaks1')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScObject: opaques
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(object)('object')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('opaques')
          PsiWhiteSpace(' ')
          ExtendsBlock
            ScTemplateBody
              PsiElement({)('{')
              PsiWhiteSpace('\n    ')
              ScTypeAliasDefinition: Pointer
                AnnotationsList
                  <empty list>
                Modifiers
                  PsiElement(opaque)('opaque')
                PsiWhiteSpace(' ')
                PsiElement(type)('type')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('Pointer')
                TypeParameterClause
                  PsiElement([)('[')
                  TypeParameter: S
                    PsiElement(identifier)('S')
                  PsiElement(])(']')
                PsiWhiteSpace(' ')
                PsiElement(<:)('<:')
                PsiWhiteSpace(' ')
                SimpleType: S
                  CodeReferenceElement: S
                    PsiElement(identifier)('S')
                PsiWhiteSpace(' ')
                PsiElement(=)('=')
                PsiWhiteSpace(' ')
                SimpleType: S
                  CodeReferenceElement: S
                    PsiElement(identifier)('S')
              PsiWhiteSpace('\n    ')
              ScObject: Pointer
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(object)('object')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('Pointer')
                PsiWhiteSpace(' ')
                ExtendsBlock
                  ScTemplateBody
                    PsiElement({)('{')
                    PsiWhiteSpace('\n      ')
                    ScClass: PointerSelectable
                      AnnotationsList
                        <empty list>
                      Modifiers
                        PsiElement(implicit)('implicit')
                      PsiWhiteSpace(' ')
                      PsiElement(class)('class')
                      PsiWhiteSpace(' ')
                      PsiElement(identifier)('PointerSelectable')
                      TypeParameterClause
                        PsiElement([)('[')
                        TypeParameter: S
                          PsiElement(identifier)('S')
                        PsiElement(])(']')
                      PrimaryConstructor
                        AnnotationsList
                          <empty list>
                        Modifiers
                          <empty list>
                        Parameters
                          ParametersClause
                            PsiElement(()('(')
                            ClassParameter: f
                              AnnotationsList
                                <empty list>
                              Modifiers
                                AccessModifier
                                  PsiElement(private)('private')
                              PsiWhiteSpace(' ')
                              PsiElement(val)('val')
                              PsiWhiteSpace(' ')
                              PsiElement(identifier)('f')
                              PsiElement(:)(':')
                              PsiWhiteSpace(' ')
                              ParameterType
                                ParametrizedType: Pointer[S]
                                  SimpleType: Pointer
                                    CodeReferenceElement: Pointer
                                      PsiElement(identifier)('Pointer')
                                  TypeArgumentsList
                                    PsiElement([)('[')
                                    SimpleType: S
                                      CodeReferenceElement: S
                                        PsiElement(identifier)('S')
                                    PsiElement(])(']')
                            PsiElement())(')')
                      PsiWhiteSpace(' ')
                      ExtendsBlock
                        PsiElement(extends)('extends')
                        PsiWhiteSpace(' ')
                        TemplateParents
                          ConstructorInvocation
                            SimpleType: Selectable
                              CodeReferenceElement: Selectable
                                PsiElement(identifier)('Selectable')
                        PsiWhiteSpace(' ')
                        ScTemplateBody
                          PsiElement({)('{')
                          PsiWhiteSpace('\n        ')
                          ScFunctionDefinition: selectDynamic
                            AnnotationsList
                              <empty list>
                            Modifiers
                              <empty list>
                            PsiElement(def)('def')
                            PsiWhiteSpace(' ')
                            PsiElement(identifier)('selectDynamic')
                            Parameters
                              ParametersClause
                                PsiElement(()('(')
                                Parameter: name
                                  AnnotationsList
                                    <empty list>
                                  Modifiers
                                    <empty list>
                                  PsiElement(identifier)('name')
                                  PsiElement(:)(':')
                                  PsiWhiteSpace(' ')
                                  ParameterType
                                    SimpleType: String
                                      CodeReferenceElement: String
                                        PsiElement(identifier)('String')
                                PsiElement())(')')
                            PsiElement(:)(':')
                            PsiWhiteSpace(' ')
                            SimpleType: Any
                              CodeReferenceElement: Any
                                PsiElement(identifier)('Any')
                            PsiWhiteSpace(' ')
                            PsiElement(=)('=')
                            PsiWhiteSpace(' ')
                            ReferenceExpression: ???
                              PsiElement(identifier)('???')
                          PsiWhiteSpace('\n        ')
                          ScFunctionDefinition: applyDynamic
                            AnnotationsList
                              <empty list>
                            Modifiers
                              <empty list>
                            PsiElement(def)('def')
                            PsiWhiteSpace(' ')
                            PsiElement(identifier)('applyDynamic')
                            Parameters
                              ParametersClause
                                PsiElement(()('(')
                                Parameter: name
                                  AnnotationsList
                                    <empty list>
                                  Modifiers
                                    <empty list>
                                  PsiElement(identifier)('name')
                                  PsiElement(:)(':')
                                  PsiWhiteSpace(' ')
                                  ParameterType
                                    SimpleType: String
                                      CodeReferenceElement: String
                                        PsiElement(identifier)('String')
                                PsiElement())(')')
                              ParametersClause
                                PsiElement(()('(')
                                PsiElement())(')')
                            PsiElement(:)(':')
                            PsiWhiteSpace(' ')
                            SimpleType: Any
                              CodeReferenceElement: Any
                                PsiElement(identifier)('Any')
                            PsiWhiteSpace(' ')
                            PsiElement(=)('=')
                            PsiWhiteSpace(' ')
                            ReferenceExpression: ???
                              PsiElement(identifier)('???')
                          PsiWhiteSpace('\n      ')
                          PsiElement(})('}')
                    PsiWhiteSpace('\n    ')
                    PsiElement(})('}')
              PsiWhiteSpace('\n  ')
              PsiElement(})('}')
        PsiWhiteSpace('\n  ')
        ScImportStatement
          PsiElement(import)('import')
          PsiWhiteSpace(' ')
          ImportExpression
            CodeReferenceElement: opaques
              PsiElement(identifier)('opaques')
            PsiElement(.)('.')
            PsiElement(*)('*')
        PsiWhiteSpace('\n\n  ')
        ScTypeAliasDefinition: Break
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(type)('type')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('Break')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          CompoundType: AnyRef {
    def boom(): Nothing
  }
            SimpleType: AnyRef
              CodeReferenceElement: AnyRef
                PsiElement(identifier)('AnyRef')
            PsiWhiteSpace(' ')
            Refinement
              PsiElement({)('{')
              PsiWhiteSpace('\n    ')
              ScFunctionDeclaration: boom
                AnnotationsList
                  <empty list>
                Modifiers
                  <empty list>
                PsiElement(def)('def')
                PsiWhiteSpace(' ')
                PsiElement(identifier)('boom')
                Parameters
                  ParametersClause
                    PsiElement(()('(')
                    PsiElement())(')')
                PsiElement(:)(':')
                PsiWhiteSpace(' ')
                SimpleType: Nothing
                  CodeReferenceElement: Nothing
                    PsiElement(identifier)('Nothing')
              PsiWhiteSpace('\n  ')
              PsiElement(})('}')
        PsiWhiteSpace('\n\n  ')
        ScFunctionDefinition: makeBreak
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          PsiElement(identifier)('makeBreak')
          Parameters
            ParametersClause
              PsiElement(()('(')
              PsiElement())(')')
          PsiElement(:)(':')
          PsiWhiteSpace(' ')
          ParametrizedType: Pointer[Break]
            SimpleType: Pointer
              CodeReferenceElement: Pointer
                PsiElement(identifier)('Pointer')
            TypeArgumentsList
              PsiElement([)('[')
              SimpleType: Break
                CodeReferenceElement: Break
                  PsiElement(identifier)('Break')
              PsiElement(])(']')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          ReferenceExpression: ???
            PsiElement(identifier)('???')
        PsiWhiteSpace('\n\n  ')
        MethodCall
          ReferenceExpression: makeBreak().boom
            MethodCall
              ReferenceExpression: makeBreak
                PsiElement(identifier)('makeBreak')
              ArgumentList
                PsiElement(()('(')
                PsiElement())(')')
            PsiElement(.)('.')
            PsiElement(identifier)('boom')
          ArgumentList
            PsiElement(()('(')
            PsiElement())(')')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
