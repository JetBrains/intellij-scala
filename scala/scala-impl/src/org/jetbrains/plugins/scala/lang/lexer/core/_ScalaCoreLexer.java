// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: _ScalaCoreLexer.flex

package org.jetbrains.plugins.scala.lang.lexer.core;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.util.containers.Stack;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.plugins.scala.lang.lexer.ScalaTokenTypesEx;
import org.jetbrains.plugins.scala.lang.scaladoc.parser.ScalaDocElementTypes;
import com.intellij.openapi.util.text.StringUtil;

import static com.intellij.openapi.util.text.StringUtil.endsWith;
import static org.jetbrains.plugins.scala.lang.lexer.ScalaTokenType.*;
import static org.jetbrains.plugins.scala.lang.lexer.ScalaTokenTypes.*;

@SuppressWarnings({"ALL"})

public class _ScalaCoreLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMON_STATE = 2;
  public static final int WAIT_FOR_INTERPOLATED_STRING = 4;
  public static final int INSIDE_INTERPOLATED_STRING = 6;
  public static final int INSIDE_MULTI_LINE_INTERPOLATED_STRING = 8;
  public static final int INJ_COMMON_STATE = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
          0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5, 5
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
          "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
                  "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
                  "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
                  "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
                  "\1\u1d00\1\u1e00\1\u1f00\1\u2000\1\u2100\1\u2200\1\u2300\1\u2400"+
                  "\1\u2500\1\u2600\1\u1f00\1\u2700\1\u2800\1\u2900\1\u2a00\1\u2b00"+
                  "\1\u2c00\1\u2d00\1\u2e00\1\u2500\31\u0100\1\u2f00\121\u0100\1\u3000"+
                  "\4\u0100\1\u3100\1\u0100\1\u3200\1\u3300\1\u3400\1\u3500\1\u3600"+
                  "\1\u3700\53\u0100\1\u3800\10\u3900\31\u3a00\1\u0100\1\u3b00\1\u3c00"+
                  "\1\u0100\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100\1\u4200\1\u4300"+
                  "\1\u4400\1\u4500\1\u0100\1\u4600\1\u4700\1\u4800\1\u4900\1\u4a00"+
                  "\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u4f00\1\u5000\1\u5100\1\u5200"+
                  "\1\u5300\1\u5400\1\u5500\1\u5600\1\u5700\1\u5800\1\u5900\1\u3a00"+
                  "\1\u5a00\1\u5b00\1\u5c00\1\u5d00\3\u0100\1\u5e00\1\u5f00\1\u6000"+
                  "\12\u3a00\4\u0100\1\u6100\17\u3a00\2\u0100\1\u6200\41\u3a00\2\u0100"+
                  "\1\u6300\1\u6400\2\u3a00\1\u6500\1\u6600\27\u0100\1\u6700\4\u0100"+
                  "\1\u6800\1\u6900\42\u3a00\1\u0100\1\u6a00\1\u6b00\11\u3a00\1\u6c00"+
                  "\23\u3a00\1\u6d00\1\u6e00\1\u6f00\1\u7000\1\u7100\1\u7200\1\u7300"+
                  "\1\u7400\2\u2500\1\u7500\5\u3a00\1\u7600\1\u7700\1\u7800\5\u3a00"+
                  "\1\u7900\1\u7a00\2\u3a00\1\u7b00\1\u7c00\1\u7d00\1\u3a00\1\u7e00"+
                  "\1\u7f00\1\u8000\1\u8100\2\u2500\1\u8200\1\u8300\1\u8400\1\u8500"+
                  "\1\u8600\1\u8700\4\u3a00\246\u0100\1\u8800\20\u0100\1\u8900\1\u8a00"+
                  "\25\u0100\1\u8b00\34\u0100\1\u8c00\14\u3a00\2\u0100\1\u8d00\5\u3a00"+
                  "\23\u0100\1\u8e00\u0aec\u3a00\1\u8f00\1\u9000\u02fe\u3a00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
          "\11\0\1\1\1\2\1\3\1\1\1\4\16\0\4\5"+
                  "\1\1\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
                  "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
                  "\1\25\3\26\4\27\2\30\1\31\1\32\1\33\1\34"+
                  "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
                  "\1\45\5\46\1\47\6\46\1\50\1\51\3\46\1\52"+
                  "\2\46\1\53\1\54\1\55\1\13\1\56\1\57\1\60"+
                  "\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70"+
                  "\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\46"+
                  "\1\100\1\101\1\102\1\103\1\104\1\105\1\106\1\107"+
                  "\1\110\1\111\1\13\1\112\1\13\6\0\1\113\32\0"+
                  "\2\5\4\46\1\13\2\5\1\13\1\46\1\5\1\13"+
                  "\1\0\1\13\1\5\2\13\3\5\1\46\4\5\1\46"+
                  "\5\5\27\46\1\13\37\46\1\13\u01ca\46\4\5\14\46"+
                  "\16\5\5\46\7\5\1\46\1\5\1\46\21\5\160\0"+
                  "\5\46\1\5\2\46\2\5\4\46\1\5\1\46\6\5"+
                  "\1\46\1\5\3\46\1\5\1\46\1\5\24\46\1\5"+
                  "\123\46\1\13\213\46\1\13\5\0\2\5\246\46\1\5"+
                  "\46\46\2\5\1\46\6\5\51\46\4\5\2\13\1\46"+
                  "\1\5\55\0\1\5\1\0\1\5\2\0\1\5\2\0"+
                  "\1\5\1\0\10\5\33\46\4\5\4\46\15\5\6\0"+
                  "\3\13\2\5\1\46\2\5\2\13\13\0\1\5\1\0"+
                  "\3\5\53\46\37\0\4\5\2\46\1\0\143\46\1\5"+
                  "\1\46\10\0\1\13\6\0\2\46\2\0\1\13\4\0"+
                  "\2\46\12\0\3\46\2\13\1\46\17\5\1\0\1\46"+
                  "\1\0\36\46\33\0\2\5\131\46\13\0\1\46\16\5"+
                  "\12\0\41\46\11\0\2\46\1\13\3\5\1\46\2\5"+
                  "\1\0\30\46\4\0\1\46\11\0\1\46\3\0\1\46"+
                  "\5\0\22\5\31\46\3\0\4\5\13\46\65\5\25\46"+
                  "\1\5\22\46\13\5\61\0\66\46\3\0\1\46\22\0"+
                  "\1\46\7\0\12\46\2\0\2\5\12\0\1\5\20\46"+
                  "\3\0\1\5\10\46\2\5\2\46\2\5\26\46\1\5"+
                  "\7\46\1\5\1\46\3\5\4\46\2\5\1\0\1\46"+
                  "\7\0\2\5\2\0\2\5\3\0\1\46\10\5\1\0"+
                  "\4\5\2\46\1\5\3\46\2\0\2\5\12\0\4\46"+
                  "\6\5\1\13\2\46\1\5\1\0\2\5\3\0\1\5"+
                  "\6\46\4\5\2\46\2\5\26\46\1\5\7\46\1\5"+
                  "\2\46\1\5\2\46\1\5\2\46\2\5\1\0\1\5"+
                  "\5\0\4\5\2\0\2\5\3\0\3\5\1\0\7\5"+
                  "\4\46\1\5\1\46\7\5\14\0\3\46\1\0\13\5"+
                  "\3\0\1\5\11\46\1\5\3\46\1\5\26\46\1\5"+
                  "\7\46\1\5\2\46\1\5\5\46\2\5\1\0\1\46"+
                  "\10\0\1\5\3\0\1\5\3\0\2\5\1\46\17\5"+
                  "\2\46\2\0\2\5\12\0\1\5\1\46\7\5\1\46"+
                  "\6\0\1\5\3\0\1\5\10\46\2\5\2\46\2\5"+
                  "\26\46\1\5\7\46\1\5\2\46\1\5\5\46\2\5"+
                  "\1\0\1\46\7\0\2\5\2\0\2\5\3\0\7\5"+
                  "\3\0\4\5\2\46\1\5\3\46\2\0\2\5\12\0"+
                  "\1\13\1\46\20\5\1\0\1\46\1\5\6\46\3\5"+
                  "\3\46\1\5\4\46\3\5\2\46\1\5\1\46\1\5"+
                  "\2\46\3\5\2\46\3\5\3\46\3\5\14\46\4\5"+
                  "\5\0\3\5\3\0\1\5\4\0\2\5\1\46\6\5"+
                  "\1\0\16\5\12\0\3\5\6\13\1\46\1\13\5\5"+
                  "\5\0\10\46\1\5\3\46\1\5\27\46\1\5\20\46"+
                  "\3\5\1\46\7\0\1\5\3\0\1\5\4\0\7\5"+
                  "\2\0\1\5\3\46\5\5\2\46\2\0\2\5\12\0"+
                  "\17\5\1\13\1\46\3\0\1\5\10\46\1\5\3\46"+
                  "\1\5\27\46\1\5\12\46\1\5\5\46\2\5\1\0"+
                  "\1\46\7\0\1\5\3\0\1\5\4\0\7\5\2\0"+
                  "\7\5\1\46\1\5\2\46\2\0\2\5\12\0\1\5"+
                  "\2\46\15\5\4\0\11\46\1\5\3\46\1\5\51\46"+
                  "\2\0\1\46\7\0\1\5\3\0\1\5\4\0\1\46"+
                  "\1\13\4\5\3\46\1\0\7\5\3\46\2\0\2\5"+
                  "\12\0\11\5\1\13\6\46\1\5\3\0\1\5\22\46"+
                  "\3\5\30\46\1\5\11\46\1\5\1\46\2\5\7\46"+
                  "\3\5\1\0\4\5\6\0\1\5\1\0\1\5\10\0"+
                  "\6\5\12\0\2\5\2\0\15\5\60\46\1\0\2\46"+
                  "\7\0\4\5\10\46\10\0\1\5\12\0\47\5\2\46"+
                  "\1\5\1\46\1\5\5\46\1\5\30\46\1\5\1\46"+
                  "\1\5\12\46\1\0\2\46\11\0\1\46\2\5\5\46"+
                  "\1\5\1\46\1\5\6\0\2\5\12\0\2\5\4\46"+
                  "\40\5\1\46\3\13\17\5\1\13\1\5\3\13\2\0"+
                  "\6\13\12\0\12\5\1\13\1\0\1\13\1\0\1\13"+
                  "\1\0\4\5\2\0\10\46\1\5\44\46\4\5\24\0"+
                  "\1\5\2\0\5\46\13\0\1\5\44\0\1\5\10\13"+
                  "\1\0\6\13\1\5\2\13\5\5\4\13\47\5\53\46"+
                  "\24\0\1\46\12\0\6\5\6\46\4\0\4\46\3\0"+
                  "\1\46\3\0\2\46\7\0\3\46\4\0\15\46\14\0"+
                  "\1\46\17\0\2\13\46\46\1\5\1\46\5\5\1\46"+
                  "\2\5\53\46\1\5\115\46\1\5\4\46\2\5\7\46"+
                  "\1\5\1\46\1\5\4\46\2\5\51\46\1\5\4\46"+
                  "\2\5\41\46\1\5\4\46\2\5\7\46\1\5\1\46"+
                  "\1\5\4\46\2\5\17\46\1\5\71\46\1\5\4\46"+
                  "\2\5\103\46\2\5\3\0\40\5\20\46\12\13\6\5"+
                  "\126\46\2\5\6\46\3\5\u016c\46\1\13\1\5\21\46"+
                  "\1\5\32\46\5\5\113\46\3\5\13\46\7\5\15\46"+
                  "\1\5\4\46\3\0\13\5\22\46\3\0\13\5\22\46"+
                  "\2\0\14\5\15\46\1\5\3\46\1\5\2\0\14\5"+
                  "\64\46\40\0\3\5\1\46\3\5\2\46\1\0\2\5"+
                  "\12\0\41\5\4\0\1\5\12\0\6\5\131\46\7\5"+
                  "\5\46\2\0\42\46\1\0\1\46\5\5\106\46\12\5"+
                  "\37\46\1\5\14\0\4\5\14\0\4\5\1\13\5\5"+
                  "\12\0\36\46\2\5\5\46\13\5\54\46\4\5\32\46"+
                  "\6\5\12\0\4\5\42\13\27\46\5\0\4\5\65\46"+
                  "\12\0\1\5\35\0\2\5\13\0\6\5\12\0\15\5"+
                  "\1\46\10\5\16\0\1\5\2\0\77\5\5\0\57\46"+
                  "\21\0\7\46\4\5\12\0\7\5\12\13\11\0\11\13"+
                  "\3\5\3\0\36\46\15\0\2\46\12\0\54\46\16\0"+
                  "\14\5\44\46\24\0\10\5\12\0\3\5\3\46\12\0"+
                  "\44\46\2\5\11\46\7\5\53\46\2\5\3\46\20\5"+
                  "\3\0\1\5\25\0\4\46\1\0\6\46\1\0\2\46"+
                  "\3\0\1\46\5\5\300\46\72\0\1\5\5\0\26\46"+
                  "\2\5\6\46\2\5\46\46\2\5\6\46\2\5\10\46"+
                  "\1\5\1\46\1\5\1\46\1\5\1\46\1\5\37\46"+
                  "\2\5\65\46\1\5\7\46\1\5\1\46\3\5\3\46"+
                  "\1\5\7\46\3\5\4\46\2\5\6\46\4\5\15\46"+
                  "\5\5\3\46\1\5\7\46\16\5\5\0\30\5\2\114"+
                  "\5\0\20\5\2\46\3\5\1\13\15\5\1\13\1\5"+
                  "\1\46\13\5\5\0\1\5\12\0\1\5\1\46\10\5"+
                  "\3\13\2\5\1\46\12\5\3\13\3\5\15\46\3\5"+
                  "\40\46\20\5\15\0\4\5\1\0\3\5\14\0\17\5"+
                  "\2\13\1\46\4\13\1\46\2\13\12\46\1\13\1\46"+
                  "\3\13\5\46\6\13\1\46\1\13\1\46\1\13\1\46"+
                  "\1\13\4\46\1\13\13\46\2\13\4\46\5\13\5\46"+
                  "\4\13\1\46\1\13\20\5\51\46\1\5\2\13\4\5"+
                  "\1\115\101\13\1\116\u0135\13\4\5\35\13\2\5\374\13"+
                  "\31\5\13\13\121\5\116\13\26\5\u0268\13\54\5\61\13"+
                  "\2\5\37\13\12\5\u0193\13\26\5\77\13\4\5\40\13"+
                  "\2\5\166\13\2\5\40\13\2\5\150\13\57\46\1\5"+
                  "\57\46\1\5\205\46\6\13\4\46\3\0\2\46\14\5"+
                  "\46\46\1\5\1\46\5\5\1\46\2\5\70\46\7\5"+
                  "\1\46\17\5\1\0\27\46\11\5\7\46\1\5\7\46"+
                  "\1\5\7\46\1\5\7\46\1\5\7\46\1\5\7\46"+
                  "\1\5\7\46\1\5\7\46\1\5\40\0\57\5\1\46"+
                  "\120\5\32\13\1\5\131\13\14\5\326\13\32\5\14\13"+
                  "\10\5\1\13\3\46\12\5\2\13\14\5\1\13\11\46"+
                  "\6\0\1\5\5\46\2\13\5\46\1\5\2\13\1\5"+
                  "\126\46\2\5\2\0\2\5\3\46\1\5\132\46\1\5"+
                  "\4\46\5\5\53\46\1\5\136\46\1\5\2\13\4\5"+
                  "\12\13\40\46\44\13\14\5\20\46\37\13\13\5\36\13"+
                  "\10\5\1\13\17\5\40\13\12\5\47\13\17\5\100\13"+
                  "\300\46\100\13\375\46\3\5\215\46\3\5\67\13\11\5"+
                  "\56\46\2\5\15\46\3\5\20\46\12\0\2\46\24\5"+
                  "\57\46\1\0\4\5\12\0\1\5\37\46\2\0\120\46"+
                  "\2\0\45\5\11\46\2\5\147\46\2\5\65\46\2\5"+
                  "\11\46\52\5\15\46\1\0\3\46\1\0\4\46\1\0"+
                  "\27\46\5\0\4\13\1\0\11\5\2\13\1\46\1\13"+
                  "\6\5\64\46\14\5\2\0\62\46\22\0\12\5\12\0"+
                  "\6\5\22\0\6\46\3\5\1\46\1\5\2\46\13\0"+
                  "\34\46\10\0\2\5\27\46\15\0\14\5\35\46\3\5"+
                  "\4\0\57\46\16\0\16\5\1\46\12\0\6\5\5\46"+
                  "\1\0\12\46\12\0\5\46\1\5\51\46\16\0\11\5"+
                  "\3\46\1\0\10\46\2\0\2\5\12\0\6\5\27\46"+
                  "\3\13\1\46\3\0\62\46\1\0\1\46\3\0\2\46"+
                  "\2\0\5\46\2\0\1\46\1\0\1\46\30\5\3\46"+
                  "\2\5\13\46\5\0\2\5\3\46\2\0\12\5\6\46"+
                  "\2\5\6\46\2\5\6\46\11\5\7\46\1\5\7\46"+
                  "\1\5\53\46\1\5\16\46\6\5\163\46\10\0\1\5"+
                  "\2\0\2\5\12\0\6\5\244\46\14\5\27\46\4\5"+
                  "\61\46\4\5\u0100\3\u0100\5\156\46\2\5\152\46\46\5"+
                  "\7\46\14\5\5\46\5\5\1\46\1\0\12\46\1\13"+
                  "\15\46\1\5\5\46\1\5\1\46\1\5\2\46\1\5"+
                  "\2\46\1\5\154\46\41\5\153\46\22\5\100\46\2\5"+
                  "\66\46\50\5\15\46\1\13\2\5\20\0\20\5\20\0"+
                  "\3\5\2\46\30\5\3\46\22\5\1\13\1\5\3\13"+
                  "\2\5\1\46\6\5\5\46\1\5\207\46\2\5\1\0"+
                  "\4\5\1\46\6\5\1\13\4\5\12\0\2\5\3\13"+
                  "\2\5\32\46\4\5\1\46\1\5\32\46\1\5\1\13"+
                  "\1\5\1\13\7\5\131\46\3\5\6\46\2\5\6\46"+
                  "\2\5\6\46\2\5\3\46\3\5\2\46\1\13\1\5"+
                  "\1\13\2\46\1\5\7\13\12\5\3\0\2\13\2\5"+
                  "\14\46\1\5\32\46\1\5\23\46\1\5\2\46\1\5"+
                  "\17\46\2\5\16\46\42\5\173\46\74\5\11\13\65\46"+
                  "\4\5\21\13\2\5\3\13\1\5\14\13\4\5\1\13"+
                  "\57\5\55\13\1\0\202\5\35\46\3\5\61\46\17\5"+
                  "\1\0\37\5\40\46\15\5\36\46\5\5\46\46\5\0"+
                  "\5\5\36\46\2\5\44\46\4\5\10\46\1\5\5\46"+
                  "\52\5\236\46\2\5\12\0\6\5\44\46\4\5\44\46"+
                  "\4\5\50\46\10\5\64\46\234\5\67\46\11\5\26\46"+
                  "\12\5\10\46\230\5\6\46\2\5\1\46\1\5\54\46"+
                  "\1\5\2\46\3\5\1\46\2\5\27\46\12\5\27\46"+
                  "\2\13\7\5\37\46\101\5\23\46\1\5\2\46\12\5"+
                  "\26\46\12\5\32\46\106\5\70\46\6\5\2\46\100\5"+
                  "\1\46\3\0\1\5\2\0\5\5\4\0\4\46\1\5"+
                  "\3\46\1\5\35\46\2\5\3\0\4\5\1\0\40\5"+
                  "\35\46\3\5\35\46\43\5\10\46\1\13\34\46\2\0"+
                  "\31\5\66\46\12\5\26\46\12\5\23\46\15\5\22\46"+
                  "\156\5\111\46\67\5\63\46\15\5\63\46\15\5\44\46"+
                  "\4\0\10\5\12\0\u0146\5\52\46\1\5\2\0\3\5"+
                  "\2\46\116\5\35\46\12\5\1\46\10\5\26\46\13\0"+
                  "\137\5\25\46\33\5\27\46\11\5\3\0\65\46\17\0"+
                  "\37\5\12\0\17\5\4\0\55\46\13\0\2\5\1\0"+
                  "\17\5\1\0\2\5\31\46\7\5\12\0\6\5\3\0"+
                  "\44\46\16\0\1\5\12\0\4\5\1\46\2\0\1\46"+
                  "\10\5\43\46\1\0\2\5\1\46\11\5\3\0\60\46"+
                  "\16\0\4\46\4\5\4\0\1\5\14\0\1\46\1\5"+
                  "\1\46\43\5\22\46\1\5\31\46\14\0\6\5\1\0"+
                  "\101\5\7\46\1\5\1\46\1\5\4\46\1\5\17\46"+
                  "\1\5\12\46\7\5\57\46\14\0\5\5\12\0\6\5"+
                  "\4\0\1\5\10\46\2\5\2\46\2\5\26\46\1\5"+
                  "\7\46\1\5\2\46\1\5\5\46\1\5\2\0\1\46"+
                  "\7\0\2\5\2\0\2\5\3\0\2\5\1\46\6\5"+
                  "\1\0\5\5\5\46\2\0\2\5\7\0\3\5\5\0"+
                  "\213\5\65\46\22\0\4\46\5\5\12\0\4\5\1\0"+
                  "\3\46\36\5\60\46\24\0\2\46\1\5\1\46\10\5"+
                  "\12\0\246\5\57\46\7\0\2\5\11\0\27\5\4\46"+
                  "\2\0\42\5\60\46\21\0\3\5\1\46\13\5\12\0"+
                  "\46\5\53\46\15\0\1\46\7\5\12\0\66\5\33\46"+
                  "\2\5\17\0\4\5\12\0\5\5\1\13\300\5\54\46"+
                  "\17\0\145\5\100\46\12\0\25\5\10\46\2\5\1\46"+
                  "\2\5\10\46\1\5\2\46\1\5\30\46\6\0\1\5"+
                  "\2\0\2\5\4\0\1\46\1\0\1\46\2\0\14\5"+
                  "\12\0\106\5\10\46\2\5\47\46\7\0\2\5\7\0"+
                  "\1\46\1\5\1\46\1\0\33\5\1\46\12\0\50\46"+
                  "\7\0\1\46\4\0\10\5\1\0\10\5\1\46\13\0"+
                  "\56\46\20\0\3\5\1\46\42\5\71\46\7\5\11\46"+
                  "\1\5\45\46\10\0\1\5\10\0\1\46\17\5\12\0"+
                  "\30\5\36\46\2\5\26\0\1\5\16\0\111\5\7\46"+
                  "\1\5\2\46\1\5\46\46\6\0\3\5\1\0\1\5"+
                  "\2\0\1\5\7\0\1\46\1\0\10\5\12\0\6\5"+
                  "\6\46\1\5\2\46\1\5\40\46\5\0\1\5\2\0"+
                  "\1\5\5\0\1\46\7\5\12\0\u0136\5\23\46\4\0"+
                  "\271\5\1\46\44\5\10\13\4\46\21\13\16\5\232\46"+
                  "\146\5\157\46\21\5\304\46\274\5\57\46\1\5\11\0"+
                  "\307\5\107\46\271\5\71\46\7\5\37\46\1\5\12\0"+
                  "\146\5\36\46\2\5\5\0\13\5\60\46\7\0\5\5"+
                  "\4\13\4\46\1\5\1\13\12\5\12\0\11\5\25\46"+
                  "\5\5\23\46\260\5\100\46\200\5\113\46\4\5\1\0"+
                  "\1\46\67\0\7\5\4\0\15\46\100\5\2\46\1\5"+
                  "\1\46\1\0\13\5\2\0\16\5\370\46\10\5\326\46"+
                  "\52\5\11\46\367\5\37\46\61\5\3\46\21\5\4\46"+
                  "\10\5\u018c\46\4\5\153\46\5\5\15\46\3\5\11\46"+
                  "\7\5\12\46\2\5\1\13\2\0\1\5\4\0\134\5"+
                  "\366\13\12\5\47\13\2\5\74\13\5\0\3\13\26\0"+
                  "\2\13\7\0\36\13\4\0\73\13\27\5\102\13\3\0"+
                  "\1\13\272\5\127\13\251\5\125\46\1\5\107\46\1\5"+
                  "\2\46\2\5\1\46\2\5\2\46\2\5\4\46\1\5"+
                  "\14\46\1\5\1\46\1\5\7\46\1\5\101\46\1\5"+
                  "\4\46\2\5\10\46\1\5\7\46\1\5\34\46\1\5"+
                  "\4\46\1\5\5\46\1\5\1\46\3\5\7\46\1\5"+
                  "\u0154\46\2\5\31\46\1\13\31\46\1\13\37\46\1\13"+
                  "\31\46\1\13\37\46\1\13\31\46\1\13\37\46\1\13"+
                  "\31\46\1\13\37\46\1\13\31\46\1\13\10\46\2\5"+
                  "\151\0\4\13\62\0\10\13\1\0\16\13\1\0\2\13"+
                  "\24\5\5\0\1\5\17\0\120\5\7\0\1\5\21\0"+
                  "\2\5\7\0\1\5\2\0\1\5\5\0\325\5\55\46"+
                  "\3\5\7\0\7\46\2\5\12\0\4\5\1\46\1\13"+
                  "\u0170\5\54\46\16\0\5\5\306\46\13\5\7\0\51\5"+
                  "\104\46\7\0\1\46\4\5\12\0\u0152\5\1\13\3\5"+
                  "\1\46\175\5\1\13\321\5\4\46\1\5\33\46\1\5"+
                  "\2\46\1\5\1\46\2\5\1\46\1\5\12\46\1\5"+
                  "\4\46\1\5\1\46\1\5\1\46\6\5\1\46\4\5"+
                  "\1\46\1\5\1\46\1\5\1\46\1\5\3\46\1\5"+
                  "\2\46\1\5\1\46\2\5\1\46\1\5\1\46\1\5"+
                  "\1\46\1\5\1\46\1\5\1\46\1\5\2\46\1\5"+
                  "\1\46\2\5\4\46\1\5\7\46\1\5\4\46\1\5"+
                  "\4\46\1\5\1\46\1\5\12\46\1\5\21\46\5\5"+
                  "\3\46\1\5\5\46\1\5\21\46\64\5\2\13\16\5"+
                  "\54\13\4\5\144\13\14\5\17\13\2\5\17\13\1\5"+
                  "\17\13\1\5\45\13\32\5\135\13\3\5\75\13\71\5"+
                  "\35\13\15\5\54\13\4\5\11\13\7\5\2\13\16\5"+
                  "\6\13\232\5\373\13\5\5\326\13\12\5\15\13\3\5"+
                  "\13\13\5\5\164\13\14\5\131\13\7\5\14\13\24\5"+
                  "\14\13\4\5\70\13\10\5\12\13\6\5\50\13\10\5"+
                  "\36\13\122\5\14\13\1\5\145\13\1\5\4\13\3\5"+
                  "\51\13\2\5\6\13\3\5\35\13\2\5\207\13\14\5"+
                  "\16\13\2\5\4\13\4\5\3\13\5\5\3\13\15\5"+
                  "\6\13\u015a\5\12\0\6\5\336\46\42\5\65\46\13\5"+
                  "\336\46\2\5\u0182\46\16\5\u0131\46\37\5\36\46\342\5"+
                  "\113\46\266\5\1\0\36\5\140\0\200\5\360\0\20\5";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[37120];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
          "\12\0\1\1\2\2\1\3\1\4\1\5\1\3\1\1"+
                  "\1\6\1\7\1\10\1\11\1\3\2\12\1\13\1\14"+
                  "\1\3\1\15\2\3\1\16\1\3\1\17\1\20\1\21"+
                  "\1\1\22\3\1\22\1\23\1\24\1\25\1\3\1\26"+
                  "\1\27\1\30\1\4\1\31\2\4\1\32\3\4\1\33"+
                  "\1\4\1\33\1\4\15\0\1\4\1\34\1\0\1\35"+
                  "\1\3\1\36\1\0\1\37\1\0\1\37\1\0\1\40"+
                  "\1\37\1\0\1\41\1\3\1\42\1\41\1\12\1\0"+
                  "\1\41\1\0\1\43\1\44\1\0\1\3\1\45\1\46"+
                  "\1\47\1\3\1\25\1\50\1\3\2\0\5\3\1\51"+
                  "\7\3\1\52\23\3\1\0\1\26\3\0\1\53\1\0"+
                  "\1\54\1\53\1\0\1\55\2\56\2\0\1\57\1\60"+
                  "\1\0\1\54\1\60\1\0\1\61\1\33\2\0\1\33"+
                  "\13\0\1\34\1\0\1\35\2\0\1\3\1\62\3\37"+
                  "\1\63\4\0\1\64\2\0\2\3\1\65\1\0\2\65"+
                  "\1\0\1\41\1\0\1\41\1\12\1\3\1\0\1\66"+
                  "\1\67\5\3\1\70\6\3\1\71\5\3\1\72\16\3"+
                  "\1\73\1\3\1\74\1\75\3\3\1\0\1\76\1\0"+
                  "\1\77\1\53\1\0\1\53\3\0\1\31\1\100\1\60"+
                  "\1\0\1\60\1\33\6\0\1\35\5\0\1\3\1\0"+
                  "\2\3\1\101\1\65\1\0\1\65\1\0\1\45\1\0"+
                  "\1\3\1\102\2\3\1\103\1\104\10\3\1\105\2\3"+
                  "\1\106\10\3\1\107\1\110\2\3\1\111\1\112\1\3"+
                  "\1\113\1\3\3\0\1\53\1\0\1\114\1\60\5\0"+
                  "\1\101\1\0\1\115\1\65\1\0\1\3\1\0\1\3"+
                  "\1\116\1\117\2\3\1\120\1\121\1\3\1\122\2\3"+
                  "\1\123\1\124\7\3\1\125\1\126\1\127\1\130\1\131"+
                  "\4\0\1\132\3\0\1\115\1\0\1\3\2\0\2\3"+
                  "\1\133\4\3\1\134\1\135\4\3\1\136\1\137\1\0"+
                  "\1\27\2\0\1\3\2\0\2\3\1\140\1\141\1\142"+
                  "\2\3\1\143\1\144\1\3\3\0\1\145\2\0\2\3"+
                  "\1\146\1\147\1\3\4\0\2\3\1\150\1\0\1\151"+
                  "\1\0\1\151\1\3";

  private static int [] zzUnpackAction() {
    int [] result = new int[452];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
          "\0\0\0\117\0\236\0\355\0\u013c\0\u018b\0\u01da\0\u0229"+
                  "\0\u0278\0\u02c7\0\u0316\0\u0316\0\u0365\0\u03b4\0\u0403\0\u03b4"+
                  "\0\u0452\0\u04a1\0\u04f0\0\u0316\0\u0316\0\u053f\0\u058e\0\u05dd"+
                  "\0\u062c\0\u03b4\0\u0316\0\u067b\0\u06ca\0\u0719\0\u0768\0\u03b4"+
                  "\0\u07b7\0\u0316\0\u0316\0\u07b7\0\u0806\0\u0855\0\u08a4\0\u08f3"+
                  "\0\u0942\0\u0991\0\u09e0\0\u0a2f\0\u0a7e\0\u0acd\0\u0b1c\0\u0b6b"+
                  "\0\u0bba\0\u0c09\0\u0c58\0\u0ca7\0\u0cf6\0\u0d45\0\u0d94\0\u0de3"+
                  "\0\u0316\0\u03b4\0\u03b4\0\u0e32\0\u0e81\0\u0ed0\0\u0316\0\u0f1f"+
                  "\0\u0316\0\u0f6e\0\u0fbd\0\u100c\0\u105b\0\u10aa\0\u0316\0\u10f9"+
                  "\0\u10f9\0\u1148\0\u1197\0\u11e6\0\u1235\0\u1284\0\u12d3\0\u1322"+
                  "\0\u1371\0\u13c0\0\u140f\0\u145e\0\u14ad\0\u14fc\0\u154b\0\u159a"+
                  "\0\u15e9\0\u1638\0\u1687\0\u16d6\0\u1725\0\u0316\0\u1774\0\u17c3"+
                  "\0\u17c3\0\u1812\0\u1861\0\u1774\0\u18b0\0\u18ff\0\u194e\0\u199d"+
                  "\0\u19ec\0\u1a3b\0\u1a8a\0\u1ad9\0\u0316\0\u1b28\0\u0316\0\u0316"+
                  "\0\u1b77\0\u1bc6\0\u0316\0\u03b4\0\u03b4\0\u1c15\0\u1c64\0\u03b4"+
                  "\0\u1cb3\0\u0806\0\u1d02\0\u0316\0\u1d51\0\u1da0\0\u1def\0\u1e3e"+
                  "\0\u07b7\0\u1e8d\0\u1edc\0\u1f2b\0\u1f7a\0\u1fc9\0\u2018\0\u2067"+
                  "\0\u07b7\0\u20b6\0\u2105\0\u2154\0\u21a3\0\u21f2\0\u2241\0\u2290"+
                  "\0\u22df\0\u232e\0\u237d\0\u23cc\0\u241b\0\u246a\0\u24b9\0\u2508"+
                  "\0\u2557\0\u25a6\0\u25f5\0\u2644\0\u2693\0\u26e2\0\u2731\0\u2780"+
                  "\0\u0f1f\0\u27cf\0\u27cf\0\u281e\0\u281e\0\u286d\0\u0316\0\u0316"+
                  "\0\u28bc\0\u290b\0\u295a\0\u0316\0\u29a9\0\u29a9\0\u29f8\0\u29f8"+
                  "\0\u2a47\0\u0316\0\u2a96\0\u1197\0\u2ae5\0\u0316\0\u2b34\0\u2b83"+
                  "\0\u2bd2\0\u2c21\0\u2c70\0\u2cbf\0\u2d0e\0\u2d5d\0\u0316\0\u2dac"+
                  "\0\u2dfb\0\u0316\0\u2e4a\0\u2e99\0\u2ee8\0\u2f37\0\u2f86\0\u0316"+
                  "\0\u2fd5\0\u3024\0\u3073\0\u0316\0\u30c2\0\u3111\0\u3160\0\u31af"+
                  "\0\u0316\0\u31fe\0\u324d\0\u329c\0\u32eb\0\u333a\0\u333a\0\u3389"+
                  "\0\u33d8\0\u3427\0\u3476\0\u34c5\0\u3514\0\u3563\0\u35b2\0\u3601"+
                  "\0\u03b4\0\u03b4\0\u0806\0\u3650\0\u369f\0\u36ee\0\u373d\0\u07b7"+
                  "\0\u378c\0\u37db\0\u382a\0\u3879\0\u38c8\0\u3917\0\u3966\0\u39b5"+
                  "\0\u3a04\0\u3a53\0\u3aa2\0\u3af1\0\u07b7\0\u3b40\0\u3b8f\0\u3bde"+
                  "\0\u3c2d\0\u3c7c\0\u3ccb\0\u3d1a\0\u3d69\0\u3db8\0\u3e07\0\u3e56"+
                  "\0\u3ea5\0\u3ef4\0\u3f43\0\u07b7\0\u3f92\0\u07b7\0\u07b7\0\u3fe1"+
                  "\0\u4030\0\u407f\0\u40ce\0\u0316\0\u411d\0\u416c\0\u41bb\0\u420a"+
                  "\0\u0316\0\u4259\0\u28bc\0\u42a8\0\u42f7\0\u0316\0\u4346\0\u4395"+
                  "\0\u0316\0\u1197\0\u43e4\0\u4433\0\u4482\0\u1322\0\u2d5d\0\u44d1"+
                  "\0\u4520\0\u456f\0\u45be\0\u460d\0\u465c\0\u46ab\0\u46fa\0\u4749"+
                  "\0\u4798\0\u47e7\0\u03b4\0\u4836\0\u4885\0\u0316\0\u48d4\0\u03b4"+
                  "\0\u4923\0\u4972\0\u49c1\0\u4a10\0\u4a5f\0\u07b7\0\u07b7\0\u4aae"+
                  "\0\u4afd\0\u4b4c\0\u4b9b\0\u4bea\0\u4c39\0\u4c88\0\u4cd7\0\u07b7"+
                  "\0\u4d26\0\u4d75\0\u07b7\0\u4dc4\0\u4e13\0\u4e62\0\u4eb1\0\u4f00"+
                  "\0\u4f4f\0\u4f9e\0\u4fed\0\u07b7\0\u07b7\0\u503c\0\u508b\0\u07b7"+
                  "\0\u07b7\0\u50da\0\u07b7\0\u5129\0\u5178\0\u51c7\0\u5216\0\u286d"+
                  "\0\u5265\0\u42f7\0\u2a47\0\u52b4\0\u5303\0\u5352\0\u53a1\0\u53f0"+
                  "\0\u0316\0\u543f\0\u03b4\0\u3427\0\u548e\0\u54dd\0\u552c\0\u557b"+
                  "\0\u07b7\0\u07b7\0\u55ca\0\u5619\0\u07b7\0\u5668\0\u56b7\0\u07b7"+
                  "\0\u5706\0\u5755\0\u07b7\0\u07b7\0\u57a4\0\u57f3\0\u5842\0\u5891"+
                  "\0\u58e0\0\u592f\0\u597e\0\u07b7\0\u07b7\0\u07b7\0\u07b7\0\u07b7"+
                  "\0\u59cd\0\u5a1c\0\u5a6b\0\u2c21\0\u5aba\0\u5b09\0\u5b58\0\u5ba7"+
                  "\0\u0316\0\u5bf6\0\u5c45\0\u5c94\0\u5ce3\0\u5d32\0\u5d81\0\u07b7"+
                  "\0\u5dd0\0\u5e1f\0\u5e6e\0\u5ebd\0\u07b7\0\u07b7\0\u5f0c\0\u5f5b"+
                  "\0\u5faa\0\u5ff9\0\u07b7\0\u07b7\0\u6048\0\u0316\0\u6097\0\u60e6"+
                  "\0\u6135\0\u6184\0\u61d3\0\u6222\0\u6271\0\u07b7\0\u07b7\0\u07b7"+
                  "\0\u62c0\0\u630f\0\u07b7\0\u07b7\0\u635e\0\u63ad\0\u63fc\0\u644b"+
                  "\0\u07b7\0\u649a\0\u64e9\0\u6538\0\u6587\0\u07b7\0\u07b7\0\u65d6"+
                  "\0\u6625\0\u6674\0\u66c3\0\u6712\0\u6761\0\u67b0\0\u07b7\0\u67ff"+
                  "\0\u0316\0\u684e\0\u07b7\0\u689d";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[452];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
          "\1\13\1\14\1\15\1\0\1\15\1\13\1\16\1\17"+
                  "\1\20\1\21\2\16\1\22\1\23\1\24\2\16\1\25"+
                  "\1\16\1\26\1\27\1\30\3\31\1\32\1\33\1\34"+
                  "\1\35\1\36\1\37\1\40\13\41\1\42\1\16\1\43"+
                  "\1\44\1\45\1\46\1\41\1\47\1\50\1\51\1\52"+
                  "\1\53\1\41\1\54\2\41\1\55\1\56\1\57\1\60"+
                  "\1\61\1\62\1\63\1\64\1\41\1\65\1\66\1\41"+
                  "\1\67\1\41\1\70\1\71\2\15\1\72\1\73\1\13"+
                  "\1\14\1\15\1\0\1\15\1\13\1\16\1\17\1\20"+
                  "\1\21\2\16\1\22\1\23\1\24\2\16\1\25\1\16"+
                  "\1\26\1\27\1\30\3\31\1\32\1\33\1\74\1\35"+
                  "\1\36\1\37\1\40\13\41\1\42\1\16\1\43\1\44"+
                  "\1\45\1\46\1\41\1\47\1\50\1\51\1\52\1\53"+
                  "\1\41\1\54\2\41\1\55\1\56\1\57\1\60\1\61"+
                  "\1\62\1\63\1\64\1\41\1\65\1\66\1\41\1\67"+
                  "\1\41\1\70\1\71\2\15\1\72\1\73\7\0\1\75"+
                  "\107\0\2\76\1\77\1\76\1\100\2\76\1\101\1\76"+
                  "\1\102\42\76\1\103\42\76\7\104\1\105\1\104\1\106"+
                  "\105\104\6\107\1\110\1\107\1\111\1\112\2\110\3\107"+
                  "\2\110\1\107\1\110\1\107\1\110\4\107\1\111\1\107"+
                  "\4\110\1\111\13\112\1\107\1\110\1\107\1\112\1\113"+
                  "\31\112\4\107\2\110\11\0\1\114\26\0\13\114\3\0"+
                  "\1\114\1\0\31\114\6\0\2\115\1\116\1\115\1\116"+
                  "\2\115\1\117\1\115\1\120\42\115\1\121\42\115\25\0"+
                  "\1\122\3\123\66\0\1\124\5\0\1\125\1\0\1\126"+
                  "\1\127\2\125\3\0\2\125\1\0\1\125\1\0\1\125"+
                  "\4\124\1\126\1\0\4\125\1\126\13\127\1\0\1\125"+
                  "\1\0\1\127\1\130\31\127\2\0\1\124\1\0\2\125"+
                  "\120\0\2\15\1\0\1\15\106\0\2\15\10\0\1\16"+
                  "\1\0\1\16\1\0\2\16\3\0\2\16\1\0\1\16"+
                  "\1\0\1\16\4\0\1\16\1\0\5\16\14\0\1\16"+
                  "\40\0\2\16\2\131\1\0\1\131\1\0\2\131\1\132"+
                  "\44\131\1\133\42\131\1\41\6\0\1\134\1\0\1\41"+
                  "\13\0\4\41\7\0\13\41\3\0\1\135\1\0\31\41"+
                  "\1\136\1\0\1\41\3\0\2\137\1\0\1\137\1\0"+
                  "\1\137\1\140\1\137\1\141\1\142\2\140\1\143\2\137"+
                  "\2\140\1\137\1\140\1\137\1\140\4\137\1\141\1\137"+
                  "\4\140\1\141\13\142\1\144\1\145\1\137\1\142\1\137"+
                  "\31\142\1\144\3\137\2\140\33\0\1\146\110\0\4\147"+
                  "\74\0\1\16\1\0\1\16\1\0\2\16\3\0\1\150"+
                  "\1\16\1\0\1\16\1\0\1\151\4\0\1\16\1\0"+
                  "\5\16\14\0\1\16\40\0\2\16\23\0\1\152\1\0"+
                  "\3\153\1\154\12\0\1\155\1\156\1\157\1\0\1\160"+
                  "\2\0\1\161\3\0\1\153\4\0\1\155\1\156\1\157"+
                  "\5\0\1\160\12\0\1\161\33\0\1\152\1\0\4\31"+
                  "\12\0\1\155\1\156\1\157\1\0\1\160\6\0\1\31"+
                  "\4\0\1\155\1\156\1\157\5\0\1\160\31\0\1\162"+
                  "\1\0\1\16\1\163\1\164\1\16\3\0\2\16\1\0"+
                  "\1\72\1\0\1\16\4\0\1\165\1\0\3\16\1\166"+
                  "\1\16\13\163\1\0\1\16\1\0\1\163\1\0\31\163"+
                  "\4\0\2\16\6\0\1\16\1\0\1\16\1\0\2\16"+
                  "\3\0\2\16\1\0\1\16\1\0\1\16\4\0\1\16"+
                  "\1\0\2\16\1\167\2\16\14\0\1\16\40\0\2\16"+
                  "\6\0\1\16\1\0\1\16\1\0\2\16\3\0\2\16"+
                  "\1\0\1\16\1\0\1\16\4\0\1\170\1\0\5\16"+
                  "\14\0\1\16\40\0\2\16\6\0\1\16\1\0\1\16"+
                  "\1\0\2\16\3\0\2\16\1\0\1\16\1\0\1\16"+
                  "\4\0\1\16\1\0\1\16\1\171\3\16\14\0\1\16"+
                  "\40\0\2\16\1\41\6\0\1\134\1\0\1\41\13\0"+
                  "\4\41\7\0\13\41\3\0\1\135\1\0\31\41\2\0"+
                  "\1\41\3\0\2\172\1\0\1\172\1\0\47\172\1\173"+
                  "\2\172\1\174\33\172\2\0\2\172\1\41\6\0\1\134"+
                  "\1\0\1\41\13\0\4\41\7\0\13\41\3\0\1\135"+
                  "\1\0\1\41\1\175\27\41\2\0\1\41\3\0\1\41"+
                  "\6\0\1\134\1\0\1\41\13\0\4\41\7\0\13\41"+
                  "\3\0\1\135\1\0\1\176\12\41\1\177\15\41\2\0"+
                  "\1\41\3\0\1\41\6\0\1\134\1\0\1\41\13\0"+
                  "\4\41\7\0\13\41\3\0\1\135\1\0\4\41\1\200"+
                  "\11\41\1\201\12\41\2\0\1\41\3\0\1\41\6\0"+
                  "\1\134\1\0\1\41\13\0\4\41\7\0\13\41\3\0"+
                  "\1\135\1\0\13\41\1\202\1\41\1\203\10\41\1\204"+
                  "\2\41\2\0\1\41\3\0\1\41\6\0\1\134\1\0"+
                  "\1\41\13\0\4\41\7\0\13\41\3\0\1\135\1\0"+
                  "\1\205\7\41\1\206\5\41\1\207\12\41\2\0\1\41"+
                  "\3\0\1\41\6\0\1\134\1\0\1\41\13\0\4\41"+
                  "\7\0\13\41\3\0\1\135\1\0\10\41\1\210\20\41"+
                  "\2\0\1\41\3\0\1\41\6\0\1\134\1\0\1\41"+
                  "\13\0\4\41\7\0\13\41\3\0\1\135\1\0\5\41"+
                  "\1\211\6\41\1\212\14\41\2\0\1\41\3\0\1\41"+
                  "\6\0\1\134\1\0\1\41\13\0\4\41\7\0\13\41"+
                  "\3\0\1\135\1\0\1\213\30\41\2\0\1\41\3\0"+
                  "\1\41\6\0\1\134\1\0\1\41\13\0\4\41\7\0"+
                  "\13\41\3\0\1\135\1\0\1\214\30\41\2\0\1\41"+
                  "\3\0\1\41\6\0\1\134\1\0\1\41\13\0\4\41"+
                  "\7\0\13\41\3\0\1\135\1\0\4\41\1\215\16\41"+
                  "\1\216\5\41\2\0\1\41\3\0\1\41\6\0\1\134"+
                  "\1\0\1\41\13\0\4\41\7\0\13\41\3\0\1\135"+
                  "\1\0\1\41\1\217\22\41\1\220\4\41\2\0\1\41"+
                  "\3\0\1\41\6\0\1\134\1\0\1\41\13\0\4\41"+
                  "\7\0\13\41\3\0\1\135\1\0\1\221\17\41\1\222"+
                  "\10\41\2\0\1\41\3\0\1\41\6\0\1\134\1\0"+
                  "\1\41\13\0\4\41\7\0\13\41\3\0\1\135\1\0"+
                  "\4\41\1\223\24\41\2\0\1\41\3\0\1\41\6\0"+
                  "\1\134\1\0\1\41\13\0\4\41\7\0\13\41\3\0"+
                  "\1\135\1\0\4\41\1\224\16\41\1\225\5\41\2\0"+
                  "\1\41\3\0\1\41\6\0\1\134\1\0\1\41\13\0"+
                  "\4\41\7\0\13\41\3\0\1\135\1\0\7\41\1\226"+
                  "\10\41\1\227\6\41\1\230\1\41\2\0\1\41\3\0"+
                  "\1\41\6\0\1\134\1\0\1\41\13\0\4\41\7\0"+
                  "\13\41\3\0\1\135\1\0\1\231\30\41\2\0\1\41"+
                  "\3\0\1\41\6\0\1\134\1\0\1\41\13\0\4\41"+
                  "\7\0\13\41\3\0\1\135\1\0\7\41\1\232\1\233"+
                  "\20\41\2\0\1\41\3\0\1\41\6\0\1\134\1\0"+
                  "\1\41\13\0\4\41\7\0\13\41\3\0\1\135\1\0"+
                  "\10\41\1\234\20\41\2\0\1\41\36\0\1\235\71\0"+
                  "\1\16\1\0\1\16\1\0\1\164\1\16\3\0\2\16"+
                  "\1\0\1\72\1\0\1\16\4\0\1\165\1\0\5\16"+
                  "\14\0\1\16\40\0\2\16\2\236\1\0\1\236\1\0"+
                  "\2\236\1\237\1\236\1\0\42\236\1\240\42\236\2\76"+
                  "\1\0\1\76\1\0\2\76\1\0\1\76\1\0\42\76"+
                  "\1\0\42\76\2\0\1\77\1\0\1\241\120\0\1\242"+
                  "\1\0\1\243\1\244\2\242\3\0\2\242\1\0\1\242"+
                  "\1\0\1\242\4\0\1\243\1\0\4\242\1\243\13\245"+
                  "\1\0\1\242\1\0\1\245\1\246\31\245\1\247\3\0"+
                  "\2\242\2\250\1\0\1\250\1\0\76\250\1\251\13\250"+
                  "\7\104\1\252\1\104\1\0\114\104\1\253\1\104\1\254"+
                  "\105\104\6\0\1\255\1\0\1\256\1\257\2\255\3\0"+
                  "\2\255\1\0\1\255\1\0\1\255\4\0\1\256\1\0"+
                  "\4\255\1\256\13\260\1\0\1\255\1\0\1\260\1\261"+
                  "\31\260\1\262\3\0\2\255\6\0\1\110\1\0\1\110"+
                  "\1\0\2\110\3\0\2\110\1\0\1\110\1\0\1\110"+
                  "\4\0\1\110\1\0\5\110\14\0\1\110\40\0\2\110"+
                  "\1\112\10\0\1\112\13\0\4\112\7\0\13\112\3\0"+
                  "\1\263\1\0\31\112\2\0\1\112\3\0\2\264\1\0"+
                  "\1\264\1\0\47\264\1\265\2\264\1\266\33\264\2\0"+
                  "\2\264\1\114\10\0\1\114\13\0\4\114\7\0\13\114"+
                  "\3\0\1\267\1\0\31\114\2\0\1\114\3\0\2\115"+
                  "\1\116\1\115\1\116\2\115\1\270\1\115\1\120\105\115"+
                  "\7\116\1\271\1\116\1\0\105\116\7\0\1\272\44\0"+
                  "\1\273\116\0\1\273\42\0\7\116\1\271\1\116\1\0"+
                  "\42\116\1\274\42\116\25\0\3\275\22\0\1\276\3\0"+
                  "\1\275\27\0\1\276\35\0\4\123\25\0\1\123\40\0"+
                  "\1\124\10\0\1\127\13\0\4\124\7\0\13\127\3\0"+
                  "\1\127\1\0\31\127\2\0\1\124\11\0\1\125\1\0"+
                  "\1\125\1\0\2\125\3\0\2\125\1\0\1\125\1\277"+
                  "\1\125\4\0\1\125\1\0\5\125\14\0\1\125\1\0"+
                  "\1\124\36\0\2\125\6\0\1\125\1\0\1\125\1\0"+
                  "\2\125\3\0\2\125\1\0\1\125\1\0\1\125\4\0"+
                  "\1\125\1\0\5\125\14\0\1\125\1\0\1\124\36\0"+
                  "\2\125\1\124\10\0\1\127\11\0\1\277\1\0\4\124"+
                  "\7\0\13\127\3\0\1\127\1\0\31\127\2\0\1\124"+
                  "\3\0\2\130\1\0\1\130\1\0\52\130\1\300\33\130"+
                  "\2\301\2\130\2\131\1\0\1\131\1\0\2\131\1\302"+
                  "\44\131\1\133\42\131\7\0\1\303\107\0\2\131\1\0"+
                  "\1\131\1\0\112\131\2\304\1\0\1\304\1\0\2\304"+
                  "\1\305\1\304\1\0\42\304\1\306\42\304\1\41\5\0"+
                  "\1\307\1\134\1\307\1\41\2\307\3\0\2\307\1\0"+
                  "\1\307\1\0\1\307\4\41\1\307\1\0\5\307\13\41"+
                  "\1\0\1\307\1\0\1\135\1\0\31\41\2\0\1\41"+
                  "\1\0\2\307\14\0\1\310\37\0\1\310\50\0\1\311"+
                  "\1\0\1\311\1\0\2\311\1\310\2\0\2\311\1\0"+
                  "\1\311\1\0\1\311\4\0\1\311\1\0\5\311\14\0"+
                  "\1\311\40\0\2\311\1\312\10\0\1\312\2\0\1\310"+
                  "\10\0\4\312\7\0\13\312\1\0\1\310\1\0\1\313"+
                  "\1\0\31\312\2\0\1\312\3\0\14\314\1\310\102\314"+
                  "\2\137\1\0\1\137\1\0\1\137\1\140\1\137\1\140"+
                  "\1\137\2\140\3\137\2\140\1\137\1\140\1\137\1\140"+
                  "\2\315\1\316\1\137\1\140\1\137\5\140\14\137\1\140"+
                  "\26\137\1\317\11\137\2\140\6\0\1\320\2\0\1\321"+
                  "\24\0\1\322\1\0\13\321\3\0\1\321\1\0\31\321"+
                  "\33\0\4\147\12\0\1\155\1\156\1\157\10\0\1\147"+
                  "\4\0\1\155\1\156\1\157\31\0\6\323\1\324\1\323"+
                  "\1\324\1\323\2\324\3\323\1\325\1\324\1\323\1\324"+
                  "\1\323\1\16\4\323\1\324\1\323\5\324\14\323\1\324"+
                  "\40\323\2\324\2\151\1\0\1\151\1\0\112\151\6\0"+
                  "\1\326\1\0\1\327\1\330\2\326\3\0\2\326\1\0"+
                  "\1\326\1\0\1\326\4\147\1\327\1\0\4\326\1\327"+
                  "\4\330\1\331\6\330\1\0\1\326\1\0\1\330\1\332"+
                  "\4\330\1\331\24\330\4\0\2\326\23\0\1\152\1\0"+
                  "\3\153\1\154\12\0\1\155\1\156\1\157\1\0\1\160"+
                  "\6\0\1\153\4\0\1\155\1\156\1\157\5\0\1\160"+
                  "\46\0\1\333\1\0\4\154\12\0\1\155\1\156\1\157"+
                  "\10\0\1\154\4\0\1\155\1\156\1\157\51\0\1\334"+
                  "\1\0\1\334\2\0\4\335\113\0\4\336\7\0\6\336"+
                  "\10\0\1\336\1\0\6\336\37\0\1\16\1\0\1\16"+
                  "\1\0\2\16\3\0\2\16\1\0\1\337\1\0\1\16"+
                  "\4\0\1\16\1\0\5\16\13\0\1\340\1\16\40\0"+
                  "\2\16\6\0\1\16\1\0\1\16\1\163\2\16\3\0"+
                  "\2\16\1\0\1\16\1\0\1\16\4\0\1\16\1\0"+
                  "\5\16\13\163\1\0\1\16\1\0\1\163\1\0\31\163"+
                  "\4\0\2\16\6\0\1\16\1\0\1\16\1\0\2\16"+
                  "\3\0\2\16\1\0\1\16\1\0\1\16\4\0\1\16"+
                  "\1\0\2\16\1\341\2\16\14\0\1\16\40\0\2\16"+
                  "\6\0\1\16\1\0\1\16\1\0\2\16\3\0\2\16"+
                  "\1\0\1\16\1\0\1\16\4\0\1\16\1\0\2\16"+
                  "\1\342\2\16\14\0\1\16\40\0\2\16\2\172\1\0"+
                  "\1\172\1\0\47\172\1\173\2\172\1\343\37\172\1\41"+
                  "\6\0\1\134\1\0\1\41\13\0\4\41\7\0\13\41"+
                  "\3\0\1\135\1\0\21\41\1\344\7\41\2\0\1\41"+
                  "\3\0\1\41\6\0\1\134\1\0\1\41\13\0\4\41"+
                  "\7\0\13\41\3\0\1\135\1\0\21\41\1\345\1\346"+
                  "\6\41\2\0\1\41\3\0\1\41\6\0\1\134\1\0"+
                  "\1\41\13\0\4\41\7\0\13\41\3\0\1\135\1\0"+
                  "\1\347\30\41\2\0\1\41\3\0\1\41\6\0\1\134"+
                  "\1\0\1\41\13\0\4\41\7\0\13\41\3\0\1\135"+
                  "\1\0\5\41\1\350\23\41\2\0\1\41\3\0\1\41"+
                  "\6\0\1\134\1\0\1\41\13\0\4\41\7\0\13\41"+
                  "\3\0\1\135\1\0\21\41\1\351\7\41\2\0\1\41"+
                  "\3\0\1\41\6\0\1\134\1\0\1\41\13\0\4\41"+
                  "\7\0\13\41\3\0\1\135\1\0\23\41\1\352\5\41"+
                  "\2\0\1\41\3\0\1\41\6\0\1\134\1\0\1\41"+
                  "\13\0\4\41\7\0\13\41\3\0\1\135\1\0\17\41"+
                  "\1\353\2\41\1\354\6\41\2\0\1\41\3\0\1\41"+
                  "\6\0\1\134\1\0\1\41\13\0\4\41\7\0\13\41"+
                  "\3\0\1\135\1\0\13\41\1\355\15\41\2\0\1\41"+
                  "\3\0\1\41\6\0\1\134\1\0\1\41\13\0\4\41"+
                  "\7\0\13\41\3\0\1\135\1\0\15\41\1\356\13\41"+
                  "\2\0\1\41\3\0\1\41\6\0\1\134\1\0\1\41"+
                  "\13\0\4\41\7\0\13\41\3\0\1\135\1\0\20\41"+
                  "\1\357\10\41\2\0\1\41\3\0\1\41\6\0\1\134"+
                  "\1\0\1\41\13\0\4\41\7\0\13\41\3\0\1\135"+
                  "\1\0\24\41\1\360\4\41\2\0\1\41\3\0\1\41"+
                  "\6\0\1\134\1\0\1\41\13\0\4\41\7\0\13\41"+
                  "\3\0\1\135\1\0\17\41\1\361\11\41\2\0\1\41"+
                  "\3\0\1\41\6\0\1\134\1\0\1\41\13\0\4\41"+
                  "\7\0\13\41\3\0\1\135\1\0\30\41\1\362\2\0"+
                  "\1\41\3\0\1\41\6\0\1\134\1\0\1\41\13\0"+
                  "\4\41\7\0\13\41\3\0\1\135\1\0\2\41\1\363"+
                  "\17\41\1\364\6\41\2\0\1\41\3\0\1\41\6\0"+
                  "\1\134\1\0\1\41\13\0\4\41\7\0\13\41\3\0"+
                  "\1\135\1\0\25\41\1\365\3\41\2\0\1\41\3\0"+
                  "\1\41\6\0\1\134\1\0\1\41\13\0\4\41\7\0"+
                  "\13\41\3\0\1\135\1\0\13\41\1\366\15\41\2\0"+
                  "\1\41\3\0\1\41\6\0\1\134\1\0\1\41\13\0"+
                  "\4\41\7\0\13\41\3\0\1\135\1\0\11\41\1\367"+
                  "\17\41\2\0\1\41\3\0\1\41\6\0\1\134\1\0"+
                  "\1\41\13\0\4\41\7\0\13\41\3\0\1\135\1\0"+
                  "\4\41\1\370\24\41\2\0\1\41\3\0\1\41\6\0"+
                  "\1\134\1\0\1\41\13\0\4\41\7\0\13\41\3\0"+
                  "\1\135\1\0\2\41\1\371\26\41\2\0\1\41\3\0"+
                  "\1\41\6\0\1\134\1\0\1\41\13\0\4\41\7\0"+
                  "\13\41\3\0\1\135\1\0\10\41\1\372\5\41\1\373"+
                  "\12\41\2\0\1\41\3\0\1\41\6\0\1\134\1\0"+
                  "\1\41\13\0\4\41\7\0\13\41\3\0\1\135\1\0"+
                  "\22\41\1\374\6\41\2\0\1\41\3\0\1\41\6\0"+
                  "\1\134\1\0\1\41\13\0\4\41\7\0\13\41\3\0"+
                  "\1\135\1\0\1\375\30\41\2\0\1\41\3\0\1\41"+
                  "\6\0\1\134\1\0\1\41\13\0\4\41\7\0\13\41"+
                  "\3\0\1\135\1\0\17\41\1\376\11\41\2\0\1\41"+
                  "\3\0\1\41\6\0\1\134\1\0\1\41\13\0\4\41"+
                  "\7\0\13\41\3\0\1\135\1\0\4\41\1\377\3\41"+
                  "\1\u0100\7\41\1\u0101\10\41\2\0\1\41\3\0\1\41"+
                  "\6\0\1\134\1\0\1\41\13\0\4\41\7\0\13\41"+
                  "\3\0\1\135\1\0\1\u0102\22\41\1\u0103\3\41\1\u0104"+
                  "\1\41\2\0\1\41\3\0\1\41\6\0\1\134\1\0"+
                  "\1\41\13\0\4\41\7\0\13\41\3\0\1\135\1\0"+
                  "\17\41\1\u0105\11\41\2\0\1\41\3\0\1\41\6\0"+
                  "\1\134\1\0\1\41\13\0\4\41\7\0\13\41\3\0"+
                  "\1\135\1\0\13\41\1\u0106\4\41\1\u0107\10\41\2\0"+
                  "\1\41\3\0\1\41\6\0\1\134\1\0\1\41\13\0"+
                  "\4\41\7\0\13\41\3\0\1\135\1\0\10\41\1\u0108"+
                  "\20\41\2\0\1\41\3\0\1\41\6\0\1\134\1\0"+
                  "\1\41\13\0\4\41\7\0\13\41\3\0\1\135\1\0"+
                  "\22\41\1\u0109\6\41\2\0\1\41\3\0\1\41\6\0"+
                  "\1\134\1\0\1\41\13\0\4\41\7\0\13\41\3\0"+
                  "\1\135\1\0\4\41\1\u010a\24\41\2\0\1\41\11\0"+
                  "\1\u010b\2\0\1\u010c\24\0\1\u010d\1\0\13\u010c\3\0"+
                  "\1\u010c\1\0\31\u010c\6\0\2\236\1\0\1\236\1\0"+
                  "\2\236\1\0\1\236\1\0\42\236\1\240\42\236\7\0"+
                  "\1\u010e\107\0\2\236\1\0\1\236\1\0\112\236\6\0"+
                  "\1\242\1\0\1\242\1\0\2\242\3\0\2\242\1\0"+
                  "\1\242\1\0\1\242\4\0\1\242\1\0\5\242\14\0"+
                  "\1\242\40\0\2\242\1\245\10\0\1\245\13\0\4\245"+
                  "\7\0\13\245\3\0\1\u010f\1\0\31\245\2\0\1\245"+
                  "\3\0\2\246\1\0\1\246\1\0\47\246\1\u0110\2\246"+
                  "\1\u0111\33\246\2\0\2\246\25\0\4\u0112\7\0\6\u0112"+
                  "\12\0\6\u0112\15\0\1\u0113\13\0\7\104\1\u0114\1\104"+
                  "\1\0\114\104\1\u0115\1\104\1\u0116\105\104\6\0\1\255"+
                  "\1\0\1\255\1\0\2\255\3\0\2\255\1\0\1\255"+
                  "\1\0\1\255\4\0\1\255\1\0\5\255\14\0\1\255"+
                  "\40\0\2\255\1\260\10\0\1\260\13\0\4\260\7\0"+
                  "\13\260\3\0\1\u0117\1\0\31\260\2\0\1\260\3\0"+
                  "\2\261\1\0\1\261\1\0\47\261\1\u0118\2\261\1\u0119"+
                  "\33\261\2\0\2\261\1\112\5\0\1\110\1\0\1\110"+
                  "\1\112\2\110\3\0\2\110\1\0\1\110\1\0\1\110"+
                  "\4\112\1\110\1\0\5\110\13\112\1\0\1\110\1\0"+
                  "\1\263\1\0\31\112\2\0\1\112\1\0\2\110\2\264"+
                  "\1\0\1\264\1\0\47\264\1\265\2\264\1\u011a\37\264"+
                  "\1\114\5\0\1\u011b\1\0\1\u011b\1\114\2\u011b\3\0"+
                  "\2\u011b\1\0\1\u011b\1\0\1\u011b\4\114\1\u011b\1\0"+
                  "\5\u011b\13\114\1\0\1\u011b\1\0\1\267\1\0\31\114"+
                  "\2\0\1\114\1\0\2\u011b\7\116\1\u011c\1\116\1\0"+
                  "\42\116\1\274\51\116\1\u011c\1\116\1\0\105\116\7\0"+
                  "\1\277\107\0\2\u011d\1\0\1\u011d\1\0\2\u011d\1\u011e"+
                  "\1\u011d\1\120\42\u011d\1\120\42\u011d\2\115\1\116\1\115"+
                  "\1\116\2\115\1\270\1\115\1\120\42\115\1\121\42\115"+
                  "\25\0\3\275\26\0\1\275\65\0\4\u011f\7\0\6\u011f"+
                  "\10\0\1\u011f\1\0\6\u011f\54\0\1\277\30\0\1\130"+
                  "\116\0\1\130\42\0\7\303\1\u0120\107\303\2\304\1\0"+
                  "\1\304\1\0\2\304\1\0\1\304\1\0\42\304\1\306"+
                  "\42\304\7\0\1\u0121\107\0\2\304\1\0\1\304\1\0"+
                  "\112\304\6\0\1\307\1\134\1\307\1\0\2\307\3\0"+
                  "\2\307\1\0\1\307\1\0\1\307\4\0\1\307\1\0"+
                  "\5\307\14\0\1\307\40\0\2\307\6\0\1\311\1\0"+
                  "\1\311\1\0\2\311\3\0\2\311\1\0\1\311\1\0"+
                  "\1\311\4\0\1\311\1\0\5\311\14\0\1\311\40\0"+
                  "\2\311\1\312\10\0\1\312\13\0\4\312\7\0\13\312"+
                  "\3\0\1\313\1\0\31\312\2\0\1\312\3\0\1\312"+
                  "\5\0\1\311\1\0\1\311\1\312\2\311\3\0\2\311"+
                  "\1\0\1\311\1\0\1\311\4\312\1\311\1\0\5\311"+
                  "\13\312\1\0\1\311\1\0\1\313\1\0\31\312\2\0"+
                  "\1\312\1\0\2\311\14\0\1\310\10\0\3\316\24\0"+
                  "\1\310\56\0\1\310\10\0\3\137\24\0\1\310\56\0"+
                  "\1\310\10\0\4\u0122\7\0\6\u0122\6\0\1\310\3\0"+
                  "\6\u0122\15\0\1\u0123\35\0\1\u0124\30\0\1\u0125\54\0"+
                  "\1\321\26\0\13\321\3\0\1\321\1\0\31\321\6\0"+
                  "\17\323\1\u0126\4\323\1\0\100\323\1\324\1\323\1\324"+
                  "\1\323\2\324\3\323\1\u0127\1\324\1\323\1\324\1\323"+
                  "\1\16\4\323\1\324\1\323\5\324\14\323\1\324\40\323"+
                  "\2\324\6\u0128\1\u0129\1\u0128\1\u0129\1\u0128\2\u0129\3\u0128"+
                  "\1\u012a\1\u0129\1\u0128\1\u0129\1\u0128\1\u012b\4\u0128\1\u0129"+
                  "\1\u0128\5\u0129\14\u0128\1\u0129\40\u0128\2\u0129\6\0\1\326"+
                  "\1\0\1\326\1\0\2\326\3\0\2\326\1\0\1\326"+
                  "\1\0\1\326\4\0\1\326\1\0\5\326\14\0\1\326"+
                  "\40\0\2\326\1\330\10\0\1\330\13\0\4\330\7\0"+
                  "\13\330\3\0\1\u012c\1\0\31\330\2\0\1\330\3\0"+
                  "\1\330\10\0\1\330\6\0\1\334\1\0\1\334\2\0"+
                  "\4\330\7\0\13\330\3\0\1\u012c\1\0\31\330\2\0"+
                  "\1\330\3\0\2\332\1\0\1\332\1\0\47\332\1\u012d"+
                  "\2\332\1\u012e\33\332\2\0\2\332\25\0\4\147\12\0"+
                  "\1\155\1\156\1\157\15\0\1\155\1\156\1\157\56\0"+
                  "\4\335\113\0\4\335\12\0\1\155\1\0\1\157\10\0"+
                  "\1\335\4\0\1\155\1\0\1\157\54\0\1\u012f\1\0"+
                  "\4\336\7\0\6\336\1\0\1\160\6\0\1\336\1\0"+
                  "\6\336\5\0\1\160\31\0\1\16\1\0\1\16\1\0"+
                  "\2\16\3\0\2\16\1\0\1\u0130\1\0\1\16\4\0"+
                  "\1\16\1\0\5\16\14\0\1\16\40\0\2\16\42\0"+
                  "\1\u0131\54\0\1\41\6\0\1\134\1\0\1\41\13\0"+
                  "\4\41\7\0\13\41\3\0\1\135\1\0\22\41\1\u0132"+
                  "\6\41\2\0\1\41\3\0\1\41\6\0\1\134\1\0"+
                  "\1\41\13\0\4\41\7\0\13\41\3\0\1\135\1\0"+
                  "\4\41\1\u0133\24\41\2\0\1\41\3\0\1\41\6\0"+
                  "\1\134\1\0\1\41\13\0\4\41\7\0\13\41\3\0"+
                  "\1\135\1\0\2\41\1\u0134\26\41\2\0\1\41\3\0"+
                  "\1\41\6\0\1\134\1\0\1\41\13\0\4\41\7\0"+
                  "\13\41\3\0\1\135\1\0\21\41\1\u0135\7\41\2\0"+
                  "\1\41\3\0\1\41\6\0\1\134\1\0\1\41\13\0"+
                  "\4\41\7\0\13\41\3\0\1\135\1\0\4\41\1\u0136"+
                  "\24\41\2\0\1\41\3\0\1\41\6\0\1\134\1\0"+
                  "\1\41\13\0\4\41\7\0\13\41\3\0\1\135\1\0"+
                  "\14\41\1\u0137\14\41\2\0\1\41\3\0\1\41\6\0"+
                  "\1\134\1\0\1\41\13\0\4\41\7\0\13\41\3\0"+
                  "\1\135\1\0\16\41\1\u0138\12\41\2\0\1\41\3\0"+
                  "\1\41\6\0\1\134\1\0\1\41\13\0\4\41\7\0"+
                  "\13\41\3\0\1\135\1\0\4\41\1\u0139\24\41\2\0"+
                  "\1\41\3\0\1\41\6\0\1\134\1\0\1\41\13\0"+
                  "\4\41\7\0\13\41\3\0\1\135\1\0\21\41\1\u013a"+
                  "\7\41\2\0\1\41\3\0\1\41\6\0\1\134\1\0"+
                  "\1\41\13\0\4\41\7\0\13\41\3\0\1\135\1\0"+
                  "\1\u013b\30\41\2\0\1\41\3\0\1\41\6\0\1\134"+
                  "\1\0\1\41\13\0\4\41\7\0\10\41\1\u013c\2\41"+
                  "\3\0\1\135\1\0\31\41\2\0\1\41\3\0\1\41"+
                  "\6\0\1\134\1\0\1\41\13\0\4\41\7\0\13\41"+
                  "\3\0\1\135\1\0\4\41\1\u013d\24\41\2\0\1\41"+
                  "\3\0\1\41\6\0\1\134\1\0\1\41\13\0\4\41"+
                  "\7\0\13\41\3\0\1\135\1\0\13\41\1\u013e\2\41"+
                  "\1\u013f\12\41\2\0\1\41\3\0\1\41\6\0\1\134"+
                  "\1\0\1\41\13\0\4\41\7\0\13\41\3\0\1\135"+
                  "\1\0\27\41\1\u0140\1\41\2\0\1\41\3\0\1\41"+
                  "\6\0\1\134\1\0\1\41\13\0\4\41\7\0\13\41"+
                  "\3\0\1\135\1\0\20\41\1\u0141\10\41\2\0\1\41"+
                  "\3\0\1\41\6\0\1\134\1\0\1\41\13\0\4\41"+
                  "\7\0\13\41\3\0\1\135\1\0\2\41\1\u0142\26\41"+
                  "\2\0\1\41\3\0\1\41\6\0\1\134\1\0\1\41"+
                  "\13\0\4\41\7\0\13\41\3\0\1\135\1\0\13\41"+
                  "\1\u0143\15\41\2\0\1\41\3\0\1\41\6\0\1\134"+
                  "\1\0\1\41\13\0\4\41\7\0\13\41\3\0\1\135"+
                  "\1\0\4\41\1\u0144\24\41\2\0\1\41\3\0\1\41"+
                  "\6\0\1\134\1\0\1\41\13\0\4\41\7\0\13\41"+
                  "\3\0\1\135\1\0\20\41\1\u0145\10\41\2\0\1\41"+
                  "\3\0\1\41\6\0\1\134\1\0\1\41\13\0\4\41"+
                  "\7\0\13\41\3\0\1\135\1\0\12\41\1\u0146\16\41"+
                  "\2\0\1\41\3\0\1\41\6\0\1\134\1\0\1\41"+
                  "\13\0\4\41\7\0\13\41\3\0\1\135\1\0\24\41"+
                  "\1\u0147\4\41\2\0\1\41\3\0\1\41\6\0\1\134"+
                  "\1\0\1\41\13\0\4\41\7\0\13\41\3\0\1\135"+
                  "\1\0\22\41\1\u0148\6\41\2\0\1\41\3\0\1\41"+
                  "\6\0\1\134\1\0\1\41\13\0\4\41\7\0\13\41"+
                  "\3\0\1\135\1\0\23\41\1\u0149\5\41\2\0\1\41"+
                  "\3\0\1\41\6\0\1\134\1\0\1\41\13\0\4\41"+
                  "\7\0\13\41\3\0\1\135\1\0\13\41\1\u014a\15\41"+
                  "\2\0\1\41\3\0\1\41\6\0\1\134\1\0\1\41"+
                  "\13\0\4\41\7\0\13\41\3\0\1\135\1\0\4\41"+
                  "\1\u014b\24\41\2\0\1\41\3\0\1\41\6\0\1\134"+
                  "\1\0\1\41\13\0\4\41\7\0\13\41\3\0\1\135"+
                  "\1\0\15\41\1\u014c\13\41\2\0\1\41\3\0\1\41"+
                  "\6\0\1\134\1\0\1\41\13\0\4\41\7\0\13\41"+
                  "\3\0\1\135\1\0\21\41\1\u014d\7\41\2\0\1\41"+
                  "\3\0\1\41\6\0\1\134\1\0\1\41\13\0\4\41"+
                  "\7\0\13\41\3\0\1\135\1\0\16\41\1\u014e\12\41"+
                  "\2\0\1\41\3\0\1\41\6\0\1\134\1\0\1\41"+
                  "\13\0\4\41\7\0\13\41\3\0\1\135\1\0\10\41"+
                  "\1\u014f\20\41\2\0\1\41\3\0\1\41\6\0\1\134"+
                  "\1\0\1\41\13\0\4\41\7\0\13\41\3\0\1\135"+
                  "\1\0\4\41\1\u0150\24\41\2\0\1\41\3\0\1\41"+
                  "\6\0\1\134\1\0\1\41\13\0\4\41\7\0\13\41"+
                  "\3\0\1\135\1\0\4\41\1\u0151\24\41\2\0\1\41"+
                  "\3\0\1\41\6\0\1\134\1\0\1\41\13\0\4\41"+
                  "\7\0\13\41\3\0\1\135\1\0\13\41\1\u0152\15\41"+
                  "\2\0\1\41\3\0\1\41\6\0\1\134\1\0\1\41"+
                  "\13\0\4\41\7\0\13\41\3\0\1\135\1\0\7\41"+
                  "\1\u0153\21\41\2\0\1\41\3\0\1\41\6\0\1\134"+
                  "\1\0\1\41\13\0\4\41\7\0\13\41\3\0\1\135"+
                  "\1\0\13\41\1\u0154\15\41\2\0\1\41\25\0\1\u0155"+
                  "\30\0\1\u0156\54\0\1\u010c\26\0\13\u010c\3\0\1\u010c"+
                  "\1\0\31\u010c\6\0\7\u010e\1\u0157\1\u010e\1\0\105\u010e"+
                  "\1\245\5\0\1\242\1\0\1\242\1\245\2\242\3\0"+
                  "\2\242\1\0\1\242\1\0\1\242\4\245\1\242\1\0"+
                  "\5\242\13\245\1\0\1\242\1\0\1\u010f\1\0\31\245"+
                  "\2\0\1\245\1\0\2\242\2\246\1\0\1\246\1\0"+
                  "\47\246\1\u0110\2\246\1\u0158\37\246\25\0\4\u0159\7\0"+
                  "\6\u0159\12\0\6\u0159\31\0\7\104\1\0\1\104\1\0"+
                  "\105\104\7\0\1\u015a\107\0\1\260\5\0\1\255\1\0"+
                  "\1\255\1\260\2\255\3\0\2\255\1\0\1\255\1\0"+
                  "\1\255\4\260\1\255\1\0\5\255\13\260\1\0\1\255"+
                  "\1\0\1\u0117\1\0\31\260\2\0\1\260\1\0\2\255"+
                  "\2\261\1\0\1\261\1\0\47\261\1\u0118\2\261\1\u015b"+
                  "\37\261\6\0\1\u011b\1\0\1\u011b\1\0\2\u011b\3\0"+
                  "\2\u011b\1\0\1\u011b\1\0\1\u011b\4\0\1\u011b\1\0"+
                  "\5\u011b\14\0\1\u011b\40\0\2\u011b\7\116\1\u015c\1\116"+
                  "\1\0\105\116\2\u011d\1\0\1\u011d\1\0\2\u011d\1\u011e"+
                  "\1\u011d\1\120\105\u011d\7\303\1\u015d\107\303\7\u0121\1\u015e"+
                  "\1\u0121\1\0\105\u0121\25\0\4\u015f\7\0\6\u015f\12\0"+
                  "\6\u015f\56\0\4\u0122\7\0\6\u0122\12\0\6\u0122\15\0"+
                  "\1\u0123\35\0\1\321\136\0\1\u0160\54\0\17\323\1\u0126"+
                  "\4\323\1\u0161\100\323\1\324\1\323\1\324\1\323\2\324"+
                  "\3\323\1\u0127\1\324\1\323\1\324\1\323\1\u012b\4\323"+
                  "\1\324\1\323\5\324\14\323\1\324\40\323\2\324\17\u0128"+
                  "\1\u0162\4\u0128\1\0\100\u0128\1\u0129\1\u0128\1\u0129\1\u0128"+
                  "\2\u0129\3\u0128\1\u012a\1\u0129\1\u0128\1\u0129\1\u0128\1\16"+
                  "\4\u0128\1\u0129\1\u0128\5\u0129\14\u0128\1\u0129\40\u0128\2\u0129"+
                  "\6\u0128\1\u0129\1\u0128\1\u0129\1\u0128\2\u0129\3\u0128\1\u012a"+
                  "\1\u0129\1\u0128\1\u0129\1\u0128\1\u0163\4\u0128\1\u0129\1\u0128"+
                  "\5\u0129\14\u0128\1\u0129\40\u0128\2\u0129\1\330\5\0\1\326"+
                  "\1\0\1\326\1\330\2\326\3\0\2\326\1\0\1\326"+
                  "\1\0\1\326\4\330\1\326\1\0\5\326\13\330\1\0"+
                  "\1\326\1\0\1\u012c\1\0\31\330\2\0\1\330\1\0"+
                  "\2\326\2\332\1\0\1\332\1\0\47\332\1\u012d\2\332"+
                  "\1\u0164\37\332\6\0\1\326\1\0\1\327\1\330\2\326"+
                  "\3\0\2\326\1\0\1\326\1\0\1\326\4\0\1\327"+
                  "\1\0\4\326\1\327\13\330\1\0\1\326\1\0\1\330"+
                  "\1\332\31\330\4\0\2\326\43\0\1\u0165\53\0\1\41"+
                  "\6\0\1\134\1\0\1\41\13\0\4\41\7\0\13\41"+
                  "\3\0\1\135\1\0\20\41\1\u0166\10\41\2\0\1\41"+
                  "\3\0\1\41\2\u0167\1\0\1\u0167\2\0\1\134\1\0"+
                  "\1\41\13\0\4\41\7\0\13\41\3\0\1\135\1\0"+
                  "\31\41\2\0\1\u0168\1\u0167\2\0\1\41\6\0\1\134"+
                  "\1\0\1\41\13\0\4\41\7\0\13\41\3\0\1\135"+
                  "\1\0\7\41\1\u0169\21\41\2\0\1\41\3\0\1\41"+
                  "\6\0\1\134\1\0\1\41\13\0\4\41\7\0\13\41"+
                  "\3\0\1\135\1\0\21\41\1\u016a\7\41\2\0\1\41"+
                  "\3\0\1\41\6\0\1\134\1\0\1\41\13\0\4\41"+
                  "\7\0\13\41\3\0\1\135\1\0\20\41\1\u016b\10\41"+
                  "\2\0\1\41\3\0\1\41\6\0\1\134\1\0\1\41"+
                  "\13\0\4\41\7\0\13\41\3\0\1\135\1\0\15\41"+
                  "\1\u016c\13\41\2\0\1\41\3\0\1\41\6\0\1\134"+
                  "\1\0\1\41\13\0\4\41\7\0\13\41\3\0\1\135"+
                  "\1\0\4\41\1\u016d\24\41\2\0\1\41\3\0\1\41"+
                  "\6\0\1\134\1\0\1\41\13\0\4\41\7\0\13\41"+
                  "\3\0\1\135\1\0\13\41\1\u016e\15\41\2\0\1\41"+
                  "\3\0\1\41\6\0\1\134\1\0\1\41\13\0\4\41"+
                  "\7\0\13\41\3\0\1\135\1\0\16\41\1\u016f\12\41"+
                  "\2\0\1\41\3\0\1\41\6\0\1\134\1\0\1\41"+
                  "\13\0\4\41\7\0\13\41\3\0\1\135\1\0\15\41"+
                  "\1\u0170\13\41\2\0\1\41\3\0\1\41\6\0\1\134"+
                  "\1\0\1\41\13\0\4\41\7\0\13\41\3\0\1\135"+
                  "\1\0\10\41\1\u0171\20\41\2\0\1\41\3\0\1\41"+
                  "\6\0\1\134\1\0\1\41\13\0\4\41\7\0\13\41"+
                  "\3\0\1\135\1\0\20\41\1\u0172\10\41\2\0\1\41"+
                  "\3\0\1\41\6\0\1\134\1\0\1\41\13\0\4\41"+
                  "\7\0\13\41\3\0\1\135\1\0\16\41\1\u0173\12\41"+
                  "\2\0\1\41\3\0\1\41\6\0\1\134\1\0\1\41"+
                  "\13\0\4\41\7\0\13\41\3\0\1\135\1\0\7\41"+
                  "\1\u0174\21\41\2\0\1\41\3\0\1\41\6\0\1\134"+
                  "\1\0\1\41\13\0\4\41\7\0\13\41\3\0\1\135"+
                  "\1\0\2\41\1\u0175\26\41\2\0\1\41\3\0\1\41"+
                  "\6\0\1\134\1\0\1\41\13\0\4\41\7\0\13\41"+
                  "\3\0\1\135\1\0\20\41\1\u0176\10\41\2\0\1\41"+
                  "\3\0\1\41\6\0\1\134\1\0\1\41\13\0\4\41"+
                  "\7\0\13\41\3\0\1\135\1\0\1\u0177\30\41\2\0"+
                  "\1\41\3\0\1\41\6\0\1\134\1\0\1\41\13\0"+
                  "\4\41\7\0\13\41\3\0\1\135\1\0\1\u0178\30\41"+
                  "\2\0\1\41\3\0\1\41\6\0\1\134\1\0\1\41"+
                  "\13\0\4\41\7\0\13\41\3\0\1\135\1\0\4\41"+
                  "\1\u0179\24\41\2\0\1\41\3\0\1\41\6\0\1\134"+
                  "\1\0\1\41\13\0\4\41\7\0\13\41\3\0\1\135"+
                  "\1\0\20\41\1\u017a\10\41\2\0\1\41\3\0\1\41"+
                  "\6\0\1\134\1\0\1\41\13\0\4\41\7\0\13\41"+
                  "\3\0\1\135\1\0\4\41\1\u017b\24\41\2\0\1\41"+
                  "\3\0\1\41\6\0\1\134\1\0\1\41\13\0\4\41"+
                  "\7\0\13\41\3\0\1\135\1\0\20\41\1\u017c\10\41"+
                  "\2\0\1\41\3\0\1\41\6\0\1\134\1\0\1\41"+
                  "\13\0\4\41\7\0\13\41\3\0\1\135\1\0\25\41"+
                  "\1\u017d\3\41\2\0\1\41\3\0\1\41\6\0\1\134"+
                  "\1\0\1\41\13\0\4\41\7\0\13\41\3\0\1\135"+
                  "\1\0\22\41\1\u017e\6\41\2\0\1\41\3\0\1\41"+
                  "\6\0\1\134\1\0\1\41\13\0\4\41\7\0\13\41"+
                  "\3\0\1\135\1\0\4\41\1\u017f\24\41\2\0\1\41"+
                  "\3\0\1\41\6\0\1\134\1\0\1\41\13\0\4\41"+
                  "\7\0\13\41\3\0\1\135\1\0\3\41\1\u0180\25\41"+
                  "\2\0\1\41\25\0\1\u010c\136\0\1\u0181\54\0\7\u010e"+
                  "\1\u0182\1\u010e\1\0\105\u010e\25\0\4\u0183\7\0\6\u0183"+
                  "\12\0\6\u0183\40\0\1\u0184\107\0\7\303\1\u0185\107\303"+
                  "\7\u0121\1\u0186\1\u0121\1\0\105\u0121\25\0\4\u0187\7\0"+
                  "\6\u0187\12\0\6\u0187\74\0\1\u0188\53\0\17\u0128\1\u0162"+
                  "\4\u0128\1\u0189\72\u0128\40\0\1\u018a\56\0\1\41\6\0"+
                  "\1\134\1\0\1\41\13\0\4\41\7\0\13\41\3\0"+
                  "\1\135\1\0\1\u018b\30\41\2\0\1\41\4\0\2\u0167"+
                  "\1\0\1\u0167\55\0\1\u018c\13\0\1\u018d\14\0\2\u0167"+
                  "\2\0\1\41\2\u0167\1\0\1\u0167\2\0\1\134\1\0"+
                  "\1\41\13\0\4\41\7\0\13\41\3\0\1\135\1\0"+
                  "\2\41\1\u018e\13\41\1\u018f\12\41\2\0\1\u0168\1\u0167"+
                  "\2\0\1\41\6\0\1\134\1\0\1\41\13\0\4\41"+
                  "\7\0\13\41\3\0\1\135\1\0\22\41\1\u0190\6\41"+
                  "\2\0\1\41\3\0\1\41\6\0\1\134\1\0\1\41"+
                  "\13\0\4\41\7\0\13\41\3\0\1\135\1\0\3\41"+
                  "\1\u0191\25\41\2\0\1\41\3\0\1\41\6\0\1\134"+
                  "\1\0\1\41\13\0\4\41\7\0\13\41\3\0\1\135"+
                  "\1\0\13\41\1\u0192\15\41\2\0\1\41\3\0\1\41"+
                  "\6\0\1\134\1\0\1\41\13\0\4\41\7\0\13\41"+
                  "\3\0\1\135\1\0\14\41\1\u0193\14\41\2\0\1\41"+
                  "\3\0\1\41\6\0\1\134\1\0\1\41\13\0\4\41"+
                  "\7\0\13\41\3\0\1\135\1\0\2\41\1\u0194\26\41"+
                  "\2\0\1\41\3\0\1\41\6\0\1\134\1\0\1\41"+
                  "\13\0\4\41\7\0\13\41\3\0\1\135\1\0\22\41"+
                  "\1\u0195\6\41\2\0\1\41\3\0\1\41\6\0\1\134"+
                  "\1\0\1\41\13\0\4\41\7\0\13\41\3\0\1\135"+
                  "\1\0\22\41\1\u0196\6\41\2\0\1\41\3\0\1\41"+
                  "\6\0\1\134\1\0\1\41\13\0\4\41\7\0\13\41"+
                  "\3\0\1\135\1\0\10\41\1\u0197\20\41\2\0\1\41"+
                  "\3\0\1\41\6\0\1\134\1\0\1\41\13\0\4\41"+
                  "\7\0\13\41\3\0\1\135\1\0\6\41\1\u0198\22\41"+
                  "\2\0\1\41\3\0\1\41\6\0\1\134\1\0\1\41"+
                  "\13\0\4\41\7\0\13\41\3\0\1\135\1\0\22\41"+
                  "\1\u0199\6\41\2\0\1\41\3\0\1\41\6\0\1\134"+
                  "\1\0\1\41\13\0\4\41\7\0\13\41\3\0\1\135"+
                  "\1\0\2\41\1\u019a\26\41\2\0\1\41\3\0\1\41"+
                  "\6\0\1\134\1\0\1\41\13\0\4\41\7\0\13\41"+
                  "\3\0\1\135\1\0\15\41\1\u019b\13\41\2\0\1\41"+
                  "\3\0\1\41\6\0\1\134\1\0\1\41\13\0\4\41"+
                  "\7\0\13\41\3\0\1\135\1\0\3\41\1\u019c\25\41"+
                  "\2\0\1\41\46\0\1\u019d\53\0\7\u010e\1\0\1\u010e"+
                  "\1\0\105\u010e\25\0\4\u019e\7\0\6\u019e\12\0\6\u019e"+
                  "\40\0\1\u0185\107\0\7\u0121\1\0\1\u0121\1\0\105\u0121"+
                  "\25\0\4\137\7\0\6\137\12\0\6\137\71\0\1\u019f"+
                  "\127\0\1\u01a0\45\0\1\41\6\0\1\134\1\0\1\41"+
                  "\13\0\4\41\7\0\13\41\3\0\1\135\1\0\2\41"+
                  "\1\u01a1\26\41\2\0\1\41\76\0\1\u01a2\104\0\1\u01a3"+
                  "\35\0\1\41\6\0\1\134\1\0\1\41\13\0\4\41"+
                  "\7\0\13\41\3\0\1\135\1\0\13\41\1\u01a4\15\41"+
                  "\2\0\1\41\3\0\1\41\6\0\1\134\1\0\1\41"+
                  "\13\0\4\41\7\0\13\41\3\0\1\135\1\0\1\41"+
                  "\1\u01a5\27\41\2\0\1\41\3\0\1\41\6\0\1\134"+
                  "\1\0\1\41\13\0\4\41\7\0\13\41\3\0\1\135"+
                  "\1\0\21\41\1\u01a6\7\41\2\0\1\41\3\0\1\41"+
                  "\6\0\1\134\1\0\1\41\13\0\4\41\7\0\13\41"+
                  "\3\0\1\135\1\0\27\41\1\u01a7\1\41\2\0\1\41"+
                  "\3\0\1\41\6\0\1\134\1\0\1\41\13\0\4\41"+
                  "\7\0\13\41\3\0\1\135\1\0\4\41\1\u01a8\24\41"+
                  "\2\0\1\41\3\0\1\41\6\0\1\134\1\0\1\41"+
                  "\13\0\4\41\7\0\13\41\3\0\1\135\1\0\10\41"+
                  "\1\u01a9\20\41\2\0\1\41\3\0\1\41\6\0\1\134"+
                  "\1\0\1\41\13\0\4\41\7\0\13\41\3\0\1\135"+
                  "\1\0\3\41\1\u01aa\25\41\2\0\1\41\3\0\1\41"+
                  "\6\0\1\134\1\0\1\41\13\0\4\41\7\0\13\41"+
                  "\3\0\1\135\1\0\4\41\1\u01ab\24\41\2\0\1\41"+
                  "\3\0\1\41\6\0\1\134\1\0\1\41\13\0\4\41"+
                  "\7\0\13\41\3\0\1\135\1\0\4\41\1\u01ac\24\41"+
                  "\2\0\1\41\3\0\1\41\6\0\1\134\1\0\1\41"+
                  "\13\0\4\41\7\0\13\41\3\0\1\135\1\0\22\41"+
                  "\1\u01ad\6\41\2\0\1\41\43\0\1\u01ae\127\0\1\u01af"+
                  "\105\0\1\u01b0\56\0\1\41\6\0\1\134\1\0\1\41"+
                  "\13\0\4\41\7\0\13\41\3\0\1\135\1\0\22\41"+
                  "\1\u01b1\6\41\2\0\1\41\63\0\1\u01b2\127\0\1\u01b3"+
                  "\25\0\1\41\6\0\1\134\1\0\1\41\13\0\4\41"+
                  "\7\0\13\41\3\0\1\135\1\0\1\u01b4\30\41\2\0"+
                  "\1\41\3\0\1\41\6\0\1\134\1\0\1\41\13\0"+
                  "\4\41\7\0\13\41\3\0\1\135\1\0\11\41\1\u01b5"+
                  "\17\41\2\0\1\41\3\0\1\41\6\0\1\134\1\0"+
                  "\1\41\13\0\4\41\7\0\13\41\3\0\1\135\1\0"+
                  "\22\41\1\u01b6\6\41\2\0\1\41\3\0\1\41\6\0"+
                  "\1\134\1\0\1\41\13\0\4\41\7\0\13\41\3\0"+
                  "\1\135\1\0\4\41\1\u01b7\24\41\2\0\1\41\3\0"+
                  "\1\41\6\0\1\134\1\0\1\41\13\0\4\41\7\0"+
                  "\13\41\3\0\1\135\1\0\4\41\1\u01b8\24\41\2\0"+
                  "\1\41\54\0\1\u01b9\105\0\1\u01ba\131\0\1\163\144\0"+
                  "\1\u01bb\101\0\1\u01bc\32\0\1\41\6\0\1\134\1\0"+
                  "\1\41\13\0\4\41\7\0\13\41\3\0\1\135\1\0"+
                  "\21\41\1\u01bd\7\41\2\0\1\41\3\0\1\41\6\0"+
                  "\1\134\1\0\1\41\13\0\4\41\7\0\13\41\3\0"+
                  "\1\135\1\0\4\41\1\u01be\24\41\2\0\1\41\3\0"+
                  "\1\41\6\0\1\134\1\0\1\41\13\0\4\41\7\0"+
                  "\13\41\3\0\1\135\1\0\3\41\1\u01bf\25\41\2\0"+
                  "\1\41\43\0\1\u01c0\131\0\1\321\144\0\1\u01c1\77\0"+
                  "\1\u01c2\34\0\1\41\6\0\1\134\1\0\1\41\13\0"+
                  "\4\41\7\0\13\41\3\0\1\135\1\0\21\41\1\u01c3"+
                  "\7\41\2\0\1\41\3\0\1\41\6\0\1\134\1\0"+
                  "\1\41\13\0\4\41\7\0\13\41\3\0\1\135\1\0"+
                  "\2\41\1\u01c4\26\41\2\0\1\41\56\0\1\u010c\145\0"+
                  "\1\u01c1\14\0\1\41\6\0\1\134\1\0\1\41\13\0"+
                  "\4\41\7\0\13\41\3\0\1\135\1\0\22\41\1\u01c3"+
                  "\6\41\2\0\1\41\3\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[26860];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
          "Unknown internal scanner error",
          "Error: could not match input",
          "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
          "\12\0\2\11\7\1\2\11\5\1\1\11\6\1\2\11"+
                  "\25\1\1\11\5\1\1\11\1\1\1\11\5\1\1\11"+
                  "\5\1\2\0\1\1\2\0\2\1\5\0\2\1\1\0"+
                  "\2\1\1\11\1\0\1\1\1\0\1\1\1\0\2\1"+
                  "\1\0\5\1\1\0\1\11\1\0\2\11\1\0\1\1"+
                  "\1\11\6\1\2\0\1\11\40\1\1\0\1\1\3\0"+
                  "\1\1\1\0\2\1\1\0\2\11\1\1\2\0\1\11"+
                  "\1\1\1\0\2\1\1\0\1\11\1\1\2\0\1\11"+
                  "\2\1\4\0\1\1\1\0\1\11\2\0\1\11\1\0"+
                  "\1\1\2\0\1\1\1\11\3\1\1\11\4\0\1\11"+
                  "\2\0\3\1\1\0\2\1\1\0\1\1\1\0\3\1"+
                  "\1\0\52\1\1\0\1\11\1\0\2\1\1\0\1\11"+
                  "\3\0\1\1\1\11\1\1\1\0\1\11\2\1\2\0"+
                  "\2\1\1\0\1\1\5\0\1\1\1\0\4\1\1\0"+
                  "\1\11\1\0\1\1\1\0\43\1\3\0\1\1\1\0"+
                  "\3\1\4\0\1\11\1\0\2\1\1\0\1\1\1\0"+
                  "\31\1\3\0\2\1\3\0\1\11\1\0\1\1\2\0"+
                  "\17\1\1\0\1\11\2\0\1\1\2\0\12\1\3\0"+
                  "\1\1\2\0\5\1\4\0\3\1\1\0\1\11\1\0"+
                  "\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[452];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
   the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
   from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** For the backwards DFA of general lookahead statements */
  private boolean [] zzFin = new boolean [Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())+1];

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
  public _ScalaCoreLexer(boolean isScala3) {
    this((java.io.Reader) null);
    this.isScala3 = isScala3;
  }

  private static abstract class InterpolatedStringLevel {
    private int value = 0;

    public final boolean isRaw;

    public InterpolatedStringLevel(boolean isRaw) {
      this.isRaw = isRaw;
    }
    public InterpolatedStringLevel(CharSequence interpolator) {
      this(StringUtil.equal(interpolator, "raw", true));
    }

    public int get() {
      return value;
    }

    public boolean isZero() {
      return value == 0;
    }

    public void increase() {
      ++value;
    }

    public void decrease() {
      --value;
    }

    public abstract int getState();
  }

  private static class RegularLevel extends InterpolatedStringLevel {
    public RegularLevel(CharSequence intepolator) {
      super(intepolator);
    }
    public int getState() {
      return INSIDE_INTERPOLATED_STRING;
    }
  }

  private static class MultilineLevel extends InterpolatedStringLevel {
    public MultilineLevel(CharSequence intepolator) {
      super(intepolator);
    }
    public int getState() {
      return INSIDE_MULTI_LINE_INTERPOLATED_STRING;
    }
  }

  private boolean isScala3;

  //
  // NOTE: when adding new mutable state, do not forget to update `reset_ScalaLexer`
  //
  //to get id after $ in interpolated String
  private boolean haveIdInString = false;
  private boolean haveIdInMultilineString = false;
  // Currently opened interpolated Strings. Each int represents the number of the opened left structural braces in the String
  private Stack<InterpolatedStringLevel> nestedString = new Stack<>();
  private CharSequence lastSeenInterpolator = null;

  private boolean isInsideRawInterpolator() {
    return !nestedString.isEmpty() && nestedString.peek().isRaw;
  }

  public void resetCustom() {
    haveIdInString = false;
    haveIdInMultilineString = false;
    nestedString.clear();
    lastSeenInterpolator = null;
  }

  public boolean isInterpolatedStringState() {
    return isInsideInterpolatedString() ||
            haveIdInString ||
            haveIdInMultilineString ||
            yystate() == INSIDE_INTERPOLATED_STRING ||
            yystate() == INSIDE_MULTI_LINE_INTERPOLATED_STRING;
  }

  private boolean shouldProcessBracesForInterpolated() {
    return isInsideInterpolatedString();
  }
  private boolean isInsideInterpolatedString() {
    return !nestedString.isEmpty();
  }

  @NotNull
  private IElementType processOutsideString() {
    return processOutsideString(tINTERPOLATED_STRING_END);
  }

  private IElementType processOutsideString(IElementType typ) {
    if (isInsideInterpolatedString())
      nestedString.pop();
    yybegin(COMMON_STATE);
    return process(typ);
  }

  @NotNull
  private IElementType process(@NotNull final IElementType type){
    if ((type == tIDENTIFIER || type == kTHIS)) {
      if (haveIdInString) {
        haveIdInString = false;
        yybegin(INSIDE_INTERPOLATED_STRING);
      } else if (haveIdInMultilineString) {
        haveIdInMultilineString = false;
        yybegin(INSIDE_MULTI_LINE_INTERPOLATED_STRING);
      }
    }

    if (yystate() == YYINITIAL && type != tWHITE_SPACE_IN_LINE && type != tLBRACE && type != tLPARENTHESIS) {
      yybegin(COMMON_STATE);
    }

    // see comments to tINTERPOLATED_RAW_STRING and tINTERPOLATED_MULTILINE_RAW_STRING and
    final IElementType typeAdjusted;
    if (type == tINTERPOLATED_STRING && isInsideRawInterpolator())
      typeAdjusted =  tINTERPOLATED_RAW_STRING;
    else if (type == tINTERPOLATED_MULTILINE_STRING && isInsideRawInterpolator())
      typeAdjusted = tINTERPOLATED_MULTILINE_RAW_STRING;
    else
      typeAdjusted = type;

    return typeAdjusted;
  }

  @NotNull
  private IElementType processDollarInsideString(boolean isInsideMultiline) {
    final IElementType token;

    // TODO: remove this chech, this should always be false, cause $$ is handled by INTERPOLATED_STRING_ESCAPE pattern earlier
    boolean isDollarEscape = yycharat(1) == '$';
    if (isDollarEscape) {
      yypushback(yylength() - 2);
      token = tINTERPOLATED_STRING_ESCAPE;
    }
    else {
      if (isInsideMultiline) {
        haveIdInMultilineString = true;
      } else {
        haveIdInString = true;
      }
      yybegin(INJ_COMMON_STATE);
      yypushback(yylength() - 1);
      token = tINTERPOLATED_STRING_INJECTION;
    }
    return process(token);
  }

  private IElementType processScala3(@NotNull IElementType type) {
    return process(isScala3 ? type : tIDENTIFIER);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _ScalaCoreLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  @Override
  public final int getTokenStart() {
    return zzStartRead;
  }

  @Override
  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  @Override
  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;

    // !!!! NOTE !!!!
    // When updating the skeleton from IntelliJ repository, do not forget to add this method call
    resetCustom();

    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  @Override
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  @Override
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;

      return;
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
          { return process(tSTUB);
          }
          // fall through
          case 106: break;
          case 2:
          { yybegin(YYINITIAL);
            return process(tWHITE_SPACE_IN_LINE);
          }
          // fall through
          case 107: break;
          case 3:
          { return process(tIDENTIFIER);
          }
          // fall through
          case 108: break;
          case 4:
          { return process(tWRONG_STRING);
          }
          // fall through
          case 109: break;
          case 5:
          { return process(tINNER_CLASS);
          }
          // fall through
          case 110: break;
          case 6:
          { return process(tLPARENTHESIS);
          }
          // fall through
          case 111: break;
          case 7:
          { return process(tRPARENTHESIS);
          }
          // fall through
          case 112: break;
          case 8:
          { return process(tCOMMA);
          }
          // fall through
          case 113: break;
          case 9:
          { return process(tDOT);
          }
          // fall through
          case 114: break;
          case 10:
          { return process(Integer());
          }
          // fall through
          case 115: break;
          case 11:
          { return process(tCOLON);
          }
          // fall through
          case 116: break;
          case 12:
          { return process(tSEMICOLON);
          }
          // fall through
          case 117: break;
          case 13:
          { return process(tASSIGN);
          }
          // fall through
          case 118: break;
          case 14:
          { return process(tAT);
          }
          // fall through
          case 119: break;
          case 15:
          { return process(tLSQBRACKET);
          }
          // fall through
          case 120: break;
          case 16:
          { return process(tRSQBRACKET);
          }
          // fall through
          case 121: break;
          case 17:
          { return process(tUNDER);
          }
          // fall through
          case 122: break;
          case 18:
          { if (shouldProcessBracesForInterpolated()) {
            nestedString.peek().increase();
          }

            return process(tLBRACE);
          }
          // fall through
          case 123: break;
          case 19:
          { if (shouldProcessBracesForInterpolated()) {
            InterpolatedStringLevel level = nestedString.peek();
            level.decrease();

            if (level.isZero()) {
              yybegin(level.getState());
            }
          }
            return process(tRBRACE);
          }
          // fall through
          case 124: break;
          case 20:
          { return process(tCHOOSE);
          }
          // fall through
          case 125: break;
          case 21:
          { return process(tFUNTYPE);
          }
          // fall through
          case 126: break;
          case 22:
          { yypushback(yylength() - 1); // only push opening quote
            yybegin(INSIDE_INTERPOLATED_STRING);
            nestedString.push(new RegularLevel(lastSeenInterpolator));
            return process(tINTERPOLATED_STRING);
          }
          // fall through
          case 127: break;
          case 23:
          { return process(tINTERPOLATED_STRING);
          }
          // fall through
          case 128: break;
          case 24:
          { //don't add new lines to string itself, add empty error
            yypushback(yylength());
            return processOutsideString(tWRONG_LINE_BREAK_IN_STRING);
          }
          // fall through
          case 129: break;
          case 25:
          { return processOutsideString();
          }
          // fall through
          case 130: break;
          case 26:
          { return process(tINTERPOLATED_MULTILINE_STRING);
          }
          // fall through
          case 131: break;
          case 27:
          { int length = yylength();
            int number = length;
            for (int i = 1; i < length; i++) {
              if (yycharat(i) == '$') {
                number = i;
                break;
              }
            }

            yypushback(length - number);
            boolean isThis = "this".contentEquals(yytext());
            return process(isThis ? kTHIS : tIDENTIFIER);
          }
          // fall through
          case 132: break;
          case 28:
          { return process(tSTRING);
          }
          // fall through
          case 133: break;
          case 29:
            // general lookahead, find correct zzMarkedPos
          { int zzFState = 6;
            int zzFPos = zzStartRead;
            if (zzFin.length <= zzBufferL.length()) {
              zzFin = new boolean[zzBufferL.length()+1];
            }
            boolean zzFinL[] = zzFin;
            while (zzFState != -1 && zzFPos < zzMarkedPos) {
              zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
              zzInput = Character.codePointAt(zzBufferL, zzFPos);
              zzFPos += Character.charCount(zzInput);
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMap(zzInput) ];
            }
            if (zzFState != -1) {
              zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1);
            }
            while (zzFPos <= zzMarkedPos) {
              zzFinL[zzFPos++] = false;
            }

            zzFState = 7;
            zzFPos = zzMarkedPos;
            while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
              zzInput = Character.codePointBefore(zzBufferL, zzFPos);
              zzFPos -= Character.charCount(zzInput);
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMap(zzInput) ];
            };
            zzMarkedPos = zzFPos;
          }
          { yybegin(WAIT_FOR_INTERPOLATED_STRING);
            // TODO: remove this check: looks like it's a dead code,
            //  yytext() should only return text that is matched by INTERPOLATED_STRING_ID, which can't end with \"\"
            if (endsWith(yytext(), "\"\"")) yypushback(2);
            lastSeenInterpolator = yytext();
            IElementType token = haveIdInString || haveIdInMultilineString ? tIDENTIFIER : tINTERPOLATED_STRING_ID;
            return process(token);
          }
          // fall through
          case 134: break;
          case 30:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                    (zzBufferL, zzStartRead, 1);
          { if (isScala3) {
            return processScala3(SpliceStart());
          }
          }
          // fall through
          case 135: break;
          case 31:
          { return process(tSYMBOL);
          }
          // fall through
          case 136: break;
          case 32:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                    (zzBufferL, zzStartRead, 1);
          { if (isScala3) {
            return processScala3(QuoteStart());
          }
          }
          // fall through
          case 137: break;
          case 33:
          { return process(Double());
          }
          // fall through
          case 138: break;
          case 34:
          { return process(tLINE_COMMENT);
          }
          // fall through
          case 139: break;
          case 35:
          { return process(Float());
          }
          // fall through
          case 140: break;
          case 36:
          { return process(Long());
          }
          // fall through
          case 141: break;
          case 37:
          { yybegin(COMMON_STATE);
            yypushback(yylength());
            return ScalaTokenTypesEx.SCALA_XML_CONTENT_START;
          }
          // fall through
          case 142: break;
          case 38:
          { return process(tVIEW);
          }
          // fall through
          case 143: break;
          case 39:
          { return process(tUPPER_BOUND);
          }
          // fall through
          case 144: break;
          case 40:
          { return process(tLOWER_BOUND);
          }
          // fall through
          case 145: break;
          case 41:
          { return process(kDO);
          }
          // fall through
          case 146: break;
          case 42:
          { return process(kIF);
          }
          // fall through
          case 147: break;
          case 43:
          { return processDollarInsideString(false);
          }
          // fall through
          case 148: break;
          case 44:
          { return process(tINTERPOLATED_STRING_ESCAPE);
          }
          // fall through
          case 149: break;
          case 45:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                    (zzBufferL, zzStartRead, 1);
          { yybegin(COMMON_STATE);
            return process(tINTERPOLATED_STRING_INJECTION);
          }
          // fall through
          case 150: break;
          case 46:
          { if (isInsideRawInterpolator()) {
            yypushback(1); // from "\t" push "t" back, also if we have "\" we don't want " to be captured
          }
            return process(tINTERPOLATED_STRING);
          }
          // fall through
          case 151: break;
          case 47:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                    (zzBufferL, zzStartRead, 1);
          { return process(tINTERPOLATED_MULTILINE_STRING);
          }
          // fall through
          case 152: break;
          case 48:
          { return processDollarInsideString(true);
          }
          // fall through
          case 153: break;
          case 49:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                    (zzBufferL, zzStartRead, 1);
          { yybegin(COMMON_STATE);
            return process(tINTERPOLATED_STRING_INJECTION);
          }
          // fall through
          case 154: break;
          case 50:
          { return process(tCHAR);
          }
          // fall through
          case 155: break;
          case 51:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                    (zzBufferL, zzStartRead, 2);
          { return process(tCHAR);
          }
          // fall through
          case 156: break;
          case 52:
          { yypushback(yylength() - 1);
            yybegin(YYINITIAL);
            return process(tLPARENTHESIS);
          }
          // fall through
          case 157: break;
          case 53:
            // general lookahead, find correct zzMarkedPos
          { int zzFState = 8;
            int zzFPos = zzStartRead;
            if (zzFin.length <= zzBufferL.length()) {
              zzFin = new boolean[zzBufferL.length()+1];
            }
            boolean zzFinL[] = zzFin;
            while (zzFState != -1 && zzFPos < zzMarkedPos) {
              zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
              zzInput = Character.codePointAt(zzBufferL, zzFPos);
              zzFPos += Character.charCount(zzInput);
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMap(zzInput) ];
            }
            if (zzFState != -1) {
              zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1);
            }
            while (zzFPos <= zzMarkedPos) {
              zzFinL[zzFPos++] = false;
            }

            zzFState = 9;
            zzFPos = zzMarkedPos;
            while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
              zzInput = Character.codePointBefore(zzBufferL, zzFPos);
              zzFPos -= Character.charCount(zzInput);
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMap(zzInput) ];
            };
            zzMarkedPos = zzFPos;
          }
          { return process(Integer());
          }
          // fall through
          case 158: break;
          case 54:
          { return processScala3(TypeLambdaArrow());
          }
          // fall through
          case 159: break;
          case 55:
          { return processScala3(ImplicitFunctionArrow());
          }
          // fall through
          case 160: break;
          case 56:
          { return process(kDEF);
          }
          // fall through
          case 161: break;
          case 57:
          { return process(kFOR);
          }
          // fall through
          case 162: break;
          case 58:
          { return process(NewKeyword());
          }
          // fall through
          case 163: break;
          case 59:
          { return process(kTRY);
          }
          // fall through
          case 164: break;
          case 60:
          { return process(kVAL);
          }
          // fall through
          case 165: break;
          case 61:
          { return process(kVAR);
          }
          // fall through
          case 166: break;
          case 62:
          { if (shouldProcessBracesForInterpolated()) {
            nestedString.peek().increase();
          }

            yypushback(yylength() - 1);
            yybegin(YYINITIAL);
            return process(tLBRACE);
          }
          // fall through
          case 167: break;
          case 63:
          { yybegin(INSIDE_MULTI_LINE_INTERPOLATED_STRING);
            nestedString.push(new MultilineLevel(lastSeenInterpolator));
            return process(tINTERPOLATED_MULTILINE_STRING);
          }
          // fall through
          case 168: break;
          case 64:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                    (zzBufferL, zzStartRead, 2);
          { return process(tINTERPOLATED_MULTILINE_STRING);
          }
          // fall through
          case 169: break;
          case 65:
          { //for comments in interpolated strings
            return process(tBLOCK_COMMENT);
          }
          // fall through
          case 170: break;
          case 66:
          { return process(kCASE);
          }
          // fall through
          case 171: break;
          case 67:
          { return process(kELSE);
          }
          // fall through
          case 172: break;
          case 68:
          { return processScala3(EnumKeyword());
          }
          // fall through
          case 173: break;
          case 69:
          { return process(kLAZY);
          }
          // fall through
          case 174: break;
          case 70:
          { return process(kNULL);
          }
          // fall through
          case 175: break;
          case 71:
          { return processScala3(ThenKeyword());
          }
          // fall through
          case 176: break;
          case 72:
          { return process(kTHIS);
          }
          // fall through
          case 177: break;
          case 73:
          { return process(kTRUE);
          }
          // fall through
          case 178: break;
          case 74:
          { return process(kTYPE);
          }
          // fall through
          case 179: break;
          case 75:
          { return process(kWITH);
          }
          // fall through
          case 180: break;
          case 76:
          { yypushback(yylength() - 1);
            return process(tINTERPOLATED_MULTILINE_STRING);
          }
          // fall through
          case 181: break;
          case 77:
          { //for comments in interpolated strings
            return process(ScalaDocElementTypes.SCALA_DOC_COMMENT);
          }
          // fall through
          case 182: break;
          case 78:
          { return process(kCATCH);
          }
          // fall through
          case 183: break;
          case 79:
          { return process(ClassKeyword());
          }
          // fall through
          case 184: break;
          case 80:
          { return process(kFALSE);
          }
          // fall through
          case 185: break;
          case 81:
          { return process(kFINAL);
          }
          // fall through
          case 186: break;
          case 82:
          { return processScala3(GivenKeyword());
          }
          // fall through
          case 187: break;
          case 83:
          { return process(kMACRO);
          }
          // fall through
          case 188: break;
          case 84:
          { return process(kMATCH);
          }
          // fall through
          case 189: break;
          case 85:
          { return process(kSUPER);
          }
          // fall through
          case 190: break;
          case 86:
          { return process(kTHROW);
          }
          // fall through
          case 191: break;
          case 87:
          { return process(TraitKeyword());
          }
          // fall through
          case 192: break;
          case 88:
          { return process(kWHILE);
          }
          // fall through
          case 193: break;
          case 89:
          { return process(kYIELD);
          }
          // fall through
          case 194: break;
          case 90:
          { return process(tMULTILINE_STRING);
          }
          // fall through
          case 195: break;
          case 91:
          { return processScala3(ExportKeyword());
          }
          // fall through
          case 196: break;
          case 92:
          { return process(kIMPORT);
          }
          // fall through
          case 197: break;
          case 93:
          { return process(ObjectKeyword());
          }
          // fall through
          case 198: break;
          case 94:
          { return process(kRETURN);
          }
          // fall through
          case 199: break;
          case 95:
          { return process(kSEALED);
          }
          // fall through
          case 200: break;
          case 96:
          { return process(kEXTENDS);
          }
          // fall through
          case 201: break;
          case 97:
          { return process(kFINALLY);
          }
          // fall through
          case 202: break;
          case 98:
          { return process(kFOR_SOME);
          }
          // fall through
          case 203: break;
          case 99:
          { return process(kPACKAGE);
          }
          // fall through
          case 204: break;
          case 100:
          { return process(kPRIVATE);
          }
          // fall through
          case 205: break;
          case 101:
          { return process(kABSTRACT);
          }
          // fall through
          case 206: break;
          case 102:
          { return process(kIMPLICIT);
          }
          // fall through
          case 207: break;
          case 103:
          { return process(kOVERRIDE);
          }
          // fall through
          case 208: break;
          case 104:
          { return process(kPROTECTED);
          }
          // fall through
          case 209: break;
          case 105:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                    (zzBufferL, zzStartRead, 4);
          { return process(kCASE);
          }
          // fall through
          case 210: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
