// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: _ScalaCoreLexer.flex

package org.jetbrains.plugins.scala.lang.lexer.core;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.util.containers.Stack;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.plugins.scala.lang.lexer.ScalaTokenTypesEx;
import org.jetbrains.plugins.scala.lang.scaladoc.parser.ScalaDocElementTypes;
import com.intellij.openapi.util.text.StringUtil;

import static com.intellij.openapi.util.text.StringUtil.endsWith;
import static org.jetbrains.plugins.scala.lang.lexer.ScalaTokenType.*;
import static org.jetbrains.plugins.scala.lang.lexer.ScalaTokenTypes.*;

@SuppressWarnings({"ALL"})

public class _ScalaCoreLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMON_STATE = 2;
  public static final int WAIT_FOR_INTERPOLATED_STRING = 4;
  public static final int INSIDE_INTERPOLATED_STRING = 6;
  public static final int INSIDE_MULTI_LINE_INTERPOLATED_STRING = 8;
  public static final int INJ_COMMON_STATE = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5, 5
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\1\u1f00\1\u2000\1\u2100\1\u2200\1\u2300\1\u2400"+
    "\1\u2500\1\u2600\1\u1f00\1\u2700\1\u2800\1\u2900\1\u2a00\1\u2b00"+
    "\1\u2c00\1\u2d00\1\u2e00\1\u2500\31\u0100\1\u2f00\121\u0100\1\u3000"+
    "\4\u0100\1\u3100\1\u0100\1\u3200\1\u3300\1\u3400\1\u3500\1\u3600"+
    "\1\u3700\53\u0100\1\u3800\10\u3900\31\u3a00\1\u0100\1\u3b00\1\u3c00"+
    "\1\u0100\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100\1\u4200\1\u4300"+
    "\1\u4400\1\u4500\1\u0100\1\u4600\1\u4700\1\u4800\1\u4900\1\u4a00"+
    "\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u4f00\1\u5000\1\u5100\1\u5200"+
    "\1\u5300\1\u5400\1\u5500\1\u5600\1\u5700\1\u5800\1\u5900\1\u3a00"+
    "\1\u5a00\1\u5b00\1\u5c00\1\u5d00\3\u0100\1\u5e00\1\u5f00\1\u6000"+
    "\12\u3a00\4\u0100\1\u6100\17\u3a00\2\u0100\1\u6200\41\u3a00\2\u0100"+
    "\1\u6300\1\u6400\2\u3a00\1\u6500\1\u6600\27\u0100\1\u6700\4\u0100"+
    "\1\u6800\1\u6900\42\u3a00\1\u0100\1\u6a00\1\u6b00\11\u3a00\1\u6c00"+
    "\23\u3a00\1\u6d00\1\u6e00\1\u6f00\1\u7000\1\u7100\1\u7200\1\u7300"+
    "\1\u7400\2\u2500\1\u7500\5\u3a00\1\u7600\1\u7700\1\u7800\5\u3a00"+
    "\1\u7900\1\u7a00\2\u3a00\1\u7b00\1\u7c00\1\u7d00\1\u3a00\1\u7e00"+
    "\1\u7f00\1\u8000\1\u8100\2\u2500\1\u8200\1\u8300\1\u8400\1\u8500"+
    "\1\u8600\1\u8700\4\u3a00\246\u0100\1\u8800\20\u0100\1\u8900\1\u8a00"+
    "\25\u0100\1\u8b00\34\u0100\1\u8c00\14\u3a00\2\u0100\1\u8d00\5\u3a00"+
    "\23\u0100\1\u8e00\u0aec\u3a00\1\u8f00\1\u9000\u02fe\u3a00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\4\16\0\4\5"+
    "\1\1\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\2\27\4\30\2\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\5\47\1\50\6\47\1\51\1\52\3\47"+
    "\1\53\2\47\1\54\1\55\1\56\1\13\1\57\1\60"+
    "\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70"+
    "\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100"+
    "\1\47\1\101\1\102\1\103\1\104\1\105\1\106\1\107"+
    "\1\110\1\111\1\112\1\13\1\113\1\13\6\0\1\114"+
    "\32\0\2\5\4\47\1\13\2\5\1\13\1\47\1\5"+
    "\1\13\1\0\1\13\1\5\2\13\3\5\1\47\4\5"+
    "\1\47\5\5\27\47\1\13\37\47\1\13\u01ca\47\4\5"+
    "\14\47\16\5\5\47\7\5\1\47\1\5\1\47\21\5"+
    "\160\0\5\47\1\5\2\47\2\5\4\47\1\5\1\47"+
    "\6\5\1\47\1\5\3\47\1\5\1\47\1\5\24\47"+
    "\1\5\123\47\1\13\213\47\1\13\5\0\2\5\246\47"+
    "\1\5\46\47\2\5\1\47\6\5\51\47\4\5\2\13"+
    "\1\47\1\5\55\0\1\5\1\0\1\5\2\0\1\5"+
    "\2\0\1\5\1\0\10\5\33\47\4\5\4\47\15\5"+
    "\6\0\3\13\2\5\1\47\2\5\2\13\13\0\1\5"+
    "\1\0\3\5\53\47\37\0\4\5\2\47\1\0\143\47"+
    "\1\5\1\47\10\0\1\13\6\0\2\47\2\0\1\13"+
    "\4\0\2\47\12\0\3\47\2\13\1\47\17\5\1\0"+
    "\1\47\1\0\36\47\33\0\2\5\131\47\13\0\1\47"+
    "\16\5\12\0\41\47\11\0\2\47\1\13\3\5\1\47"+
    "\2\5\1\0\30\47\4\0\1\47\11\0\1\47\3\0"+
    "\1\47\5\0\22\5\31\47\3\0\4\5\13\47\65\5"+
    "\25\47\1\5\22\47\13\5\61\0\66\47\3\0\1\47"+
    "\22\0\1\47\7\0\12\47\2\0\2\5\12\0\1\5"+
    "\20\47\3\0\1\5\10\47\2\5\2\47\2\5\26\47"+
    "\1\5\7\47\1\5\1\47\3\5\4\47\2\5\1\0"+
    "\1\47\7\0\2\5\2\0\2\5\3\0\1\47\10\5"+
    "\1\0\4\5\2\47\1\5\3\47\2\0\2\5\12\0"+
    "\4\47\6\5\1\13\2\47\1\5\1\0\2\5\3\0"+
    "\1\5\6\47\4\5\2\47\2\5\26\47\1\5\7\47"+
    "\1\5\2\47\1\5\2\47\1\5\2\47\2\5\1\0"+
    "\1\5\5\0\4\5\2\0\2\5\3\0\3\5\1\0"+
    "\7\5\4\47\1\5\1\47\7\5\14\0\3\47\1\0"+
    "\13\5\3\0\1\5\11\47\1\5\3\47\1\5\26\47"+
    "\1\5\7\47\1\5\2\47\1\5\5\47\2\5\1\0"+
    "\1\47\10\0\1\5\3\0\1\5\3\0\2\5\1\47"+
    "\17\5\2\47\2\0\2\5\12\0\1\5\1\47\7\5"+
    "\1\47\6\0\1\5\3\0\1\5\10\47\2\5\2\47"+
    "\2\5\26\47\1\5\7\47\1\5\2\47\1\5\5\47"+
    "\2\5\1\0\1\47\7\0\2\5\2\0\2\5\3\0"+
    "\7\5\3\0\4\5\2\47\1\5\3\47\2\0\2\5"+
    "\12\0\1\13\1\47\20\5\1\0\1\47\1\5\6\47"+
    "\3\5\3\47\1\5\4\47\3\5\2\47\1\5\1\47"+
    "\1\5\2\47\3\5\2\47\3\5\3\47\3\5\14\47"+
    "\4\5\5\0\3\5\3\0\1\5\4\0\2\5\1\47"+
    "\6\5\1\0\16\5\12\0\3\5\6\13\1\47\1\13"+
    "\5\5\5\0\10\47\1\5\3\47\1\5\27\47\1\5"+
    "\20\47\3\5\1\47\7\0\1\5\3\0\1\5\4\0"+
    "\7\5\2\0\1\5\3\47\5\5\2\47\2\0\2\5"+
    "\12\0\17\5\1\13\1\47\3\0\1\5\10\47\1\5"+
    "\3\47\1\5\27\47\1\5\12\47\1\5\5\47\2\5"+
    "\1\0\1\47\7\0\1\5\3\0\1\5\4\0\7\5"+
    "\2\0\7\5\1\47\1\5\2\47\2\0\2\5\12\0"+
    "\1\5\2\47\15\5\4\0\11\47\1\5\3\47\1\5"+
    "\51\47\2\0\1\47\7\0\1\5\3\0\1\5\4\0"+
    "\1\47\1\13\4\5\3\47\1\0\7\5\3\47\2\0"+
    "\2\5\12\0\11\5\1\13\6\47\1\5\3\0\1\5"+
    "\22\47\3\5\30\47\1\5\11\47\1\5\1\47\2\5"+
    "\7\47\3\5\1\0\4\5\6\0\1\5\1\0\1\5"+
    "\10\0\6\5\12\0\2\5\2\0\15\5\60\47\1\0"+
    "\2\47\7\0\4\5\10\47\10\0\1\5\12\0\47\5"+
    "\2\47\1\5\1\47\1\5\5\47\1\5\30\47\1\5"+
    "\1\47\1\5\12\47\1\0\2\47\11\0\1\47\2\5"+
    "\5\47\1\5\1\47\1\5\6\0\2\5\12\0\2\5"+
    "\4\47\40\5\1\47\3\13\17\5\1\13\1\5\3\13"+
    "\2\0\6\13\12\0\12\5\1\13\1\0\1\13\1\0"+
    "\1\13\1\0\4\5\2\0\10\47\1\5\44\47\4\5"+
    "\24\0\1\5\2\0\5\47\13\0\1\5\44\0\1\5"+
    "\10\13\1\0\6\13\1\5\2\13\5\5\4\13\47\5"+
    "\53\47\24\0\1\47\12\0\6\5\6\47\4\0\4\47"+
    "\3\0\1\47\3\0\2\47\7\0\3\47\4\0\15\47"+
    "\14\0\1\47\17\0\2\13\46\47\1\5\1\47\5\5"+
    "\1\47\2\5\53\47\1\5\115\47\1\5\4\47\2\5"+
    "\7\47\1\5\1\47\1\5\4\47\2\5\51\47\1\5"+
    "\4\47\2\5\41\47\1\5\4\47\2\5\7\47\1\5"+
    "\1\47\1\5\4\47\2\5\17\47\1\5\71\47\1\5"+
    "\4\47\2\5\103\47\2\5\3\0\40\5\20\47\12\13"+
    "\6\5\126\47\2\5\6\47\3\5\u016c\47\1\13\1\5"+
    "\21\47\1\5\32\47\5\5\113\47\3\5\13\47\7\5"+
    "\15\47\1\5\4\47\3\0\13\5\22\47\3\0\13\5"+
    "\22\47\2\0\14\5\15\47\1\5\3\47\1\5\2\0"+
    "\14\5\64\47\40\0\3\5\1\47\3\5\2\47\1\0"+
    "\2\5\12\0\41\5\4\0\1\5\12\0\6\5\131\47"+
    "\7\5\5\47\2\0\42\47\1\0\1\47\5\5\106\47"+
    "\12\5\37\47\1\5\14\0\4\5\14\0\4\5\1\13"+
    "\5\5\12\0\36\47\2\5\5\47\13\5\54\47\4\5"+
    "\32\47\6\5\12\0\4\5\42\13\27\47\5\0\4\5"+
    "\65\47\12\0\1\5\35\0\2\5\13\0\6\5\12\0"+
    "\15\5\1\47\10\5\16\0\1\5\2\0\77\5\5\0"+
    "\57\47\21\0\7\47\4\5\12\0\7\5\12\13\11\0"+
    "\11\13\3\5\3\0\36\47\15\0\2\47\12\0\54\47"+
    "\16\0\14\5\44\47\24\0\10\5\12\0\3\5\3\47"+
    "\12\0\44\47\2\5\11\47\7\5\53\47\2\5\3\47"+
    "\20\5\3\0\1\5\25\0\4\47\1\0\6\47\1\0"+
    "\2\47\3\0\1\47\5\5\300\47\72\0\1\5\5\0"+
    "\26\47\2\5\6\47\2\5\46\47\2\5\6\47\2\5"+
    "\10\47\1\5\1\47\1\5\1\47\1\5\1\47\1\5"+
    "\37\47\2\5\65\47\1\5\7\47\1\5\1\47\3\5"+
    "\3\47\1\5\7\47\3\5\4\47\2\5\6\47\4\5"+
    "\15\47\5\5\3\47\1\5\7\47\16\5\5\0\30\5"+
    "\2\115\5\0\20\5\2\47\3\5\1\13\15\5\1\13"+
    "\1\5\1\47\13\5\5\0\1\5\12\0\1\5\1\47"+
    "\10\5\3\13\2\5\1\47\12\5\3\13\3\5\15\47"+
    "\3\5\40\47\20\5\15\0\4\5\1\0\3\5\14\0"+
    "\17\5\2\13\1\47\4\13\1\47\2\13\12\47\1\13"+
    "\1\47\3\13\5\47\6\13\1\47\1\13\1\47\1\13"+
    "\1\47\1\13\4\47\1\13\13\47\2\13\4\47\5\13"+
    "\5\47\4\13\1\47\1\13\20\5\51\47\1\5\2\13"+
    "\4\5\1\116\101\13\1\117\u0135\13\4\5\35\13\2\5"+
    "\374\13\31\5\13\13\121\5\116\13\26\5\u0268\13\54\5"+
    "\61\13\2\5\37\13\12\5\u0193\13\26\5\77\13\4\5"+
    "\40\13\2\5\166\13\2\5\40\13\2\5\150\13\57\47"+
    "\1\5\57\47\1\5\205\47\6\13\4\47\3\0\2\47"+
    "\14\5\46\47\1\5\1\47\5\5\1\47\2\5\70\47"+
    "\7\5\1\47\17\5\1\0\27\47\11\5\7\47\1\5"+
    "\7\47\1\5\7\47\1\5\7\47\1\5\7\47\1\5"+
    "\7\47\1\5\7\47\1\5\7\47\1\5\40\0\57\5"+
    "\1\47\120\5\32\13\1\5\131\13\14\5\326\13\32\5"+
    "\14\13\10\5\1\13\3\47\12\5\2\13\14\5\1\13"+
    "\11\47\6\0\1\5\5\47\2\13\5\47\1\5\2\13"+
    "\1\5\126\47\2\5\2\0\2\5\3\47\1\5\132\47"+
    "\1\5\4\47\5\5\53\47\1\5\136\47\1\5\2\13"+
    "\4\5\12\13\40\47\44\13\14\5\20\47\37\13\13\5"+
    "\36\13\10\5\1\13\17\5\40\13\12\5\47\13\17\5"+
    "\100\13\300\47\100\13\375\47\3\5\215\47\3\5\67\13"+
    "\11\5\56\47\2\5\15\47\3\5\20\47\12\0\2\47"+
    "\24\5\57\47\1\0\4\5\12\0\1\5\37\47\2\0"+
    "\120\47\2\0\45\5\11\47\2\5\147\47\2\5\65\47"+
    "\2\5\11\47\52\5\15\47\1\0\3\47\1\0\4\47"+
    "\1\0\27\47\5\0\4\13\1\0\11\5\2\13\1\47"+
    "\1\13\6\5\64\47\14\5\2\0\62\47\22\0\12\5"+
    "\12\0\6\5\22\0\6\47\3\5\1\47\1\5\2\47"+
    "\13\0\34\47\10\0\2\5\27\47\15\0\14\5\35\47"+
    "\3\5\4\0\57\47\16\0\16\5\1\47\12\0\6\5"+
    "\5\47\1\0\12\47\12\0\5\47\1\5\51\47\16\0"+
    "\11\5\3\47\1\0\10\47\2\0\2\5\12\0\6\5"+
    "\27\47\3\13\1\47\3\0\62\47\1\0\1\47\3\0"+
    "\2\47\2\0\5\47\2\0\1\47\1\0\1\47\30\5"+
    "\3\47\2\5\13\47\5\0\2\5\3\47\2\0\12\5"+
    "\6\47\2\5\6\47\2\5\6\47\11\5\7\47\1\5"+
    "\7\47\1\5\53\47\1\5\16\47\6\5\163\47\10\0"+
    "\1\5\2\0\2\5\12\0\6\5\244\47\14\5\27\47"+
    "\4\5\61\47\4\5\u0100\3\u0100\5\156\47\2\5\152\47"+
    "\46\5\7\47\14\5\5\47\5\5\1\47\1\0\12\47"+
    "\1\13\15\47\1\5\5\47\1\5\1\47\1\5\2\47"+
    "\1\5\2\47\1\5\154\47\41\5\153\47\22\5\100\47"+
    "\2\5\66\47\50\5\15\47\1\13\2\5\20\0\20\5"+
    "\20\0\3\5\2\47\30\5\3\47\22\5\1\13\1\5"+
    "\3\13\2\5\1\47\6\5\5\47\1\5\207\47\2\5"+
    "\1\0\4\5\1\47\6\5\1\13\4\5\12\0\2\5"+
    "\3\13\2\5\32\47\4\5\1\47\1\5\32\47\1\5"+
    "\1\13\1\5\1\13\7\5\131\47\3\5\6\47\2\5"+
    "\6\47\2\5\6\47\2\5\3\47\3\5\2\47\1\13"+
    "\1\5\1\13\2\47\1\5\7\13\12\5\3\0\2\13"+
    "\2\5\14\47\1\5\32\47\1\5\23\47\1\5\2\47"+
    "\1\5\17\47\2\5\16\47\42\5\173\47\74\5\11\13"+
    "\65\47\4\5\21\13\2\5\3\13\1\5\14\13\4\5"+
    "\1\13\57\5\55\13\1\0\202\5\35\47\3\5\61\47"+
    "\17\5\1\0\37\5\40\47\15\5\36\47\5\5\46\47"+
    "\5\0\5\5\36\47\2\5\44\47\4\5\10\47\1\5"+
    "\5\47\52\5\236\47\2\5\12\0\6\5\44\47\4\5"+
    "\44\47\4\5\50\47\10\5\64\47\234\5\67\47\11\5"+
    "\26\47\12\5\10\47\230\5\6\47\2\5\1\47\1\5"+
    "\54\47\1\5\2\47\3\5\1\47\2\5\27\47\12\5"+
    "\27\47\2\13\7\5\37\47\101\5\23\47\1\5\2\47"+
    "\12\5\26\47\12\5\32\47\106\5\70\47\6\5\2\47"+
    "\100\5\1\47\3\0\1\5\2\0\5\5\4\0\4\47"+
    "\1\5\3\47\1\5\35\47\2\5\3\0\4\5\1\0"+
    "\40\5\35\47\3\5\35\47\43\5\10\47\1\13\34\47"+
    "\2\0\31\5\66\47\12\5\26\47\12\5\23\47\15\5"+
    "\22\47\156\5\111\47\67\5\63\47\15\5\63\47\15\5"+
    "\44\47\4\0\10\5\12\0\u0146\5\52\47\1\5\2\0"+
    "\3\5\2\47\116\5\35\47\12\5\1\47\10\5\26\47"+
    "\13\0\137\5\25\47\33\5\27\47\11\5\3\0\65\47"+
    "\17\0\37\5\12\0\17\5\4\0\55\47\13\0\2\5"+
    "\1\0\17\5\1\0\2\5\31\47\7\5\12\0\6\5"+
    "\3\0\44\47\16\0\1\5\12\0\4\5\1\47\2\0"+
    "\1\47\10\5\43\47\1\0\2\5\1\47\11\5\3\0"+
    "\60\47\16\0\4\47\4\5\4\0\1\5\14\0\1\47"+
    "\1\5\1\47\43\5\22\47\1\5\31\47\14\0\6\5"+
    "\1\0\101\5\7\47\1\5\1\47\1\5\4\47\1\5"+
    "\17\47\1\5\12\47\7\5\57\47\14\0\5\5\12\0"+
    "\6\5\4\0\1\5\10\47\2\5\2\47\2\5\26\47"+
    "\1\5\7\47\1\5\2\47\1\5\5\47\1\5\2\0"+
    "\1\47\7\0\2\5\2\0\2\5\3\0\2\5\1\47"+
    "\6\5\1\0\5\5\5\47\2\0\2\5\7\0\3\5"+
    "\5\0\213\5\65\47\22\0\4\47\5\5\12\0\4\5"+
    "\1\0\3\47\36\5\60\47\24\0\2\47\1\5\1\47"+
    "\10\5\12\0\246\5\57\47\7\0\2\5\11\0\27\5"+
    "\4\47\2\0\42\5\60\47\21\0\3\5\1\47\13\5"+
    "\12\0\46\5\53\47\15\0\1\47\7\5\12\0\66\5"+
    "\33\47\2\5\17\0\4\5\12\0\5\5\1\13\300\5"+
    "\54\47\17\0\145\5\100\47\12\0\25\5\10\47\2\5"+
    "\1\47\2\5\10\47\1\5\2\47\1\5\30\47\6\0"+
    "\1\5\2\0\2\5\4\0\1\47\1\0\1\47\2\0"+
    "\14\5\12\0\106\5\10\47\2\5\47\47\7\0\2\5"+
    "\7\0\1\47\1\5\1\47\1\0\33\5\1\47\12\0"+
    "\50\47\7\0\1\47\4\0\10\5\1\0\10\5\1\47"+
    "\13\0\56\47\20\0\3\5\1\47\42\5\71\47\7\5"+
    "\11\47\1\5\45\47\10\0\1\5\10\0\1\47\17\5"+
    "\12\0\30\5\36\47\2\5\26\0\1\5\16\0\111\5"+
    "\7\47\1\5\2\47\1\5\46\47\6\0\3\5\1\0"+
    "\1\5\2\0\1\5\7\0\1\47\1\0\10\5\12\0"+
    "\6\5\6\47\1\5\2\47\1\5\40\47\5\0\1\5"+
    "\2\0\1\5\5\0\1\47\7\5\12\0\u0136\5\23\47"+
    "\4\0\271\5\1\47\44\5\10\13\4\47\21\13\16\5"+
    "\232\47\146\5\157\47\21\5\304\47\274\5\57\47\1\5"+
    "\11\0\307\5\107\47\271\5\71\47\7\5\37\47\1\5"+
    "\12\0\146\5\36\47\2\5\5\0\13\5\60\47\7\0"+
    "\5\5\4\13\4\47\1\5\1\13\12\5\12\0\11\5"+
    "\25\47\5\5\23\47\260\5\100\47\200\5\113\47\4\5"+
    "\1\0\1\47\67\0\7\5\4\0\15\47\100\5\2\47"+
    "\1\5\1\47\1\0\13\5\2\0\16\5\370\47\10\5"+
    "\326\47\52\5\11\47\367\5\37\47\61\5\3\47\21\5"+
    "\4\47\10\5\u018c\47\4\5\153\47\5\5\15\47\3\5"+
    "\11\47\7\5\12\47\2\5\1\13\2\0\1\5\4\0"+
    "\134\5\366\13\12\5\47\13\2\5\74\13\5\0\3\13"+
    "\26\0\2\13\7\0\36\13\4\0\73\13\27\5\102\13"+
    "\3\0\1\13\272\5\127\13\251\5\125\47\1\5\107\47"+
    "\1\5\2\47\2\5\1\47\2\5\2\47\2\5\4\47"+
    "\1\5\14\47\1\5\1\47\1\5\7\47\1\5\101\47"+
    "\1\5\4\47\2\5\10\47\1\5\7\47\1\5\34\47"+
    "\1\5\4\47\1\5\5\47\1\5\1\47\3\5\7\47"+
    "\1\5\u0154\47\2\5\31\47\1\13\31\47\1\13\37\47"+
    "\1\13\31\47\1\13\37\47\1\13\31\47\1\13\37\47"+
    "\1\13\31\47\1\13\37\47\1\13\31\47\1\13\10\47"+
    "\2\5\151\0\4\13\62\0\10\13\1\0\16\13\1\0"+
    "\2\13\24\5\5\0\1\5\17\0\120\5\7\0\1\5"+
    "\21\0\2\5\7\0\1\5\2\0\1\5\5\0\325\5"+
    "\55\47\3\5\7\0\7\47\2\5\12\0\4\5\1\47"+
    "\1\13\u0170\5\54\47\16\0\5\5\306\47\13\5\7\0"+
    "\51\5\104\47\7\0\1\47\4\5\12\0\u0152\5\1\13"+
    "\3\5\1\47\175\5\1\13\321\5\4\47\1\5\33\47"+
    "\1\5\2\47\1\5\1\47\2\5\1\47\1\5\12\47"+
    "\1\5\4\47\1\5\1\47\1\5\1\47\6\5\1\47"+
    "\4\5\1\47\1\5\1\47\1\5\1\47\1\5\3\47"+
    "\1\5\2\47\1\5\1\47\2\5\1\47\1\5\1\47"+
    "\1\5\1\47\1\5\1\47\1\5\1\47\1\5\2\47"+
    "\1\5\1\47\2\5\4\47\1\5\7\47\1\5\4\47"+
    "\1\5\4\47\1\5\1\47\1\5\12\47\1\5\21\47"+
    "\5\5\3\47\1\5\5\47\1\5\21\47\64\5\2\13"+
    "\16\5\54\13\4\5\144\13\14\5\17\13\2\5\17\13"+
    "\1\5\17\13\1\5\45\13\32\5\135\13\3\5\75\13"+
    "\71\5\35\13\15\5\54\13\4\5\11\13\7\5\2\13"+
    "\16\5\6\13\232\5\373\13\5\5\326\13\12\5\15\13"+
    "\3\5\13\13\5\5\164\13\14\5\131\13\7\5\14\13"+
    "\24\5\14\13\4\5\70\13\10\5\12\13\6\5\50\13"+
    "\10\5\36\13\122\5\14\13\1\5\145\13\1\5\4\13"+
    "\3\5\51\13\2\5\6\13\3\5\35\13\2\5\207\13"+
    "\14\5\16\13\2\5\4\13\4\5\3\13\5\5\3\13"+
    "\15\5\6\13\u015a\5\12\0\6\5\336\47\42\5\65\47"+
    "\13\5\336\47\2\5\u0182\47\16\5\u0131\47\37\5\36\47"+
    "\342\5\113\47\266\5\1\0\36\5\140\0\200\5\360\0"+
    "\20\5";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[37120];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\12\0\1\1\2\2\1\3\1\4\1\5\1\3\1\1"+
    "\1\6\1\7\1\10\1\11\1\3\2\12\1\13\1\14"+
    "\1\3\1\15\2\3\1\16\1\3\1\17\1\20\1\21"+
    "\1\1\22\3\1\22\1\23\1\24\1\25\1\3\1\26"+
    "\1\27\1\30\1\4\1\31\2\4\1\32\3\4\1\33"+
    "\1\4\1\33\1\4\15\0\1\4\1\34\1\0\1\35"+
    "\1\3\1\36\1\0\1\37\1\0\1\37\1\0\1\40"+
    "\1\37\1\0\1\41\1\3\1\42\1\41\1\0\1\41"+
    "\1\0\1\43\1\44\1\0\1\3\1\45\1\46\1\47"+
    "\1\3\1\25\1\50\1\3\2\0\5\3\1\51\7\3"+
    "\1\52\23\3\1\0\1\26\3\0\1\53\1\0\1\54"+
    "\1\53\1\0\1\55\2\56\2\0\1\57\1\60\1\0"+
    "\1\54\1\60\1\0\1\61\1\33\2\0\1\33\13\0"+
    "\1\34\1\0\1\35\2\0\1\3\1\62\3\37\1\63"+
    "\4\0\1\64\2\0\2\3\1\65\1\0\2\65\1\0"+
    "\1\12\1\0\1\41\1\12\1\3\1\0\1\66\1\67"+
    "\5\3\1\70\6\3\1\71\5\3\1\72\16\3\1\73"+
    "\1\3\1\74\1\75\3\3\1\0\1\76\1\0\1\77"+
    "\1\53\1\0\1\53\3\0\1\31\1\100\1\60\1\0"+
    "\1\60\1\33\7\0\1\35\5\0\1\3\1\0\2\3"+
    "\1\101\1\65\1\0\1\65\1\0\1\45\1\0\1\3"+
    "\1\102\2\3\1\103\1\104\10\3\1\105\2\3\1\106"+
    "\10\3\1\107\1\110\2\3\1\111\1\112\1\3\1\113"+
    "\1\3\3\0\1\53\1\0\1\114\1\60\5\0\1\101"+
    "\1\0\1\115\1\65\1\0\1\3\1\0\1\3\1\116"+
    "\1\117\2\3\1\120\1\121\1\3\1\122\2\3\1\123"+
    "\1\124\7\3\1\125\1\126\1\127\1\130\1\131\4\0"+
    "\1\132\3\0\1\115\1\0\1\3\2\0\2\3\1\133"+
    "\4\3\1\134\1\135\4\3\1\136\1\137\1\0\1\27"+
    "\2\0\1\3\2\0\2\3\1\140\1\141\1\142\2\3"+
    "\1\143\1\144\1\3\3\0\1\145\2\0\2\3\1\146"+
    "\1\147\1\3\4\0\2\3\1\150\1\0\1\151\1\0"+
    "\1\151\1\3";

  private static int [] zzUnpackAction() {
    int [] result = new int[452];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\120\0\240\0\360\0\u0140\0\u0190\0\u01e0\0\u0230"+
    "\0\u0280\0\u02d0\0\u0320\0\u0320\0\u0370\0\u03c0\0\u0410\0\u03c0"+
    "\0\u0460\0\u04b0\0\u0500\0\u0320\0\u0320\0\u0550\0\u05a0\0\u05f0"+
    "\0\u0640\0\u03c0\0\u0320\0\u0690\0\u06e0\0\u0730\0\u0780\0\u03c0"+
    "\0\u07d0\0\u0320\0\u0320\0\u07d0\0\u0820\0\u0870\0\u08c0\0\u0910"+
    "\0\u0960\0\u09b0\0\u0a00\0\u0a50\0\u0aa0\0\u0af0\0\u0b40\0\u0b90"+
    "\0\u0be0\0\u0c30\0\u0c80\0\u0cd0\0\u0d20\0\u0d70\0\u0dc0\0\u0e10"+
    "\0\u0320\0\u03c0\0\u03c0\0\u0e60\0\u0eb0\0\u0f00\0\u0320\0\u0f50"+
    "\0\u0320\0\u0fa0\0\u0ff0\0\u1040\0\u1090\0\u10e0\0\u0320\0\u1130"+
    "\0\u1130\0\u1180\0\u11d0\0\u1220\0\u1270\0\u12c0\0\u1310\0\u1360"+
    "\0\u13b0\0\u1400\0\u1450\0\u14a0\0\u14f0\0\u1540\0\u1590\0\u15e0"+
    "\0\u1630\0\u1680\0\u16d0\0\u1720\0\u1770\0\u0320\0\u17c0\0\u1810"+
    "\0\u1810\0\u1860\0\u18b0\0\u17c0\0\u1900\0\u1950\0\u19a0\0\u19f0"+
    "\0\u1a40\0\u1a90\0\u1ae0\0\u0320\0\u1b30\0\u0320\0\u0320\0\u1b80"+
    "\0\u1bd0\0\u0320\0\u03c0\0\u03c0\0\u1c20\0\u1c70\0\u03c0\0\u1cc0"+
    "\0\u0820\0\u1d10\0\u0320\0\u1d60\0\u1db0\0\u1e00\0\u1e50\0\u07d0"+
    "\0\u1ea0\0\u1ef0\0\u1f40\0\u1f90\0\u1fe0\0\u2030\0\u2080\0\u07d0"+
    "\0\u20d0\0\u2120\0\u2170\0\u21c0\0\u2210\0\u2260\0\u22b0\0\u2300"+
    "\0\u2350\0\u23a0\0\u23f0\0\u2440\0\u2490\0\u24e0\0\u2530\0\u2580"+
    "\0\u25d0\0\u2620\0\u2670\0\u26c0\0\u2710\0\u2760\0\u27b0\0\u0f50"+
    "\0\u2800\0\u2800\0\u2850\0\u2850\0\u28a0\0\u0320\0\u0320\0\u28f0"+
    "\0\u2940\0\u2990\0\u0320\0\u29e0\0\u29e0\0\u2a30\0\u2a30\0\u2a80"+
    "\0\u0320\0\u2ad0\0\u11d0\0\u2b20\0\u0320\0\u2b70\0\u2bc0\0\u2c10"+
    "\0\u2c60\0\u2cb0\0\u2d00\0\u2d50\0\u2da0\0\u0320\0\u2df0\0\u2e40"+
    "\0\u0320\0\u2e90\0\u2ee0\0\u2f30\0\u2f80\0\u2fd0\0\u0320\0\u3020"+
    "\0\u3070\0\u30c0\0\u0320\0\u3110\0\u3160\0\u31b0\0\u3200\0\u0320"+
    "\0\u3250\0\u32a0\0\u32f0\0\u3340\0\u3390\0\u3390\0\u33e0\0\u3430"+
    "\0\u3480\0\u34d0\0\u3520\0\u3570\0\u35c0\0\u3610\0\u3660\0\u03c0"+
    "\0\u03c0\0\u0820\0\u36b0\0\u3700\0\u3750\0\u37a0\0\u07d0\0\u37f0"+
    "\0\u3840\0\u3890\0\u38e0\0\u3930\0\u3980\0\u39d0\0\u3a20\0\u3a70"+
    "\0\u3ac0\0\u3b10\0\u3b60\0\u07d0\0\u3bb0\0\u3c00\0\u3c50\0\u3ca0"+
    "\0\u3cf0\0\u3d40\0\u3d90\0\u3de0\0\u3e30\0\u3e80\0\u3ed0\0\u3f20"+
    "\0\u3f70\0\u3fc0\0\u07d0\0\u4010\0\u07d0\0\u07d0\0\u4060\0\u40b0"+
    "\0\u4100\0\u4150\0\u0320\0\u41a0\0\u41f0\0\u4240\0\u4290\0\u0320"+
    "\0\u42e0\0\u28f0\0\u4330\0\u4380\0\u0320\0\u43d0\0\u4420\0\u0320"+
    "\0\u11d0\0\u4470\0\u44c0\0\u4510\0\u1360\0\u2d50\0\u2da0\0\u4560"+
    "\0\u45b0\0\u4600\0\u4650\0\u46a0\0\u46f0\0\u4740\0\u4790\0\u47e0"+
    "\0\u4830\0\u4880\0\u03c0\0\u48d0\0\u4920\0\u0320\0\u4970\0\u03c0"+
    "\0\u49c0\0\u4a10\0\u4a60\0\u4ab0\0\u4b00\0\u07d0\0\u07d0\0\u4b50"+
    "\0\u4ba0\0\u4bf0\0\u4c40\0\u4c90\0\u4ce0\0\u4d30\0\u4d80\0\u07d0"+
    "\0\u4dd0\0\u4e20\0\u07d0\0\u4e70\0\u4ec0\0\u4f10\0\u4f60\0\u4fb0"+
    "\0\u5000\0\u5050\0\u50a0\0\u07d0\0\u07d0\0\u50f0\0\u5140\0\u07d0"+
    "\0\u07d0\0\u5190\0\u07d0\0\u51e0\0\u5230\0\u5280\0\u52d0\0\u28a0"+
    "\0\u5320\0\u4380\0\u2a80\0\u5370\0\u53c0\0\u5410\0\u5460\0\u54b0"+
    "\0\u0320\0\u5500\0\u03c0\0\u3480\0\u5550\0\u55a0\0\u55f0\0\u5640"+
    "\0\u07d0\0\u07d0\0\u5690\0\u56e0\0\u07d0\0\u5730\0\u5780\0\u07d0"+
    "\0\u57d0\0\u5820\0\u07d0\0\u07d0\0\u5870\0\u58c0\0\u5910\0\u5960"+
    "\0\u59b0\0\u5a00\0\u5a50\0\u07d0\0\u07d0\0\u07d0\0\u07d0\0\u07d0"+
    "\0\u5aa0\0\u5af0\0\u5b40\0\u2c60\0\u5b90\0\u5be0\0\u5c30\0\u5c80"+
    "\0\u0320\0\u5cd0\0\u5d20\0\u5d70\0\u5dc0\0\u5e10\0\u5e60\0\u07d0"+
    "\0\u5eb0\0\u5f00\0\u5f50\0\u5fa0\0\u07d0\0\u07d0\0\u5ff0\0\u6040"+
    "\0\u6090\0\u60e0\0\u07d0\0\u07d0\0\u6130\0\u0320\0\u6180\0\u61d0"+
    "\0\u6220\0\u6270\0\u62c0\0\u6310\0\u6360\0\u07d0\0\u07d0\0\u07d0"+
    "\0\u63b0\0\u6400\0\u07d0\0\u07d0\0\u6450\0\u64a0\0\u64f0\0\u6540"+
    "\0\u07d0\0\u6590\0\u65e0\0\u6630\0\u6680\0\u07d0\0\u07d0\0\u66d0"+
    "\0\u6720\0\u6770\0\u67c0\0\u6810\0\u6860\0\u68b0\0\u07d0\0\u6900"+
    "\0\u0320\0\u6950\0\u07d0\0\u69a0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[452];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\13\1\14\1\15\1\0\1\15\1\13\1\16\1\17"+
    "\1\20\1\21\2\16\1\22\1\23\1\24\2\16\1\25"+
    "\1\16\1\26\1\27\1\30\4\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\13\41\1\42\1\16\1\43"+
    "\1\44\1\45\1\46\1\41\1\47\1\50\1\51\1\52"+
    "\1\53\1\41\1\54\2\41\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\1\64\1\41\1\65\1\66\1\41"+
    "\1\67\1\41\1\70\1\71\2\15\1\72\1\73\1\13"+
    "\1\14\1\15\1\0\1\15\1\13\1\16\1\17\1\20"+
    "\1\21\2\16\1\22\1\23\1\24\2\16\1\25\1\16"+
    "\1\26\1\27\1\30\4\31\1\32\1\33\1\74\1\35"+
    "\1\36\1\37\1\40\13\41\1\42\1\16\1\43\1\44"+
    "\1\45\1\46\1\41\1\47\1\50\1\51\1\52\1\53"+
    "\1\41\1\54\2\41\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\1\41\1\65\1\66\1\41\1\67"+
    "\1\41\1\70\1\71\2\15\1\72\1\73\7\0\1\75"+
    "\110\0\2\76\1\77\1\76\1\100\2\76\1\101\1\76"+
    "\1\102\43\76\1\103\42\76\7\104\1\105\1\104\1\106"+
    "\106\104\6\107\1\110\1\107\1\111\1\112\2\110\3\107"+
    "\2\110\1\107\1\110\1\107\1\110\5\107\1\111\1\107"+
    "\4\110\1\111\13\112\1\107\1\110\1\107\1\112\1\113"+
    "\31\112\4\107\2\110\11\0\1\114\27\0\13\114\3\0"+
    "\1\114\1\0\31\114\6\0\2\115\1\116\1\115\1\116"+
    "\2\115\1\117\1\115\1\120\43\115\1\121\42\115\25\0"+
    "\1\122\4\123\66\0\1\124\5\0\1\125\1\0\1\126"+
    "\1\127\2\125\3\0\2\125\1\0\1\125\1\0\1\125"+
    "\5\124\1\126\1\0\4\125\1\126\13\127\1\0\1\125"+
    "\1\0\1\127\1\130\31\127\2\0\1\124\1\0\2\125"+
    "\121\0\2\15\1\0\1\15\107\0\2\15\10\0\1\16"+
    "\1\0\1\16\1\0\2\16\3\0\2\16\1\0\1\16"+
    "\1\0\1\16\5\0\1\16\1\0\5\16\14\0\1\16"+
    "\40\0\2\16\2\131\1\0\1\131\1\0\2\131\1\132"+
    "\45\131\1\133\42\131\1\41\6\0\1\134\1\0\1\41"+
    "\13\0\5\41\7\0\13\41\3\0\1\135\1\0\31\41"+
    "\1\136\1\0\1\41\3\0\2\137\1\0\1\137\1\0"+
    "\1\137\1\140\1\137\1\141\1\142\2\140\1\143\2\137"+
    "\2\140\1\137\1\140\1\137\1\140\5\137\1\141\1\137"+
    "\4\140\1\141\13\142\1\144\1\145\1\137\1\142\1\137"+
    "\31\142\1\144\3\137\2\140\34\0\1\146\110\0\5\147"+
    "\74\0\1\16\1\0\1\16\1\0\2\16\3\0\1\150"+
    "\1\16\1\0\1\16\1\0\1\151\5\0\1\16\1\0"+
    "\5\16\14\0\1\16\40\0\2\16\23\0\1\152\1\0"+
    "\5\31\10\0\1\153\1\0\1\154\1\155\1\156\1\0"+
    "\1\157\2\0\1\160\3\0\1\31\2\0\1\153\1\0"+
    "\1\154\1\155\1\156\5\0\1\157\12\0\1\160\33\0"+
    "\1\152\1\0\5\31\12\0\1\154\1\155\1\156\1\0"+
    "\1\157\6\0\1\31\4\0\1\154\1\155\1\156\5\0"+
    "\1\157\31\0\1\161\1\0\1\16\1\162\1\163\1\16"+
    "\3\0\2\16\1\0\1\72\1\0\1\16\5\0\1\164"+
    "\1\0\3\16\1\165\1\16\13\162\1\0\1\16\1\0"+
    "\1\162\1\0\31\162\4\0\2\16\6\0\1\16\1\0"+
    "\1\16\1\0\2\16\3\0\2\16\1\0\1\16\1\0"+
    "\1\16\5\0\1\16\1\0\2\16\1\166\2\16\14\0"+
    "\1\16\40\0\2\16\6\0\1\16\1\0\1\16\1\0"+
    "\2\16\3\0\2\16\1\0\1\16\1\0\1\16\5\0"+
    "\1\167\1\0\5\16\14\0\1\16\40\0\2\16\6\0"+
    "\1\16\1\0\1\16\1\0\2\16\3\0\2\16\1\0"+
    "\1\16\1\0\1\16\5\0\1\16\1\0\1\16\1\170"+
    "\3\16\14\0\1\16\40\0\2\16\1\41\6\0\1\134"+
    "\1\0\1\41\13\0\5\41\7\0\13\41\3\0\1\135"+
    "\1\0\31\41\2\0\1\41\3\0\2\171\1\0\1\171"+
    "\1\0\50\171\1\172\2\171\1\173\33\171\2\0\2\171"+
    "\1\41\6\0\1\134\1\0\1\41\13\0\5\41\7\0"+
    "\13\41\3\0\1\135\1\0\1\41\1\174\27\41\2\0"+
    "\1\41\3\0\1\41\6\0\1\134\1\0\1\41\13\0"+
    "\5\41\7\0\13\41\3\0\1\135\1\0\1\175\12\41"+
    "\1\176\15\41\2\0\1\41\3\0\1\41\6\0\1\134"+
    "\1\0\1\41\13\0\5\41\7\0\13\41\3\0\1\135"+
    "\1\0\4\41\1\177\11\41\1\200\12\41\2\0\1\41"+
    "\3\0\1\41\6\0\1\134\1\0\1\41\13\0\5\41"+
    "\7\0\13\41\3\0\1\135\1\0\13\41\1\201\1\41"+
    "\1\202\10\41\1\203\2\41\2\0\1\41\3\0\1\41"+
    "\6\0\1\134\1\0\1\41\13\0\5\41\7\0\13\41"+
    "\3\0\1\135\1\0\1\204\7\41\1\205\5\41\1\206"+
    "\12\41\2\0\1\41\3\0\1\41\6\0\1\134\1\0"+
    "\1\41\13\0\5\41\7\0\13\41\3\0\1\135\1\0"+
    "\10\41\1\207\20\41\2\0\1\41\3\0\1\41\6\0"+
    "\1\134\1\0\1\41\13\0\5\41\7\0\13\41\3\0"+
    "\1\135\1\0\5\41\1\210\6\41\1\211\14\41\2\0"+
    "\1\41\3\0\1\41\6\0\1\134\1\0\1\41\13\0"+
    "\5\41\7\0\13\41\3\0\1\135\1\0\1\212\30\41"+
    "\2\0\1\41\3\0\1\41\6\0\1\134\1\0\1\41"+
    "\13\0\5\41\7\0\13\41\3\0\1\135\1\0\1\213"+
    "\30\41\2\0\1\41\3\0\1\41\6\0\1\134\1\0"+
    "\1\41\13\0\5\41\7\0\13\41\3\0\1\135\1\0"+
    "\4\41\1\214\16\41\1\215\5\41\2\0\1\41\3\0"+
    "\1\41\6\0\1\134\1\0\1\41\13\0\5\41\7\0"+
    "\13\41\3\0\1\135\1\0\1\41\1\216\22\41\1\217"+
    "\4\41\2\0\1\41\3\0\1\41\6\0\1\134\1\0"+
    "\1\41\13\0\5\41\7\0\13\41\3\0\1\135\1\0"+
    "\1\220\17\41\1\221\10\41\2\0\1\41\3\0\1\41"+
    "\6\0\1\134\1\0\1\41\13\0\5\41\7\0\13\41"+
    "\3\0\1\135\1\0\4\41\1\222\24\41\2\0\1\41"+
    "\3\0\1\41\6\0\1\134\1\0\1\41\13\0\5\41"+
    "\7\0\13\41\3\0\1\135\1\0\4\41\1\223\16\41"+
    "\1\224\5\41\2\0\1\41\3\0\1\41\6\0\1\134"+
    "\1\0\1\41\13\0\5\41\7\0\13\41\3\0\1\135"+
    "\1\0\7\41\1\225\10\41\1\226\6\41\1\227\1\41"+
    "\2\0\1\41\3\0\1\41\6\0\1\134\1\0\1\41"+
    "\13\0\5\41\7\0\13\41\3\0\1\135\1\0\1\230"+
    "\30\41\2\0\1\41\3\0\1\41\6\0\1\134\1\0"+
    "\1\41\13\0\5\41\7\0\13\41\3\0\1\135\1\0"+
    "\7\41\1\231\1\232\20\41\2\0\1\41\3\0\1\41"+
    "\6\0\1\134\1\0\1\41\13\0\5\41\7\0\13\41"+
    "\3\0\1\135\1\0\10\41\1\233\20\41\2\0\1\41"+
    "\37\0\1\234\71\0\1\16\1\0\1\16\1\0\1\163"+
    "\1\16\3\0\2\16\1\0\1\72\1\0\1\16\5\0"+
    "\1\164\1\0\5\16\14\0\1\16\40\0\2\16\2\235"+
    "\1\0\1\235\1\0\2\235\1\236\1\235\1\0\43\235"+
    "\1\237\42\235\2\76\1\0\1\76\1\0\2\76\1\0"+
    "\1\76\1\0\43\76\1\0\42\76\2\0\1\77\1\0"+
    "\1\240\121\0\1\241\1\0\1\242\1\243\2\241\3\0"+
    "\2\241\1\0\1\241\1\0\1\241\5\0\1\242\1\0"+
    "\4\241\1\242\13\244\1\0\1\241\1\0\1\244\1\245"+
    "\31\244\1\246\3\0\2\241\2\247\1\0\1\247\1\0"+
    "\77\247\1\250\13\247\7\104\1\251\1\104\1\0\115\104"+
    "\1\252\1\104\1\253\106\104\6\0\1\254\1\0\1\255"+
    "\1\256\2\254\3\0\2\254\1\0\1\254\1\0\1\254"+
    "\5\0\1\255\1\0\4\254\1\255\13\257\1\0\1\254"+
    "\1\0\1\257\1\260\31\257\1\261\3\0\2\254\6\0"+
    "\1\110\1\0\1\110\1\0\2\110\3\0\2\110\1\0"+
    "\1\110\1\0\1\110\5\0\1\110\1\0\5\110\14\0"+
    "\1\110\40\0\2\110\1\112\10\0\1\112\13\0\5\112"+
    "\7\0\13\112\3\0\1\262\1\0\31\112\2\0\1\112"+
    "\3\0\2\263\1\0\1\263\1\0\50\263\1\264\2\263"+
    "\1\265\33\263\2\0\2\263\1\114\10\0\1\114\13\0"+
    "\5\114\7\0\13\114\3\0\1\266\1\0\31\114\2\0"+
    "\1\114\3\0\2\115\1\116\1\115\1\116\2\115\1\267"+
    "\1\115\1\120\106\115\7\116\1\270\1\116\1\0\106\116"+
    "\7\0\1\271\45\0\1\272\117\0\1\272\42\0\7\116"+
    "\1\270\1\116\1\0\43\116\1\273\42\116\25\0\5\123"+
    "\10\0\1\274\10\0\1\275\3\0\1\123\2\0\1\274"+
    "\24\0\1\275\35\0\5\123\25\0\1\123\40\0\1\124"+
    "\10\0\1\127\13\0\5\124\7\0\13\127\3\0\1\127"+
    "\1\0\31\127\2\0\1\124\11\0\1\125\1\0\1\125"+
    "\1\0\2\125\3\0\2\125\1\0\1\125\1\276\1\125"+
    "\5\0\1\125\1\0\5\125\14\0\1\125\1\0\1\124"+
    "\36\0\2\125\6\0\1\125\1\0\1\125\1\0\2\125"+
    "\3\0\2\125\1\0\1\125\1\0\1\125\5\0\1\125"+
    "\1\0\5\125\14\0\1\125\1\0\1\124\36\0\2\125"+
    "\1\124\10\0\1\127\11\0\1\276\1\0\5\124\7\0"+
    "\13\127\3\0\1\127\1\0\31\127\2\0\1\124\3\0"+
    "\2\130\1\0\1\130\1\0\53\130\1\277\33\130\2\300"+
    "\2\130\2\131\1\0\1\131\1\0\2\131\1\301\45\131"+
    "\1\133\42\131\7\0\1\302\110\0\2\131\1\0\1\131"+
    "\1\0\113\131\2\303\1\0\1\303\1\0\2\303\1\304"+
    "\1\303\1\0\43\303\1\305\42\303\1\41\5\0\1\306"+
    "\1\134\1\306\1\41\2\306\3\0\2\306\1\0\1\306"+
    "\1\0\1\306\5\41\1\306\1\0\5\306\13\41\1\0"+
    "\1\306\1\0\1\135\1\0\31\41\2\0\1\41\1\0"+
    "\2\306\14\0\1\307\40\0\1\307\50\0\1\310\1\0"+
    "\1\310\1\0\2\310\1\307\2\0\2\310\1\0\1\310"+
    "\1\0\1\310\5\0\1\310\1\0\5\310\14\0\1\310"+
    "\40\0\2\310\1\311\10\0\1\311\2\0\1\307\10\0"+
    "\5\311\7\0\13\311\1\0\1\307\1\0\1\312\1\0"+
    "\31\311\2\0\1\311\3\0\14\313\1\307\103\313\2\137"+
    "\1\0\1\137\1\0\1\137\1\140\1\137\1\140\1\137"+
    "\2\140\3\137\2\140\1\137\1\140\1\137\1\140\3\314"+
    "\1\315\1\137\1\140\1\137\5\140\14\137\1\140\26\137"+
    "\1\316\11\137\2\140\6\0\1\317\2\0\1\320\25\0"+
    "\1\321\1\0\13\320\3\0\1\320\1\0\31\320\33\0"+
    "\5\147\12\0\1\154\1\155\1\156\10\0\1\147\4\0"+
    "\1\154\1\155\1\156\31\0\6\322\1\323\1\322\1\323"+
    "\1\322\2\323\3\322\1\324\1\323\1\322\1\323\1\322"+
    "\1\16\5\322\1\323\1\322\5\323\14\322\1\323\40\322"+
    "\2\323\2\151\1\0\1\151\1\0\113\151\6\0\1\325"+
    "\1\0\1\326\1\327\2\325\3\0\2\325\1\0\1\325"+
    "\1\0\1\325\5\147\1\326\1\0\4\325\1\326\4\327"+
    "\1\330\6\327\1\0\1\325\1\0\1\327\1\331\4\327"+
    "\1\330\24\327\4\0\2\325\25\0\2\332\30\0\1\332"+
    "\60\0\1\333\1\0\1\333\2\0\5\334\113\0\5\335"+
    "\7\0\6\335\10\0\1\335\1\0\6\335\37\0\1\16"+
    "\1\0\1\16\1\0\2\16\3\0\2\16\1\0\1\336"+
    "\1\0\1\16\5\0\1\16\1\0\5\16\13\0\1\337"+
    "\1\16\40\0\2\16\6\0\1\16\1\0\1\16\1\162"+
    "\2\16\3\0\2\16\1\0\1\16\1\0\1\16\5\0"+
    "\1\16\1\0\5\16\13\162\1\0\1\16\1\0\1\162"+
    "\1\0\31\162\4\0\2\16\6\0\1\16\1\0\1\16"+
    "\1\0\2\16\3\0\2\16\1\0\1\16\1\0\1\16"+
    "\5\0\1\16\1\0\2\16\1\340\2\16\14\0\1\16"+
    "\40\0\2\16\6\0\1\16\1\0\1\16\1\0\2\16"+
    "\3\0\2\16\1\0\1\16\1\0\1\16\5\0\1\16"+
    "\1\0\2\16\1\341\2\16\14\0\1\16\40\0\2\16"+
    "\2\171\1\0\1\171\1\0\50\171\1\172\2\171\1\342"+
    "\37\171\1\41\6\0\1\134\1\0\1\41\13\0\5\41"+
    "\7\0\13\41\3\0\1\135\1\0\21\41\1\343\7\41"+
    "\2\0\1\41\3\0\1\41\6\0\1\134\1\0\1\41"+
    "\13\0\5\41\7\0\13\41\3\0\1\135\1\0\21\41"+
    "\1\344\1\345\6\41\2\0\1\41\3\0\1\41\6\0"+
    "\1\134\1\0\1\41\13\0\5\41\7\0\13\41\3\0"+
    "\1\135\1\0\1\346\30\41\2\0\1\41\3\0\1\41"+
    "\6\0\1\134\1\0\1\41\13\0\5\41\7\0\13\41"+
    "\3\0\1\135\1\0\5\41\1\347\23\41\2\0\1\41"+
    "\3\0\1\41\6\0\1\134\1\0\1\41\13\0\5\41"+
    "\7\0\13\41\3\0\1\135\1\0\21\41\1\350\7\41"+
    "\2\0\1\41\3\0\1\41\6\0\1\134\1\0\1\41"+
    "\13\0\5\41\7\0\13\41\3\0\1\135\1\0\23\41"+
    "\1\351\5\41\2\0\1\41\3\0\1\41\6\0\1\134"+
    "\1\0\1\41\13\0\5\41\7\0\13\41\3\0\1\135"+
    "\1\0\17\41\1\352\2\41\1\353\6\41\2\0\1\41"+
    "\3\0\1\41\6\0\1\134\1\0\1\41\13\0\5\41"+
    "\7\0\13\41\3\0\1\135\1\0\13\41\1\354\15\41"+
    "\2\0\1\41\3\0\1\41\6\0\1\134\1\0\1\41"+
    "\13\0\5\41\7\0\13\41\3\0\1\135\1\0\15\41"+
    "\1\355\13\41\2\0\1\41\3\0\1\41\6\0\1\134"+
    "\1\0\1\41\13\0\5\41\7\0\13\41\3\0\1\135"+
    "\1\0\20\41\1\356\10\41\2\0\1\41\3\0\1\41"+
    "\6\0\1\134\1\0\1\41\13\0\5\41\7\0\13\41"+
    "\3\0\1\135\1\0\24\41\1\357\4\41\2\0\1\41"+
    "\3\0\1\41\6\0\1\134\1\0\1\41\13\0\5\41"+
    "\7\0\13\41\3\0\1\135\1\0\17\41\1\360\11\41"+
    "\2\0\1\41\3\0\1\41\6\0\1\134\1\0\1\41"+
    "\13\0\5\41\7\0\13\41\3\0\1\135\1\0\30\41"+
    "\1\361\2\0\1\41\3\0\1\41\6\0\1\134\1\0"+
    "\1\41\13\0\5\41\7\0\13\41\3\0\1\135\1\0"+
    "\2\41\1\362\17\41\1\363\6\41\2\0\1\41\3\0"+
    "\1\41\6\0\1\134\1\0\1\41\13\0\5\41\7\0"+
    "\13\41\3\0\1\135\1\0\25\41\1\364\3\41\2\0"+
    "\1\41\3\0\1\41\6\0\1\134\1\0\1\41\13\0"+
    "\5\41\7\0\13\41\3\0\1\135\1\0\13\41\1\365"+
    "\15\41\2\0\1\41\3\0\1\41\6\0\1\134\1\0"+
    "\1\41\13\0\5\41\7\0\13\41\3\0\1\135\1\0"+
    "\11\41\1\366\17\41\2\0\1\41\3\0\1\41\6\0"+
    "\1\134\1\0\1\41\13\0\5\41\7\0\13\41\3\0"+
    "\1\135\1\0\4\41\1\367\24\41\2\0\1\41\3\0"+
    "\1\41\6\0\1\134\1\0\1\41\13\0\5\41\7\0"+
    "\13\41\3\0\1\135\1\0\2\41\1\370\26\41\2\0"+
    "\1\41\3\0\1\41\6\0\1\134\1\0\1\41\13\0"+
    "\5\41\7\0\13\41\3\0\1\135\1\0\10\41\1\371"+
    "\5\41\1\372\12\41\2\0\1\41\3\0\1\41\6\0"+
    "\1\134\1\0\1\41\13\0\5\41\7\0\13\41\3\0"+
    "\1\135\1\0\22\41\1\373\6\41\2\0\1\41\3\0"+
    "\1\41\6\0\1\134\1\0\1\41\13\0\5\41\7\0"+
    "\13\41\3\0\1\135\1\0\1\374\30\41\2\0\1\41"+
    "\3\0\1\41\6\0\1\134\1\0\1\41\13\0\5\41"+
    "\7\0\13\41\3\0\1\135\1\0\17\41\1\375\11\41"+
    "\2\0\1\41\3\0\1\41\6\0\1\134\1\0\1\41"+
    "\13\0\5\41\7\0\13\41\3\0\1\135\1\0\4\41"+
    "\1\376\3\41\1\377\7\41\1\u0100\10\41\2\0\1\41"+
    "\3\0\1\41\6\0\1\134\1\0\1\41\13\0\5\41"+
    "\7\0\13\41\3\0\1\135\1\0\1\u0101\22\41\1\u0102"+
    "\3\41\1\u0103\1\41\2\0\1\41\3\0\1\41\6\0"+
    "\1\134\1\0\1\41\13\0\5\41\7\0\13\41\3\0"+
    "\1\135\1\0\17\41\1\u0104\11\41\2\0\1\41\3\0"+
    "\1\41\6\0\1\134\1\0\1\41\13\0\5\41\7\0"+
    "\13\41\3\0\1\135\1\0\13\41\1\u0105\4\41\1\u0106"+
    "\10\41\2\0\1\41\3\0\1\41\6\0\1\134\1\0"+
    "\1\41\13\0\5\41\7\0\13\41\3\0\1\135\1\0"+
    "\10\41\1\u0107\20\41\2\0\1\41\3\0\1\41\6\0"+
    "\1\134\1\0\1\41\13\0\5\41\7\0\13\41\3\0"+
    "\1\135\1\0\22\41\1\u0108\6\41\2\0\1\41\3\0"+
    "\1\41\6\0\1\134\1\0\1\41\13\0\5\41\7\0"+
    "\13\41\3\0\1\135\1\0\4\41\1\u0109\24\41\2\0"+
    "\1\41\11\0\1\u010a\2\0\1\u010b\25\0\1\u010c\1\0"+
    "\13\u010b\3\0\1\u010b\1\0\31\u010b\6\0\2\235\1\0"+
    "\1\235\1\0\2\235\1\0\1\235\1\0\43\235\1\237"+
    "\42\235\7\0\1\u010d\110\0\2\235\1\0\1\235\1\0"+
    "\113\235\6\0\1\241\1\0\1\241\1\0\2\241\3\0"+
    "\2\241\1\0\1\241\1\0\1\241\5\0\1\241\1\0"+
    "\5\241\14\0\1\241\40\0\2\241\1\244\10\0\1\244"+
    "\13\0\5\244\7\0\13\244\3\0\1\u010e\1\0\31\244"+
    "\2\0\1\244\3\0\2\245\1\0\1\245\1\0\50\245"+
    "\1\u010f\2\245\1\u0110\33\245\2\0\2\245\25\0\5\u0111"+
    "\7\0\6\u0111\12\0\6\u0111\15\0\1\u0112\13\0\7\104"+
    "\1\u0113\1\104\1\0\115\104\1\u0114\1\104\1\u0115\106\104"+
    "\6\0\1\254\1\0\1\254\1\0\2\254\3\0\2\254"+
    "\1\0\1\254\1\0\1\254\5\0\1\254\1\0\5\254"+
    "\14\0\1\254\40\0\2\254\1\257\10\0\1\257\13\0"+
    "\5\257\7\0\13\257\3\0\1\u0116\1\0\31\257\2\0"+
    "\1\257\3\0\2\260\1\0\1\260\1\0\50\260\1\u0117"+
    "\2\260\1\u0118\33\260\2\0\2\260\1\112\5\0\1\110"+
    "\1\0\1\110\1\112\2\110\3\0\2\110\1\0\1\110"+
    "\1\0\1\110\5\112\1\110\1\0\5\110\13\112\1\0"+
    "\1\110\1\0\1\262\1\0\31\112\2\0\1\112\1\0"+
    "\2\110\2\263\1\0\1\263\1\0\50\263\1\264\2\263"+
    "\1\u0119\37\263\1\114\5\0\1\u011a\1\0\1\u011a\1\114"+
    "\2\u011a\3\0\2\u011a\1\0\1\u011a\1\0\1\u011a\5\114"+
    "\1\u011a\1\0\5\u011a\13\114\1\0\1\u011a\1\0\1\266"+
    "\1\0\31\114\2\0\1\114\1\0\2\u011a\7\116\1\u011b"+
    "\1\116\1\0\43\116\1\273\51\116\1\u011b\1\116\1\0"+
    "\106\116\7\0\1\276\110\0\2\u011c\1\0\1\u011c\1\0"+
    "\2\u011c\1\u011d\1\u011c\1\120\43\u011c\1\120\42\u011c\2\115"+
    "\1\116\1\115\1\116\2\115\1\267\1\115\1\120\43\115"+
    "\1\121\42\115\25\0\2\u011e\30\0\1\u011e\65\0\5\u011f"+
    "\7\0\6\u011f\10\0\1\u011f\1\0\6\u011f\54\0\1\276"+
    "\31\0\1\130\117\0\1\130\42\0\7\302\1\u0120\110\302"+
    "\2\303\1\0\1\303\1\0\2\303\1\0\1\303\1\0"+
    "\43\303\1\305\42\303\7\0\1\u0121\110\0\2\303\1\0"+
    "\1\303\1\0\113\303\6\0\1\306\1\134\1\306\1\0"+
    "\2\306\3\0\2\306\1\0\1\306\1\0\1\306\5\0"+
    "\1\306\1\0\5\306\14\0\1\306\40\0\2\306\6\0"+
    "\1\310\1\0\1\310\1\0\2\310\3\0\2\310\1\0"+
    "\1\310\1\0\1\310\5\0\1\310\1\0\5\310\14\0"+
    "\1\310\40\0\2\310\1\311\10\0\1\311\13\0\5\311"+
    "\7\0\13\311\3\0\1\312\1\0\31\311\2\0\1\311"+
    "\3\0\1\311\5\0\1\310\1\0\1\310\1\311\2\310"+
    "\3\0\2\310\1\0\1\310\1\0\1\310\5\311\1\310"+
    "\1\0\5\310\13\311\1\0\1\310\1\0\1\312\1\0"+
    "\31\311\2\0\1\311\1\0\2\310\14\0\1\307\10\0"+
    "\4\315\24\0\1\307\56\0\1\307\10\0\4\137\24\0"+
    "\1\307\56\0\1\307\10\0\5\u0122\7\0\6\u0122\6\0"+
    "\1\307\3\0\6\u0122\15\0\1\u0123\35\0\1\u0124\31\0"+
    "\1\u0125\54\0\1\320\27\0\13\320\3\0\1\320\1\0"+
    "\31\320\6\0\17\322\1\u0126\4\322\1\0\101\322\1\323"+
    "\1\322\1\323\1\322\2\323\3\322\1\u0127\1\323\1\322"+
    "\1\323\1\322\1\16\5\322\1\323\1\322\5\323\14\322"+
    "\1\323\40\322\2\323\6\u0128\1\u0129\1\u0128\1\u0129\1\u0128"+
    "\2\u0129\3\u0128\1\u012a\1\u0129\1\u0128\1\u0129\1\u0128\1\u012b"+
    "\5\u0128\1\u0129\1\u0128\5\u0129\14\u0128\1\u0129\40\u0128\2\u0129"+
    "\6\0\1\325\1\0\1\325\1\0\2\325\3\0\2\325"+
    "\1\0\1\325\1\0\1\325\5\0\1\325\1\0\5\325"+
    "\14\0\1\325\40\0\2\325\1\327\10\0\1\327\13\0"+
    "\5\327\7\0\13\327\3\0\1\u012c\1\0\31\327\2\0"+
    "\1\327\3\0\1\327\10\0\1\327\6\0\1\333\1\0"+
    "\1\333\2\0\5\327\7\0\13\327\3\0\1\u012c\1\0"+
    "\31\327\2\0\1\327\3\0\2\331\1\0\1\331\1\0"+
    "\50\331\1\u012d\2\331\1\u012e\33\331\2\0\2\331\23\0"+
    "\1\u012f\1\0\2\332\21\0\1\157\6\0\1\332\14\0"+
    "\1\157\50\0\5\334\113\0\5\334\12\0\1\154\1\0"+
    "\1\156\10\0\1\334\4\0\1\154\1\0\1\156\54\0"+
    "\1\u012f\1\0\5\335\7\0\6\335\1\0\1\157\6\0"+
    "\1\335\1\0\6\335\5\0\1\157\31\0\1\16\1\0"+
    "\1\16\1\0\2\16\3\0\2\16\1\0\1\u0130\1\0"+
    "\1\16\5\0\1\16\1\0\5\16\14\0\1\16\40\0"+
    "\2\16\43\0\1\u0131\54\0\1\41\6\0\1\134\1\0"+
    "\1\41\13\0\5\41\7\0\13\41\3\0\1\135\1\0"+
    "\22\41\1\u0132\6\41\2\0\1\41\3\0\1\41\6\0"+
    "\1\134\1\0\1\41\13\0\5\41\7\0\13\41\3\0"+
    "\1\135\1\0\4\41\1\u0133\24\41\2\0\1\41\3\0"+
    "\1\41\6\0\1\134\1\0\1\41\13\0\5\41\7\0"+
    "\13\41\3\0\1\135\1\0\2\41\1\u0134\26\41\2\0"+
    "\1\41\3\0\1\41\6\0\1\134\1\0\1\41\13\0"+
    "\5\41\7\0\13\41\3\0\1\135\1\0\21\41\1\u0135"+
    "\7\41\2\0\1\41\3\0\1\41\6\0\1\134\1\0"+
    "\1\41\13\0\5\41\7\0\13\41\3\0\1\135\1\0"+
    "\4\41\1\u0136\24\41\2\0\1\41\3\0\1\41\6\0"+
    "\1\134\1\0\1\41\13\0\5\41\7\0\13\41\3\0"+
    "\1\135\1\0\14\41\1\u0137\14\41\2\0\1\41\3\0"+
    "\1\41\6\0\1\134\1\0\1\41\13\0\5\41\7\0"+
    "\13\41\3\0\1\135\1\0\16\41\1\u0138\12\41\2\0"+
    "\1\41\3\0\1\41\6\0\1\134\1\0\1\41\13\0"+
    "\5\41\7\0\13\41\3\0\1\135\1\0\4\41\1\u0139"+
    "\24\41\2\0\1\41\3\0\1\41\6\0\1\134\1\0"+
    "\1\41\13\0\5\41\7\0\13\41\3\0\1\135\1\0"+
    "\21\41\1\u013a\7\41\2\0\1\41\3\0\1\41\6\0"+
    "\1\134\1\0\1\41\13\0\5\41\7\0\13\41\3\0"+
    "\1\135\1\0\1\u013b\30\41\2\0\1\41\3\0\1\41"+
    "\6\0\1\134\1\0\1\41\13\0\5\41\7\0\10\41"+
    "\1\u013c\2\41\3\0\1\135\1\0\31\41\2\0\1\41"+
    "\3\0\1\41\6\0\1\134\1\0\1\41\13\0\5\41"+
    "\7\0\13\41\3\0\1\135\1\0\4\41\1\u013d\24\41"+
    "\2\0\1\41\3\0\1\41\6\0\1\134\1\0\1\41"+
    "\13\0\5\41\7\0\13\41\3\0\1\135\1\0\13\41"+
    "\1\u013e\2\41\1\u013f\12\41\2\0\1\41\3\0\1\41"+
    "\6\0\1\134\1\0\1\41\13\0\5\41\7\0\13\41"+
    "\3\0\1\135\1\0\27\41\1\u0140\1\41\2\0\1\41"+
    "\3\0\1\41\6\0\1\134\1\0\1\41\13\0\5\41"+
    "\7\0\13\41\3\0\1\135\1\0\20\41\1\u0141\10\41"+
    "\2\0\1\41\3\0\1\41\6\0\1\134\1\0\1\41"+
    "\13\0\5\41\7\0\13\41\3\0\1\135\1\0\2\41"+
    "\1\u0142\26\41\2\0\1\41\3\0\1\41\6\0\1\134"+
    "\1\0\1\41\13\0\5\41\7\0\13\41\3\0\1\135"+
    "\1\0\13\41\1\u0143\15\41\2\0\1\41\3\0\1\41"+
    "\6\0\1\134\1\0\1\41\13\0\5\41\7\0\13\41"+
    "\3\0\1\135\1\0\4\41\1\u0144\24\41\2\0\1\41"+
    "\3\0\1\41\6\0\1\134\1\0\1\41\13\0\5\41"+
    "\7\0\13\41\3\0\1\135\1\0\20\41\1\u0145\10\41"+
    "\2\0\1\41\3\0\1\41\6\0\1\134\1\0\1\41"+
    "\13\0\5\41\7\0\13\41\3\0\1\135\1\0\12\41"+
    "\1\u0146\16\41\2\0\1\41\3\0\1\41\6\0\1\134"+
    "\1\0\1\41\13\0\5\41\7\0\13\41\3\0\1\135"+
    "\1\0\24\41\1\u0147\4\41\2\0\1\41\3\0\1\41"+
    "\6\0\1\134\1\0\1\41\13\0\5\41\7\0\13\41"+
    "\3\0\1\135\1\0\22\41\1\u0148\6\41\2\0\1\41"+
    "\3\0\1\41\6\0\1\134\1\0\1\41\13\0\5\41"+
    "\7\0\13\41\3\0\1\135\1\0\23\41\1\u0149\5\41"+
    "\2\0\1\41\3\0\1\41\6\0\1\134\1\0\1\41"+
    "\13\0\5\41\7\0\13\41\3\0\1\135\1\0\13\41"+
    "\1\u014a\15\41\2\0\1\41\3\0\1\41\6\0\1\134"+
    "\1\0\1\41\13\0\5\41\7\0\13\41\3\0\1\135"+
    "\1\0\4\41\1\u014b\24\41\2\0\1\41\3\0\1\41"+
    "\6\0\1\134\1\0\1\41\13\0\5\41\7\0\13\41"+
    "\3\0\1\135\1\0\15\41\1\u014c\13\41\2\0\1\41"+
    "\3\0\1\41\6\0\1\134\1\0\1\41\13\0\5\41"+
    "\7\0\13\41\3\0\1\135\1\0\21\41\1\u014d\7\41"+
    "\2\0\1\41\3\0\1\41\6\0\1\134\1\0\1\41"+
    "\13\0\5\41\7\0\13\41\3\0\1\135\1\0\16\41"+
    "\1\u014e\12\41\2\0\1\41\3\0\1\41\6\0\1\134"+
    "\1\0\1\41\13\0\5\41\7\0\13\41\3\0\1\135"+
    "\1\0\10\41\1\u014f\20\41\2\0\1\41\3\0\1\41"+
    "\6\0\1\134\1\0\1\41\13\0\5\41\7\0\13\41"+
    "\3\0\1\135\1\0\4\41\1\u0150\24\41\2\0\1\41"+
    "\3\0\1\41\6\0\1\134\1\0\1\41\13\0\5\41"+
    "\7\0\13\41\3\0\1\135\1\0\4\41\1\u0151\24\41"+
    "\2\0\1\41\3\0\1\41\6\0\1\134\1\0\1\41"+
    "\13\0\5\41\7\0\13\41\3\0\1\135\1\0\13\41"+
    "\1\u0152\15\41\2\0\1\41\3\0\1\41\6\0\1\134"+
    "\1\0\1\41\13\0\5\41\7\0\13\41\3\0\1\135"+
    "\1\0\7\41\1\u0153\21\41\2\0\1\41\3\0\1\41"+
    "\6\0\1\134\1\0\1\41\13\0\5\41\7\0\13\41"+
    "\3\0\1\135\1\0\13\41\1\u0154\15\41\2\0\1\41"+
    "\25\0\1\u0155\31\0\1\u0156\54\0\1\u010b\27\0\13\u010b"+
    "\3\0\1\u010b\1\0\31\u010b\6\0\7\u010d\1\u0157\1\u010d"+
    "\1\0\106\u010d\1\244\5\0\1\241\1\0\1\241\1\244"+
    "\2\241\3\0\2\241\1\0\1\241\1\0\1\241\5\244"+
    "\1\241\1\0\5\241\13\244\1\0\1\241\1\0\1\u010e"+
    "\1\0\31\244\2\0\1\244\1\0\2\241\2\245\1\0"+
    "\1\245\1\0\50\245\1\u010f\2\245\1\u0158\37\245\25\0"+
    "\5\u0159\7\0\6\u0159\12\0\6\u0159\31\0\7\104\1\0"+
    "\1\104\1\0\106\104\7\0\1\u015a\110\0\1\257\5\0"+
    "\1\254\1\0\1\254\1\257\2\254\3\0\2\254\1\0"+
    "\1\254\1\0\1\254\5\257\1\254\1\0\5\254\13\257"+
    "\1\0\1\254\1\0\1\u0116\1\0\31\257\2\0\1\257"+
    "\1\0\2\254\2\260\1\0\1\260\1\0\50\260\1\u0117"+
    "\2\260\1\u015b\37\260\6\0\1\u011a\1\0\1\u011a\1\0"+
    "\2\u011a\3\0\2\u011a\1\0\1\u011a\1\0\1\u011a\5\0"+
    "\1\u011a\1\0\5\u011a\14\0\1\u011a\40\0\2\u011a\7\116"+
    "\1\u015c\1\116\1\0\106\116\2\u011c\1\0\1\u011c\1\0"+
    "\2\u011c\1\u011d\1\u011c\1\120\106\u011c\7\302\1\u015d\110\302"+
    "\7\u0121\1\u015e\1\u0121\1\0\106\u0121\25\0\5\u015f\7\0"+
    "\6\u015f\12\0\6\u015f\56\0\5\u0122\7\0\6\u0122\12\0"+
    "\6\u0122\15\0\1\u0123\35\0\1\320\140\0\1\u0160\54\0"+
    "\17\322\1\u0126\4\322\1\u0161\101\322\1\323\1\322\1\323"+
    "\1\322\2\323\3\322\1\u0127\1\323\1\322\1\323\1\322"+
    "\1\u012b\5\322\1\323\1\322\5\323\14\322\1\323\40\322"+
    "\2\323\17\u0128\1\u0162\4\u0128\1\0\101\u0128\1\u0129\1\u0128"+
    "\1\u0129\1\u0128\2\u0129\3\u0128\1\u012a\1\u0129\1\u0128\1\u0129"+
    "\1\u0128\1\16\5\u0128\1\u0129\1\u0128\5\u0129\14\u0128\1\u0129"+
    "\40\u0128\2\u0129\6\u0128\1\u0129\1\u0128\1\u0129\1\u0128\2\u0129"+
    "\3\u0128\1\u012a\1\u0129\1\u0128\1\u0129\1\u0128\1\u0163\5\u0128"+
    "\1\u0129\1\u0128\5\u0129\14\u0128\1\u0129\40\u0128\2\u0129\1\327"+
    "\5\0\1\325\1\0\1\325\1\327\2\325\3\0\2\325"+
    "\1\0\1\325\1\0\1\325\5\327\1\325\1\0\5\325"+
    "\13\327\1\0\1\325\1\0\1\u012c\1\0\31\327\2\0"+
    "\1\327\1\0\2\325\2\331\1\0\1\331\1\0\50\331"+
    "\1\u012d\2\331\1\u0164\37\331\6\0\1\325\1\0\1\326"+
    "\1\327\2\325\3\0\2\325\1\0\1\325\1\0\1\325"+
    "\5\0\1\326\1\0\4\325\1\326\13\327\1\0\1\325"+
    "\1\0\1\327\1\331\31\327\4\0\2\325\44\0\1\u0165"+
    "\53\0\1\41\6\0\1\134\1\0\1\41\13\0\5\41"+
    "\7\0\13\41\3\0\1\135\1\0\20\41\1\u0166\10\41"+
    "\2\0\1\41\3\0\1\41\2\u0167\1\0\1\u0167\2\0"+
    "\1\134\1\0\1\41\13\0\5\41\7\0\13\41\3\0"+
    "\1\135\1\0\31\41\2\0\1\u0168\1\u0167\2\0\1\41"+
    "\6\0\1\134\1\0\1\41\13\0\5\41\7\0\13\41"+
    "\3\0\1\135\1\0\7\41\1\u0169\21\41\2\0\1\41"+
    "\3\0\1\41\6\0\1\134\1\0\1\41\13\0\5\41"+
    "\7\0\13\41\3\0\1\135\1\0\21\41\1\u016a\7\41"+
    "\2\0\1\41\3\0\1\41\6\0\1\134\1\0\1\41"+
    "\13\0\5\41\7\0\13\41\3\0\1\135\1\0\20\41"+
    "\1\u016b\10\41\2\0\1\41\3\0\1\41\6\0\1\134"+
    "\1\0\1\41\13\0\5\41\7\0\13\41\3\0\1\135"+
    "\1\0\15\41\1\u016c\13\41\2\0\1\41\3\0\1\41"+
    "\6\0\1\134\1\0\1\41\13\0\5\41\7\0\13\41"+
    "\3\0\1\135\1\0\4\41\1\u016d\24\41\2\0\1\41"+
    "\3\0\1\41\6\0\1\134\1\0\1\41\13\0\5\41"+
    "\7\0\13\41\3\0\1\135\1\0\13\41\1\u016e\15\41"+
    "\2\0\1\41\3\0\1\41\6\0\1\134\1\0\1\41"+
    "\13\0\5\41\7\0\13\41\3\0\1\135\1\0\16\41"+
    "\1\u016f\12\41\2\0\1\41\3\0\1\41\6\0\1\134"+
    "\1\0\1\41\13\0\5\41\7\0\13\41\3\0\1\135"+
    "\1\0\15\41\1\u0170\13\41\2\0\1\41\3\0\1\41"+
    "\6\0\1\134\1\0\1\41\13\0\5\41\7\0\13\41"+
    "\3\0\1\135\1\0\10\41\1\u0171\20\41\2\0\1\41"+
    "\3\0\1\41\6\0\1\134\1\0\1\41\13\0\5\41"+
    "\7\0\13\41\3\0\1\135\1\0\20\41\1\u0172\10\41"+
    "\2\0\1\41\3\0\1\41\6\0\1\134\1\0\1\41"+
    "\13\0\5\41\7\0\13\41\3\0\1\135\1\0\16\41"+
    "\1\u0173\12\41\2\0\1\41\3\0\1\41\6\0\1\134"+
    "\1\0\1\41\13\0\5\41\7\0\13\41\3\0\1\135"+
    "\1\0\7\41\1\u0174\21\41\2\0\1\41\3\0\1\41"+
    "\6\0\1\134\1\0\1\41\13\0\5\41\7\0\13\41"+
    "\3\0\1\135\1\0\2\41\1\u0175\26\41\2\0\1\41"+
    "\3\0\1\41\6\0\1\134\1\0\1\41\13\0\5\41"+
    "\7\0\13\41\3\0\1\135\1\0\20\41\1\u0176\10\41"+
    "\2\0\1\41\3\0\1\41\6\0\1\134\1\0\1\41"+
    "\13\0\5\41\7\0\13\41\3\0\1\135\1\0\1\u0177"+
    "\30\41\2\0\1\41\3\0\1\41\6\0\1\134\1\0"+
    "\1\41\13\0\5\41\7\0\13\41\3\0\1\135\1\0"+
    "\1\u0178\30\41\2\0\1\41\3\0\1\41\6\0\1\134"+
    "\1\0\1\41\13\0\5\41\7\0\13\41\3\0\1\135"+
    "\1\0\4\41\1\u0179\24\41\2\0\1\41\3\0\1\41"+
    "\6\0\1\134\1\0\1\41\13\0\5\41\7\0\13\41"+
    "\3\0\1\135\1\0\20\41\1\u017a\10\41\2\0\1\41"+
    "\3\0\1\41\6\0\1\134\1\0\1\41\13\0\5\41"+
    "\7\0\13\41\3\0\1\135\1\0\4\41\1\u017b\24\41"+
    "\2\0\1\41\3\0\1\41\6\0\1\134\1\0\1\41"+
    "\13\0\5\41\7\0\13\41\3\0\1\135\1\0\20\41"+
    "\1\u017c\10\41\2\0\1\41\3\0\1\41\6\0\1\134"+
    "\1\0\1\41\13\0\5\41\7\0\13\41\3\0\1\135"+
    "\1\0\25\41\1\u017d\3\41\2\0\1\41\3\0\1\41"+
    "\6\0\1\134\1\0\1\41\13\0\5\41\7\0\13\41"+
    "\3\0\1\135\1\0\22\41\1\u017e\6\41\2\0\1\41"+
    "\3\0\1\41\6\0\1\134\1\0\1\41\13\0\5\41"+
    "\7\0\13\41\3\0\1\135\1\0\4\41\1\u017f\24\41"+
    "\2\0\1\41\3\0\1\41\6\0\1\134\1\0\1\41"+
    "\13\0\5\41\7\0\13\41\3\0\1\135\1\0\3\41"+
    "\1\u0180\25\41\2\0\1\41\25\0\1\u010b\140\0\1\u0181"+
    "\54\0\7\u010d\1\u0182\1\u010d\1\0\106\u010d\25\0\5\u0183"+
    "\7\0\6\u0183\12\0\6\u0183\40\0\1\u0184\110\0\7\302"+
    "\1\u0185\110\302\7\u0121\1\u0186\1\u0121\1\0\106\u0121\25\0"+
    "\5\u0187\7\0\6\u0187\12\0\6\u0187\75\0\1\u0188\53\0"+
    "\17\u0128\1\u0162\4\u0128\1\u0189\73\u0128\41\0\1\u018a\56\0"+
    "\1\41\6\0\1\134\1\0\1\41\13\0\5\41\7\0"+
    "\13\41\3\0\1\135\1\0\1\u018b\30\41\2\0\1\41"+
    "\4\0\2\u0167\1\0\1\u0167\56\0\1\u018c\13\0\1\u018d"+
    "\14\0\2\u0167\2\0\1\41\2\u0167\1\0\1\u0167\2\0"+
    "\1\134\1\0\1\41\13\0\5\41\7\0\13\41\3\0"+
    "\1\135\1\0\2\41\1\u018e\13\41\1\u018f\12\41\2\0"+
    "\1\u0168\1\u0167\2\0\1\41\6\0\1\134\1\0\1\41"+
    "\13\0\5\41\7\0\13\41\3\0\1\135\1\0\22\41"+
    "\1\u0190\6\41\2\0\1\41\3\0\1\41\6\0\1\134"+
    "\1\0\1\41\13\0\5\41\7\0\13\41\3\0\1\135"+
    "\1\0\3\41\1\u0191\25\41\2\0\1\41\3\0\1\41"+
    "\6\0\1\134\1\0\1\41\13\0\5\41\7\0\13\41"+
    "\3\0\1\135\1\0\13\41\1\u0192\15\41\2\0\1\41"+
    "\3\0\1\41\6\0\1\134\1\0\1\41\13\0\5\41"+
    "\7\0\13\41\3\0\1\135\1\0\14\41\1\u0193\14\41"+
    "\2\0\1\41\3\0\1\41\6\0\1\134\1\0\1\41"+
    "\13\0\5\41\7\0\13\41\3\0\1\135\1\0\2\41"+
    "\1\u0194\26\41\2\0\1\41\3\0\1\41\6\0\1\134"+
    "\1\0\1\41\13\0\5\41\7\0\13\41\3\0\1\135"+
    "\1\0\22\41\1\u0195\6\41\2\0\1\41\3\0\1\41"+
    "\6\0\1\134\1\0\1\41\13\0\5\41\7\0\13\41"+
    "\3\0\1\135\1\0\22\41\1\u0196\6\41\2\0\1\41"+
    "\3\0\1\41\6\0\1\134\1\0\1\41\13\0\5\41"+
    "\7\0\13\41\3\0\1\135\1\0\10\41\1\u0197\20\41"+
    "\2\0\1\41\3\0\1\41\6\0\1\134\1\0\1\41"+
    "\13\0\5\41\7\0\13\41\3\0\1\135\1\0\6\41"+
    "\1\u0198\22\41\2\0\1\41\3\0\1\41\6\0\1\134"+
    "\1\0\1\41\13\0\5\41\7\0\13\41\3\0\1\135"+
    "\1\0\22\41\1\u0199\6\41\2\0\1\41\3\0\1\41"+
    "\6\0\1\134\1\0\1\41\13\0\5\41\7\0\13\41"+
    "\3\0\1\135\1\0\2\41\1\u019a\26\41\2\0\1\41"+
    "\3\0\1\41\6\0\1\134\1\0\1\41\13\0\5\41"+
    "\7\0\13\41\3\0\1\135\1\0\15\41\1\u019b\13\41"+
    "\2\0\1\41\3\0\1\41\6\0\1\134\1\0\1\41"+
    "\13\0\5\41\7\0\13\41\3\0\1\135\1\0\3\41"+
    "\1\u019c\25\41\2\0\1\41\47\0\1\u019d\53\0\7\u010d"+
    "\1\0\1\u010d\1\0\106\u010d\25\0\5\u019e\7\0\6\u019e"+
    "\12\0\6\u019e\40\0\1\u0185\110\0\7\u0121\1\0\1\u0121"+
    "\1\0\106\u0121\25\0\5\137\7\0\6\137\12\0\6\137"+
    "\72\0\1\u019f\130\0\1\u01a0\45\0\1\41\6\0\1\134"+
    "\1\0\1\41\13\0\5\41\7\0\13\41\3\0\1\135"+
    "\1\0\2\41\1\u01a1\26\41\2\0\1\41\77\0\1\u01a2"+
    "\105\0\1\u01a3\35\0\1\41\6\0\1\134\1\0\1\41"+
    "\13\0\5\41\7\0\13\41\3\0\1\135\1\0\13\41"+
    "\1\u01a4\15\41\2\0\1\41\3\0\1\41\6\0\1\134"+
    "\1\0\1\41\13\0\5\41\7\0\13\41\3\0\1\135"+
    "\1\0\1\41\1\u01a5\27\41\2\0\1\41\3\0\1\41"+
    "\6\0\1\134\1\0\1\41\13\0\5\41\7\0\13\41"+
    "\3\0\1\135\1\0\21\41\1\u01a6\7\41\2\0\1\41"+
    "\3\0\1\41\6\0\1\134\1\0\1\41\13\0\5\41"+
    "\7\0\13\41\3\0\1\135\1\0\27\41\1\u01a7\1\41"+
    "\2\0\1\41\3\0\1\41\6\0\1\134\1\0\1\41"+
    "\13\0\5\41\7\0\13\41\3\0\1\135\1\0\4\41"+
    "\1\u01a8\24\41\2\0\1\41\3\0\1\41\6\0\1\134"+
    "\1\0\1\41\13\0\5\41\7\0\13\41\3\0\1\135"+
    "\1\0\10\41\1\u01a9\20\41\2\0\1\41\3\0\1\41"+
    "\6\0\1\134\1\0\1\41\13\0\5\41\7\0\13\41"+
    "\3\0\1\135\1\0\3\41\1\u01aa\25\41\2\0\1\41"+
    "\3\0\1\41\6\0\1\134\1\0\1\41\13\0\5\41"+
    "\7\0\13\41\3\0\1\135\1\0\4\41\1\u01ab\24\41"+
    "\2\0\1\41\3\0\1\41\6\0\1\134\1\0\1\41"+
    "\13\0\5\41\7\0\13\41\3\0\1\135\1\0\4\41"+
    "\1\u01ac\24\41\2\0\1\41\3\0\1\41\6\0\1\134"+
    "\1\0\1\41\13\0\5\41\7\0\13\41\3\0\1\135"+
    "\1\0\22\41\1\u01ad\6\41\2\0\1\41\44\0\1\u01ae"+
    "\130\0\1\u01af\106\0\1\u01b0\56\0\1\41\6\0\1\134"+
    "\1\0\1\41\13\0\5\41\7\0\13\41\3\0\1\135"+
    "\1\0\22\41\1\u01b1\6\41\2\0\1\41\64\0\1\u01b2"+
    "\130\0\1\u01b3\25\0\1\41\6\0\1\134\1\0\1\41"+
    "\13\0\5\41\7\0\13\41\3\0\1\135\1\0\1\u01b4"+
    "\30\41\2\0\1\41\3\0\1\41\6\0\1\134\1\0"+
    "\1\41\13\0\5\41\7\0\13\41\3\0\1\135\1\0"+
    "\11\41\1\u01b5\17\41\2\0\1\41\3\0\1\41\6\0"+
    "\1\134\1\0\1\41\13\0\5\41\7\0\13\41\3\0"+
    "\1\135\1\0\22\41\1\u01b6\6\41\2\0\1\41\3\0"+
    "\1\41\6\0\1\134\1\0\1\41\13\0\5\41\7\0"+
    "\13\41\3\0\1\135\1\0\4\41\1\u01b7\24\41\2\0"+
    "\1\41\3\0\1\41\6\0\1\134\1\0\1\41\13\0"+
    "\5\41\7\0\13\41\3\0\1\135\1\0\4\41\1\u01b8"+
    "\24\41\2\0\1\41\55\0\1\u01b9\106\0\1\u01ba\132\0"+
    "\1\162\145\0\1\u01bb\102\0\1\u01bc\32\0\1\41\6\0"+
    "\1\134\1\0\1\41\13\0\5\41\7\0\13\41\3\0"+
    "\1\135\1\0\21\41\1\u01bd\7\41\2\0\1\41\3\0"+
    "\1\41\6\0\1\134\1\0\1\41\13\0\5\41\7\0"+
    "\13\41\3\0\1\135\1\0\4\41\1\u01be\24\41\2\0"+
    "\1\41\3\0\1\41\6\0\1\134\1\0\1\41\13\0"+
    "\5\41\7\0\13\41\3\0\1\135\1\0\3\41\1\u01bf"+
    "\25\41\2\0\1\41\44\0\1\u01c0\132\0\1\320\145\0"+
    "\1\u01c1\100\0\1\u01c2\34\0\1\41\6\0\1\134\1\0"+
    "\1\41\13\0\5\41\7\0\13\41\3\0\1\135\1\0"+
    "\21\41\1\u01c3\7\41\2\0\1\41\3\0\1\41\6\0"+
    "\1\134\1\0\1\41\13\0\5\41\7\0\13\41\3\0"+
    "\1\135\1\0\2\41\1\u01c4\26\41\2\0\1\41\57\0"+
    "\1\u010b\146\0\1\u01c1\14\0\1\41\6\0\1\134\1\0"+
    "\1\41\13\0\5\41\7\0\13\41\3\0\1\135\1\0"+
    "\22\41\1\u01c3\6\41\2\0\1\41\3\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[27120];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\12\0\2\11\7\1\2\11\5\1\1\11\6\1\2\11"+
    "\25\1\1\11\5\1\1\11\1\1\1\11\5\1\1\11"+
    "\5\1\2\0\1\1\2\0\2\1\5\0\2\1\1\0"+
    "\2\1\1\11\1\0\1\1\1\0\1\1\1\0\2\1"+
    "\1\0\4\1\1\0\1\11\1\0\2\11\1\0\1\1"+
    "\1\11\6\1\2\0\1\11\40\1\1\0\1\1\3\0"+
    "\1\1\1\0\2\1\1\0\2\11\1\1\2\0\1\11"+
    "\1\1\1\0\2\1\1\0\1\11\1\1\2\0\1\11"+
    "\2\1\6\0\1\11\2\0\1\11\1\0\1\1\2\0"+
    "\1\1\1\11\3\1\1\11\4\0\1\11\2\0\3\1"+
    "\1\0\2\1\1\0\1\1\1\0\3\1\1\0\52\1"+
    "\1\0\1\11\1\0\2\1\1\0\1\11\3\0\1\1"+
    "\1\11\1\1\1\0\1\11\2\1\2\0\3\1\1\0"+
    "\1\1\5\0\1\1\1\0\4\1\1\0\1\11\1\0"+
    "\1\1\1\0\43\1\3\0\1\1\1\0\3\1\4\0"+
    "\1\11\1\0\2\1\1\0\1\1\1\0\31\1\3\0"+
    "\2\1\3\0\1\11\1\0\1\1\2\0\17\1\1\0"+
    "\1\11\2\0\1\1\2\0\12\1\3\0\1\1\2\0"+
    "\5\1\4\0\3\1\1\0\1\11\1\0\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[452];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;
  
  /** For the backwards DFA of general lookahead statements */
  private boolean [] zzFin = new boolean [Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())+1];

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    public _ScalaCoreLexer(boolean isScala3) {
      this((java.io.Reader) null);
      this.isScala3 = isScala3;
    }

    private static abstract class InterpolatedStringLevel {
      private int value = 0;

      public final boolean isRaw;

      public InterpolatedStringLevel(boolean isRaw) {
        this.isRaw = isRaw;
      }
      public InterpolatedStringLevel(CharSequence interpolator) {
        this(StringUtil.equal(interpolator, "raw", true));
      }

      public int get() {
        return value;
      }

      public boolean isZero() {
        return value == 0;
      }

      public void increase() {
        ++value;
      }

      public void decrease() {
        --value;
      }

      public abstract int getState();
    }

    private static class RegularLevel extends InterpolatedStringLevel {
      public RegularLevel(CharSequence intepolator) {
        super(intepolator);
      }
      public int getState() {
        return INSIDE_INTERPOLATED_STRING;
      }
    }

    private static class MultilineLevel extends InterpolatedStringLevel {
      public MultilineLevel(CharSequence intepolator) {
        super(intepolator);
      }
      public int getState() {
        return INSIDE_MULTI_LINE_INTERPOLATED_STRING;
      }
    }

    private boolean isScala3;

    //
    // NOTE: when adding new mutable state, do not forget to update `reset_ScalaLexer`
    //
    //to get id after $ in interpolated String
    private boolean haveIdInString = false;
    private boolean haveIdInMultilineString = false;
    // Currently opened interpolated Strings. Each int represents the number of the opened left structural braces in the String
    private Stack<InterpolatedStringLevel> nestedString = new Stack<>();
    private CharSequence lastSeenInterpolator = null;

    private boolean isInsideRawInterpolator() {
      return !nestedString.isEmpty() && nestedString.peek().isRaw;
    }

    public void resetCustom() {
      haveIdInString = false;
      haveIdInMultilineString = false;
      nestedString.clear();
      lastSeenInterpolator = null;
    }

    public boolean isInterpolatedStringState() {
        return isInsideInterpolatedString() ||
               haveIdInString ||
               haveIdInMultilineString ||
               yystate() == INSIDE_INTERPOLATED_STRING ||
               yystate() == INSIDE_MULTI_LINE_INTERPOLATED_STRING;
    }

    private boolean shouldProcessBracesForInterpolated() {
      return isInsideInterpolatedString();
    }
    private boolean isInsideInterpolatedString() {
      return !nestedString.isEmpty();
    }

    @NotNull
    private IElementType processOutsideString() {
      return processOutsideString(tINTERPOLATED_STRING_END);
    }

    private IElementType processOutsideString(IElementType typ) {
      if (isInsideInterpolatedString())
        nestedString.pop();
      yybegin(COMMON_STATE);
      return process(typ);
    }

    @NotNull
    private IElementType process(@NotNull final IElementType type){
      if ((type == tIDENTIFIER || type == kTHIS)) {
        if (haveIdInString) {
          haveIdInString = false;
          yybegin(INSIDE_INTERPOLATED_STRING);
        } else if (haveIdInMultilineString) {
          haveIdInMultilineString = false;
          yybegin(INSIDE_MULTI_LINE_INTERPOLATED_STRING);
        }
      }

      if (yystate() == YYINITIAL && type != tWHITE_SPACE_IN_LINE && type != tLBRACE && type != tLPARENTHESIS) {
        yybegin(COMMON_STATE);
      }

      // see comments to tINTERPOLATED_RAW_STRING and tINTERPOLATED_MULTILINE_RAW_STRING and
      final IElementType typeAdjusted;
      if (type == tINTERPOLATED_STRING && isInsideRawInterpolator())
        typeAdjusted =  tINTERPOLATED_RAW_STRING;
      else if (type == tINTERPOLATED_MULTILINE_STRING && isInsideRawInterpolator())
        typeAdjusted = tINTERPOLATED_MULTILINE_RAW_STRING;
      else
        typeAdjusted = type;

      return typeAdjusted;
    }

    @NotNull
    private IElementType processDollarInsideString(boolean isInsideMultiline) {
        final IElementType token;

        // TODO: remove this chech, this should always be false, cause $$ is handled by INTERPOLATED_STRING_ESCAPE pattern earlier
        boolean isDollarEscape = yycharat(1) == '$';
        if (isDollarEscape) {
            yypushback(yylength() - 2);
            token = tINTERPOLATED_STRING_ESCAPE;
        }
        else {
            if (isInsideMultiline) {
                haveIdInMultilineString = true;
            } else {
                haveIdInString = true;
            }
            yybegin(INJ_COMMON_STATE);
            yypushback(yylength() - 1);
            token = tINTERPOLATED_STRING_INJECTION;
        }
        return process(token);
    }

    private IElementType processScala3(@NotNull IElementType type) {
        return process(isScala3 ? type : tIDENTIFIER);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _ScalaCoreLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  @Override
  public final int getTokenStart() {
    return zzStartRead;
  }

  @Override
  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  @Override
  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;

    // !!!! NOTE !!!!
    // When updating the skeleton from IntelliJ repository, do not forget to add this method call
    resetCustom();

    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  @Override
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  @Override
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  return;
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return process(tSTUB);
            }
          // fall through
          case 106: break;
          case 2:
            { yybegin(YYINITIAL);
                                            return process(tWHITE_SPACE_IN_LINE);
            }
          // fall through
          case 107: break;
          case 3:
            { return process(tIDENTIFIER);
            }
          // fall through
          case 108: break;
          case 4:
            { return process(tWRONG_STRING);
            }
          // fall through
          case 109: break;
          case 5:
            { return process(tINNER_CLASS);
            }
          // fall through
          case 110: break;
          case 6:
            { return process(tLPARENTHESIS);
            }
          // fall through
          case 111: break;
          case 7:
            { return process(tRPARENTHESIS);
            }
          // fall through
          case 112: break;
          case 8:
            { return process(tCOMMA);
            }
          // fall through
          case 113: break;
          case 9:
            { return process(tDOT);
            }
          // fall through
          case 114: break;
          case 10:
            { return process(Integer());
            }
          // fall through
          case 115: break;
          case 11:
            { return process(tCOLON);
            }
          // fall through
          case 116: break;
          case 12:
            { return process(tSEMICOLON);
            }
          // fall through
          case 117: break;
          case 13:
            { return process(tASSIGN);
            }
          // fall through
          case 118: break;
          case 14:
            { return process(tAT);
            }
          // fall through
          case 119: break;
          case 15:
            { return process(tLSQBRACKET);
            }
          // fall through
          case 120: break;
          case 16:
            { return process(tRSQBRACKET);
            }
          // fall through
          case 121: break;
          case 17:
            { return process(tUNDER);
            }
          // fall through
          case 122: break;
          case 18:
            { if (shouldProcessBracesForInterpolated()) {
                                              nestedString.peek().increase();
                                            }

                                            return process(tLBRACE);
            }
          // fall through
          case 123: break;
          case 19:
            { if (shouldProcessBracesForInterpolated()) {
                                              InterpolatedStringLevel level = nestedString.peek();
                                              level.decrease();

                                              if (level.isZero()) {
                                                yybegin(level.getState());
                                              }
                                            }
                                            return process(tRBRACE);
            }
          // fall through
          case 124: break;
          case 20:
            { return process(tCHOOSE);
            }
          // fall through
          case 125: break;
          case 21:
            { return process(tFUNTYPE);
            }
          // fall through
          case 126: break;
          case 22:
            { yypushback(yylength() - 1); // only push opening quote
    yybegin(INSIDE_INTERPOLATED_STRING);
    nestedString.push(new RegularLevel(lastSeenInterpolator));
    return process(tINTERPOLATED_STRING);
            }
          // fall through
          case 127: break;
          case 23:
            { return process(tINTERPOLATED_STRING);
            }
          // fall through
          case 128: break;
          case 24:
            { //don't add new lines to string itself, add empty error
    yypushback(yylength());
    return processOutsideString(tWRONG_LINE_BREAK_IN_STRING);
            }
          // fall through
          case 129: break;
          case 25:
            { return processOutsideString();
            }
          // fall through
          case 130: break;
          case 26:
            { return process(tINTERPOLATED_MULTILINE_STRING);
            }
          // fall through
          case 131: break;
          case 27:
            { int length = yylength();
  int number = length;
  for (int i = 1; i < length; i++) {
    if (yycharat(i) == '$') {
      number = i;
      break;
    }
  }

  yypushback(length - number);
  boolean isThis = "this".contentEquals(yytext());
  return process(isThis ? kTHIS : tIDENTIFIER);
            }
          // fall through
          case 132: break;
          case 28:
            { return process(tSTRING);
            }
          // fall through
          case 133: break;
          case 29:
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 6;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length()) {
                zzFin = new boolean[zzBufferL.length()+1];
              }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMap(zzInput) ];
              }
              if (zzFState != -1) {
                zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1);
              }
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 7;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMap(zzInput) ];
              };
              zzMarkedPos = zzFPos;
            }
            { yybegin(WAIT_FOR_INTERPOLATED_STRING);
  // TODO: remove this check: looks like it's a dead code,
  //  yytext() should only return text that is matched by INTERPOLATED_STRING_ID, which can't end with \"\"
  if (endsWith(yytext(), "\"\"")) yypushback(2);
  lastSeenInterpolator = yytext();
  IElementType token = haveIdInString || haveIdInMultilineString ? tIDENTIFIER : tINTERPOLATED_STRING_ID;
  return process(token);
            }
          // fall through
          case 134: break;
          case 30:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 1);
            { if (isScala3) {
    return processScala3(SpliceStart());
  }
            }
          // fall through
          case 135: break;
          case 31:
            { return process(tSYMBOL);
            }
          // fall through
          case 136: break;
          case 32:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 1);
            { if (isScala3) {
    return processScala3(QuoteStart());
  }
            }
          // fall through
          case 137: break;
          case 33:
            { return process(Double());
            }
          // fall through
          case 138: break;
          case 34:
            { return process(tLINE_COMMENT);
            }
          // fall through
          case 139: break;
          case 35:
            { return process(Float());
            }
          // fall through
          case 140: break;
          case 36:
            { return process(Long());
            }
          // fall through
          case 141: break;
          case 37:
            { yybegin(COMMON_STATE);
    yypushback(yylength());
    return ScalaTokenTypesEx.SCALA_XML_CONTENT_START;
            }
          // fall through
          case 142: break;
          case 38:
            { return process(tVIEW);
            }
          // fall through
          case 143: break;
          case 39:
            { return process(tUPPER_BOUND);
            }
          // fall through
          case 144: break;
          case 40:
            { return process(tLOWER_BOUND);
            }
          // fall through
          case 145: break;
          case 41:
            { return process(kDO);
            }
          // fall through
          case 146: break;
          case 42:
            { return process(kIF);
            }
          // fall through
          case 147: break;
          case 43:
            { return processDollarInsideString(false);
            }
          // fall through
          case 148: break;
          case 44:
            { return process(tINTERPOLATED_STRING_ESCAPE);
            }
          // fall through
          case 149: break;
          case 45:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 1);
            { yybegin(COMMON_STATE);
    return process(tINTERPOLATED_STRING_INJECTION);
            }
          // fall through
          case 150: break;
          case 46:
            { if (isInsideRawInterpolator()) {
      yypushback(1); // from "\t" push "t" back, also if we have "\" we don't want " to be captured
    }
    return process(tINTERPOLATED_STRING);
            }
          // fall through
          case 151: break;
          case 47:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 1);
            { return process(tINTERPOLATED_MULTILINE_STRING);
            }
          // fall through
          case 152: break;
          case 48:
            { return processDollarInsideString(true);
            }
          // fall through
          case 153: break;
          case 49:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 1);
            { yybegin(COMMON_STATE);
      return process(tINTERPOLATED_STRING_INJECTION);
            }
          // fall through
          case 154: break;
          case 50:
            { return process(tCHAR);
            }
          // fall through
          case 155: break;
          case 51:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 2);
            { return process(tCHAR);
            }
          // fall through
          case 156: break;
          case 52:
            { yypushback(yylength() - 1);
                                            yybegin(YYINITIAL);
                                            return process(tLPARENTHESIS);
            }
          // fall through
          case 157: break;
          case 53:
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 8;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length()) {
                zzFin = new boolean[zzBufferL.length()+1];
              }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMap(zzInput) ];
              }
              if (zzFState != -1) {
                zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1);
              }
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 9;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMap(zzInput) ];
              };
              zzMarkedPos = zzFPos;
            }
            { return process(Integer());
            }
          // fall through
          case 158: break;
          case 54:
            { return processScala3(TypeLambdaArrow());
            }
          // fall through
          case 159: break;
          case 55:
            { return processScala3(ImplicitFunctionArrow());
            }
          // fall through
          case 160: break;
          case 56:
            { return process(kDEF);
            }
          // fall through
          case 161: break;
          case 57:
            { return process(kFOR);
            }
          // fall through
          case 162: break;
          case 58:
            { return process(NewKeyword());
            }
          // fall through
          case 163: break;
          case 59:
            { return process(kTRY);
            }
          // fall through
          case 164: break;
          case 60:
            { return process(kVAL);
            }
          // fall through
          case 165: break;
          case 61:
            { return process(kVAR);
            }
          // fall through
          case 166: break;
          case 62:
            { if (shouldProcessBracesForInterpolated()) {
                                              nestedString.peek().increase();
                                            }

                                            yypushback(yylength() - 1);
                                            yybegin(YYINITIAL);
                                            return process(tLBRACE);
            }
          // fall through
          case 167: break;
          case 63:
            { yybegin(INSIDE_MULTI_LINE_INTERPOLATED_STRING);
    nestedString.push(new MultilineLevel(lastSeenInterpolator));
    return process(tINTERPOLATED_MULTILINE_STRING);
            }
          // fall through
          case 168: break;
          case 64:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 2);
            { return process(tINTERPOLATED_MULTILINE_STRING);
            }
          // fall through
          case 169: break;
          case 65:
            { //for comments in interpolated strings
    return process(tBLOCK_COMMENT);
            }
          // fall through
          case 170: break;
          case 66:
            { return process(kCASE);
            }
          // fall through
          case 171: break;
          case 67:
            { return process(kELSE);
            }
          // fall through
          case 172: break;
          case 68:
            { return processScala3(EnumKeyword());
            }
          // fall through
          case 173: break;
          case 69:
            { return process(kLAZY);
            }
          // fall through
          case 174: break;
          case 70:
            { return process(kNULL);
            }
          // fall through
          case 175: break;
          case 71:
            { return processScala3(ThenKeyword());
            }
          // fall through
          case 176: break;
          case 72:
            { return process(kTHIS);
            }
          // fall through
          case 177: break;
          case 73:
            { return process(kTRUE);
            }
          // fall through
          case 178: break;
          case 74:
            { return process(kTYPE);
            }
          // fall through
          case 179: break;
          case 75:
            { return process(kWITH);
            }
          // fall through
          case 180: break;
          case 76:
            { yypushback(yylength() - 1);
    return process(tINTERPOLATED_MULTILINE_STRING);
            }
          // fall through
          case 181: break;
          case 77:
            { //for comments in interpolated strings
    return process(ScalaDocElementTypes.SCALA_DOC_COMMENT);
            }
          // fall through
          case 182: break;
          case 78:
            { return process(kCATCH);
            }
          // fall through
          case 183: break;
          case 79:
            { return process(ClassKeyword());
            }
          // fall through
          case 184: break;
          case 80:
            { return process(kFALSE);
            }
          // fall through
          case 185: break;
          case 81:
            { return process(kFINAL);
            }
          // fall through
          case 186: break;
          case 82:
            { return processScala3(GivenKeyword());
            }
          // fall through
          case 187: break;
          case 83:
            { return process(kMACRO);
            }
          // fall through
          case 188: break;
          case 84:
            { return process(kMATCH);
            }
          // fall through
          case 189: break;
          case 85:
            { return process(kSUPER);
            }
          // fall through
          case 190: break;
          case 86:
            { return process(kTHROW);
            }
          // fall through
          case 191: break;
          case 87:
            { return process(TraitKeyword());
            }
          // fall through
          case 192: break;
          case 88:
            { return process(kWHILE);
            }
          // fall through
          case 193: break;
          case 89:
            { return process(kYIELD);
            }
          // fall through
          case 194: break;
          case 90:
            { return process(tMULTILINE_STRING);
            }
          // fall through
          case 195: break;
          case 91:
            { return processScala3(ExportKeyword());
            }
          // fall through
          case 196: break;
          case 92:
            { return process(kIMPORT);
            }
          // fall through
          case 197: break;
          case 93:
            { return process(ObjectKeyword());
            }
          // fall through
          case 198: break;
          case 94:
            { return process(kRETURN);
            }
          // fall through
          case 199: break;
          case 95:
            { return process(kSEALED);
            }
          // fall through
          case 200: break;
          case 96:
            { return process(kEXTENDS);
            }
          // fall through
          case 201: break;
          case 97:
            { return process(kFINALLY);
            }
          // fall through
          case 202: break;
          case 98:
            { return process(kFOR_SOME);
            }
          // fall through
          case 203: break;
          case 99:
            { return process(kPACKAGE);
            }
          // fall through
          case 204: break;
          case 100:
            { return process(kPRIVATE);
            }
          // fall through
          case 205: break;
          case 101:
            { return process(kABSTRACT);
            }
          // fall through
          case 206: break;
          case 102:
            { return process(kIMPLICIT);
            }
          // fall through
          case 207: break;
          case 103:
            { return process(kOVERRIDE);
            }
          // fall through
          case 208: break;
          case 104:
            { return process(kPROTECTED);
            }
          // fall through
          case 209: break;
          case 105:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 4);
            { return process(kCASE);
            }
          // fall through
          case 210: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
