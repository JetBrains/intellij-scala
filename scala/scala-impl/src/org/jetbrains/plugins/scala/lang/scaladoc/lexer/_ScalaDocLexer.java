/* The following code was generated by JFlex 1.4.3 on 22/03/2018 02:14 */

/*
 * Copyright 2000-2008 JetBrains s.r.o.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.jetbrains.plugins.scala.lang.scaladoc.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import org.jetbrains.plugins.scala.lang.scaladoc.lexer.docsyntax.*;
import org.jetbrains.plugins.scala.lang.lexer.ScalaTokenTypes;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 22/03/2018 02:14 from the specification file
 * <tt>../../scaladoc/lexer/scaladoc.flex</tt>
 */
public class _ScalaDocLexer implements FlexLexer, ScalaDocTokenType, ScalaTokenTypes {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int INNER_CODE_WHITESPACE = 44;
  public static final int PARAM_DOC_DEFINE_TAG_VALUE = 22;
  public static final int CODE_BAD_LINK = 36;
  public static final int COMMENT_DATA = 4;
  public static final int PARAM_DEFINE_TAG_DOC_SPACE = 12;
  public static final int PARAM_DOC_TAG_VALUE = 18;
  public static final int COMMENT_DATA_START = 2;
  public static final int DOC_TAG_VALUE_IN_PAREN = 24;
  public static final int PARAM_DOC_THROWS_TAG_VALUE = 20;
  public static final int CODE_LINK_INNER = 34;
  public static final int HTTP_LINK_INNER = 38;
  public static final int DOC_TAG_VALUE = 16;
  public static final int INLINE_TAG_NAME = 28;
  public static final int PARAM_TAG_DOC_SPACE = 8;
  public static final int DOC_TAG_VALUE_IN_LTGT = 26;
  public static final int PARAM_THROWS_TAG_DOC_SPACE = 10;
  public static final int COMMENT_INNER_CODE = 42;
  public static final int DOC_TAG_VALUE_SPACE = 40;
  public static final int YYINITIAL = 0;
  public static final int PARAM_TAG_SPACE = 14;
  public static final int TAG_DOC_SPACE = 6;
  public static final int INLINE_DOC_TAG_VALUE = 30;
  public static final int INLINE_TAG_DOC_SPACE = 32;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12,  7,  7, 13, 13, 14, 14, 
    15, 15, 16, 16, 17, 17,  7,  7, 18, 18, 19, 19, 20, 20
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\24\1\2\1\6\1\0\1\2\1\1\16\24\4\0\1\2\1\10"+
    "\1\22\1\11\1\35\2\10\1\27\1\43\1\44\1\31\1\10\1\32"+
    "\1\10\1\30\1\15\10\3\2\3\1\13\1\0\1\10\1\34\2\10"+
    "\1\45\32\4\1\33\1\14\1\42\1\12\1\25\1\26\1\16\2\20"+
    "\1\46\1\47\1\50\1\4\1\36\1\51\2\4\1\20\1\55\1\52"+
    "\1\53\1\40\1\4\1\17\1\41\1\37\1\20\1\4\1\54\1\4"+
    "\1\20\1\4\1\5\1\23\1\7\1\10\6\24\1\21\32\24\2\0"+
    "\4\4\4\0\1\4\2\0\1\24\7\0\1\4\4\0\1\4\5\0"+
    "\27\4\1\0\37\4\1\0\u01ca\4\4\0\14\4\16\0\5\4\7\0"+
    "\1\4\1\0\1\4\21\0\160\24\5\4\1\0\2\4\2\0\4\4"+
    "\1\0\1\4\6\0\1\4\1\0\3\4\1\0\1\4\1\0\24\4"+
    "\1\0\123\4\1\0\213\4\1\0\5\24\2\0\246\4\1\0\46\4"+
    "\2\0\1\4\7\0\47\4\7\0\1\4\1\0\55\24\1\0\1\24"+
    "\1\0\2\24\1\0\2\24\1\0\1\24\10\0\33\4\5\0\3\4"+
    "\15\0\6\24\5\0\1\4\4\0\13\24\1\0\1\24\3\0\53\4"+
    "\37\24\4\0\2\4\1\24\143\4\1\0\1\4\10\24\1\0\6\24"+
    "\2\4\2\24\1\0\4\24\2\4\12\24\3\4\2\0\1\4\17\0"+
    "\1\24\1\4\1\24\36\4\33\24\2\0\131\4\13\24\1\4\16\0"+
    "\12\24\41\4\11\24\2\4\4\0\1\4\5\0\26\4\4\24\1\4"+
    "\11\24\1\4\3\24\1\4\5\24\22\0\31\4\3\24\104\0\25\4"+
    "\56\0\41\24\66\4\3\24\1\4\22\24\1\4\7\24\12\4\2\24"+
    "\2\0\12\24\1\0\20\4\3\24\1\0\10\4\2\0\2\4\2\0"+
    "\26\4\1\0\7\4\1\0\1\4\3\0\4\4\2\0\1\24\1\4"+
    "\7\24\2\0\2\24\2\0\3\24\1\4\10\0\1\24\4\0\2\4"+
    "\1\0\3\4\2\24\2\0\12\24\4\4\7\0\1\4\5\0\3\24"+
    "\1\0\6\4\4\0\2\4\2\0\26\4\1\0\7\4\1\0\2\4"+
    "\1\0\2\4\1\0\2\4\2\0\1\24\1\0\5\24\4\0\2\24"+
    "\2\0\3\24\3\0\1\24\7\0\4\4\1\0\1\4\7\0\14\24"+
    "\3\4\1\24\13\0\3\24\1\0\11\4\1\0\3\4\1\0\26\4"+
    "\1\0\7\4\1\0\2\4\1\0\5\4\2\0\1\24\1\4\10\24"+
    "\1\0\3\24\1\0\3\24\2\0\1\4\17\0\2\4\2\24\2\0"+
    "\12\24\1\0\1\4\7\0\1\4\7\0\3\24\1\0\10\4\2\0"+
    "\2\4\2\0\26\4\1\0\7\4\1\0\2\4\1\0\5\4\2\0"+
    "\1\24\1\4\7\24\2\0\2\24\2\0\3\24\10\0\2\24\4\0"+
    "\2\4\1\0\3\4\2\24\2\0\12\24\1\0\1\4\20\0\1\24"+
    "\1\4\1\0\6\4\3\0\3\4\1\0\4\4\3\0\2\4\1\0"+
    "\1\4\1\0\2\4\3\0\2\4\3\0\3\4\3\0\14\4\4\0"+
    "\5\24\3\0\3\24\1\0\4\24\2\0\1\4\6\0\1\24\16\0"+
    "\12\24\11\0\1\4\6\0\4\24\1\0\10\4\1\0\3\4\1\0"+
    "\27\4\1\0\20\4\3\0\1\4\7\24\1\0\3\24\1\0\4\24"+
    "\7\0\2\24\1\0\3\4\5\0\2\4\2\24\2\0\12\24\21\0"+
    "\3\24\1\0\10\4\1\0\3\4\1\0\27\4\1\0\12\4\1\0"+
    "\5\4\2\0\1\24\1\4\7\24\1\0\3\24\1\0\4\24\7\0"+
    "\2\24\7\0\1\4\1\0\2\4\2\24\2\0\12\24\1\0\2\4"+
    "\16\0\3\24\1\0\10\4\1\0\3\4\1\0\51\4\2\0\1\4"+
    "\7\24\1\0\3\24\1\0\4\24\1\4\10\0\1\24\7\0\3\4"+
    "\2\24\2\0\12\24\12\0\6\4\2\0\2\24\1\0\22\4\3\0"+
    "\30\4\1\0\11\4\1\0\1\4\2\0\7\4\3\0\1\24\4\0"+
    "\6\24\1\0\1\24\1\0\10\24\6\0\12\24\2\0\2\24\15\0"+
    "\60\4\1\24\2\4\7\24\4\0\10\4\10\24\1\0\12\24\47\0"+
    "\2\4\1\0\1\4\2\0\2\4\1\0\1\4\2\0\1\4\6\0"+
    "\4\4\1\0\7\4\1\0\3\4\1\0\1\4\1\0\1\4\2\0"+
    "\2\4\1\0\4\4\1\24\2\4\6\24\1\0\2\24\1\4\2\0"+
    "\5\4\1\0\1\4\1\0\6\24\2\0\12\24\2\0\4\4\40\0"+
    "\1\4\27\0\2\24\6\0\12\24\13\0\1\24\1\0\1\24\1\0"+
    "\1\24\4\0\2\24\10\4\1\0\44\4\4\0\24\24\1\0\2\24"+
    "\5\4\13\24\1\0\44\24\11\0\1\24\71\0\53\4\24\24\1\4"+
    "\12\24\6\0\6\4\4\24\4\4\3\24\1\4\3\24\2\4\7\24"+
    "\3\4\4\24\15\4\14\24\1\4\17\24\2\0\46\4\1\0\1\4"+
    "\5\0\1\4\2\0\53\4\1\0\u014d\4\1\0\4\4\2\0\7\4"+
    "\1\0\1\4\1\0\4\4\2\0\51\4\1\0\4\4\2\0\41\4"+
    "\1\0\4\4\2\0\7\4\1\0\1\4\1\0\4\4\2\0\17\4"+
    "\1\0\71\4\1\0\4\4\2\0\103\4\2\0\3\24\40\0\20\4"+
    "\20\0\126\4\2\0\6\4\3\0\u026c\4\2\0\21\4\1\0\32\4"+
    "\5\0\113\4\3\0\13\4\7\0\15\4\1\0\4\4\3\24\13\0"+
    "\22\4\3\24\13\0\22\4\2\24\14\0\15\4\1\0\3\4\1\0"+
    "\2\24\14\0\64\4\40\24\3\0\1\4\3\0\2\4\1\24\2\0"+
    "\12\24\41\0\4\24\1\0\12\24\6\0\130\4\10\0\51\4\1\24"+
    "\1\4\5\0\106\4\12\0\37\4\1\0\14\24\4\0\14\24\12\0"+
    "\12\24\36\4\2\0\5\4\13\0\54\4\4\0\32\4\6\0\12\24"+
    "\46\0\27\4\5\24\4\0\65\4\12\24\1\0\35\24\2\0\13\24"+
    "\6\0\12\24\15\0\1\4\10\0\16\24\102\0\5\24\57\4\21\24"+
    "\7\4\4\0\12\24\21\0\11\24\14\0\3\24\36\4\15\24\2\4"+
    "\12\24\54\4\16\24\14\0\44\4\24\24\10\0\12\24\3\0\3\4"+
    "\12\24\44\4\122\0\3\24\1\0\25\24\4\4\1\24\4\4\3\24"+
    "\2\4\1\0\2\24\6\0\300\4\66\24\6\0\4\24\u0116\4\2\0"+
    "\6\4\2\0\46\4\2\0\6\4\2\0\10\4\1\0\1\4\1\0"+
    "\1\4\1\0\1\4\1\0\37\4\2\0\65\4\1\0\7\4\1\0"+
    "\1\4\3\0\3\4\1\0\7\4\3\0\4\4\2\0\6\4\4\0"+
    "\15\4\5\0\3\4\1\0\7\4\16\0\5\24\30\0\1\22\1\22"+
    "\5\24\20\0\2\4\23\0\1\4\13\0\5\24\1\0\12\24\1\0"+
    "\1\4\15\0\1\4\20\0\15\4\3\0\37\4\21\0\15\24\4\0"+
    "\1\24\3\0\14\24\21\0\1\4\4\0\1\4\2\0\12\4\1\0"+
    "\1\4\3\0\5\4\6\0\1\4\1\0\1\4\1\0\1\4\1\0"+
    "\4\4\1\0\13\4\2\0\4\4\5\0\5\4\4\0\1\4\21\0"+
    "\51\4\u0a77\0\57\4\1\0\57\4\1\0\205\4\6\0\4\4\3\24"+
    "\2\4\14\0\46\4\1\0\1\4\5\0\1\4\2\0\70\4\7\0"+
    "\1\4\17\0\1\24\27\4\11\0\7\4\1\0\7\4\1\0\7\4"+
    "\1\0\7\4\1\0\7\4\1\0\7\4\1\0\7\4\1\0\7\4"+
    "\1\0\40\24\57\0\1\4\u01d5\0\3\4\31\0\11\4\6\24\1\0"+
    "\5\4\2\0\5\4\4\0\126\4\2\0\2\24\2\0\3\4\1\0"+
    "\132\4\1\0\4\4\5\0\51\4\3\0\136\4\21\0\33\4\65\0"+
    "\20\4\u0200\0\u19b6\4\112\0\u51d6\4\52\0\u048d\4\103\0\56\4\2\0"+
    "\u010d\4\3\0\20\4\12\24\2\4\24\0\57\4\1\24\4\0\12\24"+
    "\1\0\37\4\2\24\120\4\2\24\45\0\11\4\2\0\147\4\2\0"+
    "\43\4\2\0\10\4\77\0\13\4\1\24\3\4\1\24\4\4\1\24"+
    "\27\4\5\24\20\0\1\4\7\0\64\4\14\0\2\24\62\4\21\24"+
    "\13\0\12\24\6\0\22\24\6\4\3\0\1\4\1\0\1\4\2\0"+
    "\12\24\34\4\10\24\2\0\27\4\15\24\14\0\35\4\3\0\4\24"+
    "\57\4\16\24\16\0\1\4\12\24\6\0\5\4\1\24\12\4\12\24"+
    "\5\4\1\0\51\4\16\24\11\0\3\4\1\24\10\4\2\24\2\0"+
    "\12\24\6\0\27\4\3\0\1\4\3\24\62\4\1\24\1\4\3\24"+
    "\2\4\2\24\5\4\2\24\1\4\1\24\1\4\30\0\3\4\2\0"+
    "\13\4\5\24\2\0\3\4\2\24\12\0\6\4\2\0\6\4\2\0"+
    "\6\4\11\0\7\4\1\0\7\4\1\0\53\4\1\0\12\4\12\0"+
    "\163\4\10\24\1\0\2\24\2\0\12\24\6\0\u2ba4\4\14\0\27\4"+
    "\4\0\61\4\u2104\0\u016e\4\2\0\152\4\46\0\7\4\14\0\5\4"+
    "\5\0\1\4\1\24\12\4\1\0\15\4\1\0\5\4\1\0\1\4"+
    "\1\0\2\4\1\0\2\4\1\0\154\4\41\0\u016b\4\22\0\100\4"+
    "\2\0\66\4\50\0\15\4\3\0\20\24\20\0\20\24\3\0\2\4"+
    "\30\0\3\4\31\0\1\4\6\0\5\4\1\0\207\4\2\0\1\24"+
    "\4\0\1\4\13\0\12\24\7\0\32\4\4\0\1\4\1\0\32\4"+
    "\13\0\131\4\3\0\6\4\2\0\6\4\2\0\6\4\2\0\3\4"+
    "\3\0\2\4\3\0\2\4\22\0\3\24\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\25\0\3\1\1\2\1\3\1\2\1\4\1\2\1\5"+
    "\4\2\1\6\3\2\1\7\1\10\1\11\1\1\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\3\22"+
    "\2\1\3\23\2\1\1\24\1\22\1\1\1\25\1\1"+
    "\1\7\1\26\1\27\3\30\3\1\1\31\2\32\2\33"+
    "\1\0\1\34\3\0\1\35\1\36\1\37\1\40\1\41"+
    "\1\0\1\42\4\43\1\22\2\0\1\22\1\23\1\44"+
    "\2\0\1\23\1\0\1\22\1\45\1\30\3\0\1\30"+
    "\1\0\1\46\1\47\1\50\1\51\1\0\1\41\3\43"+
    "\1\0\1\22\1\0\1\23\1\0\1\52\1\30\1\53"+
    "\2\0\3\43\2\44\3\0\3\43\1\52\1\54\1\0"+
    "\1\43\1\55\1\43\1\56\1\0\1\57\1\60";

  private static int [] zzUnpackAction() {
    int [] result = new int[153];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\56\0\134\0\212\0\270\0\346\0\u0114\0\u0142"+
    "\0\u0170\0\u019e\0\u01cc\0\u01fa\0\u0228\0\u0256\0\u0284\0\u02b2"+
    "\0\u02e0\0\u030e\0\u033c\0\u036a\0\u0398\0\u0398\0\u03c6\0\u03f4"+
    "\0\u0398\0\u0422\0\u0450\0\u0398\0\u047e\0\u0398\0\u04ac\0\u03f4"+
    "\0\u04da\0\u0508\0\u0536\0\u0564\0\u0592\0\u05c0\0\u05ee\0\u061c"+
    "\0\u064a\0\u0508\0\u0678\0\u06a6\0\u06d4\0\u0702\0\u0730\0\u0398"+
    "\0\u0398\0\u0398\0\u075e\0\u078c\0\u07ba\0\u078c\0\u07e8\0\u0816"+
    "\0\u0844\0\u0872\0\u08a0\0\u08ce\0\u0398\0\u08fc\0\u092a\0\u0398"+
    "\0\u0958\0\u0986\0\u0398\0\u09b4\0\u09e2\0\u0a10\0\u0a3e\0\u0a6c"+
    "\0\u0a9a\0\u0592\0\u0ac8\0\u0398\0\u03f4\0\u0398\0\u0af6\0\u0b24"+
    "\0\u0398\0\u03f4\0\u0b52\0\u0b80\0\u0398\0\u0bae\0\u0398\0\u0bdc"+
    "\0\u0c0a\0\u0c38\0\u0398\0\u0c66\0\u0c94\0\u0cc2\0\u0cf0\0\u0d1e"+
    "\0\u07e8\0\u0d4c\0\u0398\0\u0d7a\0\u0398\0\u08ce\0\u0da8\0\u0dd6"+
    "\0\u092a\0\u092a\0\u0958\0\u0e04\0\u0e32\0\u0a9a\0\u0e60\0\u0e8e"+
    "\0\u0ebc\0\u0398\0\u0398\0\u0b80\0\u0eea\0\u0f18\0\u0c38\0\u0f46"+
    "\0\u0f74\0\u0fa2\0\u078c\0\u07e8\0\u08a0\0\u0fd0\0\u0a6c\0\u0398"+
    "\0\u0ffe\0\u0398\0\u102c\0\u105a\0\u1088\0\u10b6\0\u10e4\0\u08ce"+
    "\0\u0a9a\0\u1112\0\u1140\0\u116e\0\u119c\0\u11ca\0\u11f8\0\u0a9a"+
    "\0\u0398\0\u1226\0\u1254\0\u0c66\0\u1282\0\u0398\0\u12b0\0\u0c66"+
    "\0\u0c66";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[153];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\15\26\1\27\13\26\1\30\24\26\1\31\2\32\2\31"+
    "\1\33\1\32\3\31\1\34\12\31\1\35\1\36\1\37"+
    "\1\31\1\40\1\41\1\42\1\43\1\44\4\31\1\45"+
    "\2\31\1\46\11\31\1\32\1\47\2\31\1\33\1\32"+
    "\3\31\1\34\12\31\1\35\1\36\1\37\1\31\1\40"+
    "\1\41\1\42\1\50\1\44\4\31\1\45\13\31\1\26"+
    "\2\51\3\26\1\51\22\26\1\30\1\26\1\52\23\26"+
    "\1\53\1\54\3\26\1\53\22\26\1\30\25\26\1\53"+
    "\1\55\3\26\1\53\22\26\1\30\26\26\1\56\26\26"+
    "\1\30\55\26\1\30\24\26\1\31\2\53\2\57\1\31"+
    "\1\53\2\31\1\60\4\31\3\57\4\31\1\57\2\31"+
    "\1\57\1\40\1\61\1\57\1\31\6\57\1\62\2\31"+
    "\10\57\4\26\1\63\3\26\6\64\3\65\2\26\1\66"+
    "\1\26\1\65\1\67\2\26\1\64\2\26\1\64\1\63"+
    "\2\65\1\63\1\65\3\26\1\64\2\65\1\63\3\65"+
    "\1\63\1\65\4\26\1\70\3\26\6\71\3\72\2\26"+
    "\1\73\1\26\1\72\1\74\1\26\1\75\1\71\2\26"+
    "\1\71\1\70\2\72\1\70\1\72\3\26\1\71\2\72"+
    "\1\70\3\72\1\70\1\72\3\26\2\76\1\77\10\26"+
    "\3\76\4\26\1\76\3\26\1\30\3\26\5\76\4\26"+
    "\10\76\1\26\2\32\2\57\1\26\1\32\7\26\3\57"+
    "\4\26\1\57\2\26\1\57\1\30\1\61\1\57\1\26"+
    "\6\57\1\26\1\100\1\26\10\57\31\26\1\30\13\26"+
    "\1\101\10\26\7\102\1\103\46\102\1\26\2\104\3\26"+
    "\1\104\1\103\21\26\1\30\30\26\1\105\3\26\6\106"+
    "\3\107\2\26\1\110\1\26\1\107\1\111\1\26\1\75"+
    "\1\106\2\26\1\106\1\105\2\107\1\105\1\107\1\112"+
    "\2\26\1\106\2\107\1\105\3\107\1\105\1\107\1\26"+
    "\1\113\4\26\1\113\22\26\1\30\10\26\1\112\13\26"+
    "\1\114\2\53\3\114\1\53\22\114\1\115\24\114\1\116"+
    "\1\32\4\116\1\32\1\117\46\116\107\0\1\120\41\0"+
    "\1\121\13\0\1\122\25\0\2\32\3\0\1\32\54\0"+
    "\1\123\37\0\1\124\35\0\1\125\57\0\1\126\60\0"+
    "\1\127\56\0\1\130\56\0\1\43\24\0\2\131\1\132"+
    "\10\0\3\131\4\0\1\131\7\0\5\131\4\0\10\131"+
    "\42\0\1\133\13\0\1\134\2\0\3\134\1\0\30\134"+
    "\1\135\1\136\5\134\1\137\7\134\2\0\1\47\107\0"+
    "\1\50\22\0\2\51\3\0\1\51\50\0\2\53\3\0"+
    "\1\53\50\0\1\53\1\54\3\0\1\53\50\0\1\53"+
    "\1\55\3\0\1\53\51\0\1\56\56\0\2\57\11\0"+
    "\3\57\4\0\1\57\2\0\1\57\2\0\1\57\1\0"+
    "\6\57\3\0\10\57\3\0\2\63\11\0\4\63\2\0"+
    "\1\63\1\140\7\0\5\63\4\0\10\63\10\0\11\64"+
    "\2\0\1\64\1\0\1\64\3\0\1\64\2\0\1\64"+
    "\1\0\2\64\1\0\1\64\3\0\3\64\1\0\3\64"+
    "\1\0\1\64\3\0\2\63\3\0\6\64\3\65\1\63"+
    "\1\0\1\64\1\63\1\65\3\0\1\64\2\0\1\64"+
    "\1\63\2\65\1\63\1\65\3\0\1\64\2\65\1\63"+
    "\3\65\1\63\1\65\1\141\1\0\4\141\1\0\5\141"+
    "\1\142\4\141\2\0\3\141\1\143\27\141\3\0\2\70"+
    "\11\0\4\70\2\0\1\70\1\144\2\0\1\145\4\0"+
    "\5\70\4\0\10\70\10\0\11\71\2\0\1\71\1\0"+
    "\1\71\2\0\1\145\1\71\2\0\1\71\1\0\2\71"+
    "\1\0\1\71\3\0\3\71\1\0\3\71\1\0\1\71"+
    "\3\0\2\70\3\0\6\71\3\72\1\70\1\0\1\71"+
    "\1\70\1\72\2\0\1\145\1\71\2\0\1\71\1\70"+
    "\2\72\1\70\1\72\3\0\1\71\2\72\1\70\3\72"+
    "\1\70\1\72\10\0\11\71\2\0\1\71\1\0\1\71"+
    "\3\0\1\71\2\0\1\71\1\0\2\71\1\0\1\71"+
    "\3\0\3\71\1\0\3\71\1\0\1\71\1\146\1\0"+
    "\4\146\1\0\5\146\1\147\4\146\2\0\3\146\1\150"+
    "\27\146\3\0\2\76\11\0\3\76\4\0\1\76\7\0"+
    "\5\76\4\0\10\76\6\151\1\0\1\152\46\151\1\153"+
    "\2\0\3\153\1\0\47\153\7\102\1\0\46\102\1\0"+
    "\2\104\3\0\1\104\52\0\2\105\11\0\4\105\2\0"+
    "\1\105\1\154\2\0\1\145\4\0\5\105\1\155\3\0"+
    "\10\105\10\0\11\106\2\0\1\106\1\0\1\106\2\0"+
    "\1\145\1\106\2\0\1\106\1\0\2\106\1\0\1\106"+
    "\1\155\2\0\3\106\1\0\3\106\1\0\1\106\3\0"+
    "\2\105\3\0\6\106\3\107\1\105\1\0\1\106\1\105"+
    "\1\107\2\0\1\145\1\106\2\0\1\106\1\105\2\107"+
    "\1\105\1\107\1\155\2\0\1\106\2\107\1\105\3\107"+
    "\1\105\1\107\10\0\11\106\2\0\1\106\1\0\1\106"+
    "\3\0\1\106\2\0\1\106\1\0\2\106\1\0\1\106"+
    "\3\0\3\106\1\0\3\106\1\0\1\106\1\156\1\0"+
    "\4\156\1\0\5\156\1\157\4\156\2\0\3\156\1\160"+
    "\27\156\1\0\2\113\3\0\1\113\56\0\1\161\77\0"+
    "\1\162\31\0\1\163\50\0\1\164\2\0\3\164\1\0"+
    "\47\164\27\0\1\165\64\0\1\166\22\0\2\131\11\0"+
    "\3\131\4\0\1\131\7\0\5\131\4\0\10\131\6\132"+
    "\1\0\1\167\46\132\1\134\2\0\3\134\1\0\50\134"+
    "\2\0\3\134\1\0\27\134\1\170\1\134\1\136\16\134"+
    "\2\0\3\134\1\0\7\134\1\171\40\134\2\0\3\134"+
    "\1\0\40\134\1\172\6\134\3\0\2\63\3\0\6\64"+
    "\3\65\1\63\1\0\1\173\1\63\1\65\3\0\1\64"+
    "\2\0\1\64\1\63\2\65\1\63\1\65\3\0\1\64"+
    "\2\65\1\63\3\65\1\63\1\65\1\141\1\0\4\141"+
    "\1\0\5\141\1\142\11\141\1\174\27\141\3\0\2\70"+
    "\3\0\6\71\3\72\1\70\1\0\1\175\1\70\1\72"+
    "\2\0\1\145\1\71\2\0\1\71\1\70\2\72\1\70"+
    "\1\72\3\0\1\71\2\72\1\70\3\72\1\70\1\72"+
    "\1\146\1\0\4\146\1\0\5\146\1\147\11\146\1\176"+
    "\27\146\30\0\1\145\30\0\2\105\3\0\6\106\3\107"+
    "\1\105\1\0\1\177\1\105\1\107\2\0\1\145\1\106"+
    "\2\0\1\106\1\105\2\107\1\105\1\107\1\155\2\0"+
    "\1\106\2\107\1\105\3\107\1\105\1\107\42\0\1\200"+
    "\13\0\1\156\1\0\4\156\1\0\5\156\1\157\11\156"+
    "\1\201\27\156\30\0\1\145\11\0\1\155\22\0\1\202"+
    "\75\0\1\203\65\0\1\204\16\0\1\134\2\0\3\134"+
    "\1\0\10\134\1\205\37\134\2\0\3\134\1\0\10\134"+
    "\1\206\37\134\2\0\3\134\1\0\41\134\1\207\5\134"+
    "\1\146\1\0\4\146\1\0\5\146\1\147\4\146\2\0"+
    "\3\146\1\150\1\146\1\210\25\146\1\156\1\0\4\156"+
    "\1\0\5\156\1\157\4\156\2\0\3\156\1\160\1\156"+
    "\1\211\11\156\1\212\13\156\27\0\1\213\65\0\1\214"+
    "\16\0\1\134\2\0\3\134\1\0\44\134\1\215\3\134"+
    "\2\0\3\134\1\0\7\134\1\216\40\134\2\0\3\134"+
    "\1\0\42\134\1\217\4\134\1\156\1\0\4\156\1\0"+
    "\5\156\1\157\4\156\2\0\3\156\1\160\13\156\1\220"+
    "\13\156\27\221\1\0\26\221\40\0\1\222\15\0\1\134"+
    "\2\0\3\134\1\0\45\134\1\223\2\134\2\0\3\134"+
    "\1\0\46\134\1\224\1\134\2\0\3\134\1\0\43\134"+
    "\1\225\3\134\13\0\1\226\25\0\1\227\14\0\1\134"+
    "\2\0\3\134\1\0\32\134\1\230\15\134\2\0\3\134"+
    "\1\0\40\134\1\231\6\134\13\0\1\226\42\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4830];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\24\0\1\10\1\11\2\1\1\11\2\1\1\11\1\1"+
    "\1\11\21\1\3\11\12\1\1\11\2\1\1\11\2\1"+
    "\1\11\10\1\1\11\1\1\1\11\1\1\1\0\1\11"+
    "\3\0\1\11\1\1\1\11\2\1\1\0\1\11\5\1"+
    "\2\0\1\11\1\1\1\11\2\0\1\1\1\0\3\1"+
    "\3\0\1\1\1\0\2\11\2\1\1\0\4\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\11\1\1\1\11\2\0"+
    "\5\1\3\0\4\1\1\11\1\0\3\1\1\11\1\0"+
    "\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[153];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

  private boolean isOddItalicBold = false;;

  public _ScalaDocLexer() {
    this((java.io.Reader)null);
  }

  public boolean checkAhead(char c) {
     if (zzMarkedPos >= zzBuffer.length()) return false;
     return zzBuffer.charAt(zzMarkedPos) == c;
  }

  public void goTo(int offset) {
    zzCurrentPos = zzMarkedPos = zzStartRead = offset;
    zzPushbackPos = 0;
    zzAtEOF = offset < zzEndRead;
  }



  public _ScalaDocLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _ScalaDocLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2274) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  // For Demetra compatibility
  public void reset(CharSequence buffer, int initialState){
    zzBuffer = buffer;
    zzBufferArray = null;
    zzCurrentPos = zzMarkedPos = zzStartRead = 0;
    zzPushbackPos = 0;
    zzAtEOF = false;
    zzAtBOL = true;
    zzEndRead = buffer.length();
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 29: 
          { return DOC_UNDERLINE_TAG;
          }
        case 49: break;
        case 18: 
          { yybegin(DOC_TAG_VALUE_SPACE); return DOC_TAG_VALUE_TOKEN;
          }
        case 50: break;
        case 1: 
          { return DOC_COMMENT_BAD_CHARACTER;
          }
        case 51: break;
        case 39: 
          { yybegin(COMMENT_INNER_CODE);
  return DOC_INNER_CODE_TAG;
          }
        case 52: break;
        case 11: 
          { yybegin(PARAM_DOC_TAG_VALUE); return DOC_COMMENT_DATA;
          }
        case 53: break;
        case 20: 
          { return tDOT;
          }
        case 54: break;
        case 7: 
          { return DOC_COMMENT_DATA;
          }
        case 55: break;
        case 30: 
          { return DOC_ITALIC_TAG;
          }
        case 56: break;
        case 12: 
          { yybegin(PARAM_DOC_THROWS_TAG_VALUE); return DOC_COMMENT_DATA;
          }
        case 57: break;
        case 37: 
          { yybegin(INLINE_TAG_DOC_SPACE); return DOC_TAG_NAME;
          }
        case 58: break;
        case 24: 
          { yybegin(CODE_BAD_LINK);
  return tIDENTIFIER;
          }
        case 59: break;
        case 34: 
          { yybegin(COMMENT_DATA);
  return DOC_LINK_CLOSE_TAG;
          }
        case 60: break;
        case 33: 
          { return DOC_MACROS;
          }
        case 61: break;
        case 14: 
          { return DOC_TAG_VALUE_TOKEN;
          }
        case 62: break;
        case 28: 
          { return DOC_COMMENT_END;
          }
        case 63: break;
        case 13: 
          { yybegin(PARAM_DOC_DEFINE_TAG_VALUE); return DOC_COMMENT_DATA;
          }
        case 64: break;
        case 43: 
          { yybegin(COMMENT_DATA);
  return DOC_INNER_CLOSE_CODE_TAG;
          }
        case 65: break;
        case 15: 
          { return DOC_TAG_VALUE_SHARP_TOKEN;
          }
        case 66: break;
        case 19: 
          { yybegin(DOC_TAG_VALUE_SPACE);
  return tIDENTIFIER;
          }
        case 67: break;
        case 26: 
          { yybegin(COMMENT_DATA); return DOC_COMMENT_DATA;
          }
        case 68: break;
        case 6: 
          { return VALID_DOC_HEADER;
          }
        case 69: break;
        case 38: 
          { yybegin(COMMENT_DATA_START); return DOC_COMMENT_START;
          }
        case 70: break;
        case 47: 
          { yybegin(PARAM_THROWS_TAG_DOC_SPACE); return DOC_TAG_NAME;
          }
        case 71: break;
        case 42: 
          // lookahead expression with fixed lookahead length
          yypushback(2);
          { return tIDENTIFIER;
          }
        case 72: break;
        case 36: 
          // lookahead expression with fixed lookahead length
          yypushback(1);
          { return tIDENTIFIER;
          }
        case 73: break;
        case 27: 
          { yybegin(COMMENT_INNER_CODE);
  return DOC_INNER_CODE;
          }
        case 74: break;
        case 25: 
          { yybegin(COMMENT_DATA);
  return DOC_WHITESPACE;
          }
        case 75: break;
        case 48: 
          { yybegin(PARAM_DEFINE_TAG_DOC_SPACE); return DOC_TAG_NAME;
          }
        case 76: break;
        case 8: 
          { return DOC_HEADER;
          }
        case 77: break;
        case 31: 
          { return DOC_SUBSCRIPT_TAG;
          }
        case 78: break;
        case 17: 
          { yybegin(DOC_TAG_VALUE_IN_PAREN); return DOC_TAG_VALUE_LPAREN;
          }
        case 79: break;
        case 40: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { yybegin(INLINE_TAG_NAME);
  return DOC_INLINE_TAG_START;
          }
        case 80: break;
        case 16: 
          { return DOC_TAG_VALUE_COMMA;
          }
        case 81: break;
        case 41: 
          { return DOC_BOLD_TAG;
          }
        case 82: break;
        case 35: 
          { yybegin(TAG_DOC_SPACE); return DOC_TAG_NAME;
          }
        case 83: break;
        case 9: 
          { yybegin(COMMENT_DATA);
   return DOC_WHITESPACE;
          }
        case 84: break;
        case 45: 
          { yybegin(PARAM_TAG_DOC_SPACE); return DOC_TAG_NAME;
          }
        case 85: break;
        case 10: 
          { yybegin(COMMENT_DATA); return DOC_WHITESPACE;
          }
        case 86: break;
        case 32: 
          { yybegin(CODE_LINK_INNER);
  return DOC_LINK_TAG;
          }
        case 87: break;
        case 44: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 3;
          { if (isOddItalicBold) {
    isOddItalicBold = false;
    yypushback(1);
    return DOC_ITALIC_TAG;
  }
  isOddItalicBold = true;
  return DOC_BOLD_TAG;
          }
        case 88: break;
        case 23: 
          { yybegin(INLINE_DOC_TAG_VALUE);
  return DOC_WHITESPACE;
          }
        case 89: break;
        case 22: 
          { yybegin(COMMENT_DATA); return DOC_INLINE_TAG_END;
          }
        case 90: break;
        case 4: 
          { return DOC_SUPERSCRIPT_TAG;
          }
        case 91: break;
        case 3: 
          { return DOC_WHITESPACE;
          }
        case 92: break;
        case 5: 
          { return DOC_MONOSPACE_TAG;
          }
        case 93: break;
        case 21: 
          { yybegin(DOC_TAG_VALUE); return DOC_TAG_VALUE_RPAREN;
          }
        case 94: break;
        case 46: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 2;
          { yybegin(COMMENT_DATA);
  return DOC_HTTP_LINK_TAG;
          }
        case 95: break;
        case 2: 
          { yybegin(COMMENT_DATA);
  return DOC_COMMENT_DATA;
          }
        case 96: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
