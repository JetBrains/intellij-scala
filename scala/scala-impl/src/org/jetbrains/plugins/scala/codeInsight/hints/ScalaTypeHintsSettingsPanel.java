package org.jetbrains.plugins.scala.codeInsight.hints;

import com.intellij.openapi.util.Getter;
import com.intellij.openapi.util.Setter;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import javax.swing.*;
import java.awt.*;

import static org.jetbrains.plugins.scala.codeInsight.ScalaCodeInsightSettings.*;

public class ScalaTypeHintsSettingsPanel {

    private JPanel panel;
    private SpinnerNumberModel presentationLengthModel;
    private JSpinner presentationLengthSpinner;

    public JPanel getPanel() {
        return panel;
    }

    public Getter<Integer> presentationLengthGetter() {
        return () -> presentationLengthModel != null ?
                (Integer) presentationLengthModel.getValue()
                : null;
    }

    public Setter<Integer> presentationLengthSetter() {
        return show -> {
            if (presentationLengthModel != null && show != null) {
                presentationLengthModel.setValue(show);
            }
        };
    }

    private void createUIComponents() {
        presentationLengthModel = new SpinnerNumberModel(
                getInstance().getPresentationLength(),
                MIN_PRESENTATION_LENGTH,
                MAX_PRESENTATION_LENGTH,
                1
        );
        presentationLengthSpinner = new JSpinner(presentationLengthModel);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        panel = new JPanel();
        panel.setLayout(new GridLayoutManager(2, 4, new Insets(0, 0, 0, 0), -1, -1));
        final JLabel label1 = new JLabel();
        label1.setText("Show type hints up to:");
        panel.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        panel.add(presentationLengthSpinner, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("characters");
        panel.add(label2, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        panel.add(spacer1, new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        label1.setLabelFor(presentationLengthSpinner);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel;
    }
}
