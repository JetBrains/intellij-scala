### META-INF/codeInsight.xml
no.tailrec.annotation.title=No tail recursion annotation
group.general=General
intention.category.scala.argument.conversion=Scala/Argument conversion
intention.category.scala.boolean=Scala/Boolean
intention.category.scala.control.flow=Scala/Control flow
intention.category.scala.strings=Scala/Strings
intention.category.scala.strings.formatted.strings=Scala/Strings/Formatted strings
intention.category.scala.strings.interpolated.strings=Scala/Strings/Interpolated strings
intention.category.scala.string.string.concatenations=Scala/Strings/String concatenations
intention.category.scala.recursion=Scala/Recursion

### org/jetbrains/plugins/scala/codeInsight/generation/actions/ScalaGenerateCompanionObjectAction.scala
generate.companion.object.action.text=Companion object
generate.companion.object.action.description=Generate companion object

### org/jetbrains/plugins/scala/codeInsight/generation/actions/ScalaGenerateEqualsAction.scala
generate.equals.and.hashcode.methods.action.text=equals() and hashCode()
generate.equals.and.hashcode.methods.action.description=Generate equals() and hashCode() methods
no.fields.to.include.in.equals.hashcode.have.been.found=No fields to include in equals/hashCode have been found

### org/jetbrains/plugins/scala/codeInsight/generation/actions/ScalaGeneratePropertyAction.scala
generate.proprty.action.text=Property (getter and setter)
generate.proprty.action.description=Generate property

### org/jetbrains/plugins/scala/codeInsight/generation/actions/ScalaGenerateToStringAction.scala
generate.tostring.method.action.text=toString()
generate.tostring.method.action.description=Generate toString() method

### org/jetbrains/plugins/scala/codeInsight/generation/ui/ScalaGenerateToStringWizard.scala
generate.ui.toString.title=Generate toString
generate.ui.toString.properties=Properties to generate toString from
generate.ui.toString.withNames=With &properties names

### org/jetbrains/plugins/scala/codeInsight/hints/GeneralSettingsPanel.form
inlay.hints.respect.vertical.alignment=Respect vertical alignment
inlay.hints.limit.hint.length.to=Limit hint length to
inlay.hints.characters=characters
show.types.even.if.they.are.obvious=Show types even if they are obvious

### org/jetbrains/plugins/scala/codeInsight/hints/ScalaHintsSettings.scala
enable.xray.settings.path=Enable Settings | Languages | Scala | X-Ray Mode
xray.mode.tip=<p style="font-size: 90%; margin-top: 5px; color: gray;">Tip: {0} to show hints on demand (X-Ray Mode)</p>

### org/jetbrains/plugins/scala/codeInsight/hints/ScalaInlayParameterHintsPass.scala
disable.hints.for.parameter.names=Disable hints for parameter names
configure.parameter.name.hints=Configure parameter name hints...

### org/jetbrains/plugins/scala/codeInsight/hints/ScalaParameterHintsSettingsModel.scala
parameter.name.hints=Scala
parameter.name.hints.description=Show inlay hints for parameter names {0}

### org/jetbrains/plugins/scala/codeInsight/hints/ScalaTypeHintsConfigurable.scala
parameter.name.hints.action.text=Scala: Parameter name hints
parameter.name.hints.action.description=Show parameter name hints
method.chain.hints.action.text=Scala: Show method chain hints
method.chain.hints.action.description=Show method chain hints
show.range.hints.for.to.and.until=Show range hints for 'to' and 'until'
range.hints.for.to.and.until.action.text=Scala: Show range hints for 'to' and 'until'
show.method.result.action.text=Scala: Show method result type
show.method.result.action.description=Show method result type
show.member.variable.action.text=Scala: Show member variable type
show.member.variable.action.description=Show member variable type
show.local.variable.action.text=Scala: Show local variable type
show.local.variable.action.description=Show local variable type
type.hints.action.text=Scala: Show inlay hints for types
type.hints.action.description=Toggles inlay hints for member variables, local variables and method result types
show.exclusive.range.hint.action.text=Scala: Show hints for Range.exclusive
xray.mode.tip.context.menu=Tip: {0} to show hints on demand (X-Ray Mode)

### org/jetbrains/plugins/scala/codeInsight/hints/ScalaTypeHintsPass.scala
disable.type.hints.for.local.variables=Disable type hints for local variables
disable.type.hints.for.member.variables=Disable type hints for member variables
disable.type.hints.for.method.results=Disable type hints for method results
configure.type.hints=Configure type hints...

### org/jetbrains/plugins/scala/codeInsight/hints/ScalaTypeHintsSettingsModel.scala
method.results=Method result types
method.results.description=Show inlay hints for method result types {0}
local.variables=Local variable types
local.variables.description=Show inlay hints for local variable types {0}
member.variables=Member variable types
member.variables.description=Show inlay hints for member variable types {0}
type.hints.description=Show inlay hints for types {0}

### org/jetbrains/plugins/scala/codeInsight/hints/XRayModeAction.scala
action.xray.mode=X-Ray Mode

### org/jetbrains/plugins/scala/codeInsight/hints/XRayModeTip.scala
xray.mode.tip.title.implicit.hints=Use X-Ray mode to show implicit hints on demand
xray.mode.tip.title.type.hints=Use X-Ray mode to show type hints on demand
xray.mode.tip.action.got.it=Got It
xray.mode.tip.action.configure=Configure...

### org/jetbrains/plugins/scala/codeInsight/hints/XRayModeWidgetActionProvider.scala
xray.mode.widget.text=X-Ray Mode
xray.mode.widget.tooltip.pin=Pin X-Ray Mode
xray.mode.widget.tooltip.enter=Enter X-Ray Mode
xray.mode.widget.tooltip.exit=Exit X-Ray Mode
xray.mode.widget.tooltip.link=Configure...

### org/jetbrains/plugins/scala/codeInsight/hints/methodChains/ScalaMethodChainInlayHintsPass.scala
disable.hints.for.method.chains=Disable hints for method chains
configure.method.chain.hints=Configure method chain hints...

### org/jetbrains/plugins/scala/codeInsight/hints/methodChains/ScalaMethodChainInlayHintsSettingsModel.scala
method.chain.hints=Method Chain
method.chain.hints.description=Show inlay hints for call chains {0}
method.chain.hints.link.to.general.settings=Scala type hint settings

### org/jetbrains/plugins/scala/codeInsight/hints/methodChains/ScalaMethodChainInlaySettingsPanel.form
in.a.separate.column=In a separate column
inlay.hints.only.when.there.are.at.least=Minimal unique type count to show hints

### org/jetbrains/plugins/scala/codeInsight/hints/rangeHints/ExclusiveRangeHintSettingsModel.scala
show.exclusive.range.hint=Show exclusive range hints
range.exclusive.hint=Range.exclusive
range.exclusive.hint.description=Show inlay hints for exclusive ranges {0}

### org/jetbrains/plugins/scala/codeInsight/hints/rangeHints/RangeHintsForToAndUntilSettingsModel.scala
range.hints.for.to.and.until=Range hints for 'to' and 'until'
range.hints.for.to.and.until.description=Show inlay hints for ranges {0}

### org/jetbrains/plugins/scala/codeInsight/hints/rangeHints/RangeInlayHintsPass.scala
disable.hints.for.exclusive.ranges=Disable hints for exclusive ranges
disable.range.hints.for.to.and.until=Disable range hints for 'to' and 'until'
configure.range.hints=Configure range hints...

### org/jetbrains/plugins/scala/codeInsight/implicits/ExpandImplicitHintsAction.scala
expand.implicit.hints.action.text=Expand Implicit Hints
expand.implicit.hints.action.description=Expand implicit conversions / arguments inlay hints in editor

### org/jetbrains/plugins/scala/codeInsight/implicits/ImplicitHintsPass.scala
implicit.is.diverged=Implicit is diverged
can.t.infer.proper.types.for.type.parameters=Can't infer proper types for type parameters
no.implicits.found.for.parameter=No implicits found for parameter {0}
no.implicits.found.for.parameters=No implicits found for parameters {0}
ambiguous.implicits.for.parameter=Ambiguous implicits for parameter {0}

### org/jetbrains/plugins/scala/codeInsight/implicits/ShowImplicitHintsAction.scala
show.implicit.hints.action.text=Show Implicit Hints
show.implicit.hints.action.description=Show implicit conversions / arguments as inlay hints in editor

### org/jetbrains/plugins/scala/codeInsight/implicits/menu/ImplicitArgumentsPopup.scala
implicit.arguments.popup.action.text=Implicit Arguments Popup
implicit.arguments.popup.action.description=Implicit Arguments Popup

### org/jetbrains/plugins/scala/codeInsight/implicits/menu/MakeConversionExplicit.scala
make.conversion.explicit.action.text=Make conversion explicit
make.conversion.explicit.action.description=Make conversion explicit

### org/jetbrains/plugins/scala/codeInsight/implicits/menu/RemoveExplicitArguments.scala
remove.explicit.arguments.action.text=Remove explicit arguments
remove.explicit.arguments.action.description=Remove explicit arguments

### org/jetbrains/plugins/scala/codeInsight/intention/argument/AddNameToArgumentIntention.scala
family.name.use.named.arguments=Use named arguments
use.named.arguments.for.current.and.subsequent.arguments=Use named arguments for current and subsequent arguments

### org/jetbrains/plugins/scala/codeInsight/intention/argument/ArgumentToBlockExpressionIntention.scala
family.name.convert.to.block.expression=Convert to block expression

### org/jetbrains/plugins/scala/codeInsight/intention/argument/BlockExpressionToArgumentIntention.scala
family.name.convert.to.argument.in.parentheses=Convert to argument in parentheses

### org/jetbrains/plugins/scala/codeInsight/intention/argument/PermuteArgumentsIntention.scala
family.name.permute.arguments=Permute arguments
permute.arguments.to.match.the.parameter.declaration.order=Permute arguments to match the parameter declaration order

### org/jetbrains/plugins/scala/codeInsight/intention/booleans/DeMorganLawIntention.scala
family.name.demorgan.law=Apply DeMorgan Law
replace.refname.with.replacement=Replace ''{0}'' with {1}''

### org/jetbrains/plugins/scala/codeInsight/intention/booleans/ExpandBooleanIntention.scala
expand.boolean.use.to.ifelse=Expand boolean use to 'if else'
family.name.expand.boolean=Expand Boolean

### org/jetbrains/plugins/scala/codeInsight/intention/booleans/FlipComparisonInInfixExprIntention.scala
family.name.flip.comparison.in.infix.expression=Flip comparison in infix expression
flip.operation=Flip ''{0}''
flip.operation.to.inverse=Flip ''{0}'' to ''{1}''

### org/jetbrains/plugins/scala/codeInsight/intention/booleans/FlipComparisonInMethodCallExprIntention.scala
family.name.flip.comparison.in.method.call.expression=Flip comparison in method call expression

### org/jetbrains/plugins/scala/codeInsight/intention/booleans/NegateComparisonIntention.scala
family.name.negate.comparison=Negate comparison
negate.operation.to.inverse=Negate ''{0}'' to ''{1}''

### org/jetbrains/plugins/scala/codeInsight/intention/booleans/ReplaceEqualsOrEqualityInInfixExprIntention.scala
family.name.replace.equals.or.equality.in.infix.expression=Replace equals or equality in infix expression

### org/jetbrains/plugins/scala/codeInsight/intention/booleans/ReplaceEqualsOrEqualityInMethodCallExprIntention.scala
family.name.replace.equals.or.equality.in.method.call.expression=Replace equals or equality in method call expression
replace.operator.with.replacement=Replace ''{0}'' with ''{1}''

### org/jetbrains/plugins/scala/codeInsight/intention/booleans/SimplifyBooleanExprWithLiteralIntention.scala
family.name.simplify.boolean.expression.with.a.literal=Simplify boolean expression
simplify.boolean.expression=Simplify boolean expression

### org/jetbrains/plugins/scala/codeInsight/intention/controlFlow/InvertIfConditionIntention.scala
family.name.invert.if.condition=Invert If condition

### org/jetbrains/plugins/scala/codeInsight/intention/controlFlow/MergeElseIfIntention.scala
family.name.merge.else.if=Merge Else If
merge.elseif=Merge 'else if'

### org/jetbrains/plugins/scala/codeInsight/intention/controlFlow/MergeIfToAndIntention.scala
family.name.merge.nested.ifs.to.anded.condition=Merge nested 'if' statements
merge.nested.ifs=Merge nested 'if's

### org/jetbrains/plugins/scala/codeInsight/intention/controlFlow/MergeIfToOrIntention.scala
family.name.merge.equivalent.ifs.to.ored.condition=Merge sequential 'if' statements
merge.sequential.ifs=Merge sequential 'if's

### org/jetbrains/plugins/scala/codeInsight/intention/controlFlow/RemoveRedundantElseIntention.scala
family.name.remove.redundant.else=Remove redundant Else
remove.redundant.else=Remove redundant 'else'

### org/jetbrains/plugins/scala/codeInsight/intention/controlFlow/ReplaceDoWhileWithWhileIntention.scala
family.name.replace.do.while.with.while=Replace do while with while
this.action.will.cause.name.conflict=This action will cause name conflict.

### org/jetbrains/plugins/scala/codeInsight/intention/controlFlow/ReplaceWhileWithDoWhileIntention.scala
family.name.replace.while.with.do.while=Replace while with do while

### org/jetbrains/plugins/scala/codeInsight/intention/controlFlow/SplitElseIfIntention.scala
family.name.split.else.if=Split Else If
split.elseif=Split 'else if'

### org/jetbrains/plugins/scala/codeInsight/intention/controlFlow/SplitIfIntention.scala
family.name.split.if=Split If
split.into.2.if.s=Split into 2 'if's

### org/jetbrains/plugins/scala/codeInsight/intention/declarations/ChangeAccessModifierIntention.scala
change.access.modifier.intention=Change access modifier
change.access.modifier.intention.family=Change access modifiers
change.access.modifier.preview=Changes modifier of ''{0}'' to {1}
make.0.1=Make ''{0}'' {1}
detecting.possible.conflicts=Detecting possible conflicts
0.with.1.visibility.is.not.accessible.from.2={0} with {1} visibility is not accessible from {2}
title.change.modifier=Change Modifier

### org/jetbrains/plugins/scala/codeInsight/intention/recursion/AddTailRecursionAnnotationIntention.scala
no.tailrec.annotation.fix=Add @tailrec annotation
family.name.recursion=Add @tailrec annotation

### org/jetbrains/plugins/scala/codeInsight/intention/stringLiteral/AddReplaceSlashRToMLStringIntention.scala
family.name.add.replace.call=Add .replace("\\r","")
add.replace.call=Add 'replace("\\r", "")'

### org/jetbrains/plugins/scala/codeInsight/intention/stringLiteral/AddStripMarginToMLStringIntention.scala
family.name.add.stripmargin=Add .stripMargin
add.stripmargin=Add 'stripMargin'

### org/jetbrains/plugins/scala/codeInsight/intention/stringLiteral/FormatConversionIntention.scala
convert.to.string.concatenation=Convert to string concatenation
convert.to.interpolated.string=Convert to interpolated string
convert.to.formatted.string=Convert to formatted string

### org/jetbrains/plugins/scala/codeInsight/intention/stringLiteral/InsertGapIntoStringIntention.scala
family.name.insert.gap=Insert gap
insert.gap.with.concatenation=Insert gap with concatenation: (" +  + ")

### org/jetbrains/plugins/scala/codeInsight/intention/stringLiteral/StringToMultilineStringIntention.scala
family.name.regular.multi.line.string.conversion=Convert between Regular/Multi-line String
convert.to.normal.string=Convert to "string"
convert.to.multiline.string=Convert to """string"""

### org/jetbrains/plugins/scala/codeInsight/template/impl/ScalaBlankLineContextType.scala
element.context.type.blank.line=Blank line

### org/jetbrains/plugins/scala/codeInsight/template/impl/ScalaCodeContextType.scala
element.context.type.code=Code

### org/jetbrains/plugins/scala/codeInsight/template/impl/ScalaCommentContextType.scala
element.context.type.comment=Comment

### org/jetbrains/plugins/scala/codeInsight/template/impl/ScalaImplicitClassContextType.scala
element.context.type.implicit.class=Implicit Class

### org/jetbrains/plugins/scala/codeInsight/template/impl/ScalaStringContextType.scala
element.context.type.string=String

### org/jetbrains/plugins/scala/codeInsight/template/impl/ScalaXmlContextType.scala
element.context.type.xml=XML

### org/jetbrains/plugins/scala/codeInsight/template/macros/ScalaAnnotatedMacro.scala
macro.annotated=annotated("annotation qname")

### org/jetbrains/plugins/scala/codeInsight/template/macros/ScalaImplicitClassNameMacro.scala
macro.implicit.value.class.name=implicitValueClassName(TYPE_TEXT)

### org/jetbrains/plugins/scala/codeInsight/template/macros/ScalaPrimaryConstructorMacro.scala
macro.primaryConstructor.param.names=primaryConstructorParamNames
macro.primaryConstructor.param.types=primaryConstructorParamTypes
macro.primaryConstructor.param.instances=primaryConstructorParams

### org/jetbrains/plugins/scala/codeInsight/template/macros/ScalaSubtypesMacro.scala
macro.subtypes=subtypes(TYPE)

### org/jetbrains/plugins/scala/codeInsight/template/macros/ScalaSuggestVariableNameByTypeMacro.scala
macro.suggest.variable.name.by.type=suggestVariableNameByTypeText(TYPE_TEXT)

### org/jetbrains/plugins/scala/codeInsight/template/macros/ScalaTypeParametersMacro.scala
marco.typeParameters=typeParams(CLASS)
marco.typeParameters.without.bounds=typeParamsWithoutBounds(CLASS)
