### META-INF/compiler-integration.xml
displayname.scala.compile.server=Scala Compile Server

### org/jetbrains/plugins/scala/compiler/CompileServerLauncher.scala
cannot.start.scala.compile.server=Cannot start Scala compile server
required.file.not.found.paths=Required file(s) not found: {0}
can.t.find.default.jdk=Can't find default jdk
cant.find.jdk=Can''t find jdk: {0}
compile.server.terminated.unexpectedly.0.port.1.pid=Compile server terminated unexpectedly<br>(port: {0}, pid: {1})

### org/jetbrains/plugins/scala/compiler/CompileServerManager.scala
scala.compile.server.title=Scala Compile Server
action.run=&Run
start.compile.server=Start compile server
action.stop=&Stop
shutdown.compile.server=Shutdown compile server
action.configure=&Configure...
configure.compile.server=Configure compile server
compile.server.stopped.due.to.inactivity=Compile server stopped due to inactivity

### org/jetbrains/plugins/scala/compiler/CompileServerNotificationsService.scala
wrong.jdk.action.use.jdk=Use JDK {0}

### org/jetbrains/plugins/scala/compiler/EnsureModulesHaveDifferentProdAndTestOutputsTask.scala
shared.compile.output.paths.in.scala.modules=Shared compile output paths in Scala module(s)
production.and.test.output.paths.are.shared.in=Production and test output paths are shared in: {0}
split.output.paths.automatically=Split output path(s) automatically
cancel.compilation=Cancel compilation

### org/jetbrains/plugins/scala/compiler/ScalaCompileServerForm.form
#ScalaCompileServer UI
jvm.options=VM &options:
jvm.maximum.heap.size.mb=Maximum &heap size, MB:
jdk=&JDK:
minutes=minutes
compile.server.jvm.command.line.parameters=Compile server JVM command line parameters
compile.server.shutdown.if.idle.for=Stop if idle for
compile.server.use.for.scala=Use compile server
compile.server.parallelism=threads
compile.server.parallel.compilation=Compile independent modules in parallel, in up to

### org/jetbrains/plugins/scala/compiler/ScalaCompileServerForm.java
compile.server.new.project.restart=To change the process working directory, the server has to be restarted on each project change.
compile.server.use.project.home=Start process in &project directory
compile.server.description=The JDK is used to instantiate the compile server and to invoke an in-process Java compiler (when JDK and module SDK match). The Recommended JDK ensures correct operation of the Scala Compile Server in a given project. The user can override this choice by manually selecting a different JDK.
compile.server.jdk.too.old=Incompatible JDK selected. The Scala Compile Server requires JDK 8 or higher. Please select another JDK.
compile.server.wrong.jdk.selected=The Scala compiler is used for highlighting the project. This functionality requires JDK 11 or higher. The selected JDK for running the Scala Compile Server will lead to runtime exceptions. Please select another JDK.

### org/jetbrains/plugins/scala/compiler/actions/internal/ScalaCollectShortTroubleshootingInfoAction.scala
scala.collect.troubleshooting.information.short.action.text=(Scala) Collect Troubleshooting Information Short
scala.collect.troubleshooting.information.short.action.description=Collect Scala Plugin and IntelliJ IDEA versions to quickly paste them to YouTrack
short.troubleshooting.summary.copied.to.your.clipboard.with.summary=Short troubleshooting summary copied to your clipboard\n{0}

### org/jetbrains/plugins/scala/compiler/actions/internal/compilertrees/ShowScalaCompilerTreeAction.scala
show.scala.compiler.trees.action.title=Show Scala Compiler Trees
compiling.file=Compiling file {0}
scala.compiler.trees.for=Scala Compiler Trees for {0}
compilation.error=Compilation error ({0})
couldn.t.parse.trees.from.the.compiler.output=Couldn't parse trees from the compiler output

### org/jetbrains/plugins/scala/compiler/actions/internal/compilertrees/ui/CompilerTreesDialog.scala
show.empty.phases=Show empty phases

### org/jetbrains/plugins/scala/compiler/charts/ui/ActionPanel.scala
compilation.charts.level=Level: 
compilation.charts.reset.zoom.action.text=Reset vertical zoom
compilation.charts.reset.zoom.action.description=Reset vertical zoom for compilation charts
compilation.charts.zoom.out.action.text=Vertical zoom out
compilation.charts.zoom.out.action.description=Vertical zoom out for compilation charts
compilation.charts.zoom.in.action.text=Vertical zoom in
compilation.charts.zoom.in.action.description=Vertical zoom in for compilation charts

### org/jetbrains/plugins/scala/compiler/charts/ui/CompilationChartsBuildToolWindowNodeFactory.scala
compilation.charts.title=Chart

### org/jetbrains/plugins/scala/compiler/highlighting/CompilerEventGeneratingClient.scala
highlighting.compilation.progress=Highlighting: {0}

### org/jetbrains/plugins/scala/compiler/highlighting/CompilerHighlightingService.scala
highlighting.compilation=Error/Warning highlighting

### org/jetbrains/plugins/scala/compiler/highlighting/ToggleCompilerHighlightingAction.scala
scala.project.settings.form.compiler.highlighting.scala=Use compiler for error highlighting in Scala
scala.project.settings.form.compiler.highlighting.scala.version=Use compiler for error highlighting in Scala {0}
scala.project.settings.form.compiler.highlighting.tooltip=Use error messages directly from the compiler instead of the built-in highlighter. This will result in error highlighting that is more precise, but may show up more slowly and inspections and quickfixes may not be available.

### org/jetbrains/plugins/scala/compiler/package.scala
wrong.jdk.action.open.compile.server.settings=Open Compile Server settings
unexpected.sdk.type.for.sdk=Unexpected sdk type: ''{0}'' for sdk {1}

### org/jetbrains/plugins/scala/compiler/references/ScalaCompilerReferenceService.scala
open.compiler.index.reader=Open compiler index reader
index.invalidation.callback=Index invalidation callback

### org/jetbrains/plugins/scala/compiler/references/compilation/JpsCompilationWatcher.scala
malformed.message.from.builder=Malformed messageText from builder: {0}

### org/jetbrains/plugins/scala/compiler/references/compilation/SbtCompilationWatcher.scala
failed.to.parse.offline.compilation.analysis.files=Failed to parse offline compilation analysis files.
sbt.module.added=sbt module added.
sbt.connection.failure=sbt compilation supervisor: connection failure.
failed.to.parse.compilation.info.file=Failed to parse compilation info file {0}
error.while.reading.sbt.compilation.info=An error occurred while trying to read sbt compilation info files.

### org/jetbrains/plugins/scala/compiler/references/indices/CompilerReferenceIndexer.scala
bytecode.indices.indexing=Indexing classfiles ...
title.initializing.compiler.indices.writer=Initializing compiler indices writer
title.closing.compiler.indices.writer=Closing compiler indices writer
title.invalidating.compiler.indices=Invalidating compiler indices

### org/jetbrains/plugins/scala/compiler/references/indices/CompilerReferenceIndexerScheduler.scala
bytecode.indices.progress.title=Indexing recompiled classfiles ...

### org/jetbrains/plugins/scala/compiler/references/search/CompilerIndicesReferencesSearcher.scala
bytecode.indices.unavailable=Find Usages via bytecode indices is unavailable during compilation.
bytecode.indices.in.progress=Indexing In Progress
calculating.dirty.scopes=Calculating dirty scopes

### org/jetbrains/plugins/scala/compiler/references/search/CompilerIndicesSearcher.scala
bytecode.indices.find.usages=Find Usages
bytecode.indices.invalidated.title=Usages Invalidated
bytecode.indices.invalidated.message=Some usages in the following files may have been invalidated, due to external changes: {0}.

### org/jetbrains/plugins/scala/compiler/references/search/ImplicitUsagesSearchDialogs.scala
bytecode.indices.find.usages.with.title=Find Usages ({0})
bytecode.indices.settings.navigate=Navigate to bytecode indices settings
bytecode.indices.enable.indexing=Enable Bytecode Indexing
bytecode.indices.enable=Enable
bytecode.indices.enable.and.restart=Enable and restart
bytecode.indices.precompile=Pre-compile modules in use scope before searching
bytecode.indices.bytecode=bytecode
bytecode.indices.settings=Settings | Bytecode Indices
bytecode.indices.required=This search relies on the
bytecode.indices.outdated=, which is not up-to-date.
bytecode.indices.incomplete=Results may be incomplete without a compilation.
bytecode.indices.must.be.enabled.1=Searching for {0} usages requires bytecode indices to be enabled.
bytecode.indices.must.be.enabled.2=Do you want to enable bytecode indexing (takes effect after IDEA restart)?

### org/jetbrains/plugins/scala/compiler/references/settings/CompilerIndicesConfigurable.scala
bytecode.indices=Bytecode Indices
bytecode.indices.restart.title=Bytecode Indices Settings Update
bytecode.indices.restart.message=Restart IDEA to activate changes in bytecode indices settings?
bytecode.indices.shutdown.message=Shutdown IDEA to activate changes in bytecode indices settings?

### org/jetbrains/plugins/scala/compiler/references/settings/CompilerIndicesSettingsForm.form
scala.compiler.indices.settings.enable.cb=&Index .class files
scala.compiler.indices.settings.invalidate.button=&Delete indices
scala.compiler.indices.sbt.automatic=&Automatic (requires sbt shell)
scala.compiler.indices.sbt.manual=&Manual
#Bytecode indices settings
apply.unapply.methods=apply / unapply methods
for.comprehension.methods=For-comprehension methods (map, withFilter, flatMap, foreach)
add.line.to.build.sbt=Add the following line to build.sbt:
add.line.to.plugins.sbt=Add the following line to project/plugins.sbt:
implicit.definitions=Implicit definitions
port.number=Port number:
sam.types=SAM types
sbt.compilation.listener=sbt compilation listener configuration (application-wide)
use.indices.to.search=Use indices to search for usages of:

### org/jetbrains/plugins/scala/compiler/references/settings/CompilerIndicesSettingsForm.java
are.you.sure.you.want.to.delete.the.bytecode.indices=Are you sure you want to delete the bytecode indices?
delete.bytecode.indices=Delete Bytecode Indices
